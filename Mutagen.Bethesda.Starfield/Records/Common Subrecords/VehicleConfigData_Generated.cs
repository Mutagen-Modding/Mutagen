/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class VehicleConfigData :
        IEquatable<IVehicleConfigDataGetter>,
        ILoquiObjectSetter<VehicleConfigData>,
        IVehicleConfigData
    {
        #region Ctor
        public VehicleConfigData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region NodeNamesSuspensionFrontLeft
        public String NodeNamesSuspensionFrontLeft { get; set; } = string.Empty;
        #endregion
        #region NodeNamesSuspensionFrontRight
        public String NodeNamesSuspensionFrontRight { get; set; } = string.Empty;
        #endregion
        #region NodeNamesSuspensionRearLeft
        public String NodeNamesSuspensionRearLeft { get; set; } = string.Empty;
        #endregion
        #region NodeNamesSuspensionRearRight
        public String NodeNamesSuspensionRearRight { get; set; } = string.Empty;
        #endregion
        #region NodeNamesWheelFrontLeft
        public String NodeNamesWheelFrontLeft { get; set; } = string.Empty;
        #endregion
        #region NodeNamesWheelFrontRight
        public String NodeNamesWheelFrontRight { get; set; } = string.Empty;
        #endregion
        #region NodeNamesWheelRearLeft
        public String NodeNamesWheelRearLeft { get; set; } = string.Empty;
        #endregion
        #region NodeNamesWheelRearRight
        public String NodeNamesWheelRearRight { get; set; } = string.Empty;
        #endregion
        #region ChassisForwardAxis
        public UInt32 ChassisForwardAxis { get; set; } = default(UInt32);
        #endregion
        #region ChassisUpAxis
        public UInt32 ChassisUpAxis { get; set; } = default(UInt32);
        #endregion
        #region ChassisVehicleMass
        public Single ChassisVehicleMass { get; set; } = default(Single);
        #endregion
        #region ChassisFrictionEqualizer
        public Single ChassisFrictionEqualizer { get; set; } = default(Single);
        #endregion
        #region ChassisTorqueRoll
        public Single ChassisTorqueRoll { get; set; } = default(Single);
        #endregion
        #region ChassisTorquePitch
        public Single ChassisTorquePitch { get; set; } = default(Single);
        #endregion
        #region ChassisTorqueYaw
        public Single ChassisTorqueYaw { get; set; } = default(Single);
        #endregion
        #region ChassisInertiaYaw
        public Single ChassisInertiaYaw { get; set; } = default(Single);
        #endregion
        #region ChassisInertiaRoll
        public Single ChassisInertiaRoll { get; set; } = default(Single);
        #endregion
        #region ChassisInertialPitch
        public Single ChassisInertialPitch { get; set; } = default(Single);
        #endregion
        #region ChassisExtraTorque
        public Single ChassisExtraTorque { get; set; } = default(Single);
        #endregion
        #region ChassisMaxVelocityPositionalFriction
        public Single ChassisMaxVelocityPositionalFriction { get; set; } = default(Single);
        #endregion
        #region ChassisFriction
        public Single ChassisFriction { get; set; } = default(Single);
        #endregion
        #region ChassisRestitution
        public Single ChassisRestitution { get; set; } = default(Single);
        #endregion
        #region ChassisComOffsetForward
        public Single ChassisComOffsetForward { get; set; } = default(Single);
        #endregion
        #region ChassisComOffsetUp
        public Single ChassisComOffsetUp { get; set; } = default(Single);
        #endregion
        #region WheelSlipAngle
        public Single WheelSlipAngle { get; set; } = default(Single);
        #endregion
        #region WheelFriction
        public Single WheelFriction { get; set; } = default(Single);
        #endregion
        #region WheelScale
        public Single WheelScale { get; set; } = default(Single);
        #endregion
        #region WheelMass
        public Single WheelMass { get; set; } = default(Single);
        #endregion
        #region WheelViscosityFriction
        public Single WheelViscosityFriction { get; set; } = default(Single);
        #endregion
        #region WheelCastType
        public Int32 WheelCastType { get; set; } = default(Int32);
        #endregion
        #region SuspensionStrength
        public Single SuspensionStrength { get; set; } = default(Single);
        #endregion
        #region SuspensionDampingCompression
        public Single SuspensionDampingCompression { get; set; } = default(Single);
        #endregion
        #region SuspensionDampingRelaxation
        public Single SuspensionDampingRelaxation { get; set; } = default(Single);
        #endregion
        #region SuspensionLength
        public Single SuspensionLength { get; set; } = default(Single);
        #endregion
        #region SuspensionOffsetsUpFront
        public Single SuspensionOffsetsUpFront { get; set; } = default(Single);
        #endregion
        #region SuspensionOffsetsUpBack
        public Single SuspensionOffsetsUpBack { get; set; } = default(Single);
        #endregion
        #region SuspensionOffsetsFront
        public Single SuspensionOffsetsFront { get; set; } = default(Single);
        #endregion
        #region SuspensionOffsetsBack
        public Single SuspensionOffsetsBack { get; set; } = default(Single);
        #endregion
        #region SuspensionOffsetsLateral
        public Single SuspensionOffsetsLateral { get; set; } = default(Single);
        #endregion
        #region SteeringMaxAngle
        public Single SteeringMaxAngle { get; set; } = default(Single);
        #endregion
        #region SteeringMaxAngleAtSpeed
        public Single SteeringMaxAngleAtSpeed { get; set; } = default(Single);
        #endregion
        #region EngineMaxSpeed
        public Single EngineMaxSpeed { get; set; } = default(Single);
        #endregion
        #region EngineMaxTorque
        public Single EngineMaxTorque { get; set; } = default(Single);
        #endregion
        #region EngineMinRpm
        public Single EngineMinRpm { get; set; } = default(Single);
        #endregion
        #region EngineMaxRpm
        public Single EngineMaxRpm { get; set; } = default(Single);
        #endregion
        #region EngineOptRpm
        public Single EngineOptRpm { get; set; } = default(Single);
        #endregion
        #region EngineTorqueMinRpm
        public Single EngineTorqueMinRpm { get; set; } = default(Single);
        #endregion
        #region EngineTorqueMaxRpm
        public Single EngineTorqueMaxRpm { get; set; } = default(Single);
        #endregion
        #region EngineResistanceMinRpm
        public Single EngineResistanceMinRpm { get; set; } = default(Single);
        #endregion
        #region EngineResistanceMaxRpm
        public Single EngineResistanceMaxRpm { get; set; } = default(Single);
        #endregion
        #region EngineResistanceOptRpm
        public Single EngineResistanceOptRpm { get; set; } = default(Single);
        #endregion
        #region TransmissionDownshiftRpm
        public Single TransmissionDownshiftRpm { get; set; } = default(Single);
        #endregion
        #region TransmissionUpshiftRpm
        public Single TransmissionUpshiftRpm { get; set; } = default(Single);
        #endregion
        #region TransmissionClutchDelayTime
        public Single TransmissionClutchDelayTime { get; set; } = default(Single);
        #endregion
        #region TransmissionGearRatioReverse
        public Single TransmissionGearRatioReverse { get; set; } = default(Single);
        #endregion
        #region TransmissionGearRatioFirst
        public Single TransmissionGearRatioFirst { get; set; } = default(Single);
        #endregion
        #region TransmissionGearRatioSecond
        public Single TransmissionGearRatioSecond { get; set; } = default(Single);
        #endregion
        #region TransmissionGearRatioThird
        public Single TransmissionGearRatioThird { get; set; } = default(Single);
        #endregion
        #region TransmissionGearRatioFourth
        public Single TransmissionGearRatioFourth { get; set; } = default(Single);
        #endregion
        #region TransmissionTorqueRatioFrontWheels
        public Single TransmissionTorqueRatioFrontWheels { get; set; } = default(Single);
        #endregion
        #region TransmissionTorqueRatioBackWheels
        public Single TransmissionTorqueRatioBackWheels { get; set; } = default(Single);
        #endregion
        #region BrakesMaxTorque
        public Single BrakesMaxTorque { get; set; } = default(Single);
        #endregion
        #region BrakesMinPedalInputToBlock
        public Single BrakesMinPedalInputToBlock { get; set; } = default(Single);
        #endregion
        #region BrakesWheelsMinTimeToBlock
        public Single BrakesWheelsMinTimeToBlock { get; set; } = default(Single);
        #endregion
        #region AerodynamicsAirDensity
        public Single AerodynamicsAirDensity { get; set; } = default(Single);
        #endregion
        #region AerodynamicsFrontArea
        public Single AerodynamicsFrontArea { get; set; } = default(Single);
        #endregion
        #region AerodynamicsDragCoefficient
        public Single AerodynamicsDragCoefficient { get; set; } = default(Single);
        #endregion
        #region AerodynamicsLiftCoefficient
        public Single AerodynamicsLiftCoefficient { get; set; } = default(Single);
        #endregion
        #region AerodynamicsExtraGravityMultiplier
        public Single AerodynamicsExtraGravityMultiplier { get; set; } = default(Single);
        #endregion
        #region VelocityDampingNormalSpin
        public Single VelocityDampingNormalSpin { get; set; } = default(Single);
        #endregion
        #region VelocityDampingCollisionSpin
        public Single VelocityDampingCollisionSpin { get; set; } = default(Single);
        #endregion
        #region VelocityDampingCollisionThreshold
        public Single VelocityDampingCollisionThreshold { get; set; } = default(Single);
        #endregion
        #region HandlingReorientStrength
        public Single HandlingReorientStrength { get; set; } = default(Single);
        #endregion
        #region HandlingReorientDamping
        public Single HandlingReorientDamping { get; set; } = default(Single);
        #endregion
        #region HandlingVerticalBoostForce
        public Single HandlingVerticalBoostForce { get; set; } = default(Single);
        #endregion
        #region HandlingForwardBoostForce
        public Single HandlingForwardBoostForce { get; set; } = default(Single);
        #endregion
        #region HandlingBoostMaxVelocity
        public Single HandlingBoostMaxVelocity { get; set; } = default(Single);
        #endregion
        #region HandlingBoostDuration
        public Single HandlingBoostDuration { get; set; } = default(Single);
        #endregion
        #region HandlingVerticalBoostDuration
        public Single HandlingVerticalBoostDuration { get; set; } = default(Single);
        #endregion
        #region HandlingBoostRechargeDelay
        public Single HandlingBoostRechargeDelay { get; set; } = default(Single);
        #endregion
        #region HandlingBoostRechargeDuration
        public Single HandlingBoostRechargeDuration { get; set; } = default(Single);
        #endregion
        #region WaterStrengthFront
        public Single WaterStrengthFront { get; set; } = default(Single);
        #endregion
        #region WaterStrengthBack
        public Single WaterStrengthBack { get; set; } = default(Single);
        #endregion
        #region WaterDampFront
        public Single WaterDampFront { get; set; } = default(Single);
        #endregion
        #region WaterDampBack
        public Single WaterDampBack { get; set; } = default(Single);
        #endregion
        #region WaterDrive
        public Single WaterDrive { get; set; } = default(Single);
        #endregion
        #region WaterRotationDamp
        public Single WaterRotationDamp { get; set; } = default(Single);
        #endregion
        #region BumperEnable
        public Boolean BumperEnable { get; set; } = default(Boolean);
        #endregion
        #region BumperForward
        public Single BumperForward { get; set; } = default(Single);
        #endregion
        #region BumperUp
        public Single BumperUp { get; set; } = default(Single);
        #endregion
        #region BumperWidth
        public Single BumperWidth { get; set; } = default(Single);
        #endregion
        #region BumperRadius
        public Single BumperRadius { get; set; } = default(Single);
        #endregion
        #region CollisionDampingAngular
        public Single CollisionDampingAngular { get; set; } = default(Single);
        #endregion
        #region CollisionMinSlopeCos
        public Single CollisionMinSlopeCos { get; set; } = default(Single);
        #endregion
        #region ControlsSteeringPidThirdPersonPValue
        public Single ControlsSteeringPidThirdPersonPValue { get; set; } = default(Single);
        #endregion
        #region ControlsSteeringPidThirdPersonIValue
        public Single ControlsSteeringPidThirdPersonIValue { get; set; } = default(Single);
        #endregion
        #region ControlsSteeringPidThirdPersonDValue
        public Single ControlsSteeringPidThirdPersonDValue { get; set; } = default(Single);
        #endregion
        #region ControlsSteeringPidFirstPersonPValue
        public Single ControlsSteeringPidFirstPersonPValue { get; set; } = default(Single);
        #endregion
        #region ControlsSteeringPidFirstPersonIValue
        public Single ControlsSteeringPidFirstPersonIValue { get; set; } = default(Single);
        #endregion
        #region ControlsSteeringPidFirstPersonDValue
        public Single ControlsSteeringPidFirstPersonDValue { get; set; } = default(Single);
        #endregion
        #region Unknown1
        public Single Unknown1 { get; set; } = default(Single);
        #endregion
        #region Unknown2
        public Single Unknown2 { get; set; } = default(Single);
        #endregion
        #region Unknown3
        public Single Unknown3 { get; set; } = default(Single);
        #endregion
        #region Unknown4
        public Single Unknown4 { get; set; } = default(Single);
        #endregion
        #region Unknown5
        public Single Unknown5 { get; set; } = default(Single);
        #endregion
        #region Unknown6
        public Single Unknown6 { get; set; } = default(Single);
        #endregion
        #region CameraBaseZoomFirstPerson
        public Single CameraBaseZoomFirstPerson { get; set; } = default(Single);
        #endregion
        #region CameraBaseZoomThirdPersonNear
        public Single CameraBaseZoomThirdPersonNear { get; set; } = default(Single);
        #endregion
        #region CameraBaseZoomThirdPersonFar
        public Single CameraBaseZoomThirdPersonFar { get; set; } = default(Single);
        #endregion
        #region CameraBaseHeightFirstPerson
        public Single CameraBaseHeightFirstPerson { get; set; } = default(Single);
        #endregion
        #region CameraBaseHeightThirdPersonNear
        public Single CameraBaseHeightThirdPersonNear { get; set; } = default(Single);
        #endregion
        #region CameraBaseHeightThirdPersonFar
        public Single CameraBaseHeightThirdPersonFar { get; set; } = default(Single);
        #endregion
        #region CameraBaseFovFirstPerson
        public Single CameraBaseFovFirstPerson { get; set; } = default(Single);
        #endregion
        #region CameraBaseFovThirdPersonNear
        public Single CameraBaseFovThirdPersonNear { get; set; } = default(Single);
        #endregion
        #region CameraBaseFovThirdPersonFar
        public Single CameraBaseFovThirdPersonFar { get; set; } = default(Single);
        #endregion
        #region CameraBoostFovOffsetNear
        public Single CameraBoostFovOffsetNear { get; set; } = default(Single);
        #endregion
        #region CameraBoostFovOffsetFar
        public Single CameraBoostFovOffsetFar { get; set; } = default(Single);
        #endregion
        #region CameraSpeedRatioZoomOffsetThirdPersonNear
        public Single CameraSpeedRatioZoomOffsetThirdPersonNear { get; set; } = default(Single);
        #endregion
        #region CameraSpeedRatioZoomOffsetThirdPersonFar
        public Single CameraSpeedRatioZoomOffsetThirdPersonFar { get; set; } = default(Single);
        #endregion
        #region CameraSpeedPidPValue
        public Single CameraSpeedPidPValue { get; set; } = default(Single);
        #endregion
        #region CameraSpeedPidIValue
        public Single CameraSpeedPidIValue { get; set; } = default(Single);
        #endregion
        #region CameraSpeedPidDValue
        public Single CameraSpeedPidDValue { get; set; } = default(Single);
        #endregion
        #region CameraFovBlendFactorAiming
        public Single CameraFovBlendFactorAiming { get; set; } = default(Single);
        #endregion
        #region CameraFovBlendFactorBoosting
        public Single CameraFovBlendFactorBoosting { get; set; } = default(Single);
        #endregion
        #region CameraPositionBlendFilteringFactor
        public Single CameraPositionBlendFilteringFactor { get; set; } = default(Single);
        #endregion
        #region CameraPositionRLOffsetFirstPerson
        public Single CameraPositionRLOffsetFirstPerson { get; set; } = default(Single);
        #endregion
        #region HandlingForwardBoostForceInWater
        public Single HandlingForwardBoostForceInWater { get; set; } = default(Single);
        #endregion
        #region WaterLinDamp
        public Single WaterLinDamp { get; set; } = default(Single);
        #endregion
        #region WheelMaxFriction
        public Single WheelMaxFriction { get; set; } = default(Single);
        #endregion
        #region WaterBobAccelerationDeadZone
        public Single WaterBobAccelerationDeadZone { get; set; } = default(Single);
        #endregion
        #region WaterBobAccelerationPitch
        public Single WaterBobAccelerationPitch { get; set; } = default(Single);
        #endregion
        #region WaterBobAccelerationRoll
        public Single WaterBobAccelerationRoll { get; set; } = default(Single);
        #endregion
        #region WaterBobNaturalPitchPeriod
        public Single WaterBobNaturalPitchPeriod { get; set; } = default(Single);
        #endregion
        #region WaterBobNaturalRollPeriod
        public Single WaterBobNaturalRollPeriod { get; set; } = default(Single);
        #endregion
        #region WaterBobNaturalAmplitude
        public Single WaterBobNaturalAmplitude { get; set; } = default(Single);
        #endregion
        #region WaterBobTorquePitch
        public Single WaterBobTorquePitch { get; set; } = default(Single);
        #endregion
        #region WaterBobTorqueRoll
        public Single WaterBobTorqueRoll { get; set; } = default(Single);
        #endregion
        #region ChassisLinearDamping
        public Single ChassisLinearDamping { get; set; } = default(Single);
        #endregion
        #region SuspensionMaxVisualSpeedCompression
        public Single SuspensionMaxVisualSpeedCompression { get; set; } = default(Single);
        #endregion
        #region SuspensionMaxVisualSpeedRelaxation
        public Single SuspensionMaxVisualSpeedRelaxation { get; set; } = default(Single);
        #endregion
        #region SlideFactorGainGreaterThanThreshold
        public Single SlideFactorGainGreaterThanThreshold { get; set; } = default(Single);
        #endregion
        #region SlideFactorLostLessThanOrEqualThreshold
        public Single SlideFactorLostLessThanOrEqualThreshold { get; set; } = default(Single);
        #endregion
        #region SlideFactorThreshold
        public Single SlideFactorThreshold { get; set; } = default(Single);
        #endregion
        #region SlideFactorFrictionAtMax
        public Single SlideFactorFrictionAtMax { get; set; } = default(Single);
        #endregion
        #region SlideFactorViscosityFrictionAtMax
        public Single SlideFactorViscosityFrictionAtMax { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            VehicleConfigDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IVehicleConfigDataGetter rhs) return false;
            return ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IVehicleConfigDataGetter? obj)
        {
            return ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.NodeNamesSuspensionFrontLeft = initialValue;
                this.NodeNamesSuspensionFrontRight = initialValue;
                this.NodeNamesSuspensionRearLeft = initialValue;
                this.NodeNamesSuspensionRearRight = initialValue;
                this.NodeNamesWheelFrontLeft = initialValue;
                this.NodeNamesWheelFrontRight = initialValue;
                this.NodeNamesWheelRearLeft = initialValue;
                this.NodeNamesWheelRearRight = initialValue;
                this.ChassisForwardAxis = initialValue;
                this.ChassisUpAxis = initialValue;
                this.ChassisVehicleMass = initialValue;
                this.ChassisFrictionEqualizer = initialValue;
                this.ChassisTorqueRoll = initialValue;
                this.ChassisTorquePitch = initialValue;
                this.ChassisTorqueYaw = initialValue;
                this.ChassisInertiaYaw = initialValue;
                this.ChassisInertiaRoll = initialValue;
                this.ChassisInertialPitch = initialValue;
                this.ChassisExtraTorque = initialValue;
                this.ChassisMaxVelocityPositionalFriction = initialValue;
                this.ChassisFriction = initialValue;
                this.ChassisRestitution = initialValue;
                this.ChassisComOffsetForward = initialValue;
                this.ChassisComOffsetUp = initialValue;
                this.WheelSlipAngle = initialValue;
                this.WheelFriction = initialValue;
                this.WheelScale = initialValue;
                this.WheelMass = initialValue;
                this.WheelViscosityFriction = initialValue;
                this.WheelCastType = initialValue;
                this.SuspensionStrength = initialValue;
                this.SuspensionDampingCompression = initialValue;
                this.SuspensionDampingRelaxation = initialValue;
                this.SuspensionLength = initialValue;
                this.SuspensionOffsetsUpFront = initialValue;
                this.SuspensionOffsetsUpBack = initialValue;
                this.SuspensionOffsetsFront = initialValue;
                this.SuspensionOffsetsBack = initialValue;
                this.SuspensionOffsetsLateral = initialValue;
                this.SteeringMaxAngle = initialValue;
                this.SteeringMaxAngleAtSpeed = initialValue;
                this.EngineMaxSpeed = initialValue;
                this.EngineMaxTorque = initialValue;
                this.EngineMinRpm = initialValue;
                this.EngineMaxRpm = initialValue;
                this.EngineOptRpm = initialValue;
                this.EngineTorqueMinRpm = initialValue;
                this.EngineTorqueMaxRpm = initialValue;
                this.EngineResistanceMinRpm = initialValue;
                this.EngineResistanceMaxRpm = initialValue;
                this.EngineResistanceOptRpm = initialValue;
                this.TransmissionDownshiftRpm = initialValue;
                this.TransmissionUpshiftRpm = initialValue;
                this.TransmissionClutchDelayTime = initialValue;
                this.TransmissionGearRatioReverse = initialValue;
                this.TransmissionGearRatioFirst = initialValue;
                this.TransmissionGearRatioSecond = initialValue;
                this.TransmissionGearRatioThird = initialValue;
                this.TransmissionGearRatioFourth = initialValue;
                this.TransmissionTorqueRatioFrontWheels = initialValue;
                this.TransmissionTorqueRatioBackWheels = initialValue;
                this.BrakesMaxTorque = initialValue;
                this.BrakesMinPedalInputToBlock = initialValue;
                this.BrakesWheelsMinTimeToBlock = initialValue;
                this.AerodynamicsAirDensity = initialValue;
                this.AerodynamicsFrontArea = initialValue;
                this.AerodynamicsDragCoefficient = initialValue;
                this.AerodynamicsLiftCoefficient = initialValue;
                this.AerodynamicsExtraGravityMultiplier = initialValue;
                this.VelocityDampingNormalSpin = initialValue;
                this.VelocityDampingCollisionSpin = initialValue;
                this.VelocityDampingCollisionThreshold = initialValue;
                this.HandlingReorientStrength = initialValue;
                this.HandlingReorientDamping = initialValue;
                this.HandlingVerticalBoostForce = initialValue;
                this.HandlingForwardBoostForce = initialValue;
                this.HandlingBoostMaxVelocity = initialValue;
                this.HandlingBoostDuration = initialValue;
                this.HandlingVerticalBoostDuration = initialValue;
                this.HandlingBoostRechargeDelay = initialValue;
                this.HandlingBoostRechargeDuration = initialValue;
                this.WaterStrengthFront = initialValue;
                this.WaterStrengthBack = initialValue;
                this.WaterDampFront = initialValue;
                this.WaterDampBack = initialValue;
                this.WaterDrive = initialValue;
                this.WaterRotationDamp = initialValue;
                this.BumperEnable = initialValue;
                this.BumperForward = initialValue;
                this.BumperUp = initialValue;
                this.BumperWidth = initialValue;
                this.BumperRadius = initialValue;
                this.CollisionDampingAngular = initialValue;
                this.CollisionMinSlopeCos = initialValue;
                this.ControlsSteeringPidThirdPersonPValue = initialValue;
                this.ControlsSteeringPidThirdPersonIValue = initialValue;
                this.ControlsSteeringPidThirdPersonDValue = initialValue;
                this.ControlsSteeringPidFirstPersonPValue = initialValue;
                this.ControlsSteeringPidFirstPersonIValue = initialValue;
                this.ControlsSteeringPidFirstPersonDValue = initialValue;
                this.Unknown1 = initialValue;
                this.Unknown2 = initialValue;
                this.Unknown3 = initialValue;
                this.Unknown4 = initialValue;
                this.Unknown5 = initialValue;
                this.Unknown6 = initialValue;
                this.CameraBaseZoomFirstPerson = initialValue;
                this.CameraBaseZoomThirdPersonNear = initialValue;
                this.CameraBaseZoomThirdPersonFar = initialValue;
                this.CameraBaseHeightFirstPerson = initialValue;
                this.CameraBaseHeightThirdPersonNear = initialValue;
                this.CameraBaseHeightThirdPersonFar = initialValue;
                this.CameraBaseFovFirstPerson = initialValue;
                this.CameraBaseFovThirdPersonNear = initialValue;
                this.CameraBaseFovThirdPersonFar = initialValue;
                this.CameraBoostFovOffsetNear = initialValue;
                this.CameraBoostFovOffsetFar = initialValue;
                this.CameraSpeedRatioZoomOffsetThirdPersonNear = initialValue;
                this.CameraSpeedRatioZoomOffsetThirdPersonFar = initialValue;
                this.CameraSpeedPidPValue = initialValue;
                this.CameraSpeedPidIValue = initialValue;
                this.CameraSpeedPidDValue = initialValue;
                this.CameraFovBlendFactorAiming = initialValue;
                this.CameraFovBlendFactorBoosting = initialValue;
                this.CameraPositionBlendFilteringFactor = initialValue;
                this.CameraPositionRLOffsetFirstPerson = initialValue;
                this.HandlingForwardBoostForceInWater = initialValue;
                this.WaterLinDamp = initialValue;
                this.WheelMaxFriction = initialValue;
                this.WaterBobAccelerationDeadZone = initialValue;
                this.WaterBobAccelerationPitch = initialValue;
                this.WaterBobAccelerationRoll = initialValue;
                this.WaterBobNaturalPitchPeriod = initialValue;
                this.WaterBobNaturalRollPeriod = initialValue;
                this.WaterBobNaturalAmplitude = initialValue;
                this.WaterBobTorquePitch = initialValue;
                this.WaterBobTorqueRoll = initialValue;
                this.ChassisLinearDamping = initialValue;
                this.SuspensionMaxVisualSpeedCompression = initialValue;
                this.SuspensionMaxVisualSpeedRelaxation = initialValue;
                this.SlideFactorGainGreaterThanThreshold = initialValue;
                this.SlideFactorLostLessThanOrEqualThreshold = initialValue;
                this.SlideFactorThreshold = initialValue;
                this.SlideFactorFrictionAtMax = initialValue;
                this.SlideFactorViscosityFrictionAtMax = initialValue;
            }

            public Mask(
                TItem NodeNamesSuspensionFrontLeft,
                TItem NodeNamesSuspensionFrontRight,
                TItem NodeNamesSuspensionRearLeft,
                TItem NodeNamesSuspensionRearRight,
                TItem NodeNamesWheelFrontLeft,
                TItem NodeNamesWheelFrontRight,
                TItem NodeNamesWheelRearLeft,
                TItem NodeNamesWheelRearRight,
                TItem ChassisForwardAxis,
                TItem ChassisUpAxis,
                TItem ChassisVehicleMass,
                TItem ChassisFrictionEqualizer,
                TItem ChassisTorqueRoll,
                TItem ChassisTorquePitch,
                TItem ChassisTorqueYaw,
                TItem ChassisInertiaYaw,
                TItem ChassisInertiaRoll,
                TItem ChassisInertialPitch,
                TItem ChassisExtraTorque,
                TItem ChassisMaxVelocityPositionalFriction,
                TItem ChassisFriction,
                TItem ChassisRestitution,
                TItem ChassisComOffsetForward,
                TItem ChassisComOffsetUp,
                TItem WheelSlipAngle,
                TItem WheelFriction,
                TItem WheelScale,
                TItem WheelMass,
                TItem WheelViscosityFriction,
                TItem WheelCastType,
                TItem SuspensionStrength,
                TItem SuspensionDampingCompression,
                TItem SuspensionDampingRelaxation,
                TItem SuspensionLength,
                TItem SuspensionOffsetsUpFront,
                TItem SuspensionOffsetsUpBack,
                TItem SuspensionOffsetsFront,
                TItem SuspensionOffsetsBack,
                TItem SuspensionOffsetsLateral,
                TItem SteeringMaxAngle,
                TItem SteeringMaxAngleAtSpeed,
                TItem EngineMaxSpeed,
                TItem EngineMaxTorque,
                TItem EngineMinRpm,
                TItem EngineMaxRpm,
                TItem EngineOptRpm,
                TItem EngineTorqueMinRpm,
                TItem EngineTorqueMaxRpm,
                TItem EngineResistanceMinRpm,
                TItem EngineResistanceMaxRpm,
                TItem EngineResistanceOptRpm,
                TItem TransmissionDownshiftRpm,
                TItem TransmissionUpshiftRpm,
                TItem TransmissionClutchDelayTime,
                TItem TransmissionGearRatioReverse,
                TItem TransmissionGearRatioFirst,
                TItem TransmissionGearRatioSecond,
                TItem TransmissionGearRatioThird,
                TItem TransmissionGearRatioFourth,
                TItem TransmissionTorqueRatioFrontWheels,
                TItem TransmissionTorqueRatioBackWheels,
                TItem BrakesMaxTorque,
                TItem BrakesMinPedalInputToBlock,
                TItem BrakesWheelsMinTimeToBlock,
                TItem AerodynamicsAirDensity,
                TItem AerodynamicsFrontArea,
                TItem AerodynamicsDragCoefficient,
                TItem AerodynamicsLiftCoefficient,
                TItem AerodynamicsExtraGravityMultiplier,
                TItem VelocityDampingNormalSpin,
                TItem VelocityDampingCollisionSpin,
                TItem VelocityDampingCollisionThreshold,
                TItem HandlingReorientStrength,
                TItem HandlingReorientDamping,
                TItem HandlingVerticalBoostForce,
                TItem HandlingForwardBoostForce,
                TItem HandlingBoostMaxVelocity,
                TItem HandlingBoostDuration,
                TItem HandlingVerticalBoostDuration,
                TItem HandlingBoostRechargeDelay,
                TItem HandlingBoostRechargeDuration,
                TItem WaterStrengthFront,
                TItem WaterStrengthBack,
                TItem WaterDampFront,
                TItem WaterDampBack,
                TItem WaterDrive,
                TItem WaterRotationDamp,
                TItem BumperEnable,
                TItem BumperForward,
                TItem BumperUp,
                TItem BumperWidth,
                TItem BumperRadius,
                TItem CollisionDampingAngular,
                TItem CollisionMinSlopeCos,
                TItem ControlsSteeringPidThirdPersonPValue,
                TItem ControlsSteeringPidThirdPersonIValue,
                TItem ControlsSteeringPidThirdPersonDValue,
                TItem ControlsSteeringPidFirstPersonPValue,
                TItem ControlsSteeringPidFirstPersonIValue,
                TItem ControlsSteeringPidFirstPersonDValue,
                TItem Unknown1,
                TItem Unknown2,
                TItem Unknown3,
                TItem Unknown4,
                TItem Unknown5,
                TItem Unknown6,
                TItem CameraBaseZoomFirstPerson,
                TItem CameraBaseZoomThirdPersonNear,
                TItem CameraBaseZoomThirdPersonFar,
                TItem CameraBaseHeightFirstPerson,
                TItem CameraBaseHeightThirdPersonNear,
                TItem CameraBaseHeightThirdPersonFar,
                TItem CameraBaseFovFirstPerson,
                TItem CameraBaseFovThirdPersonNear,
                TItem CameraBaseFovThirdPersonFar,
                TItem CameraBoostFovOffsetNear,
                TItem CameraBoostFovOffsetFar,
                TItem CameraSpeedRatioZoomOffsetThirdPersonNear,
                TItem CameraSpeedRatioZoomOffsetThirdPersonFar,
                TItem CameraSpeedPidPValue,
                TItem CameraSpeedPidIValue,
                TItem CameraSpeedPidDValue,
                TItem CameraFovBlendFactorAiming,
                TItem CameraFovBlendFactorBoosting,
                TItem CameraPositionBlendFilteringFactor,
                TItem CameraPositionRLOffsetFirstPerson,
                TItem HandlingForwardBoostForceInWater,
                TItem WaterLinDamp,
                TItem WheelMaxFriction,
                TItem WaterBobAccelerationDeadZone,
                TItem WaterBobAccelerationPitch,
                TItem WaterBobAccelerationRoll,
                TItem WaterBobNaturalPitchPeriod,
                TItem WaterBobNaturalRollPeriod,
                TItem WaterBobNaturalAmplitude,
                TItem WaterBobTorquePitch,
                TItem WaterBobTorqueRoll,
                TItem ChassisLinearDamping,
                TItem SuspensionMaxVisualSpeedCompression,
                TItem SuspensionMaxVisualSpeedRelaxation,
                TItem SlideFactorGainGreaterThanThreshold,
                TItem SlideFactorLostLessThanOrEqualThreshold,
                TItem SlideFactorThreshold,
                TItem SlideFactorFrictionAtMax,
                TItem SlideFactorViscosityFrictionAtMax)
            {
                this.NodeNamesSuspensionFrontLeft = NodeNamesSuspensionFrontLeft;
                this.NodeNamesSuspensionFrontRight = NodeNamesSuspensionFrontRight;
                this.NodeNamesSuspensionRearLeft = NodeNamesSuspensionRearLeft;
                this.NodeNamesSuspensionRearRight = NodeNamesSuspensionRearRight;
                this.NodeNamesWheelFrontLeft = NodeNamesWheelFrontLeft;
                this.NodeNamesWheelFrontRight = NodeNamesWheelFrontRight;
                this.NodeNamesWheelRearLeft = NodeNamesWheelRearLeft;
                this.NodeNamesWheelRearRight = NodeNamesWheelRearRight;
                this.ChassisForwardAxis = ChassisForwardAxis;
                this.ChassisUpAxis = ChassisUpAxis;
                this.ChassisVehicleMass = ChassisVehicleMass;
                this.ChassisFrictionEqualizer = ChassisFrictionEqualizer;
                this.ChassisTorqueRoll = ChassisTorqueRoll;
                this.ChassisTorquePitch = ChassisTorquePitch;
                this.ChassisTorqueYaw = ChassisTorqueYaw;
                this.ChassisInertiaYaw = ChassisInertiaYaw;
                this.ChassisInertiaRoll = ChassisInertiaRoll;
                this.ChassisInertialPitch = ChassisInertialPitch;
                this.ChassisExtraTorque = ChassisExtraTorque;
                this.ChassisMaxVelocityPositionalFriction = ChassisMaxVelocityPositionalFriction;
                this.ChassisFriction = ChassisFriction;
                this.ChassisRestitution = ChassisRestitution;
                this.ChassisComOffsetForward = ChassisComOffsetForward;
                this.ChassisComOffsetUp = ChassisComOffsetUp;
                this.WheelSlipAngle = WheelSlipAngle;
                this.WheelFriction = WheelFriction;
                this.WheelScale = WheelScale;
                this.WheelMass = WheelMass;
                this.WheelViscosityFriction = WheelViscosityFriction;
                this.WheelCastType = WheelCastType;
                this.SuspensionStrength = SuspensionStrength;
                this.SuspensionDampingCompression = SuspensionDampingCompression;
                this.SuspensionDampingRelaxation = SuspensionDampingRelaxation;
                this.SuspensionLength = SuspensionLength;
                this.SuspensionOffsetsUpFront = SuspensionOffsetsUpFront;
                this.SuspensionOffsetsUpBack = SuspensionOffsetsUpBack;
                this.SuspensionOffsetsFront = SuspensionOffsetsFront;
                this.SuspensionOffsetsBack = SuspensionOffsetsBack;
                this.SuspensionOffsetsLateral = SuspensionOffsetsLateral;
                this.SteeringMaxAngle = SteeringMaxAngle;
                this.SteeringMaxAngleAtSpeed = SteeringMaxAngleAtSpeed;
                this.EngineMaxSpeed = EngineMaxSpeed;
                this.EngineMaxTorque = EngineMaxTorque;
                this.EngineMinRpm = EngineMinRpm;
                this.EngineMaxRpm = EngineMaxRpm;
                this.EngineOptRpm = EngineOptRpm;
                this.EngineTorqueMinRpm = EngineTorqueMinRpm;
                this.EngineTorqueMaxRpm = EngineTorqueMaxRpm;
                this.EngineResistanceMinRpm = EngineResistanceMinRpm;
                this.EngineResistanceMaxRpm = EngineResistanceMaxRpm;
                this.EngineResistanceOptRpm = EngineResistanceOptRpm;
                this.TransmissionDownshiftRpm = TransmissionDownshiftRpm;
                this.TransmissionUpshiftRpm = TransmissionUpshiftRpm;
                this.TransmissionClutchDelayTime = TransmissionClutchDelayTime;
                this.TransmissionGearRatioReverse = TransmissionGearRatioReverse;
                this.TransmissionGearRatioFirst = TransmissionGearRatioFirst;
                this.TransmissionGearRatioSecond = TransmissionGearRatioSecond;
                this.TransmissionGearRatioThird = TransmissionGearRatioThird;
                this.TransmissionGearRatioFourth = TransmissionGearRatioFourth;
                this.TransmissionTorqueRatioFrontWheels = TransmissionTorqueRatioFrontWheels;
                this.TransmissionTorqueRatioBackWheels = TransmissionTorqueRatioBackWheels;
                this.BrakesMaxTorque = BrakesMaxTorque;
                this.BrakesMinPedalInputToBlock = BrakesMinPedalInputToBlock;
                this.BrakesWheelsMinTimeToBlock = BrakesWheelsMinTimeToBlock;
                this.AerodynamicsAirDensity = AerodynamicsAirDensity;
                this.AerodynamicsFrontArea = AerodynamicsFrontArea;
                this.AerodynamicsDragCoefficient = AerodynamicsDragCoefficient;
                this.AerodynamicsLiftCoefficient = AerodynamicsLiftCoefficient;
                this.AerodynamicsExtraGravityMultiplier = AerodynamicsExtraGravityMultiplier;
                this.VelocityDampingNormalSpin = VelocityDampingNormalSpin;
                this.VelocityDampingCollisionSpin = VelocityDampingCollisionSpin;
                this.VelocityDampingCollisionThreshold = VelocityDampingCollisionThreshold;
                this.HandlingReorientStrength = HandlingReorientStrength;
                this.HandlingReorientDamping = HandlingReorientDamping;
                this.HandlingVerticalBoostForce = HandlingVerticalBoostForce;
                this.HandlingForwardBoostForce = HandlingForwardBoostForce;
                this.HandlingBoostMaxVelocity = HandlingBoostMaxVelocity;
                this.HandlingBoostDuration = HandlingBoostDuration;
                this.HandlingVerticalBoostDuration = HandlingVerticalBoostDuration;
                this.HandlingBoostRechargeDelay = HandlingBoostRechargeDelay;
                this.HandlingBoostRechargeDuration = HandlingBoostRechargeDuration;
                this.WaterStrengthFront = WaterStrengthFront;
                this.WaterStrengthBack = WaterStrengthBack;
                this.WaterDampFront = WaterDampFront;
                this.WaterDampBack = WaterDampBack;
                this.WaterDrive = WaterDrive;
                this.WaterRotationDamp = WaterRotationDamp;
                this.BumperEnable = BumperEnable;
                this.BumperForward = BumperForward;
                this.BumperUp = BumperUp;
                this.BumperWidth = BumperWidth;
                this.BumperRadius = BumperRadius;
                this.CollisionDampingAngular = CollisionDampingAngular;
                this.CollisionMinSlopeCos = CollisionMinSlopeCos;
                this.ControlsSteeringPidThirdPersonPValue = ControlsSteeringPidThirdPersonPValue;
                this.ControlsSteeringPidThirdPersonIValue = ControlsSteeringPidThirdPersonIValue;
                this.ControlsSteeringPidThirdPersonDValue = ControlsSteeringPidThirdPersonDValue;
                this.ControlsSteeringPidFirstPersonPValue = ControlsSteeringPidFirstPersonPValue;
                this.ControlsSteeringPidFirstPersonIValue = ControlsSteeringPidFirstPersonIValue;
                this.ControlsSteeringPidFirstPersonDValue = ControlsSteeringPidFirstPersonDValue;
                this.Unknown1 = Unknown1;
                this.Unknown2 = Unknown2;
                this.Unknown3 = Unknown3;
                this.Unknown4 = Unknown4;
                this.Unknown5 = Unknown5;
                this.Unknown6 = Unknown6;
                this.CameraBaseZoomFirstPerson = CameraBaseZoomFirstPerson;
                this.CameraBaseZoomThirdPersonNear = CameraBaseZoomThirdPersonNear;
                this.CameraBaseZoomThirdPersonFar = CameraBaseZoomThirdPersonFar;
                this.CameraBaseHeightFirstPerson = CameraBaseHeightFirstPerson;
                this.CameraBaseHeightThirdPersonNear = CameraBaseHeightThirdPersonNear;
                this.CameraBaseHeightThirdPersonFar = CameraBaseHeightThirdPersonFar;
                this.CameraBaseFovFirstPerson = CameraBaseFovFirstPerson;
                this.CameraBaseFovThirdPersonNear = CameraBaseFovThirdPersonNear;
                this.CameraBaseFovThirdPersonFar = CameraBaseFovThirdPersonFar;
                this.CameraBoostFovOffsetNear = CameraBoostFovOffsetNear;
                this.CameraBoostFovOffsetFar = CameraBoostFovOffsetFar;
                this.CameraSpeedRatioZoomOffsetThirdPersonNear = CameraSpeedRatioZoomOffsetThirdPersonNear;
                this.CameraSpeedRatioZoomOffsetThirdPersonFar = CameraSpeedRatioZoomOffsetThirdPersonFar;
                this.CameraSpeedPidPValue = CameraSpeedPidPValue;
                this.CameraSpeedPidIValue = CameraSpeedPidIValue;
                this.CameraSpeedPidDValue = CameraSpeedPidDValue;
                this.CameraFovBlendFactorAiming = CameraFovBlendFactorAiming;
                this.CameraFovBlendFactorBoosting = CameraFovBlendFactorBoosting;
                this.CameraPositionBlendFilteringFactor = CameraPositionBlendFilteringFactor;
                this.CameraPositionRLOffsetFirstPerson = CameraPositionRLOffsetFirstPerson;
                this.HandlingForwardBoostForceInWater = HandlingForwardBoostForceInWater;
                this.WaterLinDamp = WaterLinDamp;
                this.WheelMaxFriction = WheelMaxFriction;
                this.WaterBobAccelerationDeadZone = WaterBobAccelerationDeadZone;
                this.WaterBobAccelerationPitch = WaterBobAccelerationPitch;
                this.WaterBobAccelerationRoll = WaterBobAccelerationRoll;
                this.WaterBobNaturalPitchPeriod = WaterBobNaturalPitchPeriod;
                this.WaterBobNaturalRollPeriod = WaterBobNaturalRollPeriod;
                this.WaterBobNaturalAmplitude = WaterBobNaturalAmplitude;
                this.WaterBobTorquePitch = WaterBobTorquePitch;
                this.WaterBobTorqueRoll = WaterBobTorqueRoll;
                this.ChassisLinearDamping = ChassisLinearDamping;
                this.SuspensionMaxVisualSpeedCompression = SuspensionMaxVisualSpeedCompression;
                this.SuspensionMaxVisualSpeedRelaxation = SuspensionMaxVisualSpeedRelaxation;
                this.SlideFactorGainGreaterThanThreshold = SlideFactorGainGreaterThanThreshold;
                this.SlideFactorLostLessThanOrEqualThreshold = SlideFactorLostLessThanOrEqualThreshold;
                this.SlideFactorThreshold = SlideFactorThreshold;
                this.SlideFactorFrictionAtMax = SlideFactorFrictionAtMax;
                this.SlideFactorViscosityFrictionAtMax = SlideFactorViscosityFrictionAtMax;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem NodeNamesSuspensionFrontLeft;
            public TItem NodeNamesSuspensionFrontRight;
            public TItem NodeNamesSuspensionRearLeft;
            public TItem NodeNamesSuspensionRearRight;
            public TItem NodeNamesWheelFrontLeft;
            public TItem NodeNamesWheelFrontRight;
            public TItem NodeNamesWheelRearLeft;
            public TItem NodeNamesWheelRearRight;
            public TItem ChassisForwardAxis;
            public TItem ChassisUpAxis;
            public TItem ChassisVehicleMass;
            public TItem ChassisFrictionEqualizer;
            public TItem ChassisTorqueRoll;
            public TItem ChassisTorquePitch;
            public TItem ChassisTorqueYaw;
            public TItem ChassisInertiaYaw;
            public TItem ChassisInertiaRoll;
            public TItem ChassisInertialPitch;
            public TItem ChassisExtraTorque;
            public TItem ChassisMaxVelocityPositionalFriction;
            public TItem ChassisFriction;
            public TItem ChassisRestitution;
            public TItem ChassisComOffsetForward;
            public TItem ChassisComOffsetUp;
            public TItem WheelSlipAngle;
            public TItem WheelFriction;
            public TItem WheelScale;
            public TItem WheelMass;
            public TItem WheelViscosityFriction;
            public TItem WheelCastType;
            public TItem SuspensionStrength;
            public TItem SuspensionDampingCompression;
            public TItem SuspensionDampingRelaxation;
            public TItem SuspensionLength;
            public TItem SuspensionOffsetsUpFront;
            public TItem SuspensionOffsetsUpBack;
            public TItem SuspensionOffsetsFront;
            public TItem SuspensionOffsetsBack;
            public TItem SuspensionOffsetsLateral;
            public TItem SteeringMaxAngle;
            public TItem SteeringMaxAngleAtSpeed;
            public TItem EngineMaxSpeed;
            public TItem EngineMaxTorque;
            public TItem EngineMinRpm;
            public TItem EngineMaxRpm;
            public TItem EngineOptRpm;
            public TItem EngineTorqueMinRpm;
            public TItem EngineTorqueMaxRpm;
            public TItem EngineResistanceMinRpm;
            public TItem EngineResistanceMaxRpm;
            public TItem EngineResistanceOptRpm;
            public TItem TransmissionDownshiftRpm;
            public TItem TransmissionUpshiftRpm;
            public TItem TransmissionClutchDelayTime;
            public TItem TransmissionGearRatioReverse;
            public TItem TransmissionGearRatioFirst;
            public TItem TransmissionGearRatioSecond;
            public TItem TransmissionGearRatioThird;
            public TItem TransmissionGearRatioFourth;
            public TItem TransmissionTorqueRatioFrontWheels;
            public TItem TransmissionTorqueRatioBackWheels;
            public TItem BrakesMaxTorque;
            public TItem BrakesMinPedalInputToBlock;
            public TItem BrakesWheelsMinTimeToBlock;
            public TItem AerodynamicsAirDensity;
            public TItem AerodynamicsFrontArea;
            public TItem AerodynamicsDragCoefficient;
            public TItem AerodynamicsLiftCoefficient;
            public TItem AerodynamicsExtraGravityMultiplier;
            public TItem VelocityDampingNormalSpin;
            public TItem VelocityDampingCollisionSpin;
            public TItem VelocityDampingCollisionThreshold;
            public TItem HandlingReorientStrength;
            public TItem HandlingReorientDamping;
            public TItem HandlingVerticalBoostForce;
            public TItem HandlingForwardBoostForce;
            public TItem HandlingBoostMaxVelocity;
            public TItem HandlingBoostDuration;
            public TItem HandlingVerticalBoostDuration;
            public TItem HandlingBoostRechargeDelay;
            public TItem HandlingBoostRechargeDuration;
            public TItem WaterStrengthFront;
            public TItem WaterStrengthBack;
            public TItem WaterDampFront;
            public TItem WaterDampBack;
            public TItem WaterDrive;
            public TItem WaterRotationDamp;
            public TItem BumperEnable;
            public TItem BumperForward;
            public TItem BumperUp;
            public TItem BumperWidth;
            public TItem BumperRadius;
            public TItem CollisionDampingAngular;
            public TItem CollisionMinSlopeCos;
            public TItem ControlsSteeringPidThirdPersonPValue;
            public TItem ControlsSteeringPidThirdPersonIValue;
            public TItem ControlsSteeringPidThirdPersonDValue;
            public TItem ControlsSteeringPidFirstPersonPValue;
            public TItem ControlsSteeringPidFirstPersonIValue;
            public TItem ControlsSteeringPidFirstPersonDValue;
            public TItem Unknown1;
            public TItem Unknown2;
            public TItem Unknown3;
            public TItem Unknown4;
            public TItem Unknown5;
            public TItem Unknown6;
            public TItem CameraBaseZoomFirstPerson;
            public TItem CameraBaseZoomThirdPersonNear;
            public TItem CameraBaseZoomThirdPersonFar;
            public TItem CameraBaseHeightFirstPerson;
            public TItem CameraBaseHeightThirdPersonNear;
            public TItem CameraBaseHeightThirdPersonFar;
            public TItem CameraBaseFovFirstPerson;
            public TItem CameraBaseFovThirdPersonNear;
            public TItem CameraBaseFovThirdPersonFar;
            public TItem CameraBoostFovOffsetNear;
            public TItem CameraBoostFovOffsetFar;
            public TItem CameraSpeedRatioZoomOffsetThirdPersonNear;
            public TItem CameraSpeedRatioZoomOffsetThirdPersonFar;
            public TItem CameraSpeedPidPValue;
            public TItem CameraSpeedPidIValue;
            public TItem CameraSpeedPidDValue;
            public TItem CameraFovBlendFactorAiming;
            public TItem CameraFovBlendFactorBoosting;
            public TItem CameraPositionBlendFilteringFactor;
            public TItem CameraPositionRLOffsetFirstPerson;
            public TItem HandlingForwardBoostForceInWater;
            public TItem WaterLinDamp;
            public TItem WheelMaxFriction;
            public TItem WaterBobAccelerationDeadZone;
            public TItem WaterBobAccelerationPitch;
            public TItem WaterBobAccelerationRoll;
            public TItem WaterBobNaturalPitchPeriod;
            public TItem WaterBobNaturalRollPeriod;
            public TItem WaterBobNaturalAmplitude;
            public TItem WaterBobTorquePitch;
            public TItem WaterBobTorqueRoll;
            public TItem ChassisLinearDamping;
            public TItem SuspensionMaxVisualSpeedCompression;
            public TItem SuspensionMaxVisualSpeedRelaxation;
            public TItem SlideFactorGainGreaterThanThreshold;
            public TItem SlideFactorLostLessThanOrEqualThreshold;
            public TItem SlideFactorThreshold;
            public TItem SlideFactorFrictionAtMax;
            public TItem SlideFactorViscosityFrictionAtMax;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.NodeNamesSuspensionFrontLeft, rhs.NodeNamesSuspensionFrontLeft)) return false;
                if (!object.Equals(this.NodeNamesSuspensionFrontRight, rhs.NodeNamesSuspensionFrontRight)) return false;
                if (!object.Equals(this.NodeNamesSuspensionRearLeft, rhs.NodeNamesSuspensionRearLeft)) return false;
                if (!object.Equals(this.NodeNamesSuspensionRearRight, rhs.NodeNamesSuspensionRearRight)) return false;
                if (!object.Equals(this.NodeNamesWheelFrontLeft, rhs.NodeNamesWheelFrontLeft)) return false;
                if (!object.Equals(this.NodeNamesWheelFrontRight, rhs.NodeNamesWheelFrontRight)) return false;
                if (!object.Equals(this.NodeNamesWheelRearLeft, rhs.NodeNamesWheelRearLeft)) return false;
                if (!object.Equals(this.NodeNamesWheelRearRight, rhs.NodeNamesWheelRearRight)) return false;
                if (!object.Equals(this.ChassisForwardAxis, rhs.ChassisForwardAxis)) return false;
                if (!object.Equals(this.ChassisUpAxis, rhs.ChassisUpAxis)) return false;
                if (!object.Equals(this.ChassisVehicleMass, rhs.ChassisVehicleMass)) return false;
                if (!object.Equals(this.ChassisFrictionEqualizer, rhs.ChassisFrictionEqualizer)) return false;
                if (!object.Equals(this.ChassisTorqueRoll, rhs.ChassisTorqueRoll)) return false;
                if (!object.Equals(this.ChassisTorquePitch, rhs.ChassisTorquePitch)) return false;
                if (!object.Equals(this.ChassisTorqueYaw, rhs.ChassisTorqueYaw)) return false;
                if (!object.Equals(this.ChassisInertiaYaw, rhs.ChassisInertiaYaw)) return false;
                if (!object.Equals(this.ChassisInertiaRoll, rhs.ChassisInertiaRoll)) return false;
                if (!object.Equals(this.ChassisInertialPitch, rhs.ChassisInertialPitch)) return false;
                if (!object.Equals(this.ChassisExtraTorque, rhs.ChassisExtraTorque)) return false;
                if (!object.Equals(this.ChassisMaxVelocityPositionalFriction, rhs.ChassisMaxVelocityPositionalFriction)) return false;
                if (!object.Equals(this.ChassisFriction, rhs.ChassisFriction)) return false;
                if (!object.Equals(this.ChassisRestitution, rhs.ChassisRestitution)) return false;
                if (!object.Equals(this.ChassisComOffsetForward, rhs.ChassisComOffsetForward)) return false;
                if (!object.Equals(this.ChassisComOffsetUp, rhs.ChassisComOffsetUp)) return false;
                if (!object.Equals(this.WheelSlipAngle, rhs.WheelSlipAngle)) return false;
                if (!object.Equals(this.WheelFriction, rhs.WheelFriction)) return false;
                if (!object.Equals(this.WheelScale, rhs.WheelScale)) return false;
                if (!object.Equals(this.WheelMass, rhs.WheelMass)) return false;
                if (!object.Equals(this.WheelViscosityFriction, rhs.WheelViscosityFriction)) return false;
                if (!object.Equals(this.WheelCastType, rhs.WheelCastType)) return false;
                if (!object.Equals(this.SuspensionStrength, rhs.SuspensionStrength)) return false;
                if (!object.Equals(this.SuspensionDampingCompression, rhs.SuspensionDampingCompression)) return false;
                if (!object.Equals(this.SuspensionDampingRelaxation, rhs.SuspensionDampingRelaxation)) return false;
                if (!object.Equals(this.SuspensionLength, rhs.SuspensionLength)) return false;
                if (!object.Equals(this.SuspensionOffsetsUpFront, rhs.SuspensionOffsetsUpFront)) return false;
                if (!object.Equals(this.SuspensionOffsetsUpBack, rhs.SuspensionOffsetsUpBack)) return false;
                if (!object.Equals(this.SuspensionOffsetsFront, rhs.SuspensionOffsetsFront)) return false;
                if (!object.Equals(this.SuspensionOffsetsBack, rhs.SuspensionOffsetsBack)) return false;
                if (!object.Equals(this.SuspensionOffsetsLateral, rhs.SuspensionOffsetsLateral)) return false;
                if (!object.Equals(this.SteeringMaxAngle, rhs.SteeringMaxAngle)) return false;
                if (!object.Equals(this.SteeringMaxAngleAtSpeed, rhs.SteeringMaxAngleAtSpeed)) return false;
                if (!object.Equals(this.EngineMaxSpeed, rhs.EngineMaxSpeed)) return false;
                if (!object.Equals(this.EngineMaxTorque, rhs.EngineMaxTorque)) return false;
                if (!object.Equals(this.EngineMinRpm, rhs.EngineMinRpm)) return false;
                if (!object.Equals(this.EngineMaxRpm, rhs.EngineMaxRpm)) return false;
                if (!object.Equals(this.EngineOptRpm, rhs.EngineOptRpm)) return false;
                if (!object.Equals(this.EngineTorqueMinRpm, rhs.EngineTorqueMinRpm)) return false;
                if (!object.Equals(this.EngineTorqueMaxRpm, rhs.EngineTorqueMaxRpm)) return false;
                if (!object.Equals(this.EngineResistanceMinRpm, rhs.EngineResistanceMinRpm)) return false;
                if (!object.Equals(this.EngineResistanceMaxRpm, rhs.EngineResistanceMaxRpm)) return false;
                if (!object.Equals(this.EngineResistanceOptRpm, rhs.EngineResistanceOptRpm)) return false;
                if (!object.Equals(this.TransmissionDownshiftRpm, rhs.TransmissionDownshiftRpm)) return false;
                if (!object.Equals(this.TransmissionUpshiftRpm, rhs.TransmissionUpshiftRpm)) return false;
                if (!object.Equals(this.TransmissionClutchDelayTime, rhs.TransmissionClutchDelayTime)) return false;
                if (!object.Equals(this.TransmissionGearRatioReverse, rhs.TransmissionGearRatioReverse)) return false;
                if (!object.Equals(this.TransmissionGearRatioFirst, rhs.TransmissionGearRatioFirst)) return false;
                if (!object.Equals(this.TransmissionGearRatioSecond, rhs.TransmissionGearRatioSecond)) return false;
                if (!object.Equals(this.TransmissionGearRatioThird, rhs.TransmissionGearRatioThird)) return false;
                if (!object.Equals(this.TransmissionGearRatioFourth, rhs.TransmissionGearRatioFourth)) return false;
                if (!object.Equals(this.TransmissionTorqueRatioFrontWheels, rhs.TransmissionTorqueRatioFrontWheels)) return false;
                if (!object.Equals(this.TransmissionTorqueRatioBackWheels, rhs.TransmissionTorqueRatioBackWheels)) return false;
                if (!object.Equals(this.BrakesMaxTorque, rhs.BrakesMaxTorque)) return false;
                if (!object.Equals(this.BrakesMinPedalInputToBlock, rhs.BrakesMinPedalInputToBlock)) return false;
                if (!object.Equals(this.BrakesWheelsMinTimeToBlock, rhs.BrakesWheelsMinTimeToBlock)) return false;
                if (!object.Equals(this.AerodynamicsAirDensity, rhs.AerodynamicsAirDensity)) return false;
                if (!object.Equals(this.AerodynamicsFrontArea, rhs.AerodynamicsFrontArea)) return false;
                if (!object.Equals(this.AerodynamicsDragCoefficient, rhs.AerodynamicsDragCoefficient)) return false;
                if (!object.Equals(this.AerodynamicsLiftCoefficient, rhs.AerodynamicsLiftCoefficient)) return false;
                if (!object.Equals(this.AerodynamicsExtraGravityMultiplier, rhs.AerodynamicsExtraGravityMultiplier)) return false;
                if (!object.Equals(this.VelocityDampingNormalSpin, rhs.VelocityDampingNormalSpin)) return false;
                if (!object.Equals(this.VelocityDampingCollisionSpin, rhs.VelocityDampingCollisionSpin)) return false;
                if (!object.Equals(this.VelocityDampingCollisionThreshold, rhs.VelocityDampingCollisionThreshold)) return false;
                if (!object.Equals(this.HandlingReorientStrength, rhs.HandlingReorientStrength)) return false;
                if (!object.Equals(this.HandlingReorientDamping, rhs.HandlingReorientDamping)) return false;
                if (!object.Equals(this.HandlingVerticalBoostForce, rhs.HandlingVerticalBoostForce)) return false;
                if (!object.Equals(this.HandlingForwardBoostForce, rhs.HandlingForwardBoostForce)) return false;
                if (!object.Equals(this.HandlingBoostMaxVelocity, rhs.HandlingBoostMaxVelocity)) return false;
                if (!object.Equals(this.HandlingBoostDuration, rhs.HandlingBoostDuration)) return false;
                if (!object.Equals(this.HandlingVerticalBoostDuration, rhs.HandlingVerticalBoostDuration)) return false;
                if (!object.Equals(this.HandlingBoostRechargeDelay, rhs.HandlingBoostRechargeDelay)) return false;
                if (!object.Equals(this.HandlingBoostRechargeDuration, rhs.HandlingBoostRechargeDuration)) return false;
                if (!object.Equals(this.WaterStrengthFront, rhs.WaterStrengthFront)) return false;
                if (!object.Equals(this.WaterStrengthBack, rhs.WaterStrengthBack)) return false;
                if (!object.Equals(this.WaterDampFront, rhs.WaterDampFront)) return false;
                if (!object.Equals(this.WaterDampBack, rhs.WaterDampBack)) return false;
                if (!object.Equals(this.WaterDrive, rhs.WaterDrive)) return false;
                if (!object.Equals(this.WaterRotationDamp, rhs.WaterRotationDamp)) return false;
                if (!object.Equals(this.BumperEnable, rhs.BumperEnable)) return false;
                if (!object.Equals(this.BumperForward, rhs.BumperForward)) return false;
                if (!object.Equals(this.BumperUp, rhs.BumperUp)) return false;
                if (!object.Equals(this.BumperWidth, rhs.BumperWidth)) return false;
                if (!object.Equals(this.BumperRadius, rhs.BumperRadius)) return false;
                if (!object.Equals(this.CollisionDampingAngular, rhs.CollisionDampingAngular)) return false;
                if (!object.Equals(this.CollisionMinSlopeCos, rhs.CollisionMinSlopeCos)) return false;
                if (!object.Equals(this.ControlsSteeringPidThirdPersonPValue, rhs.ControlsSteeringPidThirdPersonPValue)) return false;
                if (!object.Equals(this.ControlsSteeringPidThirdPersonIValue, rhs.ControlsSteeringPidThirdPersonIValue)) return false;
                if (!object.Equals(this.ControlsSteeringPidThirdPersonDValue, rhs.ControlsSteeringPidThirdPersonDValue)) return false;
                if (!object.Equals(this.ControlsSteeringPidFirstPersonPValue, rhs.ControlsSteeringPidFirstPersonPValue)) return false;
                if (!object.Equals(this.ControlsSteeringPidFirstPersonIValue, rhs.ControlsSteeringPidFirstPersonIValue)) return false;
                if (!object.Equals(this.ControlsSteeringPidFirstPersonDValue, rhs.ControlsSteeringPidFirstPersonDValue)) return false;
                if (!object.Equals(this.Unknown1, rhs.Unknown1)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.Unknown3, rhs.Unknown3)) return false;
                if (!object.Equals(this.Unknown4, rhs.Unknown4)) return false;
                if (!object.Equals(this.Unknown5, rhs.Unknown5)) return false;
                if (!object.Equals(this.Unknown6, rhs.Unknown6)) return false;
                if (!object.Equals(this.CameraBaseZoomFirstPerson, rhs.CameraBaseZoomFirstPerson)) return false;
                if (!object.Equals(this.CameraBaseZoomThirdPersonNear, rhs.CameraBaseZoomThirdPersonNear)) return false;
                if (!object.Equals(this.CameraBaseZoomThirdPersonFar, rhs.CameraBaseZoomThirdPersonFar)) return false;
                if (!object.Equals(this.CameraBaseHeightFirstPerson, rhs.CameraBaseHeightFirstPerson)) return false;
                if (!object.Equals(this.CameraBaseHeightThirdPersonNear, rhs.CameraBaseHeightThirdPersonNear)) return false;
                if (!object.Equals(this.CameraBaseHeightThirdPersonFar, rhs.CameraBaseHeightThirdPersonFar)) return false;
                if (!object.Equals(this.CameraBaseFovFirstPerson, rhs.CameraBaseFovFirstPerson)) return false;
                if (!object.Equals(this.CameraBaseFovThirdPersonNear, rhs.CameraBaseFovThirdPersonNear)) return false;
                if (!object.Equals(this.CameraBaseFovThirdPersonFar, rhs.CameraBaseFovThirdPersonFar)) return false;
                if (!object.Equals(this.CameraBoostFovOffsetNear, rhs.CameraBoostFovOffsetNear)) return false;
                if (!object.Equals(this.CameraBoostFovOffsetFar, rhs.CameraBoostFovOffsetFar)) return false;
                if (!object.Equals(this.CameraSpeedRatioZoomOffsetThirdPersonNear, rhs.CameraSpeedRatioZoomOffsetThirdPersonNear)) return false;
                if (!object.Equals(this.CameraSpeedRatioZoomOffsetThirdPersonFar, rhs.CameraSpeedRatioZoomOffsetThirdPersonFar)) return false;
                if (!object.Equals(this.CameraSpeedPidPValue, rhs.CameraSpeedPidPValue)) return false;
                if (!object.Equals(this.CameraSpeedPidIValue, rhs.CameraSpeedPidIValue)) return false;
                if (!object.Equals(this.CameraSpeedPidDValue, rhs.CameraSpeedPidDValue)) return false;
                if (!object.Equals(this.CameraFovBlendFactorAiming, rhs.CameraFovBlendFactorAiming)) return false;
                if (!object.Equals(this.CameraFovBlendFactorBoosting, rhs.CameraFovBlendFactorBoosting)) return false;
                if (!object.Equals(this.CameraPositionBlendFilteringFactor, rhs.CameraPositionBlendFilteringFactor)) return false;
                if (!object.Equals(this.CameraPositionRLOffsetFirstPerson, rhs.CameraPositionRLOffsetFirstPerson)) return false;
                if (!object.Equals(this.HandlingForwardBoostForceInWater, rhs.HandlingForwardBoostForceInWater)) return false;
                if (!object.Equals(this.WaterLinDamp, rhs.WaterLinDamp)) return false;
                if (!object.Equals(this.WheelMaxFriction, rhs.WheelMaxFriction)) return false;
                if (!object.Equals(this.WaterBobAccelerationDeadZone, rhs.WaterBobAccelerationDeadZone)) return false;
                if (!object.Equals(this.WaterBobAccelerationPitch, rhs.WaterBobAccelerationPitch)) return false;
                if (!object.Equals(this.WaterBobAccelerationRoll, rhs.WaterBobAccelerationRoll)) return false;
                if (!object.Equals(this.WaterBobNaturalPitchPeriod, rhs.WaterBobNaturalPitchPeriod)) return false;
                if (!object.Equals(this.WaterBobNaturalRollPeriod, rhs.WaterBobNaturalRollPeriod)) return false;
                if (!object.Equals(this.WaterBobNaturalAmplitude, rhs.WaterBobNaturalAmplitude)) return false;
                if (!object.Equals(this.WaterBobTorquePitch, rhs.WaterBobTorquePitch)) return false;
                if (!object.Equals(this.WaterBobTorqueRoll, rhs.WaterBobTorqueRoll)) return false;
                if (!object.Equals(this.ChassisLinearDamping, rhs.ChassisLinearDamping)) return false;
                if (!object.Equals(this.SuspensionMaxVisualSpeedCompression, rhs.SuspensionMaxVisualSpeedCompression)) return false;
                if (!object.Equals(this.SuspensionMaxVisualSpeedRelaxation, rhs.SuspensionMaxVisualSpeedRelaxation)) return false;
                if (!object.Equals(this.SlideFactorGainGreaterThanThreshold, rhs.SlideFactorGainGreaterThanThreshold)) return false;
                if (!object.Equals(this.SlideFactorLostLessThanOrEqualThreshold, rhs.SlideFactorLostLessThanOrEqualThreshold)) return false;
                if (!object.Equals(this.SlideFactorThreshold, rhs.SlideFactorThreshold)) return false;
                if (!object.Equals(this.SlideFactorFrictionAtMax, rhs.SlideFactorFrictionAtMax)) return false;
                if (!object.Equals(this.SlideFactorViscosityFrictionAtMax, rhs.SlideFactorViscosityFrictionAtMax)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.NodeNamesSuspensionFrontLeft);
                hash.Add(this.NodeNamesSuspensionFrontRight);
                hash.Add(this.NodeNamesSuspensionRearLeft);
                hash.Add(this.NodeNamesSuspensionRearRight);
                hash.Add(this.NodeNamesWheelFrontLeft);
                hash.Add(this.NodeNamesWheelFrontRight);
                hash.Add(this.NodeNamesWheelRearLeft);
                hash.Add(this.NodeNamesWheelRearRight);
                hash.Add(this.ChassisForwardAxis);
                hash.Add(this.ChassisUpAxis);
                hash.Add(this.ChassisVehicleMass);
                hash.Add(this.ChassisFrictionEqualizer);
                hash.Add(this.ChassisTorqueRoll);
                hash.Add(this.ChassisTorquePitch);
                hash.Add(this.ChassisTorqueYaw);
                hash.Add(this.ChassisInertiaYaw);
                hash.Add(this.ChassisInertiaRoll);
                hash.Add(this.ChassisInertialPitch);
                hash.Add(this.ChassisExtraTorque);
                hash.Add(this.ChassisMaxVelocityPositionalFriction);
                hash.Add(this.ChassisFriction);
                hash.Add(this.ChassisRestitution);
                hash.Add(this.ChassisComOffsetForward);
                hash.Add(this.ChassisComOffsetUp);
                hash.Add(this.WheelSlipAngle);
                hash.Add(this.WheelFriction);
                hash.Add(this.WheelScale);
                hash.Add(this.WheelMass);
                hash.Add(this.WheelViscosityFriction);
                hash.Add(this.WheelCastType);
                hash.Add(this.SuspensionStrength);
                hash.Add(this.SuspensionDampingCompression);
                hash.Add(this.SuspensionDampingRelaxation);
                hash.Add(this.SuspensionLength);
                hash.Add(this.SuspensionOffsetsUpFront);
                hash.Add(this.SuspensionOffsetsUpBack);
                hash.Add(this.SuspensionOffsetsFront);
                hash.Add(this.SuspensionOffsetsBack);
                hash.Add(this.SuspensionOffsetsLateral);
                hash.Add(this.SteeringMaxAngle);
                hash.Add(this.SteeringMaxAngleAtSpeed);
                hash.Add(this.EngineMaxSpeed);
                hash.Add(this.EngineMaxTorque);
                hash.Add(this.EngineMinRpm);
                hash.Add(this.EngineMaxRpm);
                hash.Add(this.EngineOptRpm);
                hash.Add(this.EngineTorqueMinRpm);
                hash.Add(this.EngineTorqueMaxRpm);
                hash.Add(this.EngineResistanceMinRpm);
                hash.Add(this.EngineResistanceMaxRpm);
                hash.Add(this.EngineResistanceOptRpm);
                hash.Add(this.TransmissionDownshiftRpm);
                hash.Add(this.TransmissionUpshiftRpm);
                hash.Add(this.TransmissionClutchDelayTime);
                hash.Add(this.TransmissionGearRatioReverse);
                hash.Add(this.TransmissionGearRatioFirst);
                hash.Add(this.TransmissionGearRatioSecond);
                hash.Add(this.TransmissionGearRatioThird);
                hash.Add(this.TransmissionGearRatioFourth);
                hash.Add(this.TransmissionTorqueRatioFrontWheels);
                hash.Add(this.TransmissionTorqueRatioBackWheels);
                hash.Add(this.BrakesMaxTorque);
                hash.Add(this.BrakesMinPedalInputToBlock);
                hash.Add(this.BrakesWheelsMinTimeToBlock);
                hash.Add(this.AerodynamicsAirDensity);
                hash.Add(this.AerodynamicsFrontArea);
                hash.Add(this.AerodynamicsDragCoefficient);
                hash.Add(this.AerodynamicsLiftCoefficient);
                hash.Add(this.AerodynamicsExtraGravityMultiplier);
                hash.Add(this.VelocityDampingNormalSpin);
                hash.Add(this.VelocityDampingCollisionSpin);
                hash.Add(this.VelocityDampingCollisionThreshold);
                hash.Add(this.HandlingReorientStrength);
                hash.Add(this.HandlingReorientDamping);
                hash.Add(this.HandlingVerticalBoostForce);
                hash.Add(this.HandlingForwardBoostForce);
                hash.Add(this.HandlingBoostMaxVelocity);
                hash.Add(this.HandlingBoostDuration);
                hash.Add(this.HandlingVerticalBoostDuration);
                hash.Add(this.HandlingBoostRechargeDelay);
                hash.Add(this.HandlingBoostRechargeDuration);
                hash.Add(this.WaterStrengthFront);
                hash.Add(this.WaterStrengthBack);
                hash.Add(this.WaterDampFront);
                hash.Add(this.WaterDampBack);
                hash.Add(this.WaterDrive);
                hash.Add(this.WaterRotationDamp);
                hash.Add(this.BumperEnable);
                hash.Add(this.BumperForward);
                hash.Add(this.BumperUp);
                hash.Add(this.BumperWidth);
                hash.Add(this.BumperRadius);
                hash.Add(this.CollisionDampingAngular);
                hash.Add(this.CollisionMinSlopeCos);
                hash.Add(this.ControlsSteeringPidThirdPersonPValue);
                hash.Add(this.ControlsSteeringPidThirdPersonIValue);
                hash.Add(this.ControlsSteeringPidThirdPersonDValue);
                hash.Add(this.ControlsSteeringPidFirstPersonPValue);
                hash.Add(this.ControlsSteeringPidFirstPersonIValue);
                hash.Add(this.ControlsSteeringPidFirstPersonDValue);
                hash.Add(this.Unknown1);
                hash.Add(this.Unknown2);
                hash.Add(this.Unknown3);
                hash.Add(this.Unknown4);
                hash.Add(this.Unknown5);
                hash.Add(this.Unknown6);
                hash.Add(this.CameraBaseZoomFirstPerson);
                hash.Add(this.CameraBaseZoomThirdPersonNear);
                hash.Add(this.CameraBaseZoomThirdPersonFar);
                hash.Add(this.CameraBaseHeightFirstPerson);
                hash.Add(this.CameraBaseHeightThirdPersonNear);
                hash.Add(this.CameraBaseHeightThirdPersonFar);
                hash.Add(this.CameraBaseFovFirstPerson);
                hash.Add(this.CameraBaseFovThirdPersonNear);
                hash.Add(this.CameraBaseFovThirdPersonFar);
                hash.Add(this.CameraBoostFovOffsetNear);
                hash.Add(this.CameraBoostFovOffsetFar);
                hash.Add(this.CameraSpeedRatioZoomOffsetThirdPersonNear);
                hash.Add(this.CameraSpeedRatioZoomOffsetThirdPersonFar);
                hash.Add(this.CameraSpeedPidPValue);
                hash.Add(this.CameraSpeedPidIValue);
                hash.Add(this.CameraSpeedPidDValue);
                hash.Add(this.CameraFovBlendFactorAiming);
                hash.Add(this.CameraFovBlendFactorBoosting);
                hash.Add(this.CameraPositionBlendFilteringFactor);
                hash.Add(this.CameraPositionRLOffsetFirstPerson);
                hash.Add(this.HandlingForwardBoostForceInWater);
                hash.Add(this.WaterLinDamp);
                hash.Add(this.WheelMaxFriction);
                hash.Add(this.WaterBobAccelerationDeadZone);
                hash.Add(this.WaterBobAccelerationPitch);
                hash.Add(this.WaterBobAccelerationRoll);
                hash.Add(this.WaterBobNaturalPitchPeriod);
                hash.Add(this.WaterBobNaturalRollPeriod);
                hash.Add(this.WaterBobNaturalAmplitude);
                hash.Add(this.WaterBobTorquePitch);
                hash.Add(this.WaterBobTorqueRoll);
                hash.Add(this.ChassisLinearDamping);
                hash.Add(this.SuspensionMaxVisualSpeedCompression);
                hash.Add(this.SuspensionMaxVisualSpeedRelaxation);
                hash.Add(this.SlideFactorGainGreaterThanThreshold);
                hash.Add(this.SlideFactorLostLessThanOrEqualThreshold);
                hash.Add(this.SlideFactorThreshold);
                hash.Add(this.SlideFactorFrictionAtMax);
                hash.Add(this.SlideFactorViscosityFrictionAtMax);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.NodeNamesSuspensionFrontLeft)) return false;
                if (!eval(this.NodeNamesSuspensionFrontRight)) return false;
                if (!eval(this.NodeNamesSuspensionRearLeft)) return false;
                if (!eval(this.NodeNamesSuspensionRearRight)) return false;
                if (!eval(this.NodeNamesWheelFrontLeft)) return false;
                if (!eval(this.NodeNamesWheelFrontRight)) return false;
                if (!eval(this.NodeNamesWheelRearLeft)) return false;
                if (!eval(this.NodeNamesWheelRearRight)) return false;
                if (!eval(this.ChassisForwardAxis)) return false;
                if (!eval(this.ChassisUpAxis)) return false;
                if (!eval(this.ChassisVehicleMass)) return false;
                if (!eval(this.ChassisFrictionEqualizer)) return false;
                if (!eval(this.ChassisTorqueRoll)) return false;
                if (!eval(this.ChassisTorquePitch)) return false;
                if (!eval(this.ChassisTorqueYaw)) return false;
                if (!eval(this.ChassisInertiaYaw)) return false;
                if (!eval(this.ChassisInertiaRoll)) return false;
                if (!eval(this.ChassisInertialPitch)) return false;
                if (!eval(this.ChassisExtraTorque)) return false;
                if (!eval(this.ChassisMaxVelocityPositionalFriction)) return false;
                if (!eval(this.ChassisFriction)) return false;
                if (!eval(this.ChassisRestitution)) return false;
                if (!eval(this.ChassisComOffsetForward)) return false;
                if (!eval(this.ChassisComOffsetUp)) return false;
                if (!eval(this.WheelSlipAngle)) return false;
                if (!eval(this.WheelFriction)) return false;
                if (!eval(this.WheelScale)) return false;
                if (!eval(this.WheelMass)) return false;
                if (!eval(this.WheelViscosityFriction)) return false;
                if (!eval(this.WheelCastType)) return false;
                if (!eval(this.SuspensionStrength)) return false;
                if (!eval(this.SuspensionDampingCompression)) return false;
                if (!eval(this.SuspensionDampingRelaxation)) return false;
                if (!eval(this.SuspensionLength)) return false;
                if (!eval(this.SuspensionOffsetsUpFront)) return false;
                if (!eval(this.SuspensionOffsetsUpBack)) return false;
                if (!eval(this.SuspensionOffsetsFront)) return false;
                if (!eval(this.SuspensionOffsetsBack)) return false;
                if (!eval(this.SuspensionOffsetsLateral)) return false;
                if (!eval(this.SteeringMaxAngle)) return false;
                if (!eval(this.SteeringMaxAngleAtSpeed)) return false;
                if (!eval(this.EngineMaxSpeed)) return false;
                if (!eval(this.EngineMaxTorque)) return false;
                if (!eval(this.EngineMinRpm)) return false;
                if (!eval(this.EngineMaxRpm)) return false;
                if (!eval(this.EngineOptRpm)) return false;
                if (!eval(this.EngineTorqueMinRpm)) return false;
                if (!eval(this.EngineTorqueMaxRpm)) return false;
                if (!eval(this.EngineResistanceMinRpm)) return false;
                if (!eval(this.EngineResistanceMaxRpm)) return false;
                if (!eval(this.EngineResistanceOptRpm)) return false;
                if (!eval(this.TransmissionDownshiftRpm)) return false;
                if (!eval(this.TransmissionUpshiftRpm)) return false;
                if (!eval(this.TransmissionClutchDelayTime)) return false;
                if (!eval(this.TransmissionGearRatioReverse)) return false;
                if (!eval(this.TransmissionGearRatioFirst)) return false;
                if (!eval(this.TransmissionGearRatioSecond)) return false;
                if (!eval(this.TransmissionGearRatioThird)) return false;
                if (!eval(this.TransmissionGearRatioFourth)) return false;
                if (!eval(this.TransmissionTorqueRatioFrontWheels)) return false;
                if (!eval(this.TransmissionTorqueRatioBackWheels)) return false;
                if (!eval(this.BrakesMaxTorque)) return false;
                if (!eval(this.BrakesMinPedalInputToBlock)) return false;
                if (!eval(this.BrakesWheelsMinTimeToBlock)) return false;
                if (!eval(this.AerodynamicsAirDensity)) return false;
                if (!eval(this.AerodynamicsFrontArea)) return false;
                if (!eval(this.AerodynamicsDragCoefficient)) return false;
                if (!eval(this.AerodynamicsLiftCoefficient)) return false;
                if (!eval(this.AerodynamicsExtraGravityMultiplier)) return false;
                if (!eval(this.VelocityDampingNormalSpin)) return false;
                if (!eval(this.VelocityDampingCollisionSpin)) return false;
                if (!eval(this.VelocityDampingCollisionThreshold)) return false;
                if (!eval(this.HandlingReorientStrength)) return false;
                if (!eval(this.HandlingReorientDamping)) return false;
                if (!eval(this.HandlingVerticalBoostForce)) return false;
                if (!eval(this.HandlingForwardBoostForce)) return false;
                if (!eval(this.HandlingBoostMaxVelocity)) return false;
                if (!eval(this.HandlingBoostDuration)) return false;
                if (!eval(this.HandlingVerticalBoostDuration)) return false;
                if (!eval(this.HandlingBoostRechargeDelay)) return false;
                if (!eval(this.HandlingBoostRechargeDuration)) return false;
                if (!eval(this.WaterStrengthFront)) return false;
                if (!eval(this.WaterStrengthBack)) return false;
                if (!eval(this.WaterDampFront)) return false;
                if (!eval(this.WaterDampBack)) return false;
                if (!eval(this.WaterDrive)) return false;
                if (!eval(this.WaterRotationDamp)) return false;
                if (!eval(this.BumperEnable)) return false;
                if (!eval(this.BumperForward)) return false;
                if (!eval(this.BumperUp)) return false;
                if (!eval(this.BumperWidth)) return false;
                if (!eval(this.BumperRadius)) return false;
                if (!eval(this.CollisionDampingAngular)) return false;
                if (!eval(this.CollisionMinSlopeCos)) return false;
                if (!eval(this.ControlsSteeringPidThirdPersonPValue)) return false;
                if (!eval(this.ControlsSteeringPidThirdPersonIValue)) return false;
                if (!eval(this.ControlsSteeringPidThirdPersonDValue)) return false;
                if (!eval(this.ControlsSteeringPidFirstPersonPValue)) return false;
                if (!eval(this.ControlsSteeringPidFirstPersonIValue)) return false;
                if (!eval(this.ControlsSteeringPidFirstPersonDValue)) return false;
                if (!eval(this.Unknown1)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.Unknown3)) return false;
                if (!eval(this.Unknown4)) return false;
                if (!eval(this.Unknown5)) return false;
                if (!eval(this.Unknown6)) return false;
                if (!eval(this.CameraBaseZoomFirstPerson)) return false;
                if (!eval(this.CameraBaseZoomThirdPersonNear)) return false;
                if (!eval(this.CameraBaseZoomThirdPersonFar)) return false;
                if (!eval(this.CameraBaseHeightFirstPerson)) return false;
                if (!eval(this.CameraBaseHeightThirdPersonNear)) return false;
                if (!eval(this.CameraBaseHeightThirdPersonFar)) return false;
                if (!eval(this.CameraBaseFovFirstPerson)) return false;
                if (!eval(this.CameraBaseFovThirdPersonNear)) return false;
                if (!eval(this.CameraBaseFovThirdPersonFar)) return false;
                if (!eval(this.CameraBoostFovOffsetNear)) return false;
                if (!eval(this.CameraBoostFovOffsetFar)) return false;
                if (!eval(this.CameraSpeedRatioZoomOffsetThirdPersonNear)) return false;
                if (!eval(this.CameraSpeedRatioZoomOffsetThirdPersonFar)) return false;
                if (!eval(this.CameraSpeedPidPValue)) return false;
                if (!eval(this.CameraSpeedPidIValue)) return false;
                if (!eval(this.CameraSpeedPidDValue)) return false;
                if (!eval(this.CameraFovBlendFactorAiming)) return false;
                if (!eval(this.CameraFovBlendFactorBoosting)) return false;
                if (!eval(this.CameraPositionBlendFilteringFactor)) return false;
                if (!eval(this.CameraPositionRLOffsetFirstPerson)) return false;
                if (!eval(this.HandlingForwardBoostForceInWater)) return false;
                if (!eval(this.WaterLinDamp)) return false;
                if (!eval(this.WheelMaxFriction)) return false;
                if (!eval(this.WaterBobAccelerationDeadZone)) return false;
                if (!eval(this.WaterBobAccelerationPitch)) return false;
                if (!eval(this.WaterBobAccelerationRoll)) return false;
                if (!eval(this.WaterBobNaturalPitchPeriod)) return false;
                if (!eval(this.WaterBobNaturalRollPeriod)) return false;
                if (!eval(this.WaterBobNaturalAmplitude)) return false;
                if (!eval(this.WaterBobTorquePitch)) return false;
                if (!eval(this.WaterBobTorqueRoll)) return false;
                if (!eval(this.ChassisLinearDamping)) return false;
                if (!eval(this.SuspensionMaxVisualSpeedCompression)) return false;
                if (!eval(this.SuspensionMaxVisualSpeedRelaxation)) return false;
                if (!eval(this.SlideFactorGainGreaterThanThreshold)) return false;
                if (!eval(this.SlideFactorLostLessThanOrEqualThreshold)) return false;
                if (!eval(this.SlideFactorThreshold)) return false;
                if (!eval(this.SlideFactorFrictionAtMax)) return false;
                if (!eval(this.SlideFactorViscosityFrictionAtMax)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.NodeNamesSuspensionFrontLeft)) return true;
                if (eval(this.NodeNamesSuspensionFrontRight)) return true;
                if (eval(this.NodeNamesSuspensionRearLeft)) return true;
                if (eval(this.NodeNamesSuspensionRearRight)) return true;
                if (eval(this.NodeNamesWheelFrontLeft)) return true;
                if (eval(this.NodeNamesWheelFrontRight)) return true;
                if (eval(this.NodeNamesWheelRearLeft)) return true;
                if (eval(this.NodeNamesWheelRearRight)) return true;
                if (eval(this.ChassisForwardAxis)) return true;
                if (eval(this.ChassisUpAxis)) return true;
                if (eval(this.ChassisVehicleMass)) return true;
                if (eval(this.ChassisFrictionEqualizer)) return true;
                if (eval(this.ChassisTorqueRoll)) return true;
                if (eval(this.ChassisTorquePitch)) return true;
                if (eval(this.ChassisTorqueYaw)) return true;
                if (eval(this.ChassisInertiaYaw)) return true;
                if (eval(this.ChassisInertiaRoll)) return true;
                if (eval(this.ChassisInertialPitch)) return true;
                if (eval(this.ChassisExtraTorque)) return true;
                if (eval(this.ChassisMaxVelocityPositionalFriction)) return true;
                if (eval(this.ChassisFriction)) return true;
                if (eval(this.ChassisRestitution)) return true;
                if (eval(this.ChassisComOffsetForward)) return true;
                if (eval(this.ChassisComOffsetUp)) return true;
                if (eval(this.WheelSlipAngle)) return true;
                if (eval(this.WheelFriction)) return true;
                if (eval(this.WheelScale)) return true;
                if (eval(this.WheelMass)) return true;
                if (eval(this.WheelViscosityFriction)) return true;
                if (eval(this.WheelCastType)) return true;
                if (eval(this.SuspensionStrength)) return true;
                if (eval(this.SuspensionDampingCompression)) return true;
                if (eval(this.SuspensionDampingRelaxation)) return true;
                if (eval(this.SuspensionLength)) return true;
                if (eval(this.SuspensionOffsetsUpFront)) return true;
                if (eval(this.SuspensionOffsetsUpBack)) return true;
                if (eval(this.SuspensionOffsetsFront)) return true;
                if (eval(this.SuspensionOffsetsBack)) return true;
                if (eval(this.SuspensionOffsetsLateral)) return true;
                if (eval(this.SteeringMaxAngle)) return true;
                if (eval(this.SteeringMaxAngleAtSpeed)) return true;
                if (eval(this.EngineMaxSpeed)) return true;
                if (eval(this.EngineMaxTorque)) return true;
                if (eval(this.EngineMinRpm)) return true;
                if (eval(this.EngineMaxRpm)) return true;
                if (eval(this.EngineOptRpm)) return true;
                if (eval(this.EngineTorqueMinRpm)) return true;
                if (eval(this.EngineTorqueMaxRpm)) return true;
                if (eval(this.EngineResistanceMinRpm)) return true;
                if (eval(this.EngineResistanceMaxRpm)) return true;
                if (eval(this.EngineResistanceOptRpm)) return true;
                if (eval(this.TransmissionDownshiftRpm)) return true;
                if (eval(this.TransmissionUpshiftRpm)) return true;
                if (eval(this.TransmissionClutchDelayTime)) return true;
                if (eval(this.TransmissionGearRatioReverse)) return true;
                if (eval(this.TransmissionGearRatioFirst)) return true;
                if (eval(this.TransmissionGearRatioSecond)) return true;
                if (eval(this.TransmissionGearRatioThird)) return true;
                if (eval(this.TransmissionGearRatioFourth)) return true;
                if (eval(this.TransmissionTorqueRatioFrontWheels)) return true;
                if (eval(this.TransmissionTorqueRatioBackWheels)) return true;
                if (eval(this.BrakesMaxTorque)) return true;
                if (eval(this.BrakesMinPedalInputToBlock)) return true;
                if (eval(this.BrakesWheelsMinTimeToBlock)) return true;
                if (eval(this.AerodynamicsAirDensity)) return true;
                if (eval(this.AerodynamicsFrontArea)) return true;
                if (eval(this.AerodynamicsDragCoefficient)) return true;
                if (eval(this.AerodynamicsLiftCoefficient)) return true;
                if (eval(this.AerodynamicsExtraGravityMultiplier)) return true;
                if (eval(this.VelocityDampingNormalSpin)) return true;
                if (eval(this.VelocityDampingCollisionSpin)) return true;
                if (eval(this.VelocityDampingCollisionThreshold)) return true;
                if (eval(this.HandlingReorientStrength)) return true;
                if (eval(this.HandlingReorientDamping)) return true;
                if (eval(this.HandlingVerticalBoostForce)) return true;
                if (eval(this.HandlingForwardBoostForce)) return true;
                if (eval(this.HandlingBoostMaxVelocity)) return true;
                if (eval(this.HandlingBoostDuration)) return true;
                if (eval(this.HandlingVerticalBoostDuration)) return true;
                if (eval(this.HandlingBoostRechargeDelay)) return true;
                if (eval(this.HandlingBoostRechargeDuration)) return true;
                if (eval(this.WaterStrengthFront)) return true;
                if (eval(this.WaterStrengthBack)) return true;
                if (eval(this.WaterDampFront)) return true;
                if (eval(this.WaterDampBack)) return true;
                if (eval(this.WaterDrive)) return true;
                if (eval(this.WaterRotationDamp)) return true;
                if (eval(this.BumperEnable)) return true;
                if (eval(this.BumperForward)) return true;
                if (eval(this.BumperUp)) return true;
                if (eval(this.BumperWidth)) return true;
                if (eval(this.BumperRadius)) return true;
                if (eval(this.CollisionDampingAngular)) return true;
                if (eval(this.CollisionMinSlopeCos)) return true;
                if (eval(this.ControlsSteeringPidThirdPersonPValue)) return true;
                if (eval(this.ControlsSteeringPidThirdPersonIValue)) return true;
                if (eval(this.ControlsSteeringPidThirdPersonDValue)) return true;
                if (eval(this.ControlsSteeringPidFirstPersonPValue)) return true;
                if (eval(this.ControlsSteeringPidFirstPersonIValue)) return true;
                if (eval(this.ControlsSteeringPidFirstPersonDValue)) return true;
                if (eval(this.Unknown1)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.Unknown3)) return true;
                if (eval(this.Unknown4)) return true;
                if (eval(this.Unknown5)) return true;
                if (eval(this.Unknown6)) return true;
                if (eval(this.CameraBaseZoomFirstPerson)) return true;
                if (eval(this.CameraBaseZoomThirdPersonNear)) return true;
                if (eval(this.CameraBaseZoomThirdPersonFar)) return true;
                if (eval(this.CameraBaseHeightFirstPerson)) return true;
                if (eval(this.CameraBaseHeightThirdPersonNear)) return true;
                if (eval(this.CameraBaseHeightThirdPersonFar)) return true;
                if (eval(this.CameraBaseFovFirstPerson)) return true;
                if (eval(this.CameraBaseFovThirdPersonNear)) return true;
                if (eval(this.CameraBaseFovThirdPersonFar)) return true;
                if (eval(this.CameraBoostFovOffsetNear)) return true;
                if (eval(this.CameraBoostFovOffsetFar)) return true;
                if (eval(this.CameraSpeedRatioZoomOffsetThirdPersonNear)) return true;
                if (eval(this.CameraSpeedRatioZoomOffsetThirdPersonFar)) return true;
                if (eval(this.CameraSpeedPidPValue)) return true;
                if (eval(this.CameraSpeedPidIValue)) return true;
                if (eval(this.CameraSpeedPidDValue)) return true;
                if (eval(this.CameraFovBlendFactorAiming)) return true;
                if (eval(this.CameraFovBlendFactorBoosting)) return true;
                if (eval(this.CameraPositionBlendFilteringFactor)) return true;
                if (eval(this.CameraPositionRLOffsetFirstPerson)) return true;
                if (eval(this.HandlingForwardBoostForceInWater)) return true;
                if (eval(this.WaterLinDamp)) return true;
                if (eval(this.WheelMaxFriction)) return true;
                if (eval(this.WaterBobAccelerationDeadZone)) return true;
                if (eval(this.WaterBobAccelerationPitch)) return true;
                if (eval(this.WaterBobAccelerationRoll)) return true;
                if (eval(this.WaterBobNaturalPitchPeriod)) return true;
                if (eval(this.WaterBobNaturalRollPeriod)) return true;
                if (eval(this.WaterBobNaturalAmplitude)) return true;
                if (eval(this.WaterBobTorquePitch)) return true;
                if (eval(this.WaterBobTorqueRoll)) return true;
                if (eval(this.ChassisLinearDamping)) return true;
                if (eval(this.SuspensionMaxVisualSpeedCompression)) return true;
                if (eval(this.SuspensionMaxVisualSpeedRelaxation)) return true;
                if (eval(this.SlideFactorGainGreaterThanThreshold)) return true;
                if (eval(this.SlideFactorLostLessThanOrEqualThreshold)) return true;
                if (eval(this.SlideFactorThreshold)) return true;
                if (eval(this.SlideFactorFrictionAtMax)) return true;
                if (eval(this.SlideFactorViscosityFrictionAtMax)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new VehicleConfigData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.NodeNamesSuspensionFrontLeft = eval(this.NodeNamesSuspensionFrontLeft);
                obj.NodeNamesSuspensionFrontRight = eval(this.NodeNamesSuspensionFrontRight);
                obj.NodeNamesSuspensionRearLeft = eval(this.NodeNamesSuspensionRearLeft);
                obj.NodeNamesSuspensionRearRight = eval(this.NodeNamesSuspensionRearRight);
                obj.NodeNamesWheelFrontLeft = eval(this.NodeNamesWheelFrontLeft);
                obj.NodeNamesWheelFrontRight = eval(this.NodeNamesWheelFrontRight);
                obj.NodeNamesWheelRearLeft = eval(this.NodeNamesWheelRearLeft);
                obj.NodeNamesWheelRearRight = eval(this.NodeNamesWheelRearRight);
                obj.ChassisForwardAxis = eval(this.ChassisForwardAxis);
                obj.ChassisUpAxis = eval(this.ChassisUpAxis);
                obj.ChassisVehicleMass = eval(this.ChassisVehicleMass);
                obj.ChassisFrictionEqualizer = eval(this.ChassisFrictionEqualizer);
                obj.ChassisTorqueRoll = eval(this.ChassisTorqueRoll);
                obj.ChassisTorquePitch = eval(this.ChassisTorquePitch);
                obj.ChassisTorqueYaw = eval(this.ChassisTorqueYaw);
                obj.ChassisInertiaYaw = eval(this.ChassisInertiaYaw);
                obj.ChassisInertiaRoll = eval(this.ChassisInertiaRoll);
                obj.ChassisInertialPitch = eval(this.ChassisInertialPitch);
                obj.ChassisExtraTorque = eval(this.ChassisExtraTorque);
                obj.ChassisMaxVelocityPositionalFriction = eval(this.ChassisMaxVelocityPositionalFriction);
                obj.ChassisFriction = eval(this.ChassisFriction);
                obj.ChassisRestitution = eval(this.ChassisRestitution);
                obj.ChassisComOffsetForward = eval(this.ChassisComOffsetForward);
                obj.ChassisComOffsetUp = eval(this.ChassisComOffsetUp);
                obj.WheelSlipAngle = eval(this.WheelSlipAngle);
                obj.WheelFriction = eval(this.WheelFriction);
                obj.WheelScale = eval(this.WheelScale);
                obj.WheelMass = eval(this.WheelMass);
                obj.WheelViscosityFriction = eval(this.WheelViscosityFriction);
                obj.WheelCastType = eval(this.WheelCastType);
                obj.SuspensionStrength = eval(this.SuspensionStrength);
                obj.SuspensionDampingCompression = eval(this.SuspensionDampingCompression);
                obj.SuspensionDampingRelaxation = eval(this.SuspensionDampingRelaxation);
                obj.SuspensionLength = eval(this.SuspensionLength);
                obj.SuspensionOffsetsUpFront = eval(this.SuspensionOffsetsUpFront);
                obj.SuspensionOffsetsUpBack = eval(this.SuspensionOffsetsUpBack);
                obj.SuspensionOffsetsFront = eval(this.SuspensionOffsetsFront);
                obj.SuspensionOffsetsBack = eval(this.SuspensionOffsetsBack);
                obj.SuspensionOffsetsLateral = eval(this.SuspensionOffsetsLateral);
                obj.SteeringMaxAngle = eval(this.SteeringMaxAngle);
                obj.SteeringMaxAngleAtSpeed = eval(this.SteeringMaxAngleAtSpeed);
                obj.EngineMaxSpeed = eval(this.EngineMaxSpeed);
                obj.EngineMaxTorque = eval(this.EngineMaxTorque);
                obj.EngineMinRpm = eval(this.EngineMinRpm);
                obj.EngineMaxRpm = eval(this.EngineMaxRpm);
                obj.EngineOptRpm = eval(this.EngineOptRpm);
                obj.EngineTorqueMinRpm = eval(this.EngineTorqueMinRpm);
                obj.EngineTorqueMaxRpm = eval(this.EngineTorqueMaxRpm);
                obj.EngineResistanceMinRpm = eval(this.EngineResistanceMinRpm);
                obj.EngineResistanceMaxRpm = eval(this.EngineResistanceMaxRpm);
                obj.EngineResistanceOptRpm = eval(this.EngineResistanceOptRpm);
                obj.TransmissionDownshiftRpm = eval(this.TransmissionDownshiftRpm);
                obj.TransmissionUpshiftRpm = eval(this.TransmissionUpshiftRpm);
                obj.TransmissionClutchDelayTime = eval(this.TransmissionClutchDelayTime);
                obj.TransmissionGearRatioReverse = eval(this.TransmissionGearRatioReverse);
                obj.TransmissionGearRatioFirst = eval(this.TransmissionGearRatioFirst);
                obj.TransmissionGearRatioSecond = eval(this.TransmissionGearRatioSecond);
                obj.TransmissionGearRatioThird = eval(this.TransmissionGearRatioThird);
                obj.TransmissionGearRatioFourth = eval(this.TransmissionGearRatioFourth);
                obj.TransmissionTorqueRatioFrontWheels = eval(this.TransmissionTorqueRatioFrontWheels);
                obj.TransmissionTorqueRatioBackWheels = eval(this.TransmissionTorqueRatioBackWheels);
                obj.BrakesMaxTorque = eval(this.BrakesMaxTorque);
                obj.BrakesMinPedalInputToBlock = eval(this.BrakesMinPedalInputToBlock);
                obj.BrakesWheelsMinTimeToBlock = eval(this.BrakesWheelsMinTimeToBlock);
                obj.AerodynamicsAirDensity = eval(this.AerodynamicsAirDensity);
                obj.AerodynamicsFrontArea = eval(this.AerodynamicsFrontArea);
                obj.AerodynamicsDragCoefficient = eval(this.AerodynamicsDragCoefficient);
                obj.AerodynamicsLiftCoefficient = eval(this.AerodynamicsLiftCoefficient);
                obj.AerodynamicsExtraGravityMultiplier = eval(this.AerodynamicsExtraGravityMultiplier);
                obj.VelocityDampingNormalSpin = eval(this.VelocityDampingNormalSpin);
                obj.VelocityDampingCollisionSpin = eval(this.VelocityDampingCollisionSpin);
                obj.VelocityDampingCollisionThreshold = eval(this.VelocityDampingCollisionThreshold);
                obj.HandlingReorientStrength = eval(this.HandlingReorientStrength);
                obj.HandlingReorientDamping = eval(this.HandlingReorientDamping);
                obj.HandlingVerticalBoostForce = eval(this.HandlingVerticalBoostForce);
                obj.HandlingForwardBoostForce = eval(this.HandlingForwardBoostForce);
                obj.HandlingBoostMaxVelocity = eval(this.HandlingBoostMaxVelocity);
                obj.HandlingBoostDuration = eval(this.HandlingBoostDuration);
                obj.HandlingVerticalBoostDuration = eval(this.HandlingVerticalBoostDuration);
                obj.HandlingBoostRechargeDelay = eval(this.HandlingBoostRechargeDelay);
                obj.HandlingBoostRechargeDuration = eval(this.HandlingBoostRechargeDuration);
                obj.WaterStrengthFront = eval(this.WaterStrengthFront);
                obj.WaterStrengthBack = eval(this.WaterStrengthBack);
                obj.WaterDampFront = eval(this.WaterDampFront);
                obj.WaterDampBack = eval(this.WaterDampBack);
                obj.WaterDrive = eval(this.WaterDrive);
                obj.WaterRotationDamp = eval(this.WaterRotationDamp);
                obj.BumperEnable = eval(this.BumperEnable);
                obj.BumperForward = eval(this.BumperForward);
                obj.BumperUp = eval(this.BumperUp);
                obj.BumperWidth = eval(this.BumperWidth);
                obj.BumperRadius = eval(this.BumperRadius);
                obj.CollisionDampingAngular = eval(this.CollisionDampingAngular);
                obj.CollisionMinSlopeCos = eval(this.CollisionMinSlopeCos);
                obj.ControlsSteeringPidThirdPersonPValue = eval(this.ControlsSteeringPidThirdPersonPValue);
                obj.ControlsSteeringPidThirdPersonIValue = eval(this.ControlsSteeringPidThirdPersonIValue);
                obj.ControlsSteeringPidThirdPersonDValue = eval(this.ControlsSteeringPidThirdPersonDValue);
                obj.ControlsSteeringPidFirstPersonPValue = eval(this.ControlsSteeringPidFirstPersonPValue);
                obj.ControlsSteeringPidFirstPersonIValue = eval(this.ControlsSteeringPidFirstPersonIValue);
                obj.ControlsSteeringPidFirstPersonDValue = eval(this.ControlsSteeringPidFirstPersonDValue);
                obj.Unknown1 = eval(this.Unknown1);
                obj.Unknown2 = eval(this.Unknown2);
                obj.Unknown3 = eval(this.Unknown3);
                obj.Unknown4 = eval(this.Unknown4);
                obj.Unknown5 = eval(this.Unknown5);
                obj.Unknown6 = eval(this.Unknown6);
                obj.CameraBaseZoomFirstPerson = eval(this.CameraBaseZoomFirstPerson);
                obj.CameraBaseZoomThirdPersonNear = eval(this.CameraBaseZoomThirdPersonNear);
                obj.CameraBaseZoomThirdPersonFar = eval(this.CameraBaseZoomThirdPersonFar);
                obj.CameraBaseHeightFirstPerson = eval(this.CameraBaseHeightFirstPerson);
                obj.CameraBaseHeightThirdPersonNear = eval(this.CameraBaseHeightThirdPersonNear);
                obj.CameraBaseHeightThirdPersonFar = eval(this.CameraBaseHeightThirdPersonFar);
                obj.CameraBaseFovFirstPerson = eval(this.CameraBaseFovFirstPerson);
                obj.CameraBaseFovThirdPersonNear = eval(this.CameraBaseFovThirdPersonNear);
                obj.CameraBaseFovThirdPersonFar = eval(this.CameraBaseFovThirdPersonFar);
                obj.CameraBoostFovOffsetNear = eval(this.CameraBoostFovOffsetNear);
                obj.CameraBoostFovOffsetFar = eval(this.CameraBoostFovOffsetFar);
                obj.CameraSpeedRatioZoomOffsetThirdPersonNear = eval(this.CameraSpeedRatioZoomOffsetThirdPersonNear);
                obj.CameraSpeedRatioZoomOffsetThirdPersonFar = eval(this.CameraSpeedRatioZoomOffsetThirdPersonFar);
                obj.CameraSpeedPidPValue = eval(this.CameraSpeedPidPValue);
                obj.CameraSpeedPidIValue = eval(this.CameraSpeedPidIValue);
                obj.CameraSpeedPidDValue = eval(this.CameraSpeedPidDValue);
                obj.CameraFovBlendFactorAiming = eval(this.CameraFovBlendFactorAiming);
                obj.CameraFovBlendFactorBoosting = eval(this.CameraFovBlendFactorBoosting);
                obj.CameraPositionBlendFilteringFactor = eval(this.CameraPositionBlendFilteringFactor);
                obj.CameraPositionRLOffsetFirstPerson = eval(this.CameraPositionRLOffsetFirstPerson);
                obj.HandlingForwardBoostForceInWater = eval(this.HandlingForwardBoostForceInWater);
                obj.WaterLinDamp = eval(this.WaterLinDamp);
                obj.WheelMaxFriction = eval(this.WheelMaxFriction);
                obj.WaterBobAccelerationDeadZone = eval(this.WaterBobAccelerationDeadZone);
                obj.WaterBobAccelerationPitch = eval(this.WaterBobAccelerationPitch);
                obj.WaterBobAccelerationRoll = eval(this.WaterBobAccelerationRoll);
                obj.WaterBobNaturalPitchPeriod = eval(this.WaterBobNaturalPitchPeriod);
                obj.WaterBobNaturalRollPeriod = eval(this.WaterBobNaturalRollPeriod);
                obj.WaterBobNaturalAmplitude = eval(this.WaterBobNaturalAmplitude);
                obj.WaterBobTorquePitch = eval(this.WaterBobTorquePitch);
                obj.WaterBobTorqueRoll = eval(this.WaterBobTorqueRoll);
                obj.ChassisLinearDamping = eval(this.ChassisLinearDamping);
                obj.SuspensionMaxVisualSpeedCompression = eval(this.SuspensionMaxVisualSpeedCompression);
                obj.SuspensionMaxVisualSpeedRelaxation = eval(this.SuspensionMaxVisualSpeedRelaxation);
                obj.SlideFactorGainGreaterThanThreshold = eval(this.SlideFactorGainGreaterThanThreshold);
                obj.SlideFactorLostLessThanOrEqualThreshold = eval(this.SlideFactorLostLessThanOrEqualThreshold);
                obj.SlideFactorThreshold = eval(this.SlideFactorThreshold);
                obj.SlideFactorFrictionAtMax = eval(this.SlideFactorFrictionAtMax);
                obj.SlideFactorViscosityFrictionAtMax = eval(this.SlideFactorViscosityFrictionAtMax);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(VehicleConfigData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, VehicleConfigData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(VehicleConfigData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.NodeNamesSuspensionFrontLeft ?? true)
                    {
                        sb.AppendItem(NodeNamesSuspensionFrontLeft, "NodeNamesSuspensionFrontLeft");
                    }
                    if (printMask?.NodeNamesSuspensionFrontRight ?? true)
                    {
                        sb.AppendItem(NodeNamesSuspensionFrontRight, "NodeNamesSuspensionFrontRight");
                    }
                    if (printMask?.NodeNamesSuspensionRearLeft ?? true)
                    {
                        sb.AppendItem(NodeNamesSuspensionRearLeft, "NodeNamesSuspensionRearLeft");
                    }
                    if (printMask?.NodeNamesSuspensionRearRight ?? true)
                    {
                        sb.AppendItem(NodeNamesSuspensionRearRight, "NodeNamesSuspensionRearRight");
                    }
                    if (printMask?.NodeNamesWheelFrontLeft ?? true)
                    {
                        sb.AppendItem(NodeNamesWheelFrontLeft, "NodeNamesWheelFrontLeft");
                    }
                    if (printMask?.NodeNamesWheelFrontRight ?? true)
                    {
                        sb.AppendItem(NodeNamesWheelFrontRight, "NodeNamesWheelFrontRight");
                    }
                    if (printMask?.NodeNamesWheelRearLeft ?? true)
                    {
                        sb.AppendItem(NodeNamesWheelRearLeft, "NodeNamesWheelRearLeft");
                    }
                    if (printMask?.NodeNamesWheelRearRight ?? true)
                    {
                        sb.AppendItem(NodeNamesWheelRearRight, "NodeNamesWheelRearRight");
                    }
                    if (printMask?.ChassisForwardAxis ?? true)
                    {
                        sb.AppendItem(ChassisForwardAxis, "ChassisForwardAxis");
                    }
                    if (printMask?.ChassisUpAxis ?? true)
                    {
                        sb.AppendItem(ChassisUpAxis, "ChassisUpAxis");
                    }
                    if (printMask?.ChassisVehicleMass ?? true)
                    {
                        sb.AppendItem(ChassisVehicleMass, "ChassisVehicleMass");
                    }
                    if (printMask?.ChassisFrictionEqualizer ?? true)
                    {
                        sb.AppendItem(ChassisFrictionEqualizer, "ChassisFrictionEqualizer");
                    }
                    if (printMask?.ChassisTorqueRoll ?? true)
                    {
                        sb.AppendItem(ChassisTorqueRoll, "ChassisTorqueRoll");
                    }
                    if (printMask?.ChassisTorquePitch ?? true)
                    {
                        sb.AppendItem(ChassisTorquePitch, "ChassisTorquePitch");
                    }
                    if (printMask?.ChassisTorqueYaw ?? true)
                    {
                        sb.AppendItem(ChassisTorqueYaw, "ChassisTorqueYaw");
                    }
                    if (printMask?.ChassisInertiaYaw ?? true)
                    {
                        sb.AppendItem(ChassisInertiaYaw, "ChassisInertiaYaw");
                    }
                    if (printMask?.ChassisInertiaRoll ?? true)
                    {
                        sb.AppendItem(ChassisInertiaRoll, "ChassisInertiaRoll");
                    }
                    if (printMask?.ChassisInertialPitch ?? true)
                    {
                        sb.AppendItem(ChassisInertialPitch, "ChassisInertialPitch");
                    }
                    if (printMask?.ChassisExtraTorque ?? true)
                    {
                        sb.AppendItem(ChassisExtraTorque, "ChassisExtraTorque");
                    }
                    if (printMask?.ChassisMaxVelocityPositionalFriction ?? true)
                    {
                        sb.AppendItem(ChassisMaxVelocityPositionalFriction, "ChassisMaxVelocityPositionalFriction");
                    }
                    if (printMask?.ChassisFriction ?? true)
                    {
                        sb.AppendItem(ChassisFriction, "ChassisFriction");
                    }
                    if (printMask?.ChassisRestitution ?? true)
                    {
                        sb.AppendItem(ChassisRestitution, "ChassisRestitution");
                    }
                    if (printMask?.ChassisComOffsetForward ?? true)
                    {
                        sb.AppendItem(ChassisComOffsetForward, "ChassisComOffsetForward");
                    }
                    if (printMask?.ChassisComOffsetUp ?? true)
                    {
                        sb.AppendItem(ChassisComOffsetUp, "ChassisComOffsetUp");
                    }
                    if (printMask?.WheelSlipAngle ?? true)
                    {
                        sb.AppendItem(WheelSlipAngle, "WheelSlipAngle");
                    }
                    if (printMask?.WheelFriction ?? true)
                    {
                        sb.AppendItem(WheelFriction, "WheelFriction");
                    }
                    if (printMask?.WheelScale ?? true)
                    {
                        sb.AppendItem(WheelScale, "WheelScale");
                    }
                    if (printMask?.WheelMass ?? true)
                    {
                        sb.AppendItem(WheelMass, "WheelMass");
                    }
                    if (printMask?.WheelViscosityFriction ?? true)
                    {
                        sb.AppendItem(WheelViscosityFriction, "WheelViscosityFriction");
                    }
                    if (printMask?.WheelCastType ?? true)
                    {
                        sb.AppendItem(WheelCastType, "WheelCastType");
                    }
                    if (printMask?.SuspensionStrength ?? true)
                    {
                        sb.AppendItem(SuspensionStrength, "SuspensionStrength");
                    }
                    if (printMask?.SuspensionDampingCompression ?? true)
                    {
                        sb.AppendItem(SuspensionDampingCompression, "SuspensionDampingCompression");
                    }
                    if (printMask?.SuspensionDampingRelaxation ?? true)
                    {
                        sb.AppendItem(SuspensionDampingRelaxation, "SuspensionDampingRelaxation");
                    }
                    if (printMask?.SuspensionLength ?? true)
                    {
                        sb.AppendItem(SuspensionLength, "SuspensionLength");
                    }
                    if (printMask?.SuspensionOffsetsUpFront ?? true)
                    {
                        sb.AppendItem(SuspensionOffsetsUpFront, "SuspensionOffsetsUpFront");
                    }
                    if (printMask?.SuspensionOffsetsUpBack ?? true)
                    {
                        sb.AppendItem(SuspensionOffsetsUpBack, "SuspensionOffsetsUpBack");
                    }
                    if (printMask?.SuspensionOffsetsFront ?? true)
                    {
                        sb.AppendItem(SuspensionOffsetsFront, "SuspensionOffsetsFront");
                    }
                    if (printMask?.SuspensionOffsetsBack ?? true)
                    {
                        sb.AppendItem(SuspensionOffsetsBack, "SuspensionOffsetsBack");
                    }
                    if (printMask?.SuspensionOffsetsLateral ?? true)
                    {
                        sb.AppendItem(SuspensionOffsetsLateral, "SuspensionOffsetsLateral");
                    }
                    if (printMask?.SteeringMaxAngle ?? true)
                    {
                        sb.AppendItem(SteeringMaxAngle, "SteeringMaxAngle");
                    }
                    if (printMask?.SteeringMaxAngleAtSpeed ?? true)
                    {
                        sb.AppendItem(SteeringMaxAngleAtSpeed, "SteeringMaxAngleAtSpeed");
                    }
                    if (printMask?.EngineMaxSpeed ?? true)
                    {
                        sb.AppendItem(EngineMaxSpeed, "EngineMaxSpeed");
                    }
                    if (printMask?.EngineMaxTorque ?? true)
                    {
                        sb.AppendItem(EngineMaxTorque, "EngineMaxTorque");
                    }
                    if (printMask?.EngineMinRpm ?? true)
                    {
                        sb.AppendItem(EngineMinRpm, "EngineMinRpm");
                    }
                    if (printMask?.EngineMaxRpm ?? true)
                    {
                        sb.AppendItem(EngineMaxRpm, "EngineMaxRpm");
                    }
                    if (printMask?.EngineOptRpm ?? true)
                    {
                        sb.AppendItem(EngineOptRpm, "EngineOptRpm");
                    }
                    if (printMask?.EngineTorqueMinRpm ?? true)
                    {
                        sb.AppendItem(EngineTorqueMinRpm, "EngineTorqueMinRpm");
                    }
                    if (printMask?.EngineTorqueMaxRpm ?? true)
                    {
                        sb.AppendItem(EngineTorqueMaxRpm, "EngineTorqueMaxRpm");
                    }
                    if (printMask?.EngineResistanceMinRpm ?? true)
                    {
                        sb.AppendItem(EngineResistanceMinRpm, "EngineResistanceMinRpm");
                    }
                    if (printMask?.EngineResistanceMaxRpm ?? true)
                    {
                        sb.AppendItem(EngineResistanceMaxRpm, "EngineResistanceMaxRpm");
                    }
                    if (printMask?.EngineResistanceOptRpm ?? true)
                    {
                        sb.AppendItem(EngineResistanceOptRpm, "EngineResistanceOptRpm");
                    }
                    if (printMask?.TransmissionDownshiftRpm ?? true)
                    {
                        sb.AppendItem(TransmissionDownshiftRpm, "TransmissionDownshiftRpm");
                    }
                    if (printMask?.TransmissionUpshiftRpm ?? true)
                    {
                        sb.AppendItem(TransmissionUpshiftRpm, "TransmissionUpshiftRpm");
                    }
                    if (printMask?.TransmissionClutchDelayTime ?? true)
                    {
                        sb.AppendItem(TransmissionClutchDelayTime, "TransmissionClutchDelayTime");
                    }
                    if (printMask?.TransmissionGearRatioReverse ?? true)
                    {
                        sb.AppendItem(TransmissionGearRatioReverse, "TransmissionGearRatioReverse");
                    }
                    if (printMask?.TransmissionGearRatioFirst ?? true)
                    {
                        sb.AppendItem(TransmissionGearRatioFirst, "TransmissionGearRatioFirst");
                    }
                    if (printMask?.TransmissionGearRatioSecond ?? true)
                    {
                        sb.AppendItem(TransmissionGearRatioSecond, "TransmissionGearRatioSecond");
                    }
                    if (printMask?.TransmissionGearRatioThird ?? true)
                    {
                        sb.AppendItem(TransmissionGearRatioThird, "TransmissionGearRatioThird");
                    }
                    if (printMask?.TransmissionGearRatioFourth ?? true)
                    {
                        sb.AppendItem(TransmissionGearRatioFourth, "TransmissionGearRatioFourth");
                    }
                    if (printMask?.TransmissionTorqueRatioFrontWheels ?? true)
                    {
                        sb.AppendItem(TransmissionTorqueRatioFrontWheels, "TransmissionTorqueRatioFrontWheels");
                    }
                    if (printMask?.TransmissionTorqueRatioBackWheels ?? true)
                    {
                        sb.AppendItem(TransmissionTorqueRatioBackWheels, "TransmissionTorqueRatioBackWheels");
                    }
                    if (printMask?.BrakesMaxTorque ?? true)
                    {
                        sb.AppendItem(BrakesMaxTorque, "BrakesMaxTorque");
                    }
                    if (printMask?.BrakesMinPedalInputToBlock ?? true)
                    {
                        sb.AppendItem(BrakesMinPedalInputToBlock, "BrakesMinPedalInputToBlock");
                    }
                    if (printMask?.BrakesWheelsMinTimeToBlock ?? true)
                    {
                        sb.AppendItem(BrakesWheelsMinTimeToBlock, "BrakesWheelsMinTimeToBlock");
                    }
                    if (printMask?.AerodynamicsAirDensity ?? true)
                    {
                        sb.AppendItem(AerodynamicsAirDensity, "AerodynamicsAirDensity");
                    }
                    if (printMask?.AerodynamicsFrontArea ?? true)
                    {
                        sb.AppendItem(AerodynamicsFrontArea, "AerodynamicsFrontArea");
                    }
                    if (printMask?.AerodynamicsDragCoefficient ?? true)
                    {
                        sb.AppendItem(AerodynamicsDragCoefficient, "AerodynamicsDragCoefficient");
                    }
                    if (printMask?.AerodynamicsLiftCoefficient ?? true)
                    {
                        sb.AppendItem(AerodynamicsLiftCoefficient, "AerodynamicsLiftCoefficient");
                    }
                    if (printMask?.AerodynamicsExtraGravityMultiplier ?? true)
                    {
                        sb.AppendItem(AerodynamicsExtraGravityMultiplier, "AerodynamicsExtraGravityMultiplier");
                    }
                    if (printMask?.VelocityDampingNormalSpin ?? true)
                    {
                        sb.AppendItem(VelocityDampingNormalSpin, "VelocityDampingNormalSpin");
                    }
                    if (printMask?.VelocityDampingCollisionSpin ?? true)
                    {
                        sb.AppendItem(VelocityDampingCollisionSpin, "VelocityDampingCollisionSpin");
                    }
                    if (printMask?.VelocityDampingCollisionThreshold ?? true)
                    {
                        sb.AppendItem(VelocityDampingCollisionThreshold, "VelocityDampingCollisionThreshold");
                    }
                    if (printMask?.HandlingReorientStrength ?? true)
                    {
                        sb.AppendItem(HandlingReorientStrength, "HandlingReorientStrength");
                    }
                    if (printMask?.HandlingReorientDamping ?? true)
                    {
                        sb.AppendItem(HandlingReorientDamping, "HandlingReorientDamping");
                    }
                    if (printMask?.HandlingVerticalBoostForce ?? true)
                    {
                        sb.AppendItem(HandlingVerticalBoostForce, "HandlingVerticalBoostForce");
                    }
                    if (printMask?.HandlingForwardBoostForce ?? true)
                    {
                        sb.AppendItem(HandlingForwardBoostForce, "HandlingForwardBoostForce");
                    }
                    if (printMask?.HandlingBoostMaxVelocity ?? true)
                    {
                        sb.AppendItem(HandlingBoostMaxVelocity, "HandlingBoostMaxVelocity");
                    }
                    if (printMask?.HandlingBoostDuration ?? true)
                    {
                        sb.AppendItem(HandlingBoostDuration, "HandlingBoostDuration");
                    }
                    if (printMask?.HandlingVerticalBoostDuration ?? true)
                    {
                        sb.AppendItem(HandlingVerticalBoostDuration, "HandlingVerticalBoostDuration");
                    }
                    if (printMask?.HandlingBoostRechargeDelay ?? true)
                    {
                        sb.AppendItem(HandlingBoostRechargeDelay, "HandlingBoostRechargeDelay");
                    }
                    if (printMask?.HandlingBoostRechargeDuration ?? true)
                    {
                        sb.AppendItem(HandlingBoostRechargeDuration, "HandlingBoostRechargeDuration");
                    }
                    if (printMask?.WaterStrengthFront ?? true)
                    {
                        sb.AppendItem(WaterStrengthFront, "WaterStrengthFront");
                    }
                    if (printMask?.WaterStrengthBack ?? true)
                    {
                        sb.AppendItem(WaterStrengthBack, "WaterStrengthBack");
                    }
                    if (printMask?.WaterDampFront ?? true)
                    {
                        sb.AppendItem(WaterDampFront, "WaterDampFront");
                    }
                    if (printMask?.WaterDampBack ?? true)
                    {
                        sb.AppendItem(WaterDampBack, "WaterDampBack");
                    }
                    if (printMask?.WaterDrive ?? true)
                    {
                        sb.AppendItem(WaterDrive, "WaterDrive");
                    }
                    if (printMask?.WaterRotationDamp ?? true)
                    {
                        sb.AppendItem(WaterRotationDamp, "WaterRotationDamp");
                    }
                    if (printMask?.BumperEnable ?? true)
                    {
                        sb.AppendItem(BumperEnable, "BumperEnable");
                    }
                    if (printMask?.BumperForward ?? true)
                    {
                        sb.AppendItem(BumperForward, "BumperForward");
                    }
                    if (printMask?.BumperUp ?? true)
                    {
                        sb.AppendItem(BumperUp, "BumperUp");
                    }
                    if (printMask?.BumperWidth ?? true)
                    {
                        sb.AppendItem(BumperWidth, "BumperWidth");
                    }
                    if (printMask?.BumperRadius ?? true)
                    {
                        sb.AppendItem(BumperRadius, "BumperRadius");
                    }
                    if (printMask?.CollisionDampingAngular ?? true)
                    {
                        sb.AppendItem(CollisionDampingAngular, "CollisionDampingAngular");
                    }
                    if (printMask?.CollisionMinSlopeCos ?? true)
                    {
                        sb.AppendItem(CollisionMinSlopeCos, "CollisionMinSlopeCos");
                    }
                    if (printMask?.ControlsSteeringPidThirdPersonPValue ?? true)
                    {
                        sb.AppendItem(ControlsSteeringPidThirdPersonPValue, "ControlsSteeringPidThirdPersonPValue");
                    }
                    if (printMask?.ControlsSteeringPidThirdPersonIValue ?? true)
                    {
                        sb.AppendItem(ControlsSteeringPidThirdPersonIValue, "ControlsSteeringPidThirdPersonIValue");
                    }
                    if (printMask?.ControlsSteeringPidThirdPersonDValue ?? true)
                    {
                        sb.AppendItem(ControlsSteeringPidThirdPersonDValue, "ControlsSteeringPidThirdPersonDValue");
                    }
                    if (printMask?.ControlsSteeringPidFirstPersonPValue ?? true)
                    {
                        sb.AppendItem(ControlsSteeringPidFirstPersonPValue, "ControlsSteeringPidFirstPersonPValue");
                    }
                    if (printMask?.ControlsSteeringPidFirstPersonIValue ?? true)
                    {
                        sb.AppendItem(ControlsSteeringPidFirstPersonIValue, "ControlsSteeringPidFirstPersonIValue");
                    }
                    if (printMask?.ControlsSteeringPidFirstPersonDValue ?? true)
                    {
                        sb.AppendItem(ControlsSteeringPidFirstPersonDValue, "ControlsSteeringPidFirstPersonDValue");
                    }
                    if (printMask?.Unknown1 ?? true)
                    {
                        sb.AppendItem(Unknown1, "Unknown1");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.Unknown3 ?? true)
                    {
                        sb.AppendItem(Unknown3, "Unknown3");
                    }
                    if (printMask?.Unknown4 ?? true)
                    {
                        sb.AppendItem(Unknown4, "Unknown4");
                    }
                    if (printMask?.Unknown5 ?? true)
                    {
                        sb.AppendItem(Unknown5, "Unknown5");
                    }
                    if (printMask?.Unknown6 ?? true)
                    {
                        sb.AppendItem(Unknown6, "Unknown6");
                    }
                    if (printMask?.CameraBaseZoomFirstPerson ?? true)
                    {
                        sb.AppendItem(CameraBaseZoomFirstPerson, "CameraBaseZoomFirstPerson");
                    }
                    if (printMask?.CameraBaseZoomThirdPersonNear ?? true)
                    {
                        sb.AppendItem(CameraBaseZoomThirdPersonNear, "CameraBaseZoomThirdPersonNear");
                    }
                    if (printMask?.CameraBaseZoomThirdPersonFar ?? true)
                    {
                        sb.AppendItem(CameraBaseZoomThirdPersonFar, "CameraBaseZoomThirdPersonFar");
                    }
                    if (printMask?.CameraBaseHeightFirstPerson ?? true)
                    {
                        sb.AppendItem(CameraBaseHeightFirstPerson, "CameraBaseHeightFirstPerson");
                    }
                    if (printMask?.CameraBaseHeightThirdPersonNear ?? true)
                    {
                        sb.AppendItem(CameraBaseHeightThirdPersonNear, "CameraBaseHeightThirdPersonNear");
                    }
                    if (printMask?.CameraBaseHeightThirdPersonFar ?? true)
                    {
                        sb.AppendItem(CameraBaseHeightThirdPersonFar, "CameraBaseHeightThirdPersonFar");
                    }
                    if (printMask?.CameraBaseFovFirstPerson ?? true)
                    {
                        sb.AppendItem(CameraBaseFovFirstPerson, "CameraBaseFovFirstPerson");
                    }
                    if (printMask?.CameraBaseFovThirdPersonNear ?? true)
                    {
                        sb.AppendItem(CameraBaseFovThirdPersonNear, "CameraBaseFovThirdPersonNear");
                    }
                    if (printMask?.CameraBaseFovThirdPersonFar ?? true)
                    {
                        sb.AppendItem(CameraBaseFovThirdPersonFar, "CameraBaseFovThirdPersonFar");
                    }
                    if (printMask?.CameraBoostFovOffsetNear ?? true)
                    {
                        sb.AppendItem(CameraBoostFovOffsetNear, "CameraBoostFovOffsetNear");
                    }
                    if (printMask?.CameraBoostFovOffsetFar ?? true)
                    {
                        sb.AppendItem(CameraBoostFovOffsetFar, "CameraBoostFovOffsetFar");
                    }
                    if (printMask?.CameraSpeedRatioZoomOffsetThirdPersonNear ?? true)
                    {
                        sb.AppendItem(CameraSpeedRatioZoomOffsetThirdPersonNear, "CameraSpeedRatioZoomOffsetThirdPersonNear");
                    }
                    if (printMask?.CameraSpeedRatioZoomOffsetThirdPersonFar ?? true)
                    {
                        sb.AppendItem(CameraSpeedRatioZoomOffsetThirdPersonFar, "CameraSpeedRatioZoomOffsetThirdPersonFar");
                    }
                    if (printMask?.CameraSpeedPidPValue ?? true)
                    {
                        sb.AppendItem(CameraSpeedPidPValue, "CameraSpeedPidPValue");
                    }
                    if (printMask?.CameraSpeedPidIValue ?? true)
                    {
                        sb.AppendItem(CameraSpeedPidIValue, "CameraSpeedPidIValue");
                    }
                    if (printMask?.CameraSpeedPidDValue ?? true)
                    {
                        sb.AppendItem(CameraSpeedPidDValue, "CameraSpeedPidDValue");
                    }
                    if (printMask?.CameraFovBlendFactorAiming ?? true)
                    {
                        sb.AppendItem(CameraFovBlendFactorAiming, "CameraFovBlendFactorAiming");
                    }
                    if (printMask?.CameraFovBlendFactorBoosting ?? true)
                    {
                        sb.AppendItem(CameraFovBlendFactorBoosting, "CameraFovBlendFactorBoosting");
                    }
                    if (printMask?.CameraPositionBlendFilteringFactor ?? true)
                    {
                        sb.AppendItem(CameraPositionBlendFilteringFactor, "CameraPositionBlendFilteringFactor");
                    }
                    if (printMask?.CameraPositionRLOffsetFirstPerson ?? true)
                    {
                        sb.AppendItem(CameraPositionRLOffsetFirstPerson, "CameraPositionRLOffsetFirstPerson");
                    }
                    if (printMask?.HandlingForwardBoostForceInWater ?? true)
                    {
                        sb.AppendItem(HandlingForwardBoostForceInWater, "HandlingForwardBoostForceInWater");
                    }
                    if (printMask?.WaterLinDamp ?? true)
                    {
                        sb.AppendItem(WaterLinDamp, "WaterLinDamp");
                    }
                    if (printMask?.WheelMaxFriction ?? true)
                    {
                        sb.AppendItem(WheelMaxFriction, "WheelMaxFriction");
                    }
                    if (printMask?.WaterBobAccelerationDeadZone ?? true)
                    {
                        sb.AppendItem(WaterBobAccelerationDeadZone, "WaterBobAccelerationDeadZone");
                    }
                    if (printMask?.WaterBobAccelerationPitch ?? true)
                    {
                        sb.AppendItem(WaterBobAccelerationPitch, "WaterBobAccelerationPitch");
                    }
                    if (printMask?.WaterBobAccelerationRoll ?? true)
                    {
                        sb.AppendItem(WaterBobAccelerationRoll, "WaterBobAccelerationRoll");
                    }
                    if (printMask?.WaterBobNaturalPitchPeriod ?? true)
                    {
                        sb.AppendItem(WaterBobNaturalPitchPeriod, "WaterBobNaturalPitchPeriod");
                    }
                    if (printMask?.WaterBobNaturalRollPeriod ?? true)
                    {
                        sb.AppendItem(WaterBobNaturalRollPeriod, "WaterBobNaturalRollPeriod");
                    }
                    if (printMask?.WaterBobNaturalAmplitude ?? true)
                    {
                        sb.AppendItem(WaterBobNaturalAmplitude, "WaterBobNaturalAmplitude");
                    }
                    if (printMask?.WaterBobTorquePitch ?? true)
                    {
                        sb.AppendItem(WaterBobTorquePitch, "WaterBobTorquePitch");
                    }
                    if (printMask?.WaterBobTorqueRoll ?? true)
                    {
                        sb.AppendItem(WaterBobTorqueRoll, "WaterBobTorqueRoll");
                    }
                    if (printMask?.ChassisLinearDamping ?? true)
                    {
                        sb.AppendItem(ChassisLinearDamping, "ChassisLinearDamping");
                    }
                    if (printMask?.SuspensionMaxVisualSpeedCompression ?? true)
                    {
                        sb.AppendItem(SuspensionMaxVisualSpeedCompression, "SuspensionMaxVisualSpeedCompression");
                    }
                    if (printMask?.SuspensionMaxVisualSpeedRelaxation ?? true)
                    {
                        sb.AppendItem(SuspensionMaxVisualSpeedRelaxation, "SuspensionMaxVisualSpeedRelaxation");
                    }
                    if (printMask?.SlideFactorGainGreaterThanThreshold ?? true)
                    {
                        sb.AppendItem(SlideFactorGainGreaterThanThreshold, "SlideFactorGainGreaterThanThreshold");
                    }
                    if (printMask?.SlideFactorLostLessThanOrEqualThreshold ?? true)
                    {
                        sb.AppendItem(SlideFactorLostLessThanOrEqualThreshold, "SlideFactorLostLessThanOrEqualThreshold");
                    }
                    if (printMask?.SlideFactorThreshold ?? true)
                    {
                        sb.AppendItem(SlideFactorThreshold, "SlideFactorThreshold");
                    }
                    if (printMask?.SlideFactorFrictionAtMax ?? true)
                    {
                        sb.AppendItem(SlideFactorFrictionAtMax, "SlideFactorFrictionAtMax");
                    }
                    if (printMask?.SlideFactorViscosityFrictionAtMax ?? true)
                    {
                        sb.AppendItem(SlideFactorViscosityFrictionAtMax, "SlideFactorViscosityFrictionAtMax");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? NodeNamesSuspensionFrontLeft;
            public Exception? NodeNamesSuspensionFrontRight;
            public Exception? NodeNamesSuspensionRearLeft;
            public Exception? NodeNamesSuspensionRearRight;
            public Exception? NodeNamesWheelFrontLeft;
            public Exception? NodeNamesWheelFrontRight;
            public Exception? NodeNamesWheelRearLeft;
            public Exception? NodeNamesWheelRearRight;
            public Exception? ChassisForwardAxis;
            public Exception? ChassisUpAxis;
            public Exception? ChassisVehicleMass;
            public Exception? ChassisFrictionEqualizer;
            public Exception? ChassisTorqueRoll;
            public Exception? ChassisTorquePitch;
            public Exception? ChassisTorqueYaw;
            public Exception? ChassisInertiaYaw;
            public Exception? ChassisInertiaRoll;
            public Exception? ChassisInertialPitch;
            public Exception? ChassisExtraTorque;
            public Exception? ChassisMaxVelocityPositionalFriction;
            public Exception? ChassisFriction;
            public Exception? ChassisRestitution;
            public Exception? ChassisComOffsetForward;
            public Exception? ChassisComOffsetUp;
            public Exception? WheelSlipAngle;
            public Exception? WheelFriction;
            public Exception? WheelScale;
            public Exception? WheelMass;
            public Exception? WheelViscosityFriction;
            public Exception? WheelCastType;
            public Exception? SuspensionStrength;
            public Exception? SuspensionDampingCompression;
            public Exception? SuspensionDampingRelaxation;
            public Exception? SuspensionLength;
            public Exception? SuspensionOffsetsUpFront;
            public Exception? SuspensionOffsetsUpBack;
            public Exception? SuspensionOffsetsFront;
            public Exception? SuspensionOffsetsBack;
            public Exception? SuspensionOffsetsLateral;
            public Exception? SteeringMaxAngle;
            public Exception? SteeringMaxAngleAtSpeed;
            public Exception? EngineMaxSpeed;
            public Exception? EngineMaxTorque;
            public Exception? EngineMinRpm;
            public Exception? EngineMaxRpm;
            public Exception? EngineOptRpm;
            public Exception? EngineTorqueMinRpm;
            public Exception? EngineTorqueMaxRpm;
            public Exception? EngineResistanceMinRpm;
            public Exception? EngineResistanceMaxRpm;
            public Exception? EngineResistanceOptRpm;
            public Exception? TransmissionDownshiftRpm;
            public Exception? TransmissionUpshiftRpm;
            public Exception? TransmissionClutchDelayTime;
            public Exception? TransmissionGearRatioReverse;
            public Exception? TransmissionGearRatioFirst;
            public Exception? TransmissionGearRatioSecond;
            public Exception? TransmissionGearRatioThird;
            public Exception? TransmissionGearRatioFourth;
            public Exception? TransmissionTorqueRatioFrontWheels;
            public Exception? TransmissionTorqueRatioBackWheels;
            public Exception? BrakesMaxTorque;
            public Exception? BrakesMinPedalInputToBlock;
            public Exception? BrakesWheelsMinTimeToBlock;
            public Exception? AerodynamicsAirDensity;
            public Exception? AerodynamicsFrontArea;
            public Exception? AerodynamicsDragCoefficient;
            public Exception? AerodynamicsLiftCoefficient;
            public Exception? AerodynamicsExtraGravityMultiplier;
            public Exception? VelocityDampingNormalSpin;
            public Exception? VelocityDampingCollisionSpin;
            public Exception? VelocityDampingCollisionThreshold;
            public Exception? HandlingReorientStrength;
            public Exception? HandlingReorientDamping;
            public Exception? HandlingVerticalBoostForce;
            public Exception? HandlingForwardBoostForce;
            public Exception? HandlingBoostMaxVelocity;
            public Exception? HandlingBoostDuration;
            public Exception? HandlingVerticalBoostDuration;
            public Exception? HandlingBoostRechargeDelay;
            public Exception? HandlingBoostRechargeDuration;
            public Exception? WaterStrengthFront;
            public Exception? WaterStrengthBack;
            public Exception? WaterDampFront;
            public Exception? WaterDampBack;
            public Exception? WaterDrive;
            public Exception? WaterRotationDamp;
            public Exception? BumperEnable;
            public Exception? BumperForward;
            public Exception? BumperUp;
            public Exception? BumperWidth;
            public Exception? BumperRadius;
            public Exception? CollisionDampingAngular;
            public Exception? CollisionMinSlopeCos;
            public Exception? ControlsSteeringPidThirdPersonPValue;
            public Exception? ControlsSteeringPidThirdPersonIValue;
            public Exception? ControlsSteeringPidThirdPersonDValue;
            public Exception? ControlsSteeringPidFirstPersonPValue;
            public Exception? ControlsSteeringPidFirstPersonIValue;
            public Exception? ControlsSteeringPidFirstPersonDValue;
            public Exception? Unknown1;
            public Exception? Unknown2;
            public Exception? Unknown3;
            public Exception? Unknown4;
            public Exception? Unknown5;
            public Exception? Unknown6;
            public Exception? CameraBaseZoomFirstPerson;
            public Exception? CameraBaseZoomThirdPersonNear;
            public Exception? CameraBaseZoomThirdPersonFar;
            public Exception? CameraBaseHeightFirstPerson;
            public Exception? CameraBaseHeightThirdPersonNear;
            public Exception? CameraBaseHeightThirdPersonFar;
            public Exception? CameraBaseFovFirstPerson;
            public Exception? CameraBaseFovThirdPersonNear;
            public Exception? CameraBaseFovThirdPersonFar;
            public Exception? CameraBoostFovOffsetNear;
            public Exception? CameraBoostFovOffsetFar;
            public Exception? CameraSpeedRatioZoomOffsetThirdPersonNear;
            public Exception? CameraSpeedRatioZoomOffsetThirdPersonFar;
            public Exception? CameraSpeedPidPValue;
            public Exception? CameraSpeedPidIValue;
            public Exception? CameraSpeedPidDValue;
            public Exception? CameraFovBlendFactorAiming;
            public Exception? CameraFovBlendFactorBoosting;
            public Exception? CameraPositionBlendFilteringFactor;
            public Exception? CameraPositionRLOffsetFirstPerson;
            public Exception? HandlingForwardBoostForceInWater;
            public Exception? WaterLinDamp;
            public Exception? WheelMaxFriction;
            public Exception? WaterBobAccelerationDeadZone;
            public Exception? WaterBobAccelerationPitch;
            public Exception? WaterBobAccelerationRoll;
            public Exception? WaterBobNaturalPitchPeriod;
            public Exception? WaterBobNaturalRollPeriod;
            public Exception? WaterBobNaturalAmplitude;
            public Exception? WaterBobTorquePitch;
            public Exception? WaterBobTorqueRoll;
            public Exception? ChassisLinearDamping;
            public Exception? SuspensionMaxVisualSpeedCompression;
            public Exception? SuspensionMaxVisualSpeedRelaxation;
            public Exception? SlideFactorGainGreaterThanThreshold;
            public Exception? SlideFactorLostLessThanOrEqualThreshold;
            public Exception? SlideFactorThreshold;
            public Exception? SlideFactorFrictionAtMax;
            public Exception? SlideFactorViscosityFrictionAtMax;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                VehicleConfigData_FieldIndex enu = (VehicleConfigData_FieldIndex)index;
                switch (enu)
                {
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionFrontLeft:
                        return NodeNamesSuspensionFrontLeft;
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionFrontRight:
                        return NodeNamesSuspensionFrontRight;
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionRearLeft:
                        return NodeNamesSuspensionRearLeft;
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionRearRight:
                        return NodeNamesSuspensionRearRight;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelFrontLeft:
                        return NodeNamesWheelFrontLeft;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelFrontRight:
                        return NodeNamesWheelFrontRight;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelRearLeft:
                        return NodeNamesWheelRearLeft;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelRearRight:
                        return NodeNamesWheelRearRight;
                    case VehicleConfigData_FieldIndex.ChassisForwardAxis:
                        return ChassisForwardAxis;
                    case VehicleConfigData_FieldIndex.ChassisUpAxis:
                        return ChassisUpAxis;
                    case VehicleConfigData_FieldIndex.ChassisVehicleMass:
                        return ChassisVehicleMass;
                    case VehicleConfigData_FieldIndex.ChassisFrictionEqualizer:
                        return ChassisFrictionEqualizer;
                    case VehicleConfigData_FieldIndex.ChassisTorqueRoll:
                        return ChassisTorqueRoll;
                    case VehicleConfigData_FieldIndex.ChassisTorquePitch:
                        return ChassisTorquePitch;
                    case VehicleConfigData_FieldIndex.ChassisTorqueYaw:
                        return ChassisTorqueYaw;
                    case VehicleConfigData_FieldIndex.ChassisInertiaYaw:
                        return ChassisInertiaYaw;
                    case VehicleConfigData_FieldIndex.ChassisInertiaRoll:
                        return ChassisInertiaRoll;
                    case VehicleConfigData_FieldIndex.ChassisInertialPitch:
                        return ChassisInertialPitch;
                    case VehicleConfigData_FieldIndex.ChassisExtraTorque:
                        return ChassisExtraTorque;
                    case VehicleConfigData_FieldIndex.ChassisMaxVelocityPositionalFriction:
                        return ChassisMaxVelocityPositionalFriction;
                    case VehicleConfigData_FieldIndex.ChassisFriction:
                        return ChassisFriction;
                    case VehicleConfigData_FieldIndex.ChassisRestitution:
                        return ChassisRestitution;
                    case VehicleConfigData_FieldIndex.ChassisComOffsetForward:
                        return ChassisComOffsetForward;
                    case VehicleConfigData_FieldIndex.ChassisComOffsetUp:
                        return ChassisComOffsetUp;
                    case VehicleConfigData_FieldIndex.WheelSlipAngle:
                        return WheelSlipAngle;
                    case VehicleConfigData_FieldIndex.WheelFriction:
                        return WheelFriction;
                    case VehicleConfigData_FieldIndex.WheelScale:
                        return WheelScale;
                    case VehicleConfigData_FieldIndex.WheelMass:
                        return WheelMass;
                    case VehicleConfigData_FieldIndex.WheelViscosityFriction:
                        return WheelViscosityFriction;
                    case VehicleConfigData_FieldIndex.WheelCastType:
                        return WheelCastType;
                    case VehicleConfigData_FieldIndex.SuspensionStrength:
                        return SuspensionStrength;
                    case VehicleConfigData_FieldIndex.SuspensionDampingCompression:
                        return SuspensionDampingCompression;
                    case VehicleConfigData_FieldIndex.SuspensionDampingRelaxation:
                        return SuspensionDampingRelaxation;
                    case VehicleConfigData_FieldIndex.SuspensionLength:
                        return SuspensionLength;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsUpFront:
                        return SuspensionOffsetsUpFront;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsUpBack:
                        return SuspensionOffsetsUpBack;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsFront:
                        return SuspensionOffsetsFront;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsBack:
                        return SuspensionOffsetsBack;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsLateral:
                        return SuspensionOffsetsLateral;
                    case VehicleConfigData_FieldIndex.SteeringMaxAngle:
                        return SteeringMaxAngle;
                    case VehicleConfigData_FieldIndex.SteeringMaxAngleAtSpeed:
                        return SteeringMaxAngleAtSpeed;
                    case VehicleConfigData_FieldIndex.EngineMaxSpeed:
                        return EngineMaxSpeed;
                    case VehicleConfigData_FieldIndex.EngineMaxTorque:
                        return EngineMaxTorque;
                    case VehicleConfigData_FieldIndex.EngineMinRpm:
                        return EngineMinRpm;
                    case VehicleConfigData_FieldIndex.EngineMaxRpm:
                        return EngineMaxRpm;
                    case VehicleConfigData_FieldIndex.EngineOptRpm:
                        return EngineOptRpm;
                    case VehicleConfigData_FieldIndex.EngineTorqueMinRpm:
                        return EngineTorqueMinRpm;
                    case VehicleConfigData_FieldIndex.EngineTorqueMaxRpm:
                        return EngineTorqueMaxRpm;
                    case VehicleConfigData_FieldIndex.EngineResistanceMinRpm:
                        return EngineResistanceMinRpm;
                    case VehicleConfigData_FieldIndex.EngineResistanceMaxRpm:
                        return EngineResistanceMaxRpm;
                    case VehicleConfigData_FieldIndex.EngineResistanceOptRpm:
                        return EngineResistanceOptRpm;
                    case VehicleConfigData_FieldIndex.TransmissionDownshiftRpm:
                        return TransmissionDownshiftRpm;
                    case VehicleConfigData_FieldIndex.TransmissionUpshiftRpm:
                        return TransmissionUpshiftRpm;
                    case VehicleConfigData_FieldIndex.TransmissionClutchDelayTime:
                        return TransmissionClutchDelayTime;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioReverse:
                        return TransmissionGearRatioReverse;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioFirst:
                        return TransmissionGearRatioFirst;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioSecond:
                        return TransmissionGearRatioSecond;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioThird:
                        return TransmissionGearRatioThird;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioFourth:
                        return TransmissionGearRatioFourth;
                    case VehicleConfigData_FieldIndex.TransmissionTorqueRatioFrontWheels:
                        return TransmissionTorqueRatioFrontWheels;
                    case VehicleConfigData_FieldIndex.TransmissionTorqueRatioBackWheels:
                        return TransmissionTorqueRatioBackWheels;
                    case VehicleConfigData_FieldIndex.BrakesMaxTorque:
                        return BrakesMaxTorque;
                    case VehicleConfigData_FieldIndex.BrakesMinPedalInputToBlock:
                        return BrakesMinPedalInputToBlock;
                    case VehicleConfigData_FieldIndex.BrakesWheelsMinTimeToBlock:
                        return BrakesWheelsMinTimeToBlock;
                    case VehicleConfigData_FieldIndex.AerodynamicsAirDensity:
                        return AerodynamicsAirDensity;
                    case VehicleConfigData_FieldIndex.AerodynamicsFrontArea:
                        return AerodynamicsFrontArea;
                    case VehicleConfigData_FieldIndex.AerodynamicsDragCoefficient:
                        return AerodynamicsDragCoefficient;
                    case VehicleConfigData_FieldIndex.AerodynamicsLiftCoefficient:
                        return AerodynamicsLiftCoefficient;
                    case VehicleConfigData_FieldIndex.AerodynamicsExtraGravityMultiplier:
                        return AerodynamicsExtraGravityMultiplier;
                    case VehicleConfigData_FieldIndex.VelocityDampingNormalSpin:
                        return VelocityDampingNormalSpin;
                    case VehicleConfigData_FieldIndex.VelocityDampingCollisionSpin:
                        return VelocityDampingCollisionSpin;
                    case VehicleConfigData_FieldIndex.VelocityDampingCollisionThreshold:
                        return VelocityDampingCollisionThreshold;
                    case VehicleConfigData_FieldIndex.HandlingReorientStrength:
                        return HandlingReorientStrength;
                    case VehicleConfigData_FieldIndex.HandlingReorientDamping:
                        return HandlingReorientDamping;
                    case VehicleConfigData_FieldIndex.HandlingVerticalBoostForce:
                        return HandlingVerticalBoostForce;
                    case VehicleConfigData_FieldIndex.HandlingForwardBoostForce:
                        return HandlingForwardBoostForce;
                    case VehicleConfigData_FieldIndex.HandlingBoostMaxVelocity:
                        return HandlingBoostMaxVelocity;
                    case VehicleConfigData_FieldIndex.HandlingBoostDuration:
                        return HandlingBoostDuration;
                    case VehicleConfigData_FieldIndex.HandlingVerticalBoostDuration:
                        return HandlingVerticalBoostDuration;
                    case VehicleConfigData_FieldIndex.HandlingBoostRechargeDelay:
                        return HandlingBoostRechargeDelay;
                    case VehicleConfigData_FieldIndex.HandlingBoostRechargeDuration:
                        return HandlingBoostRechargeDuration;
                    case VehicleConfigData_FieldIndex.WaterStrengthFront:
                        return WaterStrengthFront;
                    case VehicleConfigData_FieldIndex.WaterStrengthBack:
                        return WaterStrengthBack;
                    case VehicleConfigData_FieldIndex.WaterDampFront:
                        return WaterDampFront;
                    case VehicleConfigData_FieldIndex.WaterDampBack:
                        return WaterDampBack;
                    case VehicleConfigData_FieldIndex.WaterDrive:
                        return WaterDrive;
                    case VehicleConfigData_FieldIndex.WaterRotationDamp:
                        return WaterRotationDamp;
                    case VehicleConfigData_FieldIndex.BumperEnable:
                        return BumperEnable;
                    case VehicleConfigData_FieldIndex.BumperForward:
                        return BumperForward;
                    case VehicleConfigData_FieldIndex.BumperUp:
                        return BumperUp;
                    case VehicleConfigData_FieldIndex.BumperWidth:
                        return BumperWidth;
                    case VehicleConfigData_FieldIndex.BumperRadius:
                        return BumperRadius;
                    case VehicleConfigData_FieldIndex.CollisionDampingAngular:
                        return CollisionDampingAngular;
                    case VehicleConfigData_FieldIndex.CollisionMinSlopeCos:
                        return CollisionMinSlopeCos;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonPValue:
                        return ControlsSteeringPidThirdPersonPValue;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonIValue:
                        return ControlsSteeringPidThirdPersonIValue;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonDValue:
                        return ControlsSteeringPidThirdPersonDValue;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonPValue:
                        return ControlsSteeringPidFirstPersonPValue;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonIValue:
                        return ControlsSteeringPidFirstPersonIValue;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonDValue:
                        return ControlsSteeringPidFirstPersonDValue;
                    case VehicleConfigData_FieldIndex.Unknown1:
                        return Unknown1;
                    case VehicleConfigData_FieldIndex.Unknown2:
                        return Unknown2;
                    case VehicleConfigData_FieldIndex.Unknown3:
                        return Unknown3;
                    case VehicleConfigData_FieldIndex.Unknown4:
                        return Unknown4;
                    case VehicleConfigData_FieldIndex.Unknown5:
                        return Unknown5;
                    case VehicleConfigData_FieldIndex.Unknown6:
                        return Unknown6;
                    case VehicleConfigData_FieldIndex.CameraBaseZoomFirstPerson:
                        return CameraBaseZoomFirstPerson;
                    case VehicleConfigData_FieldIndex.CameraBaseZoomThirdPersonNear:
                        return CameraBaseZoomThirdPersonNear;
                    case VehicleConfigData_FieldIndex.CameraBaseZoomThirdPersonFar:
                        return CameraBaseZoomThirdPersonFar;
                    case VehicleConfigData_FieldIndex.CameraBaseHeightFirstPerson:
                        return CameraBaseHeightFirstPerson;
                    case VehicleConfigData_FieldIndex.CameraBaseHeightThirdPersonNear:
                        return CameraBaseHeightThirdPersonNear;
                    case VehicleConfigData_FieldIndex.CameraBaseHeightThirdPersonFar:
                        return CameraBaseHeightThirdPersonFar;
                    case VehicleConfigData_FieldIndex.CameraBaseFovFirstPerson:
                        return CameraBaseFovFirstPerson;
                    case VehicleConfigData_FieldIndex.CameraBaseFovThirdPersonNear:
                        return CameraBaseFovThirdPersonNear;
                    case VehicleConfigData_FieldIndex.CameraBaseFovThirdPersonFar:
                        return CameraBaseFovThirdPersonFar;
                    case VehicleConfigData_FieldIndex.CameraBoostFovOffsetNear:
                        return CameraBoostFovOffsetNear;
                    case VehicleConfigData_FieldIndex.CameraBoostFovOffsetFar:
                        return CameraBoostFovOffsetFar;
                    case VehicleConfigData_FieldIndex.CameraSpeedRatioZoomOffsetThirdPersonNear:
                        return CameraSpeedRatioZoomOffsetThirdPersonNear;
                    case VehicleConfigData_FieldIndex.CameraSpeedRatioZoomOffsetThirdPersonFar:
                        return CameraSpeedRatioZoomOffsetThirdPersonFar;
                    case VehicleConfigData_FieldIndex.CameraSpeedPidPValue:
                        return CameraSpeedPidPValue;
                    case VehicleConfigData_FieldIndex.CameraSpeedPidIValue:
                        return CameraSpeedPidIValue;
                    case VehicleConfigData_FieldIndex.CameraSpeedPidDValue:
                        return CameraSpeedPidDValue;
                    case VehicleConfigData_FieldIndex.CameraFovBlendFactorAiming:
                        return CameraFovBlendFactorAiming;
                    case VehicleConfigData_FieldIndex.CameraFovBlendFactorBoosting:
                        return CameraFovBlendFactorBoosting;
                    case VehicleConfigData_FieldIndex.CameraPositionBlendFilteringFactor:
                        return CameraPositionBlendFilteringFactor;
                    case VehicleConfigData_FieldIndex.CameraPositionRLOffsetFirstPerson:
                        return CameraPositionRLOffsetFirstPerson;
                    case VehicleConfigData_FieldIndex.HandlingForwardBoostForceInWater:
                        return HandlingForwardBoostForceInWater;
                    case VehicleConfigData_FieldIndex.WaterLinDamp:
                        return WaterLinDamp;
                    case VehicleConfigData_FieldIndex.WheelMaxFriction:
                        return WheelMaxFriction;
                    case VehicleConfigData_FieldIndex.WaterBobAccelerationDeadZone:
                        return WaterBobAccelerationDeadZone;
                    case VehicleConfigData_FieldIndex.WaterBobAccelerationPitch:
                        return WaterBobAccelerationPitch;
                    case VehicleConfigData_FieldIndex.WaterBobAccelerationRoll:
                        return WaterBobAccelerationRoll;
                    case VehicleConfigData_FieldIndex.WaterBobNaturalPitchPeriod:
                        return WaterBobNaturalPitchPeriod;
                    case VehicleConfigData_FieldIndex.WaterBobNaturalRollPeriod:
                        return WaterBobNaturalRollPeriod;
                    case VehicleConfigData_FieldIndex.WaterBobNaturalAmplitude:
                        return WaterBobNaturalAmplitude;
                    case VehicleConfigData_FieldIndex.WaterBobTorquePitch:
                        return WaterBobTorquePitch;
                    case VehicleConfigData_FieldIndex.WaterBobTorqueRoll:
                        return WaterBobTorqueRoll;
                    case VehicleConfigData_FieldIndex.ChassisLinearDamping:
                        return ChassisLinearDamping;
                    case VehicleConfigData_FieldIndex.SuspensionMaxVisualSpeedCompression:
                        return SuspensionMaxVisualSpeedCompression;
                    case VehicleConfigData_FieldIndex.SuspensionMaxVisualSpeedRelaxation:
                        return SuspensionMaxVisualSpeedRelaxation;
                    case VehicleConfigData_FieldIndex.SlideFactorGainGreaterThanThreshold:
                        return SlideFactorGainGreaterThanThreshold;
                    case VehicleConfigData_FieldIndex.SlideFactorLostLessThanOrEqualThreshold:
                        return SlideFactorLostLessThanOrEqualThreshold;
                    case VehicleConfigData_FieldIndex.SlideFactorThreshold:
                        return SlideFactorThreshold;
                    case VehicleConfigData_FieldIndex.SlideFactorFrictionAtMax:
                        return SlideFactorFrictionAtMax;
                    case VehicleConfigData_FieldIndex.SlideFactorViscosityFrictionAtMax:
                        return SlideFactorViscosityFrictionAtMax;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                VehicleConfigData_FieldIndex enu = (VehicleConfigData_FieldIndex)index;
                switch (enu)
                {
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionFrontLeft:
                        this.NodeNamesSuspensionFrontLeft = ex;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionFrontRight:
                        this.NodeNamesSuspensionFrontRight = ex;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionRearLeft:
                        this.NodeNamesSuspensionRearLeft = ex;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionRearRight:
                        this.NodeNamesSuspensionRearRight = ex;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelFrontLeft:
                        this.NodeNamesWheelFrontLeft = ex;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelFrontRight:
                        this.NodeNamesWheelFrontRight = ex;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelRearLeft:
                        this.NodeNamesWheelRearLeft = ex;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelRearRight:
                        this.NodeNamesWheelRearRight = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisForwardAxis:
                        this.ChassisForwardAxis = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisUpAxis:
                        this.ChassisUpAxis = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisVehicleMass:
                        this.ChassisVehicleMass = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisFrictionEqualizer:
                        this.ChassisFrictionEqualizer = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisTorqueRoll:
                        this.ChassisTorqueRoll = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisTorquePitch:
                        this.ChassisTorquePitch = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisTorqueYaw:
                        this.ChassisTorqueYaw = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisInertiaYaw:
                        this.ChassisInertiaYaw = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisInertiaRoll:
                        this.ChassisInertiaRoll = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisInertialPitch:
                        this.ChassisInertialPitch = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisExtraTorque:
                        this.ChassisExtraTorque = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisMaxVelocityPositionalFriction:
                        this.ChassisMaxVelocityPositionalFriction = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisFriction:
                        this.ChassisFriction = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisRestitution:
                        this.ChassisRestitution = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisComOffsetForward:
                        this.ChassisComOffsetForward = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisComOffsetUp:
                        this.ChassisComOffsetUp = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WheelSlipAngle:
                        this.WheelSlipAngle = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WheelFriction:
                        this.WheelFriction = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WheelScale:
                        this.WheelScale = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WheelMass:
                        this.WheelMass = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WheelViscosityFriction:
                        this.WheelViscosityFriction = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WheelCastType:
                        this.WheelCastType = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionStrength:
                        this.SuspensionStrength = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionDampingCompression:
                        this.SuspensionDampingCompression = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionDampingRelaxation:
                        this.SuspensionDampingRelaxation = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionLength:
                        this.SuspensionLength = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsUpFront:
                        this.SuspensionOffsetsUpFront = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsUpBack:
                        this.SuspensionOffsetsUpBack = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsFront:
                        this.SuspensionOffsetsFront = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsBack:
                        this.SuspensionOffsetsBack = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsLateral:
                        this.SuspensionOffsetsLateral = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SteeringMaxAngle:
                        this.SteeringMaxAngle = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SteeringMaxAngleAtSpeed:
                        this.SteeringMaxAngleAtSpeed = ex;
                        break;
                    case VehicleConfigData_FieldIndex.EngineMaxSpeed:
                        this.EngineMaxSpeed = ex;
                        break;
                    case VehicleConfigData_FieldIndex.EngineMaxTorque:
                        this.EngineMaxTorque = ex;
                        break;
                    case VehicleConfigData_FieldIndex.EngineMinRpm:
                        this.EngineMinRpm = ex;
                        break;
                    case VehicleConfigData_FieldIndex.EngineMaxRpm:
                        this.EngineMaxRpm = ex;
                        break;
                    case VehicleConfigData_FieldIndex.EngineOptRpm:
                        this.EngineOptRpm = ex;
                        break;
                    case VehicleConfigData_FieldIndex.EngineTorqueMinRpm:
                        this.EngineTorqueMinRpm = ex;
                        break;
                    case VehicleConfigData_FieldIndex.EngineTorqueMaxRpm:
                        this.EngineTorqueMaxRpm = ex;
                        break;
                    case VehicleConfigData_FieldIndex.EngineResistanceMinRpm:
                        this.EngineResistanceMinRpm = ex;
                        break;
                    case VehicleConfigData_FieldIndex.EngineResistanceMaxRpm:
                        this.EngineResistanceMaxRpm = ex;
                        break;
                    case VehicleConfigData_FieldIndex.EngineResistanceOptRpm:
                        this.EngineResistanceOptRpm = ex;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionDownshiftRpm:
                        this.TransmissionDownshiftRpm = ex;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionUpshiftRpm:
                        this.TransmissionUpshiftRpm = ex;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionClutchDelayTime:
                        this.TransmissionClutchDelayTime = ex;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioReverse:
                        this.TransmissionGearRatioReverse = ex;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioFirst:
                        this.TransmissionGearRatioFirst = ex;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioSecond:
                        this.TransmissionGearRatioSecond = ex;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioThird:
                        this.TransmissionGearRatioThird = ex;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioFourth:
                        this.TransmissionGearRatioFourth = ex;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionTorqueRatioFrontWheels:
                        this.TransmissionTorqueRatioFrontWheels = ex;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionTorqueRatioBackWheels:
                        this.TransmissionTorqueRatioBackWheels = ex;
                        break;
                    case VehicleConfigData_FieldIndex.BrakesMaxTorque:
                        this.BrakesMaxTorque = ex;
                        break;
                    case VehicleConfigData_FieldIndex.BrakesMinPedalInputToBlock:
                        this.BrakesMinPedalInputToBlock = ex;
                        break;
                    case VehicleConfigData_FieldIndex.BrakesWheelsMinTimeToBlock:
                        this.BrakesWheelsMinTimeToBlock = ex;
                        break;
                    case VehicleConfigData_FieldIndex.AerodynamicsAirDensity:
                        this.AerodynamicsAirDensity = ex;
                        break;
                    case VehicleConfigData_FieldIndex.AerodynamicsFrontArea:
                        this.AerodynamicsFrontArea = ex;
                        break;
                    case VehicleConfigData_FieldIndex.AerodynamicsDragCoefficient:
                        this.AerodynamicsDragCoefficient = ex;
                        break;
                    case VehicleConfigData_FieldIndex.AerodynamicsLiftCoefficient:
                        this.AerodynamicsLiftCoefficient = ex;
                        break;
                    case VehicleConfigData_FieldIndex.AerodynamicsExtraGravityMultiplier:
                        this.AerodynamicsExtraGravityMultiplier = ex;
                        break;
                    case VehicleConfigData_FieldIndex.VelocityDampingNormalSpin:
                        this.VelocityDampingNormalSpin = ex;
                        break;
                    case VehicleConfigData_FieldIndex.VelocityDampingCollisionSpin:
                        this.VelocityDampingCollisionSpin = ex;
                        break;
                    case VehicleConfigData_FieldIndex.VelocityDampingCollisionThreshold:
                        this.VelocityDampingCollisionThreshold = ex;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingReorientStrength:
                        this.HandlingReorientStrength = ex;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingReorientDamping:
                        this.HandlingReorientDamping = ex;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingVerticalBoostForce:
                        this.HandlingVerticalBoostForce = ex;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingForwardBoostForce:
                        this.HandlingForwardBoostForce = ex;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingBoostMaxVelocity:
                        this.HandlingBoostMaxVelocity = ex;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingBoostDuration:
                        this.HandlingBoostDuration = ex;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingVerticalBoostDuration:
                        this.HandlingVerticalBoostDuration = ex;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingBoostRechargeDelay:
                        this.HandlingBoostRechargeDelay = ex;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingBoostRechargeDuration:
                        this.HandlingBoostRechargeDuration = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterStrengthFront:
                        this.WaterStrengthFront = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterStrengthBack:
                        this.WaterStrengthBack = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterDampFront:
                        this.WaterDampFront = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterDampBack:
                        this.WaterDampBack = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterDrive:
                        this.WaterDrive = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterRotationDamp:
                        this.WaterRotationDamp = ex;
                        break;
                    case VehicleConfigData_FieldIndex.BumperEnable:
                        this.BumperEnable = ex;
                        break;
                    case VehicleConfigData_FieldIndex.BumperForward:
                        this.BumperForward = ex;
                        break;
                    case VehicleConfigData_FieldIndex.BumperUp:
                        this.BumperUp = ex;
                        break;
                    case VehicleConfigData_FieldIndex.BumperWidth:
                        this.BumperWidth = ex;
                        break;
                    case VehicleConfigData_FieldIndex.BumperRadius:
                        this.BumperRadius = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CollisionDampingAngular:
                        this.CollisionDampingAngular = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CollisionMinSlopeCos:
                        this.CollisionMinSlopeCos = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonPValue:
                        this.ControlsSteeringPidThirdPersonPValue = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonIValue:
                        this.ControlsSteeringPidThirdPersonIValue = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonDValue:
                        this.ControlsSteeringPidThirdPersonDValue = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonPValue:
                        this.ControlsSteeringPidFirstPersonPValue = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonIValue:
                        this.ControlsSteeringPidFirstPersonIValue = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonDValue:
                        this.ControlsSteeringPidFirstPersonDValue = ex;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown1:
                        this.Unknown1 = ex;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown3:
                        this.Unknown3 = ex;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown4:
                        this.Unknown4 = ex;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown5:
                        this.Unknown5 = ex;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown6:
                        this.Unknown6 = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseZoomFirstPerson:
                        this.CameraBaseZoomFirstPerson = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseZoomThirdPersonNear:
                        this.CameraBaseZoomThirdPersonNear = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseZoomThirdPersonFar:
                        this.CameraBaseZoomThirdPersonFar = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseHeightFirstPerson:
                        this.CameraBaseHeightFirstPerson = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseHeightThirdPersonNear:
                        this.CameraBaseHeightThirdPersonNear = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseHeightThirdPersonFar:
                        this.CameraBaseHeightThirdPersonFar = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseFovFirstPerson:
                        this.CameraBaseFovFirstPerson = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseFovThirdPersonNear:
                        this.CameraBaseFovThirdPersonNear = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseFovThirdPersonFar:
                        this.CameraBaseFovThirdPersonFar = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBoostFovOffsetNear:
                        this.CameraBoostFovOffsetNear = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBoostFovOffsetFar:
                        this.CameraBoostFovOffsetFar = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraSpeedRatioZoomOffsetThirdPersonNear:
                        this.CameraSpeedRatioZoomOffsetThirdPersonNear = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraSpeedRatioZoomOffsetThirdPersonFar:
                        this.CameraSpeedRatioZoomOffsetThirdPersonFar = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraSpeedPidPValue:
                        this.CameraSpeedPidPValue = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraSpeedPidIValue:
                        this.CameraSpeedPidIValue = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraSpeedPidDValue:
                        this.CameraSpeedPidDValue = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraFovBlendFactorAiming:
                        this.CameraFovBlendFactorAiming = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraFovBlendFactorBoosting:
                        this.CameraFovBlendFactorBoosting = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraPositionBlendFilteringFactor:
                        this.CameraPositionBlendFilteringFactor = ex;
                        break;
                    case VehicleConfigData_FieldIndex.CameraPositionRLOffsetFirstPerson:
                        this.CameraPositionRLOffsetFirstPerson = ex;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingForwardBoostForceInWater:
                        this.HandlingForwardBoostForceInWater = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterLinDamp:
                        this.WaterLinDamp = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WheelMaxFriction:
                        this.WheelMaxFriction = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobAccelerationDeadZone:
                        this.WaterBobAccelerationDeadZone = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobAccelerationPitch:
                        this.WaterBobAccelerationPitch = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobAccelerationRoll:
                        this.WaterBobAccelerationRoll = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobNaturalPitchPeriod:
                        this.WaterBobNaturalPitchPeriod = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobNaturalRollPeriod:
                        this.WaterBobNaturalRollPeriod = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobNaturalAmplitude:
                        this.WaterBobNaturalAmplitude = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobTorquePitch:
                        this.WaterBobTorquePitch = ex;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobTorqueRoll:
                        this.WaterBobTorqueRoll = ex;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisLinearDamping:
                        this.ChassisLinearDamping = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionMaxVisualSpeedCompression:
                        this.SuspensionMaxVisualSpeedCompression = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionMaxVisualSpeedRelaxation:
                        this.SuspensionMaxVisualSpeedRelaxation = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SlideFactorGainGreaterThanThreshold:
                        this.SlideFactorGainGreaterThanThreshold = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SlideFactorLostLessThanOrEqualThreshold:
                        this.SlideFactorLostLessThanOrEqualThreshold = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SlideFactorThreshold:
                        this.SlideFactorThreshold = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SlideFactorFrictionAtMax:
                        this.SlideFactorFrictionAtMax = ex;
                        break;
                    case VehicleConfigData_FieldIndex.SlideFactorViscosityFrictionAtMax:
                        this.SlideFactorViscosityFrictionAtMax = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                VehicleConfigData_FieldIndex enu = (VehicleConfigData_FieldIndex)index;
                switch (enu)
                {
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionFrontLeft:
                        this.NodeNamesSuspensionFrontLeft = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionFrontRight:
                        this.NodeNamesSuspensionFrontRight = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionRearLeft:
                        this.NodeNamesSuspensionRearLeft = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesSuspensionRearRight:
                        this.NodeNamesSuspensionRearRight = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelFrontLeft:
                        this.NodeNamesWheelFrontLeft = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelFrontRight:
                        this.NodeNamesWheelFrontRight = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelRearLeft:
                        this.NodeNamesWheelRearLeft = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.NodeNamesWheelRearRight:
                        this.NodeNamesWheelRearRight = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisForwardAxis:
                        this.ChassisForwardAxis = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisUpAxis:
                        this.ChassisUpAxis = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisVehicleMass:
                        this.ChassisVehicleMass = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisFrictionEqualizer:
                        this.ChassisFrictionEqualizer = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisTorqueRoll:
                        this.ChassisTorqueRoll = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisTorquePitch:
                        this.ChassisTorquePitch = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisTorqueYaw:
                        this.ChassisTorqueYaw = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisInertiaYaw:
                        this.ChassisInertiaYaw = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisInertiaRoll:
                        this.ChassisInertiaRoll = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisInertialPitch:
                        this.ChassisInertialPitch = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisExtraTorque:
                        this.ChassisExtraTorque = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisMaxVelocityPositionalFriction:
                        this.ChassisMaxVelocityPositionalFriction = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisFriction:
                        this.ChassisFriction = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisRestitution:
                        this.ChassisRestitution = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisComOffsetForward:
                        this.ChassisComOffsetForward = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisComOffsetUp:
                        this.ChassisComOffsetUp = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WheelSlipAngle:
                        this.WheelSlipAngle = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WheelFriction:
                        this.WheelFriction = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WheelScale:
                        this.WheelScale = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WheelMass:
                        this.WheelMass = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WheelViscosityFriction:
                        this.WheelViscosityFriction = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WheelCastType:
                        this.WheelCastType = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionStrength:
                        this.SuspensionStrength = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionDampingCompression:
                        this.SuspensionDampingCompression = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionDampingRelaxation:
                        this.SuspensionDampingRelaxation = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionLength:
                        this.SuspensionLength = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsUpFront:
                        this.SuspensionOffsetsUpFront = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsUpBack:
                        this.SuspensionOffsetsUpBack = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsFront:
                        this.SuspensionOffsetsFront = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsBack:
                        this.SuspensionOffsetsBack = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionOffsetsLateral:
                        this.SuspensionOffsetsLateral = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SteeringMaxAngle:
                        this.SteeringMaxAngle = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SteeringMaxAngleAtSpeed:
                        this.SteeringMaxAngleAtSpeed = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.EngineMaxSpeed:
                        this.EngineMaxSpeed = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.EngineMaxTorque:
                        this.EngineMaxTorque = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.EngineMinRpm:
                        this.EngineMinRpm = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.EngineMaxRpm:
                        this.EngineMaxRpm = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.EngineOptRpm:
                        this.EngineOptRpm = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.EngineTorqueMinRpm:
                        this.EngineTorqueMinRpm = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.EngineTorqueMaxRpm:
                        this.EngineTorqueMaxRpm = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.EngineResistanceMinRpm:
                        this.EngineResistanceMinRpm = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.EngineResistanceMaxRpm:
                        this.EngineResistanceMaxRpm = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.EngineResistanceOptRpm:
                        this.EngineResistanceOptRpm = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionDownshiftRpm:
                        this.TransmissionDownshiftRpm = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionUpshiftRpm:
                        this.TransmissionUpshiftRpm = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionClutchDelayTime:
                        this.TransmissionClutchDelayTime = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioReverse:
                        this.TransmissionGearRatioReverse = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioFirst:
                        this.TransmissionGearRatioFirst = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioSecond:
                        this.TransmissionGearRatioSecond = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioThird:
                        this.TransmissionGearRatioThird = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionGearRatioFourth:
                        this.TransmissionGearRatioFourth = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionTorqueRatioFrontWheels:
                        this.TransmissionTorqueRatioFrontWheels = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.TransmissionTorqueRatioBackWheels:
                        this.TransmissionTorqueRatioBackWheels = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.BrakesMaxTorque:
                        this.BrakesMaxTorque = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.BrakesMinPedalInputToBlock:
                        this.BrakesMinPedalInputToBlock = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.BrakesWheelsMinTimeToBlock:
                        this.BrakesWheelsMinTimeToBlock = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.AerodynamicsAirDensity:
                        this.AerodynamicsAirDensity = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.AerodynamicsFrontArea:
                        this.AerodynamicsFrontArea = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.AerodynamicsDragCoefficient:
                        this.AerodynamicsDragCoefficient = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.AerodynamicsLiftCoefficient:
                        this.AerodynamicsLiftCoefficient = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.AerodynamicsExtraGravityMultiplier:
                        this.AerodynamicsExtraGravityMultiplier = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.VelocityDampingNormalSpin:
                        this.VelocityDampingNormalSpin = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.VelocityDampingCollisionSpin:
                        this.VelocityDampingCollisionSpin = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.VelocityDampingCollisionThreshold:
                        this.VelocityDampingCollisionThreshold = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingReorientStrength:
                        this.HandlingReorientStrength = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingReorientDamping:
                        this.HandlingReorientDamping = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingVerticalBoostForce:
                        this.HandlingVerticalBoostForce = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingForwardBoostForce:
                        this.HandlingForwardBoostForce = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingBoostMaxVelocity:
                        this.HandlingBoostMaxVelocity = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingBoostDuration:
                        this.HandlingBoostDuration = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingVerticalBoostDuration:
                        this.HandlingVerticalBoostDuration = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingBoostRechargeDelay:
                        this.HandlingBoostRechargeDelay = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingBoostRechargeDuration:
                        this.HandlingBoostRechargeDuration = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterStrengthFront:
                        this.WaterStrengthFront = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterStrengthBack:
                        this.WaterStrengthBack = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterDampFront:
                        this.WaterDampFront = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterDampBack:
                        this.WaterDampBack = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterDrive:
                        this.WaterDrive = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterRotationDamp:
                        this.WaterRotationDamp = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.BumperEnable:
                        this.BumperEnable = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.BumperForward:
                        this.BumperForward = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.BumperUp:
                        this.BumperUp = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.BumperWidth:
                        this.BumperWidth = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.BumperRadius:
                        this.BumperRadius = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CollisionDampingAngular:
                        this.CollisionDampingAngular = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CollisionMinSlopeCos:
                        this.CollisionMinSlopeCos = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonPValue:
                        this.ControlsSteeringPidThirdPersonPValue = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonIValue:
                        this.ControlsSteeringPidThirdPersonIValue = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonDValue:
                        this.ControlsSteeringPidThirdPersonDValue = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonPValue:
                        this.ControlsSteeringPidFirstPersonPValue = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonIValue:
                        this.ControlsSteeringPidFirstPersonIValue = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonDValue:
                        this.ControlsSteeringPidFirstPersonDValue = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown1:
                        this.Unknown1 = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown3:
                        this.Unknown3 = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown4:
                        this.Unknown4 = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown5:
                        this.Unknown5 = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.Unknown6:
                        this.Unknown6 = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseZoomFirstPerson:
                        this.CameraBaseZoomFirstPerson = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseZoomThirdPersonNear:
                        this.CameraBaseZoomThirdPersonNear = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseZoomThirdPersonFar:
                        this.CameraBaseZoomThirdPersonFar = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseHeightFirstPerson:
                        this.CameraBaseHeightFirstPerson = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseHeightThirdPersonNear:
                        this.CameraBaseHeightThirdPersonNear = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseHeightThirdPersonFar:
                        this.CameraBaseHeightThirdPersonFar = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseFovFirstPerson:
                        this.CameraBaseFovFirstPerson = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseFovThirdPersonNear:
                        this.CameraBaseFovThirdPersonNear = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBaseFovThirdPersonFar:
                        this.CameraBaseFovThirdPersonFar = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBoostFovOffsetNear:
                        this.CameraBoostFovOffsetNear = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraBoostFovOffsetFar:
                        this.CameraBoostFovOffsetFar = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraSpeedRatioZoomOffsetThirdPersonNear:
                        this.CameraSpeedRatioZoomOffsetThirdPersonNear = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraSpeedRatioZoomOffsetThirdPersonFar:
                        this.CameraSpeedRatioZoomOffsetThirdPersonFar = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraSpeedPidPValue:
                        this.CameraSpeedPidPValue = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraSpeedPidIValue:
                        this.CameraSpeedPidIValue = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraSpeedPidDValue:
                        this.CameraSpeedPidDValue = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraFovBlendFactorAiming:
                        this.CameraFovBlendFactorAiming = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraFovBlendFactorBoosting:
                        this.CameraFovBlendFactorBoosting = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraPositionBlendFilteringFactor:
                        this.CameraPositionBlendFilteringFactor = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.CameraPositionRLOffsetFirstPerson:
                        this.CameraPositionRLOffsetFirstPerson = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.HandlingForwardBoostForceInWater:
                        this.HandlingForwardBoostForceInWater = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterLinDamp:
                        this.WaterLinDamp = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WheelMaxFriction:
                        this.WheelMaxFriction = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobAccelerationDeadZone:
                        this.WaterBobAccelerationDeadZone = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobAccelerationPitch:
                        this.WaterBobAccelerationPitch = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobAccelerationRoll:
                        this.WaterBobAccelerationRoll = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobNaturalPitchPeriod:
                        this.WaterBobNaturalPitchPeriod = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobNaturalRollPeriod:
                        this.WaterBobNaturalRollPeriod = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobNaturalAmplitude:
                        this.WaterBobNaturalAmplitude = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobTorquePitch:
                        this.WaterBobTorquePitch = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.WaterBobTorqueRoll:
                        this.WaterBobTorqueRoll = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.ChassisLinearDamping:
                        this.ChassisLinearDamping = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionMaxVisualSpeedCompression:
                        this.SuspensionMaxVisualSpeedCompression = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SuspensionMaxVisualSpeedRelaxation:
                        this.SuspensionMaxVisualSpeedRelaxation = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SlideFactorGainGreaterThanThreshold:
                        this.SlideFactorGainGreaterThanThreshold = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SlideFactorLostLessThanOrEqualThreshold:
                        this.SlideFactorLostLessThanOrEqualThreshold = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SlideFactorThreshold:
                        this.SlideFactorThreshold = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SlideFactorFrictionAtMax:
                        this.SlideFactorFrictionAtMax = (Exception?)obj;
                        break;
                    case VehicleConfigData_FieldIndex.SlideFactorViscosityFrictionAtMax:
                        this.SlideFactorViscosityFrictionAtMax = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (NodeNamesSuspensionFrontLeft != null) return true;
                if (NodeNamesSuspensionFrontRight != null) return true;
                if (NodeNamesSuspensionRearLeft != null) return true;
                if (NodeNamesSuspensionRearRight != null) return true;
                if (NodeNamesWheelFrontLeft != null) return true;
                if (NodeNamesWheelFrontRight != null) return true;
                if (NodeNamesWheelRearLeft != null) return true;
                if (NodeNamesWheelRearRight != null) return true;
                if (ChassisForwardAxis != null) return true;
                if (ChassisUpAxis != null) return true;
                if (ChassisVehicleMass != null) return true;
                if (ChassisFrictionEqualizer != null) return true;
                if (ChassisTorqueRoll != null) return true;
                if (ChassisTorquePitch != null) return true;
                if (ChassisTorqueYaw != null) return true;
                if (ChassisInertiaYaw != null) return true;
                if (ChassisInertiaRoll != null) return true;
                if (ChassisInertialPitch != null) return true;
                if (ChassisExtraTorque != null) return true;
                if (ChassisMaxVelocityPositionalFriction != null) return true;
                if (ChassisFriction != null) return true;
                if (ChassisRestitution != null) return true;
                if (ChassisComOffsetForward != null) return true;
                if (ChassisComOffsetUp != null) return true;
                if (WheelSlipAngle != null) return true;
                if (WheelFriction != null) return true;
                if (WheelScale != null) return true;
                if (WheelMass != null) return true;
                if (WheelViscosityFriction != null) return true;
                if (WheelCastType != null) return true;
                if (SuspensionStrength != null) return true;
                if (SuspensionDampingCompression != null) return true;
                if (SuspensionDampingRelaxation != null) return true;
                if (SuspensionLength != null) return true;
                if (SuspensionOffsetsUpFront != null) return true;
                if (SuspensionOffsetsUpBack != null) return true;
                if (SuspensionOffsetsFront != null) return true;
                if (SuspensionOffsetsBack != null) return true;
                if (SuspensionOffsetsLateral != null) return true;
                if (SteeringMaxAngle != null) return true;
                if (SteeringMaxAngleAtSpeed != null) return true;
                if (EngineMaxSpeed != null) return true;
                if (EngineMaxTorque != null) return true;
                if (EngineMinRpm != null) return true;
                if (EngineMaxRpm != null) return true;
                if (EngineOptRpm != null) return true;
                if (EngineTorqueMinRpm != null) return true;
                if (EngineTorqueMaxRpm != null) return true;
                if (EngineResistanceMinRpm != null) return true;
                if (EngineResistanceMaxRpm != null) return true;
                if (EngineResistanceOptRpm != null) return true;
                if (TransmissionDownshiftRpm != null) return true;
                if (TransmissionUpshiftRpm != null) return true;
                if (TransmissionClutchDelayTime != null) return true;
                if (TransmissionGearRatioReverse != null) return true;
                if (TransmissionGearRatioFirst != null) return true;
                if (TransmissionGearRatioSecond != null) return true;
                if (TransmissionGearRatioThird != null) return true;
                if (TransmissionGearRatioFourth != null) return true;
                if (TransmissionTorqueRatioFrontWheels != null) return true;
                if (TransmissionTorqueRatioBackWheels != null) return true;
                if (BrakesMaxTorque != null) return true;
                if (BrakesMinPedalInputToBlock != null) return true;
                if (BrakesWheelsMinTimeToBlock != null) return true;
                if (AerodynamicsAirDensity != null) return true;
                if (AerodynamicsFrontArea != null) return true;
                if (AerodynamicsDragCoefficient != null) return true;
                if (AerodynamicsLiftCoefficient != null) return true;
                if (AerodynamicsExtraGravityMultiplier != null) return true;
                if (VelocityDampingNormalSpin != null) return true;
                if (VelocityDampingCollisionSpin != null) return true;
                if (VelocityDampingCollisionThreshold != null) return true;
                if (HandlingReorientStrength != null) return true;
                if (HandlingReorientDamping != null) return true;
                if (HandlingVerticalBoostForce != null) return true;
                if (HandlingForwardBoostForce != null) return true;
                if (HandlingBoostMaxVelocity != null) return true;
                if (HandlingBoostDuration != null) return true;
                if (HandlingVerticalBoostDuration != null) return true;
                if (HandlingBoostRechargeDelay != null) return true;
                if (HandlingBoostRechargeDuration != null) return true;
                if (WaterStrengthFront != null) return true;
                if (WaterStrengthBack != null) return true;
                if (WaterDampFront != null) return true;
                if (WaterDampBack != null) return true;
                if (WaterDrive != null) return true;
                if (WaterRotationDamp != null) return true;
                if (BumperEnable != null) return true;
                if (BumperForward != null) return true;
                if (BumperUp != null) return true;
                if (BumperWidth != null) return true;
                if (BumperRadius != null) return true;
                if (CollisionDampingAngular != null) return true;
                if (CollisionMinSlopeCos != null) return true;
                if (ControlsSteeringPidThirdPersonPValue != null) return true;
                if (ControlsSteeringPidThirdPersonIValue != null) return true;
                if (ControlsSteeringPidThirdPersonDValue != null) return true;
                if (ControlsSteeringPidFirstPersonPValue != null) return true;
                if (ControlsSteeringPidFirstPersonIValue != null) return true;
                if (ControlsSteeringPidFirstPersonDValue != null) return true;
                if (Unknown1 != null) return true;
                if (Unknown2 != null) return true;
                if (Unknown3 != null) return true;
                if (Unknown4 != null) return true;
                if (Unknown5 != null) return true;
                if (Unknown6 != null) return true;
                if (CameraBaseZoomFirstPerson != null) return true;
                if (CameraBaseZoomThirdPersonNear != null) return true;
                if (CameraBaseZoomThirdPersonFar != null) return true;
                if (CameraBaseHeightFirstPerson != null) return true;
                if (CameraBaseHeightThirdPersonNear != null) return true;
                if (CameraBaseHeightThirdPersonFar != null) return true;
                if (CameraBaseFovFirstPerson != null) return true;
                if (CameraBaseFovThirdPersonNear != null) return true;
                if (CameraBaseFovThirdPersonFar != null) return true;
                if (CameraBoostFovOffsetNear != null) return true;
                if (CameraBoostFovOffsetFar != null) return true;
                if (CameraSpeedRatioZoomOffsetThirdPersonNear != null) return true;
                if (CameraSpeedRatioZoomOffsetThirdPersonFar != null) return true;
                if (CameraSpeedPidPValue != null) return true;
                if (CameraSpeedPidIValue != null) return true;
                if (CameraSpeedPidDValue != null) return true;
                if (CameraFovBlendFactorAiming != null) return true;
                if (CameraFovBlendFactorBoosting != null) return true;
                if (CameraPositionBlendFilteringFactor != null) return true;
                if (CameraPositionRLOffsetFirstPerson != null) return true;
                if (HandlingForwardBoostForceInWater != null) return true;
                if (WaterLinDamp != null) return true;
                if (WheelMaxFriction != null) return true;
                if (WaterBobAccelerationDeadZone != null) return true;
                if (WaterBobAccelerationPitch != null) return true;
                if (WaterBobAccelerationRoll != null) return true;
                if (WaterBobNaturalPitchPeriod != null) return true;
                if (WaterBobNaturalRollPeriod != null) return true;
                if (WaterBobNaturalAmplitude != null) return true;
                if (WaterBobTorquePitch != null) return true;
                if (WaterBobTorqueRoll != null) return true;
                if (ChassisLinearDamping != null) return true;
                if (SuspensionMaxVisualSpeedCompression != null) return true;
                if (SuspensionMaxVisualSpeedRelaxation != null) return true;
                if (SlideFactorGainGreaterThanThreshold != null) return true;
                if (SlideFactorLostLessThanOrEqualThreshold != null) return true;
                if (SlideFactorThreshold != null) return true;
                if (SlideFactorFrictionAtMax != null) return true;
                if (SlideFactorViscosityFrictionAtMax != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(NodeNamesSuspensionFrontLeft, "NodeNamesSuspensionFrontLeft");
                }
                {
                    sb.AppendItem(NodeNamesSuspensionFrontRight, "NodeNamesSuspensionFrontRight");
                }
                {
                    sb.AppendItem(NodeNamesSuspensionRearLeft, "NodeNamesSuspensionRearLeft");
                }
                {
                    sb.AppendItem(NodeNamesSuspensionRearRight, "NodeNamesSuspensionRearRight");
                }
                {
                    sb.AppendItem(NodeNamesWheelFrontLeft, "NodeNamesWheelFrontLeft");
                }
                {
                    sb.AppendItem(NodeNamesWheelFrontRight, "NodeNamesWheelFrontRight");
                }
                {
                    sb.AppendItem(NodeNamesWheelRearLeft, "NodeNamesWheelRearLeft");
                }
                {
                    sb.AppendItem(NodeNamesWheelRearRight, "NodeNamesWheelRearRight");
                }
                {
                    sb.AppendItem(ChassisForwardAxis, "ChassisForwardAxis");
                }
                {
                    sb.AppendItem(ChassisUpAxis, "ChassisUpAxis");
                }
                {
                    sb.AppendItem(ChassisVehicleMass, "ChassisVehicleMass");
                }
                {
                    sb.AppendItem(ChassisFrictionEqualizer, "ChassisFrictionEqualizer");
                }
                {
                    sb.AppendItem(ChassisTorqueRoll, "ChassisTorqueRoll");
                }
                {
                    sb.AppendItem(ChassisTorquePitch, "ChassisTorquePitch");
                }
                {
                    sb.AppendItem(ChassisTorqueYaw, "ChassisTorqueYaw");
                }
                {
                    sb.AppendItem(ChassisInertiaYaw, "ChassisInertiaYaw");
                }
                {
                    sb.AppendItem(ChassisInertiaRoll, "ChassisInertiaRoll");
                }
                {
                    sb.AppendItem(ChassisInertialPitch, "ChassisInertialPitch");
                }
                {
                    sb.AppendItem(ChassisExtraTorque, "ChassisExtraTorque");
                }
                {
                    sb.AppendItem(ChassisMaxVelocityPositionalFriction, "ChassisMaxVelocityPositionalFriction");
                }
                {
                    sb.AppendItem(ChassisFriction, "ChassisFriction");
                }
                {
                    sb.AppendItem(ChassisRestitution, "ChassisRestitution");
                }
                {
                    sb.AppendItem(ChassisComOffsetForward, "ChassisComOffsetForward");
                }
                {
                    sb.AppendItem(ChassisComOffsetUp, "ChassisComOffsetUp");
                }
                {
                    sb.AppendItem(WheelSlipAngle, "WheelSlipAngle");
                }
                {
                    sb.AppendItem(WheelFriction, "WheelFriction");
                }
                {
                    sb.AppendItem(WheelScale, "WheelScale");
                }
                {
                    sb.AppendItem(WheelMass, "WheelMass");
                }
                {
                    sb.AppendItem(WheelViscosityFriction, "WheelViscosityFriction");
                }
                {
                    sb.AppendItem(WheelCastType, "WheelCastType");
                }
                {
                    sb.AppendItem(SuspensionStrength, "SuspensionStrength");
                }
                {
                    sb.AppendItem(SuspensionDampingCompression, "SuspensionDampingCompression");
                }
                {
                    sb.AppendItem(SuspensionDampingRelaxation, "SuspensionDampingRelaxation");
                }
                {
                    sb.AppendItem(SuspensionLength, "SuspensionLength");
                }
                {
                    sb.AppendItem(SuspensionOffsetsUpFront, "SuspensionOffsetsUpFront");
                }
                {
                    sb.AppendItem(SuspensionOffsetsUpBack, "SuspensionOffsetsUpBack");
                }
                {
                    sb.AppendItem(SuspensionOffsetsFront, "SuspensionOffsetsFront");
                }
                {
                    sb.AppendItem(SuspensionOffsetsBack, "SuspensionOffsetsBack");
                }
                {
                    sb.AppendItem(SuspensionOffsetsLateral, "SuspensionOffsetsLateral");
                }
                {
                    sb.AppendItem(SteeringMaxAngle, "SteeringMaxAngle");
                }
                {
                    sb.AppendItem(SteeringMaxAngleAtSpeed, "SteeringMaxAngleAtSpeed");
                }
                {
                    sb.AppendItem(EngineMaxSpeed, "EngineMaxSpeed");
                }
                {
                    sb.AppendItem(EngineMaxTorque, "EngineMaxTorque");
                }
                {
                    sb.AppendItem(EngineMinRpm, "EngineMinRpm");
                }
                {
                    sb.AppendItem(EngineMaxRpm, "EngineMaxRpm");
                }
                {
                    sb.AppendItem(EngineOptRpm, "EngineOptRpm");
                }
                {
                    sb.AppendItem(EngineTorqueMinRpm, "EngineTorqueMinRpm");
                }
                {
                    sb.AppendItem(EngineTorqueMaxRpm, "EngineTorqueMaxRpm");
                }
                {
                    sb.AppendItem(EngineResistanceMinRpm, "EngineResistanceMinRpm");
                }
                {
                    sb.AppendItem(EngineResistanceMaxRpm, "EngineResistanceMaxRpm");
                }
                {
                    sb.AppendItem(EngineResistanceOptRpm, "EngineResistanceOptRpm");
                }
                {
                    sb.AppendItem(TransmissionDownshiftRpm, "TransmissionDownshiftRpm");
                }
                {
                    sb.AppendItem(TransmissionUpshiftRpm, "TransmissionUpshiftRpm");
                }
                {
                    sb.AppendItem(TransmissionClutchDelayTime, "TransmissionClutchDelayTime");
                }
                {
                    sb.AppendItem(TransmissionGearRatioReverse, "TransmissionGearRatioReverse");
                }
                {
                    sb.AppendItem(TransmissionGearRatioFirst, "TransmissionGearRatioFirst");
                }
                {
                    sb.AppendItem(TransmissionGearRatioSecond, "TransmissionGearRatioSecond");
                }
                {
                    sb.AppendItem(TransmissionGearRatioThird, "TransmissionGearRatioThird");
                }
                {
                    sb.AppendItem(TransmissionGearRatioFourth, "TransmissionGearRatioFourth");
                }
                {
                    sb.AppendItem(TransmissionTorqueRatioFrontWheels, "TransmissionTorqueRatioFrontWheels");
                }
                {
                    sb.AppendItem(TransmissionTorqueRatioBackWheels, "TransmissionTorqueRatioBackWheels");
                }
                {
                    sb.AppendItem(BrakesMaxTorque, "BrakesMaxTorque");
                }
                {
                    sb.AppendItem(BrakesMinPedalInputToBlock, "BrakesMinPedalInputToBlock");
                }
                {
                    sb.AppendItem(BrakesWheelsMinTimeToBlock, "BrakesWheelsMinTimeToBlock");
                }
                {
                    sb.AppendItem(AerodynamicsAirDensity, "AerodynamicsAirDensity");
                }
                {
                    sb.AppendItem(AerodynamicsFrontArea, "AerodynamicsFrontArea");
                }
                {
                    sb.AppendItem(AerodynamicsDragCoefficient, "AerodynamicsDragCoefficient");
                }
                {
                    sb.AppendItem(AerodynamicsLiftCoefficient, "AerodynamicsLiftCoefficient");
                }
                {
                    sb.AppendItem(AerodynamicsExtraGravityMultiplier, "AerodynamicsExtraGravityMultiplier");
                }
                {
                    sb.AppendItem(VelocityDampingNormalSpin, "VelocityDampingNormalSpin");
                }
                {
                    sb.AppendItem(VelocityDampingCollisionSpin, "VelocityDampingCollisionSpin");
                }
                {
                    sb.AppendItem(VelocityDampingCollisionThreshold, "VelocityDampingCollisionThreshold");
                }
                {
                    sb.AppendItem(HandlingReorientStrength, "HandlingReorientStrength");
                }
                {
                    sb.AppendItem(HandlingReorientDamping, "HandlingReorientDamping");
                }
                {
                    sb.AppendItem(HandlingVerticalBoostForce, "HandlingVerticalBoostForce");
                }
                {
                    sb.AppendItem(HandlingForwardBoostForce, "HandlingForwardBoostForce");
                }
                {
                    sb.AppendItem(HandlingBoostMaxVelocity, "HandlingBoostMaxVelocity");
                }
                {
                    sb.AppendItem(HandlingBoostDuration, "HandlingBoostDuration");
                }
                {
                    sb.AppendItem(HandlingVerticalBoostDuration, "HandlingVerticalBoostDuration");
                }
                {
                    sb.AppendItem(HandlingBoostRechargeDelay, "HandlingBoostRechargeDelay");
                }
                {
                    sb.AppendItem(HandlingBoostRechargeDuration, "HandlingBoostRechargeDuration");
                }
                {
                    sb.AppendItem(WaterStrengthFront, "WaterStrengthFront");
                }
                {
                    sb.AppendItem(WaterStrengthBack, "WaterStrengthBack");
                }
                {
                    sb.AppendItem(WaterDampFront, "WaterDampFront");
                }
                {
                    sb.AppendItem(WaterDampBack, "WaterDampBack");
                }
                {
                    sb.AppendItem(WaterDrive, "WaterDrive");
                }
                {
                    sb.AppendItem(WaterRotationDamp, "WaterRotationDamp");
                }
                {
                    sb.AppendItem(BumperEnable, "BumperEnable");
                }
                {
                    sb.AppendItem(BumperForward, "BumperForward");
                }
                {
                    sb.AppendItem(BumperUp, "BumperUp");
                }
                {
                    sb.AppendItem(BumperWidth, "BumperWidth");
                }
                {
                    sb.AppendItem(BumperRadius, "BumperRadius");
                }
                {
                    sb.AppendItem(CollisionDampingAngular, "CollisionDampingAngular");
                }
                {
                    sb.AppendItem(CollisionMinSlopeCos, "CollisionMinSlopeCos");
                }
                {
                    sb.AppendItem(ControlsSteeringPidThirdPersonPValue, "ControlsSteeringPidThirdPersonPValue");
                }
                {
                    sb.AppendItem(ControlsSteeringPidThirdPersonIValue, "ControlsSteeringPidThirdPersonIValue");
                }
                {
                    sb.AppendItem(ControlsSteeringPidThirdPersonDValue, "ControlsSteeringPidThirdPersonDValue");
                }
                {
                    sb.AppendItem(ControlsSteeringPidFirstPersonPValue, "ControlsSteeringPidFirstPersonPValue");
                }
                {
                    sb.AppendItem(ControlsSteeringPidFirstPersonIValue, "ControlsSteeringPidFirstPersonIValue");
                }
                {
                    sb.AppendItem(ControlsSteeringPidFirstPersonDValue, "ControlsSteeringPidFirstPersonDValue");
                }
                {
                    sb.AppendItem(Unknown1, "Unknown1");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                {
                    sb.AppendItem(Unknown3, "Unknown3");
                }
                {
                    sb.AppendItem(Unknown4, "Unknown4");
                }
                {
                    sb.AppendItem(Unknown5, "Unknown5");
                }
                {
                    sb.AppendItem(Unknown6, "Unknown6");
                }
                {
                    sb.AppendItem(CameraBaseZoomFirstPerson, "CameraBaseZoomFirstPerson");
                }
                {
                    sb.AppendItem(CameraBaseZoomThirdPersonNear, "CameraBaseZoomThirdPersonNear");
                }
                {
                    sb.AppendItem(CameraBaseZoomThirdPersonFar, "CameraBaseZoomThirdPersonFar");
                }
                {
                    sb.AppendItem(CameraBaseHeightFirstPerson, "CameraBaseHeightFirstPerson");
                }
                {
                    sb.AppendItem(CameraBaseHeightThirdPersonNear, "CameraBaseHeightThirdPersonNear");
                }
                {
                    sb.AppendItem(CameraBaseHeightThirdPersonFar, "CameraBaseHeightThirdPersonFar");
                }
                {
                    sb.AppendItem(CameraBaseFovFirstPerson, "CameraBaseFovFirstPerson");
                }
                {
                    sb.AppendItem(CameraBaseFovThirdPersonNear, "CameraBaseFovThirdPersonNear");
                }
                {
                    sb.AppendItem(CameraBaseFovThirdPersonFar, "CameraBaseFovThirdPersonFar");
                }
                {
                    sb.AppendItem(CameraBoostFovOffsetNear, "CameraBoostFovOffsetNear");
                }
                {
                    sb.AppendItem(CameraBoostFovOffsetFar, "CameraBoostFovOffsetFar");
                }
                {
                    sb.AppendItem(CameraSpeedRatioZoomOffsetThirdPersonNear, "CameraSpeedRatioZoomOffsetThirdPersonNear");
                }
                {
                    sb.AppendItem(CameraSpeedRatioZoomOffsetThirdPersonFar, "CameraSpeedRatioZoomOffsetThirdPersonFar");
                }
                {
                    sb.AppendItem(CameraSpeedPidPValue, "CameraSpeedPidPValue");
                }
                {
                    sb.AppendItem(CameraSpeedPidIValue, "CameraSpeedPidIValue");
                }
                {
                    sb.AppendItem(CameraSpeedPidDValue, "CameraSpeedPidDValue");
                }
                {
                    sb.AppendItem(CameraFovBlendFactorAiming, "CameraFovBlendFactorAiming");
                }
                {
                    sb.AppendItem(CameraFovBlendFactorBoosting, "CameraFovBlendFactorBoosting");
                }
                {
                    sb.AppendItem(CameraPositionBlendFilteringFactor, "CameraPositionBlendFilteringFactor");
                }
                {
                    sb.AppendItem(CameraPositionRLOffsetFirstPerson, "CameraPositionRLOffsetFirstPerson");
                }
                {
                    sb.AppendItem(HandlingForwardBoostForceInWater, "HandlingForwardBoostForceInWater");
                }
                {
                    sb.AppendItem(WaterLinDamp, "WaterLinDamp");
                }
                {
                    sb.AppendItem(WheelMaxFriction, "WheelMaxFriction");
                }
                {
                    sb.AppendItem(WaterBobAccelerationDeadZone, "WaterBobAccelerationDeadZone");
                }
                {
                    sb.AppendItem(WaterBobAccelerationPitch, "WaterBobAccelerationPitch");
                }
                {
                    sb.AppendItem(WaterBobAccelerationRoll, "WaterBobAccelerationRoll");
                }
                {
                    sb.AppendItem(WaterBobNaturalPitchPeriod, "WaterBobNaturalPitchPeriod");
                }
                {
                    sb.AppendItem(WaterBobNaturalRollPeriod, "WaterBobNaturalRollPeriod");
                }
                {
                    sb.AppendItem(WaterBobNaturalAmplitude, "WaterBobNaturalAmplitude");
                }
                {
                    sb.AppendItem(WaterBobTorquePitch, "WaterBobTorquePitch");
                }
                {
                    sb.AppendItem(WaterBobTorqueRoll, "WaterBobTorqueRoll");
                }
                {
                    sb.AppendItem(ChassisLinearDamping, "ChassisLinearDamping");
                }
                {
                    sb.AppendItem(SuspensionMaxVisualSpeedCompression, "SuspensionMaxVisualSpeedCompression");
                }
                {
                    sb.AppendItem(SuspensionMaxVisualSpeedRelaxation, "SuspensionMaxVisualSpeedRelaxation");
                }
                {
                    sb.AppendItem(SlideFactorGainGreaterThanThreshold, "SlideFactorGainGreaterThanThreshold");
                }
                {
                    sb.AppendItem(SlideFactorLostLessThanOrEqualThreshold, "SlideFactorLostLessThanOrEqualThreshold");
                }
                {
                    sb.AppendItem(SlideFactorThreshold, "SlideFactorThreshold");
                }
                {
                    sb.AppendItem(SlideFactorFrictionAtMax, "SlideFactorFrictionAtMax");
                }
                {
                    sb.AppendItem(SlideFactorViscosityFrictionAtMax, "SlideFactorViscosityFrictionAtMax");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.NodeNamesSuspensionFrontLeft = this.NodeNamesSuspensionFrontLeft.Combine(rhs.NodeNamesSuspensionFrontLeft);
                ret.NodeNamesSuspensionFrontRight = this.NodeNamesSuspensionFrontRight.Combine(rhs.NodeNamesSuspensionFrontRight);
                ret.NodeNamesSuspensionRearLeft = this.NodeNamesSuspensionRearLeft.Combine(rhs.NodeNamesSuspensionRearLeft);
                ret.NodeNamesSuspensionRearRight = this.NodeNamesSuspensionRearRight.Combine(rhs.NodeNamesSuspensionRearRight);
                ret.NodeNamesWheelFrontLeft = this.NodeNamesWheelFrontLeft.Combine(rhs.NodeNamesWheelFrontLeft);
                ret.NodeNamesWheelFrontRight = this.NodeNamesWheelFrontRight.Combine(rhs.NodeNamesWheelFrontRight);
                ret.NodeNamesWheelRearLeft = this.NodeNamesWheelRearLeft.Combine(rhs.NodeNamesWheelRearLeft);
                ret.NodeNamesWheelRearRight = this.NodeNamesWheelRearRight.Combine(rhs.NodeNamesWheelRearRight);
                ret.ChassisForwardAxis = this.ChassisForwardAxis.Combine(rhs.ChassisForwardAxis);
                ret.ChassisUpAxis = this.ChassisUpAxis.Combine(rhs.ChassisUpAxis);
                ret.ChassisVehicleMass = this.ChassisVehicleMass.Combine(rhs.ChassisVehicleMass);
                ret.ChassisFrictionEqualizer = this.ChassisFrictionEqualizer.Combine(rhs.ChassisFrictionEqualizer);
                ret.ChassisTorqueRoll = this.ChassisTorqueRoll.Combine(rhs.ChassisTorqueRoll);
                ret.ChassisTorquePitch = this.ChassisTorquePitch.Combine(rhs.ChassisTorquePitch);
                ret.ChassisTorqueYaw = this.ChassisTorqueYaw.Combine(rhs.ChassisTorqueYaw);
                ret.ChassisInertiaYaw = this.ChassisInertiaYaw.Combine(rhs.ChassisInertiaYaw);
                ret.ChassisInertiaRoll = this.ChassisInertiaRoll.Combine(rhs.ChassisInertiaRoll);
                ret.ChassisInertialPitch = this.ChassisInertialPitch.Combine(rhs.ChassisInertialPitch);
                ret.ChassisExtraTorque = this.ChassisExtraTorque.Combine(rhs.ChassisExtraTorque);
                ret.ChassisMaxVelocityPositionalFriction = this.ChassisMaxVelocityPositionalFriction.Combine(rhs.ChassisMaxVelocityPositionalFriction);
                ret.ChassisFriction = this.ChassisFriction.Combine(rhs.ChassisFriction);
                ret.ChassisRestitution = this.ChassisRestitution.Combine(rhs.ChassisRestitution);
                ret.ChassisComOffsetForward = this.ChassisComOffsetForward.Combine(rhs.ChassisComOffsetForward);
                ret.ChassisComOffsetUp = this.ChassisComOffsetUp.Combine(rhs.ChassisComOffsetUp);
                ret.WheelSlipAngle = this.WheelSlipAngle.Combine(rhs.WheelSlipAngle);
                ret.WheelFriction = this.WheelFriction.Combine(rhs.WheelFriction);
                ret.WheelScale = this.WheelScale.Combine(rhs.WheelScale);
                ret.WheelMass = this.WheelMass.Combine(rhs.WheelMass);
                ret.WheelViscosityFriction = this.WheelViscosityFriction.Combine(rhs.WheelViscosityFriction);
                ret.WheelCastType = this.WheelCastType.Combine(rhs.WheelCastType);
                ret.SuspensionStrength = this.SuspensionStrength.Combine(rhs.SuspensionStrength);
                ret.SuspensionDampingCompression = this.SuspensionDampingCompression.Combine(rhs.SuspensionDampingCompression);
                ret.SuspensionDampingRelaxation = this.SuspensionDampingRelaxation.Combine(rhs.SuspensionDampingRelaxation);
                ret.SuspensionLength = this.SuspensionLength.Combine(rhs.SuspensionLength);
                ret.SuspensionOffsetsUpFront = this.SuspensionOffsetsUpFront.Combine(rhs.SuspensionOffsetsUpFront);
                ret.SuspensionOffsetsUpBack = this.SuspensionOffsetsUpBack.Combine(rhs.SuspensionOffsetsUpBack);
                ret.SuspensionOffsetsFront = this.SuspensionOffsetsFront.Combine(rhs.SuspensionOffsetsFront);
                ret.SuspensionOffsetsBack = this.SuspensionOffsetsBack.Combine(rhs.SuspensionOffsetsBack);
                ret.SuspensionOffsetsLateral = this.SuspensionOffsetsLateral.Combine(rhs.SuspensionOffsetsLateral);
                ret.SteeringMaxAngle = this.SteeringMaxAngle.Combine(rhs.SteeringMaxAngle);
                ret.SteeringMaxAngleAtSpeed = this.SteeringMaxAngleAtSpeed.Combine(rhs.SteeringMaxAngleAtSpeed);
                ret.EngineMaxSpeed = this.EngineMaxSpeed.Combine(rhs.EngineMaxSpeed);
                ret.EngineMaxTorque = this.EngineMaxTorque.Combine(rhs.EngineMaxTorque);
                ret.EngineMinRpm = this.EngineMinRpm.Combine(rhs.EngineMinRpm);
                ret.EngineMaxRpm = this.EngineMaxRpm.Combine(rhs.EngineMaxRpm);
                ret.EngineOptRpm = this.EngineOptRpm.Combine(rhs.EngineOptRpm);
                ret.EngineTorqueMinRpm = this.EngineTorqueMinRpm.Combine(rhs.EngineTorqueMinRpm);
                ret.EngineTorqueMaxRpm = this.EngineTorqueMaxRpm.Combine(rhs.EngineTorqueMaxRpm);
                ret.EngineResistanceMinRpm = this.EngineResistanceMinRpm.Combine(rhs.EngineResistanceMinRpm);
                ret.EngineResistanceMaxRpm = this.EngineResistanceMaxRpm.Combine(rhs.EngineResistanceMaxRpm);
                ret.EngineResistanceOptRpm = this.EngineResistanceOptRpm.Combine(rhs.EngineResistanceOptRpm);
                ret.TransmissionDownshiftRpm = this.TransmissionDownshiftRpm.Combine(rhs.TransmissionDownshiftRpm);
                ret.TransmissionUpshiftRpm = this.TransmissionUpshiftRpm.Combine(rhs.TransmissionUpshiftRpm);
                ret.TransmissionClutchDelayTime = this.TransmissionClutchDelayTime.Combine(rhs.TransmissionClutchDelayTime);
                ret.TransmissionGearRatioReverse = this.TransmissionGearRatioReverse.Combine(rhs.TransmissionGearRatioReverse);
                ret.TransmissionGearRatioFirst = this.TransmissionGearRatioFirst.Combine(rhs.TransmissionGearRatioFirst);
                ret.TransmissionGearRatioSecond = this.TransmissionGearRatioSecond.Combine(rhs.TransmissionGearRatioSecond);
                ret.TransmissionGearRatioThird = this.TransmissionGearRatioThird.Combine(rhs.TransmissionGearRatioThird);
                ret.TransmissionGearRatioFourth = this.TransmissionGearRatioFourth.Combine(rhs.TransmissionGearRatioFourth);
                ret.TransmissionTorqueRatioFrontWheels = this.TransmissionTorqueRatioFrontWheels.Combine(rhs.TransmissionTorqueRatioFrontWheels);
                ret.TransmissionTorqueRatioBackWheels = this.TransmissionTorqueRatioBackWheels.Combine(rhs.TransmissionTorqueRatioBackWheels);
                ret.BrakesMaxTorque = this.BrakesMaxTorque.Combine(rhs.BrakesMaxTorque);
                ret.BrakesMinPedalInputToBlock = this.BrakesMinPedalInputToBlock.Combine(rhs.BrakesMinPedalInputToBlock);
                ret.BrakesWheelsMinTimeToBlock = this.BrakesWheelsMinTimeToBlock.Combine(rhs.BrakesWheelsMinTimeToBlock);
                ret.AerodynamicsAirDensity = this.AerodynamicsAirDensity.Combine(rhs.AerodynamicsAirDensity);
                ret.AerodynamicsFrontArea = this.AerodynamicsFrontArea.Combine(rhs.AerodynamicsFrontArea);
                ret.AerodynamicsDragCoefficient = this.AerodynamicsDragCoefficient.Combine(rhs.AerodynamicsDragCoefficient);
                ret.AerodynamicsLiftCoefficient = this.AerodynamicsLiftCoefficient.Combine(rhs.AerodynamicsLiftCoefficient);
                ret.AerodynamicsExtraGravityMultiplier = this.AerodynamicsExtraGravityMultiplier.Combine(rhs.AerodynamicsExtraGravityMultiplier);
                ret.VelocityDampingNormalSpin = this.VelocityDampingNormalSpin.Combine(rhs.VelocityDampingNormalSpin);
                ret.VelocityDampingCollisionSpin = this.VelocityDampingCollisionSpin.Combine(rhs.VelocityDampingCollisionSpin);
                ret.VelocityDampingCollisionThreshold = this.VelocityDampingCollisionThreshold.Combine(rhs.VelocityDampingCollisionThreshold);
                ret.HandlingReorientStrength = this.HandlingReorientStrength.Combine(rhs.HandlingReorientStrength);
                ret.HandlingReorientDamping = this.HandlingReorientDamping.Combine(rhs.HandlingReorientDamping);
                ret.HandlingVerticalBoostForce = this.HandlingVerticalBoostForce.Combine(rhs.HandlingVerticalBoostForce);
                ret.HandlingForwardBoostForce = this.HandlingForwardBoostForce.Combine(rhs.HandlingForwardBoostForce);
                ret.HandlingBoostMaxVelocity = this.HandlingBoostMaxVelocity.Combine(rhs.HandlingBoostMaxVelocity);
                ret.HandlingBoostDuration = this.HandlingBoostDuration.Combine(rhs.HandlingBoostDuration);
                ret.HandlingVerticalBoostDuration = this.HandlingVerticalBoostDuration.Combine(rhs.HandlingVerticalBoostDuration);
                ret.HandlingBoostRechargeDelay = this.HandlingBoostRechargeDelay.Combine(rhs.HandlingBoostRechargeDelay);
                ret.HandlingBoostRechargeDuration = this.HandlingBoostRechargeDuration.Combine(rhs.HandlingBoostRechargeDuration);
                ret.WaterStrengthFront = this.WaterStrengthFront.Combine(rhs.WaterStrengthFront);
                ret.WaterStrengthBack = this.WaterStrengthBack.Combine(rhs.WaterStrengthBack);
                ret.WaterDampFront = this.WaterDampFront.Combine(rhs.WaterDampFront);
                ret.WaterDampBack = this.WaterDampBack.Combine(rhs.WaterDampBack);
                ret.WaterDrive = this.WaterDrive.Combine(rhs.WaterDrive);
                ret.WaterRotationDamp = this.WaterRotationDamp.Combine(rhs.WaterRotationDamp);
                ret.BumperEnable = this.BumperEnable.Combine(rhs.BumperEnable);
                ret.BumperForward = this.BumperForward.Combine(rhs.BumperForward);
                ret.BumperUp = this.BumperUp.Combine(rhs.BumperUp);
                ret.BumperWidth = this.BumperWidth.Combine(rhs.BumperWidth);
                ret.BumperRadius = this.BumperRadius.Combine(rhs.BumperRadius);
                ret.CollisionDampingAngular = this.CollisionDampingAngular.Combine(rhs.CollisionDampingAngular);
                ret.CollisionMinSlopeCos = this.CollisionMinSlopeCos.Combine(rhs.CollisionMinSlopeCos);
                ret.ControlsSteeringPidThirdPersonPValue = this.ControlsSteeringPidThirdPersonPValue.Combine(rhs.ControlsSteeringPidThirdPersonPValue);
                ret.ControlsSteeringPidThirdPersonIValue = this.ControlsSteeringPidThirdPersonIValue.Combine(rhs.ControlsSteeringPidThirdPersonIValue);
                ret.ControlsSteeringPidThirdPersonDValue = this.ControlsSteeringPidThirdPersonDValue.Combine(rhs.ControlsSteeringPidThirdPersonDValue);
                ret.ControlsSteeringPidFirstPersonPValue = this.ControlsSteeringPidFirstPersonPValue.Combine(rhs.ControlsSteeringPidFirstPersonPValue);
                ret.ControlsSteeringPidFirstPersonIValue = this.ControlsSteeringPidFirstPersonIValue.Combine(rhs.ControlsSteeringPidFirstPersonIValue);
                ret.ControlsSteeringPidFirstPersonDValue = this.ControlsSteeringPidFirstPersonDValue.Combine(rhs.ControlsSteeringPidFirstPersonDValue);
                ret.Unknown1 = this.Unknown1.Combine(rhs.Unknown1);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.Unknown3 = this.Unknown3.Combine(rhs.Unknown3);
                ret.Unknown4 = this.Unknown4.Combine(rhs.Unknown4);
                ret.Unknown5 = this.Unknown5.Combine(rhs.Unknown5);
                ret.Unknown6 = this.Unknown6.Combine(rhs.Unknown6);
                ret.CameraBaseZoomFirstPerson = this.CameraBaseZoomFirstPerson.Combine(rhs.CameraBaseZoomFirstPerson);
                ret.CameraBaseZoomThirdPersonNear = this.CameraBaseZoomThirdPersonNear.Combine(rhs.CameraBaseZoomThirdPersonNear);
                ret.CameraBaseZoomThirdPersonFar = this.CameraBaseZoomThirdPersonFar.Combine(rhs.CameraBaseZoomThirdPersonFar);
                ret.CameraBaseHeightFirstPerson = this.CameraBaseHeightFirstPerson.Combine(rhs.CameraBaseHeightFirstPerson);
                ret.CameraBaseHeightThirdPersonNear = this.CameraBaseHeightThirdPersonNear.Combine(rhs.CameraBaseHeightThirdPersonNear);
                ret.CameraBaseHeightThirdPersonFar = this.CameraBaseHeightThirdPersonFar.Combine(rhs.CameraBaseHeightThirdPersonFar);
                ret.CameraBaseFovFirstPerson = this.CameraBaseFovFirstPerson.Combine(rhs.CameraBaseFovFirstPerson);
                ret.CameraBaseFovThirdPersonNear = this.CameraBaseFovThirdPersonNear.Combine(rhs.CameraBaseFovThirdPersonNear);
                ret.CameraBaseFovThirdPersonFar = this.CameraBaseFovThirdPersonFar.Combine(rhs.CameraBaseFovThirdPersonFar);
                ret.CameraBoostFovOffsetNear = this.CameraBoostFovOffsetNear.Combine(rhs.CameraBoostFovOffsetNear);
                ret.CameraBoostFovOffsetFar = this.CameraBoostFovOffsetFar.Combine(rhs.CameraBoostFovOffsetFar);
                ret.CameraSpeedRatioZoomOffsetThirdPersonNear = this.CameraSpeedRatioZoomOffsetThirdPersonNear.Combine(rhs.CameraSpeedRatioZoomOffsetThirdPersonNear);
                ret.CameraSpeedRatioZoomOffsetThirdPersonFar = this.CameraSpeedRatioZoomOffsetThirdPersonFar.Combine(rhs.CameraSpeedRatioZoomOffsetThirdPersonFar);
                ret.CameraSpeedPidPValue = this.CameraSpeedPidPValue.Combine(rhs.CameraSpeedPidPValue);
                ret.CameraSpeedPidIValue = this.CameraSpeedPidIValue.Combine(rhs.CameraSpeedPidIValue);
                ret.CameraSpeedPidDValue = this.CameraSpeedPidDValue.Combine(rhs.CameraSpeedPidDValue);
                ret.CameraFovBlendFactorAiming = this.CameraFovBlendFactorAiming.Combine(rhs.CameraFovBlendFactorAiming);
                ret.CameraFovBlendFactorBoosting = this.CameraFovBlendFactorBoosting.Combine(rhs.CameraFovBlendFactorBoosting);
                ret.CameraPositionBlendFilteringFactor = this.CameraPositionBlendFilteringFactor.Combine(rhs.CameraPositionBlendFilteringFactor);
                ret.CameraPositionRLOffsetFirstPerson = this.CameraPositionRLOffsetFirstPerson.Combine(rhs.CameraPositionRLOffsetFirstPerson);
                ret.HandlingForwardBoostForceInWater = this.HandlingForwardBoostForceInWater.Combine(rhs.HandlingForwardBoostForceInWater);
                ret.WaterLinDamp = this.WaterLinDamp.Combine(rhs.WaterLinDamp);
                ret.WheelMaxFriction = this.WheelMaxFriction.Combine(rhs.WheelMaxFriction);
                ret.WaterBobAccelerationDeadZone = this.WaterBobAccelerationDeadZone.Combine(rhs.WaterBobAccelerationDeadZone);
                ret.WaterBobAccelerationPitch = this.WaterBobAccelerationPitch.Combine(rhs.WaterBobAccelerationPitch);
                ret.WaterBobAccelerationRoll = this.WaterBobAccelerationRoll.Combine(rhs.WaterBobAccelerationRoll);
                ret.WaterBobNaturalPitchPeriod = this.WaterBobNaturalPitchPeriod.Combine(rhs.WaterBobNaturalPitchPeriod);
                ret.WaterBobNaturalRollPeriod = this.WaterBobNaturalRollPeriod.Combine(rhs.WaterBobNaturalRollPeriod);
                ret.WaterBobNaturalAmplitude = this.WaterBobNaturalAmplitude.Combine(rhs.WaterBobNaturalAmplitude);
                ret.WaterBobTorquePitch = this.WaterBobTorquePitch.Combine(rhs.WaterBobTorquePitch);
                ret.WaterBobTorqueRoll = this.WaterBobTorqueRoll.Combine(rhs.WaterBobTorqueRoll);
                ret.ChassisLinearDamping = this.ChassisLinearDamping.Combine(rhs.ChassisLinearDamping);
                ret.SuspensionMaxVisualSpeedCompression = this.SuspensionMaxVisualSpeedCompression.Combine(rhs.SuspensionMaxVisualSpeedCompression);
                ret.SuspensionMaxVisualSpeedRelaxation = this.SuspensionMaxVisualSpeedRelaxation.Combine(rhs.SuspensionMaxVisualSpeedRelaxation);
                ret.SlideFactorGainGreaterThanThreshold = this.SlideFactorGainGreaterThanThreshold.Combine(rhs.SlideFactorGainGreaterThanThreshold);
                ret.SlideFactorLostLessThanOrEqualThreshold = this.SlideFactorLostLessThanOrEqualThreshold.Combine(rhs.SlideFactorLostLessThanOrEqualThreshold);
                ret.SlideFactorThreshold = this.SlideFactorThreshold.Combine(rhs.SlideFactorThreshold);
                ret.SlideFactorFrictionAtMax = this.SlideFactorFrictionAtMax.Combine(rhs.SlideFactorFrictionAtMax);
                ret.SlideFactorViscosityFrictionAtMax = this.SlideFactorViscosityFrictionAtMax.Combine(rhs.SlideFactorViscosityFrictionAtMax);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool NodeNamesSuspensionFrontLeft;
            public bool NodeNamesSuspensionFrontRight;
            public bool NodeNamesSuspensionRearLeft;
            public bool NodeNamesSuspensionRearRight;
            public bool NodeNamesWheelFrontLeft;
            public bool NodeNamesWheelFrontRight;
            public bool NodeNamesWheelRearLeft;
            public bool NodeNamesWheelRearRight;
            public bool ChassisForwardAxis;
            public bool ChassisUpAxis;
            public bool ChassisVehicleMass;
            public bool ChassisFrictionEqualizer;
            public bool ChassisTorqueRoll;
            public bool ChassisTorquePitch;
            public bool ChassisTorqueYaw;
            public bool ChassisInertiaYaw;
            public bool ChassisInertiaRoll;
            public bool ChassisInertialPitch;
            public bool ChassisExtraTorque;
            public bool ChassisMaxVelocityPositionalFriction;
            public bool ChassisFriction;
            public bool ChassisRestitution;
            public bool ChassisComOffsetForward;
            public bool ChassisComOffsetUp;
            public bool WheelSlipAngle;
            public bool WheelFriction;
            public bool WheelScale;
            public bool WheelMass;
            public bool WheelViscosityFriction;
            public bool WheelCastType;
            public bool SuspensionStrength;
            public bool SuspensionDampingCompression;
            public bool SuspensionDampingRelaxation;
            public bool SuspensionLength;
            public bool SuspensionOffsetsUpFront;
            public bool SuspensionOffsetsUpBack;
            public bool SuspensionOffsetsFront;
            public bool SuspensionOffsetsBack;
            public bool SuspensionOffsetsLateral;
            public bool SteeringMaxAngle;
            public bool SteeringMaxAngleAtSpeed;
            public bool EngineMaxSpeed;
            public bool EngineMaxTorque;
            public bool EngineMinRpm;
            public bool EngineMaxRpm;
            public bool EngineOptRpm;
            public bool EngineTorqueMinRpm;
            public bool EngineTorqueMaxRpm;
            public bool EngineResistanceMinRpm;
            public bool EngineResistanceMaxRpm;
            public bool EngineResistanceOptRpm;
            public bool TransmissionDownshiftRpm;
            public bool TransmissionUpshiftRpm;
            public bool TransmissionClutchDelayTime;
            public bool TransmissionGearRatioReverse;
            public bool TransmissionGearRatioFirst;
            public bool TransmissionGearRatioSecond;
            public bool TransmissionGearRatioThird;
            public bool TransmissionGearRatioFourth;
            public bool TransmissionTorqueRatioFrontWheels;
            public bool TransmissionTorqueRatioBackWheels;
            public bool BrakesMaxTorque;
            public bool BrakesMinPedalInputToBlock;
            public bool BrakesWheelsMinTimeToBlock;
            public bool AerodynamicsAirDensity;
            public bool AerodynamicsFrontArea;
            public bool AerodynamicsDragCoefficient;
            public bool AerodynamicsLiftCoefficient;
            public bool AerodynamicsExtraGravityMultiplier;
            public bool VelocityDampingNormalSpin;
            public bool VelocityDampingCollisionSpin;
            public bool VelocityDampingCollisionThreshold;
            public bool HandlingReorientStrength;
            public bool HandlingReorientDamping;
            public bool HandlingVerticalBoostForce;
            public bool HandlingForwardBoostForce;
            public bool HandlingBoostMaxVelocity;
            public bool HandlingBoostDuration;
            public bool HandlingVerticalBoostDuration;
            public bool HandlingBoostRechargeDelay;
            public bool HandlingBoostRechargeDuration;
            public bool WaterStrengthFront;
            public bool WaterStrengthBack;
            public bool WaterDampFront;
            public bool WaterDampBack;
            public bool WaterDrive;
            public bool WaterRotationDamp;
            public bool BumperEnable;
            public bool BumperForward;
            public bool BumperUp;
            public bool BumperWidth;
            public bool BumperRadius;
            public bool CollisionDampingAngular;
            public bool CollisionMinSlopeCos;
            public bool ControlsSteeringPidThirdPersonPValue;
            public bool ControlsSteeringPidThirdPersonIValue;
            public bool ControlsSteeringPidThirdPersonDValue;
            public bool ControlsSteeringPidFirstPersonPValue;
            public bool ControlsSteeringPidFirstPersonIValue;
            public bool ControlsSteeringPidFirstPersonDValue;
            public bool Unknown1;
            public bool Unknown2;
            public bool Unknown3;
            public bool Unknown4;
            public bool Unknown5;
            public bool Unknown6;
            public bool CameraBaseZoomFirstPerson;
            public bool CameraBaseZoomThirdPersonNear;
            public bool CameraBaseZoomThirdPersonFar;
            public bool CameraBaseHeightFirstPerson;
            public bool CameraBaseHeightThirdPersonNear;
            public bool CameraBaseHeightThirdPersonFar;
            public bool CameraBaseFovFirstPerson;
            public bool CameraBaseFovThirdPersonNear;
            public bool CameraBaseFovThirdPersonFar;
            public bool CameraBoostFovOffsetNear;
            public bool CameraBoostFovOffsetFar;
            public bool CameraSpeedRatioZoomOffsetThirdPersonNear;
            public bool CameraSpeedRatioZoomOffsetThirdPersonFar;
            public bool CameraSpeedPidPValue;
            public bool CameraSpeedPidIValue;
            public bool CameraSpeedPidDValue;
            public bool CameraFovBlendFactorAiming;
            public bool CameraFovBlendFactorBoosting;
            public bool CameraPositionBlendFilteringFactor;
            public bool CameraPositionRLOffsetFirstPerson;
            public bool HandlingForwardBoostForceInWater;
            public bool WaterLinDamp;
            public bool WheelMaxFriction;
            public bool WaterBobAccelerationDeadZone;
            public bool WaterBobAccelerationPitch;
            public bool WaterBobAccelerationRoll;
            public bool WaterBobNaturalPitchPeriod;
            public bool WaterBobNaturalRollPeriod;
            public bool WaterBobNaturalAmplitude;
            public bool WaterBobTorquePitch;
            public bool WaterBobTorqueRoll;
            public bool ChassisLinearDamping;
            public bool SuspensionMaxVisualSpeedCompression;
            public bool SuspensionMaxVisualSpeedRelaxation;
            public bool SlideFactorGainGreaterThanThreshold;
            public bool SlideFactorLostLessThanOrEqualThreshold;
            public bool SlideFactorThreshold;
            public bool SlideFactorFrictionAtMax;
            public bool SlideFactorViscosityFrictionAtMax;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.NodeNamesSuspensionFrontLeft = defaultOn;
                this.NodeNamesSuspensionFrontRight = defaultOn;
                this.NodeNamesSuspensionRearLeft = defaultOn;
                this.NodeNamesSuspensionRearRight = defaultOn;
                this.NodeNamesWheelFrontLeft = defaultOn;
                this.NodeNamesWheelFrontRight = defaultOn;
                this.NodeNamesWheelRearLeft = defaultOn;
                this.NodeNamesWheelRearRight = defaultOn;
                this.ChassisForwardAxis = defaultOn;
                this.ChassisUpAxis = defaultOn;
                this.ChassisVehicleMass = defaultOn;
                this.ChassisFrictionEqualizer = defaultOn;
                this.ChassisTorqueRoll = defaultOn;
                this.ChassisTorquePitch = defaultOn;
                this.ChassisTorqueYaw = defaultOn;
                this.ChassisInertiaYaw = defaultOn;
                this.ChassisInertiaRoll = defaultOn;
                this.ChassisInertialPitch = defaultOn;
                this.ChassisExtraTorque = defaultOn;
                this.ChassisMaxVelocityPositionalFriction = defaultOn;
                this.ChassisFriction = defaultOn;
                this.ChassisRestitution = defaultOn;
                this.ChassisComOffsetForward = defaultOn;
                this.ChassisComOffsetUp = defaultOn;
                this.WheelSlipAngle = defaultOn;
                this.WheelFriction = defaultOn;
                this.WheelScale = defaultOn;
                this.WheelMass = defaultOn;
                this.WheelViscosityFriction = defaultOn;
                this.WheelCastType = defaultOn;
                this.SuspensionStrength = defaultOn;
                this.SuspensionDampingCompression = defaultOn;
                this.SuspensionDampingRelaxation = defaultOn;
                this.SuspensionLength = defaultOn;
                this.SuspensionOffsetsUpFront = defaultOn;
                this.SuspensionOffsetsUpBack = defaultOn;
                this.SuspensionOffsetsFront = defaultOn;
                this.SuspensionOffsetsBack = defaultOn;
                this.SuspensionOffsetsLateral = defaultOn;
                this.SteeringMaxAngle = defaultOn;
                this.SteeringMaxAngleAtSpeed = defaultOn;
                this.EngineMaxSpeed = defaultOn;
                this.EngineMaxTorque = defaultOn;
                this.EngineMinRpm = defaultOn;
                this.EngineMaxRpm = defaultOn;
                this.EngineOptRpm = defaultOn;
                this.EngineTorqueMinRpm = defaultOn;
                this.EngineTorqueMaxRpm = defaultOn;
                this.EngineResistanceMinRpm = defaultOn;
                this.EngineResistanceMaxRpm = defaultOn;
                this.EngineResistanceOptRpm = defaultOn;
                this.TransmissionDownshiftRpm = defaultOn;
                this.TransmissionUpshiftRpm = defaultOn;
                this.TransmissionClutchDelayTime = defaultOn;
                this.TransmissionGearRatioReverse = defaultOn;
                this.TransmissionGearRatioFirst = defaultOn;
                this.TransmissionGearRatioSecond = defaultOn;
                this.TransmissionGearRatioThird = defaultOn;
                this.TransmissionGearRatioFourth = defaultOn;
                this.TransmissionTorqueRatioFrontWheels = defaultOn;
                this.TransmissionTorqueRatioBackWheels = defaultOn;
                this.BrakesMaxTorque = defaultOn;
                this.BrakesMinPedalInputToBlock = defaultOn;
                this.BrakesWheelsMinTimeToBlock = defaultOn;
                this.AerodynamicsAirDensity = defaultOn;
                this.AerodynamicsFrontArea = defaultOn;
                this.AerodynamicsDragCoefficient = defaultOn;
                this.AerodynamicsLiftCoefficient = defaultOn;
                this.AerodynamicsExtraGravityMultiplier = defaultOn;
                this.VelocityDampingNormalSpin = defaultOn;
                this.VelocityDampingCollisionSpin = defaultOn;
                this.VelocityDampingCollisionThreshold = defaultOn;
                this.HandlingReorientStrength = defaultOn;
                this.HandlingReorientDamping = defaultOn;
                this.HandlingVerticalBoostForce = defaultOn;
                this.HandlingForwardBoostForce = defaultOn;
                this.HandlingBoostMaxVelocity = defaultOn;
                this.HandlingBoostDuration = defaultOn;
                this.HandlingVerticalBoostDuration = defaultOn;
                this.HandlingBoostRechargeDelay = defaultOn;
                this.HandlingBoostRechargeDuration = defaultOn;
                this.WaterStrengthFront = defaultOn;
                this.WaterStrengthBack = defaultOn;
                this.WaterDampFront = defaultOn;
                this.WaterDampBack = defaultOn;
                this.WaterDrive = defaultOn;
                this.WaterRotationDamp = defaultOn;
                this.BumperEnable = defaultOn;
                this.BumperForward = defaultOn;
                this.BumperUp = defaultOn;
                this.BumperWidth = defaultOn;
                this.BumperRadius = defaultOn;
                this.CollisionDampingAngular = defaultOn;
                this.CollisionMinSlopeCos = defaultOn;
                this.ControlsSteeringPidThirdPersonPValue = defaultOn;
                this.ControlsSteeringPidThirdPersonIValue = defaultOn;
                this.ControlsSteeringPidThirdPersonDValue = defaultOn;
                this.ControlsSteeringPidFirstPersonPValue = defaultOn;
                this.ControlsSteeringPidFirstPersonIValue = defaultOn;
                this.ControlsSteeringPidFirstPersonDValue = defaultOn;
                this.Unknown1 = defaultOn;
                this.Unknown2 = defaultOn;
                this.Unknown3 = defaultOn;
                this.Unknown4 = defaultOn;
                this.Unknown5 = defaultOn;
                this.Unknown6 = defaultOn;
                this.CameraBaseZoomFirstPerson = defaultOn;
                this.CameraBaseZoomThirdPersonNear = defaultOn;
                this.CameraBaseZoomThirdPersonFar = defaultOn;
                this.CameraBaseHeightFirstPerson = defaultOn;
                this.CameraBaseHeightThirdPersonNear = defaultOn;
                this.CameraBaseHeightThirdPersonFar = defaultOn;
                this.CameraBaseFovFirstPerson = defaultOn;
                this.CameraBaseFovThirdPersonNear = defaultOn;
                this.CameraBaseFovThirdPersonFar = defaultOn;
                this.CameraBoostFovOffsetNear = defaultOn;
                this.CameraBoostFovOffsetFar = defaultOn;
                this.CameraSpeedRatioZoomOffsetThirdPersonNear = defaultOn;
                this.CameraSpeedRatioZoomOffsetThirdPersonFar = defaultOn;
                this.CameraSpeedPidPValue = defaultOn;
                this.CameraSpeedPidIValue = defaultOn;
                this.CameraSpeedPidDValue = defaultOn;
                this.CameraFovBlendFactorAiming = defaultOn;
                this.CameraFovBlendFactorBoosting = defaultOn;
                this.CameraPositionBlendFilteringFactor = defaultOn;
                this.CameraPositionRLOffsetFirstPerson = defaultOn;
                this.HandlingForwardBoostForceInWater = defaultOn;
                this.WaterLinDamp = defaultOn;
                this.WheelMaxFriction = defaultOn;
                this.WaterBobAccelerationDeadZone = defaultOn;
                this.WaterBobAccelerationPitch = defaultOn;
                this.WaterBobAccelerationRoll = defaultOn;
                this.WaterBobNaturalPitchPeriod = defaultOn;
                this.WaterBobNaturalRollPeriod = defaultOn;
                this.WaterBobNaturalAmplitude = defaultOn;
                this.WaterBobTorquePitch = defaultOn;
                this.WaterBobTorqueRoll = defaultOn;
                this.ChassisLinearDamping = defaultOn;
                this.SuspensionMaxVisualSpeedCompression = defaultOn;
                this.SuspensionMaxVisualSpeedRelaxation = defaultOn;
                this.SlideFactorGainGreaterThanThreshold = defaultOn;
                this.SlideFactorLostLessThanOrEqualThreshold = defaultOn;
                this.SlideFactorThreshold = defaultOn;
                this.SlideFactorFrictionAtMax = defaultOn;
                this.SlideFactorViscosityFrictionAtMax = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((NodeNamesSuspensionFrontLeft, null));
                ret.Add((NodeNamesSuspensionFrontRight, null));
                ret.Add((NodeNamesSuspensionRearLeft, null));
                ret.Add((NodeNamesSuspensionRearRight, null));
                ret.Add((NodeNamesWheelFrontLeft, null));
                ret.Add((NodeNamesWheelFrontRight, null));
                ret.Add((NodeNamesWheelRearLeft, null));
                ret.Add((NodeNamesWheelRearRight, null));
                ret.Add((ChassisForwardAxis, null));
                ret.Add((ChassisUpAxis, null));
                ret.Add((ChassisVehicleMass, null));
                ret.Add((ChassisFrictionEqualizer, null));
                ret.Add((ChassisTorqueRoll, null));
                ret.Add((ChassisTorquePitch, null));
                ret.Add((ChassisTorqueYaw, null));
                ret.Add((ChassisInertiaYaw, null));
                ret.Add((ChassisInertiaRoll, null));
                ret.Add((ChassisInertialPitch, null));
                ret.Add((ChassisExtraTorque, null));
                ret.Add((ChassisMaxVelocityPositionalFriction, null));
                ret.Add((ChassisFriction, null));
                ret.Add((ChassisRestitution, null));
                ret.Add((ChassisComOffsetForward, null));
                ret.Add((ChassisComOffsetUp, null));
                ret.Add((WheelSlipAngle, null));
                ret.Add((WheelFriction, null));
                ret.Add((WheelScale, null));
                ret.Add((WheelMass, null));
                ret.Add((WheelViscosityFriction, null));
                ret.Add((WheelCastType, null));
                ret.Add((SuspensionStrength, null));
                ret.Add((SuspensionDampingCompression, null));
                ret.Add((SuspensionDampingRelaxation, null));
                ret.Add((SuspensionLength, null));
                ret.Add((SuspensionOffsetsUpFront, null));
                ret.Add((SuspensionOffsetsUpBack, null));
                ret.Add((SuspensionOffsetsFront, null));
                ret.Add((SuspensionOffsetsBack, null));
                ret.Add((SuspensionOffsetsLateral, null));
                ret.Add((SteeringMaxAngle, null));
                ret.Add((SteeringMaxAngleAtSpeed, null));
                ret.Add((EngineMaxSpeed, null));
                ret.Add((EngineMaxTorque, null));
                ret.Add((EngineMinRpm, null));
                ret.Add((EngineMaxRpm, null));
                ret.Add((EngineOptRpm, null));
                ret.Add((EngineTorqueMinRpm, null));
                ret.Add((EngineTorqueMaxRpm, null));
                ret.Add((EngineResistanceMinRpm, null));
                ret.Add((EngineResistanceMaxRpm, null));
                ret.Add((EngineResistanceOptRpm, null));
                ret.Add((TransmissionDownshiftRpm, null));
                ret.Add((TransmissionUpshiftRpm, null));
                ret.Add((TransmissionClutchDelayTime, null));
                ret.Add((TransmissionGearRatioReverse, null));
                ret.Add((TransmissionGearRatioFirst, null));
                ret.Add((TransmissionGearRatioSecond, null));
                ret.Add((TransmissionGearRatioThird, null));
                ret.Add((TransmissionGearRatioFourth, null));
                ret.Add((TransmissionTorqueRatioFrontWheels, null));
                ret.Add((TransmissionTorqueRatioBackWheels, null));
                ret.Add((BrakesMaxTorque, null));
                ret.Add((BrakesMinPedalInputToBlock, null));
                ret.Add((BrakesWheelsMinTimeToBlock, null));
                ret.Add((AerodynamicsAirDensity, null));
                ret.Add((AerodynamicsFrontArea, null));
                ret.Add((AerodynamicsDragCoefficient, null));
                ret.Add((AerodynamicsLiftCoefficient, null));
                ret.Add((AerodynamicsExtraGravityMultiplier, null));
                ret.Add((VelocityDampingNormalSpin, null));
                ret.Add((VelocityDampingCollisionSpin, null));
                ret.Add((VelocityDampingCollisionThreshold, null));
                ret.Add((HandlingReorientStrength, null));
                ret.Add((HandlingReorientDamping, null));
                ret.Add((HandlingVerticalBoostForce, null));
                ret.Add((HandlingForwardBoostForce, null));
                ret.Add((HandlingBoostMaxVelocity, null));
                ret.Add((HandlingBoostDuration, null));
                ret.Add((HandlingVerticalBoostDuration, null));
                ret.Add((HandlingBoostRechargeDelay, null));
                ret.Add((HandlingBoostRechargeDuration, null));
                ret.Add((WaterStrengthFront, null));
                ret.Add((WaterStrengthBack, null));
                ret.Add((WaterDampFront, null));
                ret.Add((WaterDampBack, null));
                ret.Add((WaterDrive, null));
                ret.Add((WaterRotationDamp, null));
                ret.Add((BumperEnable, null));
                ret.Add((BumperForward, null));
                ret.Add((BumperUp, null));
                ret.Add((BumperWidth, null));
                ret.Add((BumperRadius, null));
                ret.Add((CollisionDampingAngular, null));
                ret.Add((CollisionMinSlopeCos, null));
                ret.Add((ControlsSteeringPidThirdPersonPValue, null));
                ret.Add((ControlsSteeringPidThirdPersonIValue, null));
                ret.Add((ControlsSteeringPidThirdPersonDValue, null));
                ret.Add((ControlsSteeringPidFirstPersonPValue, null));
                ret.Add((ControlsSteeringPidFirstPersonIValue, null));
                ret.Add((ControlsSteeringPidFirstPersonDValue, null));
                ret.Add((Unknown1, null));
                ret.Add((Unknown2, null));
                ret.Add((Unknown3, null));
                ret.Add((Unknown4, null));
                ret.Add((Unknown5, null));
                ret.Add((Unknown6, null));
                ret.Add((CameraBaseZoomFirstPerson, null));
                ret.Add((CameraBaseZoomThirdPersonNear, null));
                ret.Add((CameraBaseZoomThirdPersonFar, null));
                ret.Add((CameraBaseHeightFirstPerson, null));
                ret.Add((CameraBaseHeightThirdPersonNear, null));
                ret.Add((CameraBaseHeightThirdPersonFar, null));
                ret.Add((CameraBaseFovFirstPerson, null));
                ret.Add((CameraBaseFovThirdPersonNear, null));
                ret.Add((CameraBaseFovThirdPersonFar, null));
                ret.Add((CameraBoostFovOffsetNear, null));
                ret.Add((CameraBoostFovOffsetFar, null));
                ret.Add((CameraSpeedRatioZoomOffsetThirdPersonNear, null));
                ret.Add((CameraSpeedRatioZoomOffsetThirdPersonFar, null));
                ret.Add((CameraSpeedPidPValue, null));
                ret.Add((CameraSpeedPidIValue, null));
                ret.Add((CameraSpeedPidDValue, null));
                ret.Add((CameraFovBlendFactorAiming, null));
                ret.Add((CameraFovBlendFactorBoosting, null));
                ret.Add((CameraPositionBlendFilteringFactor, null));
                ret.Add((CameraPositionRLOffsetFirstPerson, null));
                ret.Add((HandlingForwardBoostForceInWater, null));
                ret.Add((WaterLinDamp, null));
                ret.Add((WheelMaxFriction, null));
                ret.Add((WaterBobAccelerationDeadZone, null));
                ret.Add((WaterBobAccelerationPitch, null));
                ret.Add((WaterBobAccelerationRoll, null));
                ret.Add((WaterBobNaturalPitchPeriod, null));
                ret.Add((WaterBobNaturalRollPeriod, null));
                ret.Add((WaterBobNaturalAmplitude, null));
                ret.Add((WaterBobTorquePitch, null));
                ret.Add((WaterBobTorqueRoll, null));
                ret.Add((ChassisLinearDamping, null));
                ret.Add((SuspensionMaxVisualSpeedCompression, null));
                ret.Add((SuspensionMaxVisualSpeedRelaxation, null));
                ret.Add((SlideFactorGainGreaterThanThreshold, null));
                ret.Add((SlideFactorLostLessThanOrEqualThreshold, null));
                ret.Add((SlideFactorThreshold, null));
                ret.Add((SlideFactorFrictionAtMax, null));
                ret.Add((SlideFactorViscosityFrictionAtMax, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => VehicleConfigDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleConfigDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static VehicleConfigData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new VehicleConfigData();
            ((VehicleConfigDataSetterCommon)((IVehicleConfigDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out VehicleConfigData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((VehicleConfigDataSetterCommon)((IVehicleConfigDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static VehicleConfigData GetNew()
        {
            return new VehicleConfigData();
        }

    }
    #endregion

    #region Interface
    public partial interface IVehicleConfigData :
        ILoquiObjectSetter<IVehicleConfigData>,
        IVehicleConfigDataGetter
    {
        new String NodeNamesSuspensionFrontLeft { get; set; }
        new String NodeNamesSuspensionFrontRight { get; set; }
        new String NodeNamesSuspensionRearLeft { get; set; }
        new String NodeNamesSuspensionRearRight { get; set; }
        new String NodeNamesWheelFrontLeft { get; set; }
        new String NodeNamesWheelFrontRight { get; set; }
        new String NodeNamesWheelRearLeft { get; set; }
        new String NodeNamesWheelRearRight { get; set; }
        new UInt32 ChassisForwardAxis { get; set; }
        new UInt32 ChassisUpAxis { get; set; }
        new Single ChassisVehicleMass { get; set; }
        new Single ChassisFrictionEqualizer { get; set; }
        new Single ChassisTorqueRoll { get; set; }
        new Single ChassisTorquePitch { get; set; }
        new Single ChassisTorqueYaw { get; set; }
        new Single ChassisInertiaYaw { get; set; }
        new Single ChassisInertiaRoll { get; set; }
        new Single ChassisInertialPitch { get; set; }
        new Single ChassisExtraTorque { get; set; }
        new Single ChassisMaxVelocityPositionalFriction { get; set; }
        new Single ChassisFriction { get; set; }
        new Single ChassisRestitution { get; set; }
        new Single ChassisComOffsetForward { get; set; }
        new Single ChassisComOffsetUp { get; set; }
        new Single WheelSlipAngle { get; set; }
        new Single WheelFriction { get; set; }
        new Single WheelScale { get; set; }
        new Single WheelMass { get; set; }
        new Single WheelViscosityFriction { get; set; }
        new Int32 WheelCastType { get; set; }
        new Single SuspensionStrength { get; set; }
        new Single SuspensionDampingCompression { get; set; }
        new Single SuspensionDampingRelaxation { get; set; }
        new Single SuspensionLength { get; set; }
        new Single SuspensionOffsetsUpFront { get; set; }
        new Single SuspensionOffsetsUpBack { get; set; }
        new Single SuspensionOffsetsFront { get; set; }
        new Single SuspensionOffsetsBack { get; set; }
        new Single SuspensionOffsetsLateral { get; set; }
        new Single SteeringMaxAngle { get; set; }
        new Single SteeringMaxAngleAtSpeed { get; set; }
        new Single EngineMaxSpeed { get; set; }
        new Single EngineMaxTorque { get; set; }
        new Single EngineMinRpm { get; set; }
        new Single EngineMaxRpm { get; set; }
        new Single EngineOptRpm { get; set; }
        new Single EngineTorqueMinRpm { get; set; }
        new Single EngineTorqueMaxRpm { get; set; }
        new Single EngineResistanceMinRpm { get; set; }
        new Single EngineResistanceMaxRpm { get; set; }
        new Single EngineResistanceOptRpm { get; set; }
        new Single TransmissionDownshiftRpm { get; set; }
        new Single TransmissionUpshiftRpm { get; set; }
        new Single TransmissionClutchDelayTime { get; set; }
        new Single TransmissionGearRatioReverse { get; set; }
        new Single TransmissionGearRatioFirst { get; set; }
        new Single TransmissionGearRatioSecond { get; set; }
        new Single TransmissionGearRatioThird { get; set; }
        new Single TransmissionGearRatioFourth { get; set; }
        new Single TransmissionTorqueRatioFrontWheels { get; set; }
        new Single TransmissionTorqueRatioBackWheels { get; set; }
        new Single BrakesMaxTorque { get; set; }
        new Single BrakesMinPedalInputToBlock { get; set; }
        new Single BrakesWheelsMinTimeToBlock { get; set; }
        new Single AerodynamicsAirDensity { get; set; }
        new Single AerodynamicsFrontArea { get; set; }
        new Single AerodynamicsDragCoefficient { get; set; }
        new Single AerodynamicsLiftCoefficient { get; set; }
        new Single AerodynamicsExtraGravityMultiplier { get; set; }
        new Single VelocityDampingNormalSpin { get; set; }
        new Single VelocityDampingCollisionSpin { get; set; }
        new Single VelocityDampingCollisionThreshold { get; set; }
        new Single HandlingReorientStrength { get; set; }
        new Single HandlingReorientDamping { get; set; }
        new Single HandlingVerticalBoostForce { get; set; }
        new Single HandlingForwardBoostForce { get; set; }
        new Single HandlingBoostMaxVelocity { get; set; }
        new Single HandlingBoostDuration { get; set; }
        new Single HandlingVerticalBoostDuration { get; set; }
        new Single HandlingBoostRechargeDelay { get; set; }
        new Single HandlingBoostRechargeDuration { get; set; }
        new Single WaterStrengthFront { get; set; }
        new Single WaterStrengthBack { get; set; }
        new Single WaterDampFront { get; set; }
        new Single WaterDampBack { get; set; }
        new Single WaterDrive { get; set; }
        new Single WaterRotationDamp { get; set; }
        new Boolean BumperEnable { get; set; }
        new Single BumperForward { get; set; }
        new Single BumperUp { get; set; }
        new Single BumperWidth { get; set; }
        new Single BumperRadius { get; set; }
        new Single CollisionDampingAngular { get; set; }
        new Single CollisionMinSlopeCos { get; set; }
        new Single ControlsSteeringPidThirdPersonPValue { get; set; }
        new Single ControlsSteeringPidThirdPersonIValue { get; set; }
        new Single ControlsSteeringPidThirdPersonDValue { get; set; }
        new Single ControlsSteeringPidFirstPersonPValue { get; set; }
        new Single ControlsSteeringPidFirstPersonIValue { get; set; }
        new Single ControlsSteeringPidFirstPersonDValue { get; set; }
        new Single Unknown1 { get; set; }
        new Single Unknown2 { get; set; }
        new Single Unknown3 { get; set; }
        new Single Unknown4 { get; set; }
        new Single Unknown5 { get; set; }
        new Single Unknown6 { get; set; }
        new Single CameraBaseZoomFirstPerson { get; set; }
        new Single CameraBaseZoomThirdPersonNear { get; set; }
        new Single CameraBaseZoomThirdPersonFar { get; set; }
        new Single CameraBaseHeightFirstPerson { get; set; }
        new Single CameraBaseHeightThirdPersonNear { get; set; }
        new Single CameraBaseHeightThirdPersonFar { get; set; }
        new Single CameraBaseFovFirstPerson { get; set; }
        new Single CameraBaseFovThirdPersonNear { get; set; }
        new Single CameraBaseFovThirdPersonFar { get; set; }
        new Single CameraBoostFovOffsetNear { get; set; }
        new Single CameraBoostFovOffsetFar { get; set; }
        new Single CameraSpeedRatioZoomOffsetThirdPersonNear { get; set; }
        new Single CameraSpeedRatioZoomOffsetThirdPersonFar { get; set; }
        new Single CameraSpeedPidPValue { get; set; }
        new Single CameraSpeedPidIValue { get; set; }
        new Single CameraSpeedPidDValue { get; set; }
        new Single CameraFovBlendFactorAiming { get; set; }
        new Single CameraFovBlendFactorBoosting { get; set; }
        new Single CameraPositionBlendFilteringFactor { get; set; }
        new Single CameraPositionRLOffsetFirstPerson { get; set; }
        new Single HandlingForwardBoostForceInWater { get; set; }
        new Single WaterLinDamp { get; set; }
        new Single WheelMaxFriction { get; set; }
        new Single WaterBobAccelerationDeadZone { get; set; }
        new Single WaterBobAccelerationPitch { get; set; }
        new Single WaterBobAccelerationRoll { get; set; }
        new Single WaterBobNaturalPitchPeriod { get; set; }
        new Single WaterBobNaturalRollPeriod { get; set; }
        new Single WaterBobNaturalAmplitude { get; set; }
        new Single WaterBobTorquePitch { get; set; }
        new Single WaterBobTorqueRoll { get; set; }
        new Single ChassisLinearDamping { get; set; }
        new Single SuspensionMaxVisualSpeedCompression { get; set; }
        new Single SuspensionMaxVisualSpeedRelaxation { get; set; }
        new Single SlideFactorGainGreaterThanThreshold { get; set; }
        new Single SlideFactorLostLessThanOrEqualThreshold { get; set; }
        new Single SlideFactorThreshold { get; set; }
        new Single SlideFactorFrictionAtMax { get; set; }
        new Single SlideFactorViscosityFrictionAtMax { get; set; }
    }

    public partial interface IVehicleConfigDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IVehicleConfigDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => VehicleConfigData_Registration.Instance;
        String NodeNamesSuspensionFrontLeft { get; }
        String NodeNamesSuspensionFrontRight { get; }
        String NodeNamesSuspensionRearLeft { get; }
        String NodeNamesSuspensionRearRight { get; }
        String NodeNamesWheelFrontLeft { get; }
        String NodeNamesWheelFrontRight { get; }
        String NodeNamesWheelRearLeft { get; }
        String NodeNamesWheelRearRight { get; }
        UInt32 ChassisForwardAxis { get; }
        UInt32 ChassisUpAxis { get; }
        Single ChassisVehicleMass { get; }
        Single ChassisFrictionEqualizer { get; }
        Single ChassisTorqueRoll { get; }
        Single ChassisTorquePitch { get; }
        Single ChassisTorqueYaw { get; }
        Single ChassisInertiaYaw { get; }
        Single ChassisInertiaRoll { get; }
        Single ChassisInertialPitch { get; }
        Single ChassisExtraTorque { get; }
        Single ChassisMaxVelocityPositionalFriction { get; }
        Single ChassisFriction { get; }
        Single ChassisRestitution { get; }
        Single ChassisComOffsetForward { get; }
        Single ChassisComOffsetUp { get; }
        Single WheelSlipAngle { get; }
        Single WheelFriction { get; }
        Single WheelScale { get; }
        Single WheelMass { get; }
        Single WheelViscosityFriction { get; }
        Int32 WheelCastType { get; }
        Single SuspensionStrength { get; }
        Single SuspensionDampingCompression { get; }
        Single SuspensionDampingRelaxation { get; }
        Single SuspensionLength { get; }
        Single SuspensionOffsetsUpFront { get; }
        Single SuspensionOffsetsUpBack { get; }
        Single SuspensionOffsetsFront { get; }
        Single SuspensionOffsetsBack { get; }
        Single SuspensionOffsetsLateral { get; }
        Single SteeringMaxAngle { get; }
        Single SteeringMaxAngleAtSpeed { get; }
        Single EngineMaxSpeed { get; }
        Single EngineMaxTorque { get; }
        Single EngineMinRpm { get; }
        Single EngineMaxRpm { get; }
        Single EngineOptRpm { get; }
        Single EngineTorqueMinRpm { get; }
        Single EngineTorqueMaxRpm { get; }
        Single EngineResistanceMinRpm { get; }
        Single EngineResistanceMaxRpm { get; }
        Single EngineResistanceOptRpm { get; }
        Single TransmissionDownshiftRpm { get; }
        Single TransmissionUpshiftRpm { get; }
        Single TransmissionClutchDelayTime { get; }
        Single TransmissionGearRatioReverse { get; }
        Single TransmissionGearRatioFirst { get; }
        Single TransmissionGearRatioSecond { get; }
        Single TransmissionGearRatioThird { get; }
        Single TransmissionGearRatioFourth { get; }
        Single TransmissionTorqueRatioFrontWheels { get; }
        Single TransmissionTorqueRatioBackWheels { get; }
        Single BrakesMaxTorque { get; }
        Single BrakesMinPedalInputToBlock { get; }
        Single BrakesWheelsMinTimeToBlock { get; }
        Single AerodynamicsAirDensity { get; }
        Single AerodynamicsFrontArea { get; }
        Single AerodynamicsDragCoefficient { get; }
        Single AerodynamicsLiftCoefficient { get; }
        Single AerodynamicsExtraGravityMultiplier { get; }
        Single VelocityDampingNormalSpin { get; }
        Single VelocityDampingCollisionSpin { get; }
        Single VelocityDampingCollisionThreshold { get; }
        Single HandlingReorientStrength { get; }
        Single HandlingReorientDamping { get; }
        Single HandlingVerticalBoostForce { get; }
        Single HandlingForwardBoostForce { get; }
        Single HandlingBoostMaxVelocity { get; }
        Single HandlingBoostDuration { get; }
        Single HandlingVerticalBoostDuration { get; }
        Single HandlingBoostRechargeDelay { get; }
        Single HandlingBoostRechargeDuration { get; }
        Single WaterStrengthFront { get; }
        Single WaterStrengthBack { get; }
        Single WaterDampFront { get; }
        Single WaterDampBack { get; }
        Single WaterDrive { get; }
        Single WaterRotationDamp { get; }
        Boolean BumperEnable { get; }
        Single BumperForward { get; }
        Single BumperUp { get; }
        Single BumperWidth { get; }
        Single BumperRadius { get; }
        Single CollisionDampingAngular { get; }
        Single CollisionMinSlopeCos { get; }
        Single ControlsSteeringPidThirdPersonPValue { get; }
        Single ControlsSteeringPidThirdPersonIValue { get; }
        Single ControlsSteeringPidThirdPersonDValue { get; }
        Single ControlsSteeringPidFirstPersonPValue { get; }
        Single ControlsSteeringPidFirstPersonIValue { get; }
        Single ControlsSteeringPidFirstPersonDValue { get; }
        Single Unknown1 { get; }
        Single Unknown2 { get; }
        Single Unknown3 { get; }
        Single Unknown4 { get; }
        Single Unknown5 { get; }
        Single Unknown6 { get; }
        Single CameraBaseZoomFirstPerson { get; }
        Single CameraBaseZoomThirdPersonNear { get; }
        Single CameraBaseZoomThirdPersonFar { get; }
        Single CameraBaseHeightFirstPerson { get; }
        Single CameraBaseHeightThirdPersonNear { get; }
        Single CameraBaseHeightThirdPersonFar { get; }
        Single CameraBaseFovFirstPerson { get; }
        Single CameraBaseFovThirdPersonNear { get; }
        Single CameraBaseFovThirdPersonFar { get; }
        Single CameraBoostFovOffsetNear { get; }
        Single CameraBoostFovOffsetFar { get; }
        Single CameraSpeedRatioZoomOffsetThirdPersonNear { get; }
        Single CameraSpeedRatioZoomOffsetThirdPersonFar { get; }
        Single CameraSpeedPidPValue { get; }
        Single CameraSpeedPidIValue { get; }
        Single CameraSpeedPidDValue { get; }
        Single CameraFovBlendFactorAiming { get; }
        Single CameraFovBlendFactorBoosting { get; }
        Single CameraPositionBlendFilteringFactor { get; }
        Single CameraPositionRLOffsetFirstPerson { get; }
        Single HandlingForwardBoostForceInWater { get; }
        Single WaterLinDamp { get; }
        Single WheelMaxFriction { get; }
        Single WaterBobAccelerationDeadZone { get; }
        Single WaterBobAccelerationPitch { get; }
        Single WaterBobAccelerationRoll { get; }
        Single WaterBobNaturalPitchPeriod { get; }
        Single WaterBobNaturalRollPeriod { get; }
        Single WaterBobNaturalAmplitude { get; }
        Single WaterBobTorquePitch { get; }
        Single WaterBobTorqueRoll { get; }
        Single ChassisLinearDamping { get; }
        Single SuspensionMaxVisualSpeedCompression { get; }
        Single SuspensionMaxVisualSpeedRelaxation { get; }
        Single SlideFactorGainGreaterThanThreshold { get; }
        Single SlideFactorLostLessThanOrEqualThreshold { get; }
        Single SlideFactorThreshold { get; }
        Single SlideFactorFrictionAtMax { get; }
        Single SlideFactorViscosityFrictionAtMax { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class VehicleConfigDataMixIn
    {
        public static void Clear(this IVehicleConfigData item)
        {
            ((VehicleConfigDataSetterCommon)((IVehicleConfigDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static VehicleConfigData.Mask<bool> GetEqualsMask(
            this IVehicleConfigDataGetter item,
            IVehicleConfigDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IVehicleConfigDataGetter item,
            string? name = null,
            VehicleConfigData.Mask<bool>? printMask = null)
        {
            return ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IVehicleConfigDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            VehicleConfigData.Mask<bool>? printMask = null)
        {
            ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IVehicleConfigDataGetter item,
            IVehicleConfigDataGetter rhs,
            VehicleConfigData.TranslationMask? equalsMask = null)
        {
            return ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IVehicleConfigData lhs,
            IVehicleConfigDataGetter rhs)
        {
            ((VehicleConfigDataSetterTranslationCommon)((IVehicleConfigDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IVehicleConfigData lhs,
            IVehicleConfigDataGetter rhs,
            VehicleConfigData.TranslationMask? copyMask = null)
        {
            ((VehicleConfigDataSetterTranslationCommon)((IVehicleConfigDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IVehicleConfigData lhs,
            IVehicleConfigDataGetter rhs,
            out VehicleConfigData.ErrorMask errorMask,
            VehicleConfigData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((VehicleConfigDataSetterTranslationCommon)((IVehicleConfigDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = VehicleConfigData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IVehicleConfigData lhs,
            IVehicleConfigDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((VehicleConfigDataSetterTranslationCommon)((IVehicleConfigDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static VehicleConfigData DeepCopy(
            this IVehicleConfigDataGetter item,
            VehicleConfigData.TranslationMask? copyMask = null)
        {
            return ((VehicleConfigDataSetterTranslationCommon)((IVehicleConfigDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static VehicleConfigData DeepCopy(
            this IVehicleConfigDataGetter item,
            out VehicleConfigData.ErrorMask errorMask,
            VehicleConfigData.TranslationMask? copyMask = null)
        {
            return ((VehicleConfigDataSetterTranslationCommon)((IVehicleConfigDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static VehicleConfigData DeepCopy(
            this IVehicleConfigDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((VehicleConfigDataSetterTranslationCommon)((IVehicleConfigDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IVehicleConfigData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((VehicleConfigDataSetterCommon)((IVehicleConfigDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum VehicleConfigData_FieldIndex
    {
        NodeNamesSuspensionFrontLeft = 0,
        NodeNamesSuspensionFrontRight = 1,
        NodeNamesSuspensionRearLeft = 2,
        NodeNamesSuspensionRearRight = 3,
        NodeNamesWheelFrontLeft = 4,
        NodeNamesWheelFrontRight = 5,
        NodeNamesWheelRearLeft = 6,
        NodeNamesWheelRearRight = 7,
        ChassisForwardAxis = 8,
        ChassisUpAxis = 9,
        ChassisVehicleMass = 10,
        ChassisFrictionEqualizer = 11,
        ChassisTorqueRoll = 12,
        ChassisTorquePitch = 13,
        ChassisTorqueYaw = 14,
        ChassisInertiaYaw = 15,
        ChassisInertiaRoll = 16,
        ChassisInertialPitch = 17,
        ChassisExtraTorque = 18,
        ChassisMaxVelocityPositionalFriction = 19,
        ChassisFriction = 20,
        ChassisRestitution = 21,
        ChassisComOffsetForward = 22,
        ChassisComOffsetUp = 23,
        WheelSlipAngle = 24,
        WheelFriction = 25,
        WheelScale = 26,
        WheelMass = 27,
        WheelViscosityFriction = 28,
        WheelCastType = 29,
        SuspensionStrength = 30,
        SuspensionDampingCompression = 31,
        SuspensionDampingRelaxation = 32,
        SuspensionLength = 33,
        SuspensionOffsetsUpFront = 34,
        SuspensionOffsetsUpBack = 35,
        SuspensionOffsetsFront = 36,
        SuspensionOffsetsBack = 37,
        SuspensionOffsetsLateral = 38,
        SteeringMaxAngle = 39,
        SteeringMaxAngleAtSpeed = 40,
        EngineMaxSpeed = 41,
        EngineMaxTorque = 42,
        EngineMinRpm = 43,
        EngineMaxRpm = 44,
        EngineOptRpm = 45,
        EngineTorqueMinRpm = 46,
        EngineTorqueMaxRpm = 47,
        EngineResistanceMinRpm = 48,
        EngineResistanceMaxRpm = 49,
        EngineResistanceOptRpm = 50,
        TransmissionDownshiftRpm = 51,
        TransmissionUpshiftRpm = 52,
        TransmissionClutchDelayTime = 53,
        TransmissionGearRatioReverse = 54,
        TransmissionGearRatioFirst = 55,
        TransmissionGearRatioSecond = 56,
        TransmissionGearRatioThird = 57,
        TransmissionGearRatioFourth = 58,
        TransmissionTorqueRatioFrontWheels = 59,
        TransmissionTorqueRatioBackWheels = 60,
        BrakesMaxTorque = 61,
        BrakesMinPedalInputToBlock = 62,
        BrakesWheelsMinTimeToBlock = 63,
        AerodynamicsAirDensity = 64,
        AerodynamicsFrontArea = 65,
        AerodynamicsDragCoefficient = 66,
        AerodynamicsLiftCoefficient = 67,
        AerodynamicsExtraGravityMultiplier = 68,
        VelocityDampingNormalSpin = 69,
        VelocityDampingCollisionSpin = 70,
        VelocityDampingCollisionThreshold = 71,
        HandlingReorientStrength = 72,
        HandlingReorientDamping = 73,
        HandlingVerticalBoostForce = 74,
        HandlingForwardBoostForce = 75,
        HandlingBoostMaxVelocity = 76,
        HandlingBoostDuration = 77,
        HandlingVerticalBoostDuration = 78,
        HandlingBoostRechargeDelay = 79,
        HandlingBoostRechargeDuration = 80,
        WaterStrengthFront = 81,
        WaterStrengthBack = 82,
        WaterDampFront = 83,
        WaterDampBack = 84,
        WaterDrive = 85,
        WaterRotationDamp = 86,
        BumperEnable = 87,
        BumperForward = 88,
        BumperUp = 89,
        BumperWidth = 90,
        BumperRadius = 91,
        CollisionDampingAngular = 92,
        CollisionMinSlopeCos = 93,
        ControlsSteeringPidThirdPersonPValue = 94,
        ControlsSteeringPidThirdPersonIValue = 95,
        ControlsSteeringPidThirdPersonDValue = 96,
        ControlsSteeringPidFirstPersonPValue = 97,
        ControlsSteeringPidFirstPersonIValue = 98,
        ControlsSteeringPidFirstPersonDValue = 99,
        Unknown1 = 100,
        Unknown2 = 101,
        Unknown3 = 102,
        Unknown4 = 103,
        Unknown5 = 104,
        Unknown6 = 105,
        CameraBaseZoomFirstPerson = 106,
        CameraBaseZoomThirdPersonNear = 107,
        CameraBaseZoomThirdPersonFar = 108,
        CameraBaseHeightFirstPerson = 109,
        CameraBaseHeightThirdPersonNear = 110,
        CameraBaseHeightThirdPersonFar = 111,
        CameraBaseFovFirstPerson = 112,
        CameraBaseFovThirdPersonNear = 113,
        CameraBaseFovThirdPersonFar = 114,
        CameraBoostFovOffsetNear = 115,
        CameraBoostFovOffsetFar = 116,
        CameraSpeedRatioZoomOffsetThirdPersonNear = 117,
        CameraSpeedRatioZoomOffsetThirdPersonFar = 118,
        CameraSpeedPidPValue = 119,
        CameraSpeedPidIValue = 120,
        CameraSpeedPidDValue = 121,
        CameraFovBlendFactorAiming = 122,
        CameraFovBlendFactorBoosting = 123,
        CameraPositionBlendFilteringFactor = 124,
        CameraPositionRLOffsetFirstPerson = 125,
        HandlingForwardBoostForceInWater = 126,
        WaterLinDamp = 127,
        WheelMaxFriction = 128,
        WaterBobAccelerationDeadZone = 129,
        WaterBobAccelerationPitch = 130,
        WaterBobAccelerationRoll = 131,
        WaterBobNaturalPitchPeriod = 132,
        WaterBobNaturalRollPeriod = 133,
        WaterBobNaturalAmplitude = 134,
        WaterBobTorquePitch = 135,
        WaterBobTorqueRoll = 136,
        ChassisLinearDamping = 137,
        SuspensionMaxVisualSpeedCompression = 138,
        SuspensionMaxVisualSpeedRelaxation = 139,
        SlideFactorGainGreaterThanThreshold = 140,
        SlideFactorLostLessThanOrEqualThreshold = 141,
        SlideFactorThreshold = 142,
        SlideFactorFrictionAtMax = 143,
        SlideFactorViscosityFrictionAtMax = 144,
    }
    #endregion

    #region Registration
    internal partial class VehicleConfigData_Registration : ILoquiRegistration
    {
        public static readonly VehicleConfigData_Registration Instance = new VehicleConfigData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 145;

        public const ushort FieldCount = 145;

        public static readonly Type MaskType = typeof(VehicleConfigData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(VehicleConfigData.ErrorMask);

        public static readonly Type ClassType = typeof(VehicleConfigData);

        public static readonly Type GetterType = typeof(IVehicleConfigDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IVehicleConfigData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.VehicleConfigData";

        public const string Name = "VehicleConfigData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.VCCD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.VCCD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(VehicleConfigDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class VehicleConfigDataSetterCommon
    {
        public static readonly VehicleConfigDataSetterCommon Instance = new VehicleConfigDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IVehicleConfigData item)
        {
            ClearPartial();
            item.NodeNamesSuspensionFrontLeft = string.Empty;
            item.NodeNamesSuspensionFrontRight = string.Empty;
            item.NodeNamesSuspensionRearLeft = string.Empty;
            item.NodeNamesSuspensionRearRight = string.Empty;
            item.NodeNamesWheelFrontLeft = string.Empty;
            item.NodeNamesWheelFrontRight = string.Empty;
            item.NodeNamesWheelRearLeft = string.Empty;
            item.NodeNamesWheelRearRight = string.Empty;
            item.ChassisForwardAxis = default(UInt32);
            item.ChassisUpAxis = default(UInt32);
            item.ChassisVehicleMass = default(Single);
            item.ChassisFrictionEqualizer = default(Single);
            item.ChassisTorqueRoll = default(Single);
            item.ChassisTorquePitch = default(Single);
            item.ChassisTorqueYaw = default(Single);
            item.ChassisInertiaYaw = default(Single);
            item.ChassisInertiaRoll = default(Single);
            item.ChassisInertialPitch = default(Single);
            item.ChassisExtraTorque = default(Single);
            item.ChassisMaxVelocityPositionalFriction = default(Single);
            item.ChassisFriction = default(Single);
            item.ChassisRestitution = default(Single);
            item.ChassisComOffsetForward = default(Single);
            item.ChassisComOffsetUp = default(Single);
            item.WheelSlipAngle = default(Single);
            item.WheelFriction = default(Single);
            item.WheelScale = default(Single);
            item.WheelMass = default(Single);
            item.WheelViscosityFriction = default(Single);
            item.WheelCastType = default(Int32);
            item.SuspensionStrength = default(Single);
            item.SuspensionDampingCompression = default(Single);
            item.SuspensionDampingRelaxation = default(Single);
            item.SuspensionLength = default(Single);
            item.SuspensionOffsetsUpFront = default(Single);
            item.SuspensionOffsetsUpBack = default(Single);
            item.SuspensionOffsetsFront = default(Single);
            item.SuspensionOffsetsBack = default(Single);
            item.SuspensionOffsetsLateral = default(Single);
            item.SteeringMaxAngle = default(Single);
            item.SteeringMaxAngleAtSpeed = default(Single);
            item.EngineMaxSpeed = default(Single);
            item.EngineMaxTorque = default(Single);
            item.EngineMinRpm = default(Single);
            item.EngineMaxRpm = default(Single);
            item.EngineOptRpm = default(Single);
            item.EngineTorqueMinRpm = default(Single);
            item.EngineTorqueMaxRpm = default(Single);
            item.EngineResistanceMinRpm = default(Single);
            item.EngineResistanceMaxRpm = default(Single);
            item.EngineResistanceOptRpm = default(Single);
            item.TransmissionDownshiftRpm = default(Single);
            item.TransmissionUpshiftRpm = default(Single);
            item.TransmissionClutchDelayTime = default(Single);
            item.TransmissionGearRatioReverse = default(Single);
            item.TransmissionGearRatioFirst = default(Single);
            item.TransmissionGearRatioSecond = default(Single);
            item.TransmissionGearRatioThird = default(Single);
            item.TransmissionGearRatioFourth = default(Single);
            item.TransmissionTorqueRatioFrontWheels = default(Single);
            item.TransmissionTorqueRatioBackWheels = default(Single);
            item.BrakesMaxTorque = default(Single);
            item.BrakesMinPedalInputToBlock = default(Single);
            item.BrakesWheelsMinTimeToBlock = default(Single);
            item.AerodynamicsAirDensity = default(Single);
            item.AerodynamicsFrontArea = default(Single);
            item.AerodynamicsDragCoefficient = default(Single);
            item.AerodynamicsLiftCoefficient = default(Single);
            item.AerodynamicsExtraGravityMultiplier = default(Single);
            item.VelocityDampingNormalSpin = default(Single);
            item.VelocityDampingCollisionSpin = default(Single);
            item.VelocityDampingCollisionThreshold = default(Single);
            item.HandlingReorientStrength = default(Single);
            item.HandlingReorientDamping = default(Single);
            item.HandlingVerticalBoostForce = default(Single);
            item.HandlingForwardBoostForce = default(Single);
            item.HandlingBoostMaxVelocity = default(Single);
            item.HandlingBoostDuration = default(Single);
            item.HandlingVerticalBoostDuration = default(Single);
            item.HandlingBoostRechargeDelay = default(Single);
            item.HandlingBoostRechargeDuration = default(Single);
            item.WaterStrengthFront = default(Single);
            item.WaterStrengthBack = default(Single);
            item.WaterDampFront = default(Single);
            item.WaterDampBack = default(Single);
            item.WaterDrive = default(Single);
            item.WaterRotationDamp = default(Single);
            item.BumperEnable = default(Boolean);
            item.BumperForward = default(Single);
            item.BumperUp = default(Single);
            item.BumperWidth = default(Single);
            item.BumperRadius = default(Single);
            item.CollisionDampingAngular = default(Single);
            item.CollisionMinSlopeCos = default(Single);
            item.ControlsSteeringPidThirdPersonPValue = default(Single);
            item.ControlsSteeringPidThirdPersonIValue = default(Single);
            item.ControlsSteeringPidThirdPersonDValue = default(Single);
            item.ControlsSteeringPidFirstPersonPValue = default(Single);
            item.ControlsSteeringPidFirstPersonIValue = default(Single);
            item.ControlsSteeringPidFirstPersonDValue = default(Single);
            item.Unknown1 = default(Single);
            item.Unknown2 = default(Single);
            item.Unknown3 = default(Single);
            item.Unknown4 = default(Single);
            item.Unknown5 = default(Single);
            item.Unknown6 = default(Single);
            item.CameraBaseZoomFirstPerson = default(Single);
            item.CameraBaseZoomThirdPersonNear = default(Single);
            item.CameraBaseZoomThirdPersonFar = default(Single);
            item.CameraBaseHeightFirstPerson = default(Single);
            item.CameraBaseHeightThirdPersonNear = default(Single);
            item.CameraBaseHeightThirdPersonFar = default(Single);
            item.CameraBaseFovFirstPerson = default(Single);
            item.CameraBaseFovThirdPersonNear = default(Single);
            item.CameraBaseFovThirdPersonFar = default(Single);
            item.CameraBoostFovOffsetNear = default(Single);
            item.CameraBoostFovOffsetFar = default(Single);
            item.CameraSpeedRatioZoomOffsetThirdPersonNear = default(Single);
            item.CameraSpeedRatioZoomOffsetThirdPersonFar = default(Single);
            item.CameraSpeedPidPValue = default(Single);
            item.CameraSpeedPidIValue = default(Single);
            item.CameraSpeedPidDValue = default(Single);
            item.CameraFovBlendFactorAiming = default(Single);
            item.CameraFovBlendFactorBoosting = default(Single);
            item.CameraPositionBlendFilteringFactor = default(Single);
            item.CameraPositionRLOffsetFirstPerson = default(Single);
            item.HandlingForwardBoostForceInWater = default(Single);
            item.WaterLinDamp = default(Single);
            item.WheelMaxFriction = default(Single);
            item.WaterBobAccelerationDeadZone = default(Single);
            item.WaterBobAccelerationPitch = default(Single);
            item.WaterBobAccelerationRoll = default(Single);
            item.WaterBobNaturalPitchPeriod = default(Single);
            item.WaterBobNaturalRollPeriod = default(Single);
            item.WaterBobNaturalAmplitude = default(Single);
            item.WaterBobTorquePitch = default(Single);
            item.WaterBobTorqueRoll = default(Single);
            item.ChassisLinearDamping = default(Single);
            item.SuspensionMaxVisualSpeedCompression = default(Single);
            item.SuspensionMaxVisualSpeedRelaxation = default(Single);
            item.SlideFactorGainGreaterThanThreshold = default(Single);
            item.SlideFactorLostLessThanOrEqualThreshold = default(Single);
            item.SlideFactorThreshold = default(Single);
            item.SlideFactorFrictionAtMax = default(Single);
            item.SlideFactorViscosityFrictionAtMax = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(IVehicleConfigData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IVehicleConfigData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.VCCD),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: VehicleConfigDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class VehicleConfigDataCommon
    {
        public static readonly VehicleConfigDataCommon Instance = new VehicleConfigDataCommon();

        public VehicleConfigData.Mask<bool> GetEqualsMask(
            IVehicleConfigDataGetter item,
            IVehicleConfigDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new VehicleConfigData.Mask<bool>(false);
            ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IVehicleConfigDataGetter item,
            IVehicleConfigDataGetter rhs,
            VehicleConfigData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.NodeNamesSuspensionFrontLeft = string.Equals(item.NodeNamesSuspensionFrontLeft, rhs.NodeNamesSuspensionFrontLeft);
            ret.NodeNamesSuspensionFrontRight = string.Equals(item.NodeNamesSuspensionFrontRight, rhs.NodeNamesSuspensionFrontRight);
            ret.NodeNamesSuspensionRearLeft = string.Equals(item.NodeNamesSuspensionRearLeft, rhs.NodeNamesSuspensionRearLeft);
            ret.NodeNamesSuspensionRearRight = string.Equals(item.NodeNamesSuspensionRearRight, rhs.NodeNamesSuspensionRearRight);
            ret.NodeNamesWheelFrontLeft = string.Equals(item.NodeNamesWheelFrontLeft, rhs.NodeNamesWheelFrontLeft);
            ret.NodeNamesWheelFrontRight = string.Equals(item.NodeNamesWheelFrontRight, rhs.NodeNamesWheelFrontRight);
            ret.NodeNamesWheelRearLeft = string.Equals(item.NodeNamesWheelRearLeft, rhs.NodeNamesWheelRearLeft);
            ret.NodeNamesWheelRearRight = string.Equals(item.NodeNamesWheelRearRight, rhs.NodeNamesWheelRearRight);
            ret.ChassisForwardAxis = item.ChassisForwardAxis == rhs.ChassisForwardAxis;
            ret.ChassisUpAxis = item.ChassisUpAxis == rhs.ChassisUpAxis;
            ret.ChassisVehicleMass = item.ChassisVehicleMass.EqualsWithin(rhs.ChassisVehicleMass);
            ret.ChassisFrictionEqualizer = item.ChassisFrictionEqualizer.EqualsWithin(rhs.ChassisFrictionEqualizer);
            ret.ChassisTorqueRoll = item.ChassisTorqueRoll.EqualsWithin(rhs.ChassisTorqueRoll);
            ret.ChassisTorquePitch = item.ChassisTorquePitch.EqualsWithin(rhs.ChassisTorquePitch);
            ret.ChassisTorqueYaw = item.ChassisTorqueYaw.EqualsWithin(rhs.ChassisTorqueYaw);
            ret.ChassisInertiaYaw = item.ChassisInertiaYaw.EqualsWithin(rhs.ChassisInertiaYaw);
            ret.ChassisInertiaRoll = item.ChassisInertiaRoll.EqualsWithin(rhs.ChassisInertiaRoll);
            ret.ChassisInertialPitch = item.ChassisInertialPitch.EqualsWithin(rhs.ChassisInertialPitch);
            ret.ChassisExtraTorque = item.ChassisExtraTorque.EqualsWithin(rhs.ChassisExtraTorque);
            ret.ChassisMaxVelocityPositionalFriction = item.ChassisMaxVelocityPositionalFriction.EqualsWithin(rhs.ChassisMaxVelocityPositionalFriction);
            ret.ChassisFriction = item.ChassisFriction.EqualsWithin(rhs.ChassisFriction);
            ret.ChassisRestitution = item.ChassisRestitution.EqualsWithin(rhs.ChassisRestitution);
            ret.ChassisComOffsetForward = item.ChassisComOffsetForward.EqualsWithin(rhs.ChassisComOffsetForward);
            ret.ChassisComOffsetUp = item.ChassisComOffsetUp.EqualsWithin(rhs.ChassisComOffsetUp);
            ret.WheelSlipAngle = item.WheelSlipAngle.EqualsWithin(rhs.WheelSlipAngle);
            ret.WheelFriction = item.WheelFriction.EqualsWithin(rhs.WheelFriction);
            ret.WheelScale = item.WheelScale.EqualsWithin(rhs.WheelScale);
            ret.WheelMass = item.WheelMass.EqualsWithin(rhs.WheelMass);
            ret.WheelViscosityFriction = item.WheelViscosityFriction.EqualsWithin(rhs.WheelViscosityFriction);
            ret.WheelCastType = item.WheelCastType == rhs.WheelCastType;
            ret.SuspensionStrength = item.SuspensionStrength.EqualsWithin(rhs.SuspensionStrength);
            ret.SuspensionDampingCompression = item.SuspensionDampingCompression.EqualsWithin(rhs.SuspensionDampingCompression);
            ret.SuspensionDampingRelaxation = item.SuspensionDampingRelaxation.EqualsWithin(rhs.SuspensionDampingRelaxation);
            ret.SuspensionLength = item.SuspensionLength.EqualsWithin(rhs.SuspensionLength);
            ret.SuspensionOffsetsUpFront = item.SuspensionOffsetsUpFront.EqualsWithin(rhs.SuspensionOffsetsUpFront);
            ret.SuspensionOffsetsUpBack = item.SuspensionOffsetsUpBack.EqualsWithin(rhs.SuspensionOffsetsUpBack);
            ret.SuspensionOffsetsFront = item.SuspensionOffsetsFront.EqualsWithin(rhs.SuspensionOffsetsFront);
            ret.SuspensionOffsetsBack = item.SuspensionOffsetsBack.EqualsWithin(rhs.SuspensionOffsetsBack);
            ret.SuspensionOffsetsLateral = item.SuspensionOffsetsLateral.EqualsWithin(rhs.SuspensionOffsetsLateral);
            ret.SteeringMaxAngle = item.SteeringMaxAngle.EqualsWithin(rhs.SteeringMaxAngle);
            ret.SteeringMaxAngleAtSpeed = item.SteeringMaxAngleAtSpeed.EqualsWithin(rhs.SteeringMaxAngleAtSpeed);
            ret.EngineMaxSpeed = item.EngineMaxSpeed.EqualsWithin(rhs.EngineMaxSpeed);
            ret.EngineMaxTorque = item.EngineMaxTorque.EqualsWithin(rhs.EngineMaxTorque);
            ret.EngineMinRpm = item.EngineMinRpm.EqualsWithin(rhs.EngineMinRpm);
            ret.EngineMaxRpm = item.EngineMaxRpm.EqualsWithin(rhs.EngineMaxRpm);
            ret.EngineOptRpm = item.EngineOptRpm.EqualsWithin(rhs.EngineOptRpm);
            ret.EngineTorqueMinRpm = item.EngineTorqueMinRpm.EqualsWithin(rhs.EngineTorqueMinRpm);
            ret.EngineTorqueMaxRpm = item.EngineTorqueMaxRpm.EqualsWithin(rhs.EngineTorqueMaxRpm);
            ret.EngineResistanceMinRpm = item.EngineResistanceMinRpm.EqualsWithin(rhs.EngineResistanceMinRpm);
            ret.EngineResistanceMaxRpm = item.EngineResistanceMaxRpm.EqualsWithin(rhs.EngineResistanceMaxRpm);
            ret.EngineResistanceOptRpm = item.EngineResistanceOptRpm.EqualsWithin(rhs.EngineResistanceOptRpm);
            ret.TransmissionDownshiftRpm = item.TransmissionDownshiftRpm.EqualsWithin(rhs.TransmissionDownshiftRpm);
            ret.TransmissionUpshiftRpm = item.TransmissionUpshiftRpm.EqualsWithin(rhs.TransmissionUpshiftRpm);
            ret.TransmissionClutchDelayTime = item.TransmissionClutchDelayTime.EqualsWithin(rhs.TransmissionClutchDelayTime);
            ret.TransmissionGearRatioReverse = item.TransmissionGearRatioReverse.EqualsWithin(rhs.TransmissionGearRatioReverse);
            ret.TransmissionGearRatioFirst = item.TransmissionGearRatioFirst.EqualsWithin(rhs.TransmissionGearRatioFirst);
            ret.TransmissionGearRatioSecond = item.TransmissionGearRatioSecond.EqualsWithin(rhs.TransmissionGearRatioSecond);
            ret.TransmissionGearRatioThird = item.TransmissionGearRatioThird.EqualsWithin(rhs.TransmissionGearRatioThird);
            ret.TransmissionGearRatioFourth = item.TransmissionGearRatioFourth.EqualsWithin(rhs.TransmissionGearRatioFourth);
            ret.TransmissionTorqueRatioFrontWheels = item.TransmissionTorqueRatioFrontWheels.EqualsWithin(rhs.TransmissionTorqueRatioFrontWheels);
            ret.TransmissionTorqueRatioBackWheels = item.TransmissionTorqueRatioBackWheels.EqualsWithin(rhs.TransmissionTorqueRatioBackWheels);
            ret.BrakesMaxTorque = item.BrakesMaxTorque.EqualsWithin(rhs.BrakesMaxTorque);
            ret.BrakesMinPedalInputToBlock = item.BrakesMinPedalInputToBlock.EqualsWithin(rhs.BrakesMinPedalInputToBlock);
            ret.BrakesWheelsMinTimeToBlock = item.BrakesWheelsMinTimeToBlock.EqualsWithin(rhs.BrakesWheelsMinTimeToBlock);
            ret.AerodynamicsAirDensity = item.AerodynamicsAirDensity.EqualsWithin(rhs.AerodynamicsAirDensity);
            ret.AerodynamicsFrontArea = item.AerodynamicsFrontArea.EqualsWithin(rhs.AerodynamicsFrontArea);
            ret.AerodynamicsDragCoefficient = item.AerodynamicsDragCoefficient.EqualsWithin(rhs.AerodynamicsDragCoefficient);
            ret.AerodynamicsLiftCoefficient = item.AerodynamicsLiftCoefficient.EqualsWithin(rhs.AerodynamicsLiftCoefficient);
            ret.AerodynamicsExtraGravityMultiplier = item.AerodynamicsExtraGravityMultiplier.EqualsWithin(rhs.AerodynamicsExtraGravityMultiplier);
            ret.VelocityDampingNormalSpin = item.VelocityDampingNormalSpin.EqualsWithin(rhs.VelocityDampingNormalSpin);
            ret.VelocityDampingCollisionSpin = item.VelocityDampingCollisionSpin.EqualsWithin(rhs.VelocityDampingCollisionSpin);
            ret.VelocityDampingCollisionThreshold = item.VelocityDampingCollisionThreshold.EqualsWithin(rhs.VelocityDampingCollisionThreshold);
            ret.HandlingReorientStrength = item.HandlingReorientStrength.EqualsWithin(rhs.HandlingReorientStrength);
            ret.HandlingReorientDamping = item.HandlingReorientDamping.EqualsWithin(rhs.HandlingReorientDamping);
            ret.HandlingVerticalBoostForce = item.HandlingVerticalBoostForce.EqualsWithin(rhs.HandlingVerticalBoostForce);
            ret.HandlingForwardBoostForce = item.HandlingForwardBoostForce.EqualsWithin(rhs.HandlingForwardBoostForce);
            ret.HandlingBoostMaxVelocity = item.HandlingBoostMaxVelocity.EqualsWithin(rhs.HandlingBoostMaxVelocity);
            ret.HandlingBoostDuration = item.HandlingBoostDuration.EqualsWithin(rhs.HandlingBoostDuration);
            ret.HandlingVerticalBoostDuration = item.HandlingVerticalBoostDuration.EqualsWithin(rhs.HandlingVerticalBoostDuration);
            ret.HandlingBoostRechargeDelay = item.HandlingBoostRechargeDelay.EqualsWithin(rhs.HandlingBoostRechargeDelay);
            ret.HandlingBoostRechargeDuration = item.HandlingBoostRechargeDuration.EqualsWithin(rhs.HandlingBoostRechargeDuration);
            ret.WaterStrengthFront = item.WaterStrengthFront.EqualsWithin(rhs.WaterStrengthFront);
            ret.WaterStrengthBack = item.WaterStrengthBack.EqualsWithin(rhs.WaterStrengthBack);
            ret.WaterDampFront = item.WaterDampFront.EqualsWithin(rhs.WaterDampFront);
            ret.WaterDampBack = item.WaterDampBack.EqualsWithin(rhs.WaterDampBack);
            ret.WaterDrive = item.WaterDrive.EqualsWithin(rhs.WaterDrive);
            ret.WaterRotationDamp = item.WaterRotationDamp.EqualsWithin(rhs.WaterRotationDamp);
            ret.BumperEnable = item.BumperEnable == rhs.BumperEnable;
            ret.BumperForward = item.BumperForward.EqualsWithin(rhs.BumperForward);
            ret.BumperUp = item.BumperUp.EqualsWithin(rhs.BumperUp);
            ret.BumperWidth = item.BumperWidth.EqualsWithin(rhs.BumperWidth);
            ret.BumperRadius = item.BumperRadius.EqualsWithin(rhs.BumperRadius);
            ret.CollisionDampingAngular = item.CollisionDampingAngular.EqualsWithin(rhs.CollisionDampingAngular);
            ret.CollisionMinSlopeCos = item.CollisionMinSlopeCos.EqualsWithin(rhs.CollisionMinSlopeCos);
            ret.ControlsSteeringPidThirdPersonPValue = item.ControlsSteeringPidThirdPersonPValue.EqualsWithin(rhs.ControlsSteeringPidThirdPersonPValue);
            ret.ControlsSteeringPidThirdPersonIValue = item.ControlsSteeringPidThirdPersonIValue.EqualsWithin(rhs.ControlsSteeringPidThirdPersonIValue);
            ret.ControlsSteeringPidThirdPersonDValue = item.ControlsSteeringPidThirdPersonDValue.EqualsWithin(rhs.ControlsSteeringPidThirdPersonDValue);
            ret.ControlsSteeringPidFirstPersonPValue = item.ControlsSteeringPidFirstPersonPValue.EqualsWithin(rhs.ControlsSteeringPidFirstPersonPValue);
            ret.ControlsSteeringPidFirstPersonIValue = item.ControlsSteeringPidFirstPersonIValue.EqualsWithin(rhs.ControlsSteeringPidFirstPersonIValue);
            ret.ControlsSteeringPidFirstPersonDValue = item.ControlsSteeringPidFirstPersonDValue.EqualsWithin(rhs.ControlsSteeringPidFirstPersonDValue);
            ret.Unknown1 = item.Unknown1.EqualsWithin(rhs.Unknown1);
            ret.Unknown2 = item.Unknown2.EqualsWithin(rhs.Unknown2);
            ret.Unknown3 = item.Unknown3.EqualsWithin(rhs.Unknown3);
            ret.Unknown4 = item.Unknown4.EqualsWithin(rhs.Unknown4);
            ret.Unknown5 = item.Unknown5.EqualsWithin(rhs.Unknown5);
            ret.Unknown6 = item.Unknown6.EqualsWithin(rhs.Unknown6);
            ret.CameraBaseZoomFirstPerson = item.CameraBaseZoomFirstPerson.EqualsWithin(rhs.CameraBaseZoomFirstPerson);
            ret.CameraBaseZoomThirdPersonNear = item.CameraBaseZoomThirdPersonNear.EqualsWithin(rhs.CameraBaseZoomThirdPersonNear);
            ret.CameraBaseZoomThirdPersonFar = item.CameraBaseZoomThirdPersonFar.EqualsWithin(rhs.CameraBaseZoomThirdPersonFar);
            ret.CameraBaseHeightFirstPerson = item.CameraBaseHeightFirstPerson.EqualsWithin(rhs.CameraBaseHeightFirstPerson);
            ret.CameraBaseHeightThirdPersonNear = item.CameraBaseHeightThirdPersonNear.EqualsWithin(rhs.CameraBaseHeightThirdPersonNear);
            ret.CameraBaseHeightThirdPersonFar = item.CameraBaseHeightThirdPersonFar.EqualsWithin(rhs.CameraBaseHeightThirdPersonFar);
            ret.CameraBaseFovFirstPerson = item.CameraBaseFovFirstPerson.EqualsWithin(rhs.CameraBaseFovFirstPerson);
            ret.CameraBaseFovThirdPersonNear = item.CameraBaseFovThirdPersonNear.EqualsWithin(rhs.CameraBaseFovThirdPersonNear);
            ret.CameraBaseFovThirdPersonFar = item.CameraBaseFovThirdPersonFar.EqualsWithin(rhs.CameraBaseFovThirdPersonFar);
            ret.CameraBoostFovOffsetNear = item.CameraBoostFovOffsetNear.EqualsWithin(rhs.CameraBoostFovOffsetNear);
            ret.CameraBoostFovOffsetFar = item.CameraBoostFovOffsetFar.EqualsWithin(rhs.CameraBoostFovOffsetFar);
            ret.CameraSpeedRatioZoomOffsetThirdPersonNear = item.CameraSpeedRatioZoomOffsetThirdPersonNear.EqualsWithin(rhs.CameraSpeedRatioZoomOffsetThirdPersonNear);
            ret.CameraSpeedRatioZoomOffsetThirdPersonFar = item.CameraSpeedRatioZoomOffsetThirdPersonFar.EqualsWithin(rhs.CameraSpeedRatioZoomOffsetThirdPersonFar);
            ret.CameraSpeedPidPValue = item.CameraSpeedPidPValue.EqualsWithin(rhs.CameraSpeedPidPValue);
            ret.CameraSpeedPidIValue = item.CameraSpeedPidIValue.EqualsWithin(rhs.CameraSpeedPidIValue);
            ret.CameraSpeedPidDValue = item.CameraSpeedPidDValue.EqualsWithin(rhs.CameraSpeedPidDValue);
            ret.CameraFovBlendFactorAiming = item.CameraFovBlendFactorAiming.EqualsWithin(rhs.CameraFovBlendFactorAiming);
            ret.CameraFovBlendFactorBoosting = item.CameraFovBlendFactorBoosting.EqualsWithin(rhs.CameraFovBlendFactorBoosting);
            ret.CameraPositionBlendFilteringFactor = item.CameraPositionBlendFilteringFactor.EqualsWithin(rhs.CameraPositionBlendFilteringFactor);
            ret.CameraPositionRLOffsetFirstPerson = item.CameraPositionRLOffsetFirstPerson.EqualsWithin(rhs.CameraPositionRLOffsetFirstPerson);
            ret.HandlingForwardBoostForceInWater = item.HandlingForwardBoostForceInWater.EqualsWithin(rhs.HandlingForwardBoostForceInWater);
            ret.WaterLinDamp = item.WaterLinDamp.EqualsWithin(rhs.WaterLinDamp);
            ret.WheelMaxFriction = item.WheelMaxFriction.EqualsWithin(rhs.WheelMaxFriction);
            ret.WaterBobAccelerationDeadZone = item.WaterBobAccelerationDeadZone.EqualsWithin(rhs.WaterBobAccelerationDeadZone);
            ret.WaterBobAccelerationPitch = item.WaterBobAccelerationPitch.EqualsWithin(rhs.WaterBobAccelerationPitch);
            ret.WaterBobAccelerationRoll = item.WaterBobAccelerationRoll.EqualsWithin(rhs.WaterBobAccelerationRoll);
            ret.WaterBobNaturalPitchPeriod = item.WaterBobNaturalPitchPeriod.EqualsWithin(rhs.WaterBobNaturalPitchPeriod);
            ret.WaterBobNaturalRollPeriod = item.WaterBobNaturalRollPeriod.EqualsWithin(rhs.WaterBobNaturalRollPeriod);
            ret.WaterBobNaturalAmplitude = item.WaterBobNaturalAmplitude.EqualsWithin(rhs.WaterBobNaturalAmplitude);
            ret.WaterBobTorquePitch = item.WaterBobTorquePitch.EqualsWithin(rhs.WaterBobTorquePitch);
            ret.WaterBobTorqueRoll = item.WaterBobTorqueRoll.EqualsWithin(rhs.WaterBobTorqueRoll);
            ret.ChassisLinearDamping = item.ChassisLinearDamping.EqualsWithin(rhs.ChassisLinearDamping);
            ret.SuspensionMaxVisualSpeedCompression = item.SuspensionMaxVisualSpeedCompression.EqualsWithin(rhs.SuspensionMaxVisualSpeedCompression);
            ret.SuspensionMaxVisualSpeedRelaxation = item.SuspensionMaxVisualSpeedRelaxation.EqualsWithin(rhs.SuspensionMaxVisualSpeedRelaxation);
            ret.SlideFactorGainGreaterThanThreshold = item.SlideFactorGainGreaterThanThreshold.EqualsWithin(rhs.SlideFactorGainGreaterThanThreshold);
            ret.SlideFactorLostLessThanOrEqualThreshold = item.SlideFactorLostLessThanOrEqualThreshold.EqualsWithin(rhs.SlideFactorLostLessThanOrEqualThreshold);
            ret.SlideFactorThreshold = item.SlideFactorThreshold.EqualsWithin(rhs.SlideFactorThreshold);
            ret.SlideFactorFrictionAtMax = item.SlideFactorFrictionAtMax.EqualsWithin(rhs.SlideFactorFrictionAtMax);
            ret.SlideFactorViscosityFrictionAtMax = item.SlideFactorViscosityFrictionAtMax.EqualsWithin(rhs.SlideFactorViscosityFrictionAtMax);
        }
        
        public string Print(
            IVehicleConfigDataGetter item,
            string? name = null,
            VehicleConfigData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IVehicleConfigDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            VehicleConfigData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"VehicleConfigData =>");
            }
            else
            {
                sb.AppendLine($"{name} (VehicleConfigData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IVehicleConfigDataGetter item,
            StructuredStringBuilder sb,
            VehicleConfigData.Mask<bool>? printMask = null)
        {
            if (printMask?.NodeNamesSuspensionFrontLeft ?? true)
            {
                sb.AppendItem(item.NodeNamesSuspensionFrontLeft, "NodeNamesSuspensionFrontLeft");
            }
            if (printMask?.NodeNamesSuspensionFrontRight ?? true)
            {
                sb.AppendItem(item.NodeNamesSuspensionFrontRight, "NodeNamesSuspensionFrontRight");
            }
            if (printMask?.NodeNamesSuspensionRearLeft ?? true)
            {
                sb.AppendItem(item.NodeNamesSuspensionRearLeft, "NodeNamesSuspensionRearLeft");
            }
            if (printMask?.NodeNamesSuspensionRearRight ?? true)
            {
                sb.AppendItem(item.NodeNamesSuspensionRearRight, "NodeNamesSuspensionRearRight");
            }
            if (printMask?.NodeNamesWheelFrontLeft ?? true)
            {
                sb.AppendItem(item.NodeNamesWheelFrontLeft, "NodeNamesWheelFrontLeft");
            }
            if (printMask?.NodeNamesWheelFrontRight ?? true)
            {
                sb.AppendItem(item.NodeNamesWheelFrontRight, "NodeNamesWheelFrontRight");
            }
            if (printMask?.NodeNamesWheelRearLeft ?? true)
            {
                sb.AppendItem(item.NodeNamesWheelRearLeft, "NodeNamesWheelRearLeft");
            }
            if (printMask?.NodeNamesWheelRearRight ?? true)
            {
                sb.AppendItem(item.NodeNamesWheelRearRight, "NodeNamesWheelRearRight");
            }
            if (printMask?.ChassisForwardAxis ?? true)
            {
                sb.AppendItem(item.ChassisForwardAxis, "ChassisForwardAxis");
            }
            if (printMask?.ChassisUpAxis ?? true)
            {
                sb.AppendItem(item.ChassisUpAxis, "ChassisUpAxis");
            }
            if (printMask?.ChassisVehicleMass ?? true)
            {
                sb.AppendItem(item.ChassisVehicleMass, "ChassisVehicleMass");
            }
            if (printMask?.ChassisFrictionEqualizer ?? true)
            {
                sb.AppendItem(item.ChassisFrictionEqualizer, "ChassisFrictionEqualizer");
            }
            if (printMask?.ChassisTorqueRoll ?? true)
            {
                sb.AppendItem(item.ChassisTorqueRoll, "ChassisTorqueRoll");
            }
            if (printMask?.ChassisTorquePitch ?? true)
            {
                sb.AppendItem(item.ChassisTorquePitch, "ChassisTorquePitch");
            }
            if (printMask?.ChassisTorqueYaw ?? true)
            {
                sb.AppendItem(item.ChassisTorqueYaw, "ChassisTorqueYaw");
            }
            if (printMask?.ChassisInertiaYaw ?? true)
            {
                sb.AppendItem(item.ChassisInertiaYaw, "ChassisInertiaYaw");
            }
            if (printMask?.ChassisInertiaRoll ?? true)
            {
                sb.AppendItem(item.ChassisInertiaRoll, "ChassisInertiaRoll");
            }
            if (printMask?.ChassisInertialPitch ?? true)
            {
                sb.AppendItem(item.ChassisInertialPitch, "ChassisInertialPitch");
            }
            if (printMask?.ChassisExtraTorque ?? true)
            {
                sb.AppendItem(item.ChassisExtraTorque, "ChassisExtraTorque");
            }
            if (printMask?.ChassisMaxVelocityPositionalFriction ?? true)
            {
                sb.AppendItem(item.ChassisMaxVelocityPositionalFriction, "ChassisMaxVelocityPositionalFriction");
            }
            if (printMask?.ChassisFriction ?? true)
            {
                sb.AppendItem(item.ChassisFriction, "ChassisFriction");
            }
            if (printMask?.ChassisRestitution ?? true)
            {
                sb.AppendItem(item.ChassisRestitution, "ChassisRestitution");
            }
            if (printMask?.ChassisComOffsetForward ?? true)
            {
                sb.AppendItem(item.ChassisComOffsetForward, "ChassisComOffsetForward");
            }
            if (printMask?.ChassisComOffsetUp ?? true)
            {
                sb.AppendItem(item.ChassisComOffsetUp, "ChassisComOffsetUp");
            }
            if (printMask?.WheelSlipAngle ?? true)
            {
                sb.AppendItem(item.WheelSlipAngle, "WheelSlipAngle");
            }
            if (printMask?.WheelFriction ?? true)
            {
                sb.AppendItem(item.WheelFriction, "WheelFriction");
            }
            if (printMask?.WheelScale ?? true)
            {
                sb.AppendItem(item.WheelScale, "WheelScale");
            }
            if (printMask?.WheelMass ?? true)
            {
                sb.AppendItem(item.WheelMass, "WheelMass");
            }
            if (printMask?.WheelViscosityFriction ?? true)
            {
                sb.AppendItem(item.WheelViscosityFriction, "WheelViscosityFriction");
            }
            if (printMask?.WheelCastType ?? true)
            {
                sb.AppendItem(item.WheelCastType, "WheelCastType");
            }
            if (printMask?.SuspensionStrength ?? true)
            {
                sb.AppendItem(item.SuspensionStrength, "SuspensionStrength");
            }
            if (printMask?.SuspensionDampingCompression ?? true)
            {
                sb.AppendItem(item.SuspensionDampingCompression, "SuspensionDampingCompression");
            }
            if (printMask?.SuspensionDampingRelaxation ?? true)
            {
                sb.AppendItem(item.SuspensionDampingRelaxation, "SuspensionDampingRelaxation");
            }
            if (printMask?.SuspensionLength ?? true)
            {
                sb.AppendItem(item.SuspensionLength, "SuspensionLength");
            }
            if (printMask?.SuspensionOffsetsUpFront ?? true)
            {
                sb.AppendItem(item.SuspensionOffsetsUpFront, "SuspensionOffsetsUpFront");
            }
            if (printMask?.SuspensionOffsetsUpBack ?? true)
            {
                sb.AppendItem(item.SuspensionOffsetsUpBack, "SuspensionOffsetsUpBack");
            }
            if (printMask?.SuspensionOffsetsFront ?? true)
            {
                sb.AppendItem(item.SuspensionOffsetsFront, "SuspensionOffsetsFront");
            }
            if (printMask?.SuspensionOffsetsBack ?? true)
            {
                sb.AppendItem(item.SuspensionOffsetsBack, "SuspensionOffsetsBack");
            }
            if (printMask?.SuspensionOffsetsLateral ?? true)
            {
                sb.AppendItem(item.SuspensionOffsetsLateral, "SuspensionOffsetsLateral");
            }
            if (printMask?.SteeringMaxAngle ?? true)
            {
                sb.AppendItem(item.SteeringMaxAngle, "SteeringMaxAngle");
            }
            if (printMask?.SteeringMaxAngleAtSpeed ?? true)
            {
                sb.AppendItem(item.SteeringMaxAngleAtSpeed, "SteeringMaxAngleAtSpeed");
            }
            if (printMask?.EngineMaxSpeed ?? true)
            {
                sb.AppendItem(item.EngineMaxSpeed, "EngineMaxSpeed");
            }
            if (printMask?.EngineMaxTorque ?? true)
            {
                sb.AppendItem(item.EngineMaxTorque, "EngineMaxTorque");
            }
            if (printMask?.EngineMinRpm ?? true)
            {
                sb.AppendItem(item.EngineMinRpm, "EngineMinRpm");
            }
            if (printMask?.EngineMaxRpm ?? true)
            {
                sb.AppendItem(item.EngineMaxRpm, "EngineMaxRpm");
            }
            if (printMask?.EngineOptRpm ?? true)
            {
                sb.AppendItem(item.EngineOptRpm, "EngineOptRpm");
            }
            if (printMask?.EngineTorqueMinRpm ?? true)
            {
                sb.AppendItem(item.EngineTorqueMinRpm, "EngineTorqueMinRpm");
            }
            if (printMask?.EngineTorqueMaxRpm ?? true)
            {
                sb.AppendItem(item.EngineTorqueMaxRpm, "EngineTorqueMaxRpm");
            }
            if (printMask?.EngineResistanceMinRpm ?? true)
            {
                sb.AppendItem(item.EngineResistanceMinRpm, "EngineResistanceMinRpm");
            }
            if (printMask?.EngineResistanceMaxRpm ?? true)
            {
                sb.AppendItem(item.EngineResistanceMaxRpm, "EngineResistanceMaxRpm");
            }
            if (printMask?.EngineResistanceOptRpm ?? true)
            {
                sb.AppendItem(item.EngineResistanceOptRpm, "EngineResistanceOptRpm");
            }
            if (printMask?.TransmissionDownshiftRpm ?? true)
            {
                sb.AppendItem(item.TransmissionDownshiftRpm, "TransmissionDownshiftRpm");
            }
            if (printMask?.TransmissionUpshiftRpm ?? true)
            {
                sb.AppendItem(item.TransmissionUpshiftRpm, "TransmissionUpshiftRpm");
            }
            if (printMask?.TransmissionClutchDelayTime ?? true)
            {
                sb.AppendItem(item.TransmissionClutchDelayTime, "TransmissionClutchDelayTime");
            }
            if (printMask?.TransmissionGearRatioReverse ?? true)
            {
                sb.AppendItem(item.TransmissionGearRatioReverse, "TransmissionGearRatioReverse");
            }
            if (printMask?.TransmissionGearRatioFirst ?? true)
            {
                sb.AppendItem(item.TransmissionGearRatioFirst, "TransmissionGearRatioFirst");
            }
            if (printMask?.TransmissionGearRatioSecond ?? true)
            {
                sb.AppendItem(item.TransmissionGearRatioSecond, "TransmissionGearRatioSecond");
            }
            if (printMask?.TransmissionGearRatioThird ?? true)
            {
                sb.AppendItem(item.TransmissionGearRatioThird, "TransmissionGearRatioThird");
            }
            if (printMask?.TransmissionGearRatioFourth ?? true)
            {
                sb.AppendItem(item.TransmissionGearRatioFourth, "TransmissionGearRatioFourth");
            }
            if (printMask?.TransmissionTorqueRatioFrontWheels ?? true)
            {
                sb.AppendItem(item.TransmissionTorqueRatioFrontWheels, "TransmissionTorqueRatioFrontWheels");
            }
            if (printMask?.TransmissionTorqueRatioBackWheels ?? true)
            {
                sb.AppendItem(item.TransmissionTorqueRatioBackWheels, "TransmissionTorqueRatioBackWheels");
            }
            if (printMask?.BrakesMaxTorque ?? true)
            {
                sb.AppendItem(item.BrakesMaxTorque, "BrakesMaxTorque");
            }
            if (printMask?.BrakesMinPedalInputToBlock ?? true)
            {
                sb.AppendItem(item.BrakesMinPedalInputToBlock, "BrakesMinPedalInputToBlock");
            }
            if (printMask?.BrakesWheelsMinTimeToBlock ?? true)
            {
                sb.AppendItem(item.BrakesWheelsMinTimeToBlock, "BrakesWheelsMinTimeToBlock");
            }
            if (printMask?.AerodynamicsAirDensity ?? true)
            {
                sb.AppendItem(item.AerodynamicsAirDensity, "AerodynamicsAirDensity");
            }
            if (printMask?.AerodynamicsFrontArea ?? true)
            {
                sb.AppendItem(item.AerodynamicsFrontArea, "AerodynamicsFrontArea");
            }
            if (printMask?.AerodynamicsDragCoefficient ?? true)
            {
                sb.AppendItem(item.AerodynamicsDragCoefficient, "AerodynamicsDragCoefficient");
            }
            if (printMask?.AerodynamicsLiftCoefficient ?? true)
            {
                sb.AppendItem(item.AerodynamicsLiftCoefficient, "AerodynamicsLiftCoefficient");
            }
            if (printMask?.AerodynamicsExtraGravityMultiplier ?? true)
            {
                sb.AppendItem(item.AerodynamicsExtraGravityMultiplier, "AerodynamicsExtraGravityMultiplier");
            }
            if (printMask?.VelocityDampingNormalSpin ?? true)
            {
                sb.AppendItem(item.VelocityDampingNormalSpin, "VelocityDampingNormalSpin");
            }
            if (printMask?.VelocityDampingCollisionSpin ?? true)
            {
                sb.AppendItem(item.VelocityDampingCollisionSpin, "VelocityDampingCollisionSpin");
            }
            if (printMask?.VelocityDampingCollisionThreshold ?? true)
            {
                sb.AppendItem(item.VelocityDampingCollisionThreshold, "VelocityDampingCollisionThreshold");
            }
            if (printMask?.HandlingReorientStrength ?? true)
            {
                sb.AppendItem(item.HandlingReorientStrength, "HandlingReorientStrength");
            }
            if (printMask?.HandlingReorientDamping ?? true)
            {
                sb.AppendItem(item.HandlingReorientDamping, "HandlingReorientDamping");
            }
            if (printMask?.HandlingVerticalBoostForce ?? true)
            {
                sb.AppendItem(item.HandlingVerticalBoostForce, "HandlingVerticalBoostForce");
            }
            if (printMask?.HandlingForwardBoostForce ?? true)
            {
                sb.AppendItem(item.HandlingForwardBoostForce, "HandlingForwardBoostForce");
            }
            if (printMask?.HandlingBoostMaxVelocity ?? true)
            {
                sb.AppendItem(item.HandlingBoostMaxVelocity, "HandlingBoostMaxVelocity");
            }
            if (printMask?.HandlingBoostDuration ?? true)
            {
                sb.AppendItem(item.HandlingBoostDuration, "HandlingBoostDuration");
            }
            if (printMask?.HandlingVerticalBoostDuration ?? true)
            {
                sb.AppendItem(item.HandlingVerticalBoostDuration, "HandlingVerticalBoostDuration");
            }
            if (printMask?.HandlingBoostRechargeDelay ?? true)
            {
                sb.AppendItem(item.HandlingBoostRechargeDelay, "HandlingBoostRechargeDelay");
            }
            if (printMask?.HandlingBoostRechargeDuration ?? true)
            {
                sb.AppendItem(item.HandlingBoostRechargeDuration, "HandlingBoostRechargeDuration");
            }
            if (printMask?.WaterStrengthFront ?? true)
            {
                sb.AppendItem(item.WaterStrengthFront, "WaterStrengthFront");
            }
            if (printMask?.WaterStrengthBack ?? true)
            {
                sb.AppendItem(item.WaterStrengthBack, "WaterStrengthBack");
            }
            if (printMask?.WaterDampFront ?? true)
            {
                sb.AppendItem(item.WaterDampFront, "WaterDampFront");
            }
            if (printMask?.WaterDampBack ?? true)
            {
                sb.AppendItem(item.WaterDampBack, "WaterDampBack");
            }
            if (printMask?.WaterDrive ?? true)
            {
                sb.AppendItem(item.WaterDrive, "WaterDrive");
            }
            if (printMask?.WaterRotationDamp ?? true)
            {
                sb.AppendItem(item.WaterRotationDamp, "WaterRotationDamp");
            }
            if (printMask?.BumperEnable ?? true)
            {
                sb.AppendItem(item.BumperEnable, "BumperEnable");
            }
            if (printMask?.BumperForward ?? true)
            {
                sb.AppendItem(item.BumperForward, "BumperForward");
            }
            if (printMask?.BumperUp ?? true)
            {
                sb.AppendItem(item.BumperUp, "BumperUp");
            }
            if (printMask?.BumperWidth ?? true)
            {
                sb.AppendItem(item.BumperWidth, "BumperWidth");
            }
            if (printMask?.BumperRadius ?? true)
            {
                sb.AppendItem(item.BumperRadius, "BumperRadius");
            }
            if (printMask?.CollisionDampingAngular ?? true)
            {
                sb.AppendItem(item.CollisionDampingAngular, "CollisionDampingAngular");
            }
            if (printMask?.CollisionMinSlopeCos ?? true)
            {
                sb.AppendItem(item.CollisionMinSlopeCos, "CollisionMinSlopeCos");
            }
            if (printMask?.ControlsSteeringPidThirdPersonPValue ?? true)
            {
                sb.AppendItem(item.ControlsSteeringPidThirdPersonPValue, "ControlsSteeringPidThirdPersonPValue");
            }
            if (printMask?.ControlsSteeringPidThirdPersonIValue ?? true)
            {
                sb.AppendItem(item.ControlsSteeringPidThirdPersonIValue, "ControlsSteeringPidThirdPersonIValue");
            }
            if (printMask?.ControlsSteeringPidThirdPersonDValue ?? true)
            {
                sb.AppendItem(item.ControlsSteeringPidThirdPersonDValue, "ControlsSteeringPidThirdPersonDValue");
            }
            if (printMask?.ControlsSteeringPidFirstPersonPValue ?? true)
            {
                sb.AppendItem(item.ControlsSteeringPidFirstPersonPValue, "ControlsSteeringPidFirstPersonPValue");
            }
            if (printMask?.ControlsSteeringPidFirstPersonIValue ?? true)
            {
                sb.AppendItem(item.ControlsSteeringPidFirstPersonIValue, "ControlsSteeringPidFirstPersonIValue");
            }
            if (printMask?.ControlsSteeringPidFirstPersonDValue ?? true)
            {
                sb.AppendItem(item.ControlsSteeringPidFirstPersonDValue, "ControlsSteeringPidFirstPersonDValue");
            }
            if (printMask?.Unknown1 ?? true)
            {
                sb.AppendItem(item.Unknown1, "Unknown1");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.Unknown3 ?? true)
            {
                sb.AppendItem(item.Unknown3, "Unknown3");
            }
            if (printMask?.Unknown4 ?? true)
            {
                sb.AppendItem(item.Unknown4, "Unknown4");
            }
            if (printMask?.Unknown5 ?? true)
            {
                sb.AppendItem(item.Unknown5, "Unknown5");
            }
            if (printMask?.Unknown6 ?? true)
            {
                sb.AppendItem(item.Unknown6, "Unknown6");
            }
            if (printMask?.CameraBaseZoomFirstPerson ?? true)
            {
                sb.AppendItem(item.CameraBaseZoomFirstPerson, "CameraBaseZoomFirstPerson");
            }
            if (printMask?.CameraBaseZoomThirdPersonNear ?? true)
            {
                sb.AppendItem(item.CameraBaseZoomThirdPersonNear, "CameraBaseZoomThirdPersonNear");
            }
            if (printMask?.CameraBaseZoomThirdPersonFar ?? true)
            {
                sb.AppendItem(item.CameraBaseZoomThirdPersonFar, "CameraBaseZoomThirdPersonFar");
            }
            if (printMask?.CameraBaseHeightFirstPerson ?? true)
            {
                sb.AppendItem(item.CameraBaseHeightFirstPerson, "CameraBaseHeightFirstPerson");
            }
            if (printMask?.CameraBaseHeightThirdPersonNear ?? true)
            {
                sb.AppendItem(item.CameraBaseHeightThirdPersonNear, "CameraBaseHeightThirdPersonNear");
            }
            if (printMask?.CameraBaseHeightThirdPersonFar ?? true)
            {
                sb.AppendItem(item.CameraBaseHeightThirdPersonFar, "CameraBaseHeightThirdPersonFar");
            }
            if (printMask?.CameraBaseFovFirstPerson ?? true)
            {
                sb.AppendItem(item.CameraBaseFovFirstPerson, "CameraBaseFovFirstPerson");
            }
            if (printMask?.CameraBaseFovThirdPersonNear ?? true)
            {
                sb.AppendItem(item.CameraBaseFovThirdPersonNear, "CameraBaseFovThirdPersonNear");
            }
            if (printMask?.CameraBaseFovThirdPersonFar ?? true)
            {
                sb.AppendItem(item.CameraBaseFovThirdPersonFar, "CameraBaseFovThirdPersonFar");
            }
            if (printMask?.CameraBoostFovOffsetNear ?? true)
            {
                sb.AppendItem(item.CameraBoostFovOffsetNear, "CameraBoostFovOffsetNear");
            }
            if (printMask?.CameraBoostFovOffsetFar ?? true)
            {
                sb.AppendItem(item.CameraBoostFovOffsetFar, "CameraBoostFovOffsetFar");
            }
            if (printMask?.CameraSpeedRatioZoomOffsetThirdPersonNear ?? true)
            {
                sb.AppendItem(item.CameraSpeedRatioZoomOffsetThirdPersonNear, "CameraSpeedRatioZoomOffsetThirdPersonNear");
            }
            if (printMask?.CameraSpeedRatioZoomOffsetThirdPersonFar ?? true)
            {
                sb.AppendItem(item.CameraSpeedRatioZoomOffsetThirdPersonFar, "CameraSpeedRatioZoomOffsetThirdPersonFar");
            }
            if (printMask?.CameraSpeedPidPValue ?? true)
            {
                sb.AppendItem(item.CameraSpeedPidPValue, "CameraSpeedPidPValue");
            }
            if (printMask?.CameraSpeedPidIValue ?? true)
            {
                sb.AppendItem(item.CameraSpeedPidIValue, "CameraSpeedPidIValue");
            }
            if (printMask?.CameraSpeedPidDValue ?? true)
            {
                sb.AppendItem(item.CameraSpeedPidDValue, "CameraSpeedPidDValue");
            }
            if (printMask?.CameraFovBlendFactorAiming ?? true)
            {
                sb.AppendItem(item.CameraFovBlendFactorAiming, "CameraFovBlendFactorAiming");
            }
            if (printMask?.CameraFovBlendFactorBoosting ?? true)
            {
                sb.AppendItem(item.CameraFovBlendFactorBoosting, "CameraFovBlendFactorBoosting");
            }
            if (printMask?.CameraPositionBlendFilteringFactor ?? true)
            {
                sb.AppendItem(item.CameraPositionBlendFilteringFactor, "CameraPositionBlendFilteringFactor");
            }
            if (printMask?.CameraPositionRLOffsetFirstPerson ?? true)
            {
                sb.AppendItem(item.CameraPositionRLOffsetFirstPerson, "CameraPositionRLOffsetFirstPerson");
            }
            if (printMask?.HandlingForwardBoostForceInWater ?? true)
            {
                sb.AppendItem(item.HandlingForwardBoostForceInWater, "HandlingForwardBoostForceInWater");
            }
            if (printMask?.WaterLinDamp ?? true)
            {
                sb.AppendItem(item.WaterLinDamp, "WaterLinDamp");
            }
            if (printMask?.WheelMaxFriction ?? true)
            {
                sb.AppendItem(item.WheelMaxFriction, "WheelMaxFriction");
            }
            if (printMask?.WaterBobAccelerationDeadZone ?? true)
            {
                sb.AppendItem(item.WaterBobAccelerationDeadZone, "WaterBobAccelerationDeadZone");
            }
            if (printMask?.WaterBobAccelerationPitch ?? true)
            {
                sb.AppendItem(item.WaterBobAccelerationPitch, "WaterBobAccelerationPitch");
            }
            if (printMask?.WaterBobAccelerationRoll ?? true)
            {
                sb.AppendItem(item.WaterBobAccelerationRoll, "WaterBobAccelerationRoll");
            }
            if (printMask?.WaterBobNaturalPitchPeriod ?? true)
            {
                sb.AppendItem(item.WaterBobNaturalPitchPeriod, "WaterBobNaturalPitchPeriod");
            }
            if (printMask?.WaterBobNaturalRollPeriod ?? true)
            {
                sb.AppendItem(item.WaterBobNaturalRollPeriod, "WaterBobNaturalRollPeriod");
            }
            if (printMask?.WaterBobNaturalAmplitude ?? true)
            {
                sb.AppendItem(item.WaterBobNaturalAmplitude, "WaterBobNaturalAmplitude");
            }
            if (printMask?.WaterBobTorquePitch ?? true)
            {
                sb.AppendItem(item.WaterBobTorquePitch, "WaterBobTorquePitch");
            }
            if (printMask?.WaterBobTorqueRoll ?? true)
            {
                sb.AppendItem(item.WaterBobTorqueRoll, "WaterBobTorqueRoll");
            }
            if (printMask?.ChassisLinearDamping ?? true)
            {
                sb.AppendItem(item.ChassisLinearDamping, "ChassisLinearDamping");
            }
            if (printMask?.SuspensionMaxVisualSpeedCompression ?? true)
            {
                sb.AppendItem(item.SuspensionMaxVisualSpeedCompression, "SuspensionMaxVisualSpeedCompression");
            }
            if (printMask?.SuspensionMaxVisualSpeedRelaxation ?? true)
            {
                sb.AppendItem(item.SuspensionMaxVisualSpeedRelaxation, "SuspensionMaxVisualSpeedRelaxation");
            }
            if (printMask?.SlideFactorGainGreaterThanThreshold ?? true)
            {
                sb.AppendItem(item.SlideFactorGainGreaterThanThreshold, "SlideFactorGainGreaterThanThreshold");
            }
            if (printMask?.SlideFactorLostLessThanOrEqualThreshold ?? true)
            {
                sb.AppendItem(item.SlideFactorLostLessThanOrEqualThreshold, "SlideFactorLostLessThanOrEqualThreshold");
            }
            if (printMask?.SlideFactorThreshold ?? true)
            {
                sb.AppendItem(item.SlideFactorThreshold, "SlideFactorThreshold");
            }
            if (printMask?.SlideFactorFrictionAtMax ?? true)
            {
                sb.AppendItem(item.SlideFactorFrictionAtMax, "SlideFactorFrictionAtMax");
            }
            if (printMask?.SlideFactorViscosityFrictionAtMax ?? true)
            {
                sb.AppendItem(item.SlideFactorViscosityFrictionAtMax, "SlideFactorViscosityFrictionAtMax");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IVehicleConfigDataGetter? lhs,
            IVehicleConfigDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesSuspensionFrontLeft) ?? true))
            {
                if (!string.Equals(lhs.NodeNamesSuspensionFrontLeft, rhs.NodeNamesSuspensionFrontLeft)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesSuspensionFrontRight) ?? true))
            {
                if (!string.Equals(lhs.NodeNamesSuspensionFrontRight, rhs.NodeNamesSuspensionFrontRight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesSuspensionRearLeft) ?? true))
            {
                if (!string.Equals(lhs.NodeNamesSuspensionRearLeft, rhs.NodeNamesSuspensionRearLeft)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesSuspensionRearRight) ?? true))
            {
                if (!string.Equals(lhs.NodeNamesSuspensionRearRight, rhs.NodeNamesSuspensionRearRight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesWheelFrontLeft) ?? true))
            {
                if (!string.Equals(lhs.NodeNamesWheelFrontLeft, rhs.NodeNamesWheelFrontLeft)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesWheelFrontRight) ?? true))
            {
                if (!string.Equals(lhs.NodeNamesWheelFrontRight, rhs.NodeNamesWheelFrontRight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesWheelRearLeft) ?? true))
            {
                if (!string.Equals(lhs.NodeNamesWheelRearLeft, rhs.NodeNamesWheelRearLeft)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesWheelRearRight) ?? true))
            {
                if (!string.Equals(lhs.NodeNamesWheelRearRight, rhs.NodeNamesWheelRearRight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisForwardAxis) ?? true))
            {
                if (lhs.ChassisForwardAxis != rhs.ChassisForwardAxis) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisUpAxis) ?? true))
            {
                if (lhs.ChassisUpAxis != rhs.ChassisUpAxis) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisVehicleMass) ?? true))
            {
                if (!lhs.ChassisVehicleMass.EqualsWithin(rhs.ChassisVehicleMass)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisFrictionEqualizer) ?? true))
            {
                if (!lhs.ChassisFrictionEqualizer.EqualsWithin(rhs.ChassisFrictionEqualizer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisTorqueRoll) ?? true))
            {
                if (!lhs.ChassisTorqueRoll.EqualsWithin(rhs.ChassisTorqueRoll)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisTorquePitch) ?? true))
            {
                if (!lhs.ChassisTorquePitch.EqualsWithin(rhs.ChassisTorquePitch)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisTorqueYaw) ?? true))
            {
                if (!lhs.ChassisTorqueYaw.EqualsWithin(rhs.ChassisTorqueYaw)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisInertiaYaw) ?? true))
            {
                if (!lhs.ChassisInertiaYaw.EqualsWithin(rhs.ChassisInertiaYaw)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisInertiaRoll) ?? true))
            {
                if (!lhs.ChassisInertiaRoll.EqualsWithin(rhs.ChassisInertiaRoll)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisInertialPitch) ?? true))
            {
                if (!lhs.ChassisInertialPitch.EqualsWithin(rhs.ChassisInertialPitch)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisExtraTorque) ?? true))
            {
                if (!lhs.ChassisExtraTorque.EqualsWithin(rhs.ChassisExtraTorque)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisMaxVelocityPositionalFriction) ?? true))
            {
                if (!lhs.ChassisMaxVelocityPositionalFriction.EqualsWithin(rhs.ChassisMaxVelocityPositionalFriction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisFriction) ?? true))
            {
                if (!lhs.ChassisFriction.EqualsWithin(rhs.ChassisFriction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisRestitution) ?? true))
            {
                if (!lhs.ChassisRestitution.EqualsWithin(rhs.ChassisRestitution)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisComOffsetForward) ?? true))
            {
                if (!lhs.ChassisComOffsetForward.EqualsWithin(rhs.ChassisComOffsetForward)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisComOffsetUp) ?? true))
            {
                if (!lhs.ChassisComOffsetUp.EqualsWithin(rhs.ChassisComOffsetUp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelSlipAngle) ?? true))
            {
                if (!lhs.WheelSlipAngle.EqualsWithin(rhs.WheelSlipAngle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelFriction) ?? true))
            {
                if (!lhs.WheelFriction.EqualsWithin(rhs.WheelFriction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelScale) ?? true))
            {
                if (!lhs.WheelScale.EqualsWithin(rhs.WheelScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelMass) ?? true))
            {
                if (!lhs.WheelMass.EqualsWithin(rhs.WheelMass)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelViscosityFriction) ?? true))
            {
                if (!lhs.WheelViscosityFriction.EqualsWithin(rhs.WheelViscosityFriction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelCastType) ?? true))
            {
                if (lhs.WheelCastType != rhs.WheelCastType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionStrength) ?? true))
            {
                if (!lhs.SuspensionStrength.EqualsWithin(rhs.SuspensionStrength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionDampingCompression) ?? true))
            {
                if (!lhs.SuspensionDampingCompression.EqualsWithin(rhs.SuspensionDampingCompression)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionDampingRelaxation) ?? true))
            {
                if (!lhs.SuspensionDampingRelaxation.EqualsWithin(rhs.SuspensionDampingRelaxation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionLength) ?? true))
            {
                if (!lhs.SuspensionLength.EqualsWithin(rhs.SuspensionLength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionOffsetsUpFront) ?? true))
            {
                if (!lhs.SuspensionOffsetsUpFront.EqualsWithin(rhs.SuspensionOffsetsUpFront)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionOffsetsUpBack) ?? true))
            {
                if (!lhs.SuspensionOffsetsUpBack.EqualsWithin(rhs.SuspensionOffsetsUpBack)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionOffsetsFront) ?? true))
            {
                if (!lhs.SuspensionOffsetsFront.EqualsWithin(rhs.SuspensionOffsetsFront)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionOffsetsBack) ?? true))
            {
                if (!lhs.SuspensionOffsetsBack.EqualsWithin(rhs.SuspensionOffsetsBack)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionOffsetsLateral) ?? true))
            {
                if (!lhs.SuspensionOffsetsLateral.EqualsWithin(rhs.SuspensionOffsetsLateral)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SteeringMaxAngle) ?? true))
            {
                if (!lhs.SteeringMaxAngle.EqualsWithin(rhs.SteeringMaxAngle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SteeringMaxAngleAtSpeed) ?? true))
            {
                if (!lhs.SteeringMaxAngleAtSpeed.EqualsWithin(rhs.SteeringMaxAngleAtSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineMaxSpeed) ?? true))
            {
                if (!lhs.EngineMaxSpeed.EqualsWithin(rhs.EngineMaxSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineMaxTorque) ?? true))
            {
                if (!lhs.EngineMaxTorque.EqualsWithin(rhs.EngineMaxTorque)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineMinRpm) ?? true))
            {
                if (!lhs.EngineMinRpm.EqualsWithin(rhs.EngineMinRpm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineMaxRpm) ?? true))
            {
                if (!lhs.EngineMaxRpm.EqualsWithin(rhs.EngineMaxRpm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineOptRpm) ?? true))
            {
                if (!lhs.EngineOptRpm.EqualsWithin(rhs.EngineOptRpm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineTorqueMinRpm) ?? true))
            {
                if (!lhs.EngineTorqueMinRpm.EqualsWithin(rhs.EngineTorqueMinRpm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineTorqueMaxRpm) ?? true))
            {
                if (!lhs.EngineTorqueMaxRpm.EqualsWithin(rhs.EngineTorqueMaxRpm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineResistanceMinRpm) ?? true))
            {
                if (!lhs.EngineResistanceMinRpm.EqualsWithin(rhs.EngineResistanceMinRpm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineResistanceMaxRpm) ?? true))
            {
                if (!lhs.EngineResistanceMaxRpm.EqualsWithin(rhs.EngineResistanceMaxRpm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineResistanceOptRpm) ?? true))
            {
                if (!lhs.EngineResistanceOptRpm.EqualsWithin(rhs.EngineResistanceOptRpm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionDownshiftRpm) ?? true))
            {
                if (!lhs.TransmissionDownshiftRpm.EqualsWithin(rhs.TransmissionDownshiftRpm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionUpshiftRpm) ?? true))
            {
                if (!lhs.TransmissionUpshiftRpm.EqualsWithin(rhs.TransmissionUpshiftRpm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionClutchDelayTime) ?? true))
            {
                if (!lhs.TransmissionClutchDelayTime.EqualsWithin(rhs.TransmissionClutchDelayTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionGearRatioReverse) ?? true))
            {
                if (!lhs.TransmissionGearRatioReverse.EqualsWithin(rhs.TransmissionGearRatioReverse)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionGearRatioFirst) ?? true))
            {
                if (!lhs.TransmissionGearRatioFirst.EqualsWithin(rhs.TransmissionGearRatioFirst)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionGearRatioSecond) ?? true))
            {
                if (!lhs.TransmissionGearRatioSecond.EqualsWithin(rhs.TransmissionGearRatioSecond)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionGearRatioThird) ?? true))
            {
                if (!lhs.TransmissionGearRatioThird.EqualsWithin(rhs.TransmissionGearRatioThird)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionGearRatioFourth) ?? true))
            {
                if (!lhs.TransmissionGearRatioFourth.EqualsWithin(rhs.TransmissionGearRatioFourth)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionTorqueRatioFrontWheels) ?? true))
            {
                if (!lhs.TransmissionTorqueRatioFrontWheels.EqualsWithin(rhs.TransmissionTorqueRatioFrontWheels)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionTorqueRatioBackWheels) ?? true))
            {
                if (!lhs.TransmissionTorqueRatioBackWheels.EqualsWithin(rhs.TransmissionTorqueRatioBackWheels)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BrakesMaxTorque) ?? true))
            {
                if (!lhs.BrakesMaxTorque.EqualsWithin(rhs.BrakesMaxTorque)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BrakesMinPedalInputToBlock) ?? true))
            {
                if (!lhs.BrakesMinPedalInputToBlock.EqualsWithin(rhs.BrakesMinPedalInputToBlock)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BrakesWheelsMinTimeToBlock) ?? true))
            {
                if (!lhs.BrakesWheelsMinTimeToBlock.EqualsWithin(rhs.BrakesWheelsMinTimeToBlock)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.AerodynamicsAirDensity) ?? true))
            {
                if (!lhs.AerodynamicsAirDensity.EqualsWithin(rhs.AerodynamicsAirDensity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.AerodynamicsFrontArea) ?? true))
            {
                if (!lhs.AerodynamicsFrontArea.EqualsWithin(rhs.AerodynamicsFrontArea)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.AerodynamicsDragCoefficient) ?? true))
            {
                if (!lhs.AerodynamicsDragCoefficient.EqualsWithin(rhs.AerodynamicsDragCoefficient)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.AerodynamicsLiftCoefficient) ?? true))
            {
                if (!lhs.AerodynamicsLiftCoefficient.EqualsWithin(rhs.AerodynamicsLiftCoefficient)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.AerodynamicsExtraGravityMultiplier) ?? true))
            {
                if (!lhs.AerodynamicsExtraGravityMultiplier.EqualsWithin(rhs.AerodynamicsExtraGravityMultiplier)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.VelocityDampingNormalSpin) ?? true))
            {
                if (!lhs.VelocityDampingNormalSpin.EqualsWithin(rhs.VelocityDampingNormalSpin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.VelocityDampingCollisionSpin) ?? true))
            {
                if (!lhs.VelocityDampingCollisionSpin.EqualsWithin(rhs.VelocityDampingCollisionSpin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.VelocityDampingCollisionThreshold) ?? true))
            {
                if (!lhs.VelocityDampingCollisionThreshold.EqualsWithin(rhs.VelocityDampingCollisionThreshold)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingReorientStrength) ?? true))
            {
                if (!lhs.HandlingReorientStrength.EqualsWithin(rhs.HandlingReorientStrength)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingReorientDamping) ?? true))
            {
                if (!lhs.HandlingReorientDamping.EqualsWithin(rhs.HandlingReorientDamping)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingVerticalBoostForce) ?? true))
            {
                if (!lhs.HandlingVerticalBoostForce.EqualsWithin(rhs.HandlingVerticalBoostForce)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingForwardBoostForce) ?? true))
            {
                if (!lhs.HandlingForwardBoostForce.EqualsWithin(rhs.HandlingForwardBoostForce)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingBoostMaxVelocity) ?? true))
            {
                if (!lhs.HandlingBoostMaxVelocity.EqualsWithin(rhs.HandlingBoostMaxVelocity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingBoostDuration) ?? true))
            {
                if (!lhs.HandlingBoostDuration.EqualsWithin(rhs.HandlingBoostDuration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingVerticalBoostDuration) ?? true))
            {
                if (!lhs.HandlingVerticalBoostDuration.EqualsWithin(rhs.HandlingVerticalBoostDuration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingBoostRechargeDelay) ?? true))
            {
                if (!lhs.HandlingBoostRechargeDelay.EqualsWithin(rhs.HandlingBoostRechargeDelay)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingBoostRechargeDuration) ?? true))
            {
                if (!lhs.HandlingBoostRechargeDuration.EqualsWithin(rhs.HandlingBoostRechargeDuration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterStrengthFront) ?? true))
            {
                if (!lhs.WaterStrengthFront.EqualsWithin(rhs.WaterStrengthFront)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterStrengthBack) ?? true))
            {
                if (!lhs.WaterStrengthBack.EqualsWithin(rhs.WaterStrengthBack)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterDampFront) ?? true))
            {
                if (!lhs.WaterDampFront.EqualsWithin(rhs.WaterDampFront)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterDampBack) ?? true))
            {
                if (!lhs.WaterDampBack.EqualsWithin(rhs.WaterDampBack)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterDrive) ?? true))
            {
                if (!lhs.WaterDrive.EqualsWithin(rhs.WaterDrive)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterRotationDamp) ?? true))
            {
                if (!lhs.WaterRotationDamp.EqualsWithin(rhs.WaterRotationDamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BumperEnable) ?? true))
            {
                if (lhs.BumperEnable != rhs.BumperEnable) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BumperForward) ?? true))
            {
                if (!lhs.BumperForward.EqualsWithin(rhs.BumperForward)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BumperUp) ?? true))
            {
                if (!lhs.BumperUp.EqualsWithin(rhs.BumperUp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BumperWidth) ?? true))
            {
                if (!lhs.BumperWidth.EqualsWithin(rhs.BumperWidth)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BumperRadius) ?? true))
            {
                if (!lhs.BumperRadius.EqualsWithin(rhs.BumperRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CollisionDampingAngular) ?? true))
            {
                if (!lhs.CollisionDampingAngular.EqualsWithin(rhs.CollisionDampingAngular)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CollisionMinSlopeCos) ?? true))
            {
                if (!lhs.CollisionMinSlopeCos.EqualsWithin(rhs.CollisionMinSlopeCos)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonPValue) ?? true))
            {
                if (!lhs.ControlsSteeringPidThirdPersonPValue.EqualsWithin(rhs.ControlsSteeringPidThirdPersonPValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonIValue) ?? true))
            {
                if (!lhs.ControlsSteeringPidThirdPersonIValue.EqualsWithin(rhs.ControlsSteeringPidThirdPersonIValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonDValue) ?? true))
            {
                if (!lhs.ControlsSteeringPidThirdPersonDValue.EqualsWithin(rhs.ControlsSteeringPidThirdPersonDValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonPValue) ?? true))
            {
                if (!lhs.ControlsSteeringPidFirstPersonPValue.EqualsWithin(rhs.ControlsSteeringPidFirstPersonPValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonIValue) ?? true))
            {
                if (!lhs.ControlsSteeringPidFirstPersonIValue.EqualsWithin(rhs.ControlsSteeringPidFirstPersonIValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonDValue) ?? true))
            {
                if (!lhs.ControlsSteeringPidFirstPersonDValue.EqualsWithin(rhs.ControlsSteeringPidFirstPersonDValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown1) ?? true))
            {
                if (!lhs.Unknown1.EqualsWithin(rhs.Unknown1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown2) ?? true))
            {
                if (!lhs.Unknown2.EqualsWithin(rhs.Unknown2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown3) ?? true))
            {
                if (!lhs.Unknown3.EqualsWithin(rhs.Unknown3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown4) ?? true))
            {
                if (!lhs.Unknown4.EqualsWithin(rhs.Unknown4)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown5) ?? true))
            {
                if (!lhs.Unknown5.EqualsWithin(rhs.Unknown5)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown6) ?? true))
            {
                if (!lhs.Unknown6.EqualsWithin(rhs.Unknown6)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseZoomFirstPerson) ?? true))
            {
                if (!lhs.CameraBaseZoomFirstPerson.EqualsWithin(rhs.CameraBaseZoomFirstPerson)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseZoomThirdPersonNear) ?? true))
            {
                if (!lhs.CameraBaseZoomThirdPersonNear.EqualsWithin(rhs.CameraBaseZoomThirdPersonNear)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseZoomThirdPersonFar) ?? true))
            {
                if (!lhs.CameraBaseZoomThirdPersonFar.EqualsWithin(rhs.CameraBaseZoomThirdPersonFar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseHeightFirstPerson) ?? true))
            {
                if (!lhs.CameraBaseHeightFirstPerson.EqualsWithin(rhs.CameraBaseHeightFirstPerson)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseHeightThirdPersonNear) ?? true))
            {
                if (!lhs.CameraBaseHeightThirdPersonNear.EqualsWithin(rhs.CameraBaseHeightThirdPersonNear)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseHeightThirdPersonFar) ?? true))
            {
                if (!lhs.CameraBaseHeightThirdPersonFar.EqualsWithin(rhs.CameraBaseHeightThirdPersonFar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseFovFirstPerson) ?? true))
            {
                if (!lhs.CameraBaseFovFirstPerson.EqualsWithin(rhs.CameraBaseFovFirstPerson)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseFovThirdPersonNear) ?? true))
            {
                if (!lhs.CameraBaseFovThirdPersonNear.EqualsWithin(rhs.CameraBaseFovThirdPersonNear)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseFovThirdPersonFar) ?? true))
            {
                if (!lhs.CameraBaseFovThirdPersonFar.EqualsWithin(rhs.CameraBaseFovThirdPersonFar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBoostFovOffsetNear) ?? true))
            {
                if (!lhs.CameraBoostFovOffsetNear.EqualsWithin(rhs.CameraBoostFovOffsetNear)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBoostFovOffsetFar) ?? true))
            {
                if (!lhs.CameraBoostFovOffsetFar.EqualsWithin(rhs.CameraBoostFovOffsetFar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraSpeedRatioZoomOffsetThirdPersonNear) ?? true))
            {
                if (!lhs.CameraSpeedRatioZoomOffsetThirdPersonNear.EqualsWithin(rhs.CameraSpeedRatioZoomOffsetThirdPersonNear)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraSpeedRatioZoomOffsetThirdPersonFar) ?? true))
            {
                if (!lhs.CameraSpeedRatioZoomOffsetThirdPersonFar.EqualsWithin(rhs.CameraSpeedRatioZoomOffsetThirdPersonFar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraSpeedPidPValue) ?? true))
            {
                if (!lhs.CameraSpeedPidPValue.EqualsWithin(rhs.CameraSpeedPidPValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraSpeedPidIValue) ?? true))
            {
                if (!lhs.CameraSpeedPidIValue.EqualsWithin(rhs.CameraSpeedPidIValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraSpeedPidDValue) ?? true))
            {
                if (!lhs.CameraSpeedPidDValue.EqualsWithin(rhs.CameraSpeedPidDValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraFovBlendFactorAiming) ?? true))
            {
                if (!lhs.CameraFovBlendFactorAiming.EqualsWithin(rhs.CameraFovBlendFactorAiming)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraFovBlendFactorBoosting) ?? true))
            {
                if (!lhs.CameraFovBlendFactorBoosting.EqualsWithin(rhs.CameraFovBlendFactorBoosting)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraPositionBlendFilteringFactor) ?? true))
            {
                if (!lhs.CameraPositionBlendFilteringFactor.EqualsWithin(rhs.CameraPositionBlendFilteringFactor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraPositionRLOffsetFirstPerson) ?? true))
            {
                if (!lhs.CameraPositionRLOffsetFirstPerson.EqualsWithin(rhs.CameraPositionRLOffsetFirstPerson)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingForwardBoostForceInWater) ?? true))
            {
                if (!lhs.HandlingForwardBoostForceInWater.EqualsWithin(rhs.HandlingForwardBoostForceInWater)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterLinDamp) ?? true))
            {
                if (!lhs.WaterLinDamp.EqualsWithin(rhs.WaterLinDamp)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelMaxFriction) ?? true))
            {
                if (!lhs.WheelMaxFriction.EqualsWithin(rhs.WheelMaxFriction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobAccelerationDeadZone) ?? true))
            {
                if (!lhs.WaterBobAccelerationDeadZone.EqualsWithin(rhs.WaterBobAccelerationDeadZone)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobAccelerationPitch) ?? true))
            {
                if (!lhs.WaterBobAccelerationPitch.EqualsWithin(rhs.WaterBobAccelerationPitch)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobAccelerationRoll) ?? true))
            {
                if (!lhs.WaterBobAccelerationRoll.EqualsWithin(rhs.WaterBobAccelerationRoll)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobNaturalPitchPeriod) ?? true))
            {
                if (!lhs.WaterBobNaturalPitchPeriod.EqualsWithin(rhs.WaterBobNaturalPitchPeriod)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobNaturalRollPeriod) ?? true))
            {
                if (!lhs.WaterBobNaturalRollPeriod.EqualsWithin(rhs.WaterBobNaturalRollPeriod)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobNaturalAmplitude) ?? true))
            {
                if (!lhs.WaterBobNaturalAmplitude.EqualsWithin(rhs.WaterBobNaturalAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobTorquePitch) ?? true))
            {
                if (!lhs.WaterBobTorquePitch.EqualsWithin(rhs.WaterBobTorquePitch)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobTorqueRoll) ?? true))
            {
                if (!lhs.WaterBobTorqueRoll.EqualsWithin(rhs.WaterBobTorqueRoll)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisLinearDamping) ?? true))
            {
                if (!lhs.ChassisLinearDamping.EqualsWithin(rhs.ChassisLinearDamping)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionMaxVisualSpeedCompression) ?? true))
            {
                if (!lhs.SuspensionMaxVisualSpeedCompression.EqualsWithin(rhs.SuspensionMaxVisualSpeedCompression)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionMaxVisualSpeedRelaxation) ?? true))
            {
                if (!lhs.SuspensionMaxVisualSpeedRelaxation.EqualsWithin(rhs.SuspensionMaxVisualSpeedRelaxation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SlideFactorGainGreaterThanThreshold) ?? true))
            {
                if (!lhs.SlideFactorGainGreaterThanThreshold.EqualsWithin(rhs.SlideFactorGainGreaterThanThreshold)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SlideFactorLostLessThanOrEqualThreshold) ?? true))
            {
                if (!lhs.SlideFactorLostLessThanOrEqualThreshold.EqualsWithin(rhs.SlideFactorLostLessThanOrEqualThreshold)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SlideFactorThreshold) ?? true))
            {
                if (!lhs.SlideFactorThreshold.EqualsWithin(rhs.SlideFactorThreshold)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SlideFactorFrictionAtMax) ?? true))
            {
                if (!lhs.SlideFactorFrictionAtMax.EqualsWithin(rhs.SlideFactorFrictionAtMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SlideFactorViscosityFrictionAtMax) ?? true))
            {
                if (!lhs.SlideFactorViscosityFrictionAtMax.EqualsWithin(rhs.SlideFactorViscosityFrictionAtMax)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IVehicleConfigDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.NodeNamesSuspensionFrontLeft);
            hash.Add(item.NodeNamesSuspensionFrontRight);
            hash.Add(item.NodeNamesSuspensionRearLeft);
            hash.Add(item.NodeNamesSuspensionRearRight);
            hash.Add(item.NodeNamesWheelFrontLeft);
            hash.Add(item.NodeNamesWheelFrontRight);
            hash.Add(item.NodeNamesWheelRearLeft);
            hash.Add(item.NodeNamesWheelRearRight);
            hash.Add(item.ChassisForwardAxis);
            hash.Add(item.ChassisUpAxis);
            hash.Add(item.ChassisVehicleMass);
            hash.Add(item.ChassisFrictionEqualizer);
            hash.Add(item.ChassisTorqueRoll);
            hash.Add(item.ChassisTorquePitch);
            hash.Add(item.ChassisTorqueYaw);
            hash.Add(item.ChassisInertiaYaw);
            hash.Add(item.ChassisInertiaRoll);
            hash.Add(item.ChassisInertialPitch);
            hash.Add(item.ChassisExtraTorque);
            hash.Add(item.ChassisMaxVelocityPositionalFriction);
            hash.Add(item.ChassisFriction);
            hash.Add(item.ChassisRestitution);
            hash.Add(item.ChassisComOffsetForward);
            hash.Add(item.ChassisComOffsetUp);
            hash.Add(item.WheelSlipAngle);
            hash.Add(item.WheelFriction);
            hash.Add(item.WheelScale);
            hash.Add(item.WheelMass);
            hash.Add(item.WheelViscosityFriction);
            hash.Add(item.WheelCastType);
            hash.Add(item.SuspensionStrength);
            hash.Add(item.SuspensionDampingCompression);
            hash.Add(item.SuspensionDampingRelaxation);
            hash.Add(item.SuspensionLength);
            hash.Add(item.SuspensionOffsetsUpFront);
            hash.Add(item.SuspensionOffsetsUpBack);
            hash.Add(item.SuspensionOffsetsFront);
            hash.Add(item.SuspensionOffsetsBack);
            hash.Add(item.SuspensionOffsetsLateral);
            hash.Add(item.SteeringMaxAngle);
            hash.Add(item.SteeringMaxAngleAtSpeed);
            hash.Add(item.EngineMaxSpeed);
            hash.Add(item.EngineMaxTorque);
            hash.Add(item.EngineMinRpm);
            hash.Add(item.EngineMaxRpm);
            hash.Add(item.EngineOptRpm);
            hash.Add(item.EngineTorqueMinRpm);
            hash.Add(item.EngineTorqueMaxRpm);
            hash.Add(item.EngineResistanceMinRpm);
            hash.Add(item.EngineResistanceMaxRpm);
            hash.Add(item.EngineResistanceOptRpm);
            hash.Add(item.TransmissionDownshiftRpm);
            hash.Add(item.TransmissionUpshiftRpm);
            hash.Add(item.TransmissionClutchDelayTime);
            hash.Add(item.TransmissionGearRatioReverse);
            hash.Add(item.TransmissionGearRatioFirst);
            hash.Add(item.TransmissionGearRatioSecond);
            hash.Add(item.TransmissionGearRatioThird);
            hash.Add(item.TransmissionGearRatioFourth);
            hash.Add(item.TransmissionTorqueRatioFrontWheels);
            hash.Add(item.TransmissionTorqueRatioBackWheels);
            hash.Add(item.BrakesMaxTorque);
            hash.Add(item.BrakesMinPedalInputToBlock);
            hash.Add(item.BrakesWheelsMinTimeToBlock);
            hash.Add(item.AerodynamicsAirDensity);
            hash.Add(item.AerodynamicsFrontArea);
            hash.Add(item.AerodynamicsDragCoefficient);
            hash.Add(item.AerodynamicsLiftCoefficient);
            hash.Add(item.AerodynamicsExtraGravityMultiplier);
            hash.Add(item.VelocityDampingNormalSpin);
            hash.Add(item.VelocityDampingCollisionSpin);
            hash.Add(item.VelocityDampingCollisionThreshold);
            hash.Add(item.HandlingReorientStrength);
            hash.Add(item.HandlingReorientDamping);
            hash.Add(item.HandlingVerticalBoostForce);
            hash.Add(item.HandlingForwardBoostForce);
            hash.Add(item.HandlingBoostMaxVelocity);
            hash.Add(item.HandlingBoostDuration);
            hash.Add(item.HandlingVerticalBoostDuration);
            hash.Add(item.HandlingBoostRechargeDelay);
            hash.Add(item.HandlingBoostRechargeDuration);
            hash.Add(item.WaterStrengthFront);
            hash.Add(item.WaterStrengthBack);
            hash.Add(item.WaterDampFront);
            hash.Add(item.WaterDampBack);
            hash.Add(item.WaterDrive);
            hash.Add(item.WaterRotationDamp);
            hash.Add(item.BumperEnable);
            hash.Add(item.BumperForward);
            hash.Add(item.BumperUp);
            hash.Add(item.BumperWidth);
            hash.Add(item.BumperRadius);
            hash.Add(item.CollisionDampingAngular);
            hash.Add(item.CollisionMinSlopeCos);
            hash.Add(item.ControlsSteeringPidThirdPersonPValue);
            hash.Add(item.ControlsSteeringPidThirdPersonIValue);
            hash.Add(item.ControlsSteeringPidThirdPersonDValue);
            hash.Add(item.ControlsSteeringPidFirstPersonPValue);
            hash.Add(item.ControlsSteeringPidFirstPersonIValue);
            hash.Add(item.ControlsSteeringPidFirstPersonDValue);
            hash.Add(item.Unknown1);
            hash.Add(item.Unknown2);
            hash.Add(item.Unknown3);
            hash.Add(item.Unknown4);
            hash.Add(item.Unknown5);
            hash.Add(item.Unknown6);
            hash.Add(item.CameraBaseZoomFirstPerson);
            hash.Add(item.CameraBaseZoomThirdPersonNear);
            hash.Add(item.CameraBaseZoomThirdPersonFar);
            hash.Add(item.CameraBaseHeightFirstPerson);
            hash.Add(item.CameraBaseHeightThirdPersonNear);
            hash.Add(item.CameraBaseHeightThirdPersonFar);
            hash.Add(item.CameraBaseFovFirstPerson);
            hash.Add(item.CameraBaseFovThirdPersonNear);
            hash.Add(item.CameraBaseFovThirdPersonFar);
            hash.Add(item.CameraBoostFovOffsetNear);
            hash.Add(item.CameraBoostFovOffsetFar);
            hash.Add(item.CameraSpeedRatioZoomOffsetThirdPersonNear);
            hash.Add(item.CameraSpeedRatioZoomOffsetThirdPersonFar);
            hash.Add(item.CameraSpeedPidPValue);
            hash.Add(item.CameraSpeedPidIValue);
            hash.Add(item.CameraSpeedPidDValue);
            hash.Add(item.CameraFovBlendFactorAiming);
            hash.Add(item.CameraFovBlendFactorBoosting);
            hash.Add(item.CameraPositionBlendFilteringFactor);
            hash.Add(item.CameraPositionRLOffsetFirstPerson);
            hash.Add(item.HandlingForwardBoostForceInWater);
            hash.Add(item.WaterLinDamp);
            hash.Add(item.WheelMaxFriction);
            hash.Add(item.WaterBobAccelerationDeadZone);
            hash.Add(item.WaterBobAccelerationPitch);
            hash.Add(item.WaterBobAccelerationRoll);
            hash.Add(item.WaterBobNaturalPitchPeriod);
            hash.Add(item.WaterBobNaturalRollPeriod);
            hash.Add(item.WaterBobNaturalAmplitude);
            hash.Add(item.WaterBobTorquePitch);
            hash.Add(item.WaterBobTorqueRoll);
            hash.Add(item.ChassisLinearDamping);
            hash.Add(item.SuspensionMaxVisualSpeedCompression);
            hash.Add(item.SuspensionMaxVisualSpeedRelaxation);
            hash.Add(item.SlideFactorGainGreaterThanThreshold);
            hash.Add(item.SlideFactorLostLessThanOrEqualThreshold);
            hash.Add(item.SlideFactorThreshold);
            hash.Add(item.SlideFactorFrictionAtMax);
            hash.Add(item.SlideFactorViscosityFrictionAtMax);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return VehicleConfigData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IVehicleConfigDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class VehicleConfigDataSetterTranslationCommon
    {
        public static readonly VehicleConfigDataSetterTranslationCommon Instance = new VehicleConfigDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IVehicleConfigData item,
            IVehicleConfigDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesSuspensionFrontLeft) ?? true))
            {
                item.NodeNamesSuspensionFrontLeft = rhs.NodeNamesSuspensionFrontLeft;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesSuspensionFrontRight) ?? true))
            {
                item.NodeNamesSuspensionFrontRight = rhs.NodeNamesSuspensionFrontRight;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesSuspensionRearLeft) ?? true))
            {
                item.NodeNamesSuspensionRearLeft = rhs.NodeNamesSuspensionRearLeft;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesSuspensionRearRight) ?? true))
            {
                item.NodeNamesSuspensionRearRight = rhs.NodeNamesSuspensionRearRight;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesWheelFrontLeft) ?? true))
            {
                item.NodeNamesWheelFrontLeft = rhs.NodeNamesWheelFrontLeft;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesWheelFrontRight) ?? true))
            {
                item.NodeNamesWheelFrontRight = rhs.NodeNamesWheelFrontRight;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesWheelRearLeft) ?? true))
            {
                item.NodeNamesWheelRearLeft = rhs.NodeNamesWheelRearLeft;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.NodeNamesWheelRearRight) ?? true))
            {
                item.NodeNamesWheelRearRight = rhs.NodeNamesWheelRearRight;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisForwardAxis) ?? true))
            {
                item.ChassisForwardAxis = rhs.ChassisForwardAxis;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisUpAxis) ?? true))
            {
                item.ChassisUpAxis = rhs.ChassisUpAxis;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisVehicleMass) ?? true))
            {
                item.ChassisVehicleMass = rhs.ChassisVehicleMass;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisFrictionEqualizer) ?? true))
            {
                item.ChassisFrictionEqualizer = rhs.ChassisFrictionEqualizer;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisTorqueRoll) ?? true))
            {
                item.ChassisTorqueRoll = rhs.ChassisTorqueRoll;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisTorquePitch) ?? true))
            {
                item.ChassisTorquePitch = rhs.ChassisTorquePitch;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisTorqueYaw) ?? true))
            {
                item.ChassisTorqueYaw = rhs.ChassisTorqueYaw;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisInertiaYaw) ?? true))
            {
                item.ChassisInertiaYaw = rhs.ChassisInertiaYaw;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisInertiaRoll) ?? true))
            {
                item.ChassisInertiaRoll = rhs.ChassisInertiaRoll;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisInertialPitch) ?? true))
            {
                item.ChassisInertialPitch = rhs.ChassisInertialPitch;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisExtraTorque) ?? true))
            {
                item.ChassisExtraTorque = rhs.ChassisExtraTorque;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisMaxVelocityPositionalFriction) ?? true))
            {
                item.ChassisMaxVelocityPositionalFriction = rhs.ChassisMaxVelocityPositionalFriction;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisFriction) ?? true))
            {
                item.ChassisFriction = rhs.ChassisFriction;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisRestitution) ?? true))
            {
                item.ChassisRestitution = rhs.ChassisRestitution;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisComOffsetForward) ?? true))
            {
                item.ChassisComOffsetForward = rhs.ChassisComOffsetForward;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisComOffsetUp) ?? true))
            {
                item.ChassisComOffsetUp = rhs.ChassisComOffsetUp;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelSlipAngle) ?? true))
            {
                item.WheelSlipAngle = rhs.WheelSlipAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelFriction) ?? true))
            {
                item.WheelFriction = rhs.WheelFriction;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelScale) ?? true))
            {
                item.WheelScale = rhs.WheelScale;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelMass) ?? true))
            {
                item.WheelMass = rhs.WheelMass;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelViscosityFriction) ?? true))
            {
                item.WheelViscosityFriction = rhs.WheelViscosityFriction;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelCastType) ?? true))
            {
                item.WheelCastType = rhs.WheelCastType;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionStrength) ?? true))
            {
                item.SuspensionStrength = rhs.SuspensionStrength;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionDampingCompression) ?? true))
            {
                item.SuspensionDampingCompression = rhs.SuspensionDampingCompression;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionDampingRelaxation) ?? true))
            {
                item.SuspensionDampingRelaxation = rhs.SuspensionDampingRelaxation;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionLength) ?? true))
            {
                item.SuspensionLength = rhs.SuspensionLength;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionOffsetsUpFront) ?? true))
            {
                item.SuspensionOffsetsUpFront = rhs.SuspensionOffsetsUpFront;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionOffsetsUpBack) ?? true))
            {
                item.SuspensionOffsetsUpBack = rhs.SuspensionOffsetsUpBack;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionOffsetsFront) ?? true))
            {
                item.SuspensionOffsetsFront = rhs.SuspensionOffsetsFront;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionOffsetsBack) ?? true))
            {
                item.SuspensionOffsetsBack = rhs.SuspensionOffsetsBack;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionOffsetsLateral) ?? true))
            {
                item.SuspensionOffsetsLateral = rhs.SuspensionOffsetsLateral;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SteeringMaxAngle) ?? true))
            {
                item.SteeringMaxAngle = rhs.SteeringMaxAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SteeringMaxAngleAtSpeed) ?? true))
            {
                item.SteeringMaxAngleAtSpeed = rhs.SteeringMaxAngleAtSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineMaxSpeed) ?? true))
            {
                item.EngineMaxSpeed = rhs.EngineMaxSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineMaxTorque) ?? true))
            {
                item.EngineMaxTorque = rhs.EngineMaxTorque;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineMinRpm) ?? true))
            {
                item.EngineMinRpm = rhs.EngineMinRpm;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineMaxRpm) ?? true))
            {
                item.EngineMaxRpm = rhs.EngineMaxRpm;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineOptRpm) ?? true))
            {
                item.EngineOptRpm = rhs.EngineOptRpm;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineTorqueMinRpm) ?? true))
            {
                item.EngineTorqueMinRpm = rhs.EngineTorqueMinRpm;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineTorqueMaxRpm) ?? true))
            {
                item.EngineTorqueMaxRpm = rhs.EngineTorqueMaxRpm;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineResistanceMinRpm) ?? true))
            {
                item.EngineResistanceMinRpm = rhs.EngineResistanceMinRpm;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineResistanceMaxRpm) ?? true))
            {
                item.EngineResistanceMaxRpm = rhs.EngineResistanceMaxRpm;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.EngineResistanceOptRpm) ?? true))
            {
                item.EngineResistanceOptRpm = rhs.EngineResistanceOptRpm;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionDownshiftRpm) ?? true))
            {
                item.TransmissionDownshiftRpm = rhs.TransmissionDownshiftRpm;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionUpshiftRpm) ?? true))
            {
                item.TransmissionUpshiftRpm = rhs.TransmissionUpshiftRpm;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionClutchDelayTime) ?? true))
            {
                item.TransmissionClutchDelayTime = rhs.TransmissionClutchDelayTime;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionGearRatioReverse) ?? true))
            {
                item.TransmissionGearRatioReverse = rhs.TransmissionGearRatioReverse;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionGearRatioFirst) ?? true))
            {
                item.TransmissionGearRatioFirst = rhs.TransmissionGearRatioFirst;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionGearRatioSecond) ?? true))
            {
                item.TransmissionGearRatioSecond = rhs.TransmissionGearRatioSecond;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionGearRatioThird) ?? true))
            {
                item.TransmissionGearRatioThird = rhs.TransmissionGearRatioThird;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionGearRatioFourth) ?? true))
            {
                item.TransmissionGearRatioFourth = rhs.TransmissionGearRatioFourth;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionTorqueRatioFrontWheels) ?? true))
            {
                item.TransmissionTorqueRatioFrontWheels = rhs.TransmissionTorqueRatioFrontWheels;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.TransmissionTorqueRatioBackWheels) ?? true))
            {
                item.TransmissionTorqueRatioBackWheels = rhs.TransmissionTorqueRatioBackWheels;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BrakesMaxTorque) ?? true))
            {
                item.BrakesMaxTorque = rhs.BrakesMaxTorque;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BrakesMinPedalInputToBlock) ?? true))
            {
                item.BrakesMinPedalInputToBlock = rhs.BrakesMinPedalInputToBlock;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BrakesWheelsMinTimeToBlock) ?? true))
            {
                item.BrakesWheelsMinTimeToBlock = rhs.BrakesWheelsMinTimeToBlock;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.AerodynamicsAirDensity) ?? true))
            {
                item.AerodynamicsAirDensity = rhs.AerodynamicsAirDensity;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.AerodynamicsFrontArea) ?? true))
            {
                item.AerodynamicsFrontArea = rhs.AerodynamicsFrontArea;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.AerodynamicsDragCoefficient) ?? true))
            {
                item.AerodynamicsDragCoefficient = rhs.AerodynamicsDragCoefficient;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.AerodynamicsLiftCoefficient) ?? true))
            {
                item.AerodynamicsLiftCoefficient = rhs.AerodynamicsLiftCoefficient;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.AerodynamicsExtraGravityMultiplier) ?? true))
            {
                item.AerodynamicsExtraGravityMultiplier = rhs.AerodynamicsExtraGravityMultiplier;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.VelocityDampingNormalSpin) ?? true))
            {
                item.VelocityDampingNormalSpin = rhs.VelocityDampingNormalSpin;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.VelocityDampingCollisionSpin) ?? true))
            {
                item.VelocityDampingCollisionSpin = rhs.VelocityDampingCollisionSpin;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.VelocityDampingCollisionThreshold) ?? true))
            {
                item.VelocityDampingCollisionThreshold = rhs.VelocityDampingCollisionThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingReorientStrength) ?? true))
            {
                item.HandlingReorientStrength = rhs.HandlingReorientStrength;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingReorientDamping) ?? true))
            {
                item.HandlingReorientDamping = rhs.HandlingReorientDamping;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingVerticalBoostForce) ?? true))
            {
                item.HandlingVerticalBoostForce = rhs.HandlingVerticalBoostForce;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingForwardBoostForce) ?? true))
            {
                item.HandlingForwardBoostForce = rhs.HandlingForwardBoostForce;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingBoostMaxVelocity) ?? true))
            {
                item.HandlingBoostMaxVelocity = rhs.HandlingBoostMaxVelocity;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingBoostDuration) ?? true))
            {
                item.HandlingBoostDuration = rhs.HandlingBoostDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingVerticalBoostDuration) ?? true))
            {
                item.HandlingVerticalBoostDuration = rhs.HandlingVerticalBoostDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingBoostRechargeDelay) ?? true))
            {
                item.HandlingBoostRechargeDelay = rhs.HandlingBoostRechargeDelay;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingBoostRechargeDuration) ?? true))
            {
                item.HandlingBoostRechargeDuration = rhs.HandlingBoostRechargeDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterStrengthFront) ?? true))
            {
                item.WaterStrengthFront = rhs.WaterStrengthFront;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterStrengthBack) ?? true))
            {
                item.WaterStrengthBack = rhs.WaterStrengthBack;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterDampFront) ?? true))
            {
                item.WaterDampFront = rhs.WaterDampFront;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterDampBack) ?? true))
            {
                item.WaterDampBack = rhs.WaterDampBack;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterDrive) ?? true))
            {
                item.WaterDrive = rhs.WaterDrive;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterRotationDamp) ?? true))
            {
                item.WaterRotationDamp = rhs.WaterRotationDamp;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BumperEnable) ?? true))
            {
                item.BumperEnable = rhs.BumperEnable;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BumperForward) ?? true))
            {
                item.BumperForward = rhs.BumperForward;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BumperUp) ?? true))
            {
                item.BumperUp = rhs.BumperUp;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BumperWidth) ?? true))
            {
                item.BumperWidth = rhs.BumperWidth;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.BumperRadius) ?? true))
            {
                item.BumperRadius = rhs.BumperRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CollisionDampingAngular) ?? true))
            {
                item.CollisionDampingAngular = rhs.CollisionDampingAngular;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CollisionMinSlopeCos) ?? true))
            {
                item.CollisionMinSlopeCos = rhs.CollisionMinSlopeCos;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonPValue) ?? true))
            {
                item.ControlsSteeringPidThirdPersonPValue = rhs.ControlsSteeringPidThirdPersonPValue;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonIValue) ?? true))
            {
                item.ControlsSteeringPidThirdPersonIValue = rhs.ControlsSteeringPidThirdPersonIValue;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidThirdPersonDValue) ?? true))
            {
                item.ControlsSteeringPidThirdPersonDValue = rhs.ControlsSteeringPidThirdPersonDValue;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonPValue) ?? true))
            {
                item.ControlsSteeringPidFirstPersonPValue = rhs.ControlsSteeringPidFirstPersonPValue;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonIValue) ?? true))
            {
                item.ControlsSteeringPidFirstPersonIValue = rhs.ControlsSteeringPidFirstPersonIValue;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ControlsSteeringPidFirstPersonDValue) ?? true))
            {
                item.ControlsSteeringPidFirstPersonDValue = rhs.ControlsSteeringPidFirstPersonDValue;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown1) ?? true))
            {
                item.Unknown1 = rhs.Unknown1;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown3) ?? true))
            {
                item.Unknown3 = rhs.Unknown3;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown4) ?? true))
            {
                item.Unknown4 = rhs.Unknown4;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown5) ?? true))
            {
                item.Unknown5 = rhs.Unknown5;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.Unknown6) ?? true))
            {
                item.Unknown6 = rhs.Unknown6;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseZoomFirstPerson) ?? true))
            {
                item.CameraBaseZoomFirstPerson = rhs.CameraBaseZoomFirstPerson;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseZoomThirdPersonNear) ?? true))
            {
                item.CameraBaseZoomThirdPersonNear = rhs.CameraBaseZoomThirdPersonNear;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseZoomThirdPersonFar) ?? true))
            {
                item.CameraBaseZoomThirdPersonFar = rhs.CameraBaseZoomThirdPersonFar;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseHeightFirstPerson) ?? true))
            {
                item.CameraBaseHeightFirstPerson = rhs.CameraBaseHeightFirstPerson;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseHeightThirdPersonNear) ?? true))
            {
                item.CameraBaseHeightThirdPersonNear = rhs.CameraBaseHeightThirdPersonNear;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseHeightThirdPersonFar) ?? true))
            {
                item.CameraBaseHeightThirdPersonFar = rhs.CameraBaseHeightThirdPersonFar;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseFovFirstPerson) ?? true))
            {
                item.CameraBaseFovFirstPerson = rhs.CameraBaseFovFirstPerson;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseFovThirdPersonNear) ?? true))
            {
                item.CameraBaseFovThirdPersonNear = rhs.CameraBaseFovThirdPersonNear;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBaseFovThirdPersonFar) ?? true))
            {
                item.CameraBaseFovThirdPersonFar = rhs.CameraBaseFovThirdPersonFar;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBoostFovOffsetNear) ?? true))
            {
                item.CameraBoostFovOffsetNear = rhs.CameraBoostFovOffsetNear;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraBoostFovOffsetFar) ?? true))
            {
                item.CameraBoostFovOffsetFar = rhs.CameraBoostFovOffsetFar;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraSpeedRatioZoomOffsetThirdPersonNear) ?? true))
            {
                item.CameraSpeedRatioZoomOffsetThirdPersonNear = rhs.CameraSpeedRatioZoomOffsetThirdPersonNear;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraSpeedRatioZoomOffsetThirdPersonFar) ?? true))
            {
                item.CameraSpeedRatioZoomOffsetThirdPersonFar = rhs.CameraSpeedRatioZoomOffsetThirdPersonFar;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraSpeedPidPValue) ?? true))
            {
                item.CameraSpeedPidPValue = rhs.CameraSpeedPidPValue;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraSpeedPidIValue) ?? true))
            {
                item.CameraSpeedPidIValue = rhs.CameraSpeedPidIValue;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraSpeedPidDValue) ?? true))
            {
                item.CameraSpeedPidDValue = rhs.CameraSpeedPidDValue;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraFovBlendFactorAiming) ?? true))
            {
                item.CameraFovBlendFactorAiming = rhs.CameraFovBlendFactorAiming;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraFovBlendFactorBoosting) ?? true))
            {
                item.CameraFovBlendFactorBoosting = rhs.CameraFovBlendFactorBoosting;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraPositionBlendFilteringFactor) ?? true))
            {
                item.CameraPositionBlendFilteringFactor = rhs.CameraPositionBlendFilteringFactor;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.CameraPositionRLOffsetFirstPerson) ?? true))
            {
                item.CameraPositionRLOffsetFirstPerson = rhs.CameraPositionRLOffsetFirstPerson;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.HandlingForwardBoostForceInWater) ?? true))
            {
                item.HandlingForwardBoostForceInWater = rhs.HandlingForwardBoostForceInWater;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterLinDamp) ?? true))
            {
                item.WaterLinDamp = rhs.WaterLinDamp;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WheelMaxFriction) ?? true))
            {
                item.WheelMaxFriction = rhs.WheelMaxFriction;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobAccelerationDeadZone) ?? true))
            {
                item.WaterBobAccelerationDeadZone = rhs.WaterBobAccelerationDeadZone;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobAccelerationPitch) ?? true))
            {
                item.WaterBobAccelerationPitch = rhs.WaterBobAccelerationPitch;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobAccelerationRoll) ?? true))
            {
                item.WaterBobAccelerationRoll = rhs.WaterBobAccelerationRoll;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobNaturalPitchPeriod) ?? true))
            {
                item.WaterBobNaturalPitchPeriod = rhs.WaterBobNaturalPitchPeriod;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobNaturalRollPeriod) ?? true))
            {
                item.WaterBobNaturalRollPeriod = rhs.WaterBobNaturalRollPeriod;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobNaturalAmplitude) ?? true))
            {
                item.WaterBobNaturalAmplitude = rhs.WaterBobNaturalAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobTorquePitch) ?? true))
            {
                item.WaterBobTorquePitch = rhs.WaterBobTorquePitch;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.WaterBobTorqueRoll) ?? true))
            {
                item.WaterBobTorqueRoll = rhs.WaterBobTorqueRoll;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.ChassisLinearDamping) ?? true))
            {
                item.ChassisLinearDamping = rhs.ChassisLinearDamping;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionMaxVisualSpeedCompression) ?? true))
            {
                item.SuspensionMaxVisualSpeedCompression = rhs.SuspensionMaxVisualSpeedCompression;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SuspensionMaxVisualSpeedRelaxation) ?? true))
            {
                item.SuspensionMaxVisualSpeedRelaxation = rhs.SuspensionMaxVisualSpeedRelaxation;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SlideFactorGainGreaterThanThreshold) ?? true))
            {
                item.SlideFactorGainGreaterThanThreshold = rhs.SlideFactorGainGreaterThanThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SlideFactorLostLessThanOrEqualThreshold) ?? true))
            {
                item.SlideFactorLostLessThanOrEqualThreshold = rhs.SlideFactorLostLessThanOrEqualThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SlideFactorThreshold) ?? true))
            {
                item.SlideFactorThreshold = rhs.SlideFactorThreshold;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SlideFactorFrictionAtMax) ?? true))
            {
                item.SlideFactorFrictionAtMax = rhs.SlideFactorFrictionAtMax;
            }
            if ((copyMask?.GetShouldTranslate((int)VehicleConfigData_FieldIndex.SlideFactorViscosityFrictionAtMax) ?? true))
            {
                item.SlideFactorViscosityFrictionAtMax = rhs.SlideFactorViscosityFrictionAtMax;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IVehicleConfigData item,
            IVehicleConfigDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public VehicleConfigData DeepCopy(
            IVehicleConfigDataGetter item,
            VehicleConfigData.TranslationMask? copyMask = null)
        {
            VehicleConfigData ret = (VehicleConfigData)((VehicleConfigDataCommon)((IVehicleConfigDataGetter)item).CommonInstance()!).GetNew();
            ((VehicleConfigDataSetterTranslationCommon)((IVehicleConfigDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public VehicleConfigData DeepCopy(
            IVehicleConfigDataGetter item,
            out VehicleConfigData.ErrorMask errorMask,
            VehicleConfigData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            VehicleConfigData ret = (VehicleConfigData)((VehicleConfigDataCommon)((IVehicleConfigDataGetter)item).CommonInstance()!).GetNew();
            ((VehicleConfigDataSetterTranslationCommon)((IVehicleConfigDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = VehicleConfigData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public VehicleConfigData DeepCopy(
            IVehicleConfigDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            VehicleConfigData ret = (VehicleConfigData)((VehicleConfigDataCommon)((IVehicleConfigDataGetter)item).CommonInstance()!).GetNew();
            ((VehicleConfigDataSetterTranslationCommon)((IVehicleConfigDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class VehicleConfigData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VehicleConfigData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => VehicleConfigData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VehicleConfigDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return VehicleConfigDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VehicleConfigDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVehicleConfigDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IVehicleConfigDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IVehicleConfigDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class VehicleConfigDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly VehicleConfigDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IVehicleConfigDataGetter item,
            MutagenWriter writer)
        {
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NodeNamesSuspensionFrontLeft,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NodeNamesSuspensionFrontRight,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NodeNamesSuspensionRearLeft,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NodeNamesSuspensionRearRight,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NodeNamesWheelFrontLeft,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NodeNamesWheelFrontRight,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NodeNamesWheelRearLeft,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.NodeNamesWheelRearRight,
                binaryType: StringBinaryType.PrependLengthWithNullIfContent);
            writer.Write(item.ChassisForwardAxis);
            writer.Write(item.ChassisUpAxis);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisVehicleMass);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisFrictionEqualizer);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisTorqueRoll);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisTorquePitch);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisTorqueYaw);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisInertiaYaw);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisInertiaRoll);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisInertialPitch);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisExtraTorque);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisMaxVelocityPositionalFriction);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisFriction);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisRestitution);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisComOffsetForward);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisComOffsetUp);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WheelSlipAngle);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WheelFriction);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WheelScale);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WheelMass);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WheelViscosityFriction);
            writer.Write(item.WheelCastType);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionStrength);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionDampingCompression);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionDampingRelaxation);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionLength);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionOffsetsUpFront);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionOffsetsUpBack);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionOffsetsFront);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionOffsetsBack);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionOffsetsLateral);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SteeringMaxAngle);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SteeringMaxAngleAtSpeed);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EngineMaxSpeed);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EngineMaxTorque);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EngineMinRpm);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EngineMaxRpm);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EngineOptRpm);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EngineTorqueMinRpm);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EngineTorqueMaxRpm);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EngineResistanceMinRpm);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EngineResistanceMaxRpm);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.EngineResistanceOptRpm);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TransmissionDownshiftRpm);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TransmissionUpshiftRpm);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TransmissionClutchDelayTime);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TransmissionGearRatioReverse);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TransmissionGearRatioFirst);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TransmissionGearRatioSecond);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TransmissionGearRatioThird);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TransmissionGearRatioFourth);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TransmissionTorqueRatioFrontWheels);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TransmissionTorqueRatioBackWheels);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BrakesMaxTorque);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BrakesMinPedalInputToBlock);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BrakesWheelsMinTimeToBlock);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AerodynamicsAirDensity);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AerodynamicsFrontArea);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AerodynamicsDragCoefficient);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AerodynamicsLiftCoefficient);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AerodynamicsExtraGravityMultiplier);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.VelocityDampingNormalSpin);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.VelocityDampingCollisionSpin);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.VelocityDampingCollisionThreshold);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HandlingReorientStrength);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HandlingReorientDamping);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HandlingVerticalBoostForce);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HandlingForwardBoostForce);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HandlingBoostMaxVelocity);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HandlingBoostDuration);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HandlingVerticalBoostDuration);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HandlingBoostRechargeDelay);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HandlingBoostRechargeDuration);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterStrengthFront);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterStrengthBack);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterDampFront);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterDampBack);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterDrive);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterRotationDamp);
            writer.Write(item.BumperEnable);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BumperForward);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BumperUp);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BumperWidth);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BumperRadius);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CollisionDampingAngular);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CollisionMinSlopeCos);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ControlsSteeringPidThirdPersonPValue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ControlsSteeringPidThirdPersonIValue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ControlsSteeringPidThirdPersonDValue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ControlsSteeringPidFirstPersonPValue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ControlsSteeringPidFirstPersonIValue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ControlsSteeringPidFirstPersonDValue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown1);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown2);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown3);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown5);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Unknown6);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBaseZoomFirstPerson);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBaseZoomThirdPersonNear);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBaseZoomThirdPersonFar);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBaseHeightFirstPerson);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBaseHeightThirdPersonNear);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBaseHeightThirdPersonFar);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBaseFovFirstPerson);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBaseFovThirdPersonNear);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBaseFovThirdPersonFar);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBoostFovOffsetNear);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraBoostFovOffsetFar);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraSpeedRatioZoomOffsetThirdPersonNear);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraSpeedRatioZoomOffsetThirdPersonFar);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraSpeedPidPValue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraSpeedPidIValue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraSpeedPidDValue);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraFovBlendFactorAiming);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraFovBlendFactorBoosting);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraPositionBlendFilteringFactor);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CameraPositionRLOffsetFirstPerson);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.HandlingForwardBoostForceInWater);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterLinDamp);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WheelMaxFriction);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterBobAccelerationDeadZone);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterBobAccelerationPitch);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterBobAccelerationRoll);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterBobNaturalPitchPeriod);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterBobNaturalRollPeriod);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterBobNaturalAmplitude);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterBobTorquePitch);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.WaterBobTorqueRoll);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ChassisLinearDamping);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionMaxVisualSpeedCompression);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SuspensionMaxVisualSpeedRelaxation);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SlideFactorGainGreaterThanThreshold);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SlideFactorLostLessThanOrEqualThreshold);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SlideFactorThreshold);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SlideFactorFrictionAtMax);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SlideFactorViscosityFrictionAtMax);
        }

        public void Write(
            MutagenWriter writer,
            IVehicleConfigDataGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.VCCD),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IVehicleConfigDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class VehicleConfigDataBinaryCreateTranslation
    {
        public static readonly VehicleConfigDataBinaryCreateTranslation Instance = new VehicleConfigDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IVehicleConfigData item,
            MutagenFrame frame)
        {
            item.NodeNamesSuspensionFrontLeft = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.NodeNamesSuspensionFrontRight = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.NodeNamesSuspensionRearLeft = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.NodeNamesSuspensionRearRight = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.NodeNamesWheelFrontLeft = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.NodeNamesWheelFrontRight = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.NodeNamesWheelRearLeft = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.NodeNamesWheelRearRight = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthWithNullIfContent,
                parseWhole: true);
            item.ChassisForwardAxis = frame.ReadUInt32();
            item.ChassisUpAxis = frame.ReadUInt32();
            item.ChassisVehicleMass = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisFrictionEqualizer = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisTorqueRoll = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisTorquePitch = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisTorqueYaw = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisInertiaYaw = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisInertiaRoll = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisInertialPitch = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisExtraTorque = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisMaxVelocityPositionalFriction = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisFriction = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisRestitution = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisComOffsetForward = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisComOffsetUp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WheelSlipAngle = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WheelFriction = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WheelScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WheelMass = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WheelViscosityFriction = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WheelCastType = frame.ReadInt32();
            item.SuspensionStrength = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SuspensionDampingCompression = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SuspensionDampingRelaxation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SuspensionLength = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SuspensionOffsetsUpFront = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SuspensionOffsetsUpBack = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SuspensionOffsetsFront = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SuspensionOffsetsBack = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SuspensionOffsetsLateral = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SteeringMaxAngle = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SteeringMaxAngleAtSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EngineMaxSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EngineMaxTorque = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EngineMinRpm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EngineMaxRpm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EngineOptRpm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EngineTorqueMinRpm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EngineTorqueMaxRpm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EngineResistanceMinRpm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EngineResistanceMaxRpm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.EngineResistanceOptRpm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TransmissionDownshiftRpm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TransmissionUpshiftRpm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TransmissionClutchDelayTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TransmissionGearRatioReverse = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TransmissionGearRatioFirst = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TransmissionGearRatioSecond = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TransmissionGearRatioThird = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TransmissionGearRatioFourth = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TransmissionTorqueRatioFrontWheels = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.TransmissionTorqueRatioBackWheels = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BrakesMaxTorque = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BrakesMinPedalInputToBlock = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BrakesWheelsMinTimeToBlock = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AerodynamicsAirDensity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AerodynamicsFrontArea = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AerodynamicsDragCoefficient = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AerodynamicsLiftCoefficient = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.AerodynamicsExtraGravityMultiplier = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.VelocityDampingNormalSpin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.VelocityDampingCollisionSpin = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.VelocityDampingCollisionThreshold = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HandlingReorientStrength = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HandlingReorientDamping = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HandlingVerticalBoostForce = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HandlingForwardBoostForce = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HandlingBoostMaxVelocity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HandlingBoostDuration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HandlingVerticalBoostDuration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HandlingBoostRechargeDelay = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HandlingBoostRechargeDuration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterStrengthFront = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterStrengthBack = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterDampFront = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterDampBack = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterDrive = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterRotationDamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BumperEnable = frame.ReadBoolean();
            item.BumperForward = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BumperUp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BumperWidth = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.BumperRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CollisionDampingAngular = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CollisionMinSlopeCos = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ControlsSteeringPidThirdPersonPValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ControlsSteeringPidThirdPersonIValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ControlsSteeringPidThirdPersonDValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ControlsSteeringPidFirstPersonPValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ControlsSteeringPidFirstPersonIValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ControlsSteeringPidFirstPersonDValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown4 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown5 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Unknown6 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBaseZoomFirstPerson = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBaseZoomThirdPersonNear = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBaseZoomThirdPersonFar = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBaseHeightFirstPerson = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBaseHeightThirdPersonNear = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBaseHeightThirdPersonFar = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBaseFovFirstPerson = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBaseFovThirdPersonNear = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBaseFovThirdPersonFar = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBoostFovOffsetNear = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraBoostFovOffsetFar = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraSpeedRatioZoomOffsetThirdPersonNear = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraSpeedRatioZoomOffsetThirdPersonFar = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraSpeedPidPValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraSpeedPidIValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraSpeedPidDValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraFovBlendFactorAiming = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraFovBlendFactorBoosting = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraPositionBlendFilteringFactor = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.CameraPositionRLOffsetFirstPerson = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.HandlingForwardBoostForceInWater = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterLinDamp = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WheelMaxFriction = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterBobAccelerationDeadZone = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterBobAccelerationPitch = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterBobAccelerationRoll = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterBobNaturalPitchPeriod = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterBobNaturalRollPeriod = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterBobNaturalAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterBobTorquePitch = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.WaterBobTorqueRoll = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ChassisLinearDamping = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SuspensionMaxVisualSpeedCompression = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SuspensionMaxVisualSpeedRelaxation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SlideFactorGainGreaterThanThreshold = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SlideFactorLostLessThanOrEqualThreshold = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SlideFactorThreshold = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SlideFactorFrictionAtMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.SlideFactorViscosityFrictionAtMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class VehicleConfigDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IVehicleConfigDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleConfigDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class VehicleConfigDataBinaryOverlay :
        PluginBinaryOverlay,
        IVehicleConfigDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => VehicleConfigData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => VehicleConfigData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => VehicleConfigDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => VehicleConfigDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IVehicleConfigDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IVehicleConfigDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IVehicleConfigDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => VehicleConfigDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((VehicleConfigDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region NodeNamesSuspensionFrontLeft
        public String NodeNamesSuspensionFrontLeft => BinaryStringUtility.ParsePrependedString(_structData.Slice(0x0), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int NodeNamesSuspensionFrontLeftEndingPos;
        #endregion
        #region NodeNamesSuspensionFrontRight
        public String NodeNamesSuspensionFrontRight => BinaryStringUtility.ParsePrependedString(_structData.Slice(NodeNamesSuspensionFrontLeftEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int NodeNamesSuspensionFrontRightEndingPos;
        #endregion
        #region NodeNamesSuspensionRearLeft
        public String NodeNamesSuspensionRearLeft => BinaryStringUtility.ParsePrependedString(_structData.Slice(NodeNamesSuspensionFrontRightEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int NodeNamesSuspensionRearLeftEndingPos;
        #endregion
        #region NodeNamesSuspensionRearRight
        public String NodeNamesSuspensionRearRight => BinaryStringUtility.ParsePrependedString(_structData.Slice(NodeNamesSuspensionRearLeftEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int NodeNamesSuspensionRearRightEndingPos;
        #endregion
        #region NodeNamesWheelFrontLeft
        public String NodeNamesWheelFrontLeft => BinaryStringUtility.ParsePrependedString(_structData.Slice(NodeNamesSuspensionRearRightEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int NodeNamesWheelFrontLeftEndingPos;
        #endregion
        #region NodeNamesWheelFrontRight
        public String NodeNamesWheelFrontRight => BinaryStringUtility.ParsePrependedString(_structData.Slice(NodeNamesWheelFrontLeftEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int NodeNamesWheelFrontRightEndingPos;
        #endregion
        #region NodeNamesWheelRearLeft
        public String NodeNamesWheelRearLeft => BinaryStringUtility.ParsePrependedString(_structData.Slice(NodeNamesWheelFrontRightEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int NodeNamesWheelRearLeftEndingPos;
        #endregion
        #region NodeNamesWheelRearRight
        public String NodeNamesWheelRearRight => BinaryStringUtility.ParsePrependedString(_structData.Slice(NodeNamesWheelRearLeftEndingPos), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int NodeNamesWheelRearRightEndingPos;
        #endregion
        public UInt32 ChassisForwardAxis => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(NodeNamesWheelRearRightEndingPos, 0x4));
        public UInt32 ChassisUpAxis => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(NodeNamesWheelRearRightEndingPos + 0x4, 0x4));
        public Single ChassisVehicleMass => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x8, 0x4).Float();
        public Single ChassisFrictionEqualizer => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xC, 0x4).Float();
        public Single ChassisTorqueRoll => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x10, 0x4).Float();
        public Single ChassisTorquePitch => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x14, 0x4).Float();
        public Single ChassisTorqueYaw => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x18, 0x4).Float();
        public Single ChassisInertiaYaw => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1C, 0x4).Float();
        public Single ChassisInertiaRoll => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x20, 0x4).Float();
        public Single ChassisInertialPitch => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x24, 0x4).Float();
        public Single ChassisExtraTorque => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x28, 0x4).Float();
        public Single ChassisMaxVelocityPositionalFriction => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x2C, 0x4).Float();
        public Single ChassisFriction => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x30, 0x4).Float();
        public Single ChassisRestitution => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x34, 0x4).Float();
        public Single ChassisComOffsetForward => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x38, 0x4).Float();
        public Single ChassisComOffsetUp => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x3C, 0x4).Float();
        public Single WheelSlipAngle => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x40, 0x4).Float();
        public Single WheelFriction => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x44, 0x4).Float();
        public Single WheelScale => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x48, 0x4).Float();
        public Single WheelMass => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x4C, 0x4).Float();
        public Single WheelViscosityFriction => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x50, 0x4).Float();
        public Int32 WheelCastType => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(NodeNamesWheelRearRightEndingPos + 0x54, 0x4));
        public Single SuspensionStrength => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x58, 0x4).Float();
        public Single SuspensionDampingCompression => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x5C, 0x4).Float();
        public Single SuspensionDampingRelaxation => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x60, 0x4).Float();
        public Single SuspensionLength => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x64, 0x4).Float();
        public Single SuspensionOffsetsUpFront => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x68, 0x4).Float();
        public Single SuspensionOffsetsUpBack => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x6C, 0x4).Float();
        public Single SuspensionOffsetsFront => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x70, 0x4).Float();
        public Single SuspensionOffsetsBack => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x74, 0x4).Float();
        public Single SuspensionOffsetsLateral => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x78, 0x4).Float();
        public Single SteeringMaxAngle => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x7C, 0x4).Float();
        public Single SteeringMaxAngleAtSpeed => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x80, 0x4).Float();
        public Single EngineMaxSpeed => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x84, 0x4).Float();
        public Single EngineMaxTorque => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x88, 0x4).Float();
        public Single EngineMinRpm => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x8C, 0x4).Float();
        public Single EngineMaxRpm => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x90, 0x4).Float();
        public Single EngineOptRpm => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x94, 0x4).Float();
        public Single EngineTorqueMinRpm => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x98, 0x4).Float();
        public Single EngineTorqueMaxRpm => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x9C, 0x4).Float();
        public Single EngineResistanceMinRpm => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xA0, 0x4).Float();
        public Single EngineResistanceMaxRpm => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xA4, 0x4).Float();
        public Single EngineResistanceOptRpm => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xA8, 0x4).Float();
        public Single TransmissionDownshiftRpm => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xAC, 0x4).Float();
        public Single TransmissionUpshiftRpm => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xB0, 0x4).Float();
        public Single TransmissionClutchDelayTime => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xB4, 0x4).Float();
        public Single TransmissionGearRatioReverse => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xB8, 0x4).Float();
        public Single TransmissionGearRatioFirst => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xBC, 0x4).Float();
        public Single TransmissionGearRatioSecond => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xC0, 0x4).Float();
        public Single TransmissionGearRatioThird => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xC4, 0x4).Float();
        public Single TransmissionGearRatioFourth => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xC8, 0x4).Float();
        public Single TransmissionTorqueRatioFrontWheels => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xCC, 0x4).Float();
        public Single TransmissionTorqueRatioBackWheels => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xD0, 0x4).Float();
        public Single BrakesMaxTorque => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xD4, 0x4).Float();
        public Single BrakesMinPedalInputToBlock => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xD8, 0x4).Float();
        public Single BrakesWheelsMinTimeToBlock => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xDC, 0x4).Float();
        public Single AerodynamicsAirDensity => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xE0, 0x4).Float();
        public Single AerodynamicsFrontArea => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xE4, 0x4).Float();
        public Single AerodynamicsDragCoefficient => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xE8, 0x4).Float();
        public Single AerodynamicsLiftCoefficient => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xEC, 0x4).Float();
        public Single AerodynamicsExtraGravityMultiplier => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xF0, 0x4).Float();
        public Single VelocityDampingNormalSpin => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xF4, 0x4).Float();
        public Single VelocityDampingCollisionSpin => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xF8, 0x4).Float();
        public Single VelocityDampingCollisionThreshold => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0xFC, 0x4).Float();
        public Single HandlingReorientStrength => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x100, 0x4).Float();
        public Single HandlingReorientDamping => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x104, 0x4).Float();
        public Single HandlingVerticalBoostForce => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x108, 0x4).Float();
        public Single HandlingForwardBoostForce => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x10C, 0x4).Float();
        public Single HandlingBoostMaxVelocity => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x110, 0x4).Float();
        public Single HandlingBoostDuration => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x114, 0x4).Float();
        public Single HandlingVerticalBoostDuration => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x118, 0x4).Float();
        public Single HandlingBoostRechargeDelay => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x11C, 0x4).Float();
        public Single HandlingBoostRechargeDuration => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x120, 0x4).Float();
        public Single WaterStrengthFront => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x124, 0x4).Float();
        public Single WaterStrengthBack => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x128, 0x4).Float();
        public Single WaterDampFront => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x12C, 0x4).Float();
        public Single WaterDampBack => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x130, 0x4).Float();
        public Single WaterDrive => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x134, 0x4).Float();
        public Single WaterRotationDamp => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x138, 0x4).Float();
        public Boolean BumperEnable => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x13C, 0x1)[0] >= 1;
        public Single BumperForward => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x13D, 0x4).Float();
        public Single BumperUp => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x141, 0x4).Float();
        public Single BumperWidth => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x145, 0x4).Float();
        public Single BumperRadius => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x149, 0x4).Float();
        public Single CollisionDampingAngular => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x14D, 0x4).Float();
        public Single CollisionMinSlopeCos => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x151, 0x4).Float();
        public Single ControlsSteeringPidThirdPersonPValue => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x155, 0x4).Float();
        public Single ControlsSteeringPidThirdPersonIValue => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x159, 0x4).Float();
        public Single ControlsSteeringPidThirdPersonDValue => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x15D, 0x4).Float();
        public Single ControlsSteeringPidFirstPersonPValue => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x161, 0x4).Float();
        public Single ControlsSteeringPidFirstPersonIValue => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x165, 0x4).Float();
        public Single ControlsSteeringPidFirstPersonDValue => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x169, 0x4).Float();
        public Single Unknown1 => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x16D, 0x4).Float();
        public Single Unknown2 => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x171, 0x4).Float();
        public Single Unknown3 => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x175, 0x4).Float();
        public Single Unknown4 => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x179, 0x4).Float();
        public Single Unknown5 => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x17D, 0x4).Float();
        public Single Unknown6 => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x181, 0x4).Float();
        public Single CameraBaseZoomFirstPerson => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x185, 0x4).Float();
        public Single CameraBaseZoomThirdPersonNear => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x189, 0x4).Float();
        public Single CameraBaseZoomThirdPersonFar => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x18D, 0x4).Float();
        public Single CameraBaseHeightFirstPerson => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x191, 0x4).Float();
        public Single CameraBaseHeightThirdPersonNear => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x195, 0x4).Float();
        public Single CameraBaseHeightThirdPersonFar => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x199, 0x4).Float();
        public Single CameraBaseFovFirstPerson => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x19D, 0x4).Float();
        public Single CameraBaseFovThirdPersonNear => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1A1, 0x4).Float();
        public Single CameraBaseFovThirdPersonFar => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1A5, 0x4).Float();
        public Single CameraBoostFovOffsetNear => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1A9, 0x4).Float();
        public Single CameraBoostFovOffsetFar => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1AD, 0x4).Float();
        public Single CameraSpeedRatioZoomOffsetThirdPersonNear => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1B1, 0x4).Float();
        public Single CameraSpeedRatioZoomOffsetThirdPersonFar => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1B5, 0x4).Float();
        public Single CameraSpeedPidPValue => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1B9, 0x4).Float();
        public Single CameraSpeedPidIValue => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1BD, 0x4).Float();
        public Single CameraSpeedPidDValue => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1C1, 0x4).Float();
        public Single CameraFovBlendFactorAiming => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1C5, 0x4).Float();
        public Single CameraFovBlendFactorBoosting => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1C9, 0x4).Float();
        public Single CameraPositionBlendFilteringFactor => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1CD, 0x4).Float();
        public Single CameraPositionRLOffsetFirstPerson => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1D1, 0x4).Float();
        public Single HandlingForwardBoostForceInWater => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1D5, 0x4).Float();
        public Single WaterLinDamp => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1D9, 0x4).Float();
        public Single WheelMaxFriction => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1DD, 0x4).Float();
        public Single WaterBobAccelerationDeadZone => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1E1, 0x4).Float();
        public Single WaterBobAccelerationPitch => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1E5, 0x4).Float();
        public Single WaterBobAccelerationRoll => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1E9, 0x4).Float();
        public Single WaterBobNaturalPitchPeriod => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1ED, 0x4).Float();
        public Single WaterBobNaturalRollPeriod => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1F1, 0x4).Float();
        public Single WaterBobNaturalAmplitude => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1F5, 0x4).Float();
        public Single WaterBobTorquePitch => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1F9, 0x4).Float();
        public Single WaterBobTorqueRoll => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x1FD, 0x4).Float();
        public Single ChassisLinearDamping => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x201, 0x4).Float();
        public Single SuspensionMaxVisualSpeedCompression => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x205, 0x4).Float();
        public Single SuspensionMaxVisualSpeedRelaxation => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x209, 0x4).Float();
        public Single SlideFactorGainGreaterThanThreshold => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x20D, 0x4).Float();
        public Single SlideFactorLostLessThanOrEqualThreshold => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x211, 0x4).Float();
        public Single SlideFactorThreshold => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x215, 0x4).Float();
        public Single SlideFactorFrictionAtMax => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x219, 0x4).Float();
        public Single SlideFactorViscosityFrictionAtMax => _structData.Slice(NodeNamesWheelRearRightEndingPos + 0x21D, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected VehicleConfigDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void VehicleConfigDataParseEndingPositions(
            VehicleConfigDataBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.NodeNamesSuspensionFrontLeftEndingPos = BinaryPrimitives.ReadInt32LittleEndian(ret._structData) + 4;
            ret.NodeNamesSuspensionFrontRightEndingPos = ret.NodeNamesSuspensionFrontLeftEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.NodeNamesSuspensionFrontLeftEndingPos)) + 4;
            ret.NodeNamesSuspensionRearLeftEndingPos = ret.NodeNamesSuspensionFrontRightEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.NodeNamesSuspensionFrontRightEndingPos)) + 4;
            ret.NodeNamesSuspensionRearRightEndingPos = ret.NodeNamesSuspensionRearLeftEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.NodeNamesSuspensionRearLeftEndingPos)) + 4;
            ret.NodeNamesWheelFrontLeftEndingPos = ret.NodeNamesSuspensionRearRightEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.NodeNamesSuspensionRearRightEndingPos)) + 4;
            ret.NodeNamesWheelFrontRightEndingPos = ret.NodeNamesWheelFrontLeftEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.NodeNamesWheelFrontLeftEndingPos)) + 4;
            ret.NodeNamesWheelRearLeftEndingPos = ret.NodeNamesWheelFrontRightEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.NodeNamesWheelFrontRightEndingPos)) + 4;
            ret.NodeNamesWheelRearRightEndingPos = ret.NodeNamesWheelRearLeftEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._structData.Slice(ret.NodeNamesWheelRearLeftEndingPos)) + 4;
        }

        public static IVehicleConfigDataGetter VehicleConfigDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new VehicleConfigDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            VehicleConfigDataParseEndingPositions(ret, package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IVehicleConfigDataGetter VehicleConfigDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return VehicleConfigDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            VehicleConfigDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IVehicleConfigDataGetter rhs) return false;
            return ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IVehicleConfigDataGetter? obj)
        {
            return ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((VehicleConfigDataCommon)((IVehicleConfigDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

