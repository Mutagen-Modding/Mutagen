/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class Effect :
        IEffect,
        IEquatable<IEffectGetter>,
        ILoquiObjectSetter<Effect>
    {
        #region Ctor
        public Effect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region BaseEffect
        private readonly IFormLinkNullable<IMagicEffectGetter> _BaseEffect = new FormLinkNullable<IMagicEffectGetter>();
        public IFormLinkNullable<IMagicEffectGetter> BaseEffect
        {
            get => _BaseEffect;
            set => _BaseEffect.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMagicEffectGetter> IEffectGetter.BaseEffect => this.BaseEffect;
        #endregion
        #region Data
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectData? _Data;
        public EffectData? Data
        {
            get => _Data;
            set => _Data = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEffectDataGetter? IEffectGetter.Data => this.Data;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IEffectGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Magnitude
        private readonly IFormLinkNullable<IGlobalGetter> _Magnitude = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> Magnitude
        {
            get => _Magnitude;
            set => _Magnitude.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IEffectGetter.Magnitude => this.Magnitude;
        #endregion
        #region Area
        private readonly IFormLinkNullable<IGlobalGetter> _Area = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> Area
        {
            get => _Area;
            set => _Area.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IEffectGetter.Area => this.Area;
        #endregion
        #region Duration
        private readonly IFormLinkNullable<IGlobalGetter> _Duration = new FormLinkNullable<IGlobalGetter>();
        public IFormLinkNullable<IGlobalGetter> Duration
        {
            get => _Duration;
            set => _Duration.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IGlobalGetter> IEffectGetter.Duration => this.Duration;
        #endregion
        #region MAGF
        public Int32? MAGF { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IEffectGetter.MAGF => this.MAGF;
        #endregion
        #region EFIF
        public Int32? EFIF { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IEffectGetter.EFIF => this.EFIF;
        #endregion
        #region MUID
        public Int32? MUID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IEffectGetter.MUID => this.MUID;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            EffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IEffectGetter rhs) return false;
            return ((EffectCommon)((IEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IEffectGetter? obj)
        {
            return ((EffectCommon)((IEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((EffectCommon)((IEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.BaseEffect = initialValue;
                this.Data = new MaskItem<TItem, EffectData.Mask<TItem>?>(initialValue, new EffectData.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Magnitude = initialValue;
                this.Area = initialValue;
                this.Duration = initialValue;
                this.MAGF = initialValue;
                this.EFIF = initialValue;
                this.MUID = initialValue;
            }

            public Mask(
                TItem BaseEffect,
                TItem Data,
                TItem Conditions,
                TItem Magnitude,
                TItem Area,
                TItem Duration,
                TItem MAGF,
                TItem EFIF,
                TItem MUID)
            {
                this.BaseEffect = BaseEffect;
                this.Data = new MaskItem<TItem, EffectData.Mask<TItem>?>(Data, new EffectData.Mask<TItem>(Data));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Magnitude = Magnitude;
                this.Area = Area;
                this.Duration = Duration;
                this.MAGF = MAGF;
                this.EFIF = EFIF;
                this.MUID = MUID;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem BaseEffect;
            public MaskItem<TItem, EffectData.Mask<TItem>?>? Data { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem Magnitude;
            public TItem Area;
            public TItem Duration;
            public TItem MAGF;
            public TItem EFIF;
            public TItem MUID;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.BaseEffect, rhs.BaseEffect)) return false;
                if (!object.Equals(this.Data, rhs.Data)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Magnitude, rhs.Magnitude)) return false;
                if (!object.Equals(this.Area, rhs.Area)) return false;
                if (!object.Equals(this.Duration, rhs.Duration)) return false;
                if (!object.Equals(this.MAGF, rhs.MAGF)) return false;
                if (!object.Equals(this.EFIF, rhs.EFIF)) return false;
                if (!object.Equals(this.MUID, rhs.MUID)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.BaseEffect);
                hash.Add(this.Data);
                hash.Add(this.Conditions);
                hash.Add(this.Magnitude);
                hash.Add(this.Area);
                hash.Add(this.Duration);
                hash.Add(this.MAGF);
                hash.Add(this.EFIF);
                hash.Add(this.MUID);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.BaseEffect)) return false;
                if (Data != null)
                {
                    if (!eval(this.Data.Overall)) return false;
                    if (this.Data.Specific != null && !this.Data.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Magnitude)) return false;
                if (!eval(this.Area)) return false;
                if (!eval(this.Duration)) return false;
                if (!eval(this.MAGF)) return false;
                if (!eval(this.EFIF)) return false;
                if (!eval(this.MUID)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.BaseEffect)) return true;
                if (Data != null)
                {
                    if (eval(this.Data.Overall)) return true;
                    if (this.Data.Specific != null && this.Data.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Magnitude)) return true;
                if (eval(this.Area)) return true;
                if (eval(this.Duration)) return true;
                if (eval(this.MAGF)) return true;
                if (eval(this.EFIF)) return true;
                if (eval(this.MUID)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Effect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.BaseEffect = eval(this.BaseEffect);
                obj.Data = this.Data == null ? null : new MaskItem<R, EffectData.Mask<R>?>(eval(this.Data.Overall), this.Data.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Magnitude = eval(this.Magnitude);
                obj.Area = eval(this.Area);
                obj.Duration = eval(this.Duration);
                obj.MAGF = eval(this.MAGF);
                obj.EFIF = eval(this.EFIF);
                obj.MUID = eval(this.MUID);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Effect.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Effect.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Effect.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.BaseEffect ?? true)
                    {
                        sb.AppendItem(BaseEffect, "BaseEffect");
                    }
                    if (printMask?.Data?.Overall ?? true)
                    {
                        Data?.Print(sb);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Magnitude ?? true)
                    {
                        sb.AppendItem(Magnitude, "Magnitude");
                    }
                    if (printMask?.Area ?? true)
                    {
                        sb.AppendItem(Area, "Area");
                    }
                    if (printMask?.Duration ?? true)
                    {
                        sb.AppendItem(Duration, "Duration");
                    }
                    if (printMask?.MAGF ?? true)
                    {
                        sb.AppendItem(MAGF, "MAGF");
                    }
                    if (printMask?.EFIF ?? true)
                    {
                        sb.AppendItem(EFIF, "EFIF");
                    }
                    if (printMask?.MUID ?? true)
                    {
                        sb.AppendItem(MUID, "MUID");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? BaseEffect;
            public MaskItem<Exception?, EffectData.ErrorMask?>? Data;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? Magnitude;
            public Exception? Area;
            public Exception? Duration;
            public Exception? MAGF;
            public Exception? EFIF;
            public Exception? MUID;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Effect_FieldIndex enu = (Effect_FieldIndex)index;
                switch (enu)
                {
                    case Effect_FieldIndex.BaseEffect:
                        return BaseEffect;
                    case Effect_FieldIndex.Data:
                        return Data;
                    case Effect_FieldIndex.Conditions:
                        return Conditions;
                    case Effect_FieldIndex.Magnitude:
                        return Magnitude;
                    case Effect_FieldIndex.Area:
                        return Area;
                    case Effect_FieldIndex.Duration:
                        return Duration;
                    case Effect_FieldIndex.MAGF:
                        return MAGF;
                    case Effect_FieldIndex.EFIF:
                        return EFIF;
                    case Effect_FieldIndex.MUID:
                        return MUID;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Effect_FieldIndex enu = (Effect_FieldIndex)index;
                switch (enu)
                {
                    case Effect_FieldIndex.BaseEffect:
                        this.BaseEffect = ex;
                        break;
                    case Effect_FieldIndex.Data:
                        this.Data = new MaskItem<Exception?, EffectData.ErrorMask?>(ex, null);
                        break;
                    case Effect_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Effect_FieldIndex.Magnitude:
                        this.Magnitude = ex;
                        break;
                    case Effect_FieldIndex.Area:
                        this.Area = ex;
                        break;
                    case Effect_FieldIndex.Duration:
                        this.Duration = ex;
                        break;
                    case Effect_FieldIndex.MAGF:
                        this.MAGF = ex;
                        break;
                    case Effect_FieldIndex.EFIF:
                        this.EFIF = ex;
                        break;
                    case Effect_FieldIndex.MUID:
                        this.MUID = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Effect_FieldIndex enu = (Effect_FieldIndex)index;
                switch (enu)
                {
                    case Effect_FieldIndex.BaseEffect:
                        this.BaseEffect = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.Data:
                        this.Data = (MaskItem<Exception?, EffectData.ErrorMask?>?)obj;
                        break;
                    case Effect_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Effect_FieldIndex.Magnitude:
                        this.Magnitude = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.Area:
                        this.Area = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.Duration:
                        this.Duration = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.MAGF:
                        this.MAGF = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.EFIF:
                        this.EFIF = (Exception?)obj;
                        break;
                    case Effect_FieldIndex.MUID:
                        this.MUID = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (BaseEffect != null) return true;
                if (Data != null) return true;
                if (Conditions != null) return true;
                if (Magnitude != null) return true;
                if (Area != null) return true;
                if (Duration != null) return true;
                if (MAGF != null) return true;
                if (EFIF != null) return true;
                if (MUID != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(BaseEffect, "BaseEffect");
                }
                Data?.Print(sb);
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Magnitude, "Magnitude");
                }
                {
                    sb.AppendItem(Area, "Area");
                }
                {
                    sb.AppendItem(Duration, "Duration");
                }
                {
                    sb.AppendItem(MAGF, "MAGF");
                }
                {
                    sb.AppendItem(EFIF, "EFIF");
                }
                {
                    sb.AppendItem(MUID, "MUID");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.BaseEffect = this.BaseEffect.Combine(rhs.BaseEffect);
                ret.Data = this.Data.Combine(rhs.Data, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Magnitude = this.Magnitude.Combine(rhs.Magnitude);
                ret.Area = this.Area.Combine(rhs.Area);
                ret.Duration = this.Duration.Combine(rhs.Duration);
                ret.MAGF = this.MAGF.Combine(rhs.MAGF);
                ret.EFIF = this.EFIF.Combine(rhs.EFIF);
                ret.MUID = this.MUID.Combine(rhs.MUID);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool BaseEffect;
            public EffectData.TranslationMask? Data;
            public Condition.TranslationMask? Conditions;
            public bool Magnitude;
            public bool Area;
            public bool Duration;
            public bool MAGF;
            public bool EFIF;
            public bool MUID;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.BaseEffect = defaultOn;
                this.Magnitude = defaultOn;
                this.Area = defaultOn;
                this.Duration = defaultOn;
                this.MAGF = defaultOn;
                this.EFIF = defaultOn;
                this.MUID = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((BaseEffect, null));
                ret.Add((Data != null ? Data.OnOverall : DefaultOn, Data?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Magnitude, null));
                ret.Add((Area, null));
                ret.Add((Duration, null));
                ret.Add((MAGF, null));
                ret.Add((EFIF, null));
                ret.Add((MUID, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => EffectCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => EffectSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => EffectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Effect CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Effect();
            ((EffectSetterCommon)((IEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Effect item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((EffectSetterCommon)((IEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Effect GetNew()
        {
            return new Effect();
        }

    }
    #endregion

    #region Interface
    public partial interface IEffect :
        IEffectGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IEffect>
    {
        new IFormLinkNullable<IMagicEffectGetter> BaseEffect { get; set; }
        new EffectData? Data { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new IFormLinkNullable<IGlobalGetter> Magnitude { get; set; }
        new IFormLinkNullable<IGlobalGetter> Area { get; set; }
        new IFormLinkNullable<IGlobalGetter> Duration { get; set; }
        new Int32? MAGF { get; set; }
        new Int32? EFIF { get; set; }
        new Int32? MUID { get; set; }
    }

    public partial interface IEffectGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IEffectGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Effect_Registration.Instance;
        IFormLinkNullableGetter<IMagicEffectGetter> BaseEffect { get; }
        IEffectDataGetter? Data { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IFormLinkNullableGetter<IGlobalGetter> Magnitude { get; }
        IFormLinkNullableGetter<IGlobalGetter> Area { get; }
        IFormLinkNullableGetter<IGlobalGetter> Duration { get; }
        Int32? MAGF { get; }
        Int32? EFIF { get; }
        Int32? MUID { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class EffectMixIn
    {
        public static void Clear(this IEffect item)
        {
            ((EffectSetterCommon)((IEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Effect.Mask<bool> GetEqualsMask(
            this IEffectGetter item,
            IEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EffectCommon)((IEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IEffectGetter item,
            string? name = null,
            Effect.Mask<bool>? printMask = null)
        {
            return ((EffectCommon)((IEffectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Effect.Mask<bool>? printMask = null)
        {
            ((EffectCommon)((IEffectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IEffectGetter item,
            IEffectGetter rhs,
            Effect.TranslationMask? equalsMask = null)
        {
            return ((EffectCommon)((IEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IEffect lhs,
            IEffectGetter rhs)
        {
            ((EffectSetterTranslationCommon)((IEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IEffect lhs,
            IEffectGetter rhs,
            Effect.TranslationMask? copyMask = null)
        {
            ((EffectSetterTranslationCommon)((IEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IEffect lhs,
            IEffectGetter rhs,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectSetterTranslationCommon)((IEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Effect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEffect lhs,
            IEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EffectSetterTranslationCommon)((IEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Effect DeepCopy(
            this IEffectGetter item,
            Effect.TranslationMask? copyMask = null)
        {
            return ((EffectSetterTranslationCommon)((IEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Effect DeepCopy(
            this IEffectGetter item,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? copyMask = null)
        {
            return ((EffectSetterTranslationCommon)((IEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Effect DeepCopy(
            this IEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EffectSetterTranslationCommon)((IEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((EffectSetterCommon)((IEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum Effect_FieldIndex
    {
        BaseEffect = 0,
        Data = 1,
        Conditions = 2,
        Magnitude = 3,
        Area = 4,
        Duration = 5,
        MAGF = 6,
        EFIF = 7,
        MUID = 8,
    }
    #endregion

    #region Registration
    internal partial class Effect_Registration : ILoquiRegistration
    {
        public static readonly Effect_Registration Instance = new Effect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(Effect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Effect.ErrorMask);

        public static readonly Type ClassType = typeof(Effect);

        public static readonly Type GetterType = typeof(IEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEffect);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.Effect";

        public const string Name = "Effect";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(
                RecordTypes.EFID,
                RecordTypes.EFIT,
                RecordTypes.CTDA,
                RecordTypes.MNAM,
                RecordTypes.ANAM,
                RecordTypes.ZNAM,
                RecordTypes.MAGF,
                RecordTypes.EFIF,
                RecordTypes.MUID);
            var all = RecordCollection.Factory(
                RecordTypes.EFID,
                RecordTypes.EFIT,
                RecordTypes.CTDA,
                RecordTypes.MNAM,
                RecordTypes.ANAM,
                RecordTypes.ZNAM,
                RecordTypes.MAGF,
                RecordTypes.EFIF,
                RecordTypes.MUID,
                RecordTypes.CITC,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(EffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class EffectSetterCommon
    {
        public static readonly EffectSetterCommon Instance = new EffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEffect item)
        {
            ClearPartial();
            item.BaseEffect.Clear();
            item.Data = null;
            item.Conditions.Clear();
            item.Magnitude.Clear();
            item.Area.Clear();
            item.Duration.Clear();
            item.MAGF = default;
            item.EFIF = default;
            item.MUID = default;
        }
        
        #region Mutagen
        public void RemapLinks(IEffect obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.BaseEffect.Relink(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.Magnitude.Relink(mapping);
            obj.Area.Relink(mapping);
            obj.Duration.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IEffect item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: EffectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class EffectCommon
    {
        public static readonly EffectCommon Instance = new EffectCommon();

        public Effect.Mask<bool> GetEqualsMask(
            IEffectGetter item,
            IEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Effect.Mask<bool>(false);
            ((EffectCommon)((IEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEffectGetter item,
            IEffectGetter rhs,
            Effect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.BaseEffect = item.BaseEffect.Equals(rhs.BaseEffect);
            ret.Data = EqualsMaskHelper.EqualsHelper(
                item.Data,
                rhs.Data,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Magnitude = item.Magnitude.Equals(rhs.Magnitude);
            ret.Area = item.Area.Equals(rhs.Area);
            ret.Duration = item.Duration.Equals(rhs.Duration);
            ret.MAGF = item.MAGF == rhs.MAGF;
            ret.EFIF = item.EFIF == rhs.EFIF;
            ret.MUID = item.MUID == rhs.MUID;
        }
        
        public string Print(
            IEffectGetter item,
            string? name = null,
            Effect.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Effect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Effect =>");
            }
            else
            {
                sb.AppendLine($"{name} (Effect) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IEffectGetter item,
            StructuredStringBuilder sb,
            Effect.Mask<bool>? printMask = null)
        {
            if (printMask?.BaseEffect ?? true)
            {
                sb.AppendItem(item.BaseEffect.FormKeyNullable, "BaseEffect");
            }
            if ((printMask?.Data?.Overall ?? true)
                && item.Data is {} DataItem)
            {
                DataItem?.Print(sb, "Data");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Magnitude ?? true)
            {
                sb.AppendItem(item.Magnitude.FormKeyNullable, "Magnitude");
            }
            if (printMask?.Area ?? true)
            {
                sb.AppendItem(item.Area.FormKeyNullable, "Area");
            }
            if (printMask?.Duration ?? true)
            {
                sb.AppendItem(item.Duration.FormKeyNullable, "Duration");
            }
            if ((printMask?.MAGF ?? true)
                && item.MAGF is {} MAGFItem)
            {
                sb.AppendItem(MAGFItem, "MAGF");
            }
            if ((printMask?.EFIF ?? true)
                && item.EFIF is {} EFIFItem)
            {
                sb.AppendItem(EFIFItem, "EFIF");
            }
            if ((printMask?.MUID ?? true)
                && item.MUID is {} MUIDItem)
            {
                sb.AppendItem(MUIDItem, "MUID");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEffectGetter? lhs,
            IEffectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Effect_FieldIndex.BaseEffect) ?? true))
            {
                if (!lhs.BaseEffect.Equals(rhs.BaseEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Effect_FieldIndex.Data) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Data, rhs.Data, out var lhsData, out var rhsData, out var isDataEqual))
                {
                    if (!((EffectDataCommon)((IEffectDataGetter)lhsData).CommonInstance()!).Equals(lhsData, rhsData, equalsMask?.GetSubCrystal((int)Effect_FieldIndex.Data))) return false;
                }
                else if (!isDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Effect_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Effect_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Effect_FieldIndex.Magnitude) ?? true))
            {
                if (!lhs.Magnitude.Equals(rhs.Magnitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Effect_FieldIndex.Area) ?? true))
            {
                if (!lhs.Area.Equals(rhs.Area)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Effect_FieldIndex.Duration) ?? true))
            {
                if (!lhs.Duration.Equals(rhs.Duration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Effect_FieldIndex.MAGF) ?? true))
            {
                if (lhs.MAGF != rhs.MAGF) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Effect_FieldIndex.EFIF) ?? true))
            {
                if (lhs.EFIF != rhs.EFIF) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Effect_FieldIndex.MUID) ?? true))
            {
                if (lhs.MUID != rhs.MUID) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IEffectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.BaseEffect);
            if (item.Data is {} Dataitem)
            {
                hash.Add(Dataitem);
            }
            hash.Add(item.Conditions);
            hash.Add(item.Magnitude);
            hash.Add(item.Area);
            hash.Add(item.Duration);
            if (item.MAGF is {} MAGFitem)
            {
                hash.Add(MAGFitem);
            }
            if (item.EFIF is {} EFIFitem)
            {
                hash.Add(EFIFitem);
            }
            if (item.MUID is {} MUIDitem)
            {
                hash.Add(MUIDitem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Effect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IEffectGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.BaseEffect, out var BaseEffectInfo))
            {
                yield return BaseEffectInfo;
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Magnitude, out var MagnitudeInfo))
            {
                yield return MagnitudeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Area, out var AreaInfo))
            {
                yield return AreaInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Duration, out var DurationInfo))
            {
                yield return DurationInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class EffectSetterTranslationCommon
    {
        public static readonly EffectSetterTranslationCommon Instance = new EffectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IEffect item,
            IEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.BaseEffect) ?? true))
            {
                item.BaseEffect.SetTo(rhs.BaseEffect.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.Data) ?? true))
            {
                errorMask?.PushIndex((int)Effect_FieldIndex.Data);
                try
                {
                    if(rhs.Data is {} rhsData)
                    {
                        item.Data = rhsData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Effect_FieldIndex.Data));
                    }
                    else
                    {
                        item.Data = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)Effect_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.Magnitude) ?? true))
            {
                item.Magnitude.SetTo(rhs.Magnitude.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.Area) ?? true))
            {
                item.Area.SetTo(rhs.Area.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.Duration) ?? true))
            {
                item.Duration.SetTo(rhs.Duration.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.MAGF) ?? true))
            {
                item.MAGF = rhs.MAGF;
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.EFIF) ?? true))
            {
                item.EFIF = rhs.EFIF;
            }
            if ((copyMask?.GetShouldTranslate((int)Effect_FieldIndex.MUID) ?? true))
            {
                item.MUID = rhs.MUID;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IEffect item,
            IEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public Effect DeepCopy(
            IEffectGetter item,
            Effect.TranslationMask? copyMask = null)
        {
            Effect ret = (Effect)((EffectCommon)((IEffectGetter)item).CommonInstance()!).GetNew();
            ((EffectSetterTranslationCommon)((IEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Effect DeepCopy(
            IEffectGetter item,
            out Effect.ErrorMask errorMask,
            Effect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Effect ret = (Effect)((EffectCommon)((IEffectGetter)item).CommonInstance()!).GetNew();
            ((EffectSetterTranslationCommon)((IEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Effect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Effect DeepCopy(
            IEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Effect ret = (Effect)((EffectCommon)((IEffectGetter)item).CommonInstance()!).GetNew();
            ((EffectSetterTranslationCommon)((IEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class Effect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Effect_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Effect_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => EffectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return EffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => EffectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IEffectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IEffectGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IEffectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class EffectBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly EffectBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IEffectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BaseEffect,
                header: translationParams.ConvertToCustom(RecordTypes.EFID));
            if (item.Data is {} DataItem)
            {
                ((EffectDataBinaryWriteTranslation)((IBinaryItem)DataItem).BinaryWriteTranslator).Write(
                    item: DataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Magnitude,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Area,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Duration,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MAGF,
                header: translationParams.ConvertToCustom(RecordTypes.MAGF));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.EFIF,
                header: translationParams.ConvertToCustom(RecordTypes.EFIF));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.MUID,
                header: translationParams.ConvertToCustom(RecordTypes.MUID));
        }

        public void Write(
            MutagenWriter writer,
            IEffectGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class EffectBinaryCreateTranslation
    {
        public static readonly EffectBinaryCreateTranslation Instance = new EffectBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IEffect item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.EFID:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.BaseEffect, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BaseEffect.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Effect_FieldIndex.BaseEffect;
                }
                case RecordTypeInts.EFIT:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.Data, translationParams)) return ParseResult.Stop;
                    item.Data = Mutagen.Bethesda.Starfield.EffectData.CreateFromBinary(frame: frame);
                    return (int)Effect_FieldIndex.Data;
                }
                case RecordTypeInts.CTDA:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.Conditions, translationParams)) return ParseResult.Stop;
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)Effect_FieldIndex.Conditions;
                }
                case RecordTypeInts.MNAM:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.Magnitude, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Magnitude.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Effect_FieldIndex.Magnitude;
                }
                case RecordTypeInts.ANAM:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.Area, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Area.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Effect_FieldIndex.Area;
                }
                case RecordTypeInts.ZNAM:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.Duration, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Duration.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Effect_FieldIndex.Duration;
                }
                case RecordTypeInts.MAGF:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.MAGF, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MAGF = frame.ReadInt32();
                    return (int)Effect_FieldIndex.MAGF;
                }
                case RecordTypeInts.EFIF:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.EFIF, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EFIF = frame.ReadInt32();
                    return (int)Effect_FieldIndex.EFIF;
                }
                case RecordTypeInts.MUID:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.MUID, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MUID = frame.ReadInt32();
                    return (int)Effect_FieldIndex.MUID;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class EffectBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IEffectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EffectBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class EffectBinaryOverlay :
        PluginBinaryOverlay,
        IEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Effect_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Effect_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => EffectCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => EffectSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IEffectGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IEffectGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IEffectGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => EffectCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => EffectBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region BaseEffect
        private int? _BaseEffectLocation;
        public IFormLinkNullableGetter<IMagicEffectGetter> BaseEffect => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMagicEffectGetter>(_package, _recordData, _BaseEffectLocation);
        #endregion
        #region Data
        private RangeInt32? _DataLocation;
        public IEffectDataGetter? Data => _DataLocation.HasValue ? EffectDataBinaryOverlay.EffectDataFactory(_recordData.Slice(_DataLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        #region Magnitude
        private int? _MagnitudeLocation;
        public IFormLinkNullableGetter<IGlobalGetter> Magnitude => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _MagnitudeLocation);
        #endregion
        #region Area
        private int? _AreaLocation;
        public IFormLinkNullableGetter<IGlobalGetter> Area => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _AreaLocation);
        #endregion
        #region Duration
        private int? _DurationLocation;
        public IFormLinkNullableGetter<IGlobalGetter> Duration => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IGlobalGetter>(_package, _recordData, _DurationLocation);
        #endregion
        #region MAGF
        private int? _MAGFLocation;
        public Int32? MAGF => _MAGFLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MAGFLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region EFIF
        private int? _EFIFLocation;
        public Int32? EFIF => _EFIFLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EFIFLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region MUID
        private int? _MUIDLocation;
        public Int32? MUID => _MUIDLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MUIDLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected EffectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IEffectGetter EffectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new EffectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IEffectGetter EffectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return EffectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.EFID:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.BaseEffect, translationParams)) return ParseResult.Stop;
                    _BaseEffectLocation = (stream.Position - offset);
                    return (int)Effect_FieldIndex.BaseEffect;
                }
                case RecordTypeInts.EFIT:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.Data, translationParams)) return ParseResult.Stop;
                    _DataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Effect_FieldIndex.Data;
                }
                case RecordTypeInts.CTDA:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.Conditions, translationParams)) return ParseResult.Stop;
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Effect_FieldIndex.Conditions;
                }
                case RecordTypeInts.MNAM:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.Magnitude, translationParams)) return ParseResult.Stop;
                    _MagnitudeLocation = (stream.Position - offset);
                    return (int)Effect_FieldIndex.Magnitude;
                }
                case RecordTypeInts.ANAM:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.Area, translationParams)) return ParseResult.Stop;
                    _AreaLocation = (stream.Position - offset);
                    return (int)Effect_FieldIndex.Area;
                }
                case RecordTypeInts.ZNAM:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.Duration, translationParams)) return ParseResult.Stop;
                    _DurationLocation = (stream.Position - offset);
                    return (int)Effect_FieldIndex.Duration;
                }
                case RecordTypeInts.MAGF:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.MAGF, translationParams)) return ParseResult.Stop;
                    _MAGFLocation = (stream.Position - offset);
                    return (int)Effect_FieldIndex.MAGF;
                }
                case RecordTypeInts.EFIF:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.EFIF, translationParams)) return ParseResult.Stop;
                    _EFIFLocation = (stream.Position - offset);
                    return (int)Effect_FieldIndex.EFIF;
                }
                case RecordTypeInts.MUID:
                {
                    if (lastParsed.ShortCircuit((int)Effect_FieldIndex.MUID, translationParams)) return ParseResult.Stop;
                    _MUIDLocation = (stream.Position - offset);
                    return (int)Effect_FieldIndex.MUID;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            EffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IEffectGetter rhs) return false;
            return ((EffectCommon)((IEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IEffectGetter? obj)
        {
            return ((EffectCommon)((IEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((EffectCommon)((IEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

