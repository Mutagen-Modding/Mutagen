/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class GetIsCurrentPackageConditionData :
        ConditionData,
        IEquatable<IGetIsCurrentPackageConditionDataGetter>,
        IGetIsCurrentPackageConditionData,
        ILoquiObjectSetter<GetIsCurrentPackageConditionData>
    {
        #region Ctor
        public GetIsCurrentPackageConditionData()
        {
            _FirstParameter = new FormLinkOrIndex<IPackageGetter>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FirstParameter
        private readonly IFormLinkOrIndex<IPackageGetter> _FirstParameter = default!;
        public IFormLinkOrIndex<IPackageGetter> FirstParameter
        {
            get => _FirstParameter;
            set => _FirstParameter.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkOrIndexGetter<IPackageGetter> IGetIsCurrentPackageConditionDataGetter.FirstParameter => this.FirstParameter;
        #endregion
        #region FirstUnusedStringParameter
        public String? FirstUnusedStringParameter { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IGetIsCurrentPackageConditionDataGetter.FirstUnusedStringParameter => this.FirstUnusedStringParameter;
        #endregion
        #region SecondParameter
        public Int32 SecondParameter { get; set; } = default(Int32);
        #endregion
        #region SecondUnusedStringParameter
        public String? SecondUnusedStringParameter { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IGetIsCurrentPackageConditionDataGetter.SecondUnusedStringParameter => this.SecondUnusedStringParameter;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GetIsCurrentPackageConditionDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGetIsCurrentPackageConditionDataGetter rhs) return false;
            return ((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGetIsCurrentPackageConditionDataGetter? obj)
        {
            return ((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            ConditionData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.FirstParameter = initialValue;
                this.FirstUnusedStringParameter = initialValue;
                this.SecondParameter = initialValue;
                this.SecondUnusedStringParameter = initialValue;
            }

            public Mask(
                TItem RunOnType,
                TItem Reference,
                TItem Unknown3,
                TItem UseAliases,
                TItem UsePackageData,
                TItem FirstParameter,
                TItem FirstUnusedStringParameter,
                TItem SecondParameter,
                TItem SecondUnusedStringParameter)
            : base(
                RunOnType: RunOnType,
                Reference: Reference,
                Unknown3: Unknown3,
                UseAliases: UseAliases,
                UsePackageData: UsePackageData)
            {
                this.FirstParameter = FirstParameter;
                this.FirstUnusedStringParameter = FirstUnusedStringParameter;
                this.SecondParameter = SecondParameter;
                this.SecondUnusedStringParameter = SecondUnusedStringParameter;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FirstParameter;
            public TItem FirstUnusedStringParameter;
            public TItem SecondParameter;
            public TItem SecondUnusedStringParameter;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.FirstParameter, rhs.FirstParameter)) return false;
                if (!object.Equals(this.FirstUnusedStringParameter, rhs.FirstUnusedStringParameter)) return false;
                if (!object.Equals(this.SecondParameter, rhs.SecondParameter)) return false;
                if (!object.Equals(this.SecondUnusedStringParameter, rhs.SecondUnusedStringParameter)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FirstParameter);
                hash.Add(this.FirstUnusedStringParameter);
                hash.Add(this.SecondParameter);
                hash.Add(this.SecondUnusedStringParameter);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.FirstParameter)) return false;
                if (!eval(this.FirstUnusedStringParameter)) return false;
                if (!eval(this.SecondParameter)) return false;
                if (!eval(this.SecondUnusedStringParameter)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.FirstParameter)) return true;
                if (eval(this.FirstUnusedStringParameter)) return true;
                if (eval(this.SecondParameter)) return true;
                if (eval(this.SecondUnusedStringParameter)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GetIsCurrentPackageConditionData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.FirstParameter = eval(this.FirstParameter);
                obj.FirstUnusedStringParameter = eval(this.FirstUnusedStringParameter);
                obj.SecondParameter = eval(this.SecondParameter);
                obj.SecondUnusedStringParameter = eval(this.SecondUnusedStringParameter);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GetIsCurrentPackageConditionData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GetIsCurrentPackageConditionData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GetIsCurrentPackageConditionData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.FirstParameter ?? true)
                    {
                        sb.AppendItem(FirstParameter, "FirstParameter");
                    }
                    if (printMask?.FirstUnusedStringParameter ?? true)
                    {
                        sb.AppendItem(FirstUnusedStringParameter, "FirstUnusedStringParameter");
                    }
                    if (printMask?.SecondParameter ?? true)
                    {
                        sb.AppendItem(SecondParameter, "SecondParameter");
                    }
                    if (printMask?.SecondUnusedStringParameter ?? true)
                    {
                        sb.AppendItem(SecondUnusedStringParameter, "SecondUnusedStringParameter");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            ConditionData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? FirstParameter;
            public Exception? FirstUnusedStringParameter;
            public Exception? SecondParameter;
            public Exception? SecondUnusedStringParameter;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                GetIsCurrentPackageConditionData_FieldIndex enu = (GetIsCurrentPackageConditionData_FieldIndex)index;
                switch (enu)
                {
                    case GetIsCurrentPackageConditionData_FieldIndex.FirstParameter:
                        return FirstParameter;
                    case GetIsCurrentPackageConditionData_FieldIndex.FirstUnusedStringParameter:
                        return FirstUnusedStringParameter;
                    case GetIsCurrentPackageConditionData_FieldIndex.SecondParameter:
                        return SecondParameter;
                    case GetIsCurrentPackageConditionData_FieldIndex.SecondUnusedStringParameter:
                        return SecondUnusedStringParameter;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                GetIsCurrentPackageConditionData_FieldIndex enu = (GetIsCurrentPackageConditionData_FieldIndex)index;
                switch (enu)
                {
                    case GetIsCurrentPackageConditionData_FieldIndex.FirstParameter:
                        this.FirstParameter = ex;
                        break;
                    case GetIsCurrentPackageConditionData_FieldIndex.FirstUnusedStringParameter:
                        this.FirstUnusedStringParameter = ex;
                        break;
                    case GetIsCurrentPackageConditionData_FieldIndex.SecondParameter:
                        this.SecondParameter = ex;
                        break;
                    case GetIsCurrentPackageConditionData_FieldIndex.SecondUnusedStringParameter:
                        this.SecondUnusedStringParameter = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                GetIsCurrentPackageConditionData_FieldIndex enu = (GetIsCurrentPackageConditionData_FieldIndex)index;
                switch (enu)
                {
                    case GetIsCurrentPackageConditionData_FieldIndex.FirstParameter:
                        this.FirstParameter = (Exception?)obj;
                        break;
                    case GetIsCurrentPackageConditionData_FieldIndex.FirstUnusedStringParameter:
                        this.FirstUnusedStringParameter = (Exception?)obj;
                        break;
                    case GetIsCurrentPackageConditionData_FieldIndex.SecondParameter:
                        this.SecondParameter = (Exception?)obj;
                        break;
                    case GetIsCurrentPackageConditionData_FieldIndex.SecondUnusedStringParameter:
                        this.SecondUnusedStringParameter = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (FirstParameter != null) return true;
                if (FirstUnusedStringParameter != null) return true;
                if (SecondParameter != null) return true;
                if (SecondUnusedStringParameter != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(FirstParameter, "FirstParameter");
                }
                {
                    sb.AppendItem(FirstUnusedStringParameter, "FirstUnusedStringParameter");
                }
                {
                    sb.AppendItem(SecondParameter, "SecondParameter");
                }
                {
                    sb.AppendItem(SecondUnusedStringParameter, "SecondUnusedStringParameter");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FirstParameter = this.FirstParameter.Combine(rhs.FirstParameter);
                ret.FirstUnusedStringParameter = this.FirstUnusedStringParameter.Combine(rhs.FirstUnusedStringParameter);
                ret.SecondParameter = this.SecondParameter.Combine(rhs.SecondParameter);
                ret.SecondUnusedStringParameter = this.SecondUnusedStringParameter.Combine(rhs.SecondUnusedStringParameter);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            ConditionData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool FirstParameter;
            public bool FirstUnusedStringParameter;
            public bool SecondParameter;
            public bool SecondUnusedStringParameter;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.FirstParameter = defaultOn;
                this.FirstUnusedStringParameter = defaultOn;
                this.SecondParameter = defaultOn;
                this.SecondUnusedStringParameter = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((FirstParameter, null));
                ret.Add((FirstUnusedStringParameter, null));
                ret.Add((SecondParameter, null));
                ret.Add((SecondUnusedStringParameter, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => GetIsCurrentPackageConditionDataCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => GetIsCurrentPackageConditionDataSetterCommon.Instance.RemapLinks(this, mapping);
        object? IConditionParameters.Parameter1
        {
            get => FirstParameter;
            set => FirstParameter = (value is IFormLinkOrIndex<IPackageGetter> v ? v : throw new ArgumentException());
        }
        object? IConditionParametersGetter.Parameter1
        {
            get => FirstParameter;
        }
        Type? IConditionParametersGetter.Parameter1Type
        {
            get => typeof(IFormLinkOrIndexGetter<IPackageGetter>);
        }
        object? IConditionParameters.Parameter2
        {
            get => SecondParameter;
            set => SecondParameter = (value is Int32 v ? v : throw new ArgumentException());
        }
        object? IConditionParametersGetter.Parameter2
        {
            get => SecondParameter;
        }
        Type? IConditionParametersGetter.Parameter2Type
        {
            get => typeof(Int32);
        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => GetIsCurrentPackageConditionDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GetIsCurrentPackageConditionDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static GetIsCurrentPackageConditionData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GetIsCurrentPackageConditionData();
            ((GetIsCurrentPackageConditionDataSetterCommon)((IGetIsCurrentPackageConditionDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GetIsCurrentPackageConditionData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GetIsCurrentPackageConditionDataSetterCommon)((IGetIsCurrentPackageConditionDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new GetIsCurrentPackageConditionData GetNew()
        {
            return new GetIsCurrentPackageConditionData();
        }

    }
    #endregion

    #region Interface
    public partial interface IGetIsCurrentPackageConditionData :
        IConditionData,
        IFormLinkContainer,
        IGetIsCurrentPackageConditionDataGetter,
        ILoquiObjectSetter<IGetIsCurrentPackageConditionData>
    {
        new IFormLinkOrIndex<IPackageGetter> FirstParameter { get; set; }
        new String? FirstUnusedStringParameter { get; set; }
        new Int32 SecondParameter { get; set; }
        new String? SecondUnusedStringParameter { get; set; }
    }

    public partial interface IGetIsCurrentPackageConditionDataGetter :
        IConditionDataGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IGetIsCurrentPackageConditionDataGetter>
    {
        static new ILoquiRegistration StaticRegistration => GetIsCurrentPackageConditionData_Registration.Instance;
        IFormLinkOrIndexGetter<IPackageGetter> FirstParameter { get; }
        String? FirstUnusedStringParameter { get; }
        Int32 SecondParameter { get; }
        String? SecondUnusedStringParameter { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GetIsCurrentPackageConditionDataMixIn
    {
        public static void Clear(this IGetIsCurrentPackageConditionData item)
        {
            ((GetIsCurrentPackageConditionDataSetterCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GetIsCurrentPackageConditionData.Mask<bool> GetEqualsMask(
            this IGetIsCurrentPackageConditionDataGetter item,
            IGetIsCurrentPackageConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGetIsCurrentPackageConditionDataGetter item,
            string? name = null,
            GetIsCurrentPackageConditionData.Mask<bool>? printMask = null)
        {
            return ((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGetIsCurrentPackageConditionDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GetIsCurrentPackageConditionData.Mask<bool>? printMask = null)
        {
            ((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGetIsCurrentPackageConditionDataGetter item,
            IGetIsCurrentPackageConditionDataGetter rhs,
            GetIsCurrentPackageConditionData.TranslationMask? equalsMask = null)
        {
            return ((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGetIsCurrentPackageConditionData lhs,
            IGetIsCurrentPackageConditionDataGetter rhs,
            out GetIsCurrentPackageConditionData.ErrorMask errorMask,
            GetIsCurrentPackageConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GetIsCurrentPackageConditionDataSetterTranslationCommon)((IGetIsCurrentPackageConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GetIsCurrentPackageConditionData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGetIsCurrentPackageConditionData lhs,
            IGetIsCurrentPackageConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GetIsCurrentPackageConditionDataSetterTranslationCommon)((IGetIsCurrentPackageConditionDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GetIsCurrentPackageConditionData DeepCopy(
            this IGetIsCurrentPackageConditionDataGetter item,
            GetIsCurrentPackageConditionData.TranslationMask? copyMask = null)
        {
            return ((GetIsCurrentPackageConditionDataSetterTranslationCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GetIsCurrentPackageConditionData DeepCopy(
            this IGetIsCurrentPackageConditionDataGetter item,
            out GetIsCurrentPackageConditionData.ErrorMask errorMask,
            GetIsCurrentPackageConditionData.TranslationMask? copyMask = null)
        {
            return ((GetIsCurrentPackageConditionDataSetterTranslationCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GetIsCurrentPackageConditionData DeepCopy(
            this IGetIsCurrentPackageConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GetIsCurrentPackageConditionDataSetterTranslationCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGetIsCurrentPackageConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GetIsCurrentPackageConditionDataSetterCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum GetIsCurrentPackageConditionData_FieldIndex
    {
        RunOnType = 0,
        Reference = 1,
        Unknown3 = 2,
        UseAliases = 3,
        UsePackageData = 4,
        FirstParameter = 5,
        FirstUnusedStringParameter = 6,
        SecondParameter = 7,
        SecondUnusedStringParameter = 8,
    }
    #endregion

    #region Registration
    internal partial class GetIsCurrentPackageConditionData_Registration : ILoquiRegistration
    {
        public static readonly GetIsCurrentPackageConditionData_Registration Instance = new GetIsCurrentPackageConditionData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(GetIsCurrentPackageConditionData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GetIsCurrentPackageConditionData.ErrorMask);

        public static readonly Type ClassType = typeof(GetIsCurrentPackageConditionData);

        public static readonly Type GetterType = typeof(IGetIsCurrentPackageConditionDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGetIsCurrentPackageConditionData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.GetIsCurrentPackageConditionData";

        public const string Name = "GetIsCurrentPackageConditionData";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(GetIsCurrentPackageConditionDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GetIsCurrentPackageConditionDataSetterCommon : ConditionDataSetterCommon
    {
        public new static readonly GetIsCurrentPackageConditionDataSetterCommon Instance = new GetIsCurrentPackageConditionDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGetIsCurrentPackageConditionData item)
        {
            ClearPartial();
            item.FirstParameter.Clear();
            item.FirstUnusedStringParameter = default;
            item.SecondParameter = default(Int32);
            item.SecondUnusedStringParameter = default;
            base.Clear(item);
        }
        
        public override void Clear(IConditionData item)
        {
            Clear(item: (IGetIsCurrentPackageConditionData)item);
        }
        
        #region Mutagen
        public void RemapLinks(IGetIsCurrentPackageConditionData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.FirstParameter.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGetIsCurrentPackageConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: GetIsCurrentPackageConditionDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            IConditionData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (GetIsCurrentPackageConditionData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class GetIsCurrentPackageConditionDataCommon : ConditionDataCommon
    {
        public new static readonly GetIsCurrentPackageConditionDataCommon Instance = new GetIsCurrentPackageConditionDataCommon();

        public GetIsCurrentPackageConditionData.Mask<bool> GetEqualsMask(
            IGetIsCurrentPackageConditionDataGetter item,
            IGetIsCurrentPackageConditionDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GetIsCurrentPackageConditionData.Mask<bool>(false);
            ((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGetIsCurrentPackageConditionDataGetter item,
            IGetIsCurrentPackageConditionDataGetter rhs,
            GetIsCurrentPackageConditionData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.FirstParameter = item.FirstParameter.Equals(rhs.FirstParameter);
            ret.FirstUnusedStringParameter = string.Equals(item.FirstUnusedStringParameter, rhs.FirstUnusedStringParameter);
            ret.SecondParameter = item.SecondParameter == rhs.SecondParameter;
            ret.SecondUnusedStringParameter = string.Equals(item.SecondUnusedStringParameter, rhs.SecondUnusedStringParameter);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IGetIsCurrentPackageConditionDataGetter item,
            string? name = null,
            GetIsCurrentPackageConditionData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGetIsCurrentPackageConditionDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GetIsCurrentPackageConditionData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GetIsCurrentPackageConditionData =>");
            }
            else
            {
                sb.AppendLine($"{name} (GetIsCurrentPackageConditionData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGetIsCurrentPackageConditionDataGetter item,
            StructuredStringBuilder sb,
            GetIsCurrentPackageConditionData.Mask<bool>? printMask = null)
        {
            ConditionDataCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.FirstParameter ?? true)
            {
                sb.AppendItem(item.FirstParameter, "FirstParameter");
            }
            if ((printMask?.FirstUnusedStringParameter ?? true)
                && item.FirstUnusedStringParameter is {} FirstUnusedStringParameterItem)
            {
                sb.AppendItem(FirstUnusedStringParameterItem, "FirstUnusedStringParameter");
            }
            if (printMask?.SecondParameter ?? true)
            {
                sb.AppendItem(item.SecondParameter, "SecondParameter");
            }
            if ((printMask?.SecondUnusedStringParameter ?? true)
                && item.SecondUnusedStringParameter is {} SecondUnusedStringParameterItem)
            {
                sb.AppendItem(SecondUnusedStringParameterItem, "SecondUnusedStringParameter");
            }
        }
        
        public static GetIsCurrentPackageConditionData_FieldIndex ConvertFieldIndex(ConditionData_FieldIndex index)
        {
            switch (index)
            {
                case ConditionData_FieldIndex.RunOnType:
                    return (GetIsCurrentPackageConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.Reference:
                    return (GetIsCurrentPackageConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.Unknown3:
                    return (GetIsCurrentPackageConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.UseAliases:
                    return (GetIsCurrentPackageConditionData_FieldIndex)((int)index);
                case ConditionData_FieldIndex.UsePackageData:
                    return (GetIsCurrentPackageConditionData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGetIsCurrentPackageConditionDataGetter? lhs,
            IGetIsCurrentPackageConditionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IConditionDataGetter)lhs, (IConditionDataGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)GetIsCurrentPackageConditionData_FieldIndex.FirstParameter) ?? true))
            {
                if (!lhs.FirstParameter.Equals(rhs.FirstParameter)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GetIsCurrentPackageConditionData_FieldIndex.FirstUnusedStringParameter) ?? true))
            {
                if (!string.Equals(lhs.FirstUnusedStringParameter, rhs.FirstUnusedStringParameter)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GetIsCurrentPackageConditionData_FieldIndex.SecondParameter) ?? true))
            {
                if (lhs.SecondParameter != rhs.SecondParameter) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GetIsCurrentPackageConditionData_FieldIndex.SecondUnusedStringParameter) ?? true))
            {
                if (!string.Equals(lhs.SecondUnusedStringParameter, rhs.SecondUnusedStringParameter)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IConditionDataGetter? lhs,
            IConditionDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IGetIsCurrentPackageConditionDataGetter?)lhs,
                rhs: rhs as IGetIsCurrentPackageConditionDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IGetIsCurrentPackageConditionDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.FirstParameter);
            if (item.FirstUnusedStringParameter is {} FirstUnusedStringParameteritem)
            {
                hash.Add(FirstUnusedStringParameteritem);
            }
            hash.Add(item.SecondParameter);
            if (item.SecondUnusedStringParameter is {} SecondUnusedStringParameteritem)
            {
                hash.Add(SecondUnusedStringParameteritem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IConditionDataGetter item)
        {
            return GetHashCode(item: (IGetIsCurrentPackageConditionDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return GetIsCurrentPackageConditionData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGetIsCurrentPackageConditionDataGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var l in obj.FirstParameter.EnumerateFormLinks())
            {
                yield return l;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class GetIsCurrentPackageConditionDataSetterTranslationCommon : ConditionDataSetterTranslationCommon
    {
        public new static readonly GetIsCurrentPackageConditionDataSetterTranslationCommon Instance = new GetIsCurrentPackageConditionDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGetIsCurrentPackageConditionData item,
            IGetIsCurrentPackageConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IConditionData)item,
                (IConditionDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)GetIsCurrentPackageConditionData_FieldIndex.FirstParameter) ?? true))
            {
                item.FirstParameter.SetTo(rhs.FirstParameter);
            }
            if ((copyMask?.GetShouldTranslate((int)GetIsCurrentPackageConditionData_FieldIndex.FirstUnusedStringParameter) ?? true))
            {
                item.FirstUnusedStringParameter = rhs.FirstUnusedStringParameter;
            }
            if ((copyMask?.GetShouldTranslate((int)GetIsCurrentPackageConditionData_FieldIndex.SecondParameter) ?? true))
            {
                item.SecondParameter = rhs.SecondParameter;
            }
            if ((copyMask?.GetShouldTranslate((int)GetIsCurrentPackageConditionData_FieldIndex.SecondUnusedStringParameter) ?? true))
            {
                item.SecondUnusedStringParameter = rhs.SecondUnusedStringParameter;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IGetIsCurrentPackageConditionData item,
            IGetIsCurrentPackageConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IConditionData item,
            IConditionDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IGetIsCurrentPackageConditionData)item,
                rhs: (IGetIsCurrentPackageConditionDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public GetIsCurrentPackageConditionData DeepCopy(
            IGetIsCurrentPackageConditionDataGetter item,
            GetIsCurrentPackageConditionData.TranslationMask? copyMask = null)
        {
            GetIsCurrentPackageConditionData ret = (GetIsCurrentPackageConditionData)((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonInstance()!).GetNew();
            ((GetIsCurrentPackageConditionDataSetterTranslationCommon)((IGetIsCurrentPackageConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GetIsCurrentPackageConditionData DeepCopy(
            IGetIsCurrentPackageConditionDataGetter item,
            out GetIsCurrentPackageConditionData.ErrorMask errorMask,
            GetIsCurrentPackageConditionData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GetIsCurrentPackageConditionData ret = (GetIsCurrentPackageConditionData)((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonInstance()!).GetNew();
            ((GetIsCurrentPackageConditionDataSetterTranslationCommon)((IGetIsCurrentPackageConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GetIsCurrentPackageConditionData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GetIsCurrentPackageConditionData DeepCopy(
            IGetIsCurrentPackageConditionDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GetIsCurrentPackageConditionData ret = (GetIsCurrentPackageConditionData)((GetIsCurrentPackageConditionDataCommon)((IGetIsCurrentPackageConditionDataGetter)item).CommonInstance()!).GetNew();
            ((GetIsCurrentPackageConditionDataSetterTranslationCommon)((IGetIsCurrentPackageConditionDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class GetIsCurrentPackageConditionData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GetIsCurrentPackageConditionData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => GetIsCurrentPackageConditionData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => GetIsCurrentPackageConditionDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return GetIsCurrentPackageConditionDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => GetIsCurrentPackageConditionDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class GetIsCurrentPackageConditionDataBinaryWriteTranslation :
        ConditionDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly GetIsCurrentPackageConditionDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IGetIsCurrentPackageConditionDataGetter item,
            MutagenWriter writer)
        {
            ConditionDataBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            FormLinkOrIndexBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FirstParameter);
            writer.Write(item.SecondParameter);
        }

        public void Write(
            MutagenWriter writer,
            IGetIsCurrentPackageConditionDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGetIsCurrentPackageConditionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IConditionDataGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IGetIsCurrentPackageConditionDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GetIsCurrentPackageConditionDataBinaryCreateTranslation : ConditionDataBinaryCreateTranslation
    {
        public new static readonly GetIsCurrentPackageConditionDataBinaryCreateTranslation Instance = new GetIsCurrentPackageConditionDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IGetIsCurrentPackageConditionData item,
            MutagenFrame frame)
        {
            ConditionDataBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            FormLinkOrIndexBinaryTranslation.Instance.ParseInto(
                reader: frame,
                item: item.FirstParameter);
            item.SecondParameter = frame.ReadInt32();
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class GetIsCurrentPackageConditionDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
}
#endregion

#endregion

