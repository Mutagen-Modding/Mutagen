/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class StarDataComponent :
        AComponent,
        IEquatable<IStarDataComponentGetter>,
        ILoquiObjectSetter<StarDataComponent>,
        IStarDataComponent
    {
        #region Ctor
        public StarDataComponent()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CatalogueId
        public String CatalogueId { get; set; } = string.Empty;
        #endregion
        #region SpectralClass
        public String SpectralClass { get; set; } = string.Empty;
        #endregion
        #region Magnitude
        public Single Magnitude { get; set; } = default(Single);
        #endregion
        #region MassInSm
        public Single MassInSm { get; set; } = default(Single);
        #endregion
        #region InnerHabitableZone
        public Single InnerHabitableZone { get; set; } = default(Single);
        #endregion
        #region OuterHabitableZone
        public Single OuterHabitableZone { get; set; } = default(Single);
        #endregion
        #region HIP
        public UInt32 HIP { get; set; } = default(UInt32);
        #endregion
        #region Radius
        public UInt32 Radius { get; set; } = default(UInt32);
        #endregion
        #region TemperatureInK
        public UInt32 TemperatureInK { get; set; } = default(UInt32);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarDataComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStarDataComponentGetter rhs) return false;
            return ((StarDataComponentCommon)((IStarDataComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarDataComponentGetter? obj)
        {
            return ((StarDataComponentCommon)((IStarDataComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarDataComponentCommon)((IStarDataComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            AComponent.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.CatalogueId = initialValue;
                this.SpectralClass = initialValue;
                this.Magnitude = initialValue;
                this.MassInSm = initialValue;
                this.InnerHabitableZone = initialValue;
                this.OuterHabitableZone = initialValue;
                this.HIP = initialValue;
                this.Radius = initialValue;
                this.TemperatureInK = initialValue;
            }

            public Mask(
                TItem CatalogueId,
                TItem SpectralClass,
                TItem Magnitude,
                TItem MassInSm,
                TItem InnerHabitableZone,
                TItem OuterHabitableZone,
                TItem HIP,
                TItem Radius,
                TItem TemperatureInK)
            : base()
            {
                this.CatalogueId = CatalogueId;
                this.SpectralClass = SpectralClass;
                this.Magnitude = Magnitude;
                this.MassInSm = MassInSm;
                this.InnerHabitableZone = InnerHabitableZone;
                this.OuterHabitableZone = OuterHabitableZone;
                this.HIP = HIP;
                this.Radius = Radius;
                this.TemperatureInK = TemperatureInK;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem CatalogueId;
            public TItem SpectralClass;
            public TItem Magnitude;
            public TItem MassInSm;
            public TItem InnerHabitableZone;
            public TItem OuterHabitableZone;
            public TItem HIP;
            public TItem Radius;
            public TItem TemperatureInK;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.CatalogueId, rhs.CatalogueId)) return false;
                if (!object.Equals(this.SpectralClass, rhs.SpectralClass)) return false;
                if (!object.Equals(this.Magnitude, rhs.Magnitude)) return false;
                if (!object.Equals(this.MassInSm, rhs.MassInSm)) return false;
                if (!object.Equals(this.InnerHabitableZone, rhs.InnerHabitableZone)) return false;
                if (!object.Equals(this.OuterHabitableZone, rhs.OuterHabitableZone)) return false;
                if (!object.Equals(this.HIP, rhs.HIP)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.TemperatureInK, rhs.TemperatureInK)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.CatalogueId);
                hash.Add(this.SpectralClass);
                hash.Add(this.Magnitude);
                hash.Add(this.MassInSm);
                hash.Add(this.InnerHabitableZone);
                hash.Add(this.OuterHabitableZone);
                hash.Add(this.HIP);
                hash.Add(this.Radius);
                hash.Add(this.TemperatureInK);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.CatalogueId)) return false;
                if (!eval(this.SpectralClass)) return false;
                if (!eval(this.Magnitude)) return false;
                if (!eval(this.MassInSm)) return false;
                if (!eval(this.InnerHabitableZone)) return false;
                if (!eval(this.OuterHabitableZone)) return false;
                if (!eval(this.HIP)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.TemperatureInK)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.CatalogueId)) return true;
                if (eval(this.SpectralClass)) return true;
                if (eval(this.Magnitude)) return true;
                if (eval(this.MassInSm)) return true;
                if (eval(this.InnerHabitableZone)) return true;
                if (eval(this.OuterHabitableZone)) return true;
                if (eval(this.HIP)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.TemperatureInK)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StarDataComponent.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.CatalogueId = eval(this.CatalogueId);
                obj.SpectralClass = eval(this.SpectralClass);
                obj.Magnitude = eval(this.Magnitude);
                obj.MassInSm = eval(this.MassInSm);
                obj.InnerHabitableZone = eval(this.InnerHabitableZone);
                obj.OuterHabitableZone = eval(this.OuterHabitableZone);
                obj.HIP = eval(this.HIP);
                obj.Radius = eval(this.Radius);
                obj.TemperatureInK = eval(this.TemperatureInK);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(StarDataComponent.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, StarDataComponent.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(StarDataComponent.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.CatalogueId ?? true)
                    {
                        sb.AppendItem(CatalogueId, "CatalogueId");
                    }
                    if (printMask?.SpectralClass ?? true)
                    {
                        sb.AppendItem(SpectralClass, "SpectralClass");
                    }
                    if (printMask?.Magnitude ?? true)
                    {
                        sb.AppendItem(Magnitude, "Magnitude");
                    }
                    if (printMask?.MassInSm ?? true)
                    {
                        sb.AppendItem(MassInSm, "MassInSm");
                    }
                    if (printMask?.InnerHabitableZone ?? true)
                    {
                        sb.AppendItem(InnerHabitableZone, "InnerHabitableZone");
                    }
                    if (printMask?.OuterHabitableZone ?? true)
                    {
                        sb.AppendItem(OuterHabitableZone, "OuterHabitableZone");
                    }
                    if (printMask?.HIP ?? true)
                    {
                        sb.AppendItem(HIP, "HIP");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        sb.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.TemperatureInK ?? true)
                    {
                        sb.AppendItem(TemperatureInK, "TemperatureInK");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            AComponent.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? CatalogueId;
            public Exception? SpectralClass;
            public Exception? Magnitude;
            public Exception? MassInSm;
            public Exception? InnerHabitableZone;
            public Exception? OuterHabitableZone;
            public Exception? HIP;
            public Exception? Radius;
            public Exception? TemperatureInK;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                StarDataComponent_FieldIndex enu = (StarDataComponent_FieldIndex)index;
                switch (enu)
                {
                    case StarDataComponent_FieldIndex.CatalogueId:
                        return CatalogueId;
                    case StarDataComponent_FieldIndex.SpectralClass:
                        return SpectralClass;
                    case StarDataComponent_FieldIndex.Magnitude:
                        return Magnitude;
                    case StarDataComponent_FieldIndex.MassInSm:
                        return MassInSm;
                    case StarDataComponent_FieldIndex.InnerHabitableZone:
                        return InnerHabitableZone;
                    case StarDataComponent_FieldIndex.OuterHabitableZone:
                        return OuterHabitableZone;
                    case StarDataComponent_FieldIndex.HIP:
                        return HIP;
                    case StarDataComponent_FieldIndex.Radius:
                        return Radius;
                    case StarDataComponent_FieldIndex.TemperatureInK:
                        return TemperatureInK;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                StarDataComponent_FieldIndex enu = (StarDataComponent_FieldIndex)index;
                switch (enu)
                {
                    case StarDataComponent_FieldIndex.CatalogueId:
                        this.CatalogueId = ex;
                        break;
                    case StarDataComponent_FieldIndex.SpectralClass:
                        this.SpectralClass = ex;
                        break;
                    case StarDataComponent_FieldIndex.Magnitude:
                        this.Magnitude = ex;
                        break;
                    case StarDataComponent_FieldIndex.MassInSm:
                        this.MassInSm = ex;
                        break;
                    case StarDataComponent_FieldIndex.InnerHabitableZone:
                        this.InnerHabitableZone = ex;
                        break;
                    case StarDataComponent_FieldIndex.OuterHabitableZone:
                        this.OuterHabitableZone = ex;
                        break;
                    case StarDataComponent_FieldIndex.HIP:
                        this.HIP = ex;
                        break;
                    case StarDataComponent_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case StarDataComponent_FieldIndex.TemperatureInK:
                        this.TemperatureInK = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                StarDataComponent_FieldIndex enu = (StarDataComponent_FieldIndex)index;
                switch (enu)
                {
                    case StarDataComponent_FieldIndex.CatalogueId:
                        this.CatalogueId = (Exception?)obj;
                        break;
                    case StarDataComponent_FieldIndex.SpectralClass:
                        this.SpectralClass = (Exception?)obj;
                        break;
                    case StarDataComponent_FieldIndex.Magnitude:
                        this.Magnitude = (Exception?)obj;
                        break;
                    case StarDataComponent_FieldIndex.MassInSm:
                        this.MassInSm = (Exception?)obj;
                        break;
                    case StarDataComponent_FieldIndex.InnerHabitableZone:
                        this.InnerHabitableZone = (Exception?)obj;
                        break;
                    case StarDataComponent_FieldIndex.OuterHabitableZone:
                        this.OuterHabitableZone = (Exception?)obj;
                        break;
                    case StarDataComponent_FieldIndex.HIP:
                        this.HIP = (Exception?)obj;
                        break;
                    case StarDataComponent_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case StarDataComponent_FieldIndex.TemperatureInK:
                        this.TemperatureInK = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (CatalogueId != null) return true;
                if (SpectralClass != null) return true;
                if (Magnitude != null) return true;
                if (MassInSm != null) return true;
                if (InnerHabitableZone != null) return true;
                if (OuterHabitableZone != null) return true;
                if (HIP != null) return true;
                if (Radius != null) return true;
                if (TemperatureInK != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(CatalogueId, "CatalogueId");
                }
                {
                    sb.AppendItem(SpectralClass, "SpectralClass");
                }
                {
                    sb.AppendItem(Magnitude, "Magnitude");
                }
                {
                    sb.AppendItem(MassInSm, "MassInSm");
                }
                {
                    sb.AppendItem(InnerHabitableZone, "InnerHabitableZone");
                }
                {
                    sb.AppendItem(OuterHabitableZone, "OuterHabitableZone");
                }
                {
                    sb.AppendItem(HIP, "HIP");
                }
                {
                    sb.AppendItem(Radius, "Radius");
                }
                {
                    sb.AppendItem(TemperatureInK, "TemperatureInK");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.CatalogueId = this.CatalogueId.Combine(rhs.CatalogueId);
                ret.SpectralClass = this.SpectralClass.Combine(rhs.SpectralClass);
                ret.Magnitude = this.Magnitude.Combine(rhs.Magnitude);
                ret.MassInSm = this.MassInSm.Combine(rhs.MassInSm);
                ret.InnerHabitableZone = this.InnerHabitableZone.Combine(rhs.InnerHabitableZone);
                ret.OuterHabitableZone = this.OuterHabitableZone.Combine(rhs.OuterHabitableZone);
                ret.HIP = this.HIP.Combine(rhs.HIP);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.TemperatureInK = this.TemperatureInK.Combine(rhs.TemperatureInK);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            AComponent.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool CatalogueId;
            public bool SpectralClass;
            public bool Magnitude;
            public bool MassInSm;
            public bool InnerHabitableZone;
            public bool OuterHabitableZone;
            public bool HIP;
            public bool Radius;
            public bool TemperatureInK;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.CatalogueId = defaultOn;
                this.SpectralClass = defaultOn;
                this.Magnitude = defaultOn;
                this.MassInSm = defaultOn;
                this.InnerHabitableZone = defaultOn;
                this.OuterHabitableZone = defaultOn;
                this.HIP = defaultOn;
                this.Radius = defaultOn;
                this.TemperatureInK = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((CatalogueId, null));
                ret.Add((SpectralClass, null));
                ret.Add((Magnitude, null));
                ret.Add((MassInSm, null));
                ret.Add((InnerHabitableZone, null));
                ret.Add((OuterHabitableZone, null));
                ret.Add((HIP, null));
                ret.Add((Radius, null));
                ret.Add((TemperatureInK, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StarDataComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StarDataComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static StarDataComponent CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new StarDataComponent();
            ((StarDataComponentSetterCommon)((IStarDataComponentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out StarDataComponent item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StarDataComponentSetterCommon)((IStarDataComponentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new StarDataComponent GetNew()
        {
            return new StarDataComponent();
        }

    }
    #endregion

    #region Interface
    public partial interface IStarDataComponent :
        IAComponent,
        ILoquiObjectSetter<IStarDataComponent>,
        IStarDataComponentGetter
    {
        new String CatalogueId { get; set; }
        new String SpectralClass { get; set; }
        new Single Magnitude { get; set; }
        new Single MassInSm { get; set; }
        new Single InnerHabitableZone { get; set; }
        new Single OuterHabitableZone { get; set; }
        new UInt32 HIP { get; set; }
        new UInt32 Radius { get; set; }
        new UInt32 TemperatureInK { get; set; }
    }

    public partial interface IStarDataComponentGetter :
        IAComponentGetter,
        IBinaryItem,
        ILoquiObject<IStarDataComponentGetter>
    {
        static new ILoquiRegistration StaticRegistration => StarDataComponent_Registration.Instance;
        String CatalogueId { get; }
        String SpectralClass { get; }
        Single Magnitude { get; }
        Single MassInSm { get; }
        Single InnerHabitableZone { get; }
        Single OuterHabitableZone { get; }
        UInt32 HIP { get; }
        UInt32 Radius { get; }
        UInt32 TemperatureInK { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StarDataComponentMixIn
    {
        public static void Clear(this IStarDataComponent item)
        {
            ((StarDataComponentSetterCommon)((IStarDataComponentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StarDataComponent.Mask<bool> GetEqualsMask(
            this IStarDataComponentGetter item,
            IStarDataComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StarDataComponentCommon)((IStarDataComponentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStarDataComponentGetter item,
            string? name = null,
            StarDataComponent.Mask<bool>? printMask = null)
        {
            return ((StarDataComponentCommon)((IStarDataComponentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStarDataComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StarDataComponent.Mask<bool>? printMask = null)
        {
            ((StarDataComponentCommon)((IStarDataComponentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStarDataComponentGetter item,
            IStarDataComponentGetter rhs,
            StarDataComponent.TranslationMask? equalsMask = null)
        {
            return ((StarDataComponentCommon)((IStarDataComponentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStarDataComponent lhs,
            IStarDataComponentGetter rhs,
            out StarDataComponent.ErrorMask errorMask,
            StarDataComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StarDataComponentSetterTranslationCommon)((IStarDataComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StarDataComponent.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStarDataComponent lhs,
            IStarDataComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StarDataComponentSetterTranslationCommon)((IStarDataComponentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StarDataComponent DeepCopy(
            this IStarDataComponentGetter item,
            StarDataComponent.TranslationMask? copyMask = null)
        {
            return ((StarDataComponentSetterTranslationCommon)((IStarDataComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StarDataComponent DeepCopy(
            this IStarDataComponentGetter item,
            out StarDataComponent.ErrorMask errorMask,
            StarDataComponent.TranslationMask? copyMask = null)
        {
            return ((StarDataComponentSetterTranslationCommon)((IStarDataComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StarDataComponent DeepCopy(
            this IStarDataComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StarDataComponentSetterTranslationCommon)((IStarDataComponentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStarDataComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((StarDataComponentSetterCommon)((IStarDataComponentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum StarDataComponent_FieldIndex
    {
        CatalogueId = 0,
        SpectralClass = 1,
        Magnitude = 2,
        MassInSm = 3,
        InnerHabitableZone = 4,
        OuterHabitableZone = 5,
        HIP = 6,
        Radius = 7,
        TemperatureInK = 8,
    }
    #endregion

    #region Registration
    internal partial class StarDataComponent_Registration : ILoquiRegistration
    {
        public static readonly StarDataComponent_Registration Instance = new StarDataComponent_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(StarDataComponent.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StarDataComponent.ErrorMask);

        public static readonly Type ClassType = typeof(StarDataComponent);

        public static readonly Type GetterType = typeof(IStarDataComponentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStarDataComponent);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.StarDataComponent";

        public const string Name = "StarDataComponent";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BFCB;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BFCB);
            var all = RecordCollection.Factory(
                RecordTypes.BFCB,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(StarDataComponentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StarDataComponentSetterCommon : AComponentSetterCommon
    {
        public new static readonly StarDataComponentSetterCommon Instance = new StarDataComponentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStarDataComponent item)
        {
            ClearPartial();
            item.CatalogueId = string.Empty;
            item.SpectralClass = string.Empty;
            item.Magnitude = default(Single);
            item.MassInSm = default(Single);
            item.InnerHabitableZone = default(Single);
            item.OuterHabitableZone = default(Single);
            item.HIP = default(UInt32);
            item.Radius = default(UInt32);
            item.TemperatureInK = default(UInt32);
            base.Clear(item);
        }
        
        public override void Clear(IAComponent item)
        {
            Clear(item: (IStarDataComponent)item);
        }
        
        #region Mutagen
        public void RemapLinks(IStarDataComponent obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStarDataComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: StarDataComponentBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAComponent item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (StarDataComponent)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class StarDataComponentCommon : AComponentCommon
    {
        public new static readonly StarDataComponentCommon Instance = new StarDataComponentCommon();

        public StarDataComponent.Mask<bool> GetEqualsMask(
            IStarDataComponentGetter item,
            IStarDataComponentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StarDataComponent.Mask<bool>(false);
            ((StarDataComponentCommon)((IStarDataComponentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStarDataComponentGetter item,
            IStarDataComponentGetter rhs,
            StarDataComponent.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.CatalogueId = string.Equals(item.CatalogueId, rhs.CatalogueId);
            ret.SpectralClass = string.Equals(item.SpectralClass, rhs.SpectralClass);
            ret.Magnitude = item.Magnitude.EqualsWithin(rhs.Magnitude);
            ret.MassInSm = item.MassInSm.EqualsWithin(rhs.MassInSm);
            ret.InnerHabitableZone = item.InnerHabitableZone.EqualsWithin(rhs.InnerHabitableZone);
            ret.OuterHabitableZone = item.OuterHabitableZone.EqualsWithin(rhs.OuterHabitableZone);
            ret.HIP = item.HIP == rhs.HIP;
            ret.Radius = item.Radius == rhs.Radius;
            ret.TemperatureInK = item.TemperatureInK == rhs.TemperatureInK;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IStarDataComponentGetter item,
            string? name = null,
            StarDataComponent.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStarDataComponentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StarDataComponent.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"StarDataComponent =>");
            }
            else
            {
                sb.AppendLine($"{name} (StarDataComponent) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStarDataComponentGetter item,
            StructuredStringBuilder sb,
            StarDataComponent.Mask<bool>? printMask = null)
        {
            AComponentCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.CatalogueId ?? true)
            {
                sb.AppendItem(item.CatalogueId, "CatalogueId");
            }
            if (printMask?.SpectralClass ?? true)
            {
                sb.AppendItem(item.SpectralClass, "SpectralClass");
            }
            if (printMask?.Magnitude ?? true)
            {
                sb.AppendItem(item.Magnitude, "Magnitude");
            }
            if (printMask?.MassInSm ?? true)
            {
                sb.AppendItem(item.MassInSm, "MassInSm");
            }
            if (printMask?.InnerHabitableZone ?? true)
            {
                sb.AppendItem(item.InnerHabitableZone, "InnerHabitableZone");
            }
            if (printMask?.OuterHabitableZone ?? true)
            {
                sb.AppendItem(item.OuterHabitableZone, "OuterHabitableZone");
            }
            if (printMask?.HIP ?? true)
            {
                sb.AppendItem(item.HIP, "HIP");
            }
            if (printMask?.Radius ?? true)
            {
                sb.AppendItem(item.Radius, "Radius");
            }
            if (printMask?.TemperatureInK ?? true)
            {
                sb.AppendItem(item.TemperatureInK, "TemperatureInK");
            }
        }
        
        public static StarDataComponent_FieldIndex ConvertFieldIndex(AComponent_FieldIndex index)
        {
            switch (index)
            {
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStarDataComponentGetter? lhs,
            IStarDataComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAComponentGetter)lhs, (IAComponentGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.CatalogueId) ?? true))
            {
                if (!string.Equals(lhs.CatalogueId, rhs.CatalogueId)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.SpectralClass) ?? true))
            {
                if (!string.Equals(lhs.SpectralClass, rhs.SpectralClass)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.Magnitude) ?? true))
            {
                if (!lhs.Magnitude.EqualsWithin(rhs.Magnitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.MassInSm) ?? true))
            {
                if (!lhs.MassInSm.EqualsWithin(rhs.MassInSm)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.InnerHabitableZone) ?? true))
            {
                if (!lhs.InnerHabitableZone.EqualsWithin(rhs.InnerHabitableZone)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.OuterHabitableZone) ?? true))
            {
                if (!lhs.OuterHabitableZone.EqualsWithin(rhs.OuterHabitableZone)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.HIP) ?? true))
            {
                if (lhs.HIP != rhs.HIP) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.Radius) ?? true))
            {
                if (lhs.Radius != rhs.Radius) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.TemperatureInK) ?? true))
            {
                if (lhs.TemperatureInK != rhs.TemperatureInK) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAComponentGetter? lhs,
            IAComponentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IStarDataComponentGetter?)lhs,
                rhs: rhs as IStarDataComponentGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IStarDataComponentGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.CatalogueId);
            hash.Add(item.SpectralClass);
            hash.Add(item.Magnitude);
            hash.Add(item.MassInSm);
            hash.Add(item.InnerHabitableZone);
            hash.Add(item.OuterHabitableZone);
            hash.Add(item.HIP);
            hash.Add(item.Radius);
            hash.Add(item.TemperatureInK);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAComponentGetter item)
        {
            return GetHashCode(item: (IStarDataComponentGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return StarDataComponent.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStarDataComponentGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class StarDataComponentSetterTranslationCommon : AComponentSetterTranslationCommon
    {
        public new static readonly StarDataComponentSetterTranslationCommon Instance = new StarDataComponentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStarDataComponent item,
            IStarDataComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAComponent)item,
                (IAComponentGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.CatalogueId) ?? true))
            {
                item.CatalogueId = rhs.CatalogueId;
            }
            if ((copyMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.SpectralClass) ?? true))
            {
                item.SpectralClass = rhs.SpectralClass;
            }
            if ((copyMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.Magnitude) ?? true))
            {
                item.Magnitude = rhs.Magnitude;
            }
            if ((copyMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.MassInSm) ?? true))
            {
                item.MassInSm = rhs.MassInSm;
            }
            if ((copyMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.InnerHabitableZone) ?? true))
            {
                item.InnerHabitableZone = rhs.InnerHabitableZone;
            }
            if ((copyMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.OuterHabitableZone) ?? true))
            {
                item.OuterHabitableZone = rhs.OuterHabitableZone;
            }
            if ((copyMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.HIP) ?? true))
            {
                item.HIP = rhs.HIP;
            }
            if ((copyMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)StarDataComponent_FieldIndex.TemperatureInK) ?? true))
            {
                item.TemperatureInK = rhs.TemperatureInK;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IStarDataComponent item,
            IStarDataComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        
        public override void DeepCopyIn(
            IAComponent item,
            IAComponentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IStarDataComponent)item,
                rhs: (IStarDataComponentGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public StarDataComponent DeepCopy(
            IStarDataComponentGetter item,
            StarDataComponent.TranslationMask? copyMask = null)
        {
            StarDataComponent ret = (StarDataComponent)((StarDataComponentCommon)((IStarDataComponentGetter)item).CommonInstance()!).GetNew();
            ((StarDataComponentSetterTranslationCommon)((IStarDataComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StarDataComponent DeepCopy(
            IStarDataComponentGetter item,
            out StarDataComponent.ErrorMask errorMask,
            StarDataComponent.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            StarDataComponent ret = (StarDataComponent)((StarDataComponentCommon)((IStarDataComponentGetter)item).CommonInstance()!).GetNew();
            ((StarDataComponentSetterTranslationCommon)((IStarDataComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StarDataComponent.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StarDataComponent DeepCopy(
            IStarDataComponentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            StarDataComponent ret = (StarDataComponent)((StarDataComponentCommon)((IStarDataComponentGetter)item).CommonInstance()!).GetNew();
            ((StarDataComponentSetterTranslationCommon)((IStarDataComponentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class StarDataComponent
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StarDataComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => StarDataComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StarDataComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return StarDataComponentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StarDataComponentSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class StarDataComponentBinaryWriteTranslation :
        AComponentBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly StarDataComponentBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IStarDataComponentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            AComponentBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CatalogueId,
                    binaryType: StringBinaryType.PrependLength);
                StringBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SpectralClass,
                    binaryType: StringBinaryType.PrependLength);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Magnitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MassInSm,
                    divisor: null,
                    multiplier: 1.98847E+30f);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.InnerHabitableZone);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.OuterHabitableZone);
                writer.Write(item.HIP);
                writer.Write(item.Radius);
                writer.Write(item.TemperatureInK);
            }
        }

        public void Write(
            MutagenWriter writer,
            IStarDataComponentGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.BFCE)) { } // End Marker
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IStarDataComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAComponentGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IStarDataComponentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class StarDataComponentBinaryCreateTranslation : AComponentBinaryCreateTranslation
    {
        public new static readonly StarDataComponentBinaryCreateTranslation Instance = new StarDataComponentBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IStarDataComponent item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    item.CatalogueId = StringBinaryTranslation.Instance.Parse(
                        reader: dataFrame,
                        stringBinaryType: StringBinaryType.PrependLength,
                        parseWhole: true);
                    item.SpectralClass = StringBinaryTranslation.Instance.Parse(
                        reader: dataFrame,
                        stringBinaryType: StringBinaryType.PrependLength,
                        parseWhole: true);
                    if (dataFrame.Remaining < 4) return null;
                    item.Magnitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MassInSm = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        multiplier: null,
                        divisor: 1.98847E+30f);
                    if (dataFrame.Remaining < 4) return null;
                    item.InnerHabitableZone = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.OuterHabitableZone = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HIP = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Radius = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.TemperatureInK = dataFrame.ReadUInt32();
                    return (int)StarDataComponent_FieldIndex.TemperatureInK;
                }
                default:
                    return AComponentBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class StarDataComponentBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class StarDataComponentBinaryOverlay :
        AComponentBinaryOverlay,
        IStarDataComponentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StarDataComponent_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => StarDataComponent_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => StarDataComponentCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => StarDataComponentSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => StarDataComponentBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StarDataComponentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        private RangeInt32? _DATALocation;
        #region CatalogueId
        private int _CatalogueIdLocation => _DATALocation!.Value.Min;
        private bool _CatalogueId_IsSet => _DATALocation.HasValue;
        public String CatalogueId => _CatalogueId_IsSet ? BinaryStringUtility.ParsePrependedString(_recordData.Slice(_CatalogueIdLocation), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        protected int CatalogueIdEndingPos;
        #endregion
        #region SpectralClass
        private int _SpectralClassLocation => CatalogueIdEndingPos;
        private bool _SpectralClass_IsSet => _DATALocation.HasValue;
        public String SpectralClass => _SpectralClass_IsSet ? BinaryStringUtility.ParsePrependedString(_recordData.Slice(_SpectralClassLocation), lengthLength: 4, encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        protected int SpectralClassEndingPos;
        #endregion
        #region Magnitude
        private int _MagnitudeLocation => SpectralClassEndingPos;
        private bool _Magnitude_IsSet => _DATALocation.HasValue;
        public Single Magnitude => _Magnitude_IsSet ? _recordData.Slice(_MagnitudeLocation, 4).Float() : default(Single);
        #endregion
        #region MassInSm
        private int _MassInSmLocation => SpectralClassEndingPos + 0x4;
        private bool _MassInSm_IsSet => _DATALocation.HasValue;
        public Single MassInSm => _MassInSm_IsSet ? _recordData.Slice(_MassInSmLocation, 4).Float() / 1.98847E+30f : default(Single);
        #endregion
        #region InnerHabitableZone
        private int _InnerHabitableZoneLocation => SpectralClassEndingPos + 0x8;
        private bool _InnerHabitableZone_IsSet => _DATALocation.HasValue;
        public Single InnerHabitableZone => _InnerHabitableZone_IsSet ? _recordData.Slice(_InnerHabitableZoneLocation, 4).Float() : default(Single);
        #endregion
        #region OuterHabitableZone
        private int _OuterHabitableZoneLocation => SpectralClassEndingPos + 0xC;
        private bool _OuterHabitableZone_IsSet => _DATALocation.HasValue;
        public Single OuterHabitableZone => _OuterHabitableZone_IsSet ? _recordData.Slice(_OuterHabitableZoneLocation, 4).Float() : default(Single);
        #endregion
        #region HIP
        private int _HIPLocation => SpectralClassEndingPos + 0x10;
        private bool _HIP_IsSet => _DATALocation.HasValue;
        public UInt32 HIP => _HIP_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_HIPLocation, 4)) : default(UInt32);
        #endregion
        #region Radius
        private int _RadiusLocation => SpectralClassEndingPos + 0x14;
        private bool _Radius_IsSet => _DATALocation.HasValue;
        public UInt32 Radius => _Radius_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_RadiusLocation, 4)) : default(UInt32);
        #endregion
        #region TemperatureInK
        private int _TemperatureInKLocation => SpectralClassEndingPos + 0x18;
        private bool _TemperatureInK_IsSet => _DATALocation.HasValue;
        public UInt32 TemperatureInK => _TemperatureInK_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_TemperatureInKLocation, 4)) : default(UInt32);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected StarDataComponentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IStarDataComponentGetter StarDataComponentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new StarDataComponentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            ret.CatalogueIdEndingPos = ret._DATALocation!.Value.Min + BinaryPrimitives.ReadInt32LittleEndian(ret._recordData.Slice(ret._DATALocation!.Value.Min)) + 4;
            ret.SpectralClassEndingPos = ret.CatalogueIdEndingPos + BinaryPrimitives.ReadInt32LittleEndian(ret._recordData.Slice(ret.CatalogueIdEndingPos)) + 4;
            return ret;
        }

        public static IStarDataComponentGetter StarDataComponentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return StarDataComponentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)StarDataComponent_FieldIndex.TemperatureInK;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarDataComponentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStarDataComponentGetter rhs) return false;
            return ((StarDataComponentCommon)((IStarDataComponentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarDataComponentGetter? obj)
        {
            return ((StarDataComponentCommon)((IStarDataComponentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarDataComponentCommon)((IStarDataComponentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

