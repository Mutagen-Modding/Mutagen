/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Parameters;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Cache.Internals;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Masters;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Loqui;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Strings.DI;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.IO.Abstractions;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Threading.Tasks;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class StarfieldMod :
        IEquatable<IStarfieldModGetter>,
        ILoquiObjectSetter<StarfieldMod>,
        IStarfieldMod
    {
        #region Ctor
        protected StarfieldMod()
        {
            _GameSettings_Object = new StarfieldGroup<GameSetting>(this);
            _Keywords_Object = new StarfieldGroup<Keyword>(this);
            _FFKW_Object = new StarfieldGroup<FFKWRecord>(this);
            _LocationReferenceTypes_Object = new StarfieldGroup<LocationReferenceType>(this);
            _Actions_Object = new StarfieldGroup<ActionRecord>(this);
            _Transforms_Object = new StarfieldGroup<Transform>(this);
            _TextureSets_Object = new StarfieldGroup<TextureSet>(this);
            _Globals_Object = new StarfieldGroup<Global>(this);
            _DamageTypes_Object = new StarfieldGroup<DamageType>(this);
            _Classes_Object = new StarfieldGroup<Class>(this);
            _Factions_Object = new StarfieldGroup<Faction>(this);
            _AffinityEvents_Object = new StarfieldGroup<AffinityEvent>(this);
            _HeadParts_Object = new StarfieldGroup<HeadPart>(this);
            _Races_Object = new StarfieldGroup<Race>(this);
            _SoundMarkers_Object = new StarfieldGroup<SoundMarker>(this);
            _SoundEchoMarkers_Object = new StarfieldGroup<SoundEchoMarker>(this);
            _AcousticSpaces_Object = new StarfieldGroup<AcousticSpace>(this);
            _AudioOcclusionPrimitives_Object = new StarfieldGroup<AudioOcclusionPrimitive>(this);
            _MagicEffects_Object = new StarfieldGroup<MagicEffect>(this);
            _LandscapeTextures_Object = new StarfieldGroup<LandscapeTexture>(this);
            _ProjectedDecals_Object = new StarfieldGroup<ProjectedDecal>(this);
            _ObjectEffects_Object = new StarfieldGroup<ObjectEffect>(this);
            _Spells_Object = new StarfieldGroup<Spell>(this);
            _Activators_Object = new StarfieldGroup<Activator>(this);
            _CurveTables_Object = new StarfieldGroup<CurveTable>(this);
            _Curve3Ds_Object = new StarfieldGroup<Curve3D>(this);
            _Armors_Object = new StarfieldGroup<Armor>(this);
            _Books_Object = new StarfieldGroup<Book>(this);
            _Containers_Object = new StarfieldGroup<Container>(this);
            _Doors_Object = new StarfieldGroup<Door>(this);
            _Lights_Object = new StarfieldGroup<Light>(this);
            _MiscItems_Object = new StarfieldGroup<MiscItem>(this);
            _Statics_Object = new StarfieldGroup<Static>(this);
            _StaticCollections_Object = new StarfieldGroup<StaticCollection>(this);
            _PackIns_Object = new StarfieldGroup<PackIn>(this);
            _MoveableStatics_Object = new StarfieldGroup<MoveableStatic>(this);
            _Grasses_Object = new StarfieldGroup<Grass>(this);
            _Florae_Object = new StarfieldGroup<Flora>(this);
            _Furniture_Object = new StarfieldGroup<Furniture>(this);
            _Weapons_Object = new StarfieldGroup<Weapon>(this);
            _Ammunitions_Object = new StarfieldGroup<Ammunition>(this);
            _Npcs_Object = new StarfieldGroup<Npc>(this);
            _LeveledNpcs_Object = new StarfieldGroup<LeveledNpc>(this);
            _LeveledPackIns_Object = new StarfieldGroup<LeveledPackIn>(this);
            _Keys_Object = new StarfieldGroup<Key>(this);
            _Ingestibles_Object = new StarfieldGroup<Ingestible>(this);
            _IdleMarkers_Object = new StarfieldGroup<IdleMarker>(this);
            _BiomeMarkers_Object = new StarfieldGroup<BiomeMarker>(this);
            _Notes_Object = new StarfieldGroup<Note>(this);
            _Projectiles_Object = new StarfieldGroup<Projectile>(this);
            _Hazards_Object = new StarfieldGroup<Hazard>(this);
            _BendableSplines_Object = new StarfieldGroup<BendableSpline>(this);
            _Terminals_Object = new StarfieldGroup<Terminal>(this);
            _LeveledItems_Object = new StarfieldGroup<LeveledItem>(this);
            _GenericBaseFormTemplates_Object = new StarfieldGroup<GenericBaseFormTemplate>(this);
            _GenericBaseForms_Object = new StarfieldGroup<GenericBaseForm>(this);
            _LeveledBaseForms_Object = new StarfieldGroup<LeveledBaseForm>(this);
            _Weathers_Object = new StarfieldGroup<Weather>(this);
            _WeatherSettings_Object = new StarfieldGroup<WeatherSetting>(this);
            _Climates_Object = new StarfieldGroup<Climate>(this);
            _ShaderParticleGeometries_Object = new StarfieldGroup<ShaderParticleGeometry>(this);
            _Regions_Object = new StarfieldGroup<Region>(this);
            _NavigationMeshInfoMaps_Object = new StarfieldGroup<NavigationMeshInfoMap>(this);
            _Worldspaces_Object = new StarfieldGroup<Worldspace>(this);
            _Quests_Object = new StarfieldGroup<Quest>(this);
            _IdleAnimations_Object = new StarfieldGroup<IdleAnimation>(this);
            _Packages_Object = new StarfieldGroup<Package>(this);
            _CombatStyles_Object = new StarfieldGroup<CombatStyle>(this);
            _LoadScreens_Object = new StarfieldGroup<LoadScreen>(this);
            _AnimatedObjects_Object = new StarfieldGroup<AnimatedObject>(this);
            _Waters_Object = new StarfieldGroup<Water>(this);
            _EffectShaders_Object = new StarfieldGroup<EffectShader>(this);
            _Explosions_Object = new StarfieldGroup<Explosion>(this);
            _Debris_Object = new StarfieldGroup<Debris>(this);
            _ImageSpaces_Object = new StarfieldGroup<ImageSpace>(this);
            _ImageSpaceAdapters_Object = new StarfieldGroup<ImageSpaceAdapter>(this);
            _FormLists_Object = new StarfieldGroup<FormList>(this);
            _Perks_Object = new StarfieldGroup<Perk>(this);
            _BodyParts_Object = new StarfieldGroup<BodyPartData>(this);
            _AddonNodes_Object = new StarfieldGroup<AddonNode>(this);
            _ActorValueInformation_Object = new StarfieldGroup<ActorValueInformation>(this);
            _CameraShots_Object = new StarfieldGroup<CameraShot>(this);
            _CameraPaths_Object = new StarfieldGroup<CameraPath>(this);
            _VoiceTypes_Object = new StarfieldGroup<VoiceType>(this);
            _MaterialTypes_Object = new StarfieldGroup<MaterialType>(this);
            _Impacts_Object = new StarfieldGroup<Impact>(this);
            _ImpactDataSets_Object = new StarfieldGroup<ImpactDataSet>(this);
            _ArmorAddons_Object = new StarfieldGroup<ArmorAddon>(this);
            _Locations_Object = new StarfieldGroup<Location>(this);
            _Messages_Object = new StarfieldGroup<Message>(this);
            _DefaultObjectManagers_Object = new StarfieldGroup<DefaultObjectManager>(this);
            _DefaultObjects_Object = new StarfieldGroup<DefaultObject>(this);
            _LightingTemplates_Object = new StarfieldGroup<LightingTemplate>(this);
            _MusicTypes_Object = new StarfieldGroup<MusicType>(this);
            _Footsteps_Object = new StarfieldGroup<Footstep>(this);
            _FootstepSets_Object = new StarfieldGroup<FootstepSet>(this);
            _StoryManagerBranchNodes_Object = new StarfieldGroup<StoryManagerBranchNode>(this);
            _StoryManagerQuestNodes_Object = new StarfieldGroup<StoryManagerQuestNode>(this);
            _StoryManagerEventNodes_Object = new StarfieldGroup<StoryManagerEventNode>(this);
            _MusicTracks_Object = new StarfieldGroup<MusicTrack>(this);
            _EquipTypes_Object = new StarfieldGroup<EquipType>(this);
            _Outfits_Object = new StarfieldGroup<Outfit>(this);
            _ArtObjects_Object = new StarfieldGroup<ArtObject>(this);
            _MovementTypes_Object = new StarfieldGroup<MovementType>(this);
            _CollisionLayers_Object = new StarfieldGroup<CollisionLayer>(this);
            _Colors_Object = new StarfieldGroup<ColorRecord>(this);
            _ReverbParameters_Object = new StarfieldGroup<ReverbParameters>(this);
            _ReferenceGroups_Object = new StarfieldGroup<ReferenceGroup>(this);
            _AimModels_Object = new StarfieldGroup<AimModel>(this);
            _AimAssistModels_Object = new StarfieldGroup<AimAssistModel>(this);
            _MeleeAimAssistModels_Object = new StarfieldGroup<MeleeAimAssistModel>(this);
            _Layers_Object = new StarfieldGroup<Layer>(this);
            _ConstructibleObjects_Object = new StarfieldGroup<ConstructibleObject>(this);
            _ObjectModifications_Object = new StarfieldGroup<AObjectModification>(this);
            _Zooms_Object = new StarfieldGroup<Zoom>(this);
            _InstanceNamingRules_Object = new StarfieldGroup<InstanceNamingRules>(this);
            _SoundKeywordMappings_Object = new StarfieldGroup<SoundKeywordMapping>(this);
            _AttractionRules_Object = new StarfieldGroup<AttractionRule>(this);
            _SceneCollections_Object = new StarfieldGroup<SceneCollection>(this);
            _AnimationSoundTagSets_Object = new StarfieldGroup<AnimationSoundTagSet>(this);
            _Resources_Object = new StarfieldGroup<Resource>(this);
            _Biomes_Object = new StarfieldGroup<Biome>(this);
            _NavigationMeshObstacleCoverManagers_Object = new StarfieldGroup<NavigationMeshObstacleCoverManager>(this);
            _LensFlares_Object = new StarfieldGroup<LensFlare>(this);
            _ObjectVisibilityManagers_Object = new StarfieldGroup<ObjectVisibilityManager>(this);
            _SnapTemplateNodes_Object = new StarfieldGroup<SnapTemplateNode>(this);
            _SnapTemplates_Object = new StarfieldGroup<SnapTemplate>(this);
            _GroundCovers_Object = new StarfieldGroup<GroundCover>(this);
            _MorphableObjects_Object = new StarfieldGroup<MorphableObject>(this);
            _Traversals_Object = new StarfieldGroup<Traversal>(this);
            _ResourceGenerationData_Object = new StarfieldGroup<ResourceGenerationData>(this);
            _BiomeSwaps_Object = new StarfieldGroup<BiomeSwap>(this);
            _Atmospheres_Object = new StarfieldGroup<Atmosphere>(this);
            _LeveledSpaceCells_Object = new StarfieldGroup<LeveledSpaceCell>(this);
            _SpeechChallenges_Object = new StarfieldGroup<SpeechChallenge>(this);
            _AimAssistPoses_Object = new StarfieldGroup<AimAssistPose>(this);
            _VolumetricLightings_Object = new StarfieldGroup<VolumetricLighting>(this);
            _SurfaceBlocks_Object = new StarfieldGroup<SurfaceBlock>(this);
            _SurfacePatternConfigs_Object = new StarfieldGroup<SurfacePatternConfig>(this);
            _SurfacePatterns_Object = new StarfieldGroup<SurfacePattern>(this);
            _SurfaceTrees_Object = new StarfieldGroup<SurfaceTree>(this);
            _PlanetContentManagerTrees_Object = new StarfieldGroup<PlanetContentManagerTree>(this);
            _BoneModifiers_Object = new StarfieldGroup<BoneModifier>(this);
            _SnapTemplateBehaviors_Object = new StarfieldGroup<SnapTemplateBehavior>(this);
            _Planets_Object = new StarfieldGroup<Planet>(this);
            _ConditionRecords_Object = new StarfieldGroup<ConditionRecord>(this);
            _PlanetContentManagerBranchNodes_Object = new StarfieldGroup<PlanetContentManagerBranchNode>(this);
            _PlanetContentManagerContentNodes_Object = new StarfieldGroup<PlanetContentManagerContentNode>(this);
            _Stars_Object = new StarfieldGroup<Star>(this);
            _WWiseEventDatas_Object = new StarfieldGroup<WWiseEventData>(this);
            _ResearchProjects_Object = new StarfieldGroup<ResearchProject>(this);
            _AimOpticalSightMarkers_Object = new StarfieldGroup<AimOpticalSightMarker>(this);
            _AmbienceSets_Object = new StarfieldGroup<AmbienceSet>(this);
            _WeaponBarrelModels_Object = new StarfieldGroup<WeaponBarrelModel>(this);
            _SurfacePatternStyles_Object = new StarfieldGroup<SurfacePatternStyle>(this);
            _LayeredMaterialSwaps_Object = new StarfieldGroup<LayeredMaterialSwap>(this);
            _ForceDatas_Object = new StarfieldGroup<ForceData>(this);
            _TerminalMenus_Object = new StarfieldGroup<TerminalMenu>(this);
            _EffectSequences_Object = new StarfieldGroup<EffectSequence>(this);
            _SecondaryDamageLists_Object = new StarfieldGroup<SecondaryDamageList>(this);
            _MaterialPaths_Object = new StarfieldGroup<MaterialPath>(this);
            _Clouds_Object = new StarfieldGroup<Clouds>(this);
            _FogVolumes_Object = new StarfieldGroup<FogVolume>(this);
            _WWiseKeywordMappings_Object = new StarfieldGroup<WWiseKeywordMapping>(this);
            _LegendaryItems_Object = new StarfieldGroup<LegendaryItem>(this);
            _ParticleSystemDefineCollisions_Object = new StarfieldGroup<ParticleSystemDefineCollision>(this);
            _SunPresets_Object = new StarfieldGroup<SunPreset>(this);
            _PhotoModeFeatures_Object = new StarfieldGroup<PhotoModeFeature>(this);
            _GameplayOptions_Object = new StarfieldGroup<GameplayOptions>(this);
            _GameplayOptionsGroups_Object = new StarfieldGroup<GameplayOptionsGroup>(this);
            _TimeOfDays_Object = new StarfieldGroup<TimeOfDayRecord>(this);
            _ActorValueModulations_Object = new StarfieldGroup<ActorValueModulation>(this);
            _Challenges_Object = new StarfieldGroup<Challenge>(this);
            _FacialExpressions_Object = new StarfieldGroup<FacialExpression>(this);
            _PERS_Object = new StarfieldGroup<PERS>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly StarfieldModHeader _ModHeader_Object = new StarfieldModHeader();
        public StarfieldModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldModHeaderGetter IStarfieldModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<GameSetting> _GameSettings_Object;
        public StarfieldGroup<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGameSettingGetter> IStarfieldModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Keyword> _Keywords_Object;
        public StarfieldGroup<Keyword> Keywords => _Keywords_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IKeywordGetter> IStarfieldModGetter.Keywords => _Keywords_Object;
        #endregion
        #region FFKW
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<FFKWRecord> _FFKW_Object;
        public StarfieldGroup<FFKWRecord> FFKW => _FFKW_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFFKWRecordGetter> IStarfieldModGetter.FFKW => _FFKW_Object;
        #endregion
        #region LocationReferenceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LocationReferenceType> _LocationReferenceTypes_Object;
        public StarfieldGroup<LocationReferenceType> LocationReferenceTypes => _LocationReferenceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILocationReferenceTypeGetter> IStarfieldModGetter.LocationReferenceTypes => _LocationReferenceTypes_Object;
        #endregion
        #region Actions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ActionRecord> _Actions_Object;
        public StarfieldGroup<ActionRecord> Actions => _Actions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IActionRecordGetter> IStarfieldModGetter.Actions => _Actions_Object;
        #endregion
        #region Transforms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Transform> _Transforms_Object;
        public StarfieldGroup<Transform> Transforms => _Transforms_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ITransformGetter> IStarfieldModGetter.Transforms => _Transforms_Object;
        #endregion
        #region TextureSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<TextureSet> _TextureSets_Object;
        public StarfieldGroup<TextureSet> TextureSets => _TextureSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ITextureSetGetter> IStarfieldModGetter.TextureSets => _TextureSets_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Global> _Globals_Object;
        public StarfieldGroup<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGlobalGetter> IStarfieldModGetter.Globals => _Globals_Object;
        #endregion
        #region DamageTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<DamageType> _DamageTypes_Object;
        public StarfieldGroup<DamageType> DamageTypes => _DamageTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IDamageTypeGetter> IStarfieldModGetter.DamageTypes => _DamageTypes_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Class> _Classes_Object;
        public StarfieldGroup<Class> Classes => _Classes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IClassGetter> IStarfieldModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Faction> _Factions_Object;
        public StarfieldGroup<Faction> Factions => _Factions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFactionGetter> IStarfieldModGetter.Factions => _Factions_Object;
        #endregion
        #region AffinityEvents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AffinityEvent> _AffinityEvents_Object;
        public StarfieldGroup<AffinityEvent> AffinityEvents => _AffinityEvents_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAffinityEventGetter> IStarfieldModGetter.AffinityEvents => _AffinityEvents_Object;
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<HeadPart> _HeadParts_Object;
        public StarfieldGroup<HeadPart> HeadParts => _HeadParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IHeadPartGetter> IStarfieldModGetter.HeadParts => _HeadParts_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Race> _Races_Object;
        public StarfieldGroup<Race> Races => _Races_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IRaceGetter> IStarfieldModGetter.Races => _Races_Object;
        #endregion
        #region SoundMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SoundMarker> _SoundMarkers_Object;
        public StarfieldGroup<SoundMarker> SoundMarkers => _SoundMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISoundMarkerGetter> IStarfieldModGetter.SoundMarkers => _SoundMarkers_Object;
        #endregion
        #region SoundEchoMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SoundEchoMarker> _SoundEchoMarkers_Object;
        public StarfieldGroup<SoundEchoMarker> SoundEchoMarkers => _SoundEchoMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISoundEchoMarkerGetter> IStarfieldModGetter.SoundEchoMarkers => _SoundEchoMarkers_Object;
        #endregion
        #region AcousticSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AcousticSpace> _AcousticSpaces_Object;
        public StarfieldGroup<AcousticSpace> AcousticSpaces => _AcousticSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAcousticSpaceGetter> IStarfieldModGetter.AcousticSpaces => _AcousticSpaces_Object;
        #endregion
        #region AudioOcclusionPrimitives
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AudioOcclusionPrimitive> _AudioOcclusionPrimitives_Object;
        public StarfieldGroup<AudioOcclusionPrimitive> AudioOcclusionPrimitives => _AudioOcclusionPrimitives_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAudioOcclusionPrimitiveGetter> IStarfieldModGetter.AudioOcclusionPrimitives => _AudioOcclusionPrimitives_Object;
        #endregion
        #region MagicEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<MagicEffect> _MagicEffects_Object;
        public StarfieldGroup<MagicEffect> MagicEffects => _MagicEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMagicEffectGetter> IStarfieldModGetter.MagicEffects => _MagicEffects_Object;
        #endregion
        #region LandscapeTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LandscapeTexture> _LandscapeTextures_Object;
        public StarfieldGroup<LandscapeTexture> LandscapeTextures => _LandscapeTextures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILandscapeTextureGetter> IStarfieldModGetter.LandscapeTextures => _LandscapeTextures_Object;
        #endregion
        #region ProjectedDecals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ProjectedDecal> _ProjectedDecals_Object;
        public StarfieldGroup<ProjectedDecal> ProjectedDecals => _ProjectedDecals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IProjectedDecalGetter> IStarfieldModGetter.ProjectedDecals => _ProjectedDecals_Object;
        #endregion
        #region ObjectEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ObjectEffect> _ObjectEffects_Object;
        public StarfieldGroup<ObjectEffect> ObjectEffects => _ObjectEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IObjectEffectGetter> IStarfieldModGetter.ObjectEffects => _ObjectEffects_Object;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Spell> _Spells_Object;
        public StarfieldGroup<Spell> Spells => _Spells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISpellGetter> IStarfieldModGetter.Spells => _Spells_Object;
        #endregion
        #region Activators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Activator> _Activators_Object;
        public StarfieldGroup<Activator> Activators => _Activators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IActivatorGetter> IStarfieldModGetter.Activators => _Activators_Object;
        #endregion
        #region CurveTables
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<CurveTable> _CurveTables_Object;
        public StarfieldGroup<CurveTable> CurveTables => _CurveTables_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ICurveTableGetter> IStarfieldModGetter.CurveTables => _CurveTables_Object;
        #endregion
        #region Curve3Ds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Curve3D> _Curve3Ds_Object;
        public StarfieldGroup<Curve3D> Curve3Ds => _Curve3Ds_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ICurve3DGetter> IStarfieldModGetter.Curve3Ds => _Curve3Ds_Object;
        #endregion
        #region Armors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Armor> _Armors_Object;
        public StarfieldGroup<Armor> Armors => _Armors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IArmorGetter> IStarfieldModGetter.Armors => _Armors_Object;
        #endregion
        #region Books
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Book> _Books_Object;
        public StarfieldGroup<Book> Books => _Books_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IBookGetter> IStarfieldModGetter.Books => _Books_Object;
        #endregion
        #region Containers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Container> _Containers_Object;
        public StarfieldGroup<Container> Containers => _Containers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IContainerGetter> IStarfieldModGetter.Containers => _Containers_Object;
        #endregion
        #region Doors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Door> _Doors_Object;
        public StarfieldGroup<Door> Doors => _Doors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IDoorGetter> IStarfieldModGetter.Doors => _Doors_Object;
        #endregion
        #region Lights
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Light> _Lights_Object;
        public StarfieldGroup<Light> Lights => _Lights_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILightGetter> IStarfieldModGetter.Lights => _Lights_Object;
        #endregion
        #region MiscItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<MiscItem> _MiscItems_Object;
        public StarfieldGroup<MiscItem> MiscItems => _MiscItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMiscItemGetter> IStarfieldModGetter.MiscItems => _MiscItems_Object;
        #endregion
        #region Statics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Static> _Statics_Object;
        public StarfieldGroup<Static> Statics => _Statics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IStaticGetter> IStarfieldModGetter.Statics => _Statics_Object;
        #endregion
        #region StaticCollections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<StaticCollection> _StaticCollections_Object;
        public StarfieldGroup<StaticCollection> StaticCollections => _StaticCollections_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IStaticCollectionGetter> IStarfieldModGetter.StaticCollections => _StaticCollections_Object;
        #endregion
        #region PackIns
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<PackIn> _PackIns_Object;
        public StarfieldGroup<PackIn> PackIns => _PackIns_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IPackInGetter> IStarfieldModGetter.PackIns => _PackIns_Object;
        #endregion
        #region MoveableStatics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<MoveableStatic> _MoveableStatics_Object;
        public StarfieldGroup<MoveableStatic> MoveableStatics => _MoveableStatics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMoveableStaticGetter> IStarfieldModGetter.MoveableStatics => _MoveableStatics_Object;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Grass> _Grasses_Object;
        public StarfieldGroup<Grass> Grasses => _Grasses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGrassGetter> IStarfieldModGetter.Grasses => _Grasses_Object;
        #endregion
        #region Florae
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Flora> _Florae_Object;
        public StarfieldGroup<Flora> Florae => _Florae_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFloraGetter> IStarfieldModGetter.Florae => _Florae_Object;
        #endregion
        #region Furniture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Furniture> _Furniture_Object;
        public StarfieldGroup<Furniture> Furniture => _Furniture_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFurnitureGetter> IStarfieldModGetter.Furniture => _Furniture_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Weapon> _Weapons_Object;
        public StarfieldGroup<Weapon> Weapons => _Weapons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IWeaponGetter> IStarfieldModGetter.Weapons => _Weapons_Object;
        #endregion
        #region Ammunitions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Ammunition> _Ammunitions_Object;
        public StarfieldGroup<Ammunition> Ammunitions => _Ammunitions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAmmunitionGetter> IStarfieldModGetter.Ammunitions => _Ammunitions_Object;
        #endregion
        #region Npcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Npc> _Npcs_Object;
        public StarfieldGroup<Npc> Npcs => _Npcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<INpcGetter> IStarfieldModGetter.Npcs => _Npcs_Object;
        #endregion
        #region LeveledNpcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LeveledNpc> _LeveledNpcs_Object;
        public StarfieldGroup<LeveledNpc> LeveledNpcs => _LeveledNpcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILeveledNpcGetter> IStarfieldModGetter.LeveledNpcs => _LeveledNpcs_Object;
        #endregion
        #region LeveledPackIns
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LeveledPackIn> _LeveledPackIns_Object;
        public StarfieldGroup<LeveledPackIn> LeveledPackIns => _LeveledPackIns_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILeveledPackInGetter> IStarfieldModGetter.LeveledPackIns => _LeveledPackIns_Object;
        #endregion
        #region Keys
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Key> _Keys_Object;
        public StarfieldGroup<Key> Keys => _Keys_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IKeyGetter> IStarfieldModGetter.Keys => _Keys_Object;
        #endregion
        #region Ingestibles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Ingestible> _Ingestibles_Object;
        public StarfieldGroup<Ingestible> Ingestibles => _Ingestibles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IIngestibleGetter> IStarfieldModGetter.Ingestibles => _Ingestibles_Object;
        #endregion
        #region IdleMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<IdleMarker> _IdleMarkers_Object;
        public StarfieldGroup<IdleMarker> IdleMarkers => _IdleMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IIdleMarkerGetter> IStarfieldModGetter.IdleMarkers => _IdleMarkers_Object;
        #endregion
        #region BiomeMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<BiomeMarker> _BiomeMarkers_Object;
        public StarfieldGroup<BiomeMarker> BiomeMarkers => _BiomeMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IBiomeMarkerGetter> IStarfieldModGetter.BiomeMarkers => _BiomeMarkers_Object;
        #endregion
        #region Notes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Note> _Notes_Object;
        public StarfieldGroup<Note> Notes => _Notes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<INoteGetter> IStarfieldModGetter.Notes => _Notes_Object;
        #endregion
        #region Projectiles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Projectile> _Projectiles_Object;
        public StarfieldGroup<Projectile> Projectiles => _Projectiles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IProjectileGetter> IStarfieldModGetter.Projectiles => _Projectiles_Object;
        #endregion
        #region Hazards
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Hazard> _Hazards_Object;
        public StarfieldGroup<Hazard> Hazards => _Hazards_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IHazardGetter> IStarfieldModGetter.Hazards => _Hazards_Object;
        #endregion
        #region BendableSplines
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<BendableSpline> _BendableSplines_Object;
        public StarfieldGroup<BendableSpline> BendableSplines => _BendableSplines_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IBendableSplineGetter> IStarfieldModGetter.BendableSplines => _BendableSplines_Object;
        #endregion
        #region Terminals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Terminal> _Terminals_Object;
        public StarfieldGroup<Terminal> Terminals => _Terminals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ITerminalGetter> IStarfieldModGetter.Terminals => _Terminals_Object;
        #endregion
        #region LeveledItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LeveledItem> _LeveledItems_Object;
        public StarfieldGroup<LeveledItem> LeveledItems => _LeveledItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILeveledItemGetter> IStarfieldModGetter.LeveledItems => _LeveledItems_Object;
        #endregion
        #region GenericBaseFormTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<GenericBaseFormTemplate> _GenericBaseFormTemplates_Object;
        public StarfieldGroup<GenericBaseFormTemplate> GenericBaseFormTemplates => _GenericBaseFormTemplates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGenericBaseFormTemplateGetter> IStarfieldModGetter.GenericBaseFormTemplates => _GenericBaseFormTemplates_Object;
        #endregion
        #region GenericBaseForms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<GenericBaseForm> _GenericBaseForms_Object;
        public StarfieldGroup<GenericBaseForm> GenericBaseForms => _GenericBaseForms_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGenericBaseFormGetter> IStarfieldModGetter.GenericBaseForms => _GenericBaseForms_Object;
        #endregion
        #region LeveledBaseForms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LeveledBaseForm> _LeveledBaseForms_Object;
        public StarfieldGroup<LeveledBaseForm> LeveledBaseForms => _LeveledBaseForms_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILeveledBaseFormGetter> IStarfieldModGetter.LeveledBaseForms => _LeveledBaseForms_Object;
        #endregion
        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Weather> _Weathers_Object;
        public StarfieldGroup<Weather> Weathers => _Weathers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IWeatherGetter> IStarfieldModGetter.Weathers => _Weathers_Object;
        #endregion
        #region WeatherSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<WeatherSetting> _WeatherSettings_Object;
        public StarfieldGroup<WeatherSetting> WeatherSettings => _WeatherSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IWeatherSettingGetter> IStarfieldModGetter.WeatherSettings => _WeatherSettings_Object;
        #endregion
        #region Climates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Climate> _Climates_Object;
        public StarfieldGroup<Climate> Climates => _Climates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IClimateGetter> IStarfieldModGetter.Climates => _Climates_Object;
        #endregion
        #region ShaderParticleGeometries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ShaderParticleGeometry> _ShaderParticleGeometries_Object;
        public StarfieldGroup<ShaderParticleGeometry> ShaderParticleGeometries => _ShaderParticleGeometries_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IShaderParticleGeometryGetter> IStarfieldModGetter.ShaderParticleGeometries => _ShaderParticleGeometries_Object;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Region> _Regions_Object;
        public StarfieldGroup<Region> Regions => _Regions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IRegionGetter> IStarfieldModGetter.Regions => _Regions_Object;
        #endregion
        #region NavigationMeshInfoMaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<NavigationMeshInfoMap> _NavigationMeshInfoMaps_Object;
        public StarfieldGroup<NavigationMeshInfoMap> NavigationMeshInfoMaps => _NavigationMeshInfoMaps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<INavigationMeshInfoMapGetter> IStarfieldModGetter.NavigationMeshInfoMaps => _NavigationMeshInfoMaps_Object;
        #endregion
        #region Cells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly StarfieldListGroup<CellBlock> _Cells_Object = new StarfieldListGroup<CellBlock>();
        public StarfieldListGroup<CellBlock> Cells => _Cells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldListGroupGetter<ICellBlockGetter> IStarfieldModGetter.Cells => _Cells_Object;
        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Worldspace> _Worldspaces_Object;
        public StarfieldGroup<Worldspace> Worldspaces => _Worldspaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IWorldspaceGetter> IStarfieldModGetter.Worldspaces => _Worldspaces_Object;
        #endregion
        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Quest> _Quests_Object;
        public StarfieldGroup<Quest> Quests => _Quests_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IQuestGetter> IStarfieldModGetter.Quests => _Quests_Object;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<IdleAnimation> _IdleAnimations_Object;
        public StarfieldGroup<IdleAnimation> IdleAnimations => _IdleAnimations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IIdleAnimationGetter> IStarfieldModGetter.IdleAnimations => _IdleAnimations_Object;
        #endregion
        #region Packages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Package> _Packages_Object;
        public StarfieldGroup<Package> Packages => _Packages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IPackageGetter> IStarfieldModGetter.Packages => _Packages_Object;
        #endregion
        #region CombatStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<CombatStyle> _CombatStyles_Object;
        public StarfieldGroup<CombatStyle> CombatStyles => _CombatStyles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ICombatStyleGetter> IStarfieldModGetter.CombatStyles => _CombatStyles_Object;
        #endregion
        #region LoadScreens
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LoadScreen> _LoadScreens_Object;
        public StarfieldGroup<LoadScreen> LoadScreens => _LoadScreens_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILoadScreenGetter> IStarfieldModGetter.LoadScreens => _LoadScreens_Object;
        #endregion
        #region AnimatedObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AnimatedObject> _AnimatedObjects_Object;
        public StarfieldGroup<AnimatedObject> AnimatedObjects => _AnimatedObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAnimatedObjectGetter> IStarfieldModGetter.AnimatedObjects => _AnimatedObjects_Object;
        #endregion
        #region Waters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Water> _Waters_Object;
        public StarfieldGroup<Water> Waters => _Waters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IWaterGetter> IStarfieldModGetter.Waters => _Waters_Object;
        #endregion
        #region EffectShaders
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<EffectShader> _EffectShaders_Object;
        public StarfieldGroup<EffectShader> EffectShaders => _EffectShaders_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IEffectShaderGetter> IStarfieldModGetter.EffectShaders => _EffectShaders_Object;
        #endregion
        #region Explosions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Explosion> _Explosions_Object;
        public StarfieldGroup<Explosion> Explosions => _Explosions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IExplosionGetter> IStarfieldModGetter.Explosions => _Explosions_Object;
        #endregion
        #region Debris
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Debris> _Debris_Object;
        public StarfieldGroup<Debris> Debris => _Debris_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IDebrisGetter> IStarfieldModGetter.Debris => _Debris_Object;
        #endregion
        #region ImageSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ImageSpace> _ImageSpaces_Object;
        public StarfieldGroup<ImageSpace> ImageSpaces => _ImageSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IImageSpaceGetter> IStarfieldModGetter.ImageSpaces => _ImageSpaces_Object;
        #endregion
        #region ImageSpaceAdapters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ImageSpaceAdapter> _ImageSpaceAdapters_Object;
        public StarfieldGroup<ImageSpaceAdapter> ImageSpaceAdapters => _ImageSpaceAdapters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IImageSpaceAdapterGetter> IStarfieldModGetter.ImageSpaceAdapters => _ImageSpaceAdapters_Object;
        #endregion
        #region FormLists
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<FormList> _FormLists_Object;
        public StarfieldGroup<FormList> FormLists => _FormLists_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFormListGetter> IStarfieldModGetter.FormLists => _FormLists_Object;
        #endregion
        #region Perks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Perk> _Perks_Object;
        public StarfieldGroup<Perk> Perks => _Perks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IPerkGetter> IStarfieldModGetter.Perks => _Perks_Object;
        #endregion
        #region BodyParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<BodyPartData> _BodyParts_Object;
        public StarfieldGroup<BodyPartData> BodyParts => _BodyParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IBodyPartDataGetter> IStarfieldModGetter.BodyParts => _BodyParts_Object;
        #endregion
        #region AddonNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AddonNode> _AddonNodes_Object;
        public StarfieldGroup<AddonNode> AddonNodes => _AddonNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAddonNodeGetter> IStarfieldModGetter.AddonNodes => _AddonNodes_Object;
        #endregion
        #region ActorValueInformation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ActorValueInformation> _ActorValueInformation_Object;
        public StarfieldGroup<ActorValueInformation> ActorValueInformation => _ActorValueInformation_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IActorValueInformationGetter> IStarfieldModGetter.ActorValueInformation => _ActorValueInformation_Object;
        #endregion
        #region CameraShots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<CameraShot> _CameraShots_Object;
        public StarfieldGroup<CameraShot> CameraShots => _CameraShots_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ICameraShotGetter> IStarfieldModGetter.CameraShots => _CameraShots_Object;
        #endregion
        #region CameraPaths
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<CameraPath> _CameraPaths_Object;
        public StarfieldGroup<CameraPath> CameraPaths => _CameraPaths_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ICameraPathGetter> IStarfieldModGetter.CameraPaths => _CameraPaths_Object;
        #endregion
        #region VoiceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<VoiceType> _VoiceTypes_Object;
        public StarfieldGroup<VoiceType> VoiceTypes => _VoiceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IVoiceTypeGetter> IStarfieldModGetter.VoiceTypes => _VoiceTypes_Object;
        #endregion
        #region MaterialTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<MaterialType> _MaterialTypes_Object;
        public StarfieldGroup<MaterialType> MaterialTypes => _MaterialTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMaterialTypeGetter> IStarfieldModGetter.MaterialTypes => _MaterialTypes_Object;
        #endregion
        #region Impacts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Impact> _Impacts_Object;
        public StarfieldGroup<Impact> Impacts => _Impacts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IImpactGetter> IStarfieldModGetter.Impacts => _Impacts_Object;
        #endregion
        #region ImpactDataSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ImpactDataSet> _ImpactDataSets_Object;
        public StarfieldGroup<ImpactDataSet> ImpactDataSets => _ImpactDataSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IImpactDataSetGetter> IStarfieldModGetter.ImpactDataSets => _ImpactDataSets_Object;
        #endregion
        #region ArmorAddons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ArmorAddon> _ArmorAddons_Object;
        public StarfieldGroup<ArmorAddon> ArmorAddons => _ArmorAddons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IArmorAddonGetter> IStarfieldModGetter.ArmorAddons => _ArmorAddons_Object;
        #endregion
        #region Locations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Location> _Locations_Object;
        public StarfieldGroup<Location> Locations => _Locations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILocationGetter> IStarfieldModGetter.Locations => _Locations_Object;
        #endregion
        #region Messages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Message> _Messages_Object;
        public StarfieldGroup<Message> Messages => _Messages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMessageGetter> IStarfieldModGetter.Messages => _Messages_Object;
        #endregion
        #region DefaultObjectManagers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<DefaultObjectManager> _DefaultObjectManagers_Object;
        public StarfieldGroup<DefaultObjectManager> DefaultObjectManagers => _DefaultObjectManagers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IDefaultObjectManagerGetter> IStarfieldModGetter.DefaultObjectManagers => _DefaultObjectManagers_Object;
        #endregion
        #region DefaultObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<DefaultObject> _DefaultObjects_Object;
        public StarfieldGroup<DefaultObject> DefaultObjects => _DefaultObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IDefaultObjectGetter> IStarfieldModGetter.DefaultObjects => _DefaultObjects_Object;
        #endregion
        #region LightingTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LightingTemplate> _LightingTemplates_Object;
        public StarfieldGroup<LightingTemplate> LightingTemplates => _LightingTemplates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILightingTemplateGetter> IStarfieldModGetter.LightingTemplates => _LightingTemplates_Object;
        #endregion
        #region MusicTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<MusicType> _MusicTypes_Object;
        public StarfieldGroup<MusicType> MusicTypes => _MusicTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMusicTypeGetter> IStarfieldModGetter.MusicTypes => _MusicTypes_Object;
        #endregion
        #region Footsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Footstep> _Footsteps_Object;
        public StarfieldGroup<Footstep> Footsteps => _Footsteps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFootstepGetter> IStarfieldModGetter.Footsteps => _Footsteps_Object;
        #endregion
        #region FootstepSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<FootstepSet> _FootstepSets_Object;
        public StarfieldGroup<FootstepSet> FootstepSets => _FootstepSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFootstepSetGetter> IStarfieldModGetter.FootstepSets => _FootstepSets_Object;
        #endregion
        #region StoryManagerBranchNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<StoryManagerBranchNode> _StoryManagerBranchNodes_Object;
        public StarfieldGroup<StoryManagerBranchNode> StoryManagerBranchNodes => _StoryManagerBranchNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IStoryManagerBranchNodeGetter> IStarfieldModGetter.StoryManagerBranchNodes => _StoryManagerBranchNodes_Object;
        #endregion
        #region StoryManagerQuestNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<StoryManagerQuestNode> _StoryManagerQuestNodes_Object;
        public StarfieldGroup<StoryManagerQuestNode> StoryManagerQuestNodes => _StoryManagerQuestNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IStoryManagerQuestNodeGetter> IStarfieldModGetter.StoryManagerQuestNodes => _StoryManagerQuestNodes_Object;
        #endregion
        #region StoryManagerEventNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<StoryManagerEventNode> _StoryManagerEventNodes_Object;
        public StarfieldGroup<StoryManagerEventNode> StoryManagerEventNodes => _StoryManagerEventNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IStoryManagerEventNodeGetter> IStarfieldModGetter.StoryManagerEventNodes => _StoryManagerEventNodes_Object;
        #endregion
        #region MusicTracks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<MusicTrack> _MusicTracks_Object;
        public StarfieldGroup<MusicTrack> MusicTracks => _MusicTracks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMusicTrackGetter> IStarfieldModGetter.MusicTracks => _MusicTracks_Object;
        #endregion
        #region EquipTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<EquipType> _EquipTypes_Object;
        public StarfieldGroup<EquipType> EquipTypes => _EquipTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IEquipTypeGetter> IStarfieldModGetter.EquipTypes => _EquipTypes_Object;
        #endregion
        #region Outfits
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Outfit> _Outfits_Object;
        public StarfieldGroup<Outfit> Outfits => _Outfits_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IOutfitGetter> IStarfieldModGetter.Outfits => _Outfits_Object;
        #endregion
        #region ArtObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ArtObject> _ArtObjects_Object;
        public StarfieldGroup<ArtObject> ArtObjects => _ArtObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IArtObjectGetter> IStarfieldModGetter.ArtObjects => _ArtObjects_Object;
        #endregion
        #region MovementTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<MovementType> _MovementTypes_Object;
        public StarfieldGroup<MovementType> MovementTypes => _MovementTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMovementTypeGetter> IStarfieldModGetter.MovementTypes => _MovementTypes_Object;
        #endregion
        #region CollisionLayers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<CollisionLayer> _CollisionLayers_Object;
        public StarfieldGroup<CollisionLayer> CollisionLayers => _CollisionLayers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ICollisionLayerGetter> IStarfieldModGetter.CollisionLayers => _CollisionLayers_Object;
        #endregion
        #region Colors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ColorRecord> _Colors_Object;
        public StarfieldGroup<ColorRecord> Colors => _Colors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IColorRecordGetter> IStarfieldModGetter.Colors => _Colors_Object;
        #endregion
        #region ReverbParameters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ReverbParameters> _ReverbParameters_Object;
        public StarfieldGroup<ReverbParameters> ReverbParameters => _ReverbParameters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IReverbParametersGetter> IStarfieldModGetter.ReverbParameters => _ReverbParameters_Object;
        #endregion
        #region ReferenceGroups
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ReferenceGroup> _ReferenceGroups_Object;
        public StarfieldGroup<ReferenceGroup> ReferenceGroups => _ReferenceGroups_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IReferenceGroupGetter> IStarfieldModGetter.ReferenceGroups => _ReferenceGroups_Object;
        #endregion
        #region AimModels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AimModel> _AimModels_Object;
        public StarfieldGroup<AimModel> AimModels => _AimModels_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAimModelGetter> IStarfieldModGetter.AimModels => _AimModels_Object;
        #endregion
        #region AimAssistModels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AimAssistModel> _AimAssistModels_Object;
        public StarfieldGroup<AimAssistModel> AimAssistModels => _AimAssistModels_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAimAssistModelGetter> IStarfieldModGetter.AimAssistModels => _AimAssistModels_Object;
        #endregion
        #region MeleeAimAssistModels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<MeleeAimAssistModel> _MeleeAimAssistModels_Object;
        public StarfieldGroup<MeleeAimAssistModel> MeleeAimAssistModels => _MeleeAimAssistModels_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMeleeAimAssistModelGetter> IStarfieldModGetter.MeleeAimAssistModels => _MeleeAimAssistModels_Object;
        #endregion
        #region Layers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Layer> _Layers_Object;
        public StarfieldGroup<Layer> Layers => _Layers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILayerGetter> IStarfieldModGetter.Layers => _Layers_Object;
        #endregion
        #region ConstructibleObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ConstructibleObject> _ConstructibleObjects_Object;
        public StarfieldGroup<ConstructibleObject> ConstructibleObjects => _ConstructibleObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IConstructibleObjectGetter> IStarfieldModGetter.ConstructibleObjects => _ConstructibleObjects_Object;
        #endregion
        #region ObjectModifications
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AObjectModification> _ObjectModifications_Object;
        public StarfieldGroup<AObjectModification> ObjectModifications => _ObjectModifications_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAObjectModificationGetter> IStarfieldModGetter.ObjectModifications => _ObjectModifications_Object;
        #endregion
        #region Zooms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Zoom> _Zooms_Object;
        public StarfieldGroup<Zoom> Zooms => _Zooms_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IZoomGetter> IStarfieldModGetter.Zooms => _Zooms_Object;
        #endregion
        #region InstanceNamingRules
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<InstanceNamingRules> _InstanceNamingRules_Object;
        public StarfieldGroup<InstanceNamingRules> InstanceNamingRules => _InstanceNamingRules_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IInstanceNamingRulesGetter> IStarfieldModGetter.InstanceNamingRules => _InstanceNamingRules_Object;
        #endregion
        #region SoundKeywordMappings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SoundKeywordMapping> _SoundKeywordMappings_Object;
        public StarfieldGroup<SoundKeywordMapping> SoundKeywordMappings => _SoundKeywordMappings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISoundKeywordMappingGetter> IStarfieldModGetter.SoundKeywordMappings => _SoundKeywordMappings_Object;
        #endregion
        #region AttractionRules
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AttractionRule> _AttractionRules_Object;
        public StarfieldGroup<AttractionRule> AttractionRules => _AttractionRules_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAttractionRuleGetter> IStarfieldModGetter.AttractionRules => _AttractionRules_Object;
        #endregion
        #region SceneCollections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SceneCollection> _SceneCollections_Object;
        public StarfieldGroup<SceneCollection> SceneCollections => _SceneCollections_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISceneCollectionGetter> IStarfieldModGetter.SceneCollections => _SceneCollections_Object;
        #endregion
        #region AnimationSoundTagSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AnimationSoundTagSet> _AnimationSoundTagSets_Object;
        public StarfieldGroup<AnimationSoundTagSet> AnimationSoundTagSets => _AnimationSoundTagSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAnimationSoundTagSetGetter> IStarfieldModGetter.AnimationSoundTagSets => _AnimationSoundTagSets_Object;
        #endregion
        #region Resources
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Resource> _Resources_Object;
        public StarfieldGroup<Resource> Resources => _Resources_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IResourceGetter> IStarfieldModGetter.Resources => _Resources_Object;
        #endregion
        #region Biomes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Biome> _Biomes_Object;
        public StarfieldGroup<Biome> Biomes => _Biomes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IBiomeGetter> IStarfieldModGetter.Biomes => _Biomes_Object;
        #endregion
        #region NavigationMeshObstacleCoverManagers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<NavigationMeshObstacleCoverManager> _NavigationMeshObstacleCoverManagers_Object;
        public StarfieldGroup<NavigationMeshObstacleCoverManager> NavigationMeshObstacleCoverManagers => _NavigationMeshObstacleCoverManagers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<INavigationMeshObstacleCoverManagerGetter> IStarfieldModGetter.NavigationMeshObstacleCoverManagers => _NavigationMeshObstacleCoverManagers_Object;
        #endregion
        #region LensFlares
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LensFlare> _LensFlares_Object;
        public StarfieldGroup<LensFlare> LensFlares => _LensFlares_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILensFlareGetter> IStarfieldModGetter.LensFlares => _LensFlares_Object;
        #endregion
        #region ObjectVisibilityManagers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ObjectVisibilityManager> _ObjectVisibilityManagers_Object;
        public StarfieldGroup<ObjectVisibilityManager> ObjectVisibilityManagers => _ObjectVisibilityManagers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IObjectVisibilityManagerGetter> IStarfieldModGetter.ObjectVisibilityManagers => _ObjectVisibilityManagers_Object;
        #endregion
        #region SnapTemplateNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SnapTemplateNode> _SnapTemplateNodes_Object;
        public StarfieldGroup<SnapTemplateNode> SnapTemplateNodes => _SnapTemplateNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISnapTemplateNodeGetter> IStarfieldModGetter.SnapTemplateNodes => _SnapTemplateNodes_Object;
        #endregion
        #region SnapTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SnapTemplate> _SnapTemplates_Object;
        public StarfieldGroup<SnapTemplate> SnapTemplates => _SnapTemplates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISnapTemplateGetter> IStarfieldModGetter.SnapTemplates => _SnapTemplates_Object;
        #endregion
        #region GroundCovers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<GroundCover> _GroundCovers_Object;
        public StarfieldGroup<GroundCover> GroundCovers => _GroundCovers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGroundCoverGetter> IStarfieldModGetter.GroundCovers => _GroundCovers_Object;
        #endregion
        #region MorphableObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<MorphableObject> _MorphableObjects_Object;
        public StarfieldGroup<MorphableObject> MorphableObjects => _MorphableObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMorphableObjectGetter> IStarfieldModGetter.MorphableObjects => _MorphableObjects_Object;
        #endregion
        #region Traversals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Traversal> _Traversals_Object;
        public StarfieldGroup<Traversal> Traversals => _Traversals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ITraversalGetter> IStarfieldModGetter.Traversals => _Traversals_Object;
        #endregion
        #region ResourceGenerationData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ResourceGenerationData> _ResourceGenerationData_Object;
        public StarfieldGroup<ResourceGenerationData> ResourceGenerationData => _ResourceGenerationData_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IResourceGenerationDataGetter> IStarfieldModGetter.ResourceGenerationData => _ResourceGenerationData_Object;
        #endregion
        #region BiomeSwaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<BiomeSwap> _BiomeSwaps_Object;
        public StarfieldGroup<BiomeSwap> BiomeSwaps => _BiomeSwaps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IBiomeSwapGetter> IStarfieldModGetter.BiomeSwaps => _BiomeSwaps_Object;
        #endregion
        #region Atmospheres
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Atmosphere> _Atmospheres_Object;
        public StarfieldGroup<Atmosphere> Atmospheres => _Atmospheres_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAtmosphereGetter> IStarfieldModGetter.Atmospheres => _Atmospheres_Object;
        #endregion
        #region LeveledSpaceCells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LeveledSpaceCell> _LeveledSpaceCells_Object;
        public StarfieldGroup<LeveledSpaceCell> LeveledSpaceCells => _LeveledSpaceCells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILeveledSpaceCellGetter> IStarfieldModGetter.LeveledSpaceCells => _LeveledSpaceCells_Object;
        #endregion
        #region SpeechChallenges
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SpeechChallenge> _SpeechChallenges_Object;
        public StarfieldGroup<SpeechChallenge> SpeechChallenges => _SpeechChallenges_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISpeechChallengeGetter> IStarfieldModGetter.SpeechChallenges => _SpeechChallenges_Object;
        #endregion
        #region AimAssistPoses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AimAssistPose> _AimAssistPoses_Object;
        public StarfieldGroup<AimAssistPose> AimAssistPoses => _AimAssistPoses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAimAssistPoseGetter> IStarfieldModGetter.AimAssistPoses => _AimAssistPoses_Object;
        #endregion
        #region VolumetricLightings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<VolumetricLighting> _VolumetricLightings_Object;
        public StarfieldGroup<VolumetricLighting> VolumetricLightings => _VolumetricLightings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IVolumetricLightingGetter> IStarfieldModGetter.VolumetricLightings => _VolumetricLightings_Object;
        #endregion
        #region SurfaceBlocks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SurfaceBlock> _SurfaceBlocks_Object;
        public StarfieldGroup<SurfaceBlock> SurfaceBlocks => _SurfaceBlocks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISurfaceBlockGetter> IStarfieldModGetter.SurfaceBlocks => _SurfaceBlocks_Object;
        #endregion
        #region SurfacePatternConfigs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SurfacePatternConfig> _SurfacePatternConfigs_Object;
        public StarfieldGroup<SurfacePatternConfig> SurfacePatternConfigs => _SurfacePatternConfigs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISurfacePatternConfigGetter> IStarfieldModGetter.SurfacePatternConfigs => _SurfacePatternConfigs_Object;
        #endregion
        #region SurfacePatterns
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SurfacePattern> _SurfacePatterns_Object;
        public StarfieldGroup<SurfacePattern> SurfacePatterns => _SurfacePatterns_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISurfacePatternGetter> IStarfieldModGetter.SurfacePatterns => _SurfacePatterns_Object;
        #endregion
        #region SurfaceTrees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SurfaceTree> _SurfaceTrees_Object;
        public StarfieldGroup<SurfaceTree> SurfaceTrees => _SurfaceTrees_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISurfaceTreeGetter> IStarfieldModGetter.SurfaceTrees => _SurfaceTrees_Object;
        #endregion
        #region PlanetContentManagerTrees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<PlanetContentManagerTree> _PlanetContentManagerTrees_Object;
        public StarfieldGroup<PlanetContentManagerTree> PlanetContentManagerTrees => _PlanetContentManagerTrees_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IPlanetContentManagerTreeGetter> IStarfieldModGetter.PlanetContentManagerTrees => _PlanetContentManagerTrees_Object;
        #endregion
        #region BoneModifiers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<BoneModifier> _BoneModifiers_Object;
        public StarfieldGroup<BoneModifier> BoneModifiers => _BoneModifiers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IBoneModifierGetter> IStarfieldModGetter.BoneModifiers => _BoneModifiers_Object;
        #endregion
        #region SnapTemplateBehaviors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SnapTemplateBehavior> _SnapTemplateBehaviors_Object;
        public StarfieldGroup<SnapTemplateBehavior> SnapTemplateBehaviors => _SnapTemplateBehaviors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISnapTemplateBehaviorGetter> IStarfieldModGetter.SnapTemplateBehaviors => _SnapTemplateBehaviors_Object;
        #endregion
        #region Planets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Planet> _Planets_Object;
        public StarfieldGroup<Planet> Planets => _Planets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IPlanetGetter> IStarfieldModGetter.Planets => _Planets_Object;
        #endregion
        #region ConditionRecords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ConditionRecord> _ConditionRecords_Object;
        public StarfieldGroup<ConditionRecord> ConditionRecords => _ConditionRecords_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IConditionRecordGetter> IStarfieldModGetter.ConditionRecords => _ConditionRecords_Object;
        #endregion
        #region PlanetContentManagerBranchNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<PlanetContentManagerBranchNode> _PlanetContentManagerBranchNodes_Object;
        public StarfieldGroup<PlanetContentManagerBranchNode> PlanetContentManagerBranchNodes => _PlanetContentManagerBranchNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IPlanetContentManagerBranchNodeGetter> IStarfieldModGetter.PlanetContentManagerBranchNodes => _PlanetContentManagerBranchNodes_Object;
        #endregion
        #region PlanetContentManagerContentNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<PlanetContentManagerContentNode> _PlanetContentManagerContentNodes_Object;
        public StarfieldGroup<PlanetContentManagerContentNode> PlanetContentManagerContentNodes => _PlanetContentManagerContentNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IPlanetContentManagerContentNodeGetter> IStarfieldModGetter.PlanetContentManagerContentNodes => _PlanetContentManagerContentNodes_Object;
        #endregion
        #region Stars
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Star> _Stars_Object;
        public StarfieldGroup<Star> Stars => _Stars_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IStarGetter> IStarfieldModGetter.Stars => _Stars_Object;
        #endregion
        #region WWiseEventDatas
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<WWiseEventData> _WWiseEventDatas_Object;
        public StarfieldGroup<WWiseEventData> WWiseEventDatas => _WWiseEventDatas_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IWWiseEventDataGetter> IStarfieldModGetter.WWiseEventDatas => _WWiseEventDatas_Object;
        #endregion
        #region ResearchProjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ResearchProject> _ResearchProjects_Object;
        public StarfieldGroup<ResearchProject> ResearchProjects => _ResearchProjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IResearchProjectGetter> IStarfieldModGetter.ResearchProjects => _ResearchProjects_Object;
        #endregion
        #region AimOpticalSightMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AimOpticalSightMarker> _AimOpticalSightMarkers_Object;
        public StarfieldGroup<AimOpticalSightMarker> AimOpticalSightMarkers => _AimOpticalSightMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAimOpticalSightMarkerGetter> IStarfieldModGetter.AimOpticalSightMarkers => _AimOpticalSightMarkers_Object;
        #endregion
        #region AmbienceSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<AmbienceSet> _AmbienceSets_Object;
        public StarfieldGroup<AmbienceSet> AmbienceSets => _AmbienceSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IAmbienceSetGetter> IStarfieldModGetter.AmbienceSets => _AmbienceSets_Object;
        #endregion
        #region WeaponBarrelModels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<WeaponBarrelModel> _WeaponBarrelModels_Object;
        public StarfieldGroup<WeaponBarrelModel> WeaponBarrelModels => _WeaponBarrelModels_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IWeaponBarrelModelGetter> IStarfieldModGetter.WeaponBarrelModels => _WeaponBarrelModels_Object;
        #endregion
        #region SurfacePatternStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SurfacePatternStyle> _SurfacePatternStyles_Object;
        public StarfieldGroup<SurfacePatternStyle> SurfacePatternStyles => _SurfacePatternStyles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISurfacePatternStyleGetter> IStarfieldModGetter.SurfacePatternStyles => _SurfacePatternStyles_Object;
        #endregion
        #region LayeredMaterialSwaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LayeredMaterialSwap> _LayeredMaterialSwaps_Object;
        public StarfieldGroup<LayeredMaterialSwap> LayeredMaterialSwaps => _LayeredMaterialSwaps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILayeredMaterialSwapGetter> IStarfieldModGetter.LayeredMaterialSwaps => _LayeredMaterialSwaps_Object;
        #endregion
        #region ForceDatas
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ForceData> _ForceDatas_Object;
        public StarfieldGroup<ForceData> ForceDatas => _ForceDatas_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IForceDataGetter> IStarfieldModGetter.ForceDatas => _ForceDatas_Object;
        #endregion
        #region TerminalMenus
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<TerminalMenu> _TerminalMenus_Object;
        public StarfieldGroup<TerminalMenu> TerminalMenus => _TerminalMenus_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ITerminalMenuGetter> IStarfieldModGetter.TerminalMenus => _TerminalMenus_Object;
        #endregion
        #region EffectSequences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<EffectSequence> _EffectSequences_Object;
        public StarfieldGroup<EffectSequence> EffectSequences => _EffectSequences_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IEffectSequenceGetter> IStarfieldModGetter.EffectSequences => _EffectSequences_Object;
        #endregion
        #region SecondaryDamageLists
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SecondaryDamageList> _SecondaryDamageLists_Object;
        public StarfieldGroup<SecondaryDamageList> SecondaryDamageLists => _SecondaryDamageLists_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISecondaryDamageListGetter> IStarfieldModGetter.SecondaryDamageLists => _SecondaryDamageLists_Object;
        #endregion
        #region MaterialPaths
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<MaterialPath> _MaterialPaths_Object;
        public StarfieldGroup<MaterialPath> MaterialPaths => _MaterialPaths_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IMaterialPathGetter> IStarfieldModGetter.MaterialPaths => _MaterialPaths_Object;
        #endregion
        #region Clouds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Clouds> _Clouds_Object;
        public StarfieldGroup<Clouds> Clouds => _Clouds_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ICloudsGetter> IStarfieldModGetter.Clouds => _Clouds_Object;
        #endregion
        #region FogVolumes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<FogVolume> _FogVolumes_Object;
        public StarfieldGroup<FogVolume> FogVolumes => _FogVolumes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFogVolumeGetter> IStarfieldModGetter.FogVolumes => _FogVolumes_Object;
        #endregion
        #region WWiseKeywordMappings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<WWiseKeywordMapping> _WWiseKeywordMappings_Object;
        public StarfieldGroup<WWiseKeywordMapping> WWiseKeywordMappings => _WWiseKeywordMappings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IWWiseKeywordMappingGetter> IStarfieldModGetter.WWiseKeywordMappings => _WWiseKeywordMappings_Object;
        #endregion
        #region LegendaryItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<LegendaryItem> _LegendaryItems_Object;
        public StarfieldGroup<LegendaryItem> LegendaryItems => _LegendaryItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ILegendaryItemGetter> IStarfieldModGetter.LegendaryItems => _LegendaryItems_Object;
        #endregion
        #region ParticleSystemDefineCollisions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ParticleSystemDefineCollision> _ParticleSystemDefineCollisions_Object;
        public StarfieldGroup<ParticleSystemDefineCollision> ParticleSystemDefineCollisions => _ParticleSystemDefineCollisions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IParticleSystemDefineCollisionGetter> IStarfieldModGetter.ParticleSystemDefineCollisions => _ParticleSystemDefineCollisions_Object;
        #endregion
        #region SunPresets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<SunPreset> _SunPresets_Object;
        public StarfieldGroup<SunPreset> SunPresets => _SunPresets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ISunPresetGetter> IStarfieldModGetter.SunPresets => _SunPresets_Object;
        #endregion
        #region PhotoModeFeatures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<PhotoModeFeature> _PhotoModeFeatures_Object;
        public StarfieldGroup<PhotoModeFeature> PhotoModeFeatures => _PhotoModeFeatures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IPhotoModeFeatureGetter> IStarfieldModGetter.PhotoModeFeatures => _PhotoModeFeatures_Object;
        #endregion
        #region GameplayOptions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<GameplayOptions> _GameplayOptions_Object;
        public StarfieldGroup<GameplayOptions> GameplayOptions => _GameplayOptions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGameplayOptionsGetter> IStarfieldModGetter.GameplayOptions => _GameplayOptions_Object;
        #endregion
        #region GameplayOptionsGroups
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<GameplayOptionsGroup> _GameplayOptionsGroups_Object;
        public StarfieldGroup<GameplayOptionsGroup> GameplayOptionsGroups => _GameplayOptionsGroups_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IGameplayOptionsGroupGetter> IStarfieldModGetter.GameplayOptionsGroups => _GameplayOptionsGroups_Object;
        #endregion
        #region TimeOfDays
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<TimeOfDayRecord> _TimeOfDays_Object;
        public StarfieldGroup<TimeOfDayRecord> TimeOfDays => _TimeOfDays_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<ITimeOfDayRecordGetter> IStarfieldModGetter.TimeOfDays => _TimeOfDays_Object;
        #endregion
        #region ActorValueModulations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<ActorValueModulation> _ActorValueModulations_Object;
        public StarfieldGroup<ActorValueModulation> ActorValueModulations => _ActorValueModulations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IActorValueModulationGetter> IStarfieldModGetter.ActorValueModulations => _ActorValueModulations_Object;
        #endregion
        #region Challenges
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<Challenge> _Challenges_Object;
        public StarfieldGroup<Challenge> Challenges => _Challenges_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IChallengeGetter> IStarfieldModGetter.Challenges => _Challenges_Object;
        #endregion
        #region FacialExpressions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<FacialExpression> _FacialExpressions_Object;
        public StarfieldGroup<FacialExpression> FacialExpressions => _FacialExpressions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IFacialExpressionGetter> IStarfieldModGetter.FacialExpressions => _FacialExpressions_Object;
        #endregion
        #region PERS
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private StarfieldGroup<PERS> _PERS_Object;
        public StarfieldGroup<PERS> PERS => _PERS_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IStarfieldGroupGetter<IPERSGetter> IStarfieldModGetter.PERS => _PERS_Object;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarfieldModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStarfieldModGetter rhs) return false;
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarfieldModGetter? obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, StarfieldModHeader.Mask<TItem>?>(initialValue, new StarfieldModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.FFKW = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LocationReferenceTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Actions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Transforms = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.TextureSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Globals = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.DamageTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Classes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AffinityEvents = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.HeadParts = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Races = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SoundMarkers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SoundEchoMarkers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AcousticSpaces = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AudioOcclusionPrimitives = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.MagicEffects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LandscapeTextures = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ProjectedDecals = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ObjectEffects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Spells = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Activators = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.CurveTables = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Curve3Ds = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Armors = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Books = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Containers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Doors = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Lights = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.MiscItems = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Statics = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.StaticCollections = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.PackIns = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.MoveableStatics = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Grasses = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Florae = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Furniture = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Weapons = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Ammunitions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Npcs = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LeveledNpcs = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LeveledPackIns = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Keys = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Ingestibles = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.IdleMarkers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.BiomeMarkers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Notes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Projectiles = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Hazards = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.BendableSplines = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Terminals = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LeveledItems = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.GenericBaseFormTemplates = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.GenericBaseForms = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LeveledBaseForms = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Weathers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.WeatherSettings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Climates = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ShaderParticleGeometries = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Regions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.NavigationMeshInfoMaps = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Cells = new MaskItem<TItem, StarfieldListGroup.Mask<TItem>?>(initialValue, new StarfieldListGroup.Mask<TItem>(initialValue));
                this.Worldspaces = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Quests = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.IdleAnimations = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Packages = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.CombatStyles = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LoadScreens = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AnimatedObjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Waters = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.EffectShaders = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Explosions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Debris = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ImageSpaces = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ImageSpaceAdapters = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.FormLists = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Perks = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.BodyParts = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AddonNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ActorValueInformation = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.CameraShots = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.CameraPaths = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.VoiceTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.MaterialTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Impacts = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ImpactDataSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ArmorAddons = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Locations = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Messages = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.DefaultObjectManagers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.DefaultObjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LightingTemplates = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.MusicTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Footsteps = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.FootstepSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.StoryManagerBranchNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.StoryManagerQuestNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.StoryManagerEventNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.MusicTracks = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.EquipTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Outfits = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ArtObjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.MovementTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.CollisionLayers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Colors = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ReverbParameters = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ReferenceGroups = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AimModels = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AimAssistModels = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.MeleeAimAssistModels = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Layers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ConstructibleObjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ObjectModifications = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Zooms = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.InstanceNamingRules = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SoundKeywordMappings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AttractionRules = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SceneCollections = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AnimationSoundTagSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Resources = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Biomes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.NavigationMeshObstacleCoverManagers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LensFlares = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ObjectVisibilityManagers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SnapTemplateNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SnapTemplates = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.GroundCovers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.MorphableObjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Traversals = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ResourceGenerationData = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.BiomeSwaps = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Atmospheres = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LeveledSpaceCells = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SpeechChallenges = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AimAssistPoses = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.VolumetricLightings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SurfaceBlocks = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SurfacePatternConfigs = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SurfacePatterns = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SurfaceTrees = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.PlanetContentManagerTrees = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.BoneModifiers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SnapTemplateBehaviors = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Planets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ConditionRecords = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.PlanetContentManagerBranchNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.PlanetContentManagerContentNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Stars = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.WWiseEventDatas = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ResearchProjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AimOpticalSightMarkers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.AmbienceSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.WeaponBarrelModels = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SurfacePatternStyles = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LayeredMaterialSwaps = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ForceDatas = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.TerminalMenus = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.EffectSequences = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SecondaryDamageLists = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.MaterialPaths = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Clouds = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.FogVolumes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.WWiseKeywordMappings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.LegendaryItems = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ParticleSystemDefineCollisions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.SunPresets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.PhotoModeFeatures = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.GameplayOptions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.GameplayOptionsGroups = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.TimeOfDays = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.ActorValueModulations = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.Challenges = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.FacialExpressions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
                this.PERS = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(initialValue, new StarfieldGroup.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem Keywords,
                TItem FFKW,
                TItem LocationReferenceTypes,
                TItem Actions,
                TItem Transforms,
                TItem TextureSets,
                TItem Globals,
                TItem DamageTypes,
                TItem Classes,
                TItem Factions,
                TItem AffinityEvents,
                TItem HeadParts,
                TItem Races,
                TItem SoundMarkers,
                TItem SoundEchoMarkers,
                TItem AcousticSpaces,
                TItem AudioOcclusionPrimitives,
                TItem MagicEffects,
                TItem LandscapeTextures,
                TItem ProjectedDecals,
                TItem ObjectEffects,
                TItem Spells,
                TItem Activators,
                TItem CurveTables,
                TItem Curve3Ds,
                TItem Armors,
                TItem Books,
                TItem Containers,
                TItem Doors,
                TItem Lights,
                TItem MiscItems,
                TItem Statics,
                TItem StaticCollections,
                TItem PackIns,
                TItem MoveableStatics,
                TItem Grasses,
                TItem Florae,
                TItem Furniture,
                TItem Weapons,
                TItem Ammunitions,
                TItem Npcs,
                TItem LeveledNpcs,
                TItem LeveledPackIns,
                TItem Keys,
                TItem Ingestibles,
                TItem IdleMarkers,
                TItem BiomeMarkers,
                TItem Notes,
                TItem Projectiles,
                TItem Hazards,
                TItem BendableSplines,
                TItem Terminals,
                TItem LeveledItems,
                TItem GenericBaseFormTemplates,
                TItem GenericBaseForms,
                TItem LeveledBaseForms,
                TItem Weathers,
                TItem WeatherSettings,
                TItem Climates,
                TItem ShaderParticleGeometries,
                TItem Regions,
                TItem NavigationMeshInfoMaps,
                TItem Cells,
                TItem Worldspaces,
                TItem Quests,
                TItem IdleAnimations,
                TItem Packages,
                TItem CombatStyles,
                TItem LoadScreens,
                TItem AnimatedObjects,
                TItem Waters,
                TItem EffectShaders,
                TItem Explosions,
                TItem Debris,
                TItem ImageSpaces,
                TItem ImageSpaceAdapters,
                TItem FormLists,
                TItem Perks,
                TItem BodyParts,
                TItem AddonNodes,
                TItem ActorValueInformation,
                TItem CameraShots,
                TItem CameraPaths,
                TItem VoiceTypes,
                TItem MaterialTypes,
                TItem Impacts,
                TItem ImpactDataSets,
                TItem ArmorAddons,
                TItem Locations,
                TItem Messages,
                TItem DefaultObjectManagers,
                TItem DefaultObjects,
                TItem LightingTemplates,
                TItem MusicTypes,
                TItem Footsteps,
                TItem FootstepSets,
                TItem StoryManagerBranchNodes,
                TItem StoryManagerQuestNodes,
                TItem StoryManagerEventNodes,
                TItem MusicTracks,
                TItem EquipTypes,
                TItem Outfits,
                TItem ArtObjects,
                TItem MovementTypes,
                TItem CollisionLayers,
                TItem Colors,
                TItem ReverbParameters,
                TItem ReferenceGroups,
                TItem AimModels,
                TItem AimAssistModels,
                TItem MeleeAimAssistModels,
                TItem Layers,
                TItem ConstructibleObjects,
                TItem ObjectModifications,
                TItem Zooms,
                TItem InstanceNamingRules,
                TItem SoundKeywordMappings,
                TItem AttractionRules,
                TItem SceneCollections,
                TItem AnimationSoundTagSets,
                TItem Resources,
                TItem Biomes,
                TItem NavigationMeshObstacleCoverManagers,
                TItem LensFlares,
                TItem ObjectVisibilityManagers,
                TItem SnapTemplateNodes,
                TItem SnapTemplates,
                TItem GroundCovers,
                TItem MorphableObjects,
                TItem Traversals,
                TItem ResourceGenerationData,
                TItem BiomeSwaps,
                TItem Atmospheres,
                TItem LeveledSpaceCells,
                TItem SpeechChallenges,
                TItem AimAssistPoses,
                TItem VolumetricLightings,
                TItem SurfaceBlocks,
                TItem SurfacePatternConfigs,
                TItem SurfacePatterns,
                TItem SurfaceTrees,
                TItem PlanetContentManagerTrees,
                TItem BoneModifiers,
                TItem SnapTemplateBehaviors,
                TItem Planets,
                TItem ConditionRecords,
                TItem PlanetContentManagerBranchNodes,
                TItem PlanetContentManagerContentNodes,
                TItem Stars,
                TItem WWiseEventDatas,
                TItem ResearchProjects,
                TItem AimOpticalSightMarkers,
                TItem AmbienceSets,
                TItem WeaponBarrelModels,
                TItem SurfacePatternStyles,
                TItem LayeredMaterialSwaps,
                TItem ForceDatas,
                TItem TerminalMenus,
                TItem EffectSequences,
                TItem SecondaryDamageLists,
                TItem MaterialPaths,
                TItem Clouds,
                TItem FogVolumes,
                TItem WWiseKeywordMappings,
                TItem LegendaryItems,
                TItem ParticleSystemDefineCollisions,
                TItem SunPresets,
                TItem PhotoModeFeatures,
                TItem GameplayOptions,
                TItem GameplayOptionsGroups,
                TItem TimeOfDays,
                TItem ActorValueModulations,
                TItem Challenges,
                TItem FacialExpressions,
                TItem PERS)
            {
                this.ModHeader = new MaskItem<TItem, StarfieldModHeader.Mask<TItem>?>(ModHeader, new StarfieldModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(GameSettings, new StarfieldGroup.Mask<TItem>(GameSettings));
                this.Keywords = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Keywords, new StarfieldGroup.Mask<TItem>(Keywords));
                this.FFKW = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(FFKW, new StarfieldGroup.Mask<TItem>(FFKW));
                this.LocationReferenceTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LocationReferenceTypes, new StarfieldGroup.Mask<TItem>(LocationReferenceTypes));
                this.Actions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Actions, new StarfieldGroup.Mask<TItem>(Actions));
                this.Transforms = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Transforms, new StarfieldGroup.Mask<TItem>(Transforms));
                this.TextureSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(TextureSets, new StarfieldGroup.Mask<TItem>(TextureSets));
                this.Globals = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Globals, new StarfieldGroup.Mask<TItem>(Globals));
                this.DamageTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(DamageTypes, new StarfieldGroup.Mask<TItem>(DamageTypes));
                this.Classes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Classes, new StarfieldGroup.Mask<TItem>(Classes));
                this.Factions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Factions, new StarfieldGroup.Mask<TItem>(Factions));
                this.AffinityEvents = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AffinityEvents, new StarfieldGroup.Mask<TItem>(AffinityEvents));
                this.HeadParts = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(HeadParts, new StarfieldGroup.Mask<TItem>(HeadParts));
                this.Races = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Races, new StarfieldGroup.Mask<TItem>(Races));
                this.SoundMarkers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SoundMarkers, new StarfieldGroup.Mask<TItem>(SoundMarkers));
                this.SoundEchoMarkers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SoundEchoMarkers, new StarfieldGroup.Mask<TItem>(SoundEchoMarkers));
                this.AcousticSpaces = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AcousticSpaces, new StarfieldGroup.Mask<TItem>(AcousticSpaces));
                this.AudioOcclusionPrimitives = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AudioOcclusionPrimitives, new StarfieldGroup.Mask<TItem>(AudioOcclusionPrimitives));
                this.MagicEffects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(MagicEffects, new StarfieldGroup.Mask<TItem>(MagicEffects));
                this.LandscapeTextures = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LandscapeTextures, new StarfieldGroup.Mask<TItem>(LandscapeTextures));
                this.ProjectedDecals = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ProjectedDecals, new StarfieldGroup.Mask<TItem>(ProjectedDecals));
                this.ObjectEffects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ObjectEffects, new StarfieldGroup.Mask<TItem>(ObjectEffects));
                this.Spells = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Spells, new StarfieldGroup.Mask<TItem>(Spells));
                this.Activators = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Activators, new StarfieldGroup.Mask<TItem>(Activators));
                this.CurveTables = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(CurveTables, new StarfieldGroup.Mask<TItem>(CurveTables));
                this.Curve3Ds = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Curve3Ds, new StarfieldGroup.Mask<TItem>(Curve3Ds));
                this.Armors = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Armors, new StarfieldGroup.Mask<TItem>(Armors));
                this.Books = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Books, new StarfieldGroup.Mask<TItem>(Books));
                this.Containers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Containers, new StarfieldGroup.Mask<TItem>(Containers));
                this.Doors = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Doors, new StarfieldGroup.Mask<TItem>(Doors));
                this.Lights = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Lights, new StarfieldGroup.Mask<TItem>(Lights));
                this.MiscItems = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(MiscItems, new StarfieldGroup.Mask<TItem>(MiscItems));
                this.Statics = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Statics, new StarfieldGroup.Mask<TItem>(Statics));
                this.StaticCollections = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(StaticCollections, new StarfieldGroup.Mask<TItem>(StaticCollections));
                this.PackIns = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(PackIns, new StarfieldGroup.Mask<TItem>(PackIns));
                this.MoveableStatics = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(MoveableStatics, new StarfieldGroup.Mask<TItem>(MoveableStatics));
                this.Grasses = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Grasses, new StarfieldGroup.Mask<TItem>(Grasses));
                this.Florae = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Florae, new StarfieldGroup.Mask<TItem>(Florae));
                this.Furniture = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Furniture, new StarfieldGroup.Mask<TItem>(Furniture));
                this.Weapons = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Weapons, new StarfieldGroup.Mask<TItem>(Weapons));
                this.Ammunitions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Ammunitions, new StarfieldGroup.Mask<TItem>(Ammunitions));
                this.Npcs = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Npcs, new StarfieldGroup.Mask<TItem>(Npcs));
                this.LeveledNpcs = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LeveledNpcs, new StarfieldGroup.Mask<TItem>(LeveledNpcs));
                this.LeveledPackIns = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LeveledPackIns, new StarfieldGroup.Mask<TItem>(LeveledPackIns));
                this.Keys = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Keys, new StarfieldGroup.Mask<TItem>(Keys));
                this.Ingestibles = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Ingestibles, new StarfieldGroup.Mask<TItem>(Ingestibles));
                this.IdleMarkers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(IdleMarkers, new StarfieldGroup.Mask<TItem>(IdleMarkers));
                this.BiomeMarkers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(BiomeMarkers, new StarfieldGroup.Mask<TItem>(BiomeMarkers));
                this.Notes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Notes, new StarfieldGroup.Mask<TItem>(Notes));
                this.Projectiles = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Projectiles, new StarfieldGroup.Mask<TItem>(Projectiles));
                this.Hazards = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Hazards, new StarfieldGroup.Mask<TItem>(Hazards));
                this.BendableSplines = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(BendableSplines, new StarfieldGroup.Mask<TItem>(BendableSplines));
                this.Terminals = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Terminals, new StarfieldGroup.Mask<TItem>(Terminals));
                this.LeveledItems = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LeveledItems, new StarfieldGroup.Mask<TItem>(LeveledItems));
                this.GenericBaseFormTemplates = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(GenericBaseFormTemplates, new StarfieldGroup.Mask<TItem>(GenericBaseFormTemplates));
                this.GenericBaseForms = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(GenericBaseForms, new StarfieldGroup.Mask<TItem>(GenericBaseForms));
                this.LeveledBaseForms = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LeveledBaseForms, new StarfieldGroup.Mask<TItem>(LeveledBaseForms));
                this.Weathers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Weathers, new StarfieldGroup.Mask<TItem>(Weathers));
                this.WeatherSettings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(WeatherSettings, new StarfieldGroup.Mask<TItem>(WeatherSettings));
                this.Climates = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Climates, new StarfieldGroup.Mask<TItem>(Climates));
                this.ShaderParticleGeometries = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ShaderParticleGeometries, new StarfieldGroup.Mask<TItem>(ShaderParticleGeometries));
                this.Regions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Regions, new StarfieldGroup.Mask<TItem>(Regions));
                this.NavigationMeshInfoMaps = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(NavigationMeshInfoMaps, new StarfieldGroup.Mask<TItem>(NavigationMeshInfoMaps));
                this.Cells = new MaskItem<TItem, StarfieldListGroup.Mask<TItem>?>(Cells, new StarfieldListGroup.Mask<TItem>(Cells));
                this.Worldspaces = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Worldspaces, new StarfieldGroup.Mask<TItem>(Worldspaces));
                this.Quests = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Quests, new StarfieldGroup.Mask<TItem>(Quests));
                this.IdleAnimations = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(IdleAnimations, new StarfieldGroup.Mask<TItem>(IdleAnimations));
                this.Packages = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Packages, new StarfieldGroup.Mask<TItem>(Packages));
                this.CombatStyles = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(CombatStyles, new StarfieldGroup.Mask<TItem>(CombatStyles));
                this.LoadScreens = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LoadScreens, new StarfieldGroup.Mask<TItem>(LoadScreens));
                this.AnimatedObjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AnimatedObjects, new StarfieldGroup.Mask<TItem>(AnimatedObjects));
                this.Waters = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Waters, new StarfieldGroup.Mask<TItem>(Waters));
                this.EffectShaders = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(EffectShaders, new StarfieldGroup.Mask<TItem>(EffectShaders));
                this.Explosions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Explosions, new StarfieldGroup.Mask<TItem>(Explosions));
                this.Debris = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Debris, new StarfieldGroup.Mask<TItem>(Debris));
                this.ImageSpaces = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ImageSpaces, new StarfieldGroup.Mask<TItem>(ImageSpaces));
                this.ImageSpaceAdapters = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ImageSpaceAdapters, new StarfieldGroup.Mask<TItem>(ImageSpaceAdapters));
                this.FormLists = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(FormLists, new StarfieldGroup.Mask<TItem>(FormLists));
                this.Perks = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Perks, new StarfieldGroup.Mask<TItem>(Perks));
                this.BodyParts = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(BodyParts, new StarfieldGroup.Mask<TItem>(BodyParts));
                this.AddonNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AddonNodes, new StarfieldGroup.Mask<TItem>(AddonNodes));
                this.ActorValueInformation = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ActorValueInformation, new StarfieldGroup.Mask<TItem>(ActorValueInformation));
                this.CameraShots = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(CameraShots, new StarfieldGroup.Mask<TItem>(CameraShots));
                this.CameraPaths = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(CameraPaths, new StarfieldGroup.Mask<TItem>(CameraPaths));
                this.VoiceTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(VoiceTypes, new StarfieldGroup.Mask<TItem>(VoiceTypes));
                this.MaterialTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(MaterialTypes, new StarfieldGroup.Mask<TItem>(MaterialTypes));
                this.Impacts = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Impacts, new StarfieldGroup.Mask<TItem>(Impacts));
                this.ImpactDataSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ImpactDataSets, new StarfieldGroup.Mask<TItem>(ImpactDataSets));
                this.ArmorAddons = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ArmorAddons, new StarfieldGroup.Mask<TItem>(ArmorAddons));
                this.Locations = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Locations, new StarfieldGroup.Mask<TItem>(Locations));
                this.Messages = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Messages, new StarfieldGroup.Mask<TItem>(Messages));
                this.DefaultObjectManagers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(DefaultObjectManagers, new StarfieldGroup.Mask<TItem>(DefaultObjectManagers));
                this.DefaultObjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(DefaultObjects, new StarfieldGroup.Mask<TItem>(DefaultObjects));
                this.LightingTemplates = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LightingTemplates, new StarfieldGroup.Mask<TItem>(LightingTemplates));
                this.MusicTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(MusicTypes, new StarfieldGroup.Mask<TItem>(MusicTypes));
                this.Footsteps = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Footsteps, new StarfieldGroup.Mask<TItem>(Footsteps));
                this.FootstepSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(FootstepSets, new StarfieldGroup.Mask<TItem>(FootstepSets));
                this.StoryManagerBranchNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(StoryManagerBranchNodes, new StarfieldGroup.Mask<TItem>(StoryManagerBranchNodes));
                this.StoryManagerQuestNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(StoryManagerQuestNodes, new StarfieldGroup.Mask<TItem>(StoryManagerQuestNodes));
                this.StoryManagerEventNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(StoryManagerEventNodes, new StarfieldGroup.Mask<TItem>(StoryManagerEventNodes));
                this.MusicTracks = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(MusicTracks, new StarfieldGroup.Mask<TItem>(MusicTracks));
                this.EquipTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(EquipTypes, new StarfieldGroup.Mask<TItem>(EquipTypes));
                this.Outfits = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Outfits, new StarfieldGroup.Mask<TItem>(Outfits));
                this.ArtObjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ArtObjects, new StarfieldGroup.Mask<TItem>(ArtObjects));
                this.MovementTypes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(MovementTypes, new StarfieldGroup.Mask<TItem>(MovementTypes));
                this.CollisionLayers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(CollisionLayers, new StarfieldGroup.Mask<TItem>(CollisionLayers));
                this.Colors = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Colors, new StarfieldGroup.Mask<TItem>(Colors));
                this.ReverbParameters = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ReverbParameters, new StarfieldGroup.Mask<TItem>(ReverbParameters));
                this.ReferenceGroups = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ReferenceGroups, new StarfieldGroup.Mask<TItem>(ReferenceGroups));
                this.AimModels = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AimModels, new StarfieldGroup.Mask<TItem>(AimModels));
                this.AimAssistModels = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AimAssistModels, new StarfieldGroup.Mask<TItem>(AimAssistModels));
                this.MeleeAimAssistModels = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(MeleeAimAssistModels, new StarfieldGroup.Mask<TItem>(MeleeAimAssistModels));
                this.Layers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Layers, new StarfieldGroup.Mask<TItem>(Layers));
                this.ConstructibleObjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ConstructibleObjects, new StarfieldGroup.Mask<TItem>(ConstructibleObjects));
                this.ObjectModifications = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ObjectModifications, new StarfieldGroup.Mask<TItem>(ObjectModifications));
                this.Zooms = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Zooms, new StarfieldGroup.Mask<TItem>(Zooms));
                this.InstanceNamingRules = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(InstanceNamingRules, new StarfieldGroup.Mask<TItem>(InstanceNamingRules));
                this.SoundKeywordMappings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SoundKeywordMappings, new StarfieldGroup.Mask<TItem>(SoundKeywordMappings));
                this.AttractionRules = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AttractionRules, new StarfieldGroup.Mask<TItem>(AttractionRules));
                this.SceneCollections = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SceneCollections, new StarfieldGroup.Mask<TItem>(SceneCollections));
                this.AnimationSoundTagSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AnimationSoundTagSets, new StarfieldGroup.Mask<TItem>(AnimationSoundTagSets));
                this.Resources = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Resources, new StarfieldGroup.Mask<TItem>(Resources));
                this.Biomes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Biomes, new StarfieldGroup.Mask<TItem>(Biomes));
                this.NavigationMeshObstacleCoverManagers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(NavigationMeshObstacleCoverManagers, new StarfieldGroup.Mask<TItem>(NavigationMeshObstacleCoverManagers));
                this.LensFlares = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LensFlares, new StarfieldGroup.Mask<TItem>(LensFlares));
                this.ObjectVisibilityManagers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ObjectVisibilityManagers, new StarfieldGroup.Mask<TItem>(ObjectVisibilityManagers));
                this.SnapTemplateNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SnapTemplateNodes, new StarfieldGroup.Mask<TItem>(SnapTemplateNodes));
                this.SnapTemplates = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SnapTemplates, new StarfieldGroup.Mask<TItem>(SnapTemplates));
                this.GroundCovers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(GroundCovers, new StarfieldGroup.Mask<TItem>(GroundCovers));
                this.MorphableObjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(MorphableObjects, new StarfieldGroup.Mask<TItem>(MorphableObjects));
                this.Traversals = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Traversals, new StarfieldGroup.Mask<TItem>(Traversals));
                this.ResourceGenerationData = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ResourceGenerationData, new StarfieldGroup.Mask<TItem>(ResourceGenerationData));
                this.BiomeSwaps = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(BiomeSwaps, new StarfieldGroup.Mask<TItem>(BiomeSwaps));
                this.Atmospheres = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Atmospheres, new StarfieldGroup.Mask<TItem>(Atmospheres));
                this.LeveledSpaceCells = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LeveledSpaceCells, new StarfieldGroup.Mask<TItem>(LeveledSpaceCells));
                this.SpeechChallenges = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SpeechChallenges, new StarfieldGroup.Mask<TItem>(SpeechChallenges));
                this.AimAssistPoses = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AimAssistPoses, new StarfieldGroup.Mask<TItem>(AimAssistPoses));
                this.VolumetricLightings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(VolumetricLightings, new StarfieldGroup.Mask<TItem>(VolumetricLightings));
                this.SurfaceBlocks = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SurfaceBlocks, new StarfieldGroup.Mask<TItem>(SurfaceBlocks));
                this.SurfacePatternConfigs = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SurfacePatternConfigs, new StarfieldGroup.Mask<TItem>(SurfacePatternConfigs));
                this.SurfacePatterns = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SurfacePatterns, new StarfieldGroup.Mask<TItem>(SurfacePatterns));
                this.SurfaceTrees = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SurfaceTrees, new StarfieldGroup.Mask<TItem>(SurfaceTrees));
                this.PlanetContentManagerTrees = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(PlanetContentManagerTrees, new StarfieldGroup.Mask<TItem>(PlanetContentManagerTrees));
                this.BoneModifiers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(BoneModifiers, new StarfieldGroup.Mask<TItem>(BoneModifiers));
                this.SnapTemplateBehaviors = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SnapTemplateBehaviors, new StarfieldGroup.Mask<TItem>(SnapTemplateBehaviors));
                this.Planets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Planets, new StarfieldGroup.Mask<TItem>(Planets));
                this.ConditionRecords = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ConditionRecords, new StarfieldGroup.Mask<TItem>(ConditionRecords));
                this.PlanetContentManagerBranchNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(PlanetContentManagerBranchNodes, new StarfieldGroup.Mask<TItem>(PlanetContentManagerBranchNodes));
                this.PlanetContentManagerContentNodes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(PlanetContentManagerContentNodes, new StarfieldGroup.Mask<TItem>(PlanetContentManagerContentNodes));
                this.Stars = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Stars, new StarfieldGroup.Mask<TItem>(Stars));
                this.WWiseEventDatas = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(WWiseEventDatas, new StarfieldGroup.Mask<TItem>(WWiseEventDatas));
                this.ResearchProjects = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ResearchProjects, new StarfieldGroup.Mask<TItem>(ResearchProjects));
                this.AimOpticalSightMarkers = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AimOpticalSightMarkers, new StarfieldGroup.Mask<TItem>(AimOpticalSightMarkers));
                this.AmbienceSets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(AmbienceSets, new StarfieldGroup.Mask<TItem>(AmbienceSets));
                this.WeaponBarrelModels = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(WeaponBarrelModels, new StarfieldGroup.Mask<TItem>(WeaponBarrelModels));
                this.SurfacePatternStyles = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SurfacePatternStyles, new StarfieldGroup.Mask<TItem>(SurfacePatternStyles));
                this.LayeredMaterialSwaps = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LayeredMaterialSwaps, new StarfieldGroup.Mask<TItem>(LayeredMaterialSwaps));
                this.ForceDatas = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ForceDatas, new StarfieldGroup.Mask<TItem>(ForceDatas));
                this.TerminalMenus = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(TerminalMenus, new StarfieldGroup.Mask<TItem>(TerminalMenus));
                this.EffectSequences = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(EffectSequences, new StarfieldGroup.Mask<TItem>(EffectSequences));
                this.SecondaryDamageLists = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SecondaryDamageLists, new StarfieldGroup.Mask<TItem>(SecondaryDamageLists));
                this.MaterialPaths = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(MaterialPaths, new StarfieldGroup.Mask<TItem>(MaterialPaths));
                this.Clouds = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Clouds, new StarfieldGroup.Mask<TItem>(Clouds));
                this.FogVolumes = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(FogVolumes, new StarfieldGroup.Mask<TItem>(FogVolumes));
                this.WWiseKeywordMappings = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(WWiseKeywordMappings, new StarfieldGroup.Mask<TItem>(WWiseKeywordMappings));
                this.LegendaryItems = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(LegendaryItems, new StarfieldGroup.Mask<TItem>(LegendaryItems));
                this.ParticleSystemDefineCollisions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ParticleSystemDefineCollisions, new StarfieldGroup.Mask<TItem>(ParticleSystemDefineCollisions));
                this.SunPresets = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(SunPresets, new StarfieldGroup.Mask<TItem>(SunPresets));
                this.PhotoModeFeatures = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(PhotoModeFeatures, new StarfieldGroup.Mask<TItem>(PhotoModeFeatures));
                this.GameplayOptions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(GameplayOptions, new StarfieldGroup.Mask<TItem>(GameplayOptions));
                this.GameplayOptionsGroups = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(GameplayOptionsGroups, new StarfieldGroup.Mask<TItem>(GameplayOptionsGroups));
                this.TimeOfDays = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(TimeOfDays, new StarfieldGroup.Mask<TItem>(TimeOfDays));
                this.ActorValueModulations = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(ActorValueModulations, new StarfieldGroup.Mask<TItem>(ActorValueModulations));
                this.Challenges = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(Challenges, new StarfieldGroup.Mask<TItem>(Challenges));
                this.FacialExpressions = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(FacialExpressions, new StarfieldGroup.Mask<TItem>(FacialExpressions));
                this.PERS = new MaskItem<TItem, StarfieldGroup.Mask<TItem>?>(PERS, new StarfieldGroup.Mask<TItem>(PERS));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, StarfieldModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Keywords { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? FFKW { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LocationReferenceTypes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Actions { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Transforms { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? TextureSets { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Globals { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? DamageTypes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Classes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Factions { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AffinityEvents { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? HeadParts { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Races { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SoundMarkers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SoundEchoMarkers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AcousticSpaces { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AudioOcclusionPrimitives { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? MagicEffects { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LandscapeTextures { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ProjectedDecals { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ObjectEffects { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Spells { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Activators { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? CurveTables { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Curve3Ds { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Armors { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Books { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Containers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Doors { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Lights { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? MiscItems { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Statics { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? StaticCollections { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? PackIns { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? MoveableStatics { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Grasses { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Florae { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Furniture { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Weapons { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Ammunitions { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Npcs { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LeveledNpcs { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LeveledPackIns { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Keys { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Ingestibles { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? IdleMarkers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? BiomeMarkers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Notes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Projectiles { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Hazards { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? BendableSplines { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Terminals { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LeveledItems { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? GenericBaseFormTemplates { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? GenericBaseForms { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LeveledBaseForms { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Weathers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? WeatherSettings { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Climates { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ShaderParticleGeometries { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Regions { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? NavigationMeshInfoMaps { get; set; }
            public MaskItem<TItem, StarfieldListGroup.Mask<TItem>?>? Cells { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Worldspaces { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Quests { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? IdleAnimations { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Packages { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? CombatStyles { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LoadScreens { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AnimatedObjects { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Waters { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? EffectShaders { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Explosions { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Debris { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ImageSpaces { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ImageSpaceAdapters { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? FormLists { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Perks { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? BodyParts { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AddonNodes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ActorValueInformation { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? CameraShots { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? CameraPaths { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? VoiceTypes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? MaterialTypes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Impacts { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ImpactDataSets { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ArmorAddons { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Locations { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Messages { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? DefaultObjectManagers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? DefaultObjects { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LightingTemplates { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? MusicTypes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Footsteps { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? FootstepSets { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? StoryManagerBranchNodes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? StoryManagerQuestNodes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? StoryManagerEventNodes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? MusicTracks { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? EquipTypes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Outfits { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ArtObjects { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? MovementTypes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? CollisionLayers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Colors { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ReverbParameters { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ReferenceGroups { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AimModels { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AimAssistModels { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? MeleeAimAssistModels { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Layers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ConstructibleObjects { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ObjectModifications { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Zooms { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? InstanceNamingRules { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SoundKeywordMappings { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AttractionRules { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SceneCollections { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AnimationSoundTagSets { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Resources { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Biomes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? NavigationMeshObstacleCoverManagers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LensFlares { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ObjectVisibilityManagers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SnapTemplateNodes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SnapTemplates { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? GroundCovers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? MorphableObjects { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Traversals { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ResourceGenerationData { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? BiomeSwaps { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Atmospheres { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LeveledSpaceCells { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SpeechChallenges { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AimAssistPoses { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? VolumetricLightings { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SurfaceBlocks { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SurfacePatternConfigs { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SurfacePatterns { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SurfaceTrees { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? PlanetContentManagerTrees { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? BoneModifiers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SnapTemplateBehaviors { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Planets { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ConditionRecords { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? PlanetContentManagerBranchNodes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? PlanetContentManagerContentNodes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Stars { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? WWiseEventDatas { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ResearchProjects { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AimOpticalSightMarkers { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? AmbienceSets { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? WeaponBarrelModels { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SurfacePatternStyles { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LayeredMaterialSwaps { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ForceDatas { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? TerminalMenus { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? EffectSequences { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SecondaryDamageLists { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? MaterialPaths { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Clouds { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? FogVolumes { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? WWiseKeywordMappings { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? LegendaryItems { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ParticleSystemDefineCollisions { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? SunPresets { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? PhotoModeFeatures { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? GameplayOptions { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? GameplayOptionsGroups { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? TimeOfDays { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? ActorValueModulations { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? Challenges { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? FacialExpressions { get; set; }
            public MaskItem<TItem, StarfieldGroup.Mask<TItem>?>? PERS { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.FFKW, rhs.FFKW)) return false;
                if (!object.Equals(this.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
                if (!object.Equals(this.Actions, rhs.Actions)) return false;
                if (!object.Equals(this.Transforms, rhs.Transforms)) return false;
                if (!object.Equals(this.TextureSets, rhs.TextureSets)) return false;
                if (!object.Equals(this.Globals, rhs.Globals)) return false;
                if (!object.Equals(this.DamageTypes, rhs.DamageTypes)) return false;
                if (!object.Equals(this.Classes, rhs.Classes)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.AffinityEvents, rhs.AffinityEvents)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.Races, rhs.Races)) return false;
                if (!object.Equals(this.SoundMarkers, rhs.SoundMarkers)) return false;
                if (!object.Equals(this.SoundEchoMarkers, rhs.SoundEchoMarkers)) return false;
                if (!object.Equals(this.AcousticSpaces, rhs.AcousticSpaces)) return false;
                if (!object.Equals(this.AudioOcclusionPrimitives, rhs.AudioOcclusionPrimitives)) return false;
                if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
                if (!object.Equals(this.LandscapeTextures, rhs.LandscapeTextures)) return false;
                if (!object.Equals(this.ProjectedDecals, rhs.ProjectedDecals)) return false;
                if (!object.Equals(this.ObjectEffects, rhs.ObjectEffects)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Activators, rhs.Activators)) return false;
                if (!object.Equals(this.CurveTables, rhs.CurveTables)) return false;
                if (!object.Equals(this.Curve3Ds, rhs.Curve3Ds)) return false;
                if (!object.Equals(this.Armors, rhs.Armors)) return false;
                if (!object.Equals(this.Books, rhs.Books)) return false;
                if (!object.Equals(this.Containers, rhs.Containers)) return false;
                if (!object.Equals(this.Doors, rhs.Doors)) return false;
                if (!object.Equals(this.Lights, rhs.Lights)) return false;
                if (!object.Equals(this.MiscItems, rhs.MiscItems)) return false;
                if (!object.Equals(this.Statics, rhs.Statics)) return false;
                if (!object.Equals(this.StaticCollections, rhs.StaticCollections)) return false;
                if (!object.Equals(this.PackIns, rhs.PackIns)) return false;
                if (!object.Equals(this.MoveableStatics, rhs.MoveableStatics)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Florae, rhs.Florae)) return false;
                if (!object.Equals(this.Furniture, rhs.Furniture)) return false;
                if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
                if (!object.Equals(this.Ammunitions, rhs.Ammunitions)) return false;
                if (!object.Equals(this.Npcs, rhs.Npcs)) return false;
                if (!object.Equals(this.LeveledNpcs, rhs.LeveledNpcs)) return false;
                if (!object.Equals(this.LeveledPackIns, rhs.LeveledPackIns)) return false;
                if (!object.Equals(this.Keys, rhs.Keys)) return false;
                if (!object.Equals(this.Ingestibles, rhs.Ingestibles)) return false;
                if (!object.Equals(this.IdleMarkers, rhs.IdleMarkers)) return false;
                if (!object.Equals(this.BiomeMarkers, rhs.BiomeMarkers)) return false;
                if (!object.Equals(this.Notes, rhs.Notes)) return false;
                if (!object.Equals(this.Projectiles, rhs.Projectiles)) return false;
                if (!object.Equals(this.Hazards, rhs.Hazards)) return false;
                if (!object.Equals(this.BendableSplines, rhs.BendableSplines)) return false;
                if (!object.Equals(this.Terminals, rhs.Terminals)) return false;
                if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
                if (!object.Equals(this.GenericBaseFormTemplates, rhs.GenericBaseFormTemplates)) return false;
                if (!object.Equals(this.GenericBaseForms, rhs.GenericBaseForms)) return false;
                if (!object.Equals(this.LeveledBaseForms, rhs.LeveledBaseForms)) return false;
                if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
                if (!object.Equals(this.WeatherSettings, rhs.WeatherSettings)) return false;
                if (!object.Equals(this.Climates, rhs.Climates)) return false;
                if (!object.Equals(this.ShaderParticleGeometries, rhs.ShaderParticleGeometries)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.NavigationMeshInfoMaps, rhs.NavigationMeshInfoMaps)) return false;
                if (!object.Equals(this.Cells, rhs.Cells)) return false;
                if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
                if (!object.Equals(this.Quests, rhs.Quests)) return false;
                if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
                if (!object.Equals(this.Packages, rhs.Packages)) return false;
                if (!object.Equals(this.CombatStyles, rhs.CombatStyles)) return false;
                if (!object.Equals(this.LoadScreens, rhs.LoadScreens)) return false;
                if (!object.Equals(this.AnimatedObjects, rhs.AnimatedObjects)) return false;
                if (!object.Equals(this.Waters, rhs.Waters)) return false;
                if (!object.Equals(this.EffectShaders, rhs.EffectShaders)) return false;
                if (!object.Equals(this.Explosions, rhs.Explosions)) return false;
                if (!object.Equals(this.Debris, rhs.Debris)) return false;
                if (!object.Equals(this.ImageSpaces, rhs.ImageSpaces)) return false;
                if (!object.Equals(this.ImageSpaceAdapters, rhs.ImageSpaceAdapters)) return false;
                if (!object.Equals(this.FormLists, rhs.FormLists)) return false;
                if (!object.Equals(this.Perks, rhs.Perks)) return false;
                if (!object.Equals(this.BodyParts, rhs.BodyParts)) return false;
                if (!object.Equals(this.AddonNodes, rhs.AddonNodes)) return false;
                if (!object.Equals(this.ActorValueInformation, rhs.ActorValueInformation)) return false;
                if (!object.Equals(this.CameraShots, rhs.CameraShots)) return false;
                if (!object.Equals(this.CameraPaths, rhs.CameraPaths)) return false;
                if (!object.Equals(this.VoiceTypes, rhs.VoiceTypes)) return false;
                if (!object.Equals(this.MaterialTypes, rhs.MaterialTypes)) return false;
                if (!object.Equals(this.Impacts, rhs.Impacts)) return false;
                if (!object.Equals(this.ImpactDataSets, rhs.ImpactDataSets)) return false;
                if (!object.Equals(this.ArmorAddons, rhs.ArmorAddons)) return false;
                if (!object.Equals(this.Locations, rhs.Locations)) return false;
                if (!object.Equals(this.Messages, rhs.Messages)) return false;
                if (!object.Equals(this.DefaultObjectManagers, rhs.DefaultObjectManagers)) return false;
                if (!object.Equals(this.DefaultObjects, rhs.DefaultObjects)) return false;
                if (!object.Equals(this.LightingTemplates, rhs.LightingTemplates)) return false;
                if (!object.Equals(this.MusicTypes, rhs.MusicTypes)) return false;
                if (!object.Equals(this.Footsteps, rhs.Footsteps)) return false;
                if (!object.Equals(this.FootstepSets, rhs.FootstepSets)) return false;
                if (!object.Equals(this.StoryManagerBranchNodes, rhs.StoryManagerBranchNodes)) return false;
                if (!object.Equals(this.StoryManagerQuestNodes, rhs.StoryManagerQuestNodes)) return false;
                if (!object.Equals(this.StoryManagerEventNodes, rhs.StoryManagerEventNodes)) return false;
                if (!object.Equals(this.MusicTracks, rhs.MusicTracks)) return false;
                if (!object.Equals(this.EquipTypes, rhs.EquipTypes)) return false;
                if (!object.Equals(this.Outfits, rhs.Outfits)) return false;
                if (!object.Equals(this.ArtObjects, rhs.ArtObjects)) return false;
                if (!object.Equals(this.MovementTypes, rhs.MovementTypes)) return false;
                if (!object.Equals(this.CollisionLayers, rhs.CollisionLayers)) return false;
                if (!object.Equals(this.Colors, rhs.Colors)) return false;
                if (!object.Equals(this.ReverbParameters, rhs.ReverbParameters)) return false;
                if (!object.Equals(this.ReferenceGroups, rhs.ReferenceGroups)) return false;
                if (!object.Equals(this.AimModels, rhs.AimModels)) return false;
                if (!object.Equals(this.AimAssistModels, rhs.AimAssistModels)) return false;
                if (!object.Equals(this.MeleeAimAssistModels, rhs.MeleeAimAssistModels)) return false;
                if (!object.Equals(this.Layers, rhs.Layers)) return false;
                if (!object.Equals(this.ConstructibleObjects, rhs.ConstructibleObjects)) return false;
                if (!object.Equals(this.ObjectModifications, rhs.ObjectModifications)) return false;
                if (!object.Equals(this.Zooms, rhs.Zooms)) return false;
                if (!object.Equals(this.InstanceNamingRules, rhs.InstanceNamingRules)) return false;
                if (!object.Equals(this.SoundKeywordMappings, rhs.SoundKeywordMappings)) return false;
                if (!object.Equals(this.AttractionRules, rhs.AttractionRules)) return false;
                if (!object.Equals(this.SceneCollections, rhs.SceneCollections)) return false;
                if (!object.Equals(this.AnimationSoundTagSets, rhs.AnimationSoundTagSets)) return false;
                if (!object.Equals(this.Resources, rhs.Resources)) return false;
                if (!object.Equals(this.Biomes, rhs.Biomes)) return false;
                if (!object.Equals(this.NavigationMeshObstacleCoverManagers, rhs.NavigationMeshObstacleCoverManagers)) return false;
                if (!object.Equals(this.LensFlares, rhs.LensFlares)) return false;
                if (!object.Equals(this.ObjectVisibilityManagers, rhs.ObjectVisibilityManagers)) return false;
                if (!object.Equals(this.SnapTemplateNodes, rhs.SnapTemplateNodes)) return false;
                if (!object.Equals(this.SnapTemplates, rhs.SnapTemplates)) return false;
                if (!object.Equals(this.GroundCovers, rhs.GroundCovers)) return false;
                if (!object.Equals(this.MorphableObjects, rhs.MorphableObjects)) return false;
                if (!object.Equals(this.Traversals, rhs.Traversals)) return false;
                if (!object.Equals(this.ResourceGenerationData, rhs.ResourceGenerationData)) return false;
                if (!object.Equals(this.BiomeSwaps, rhs.BiomeSwaps)) return false;
                if (!object.Equals(this.Atmospheres, rhs.Atmospheres)) return false;
                if (!object.Equals(this.LeveledSpaceCells, rhs.LeveledSpaceCells)) return false;
                if (!object.Equals(this.SpeechChallenges, rhs.SpeechChallenges)) return false;
                if (!object.Equals(this.AimAssistPoses, rhs.AimAssistPoses)) return false;
                if (!object.Equals(this.VolumetricLightings, rhs.VolumetricLightings)) return false;
                if (!object.Equals(this.SurfaceBlocks, rhs.SurfaceBlocks)) return false;
                if (!object.Equals(this.SurfacePatternConfigs, rhs.SurfacePatternConfigs)) return false;
                if (!object.Equals(this.SurfacePatterns, rhs.SurfacePatterns)) return false;
                if (!object.Equals(this.SurfaceTrees, rhs.SurfaceTrees)) return false;
                if (!object.Equals(this.PlanetContentManagerTrees, rhs.PlanetContentManagerTrees)) return false;
                if (!object.Equals(this.BoneModifiers, rhs.BoneModifiers)) return false;
                if (!object.Equals(this.SnapTemplateBehaviors, rhs.SnapTemplateBehaviors)) return false;
                if (!object.Equals(this.Planets, rhs.Planets)) return false;
                if (!object.Equals(this.ConditionRecords, rhs.ConditionRecords)) return false;
                if (!object.Equals(this.PlanetContentManagerBranchNodes, rhs.PlanetContentManagerBranchNodes)) return false;
                if (!object.Equals(this.PlanetContentManagerContentNodes, rhs.PlanetContentManagerContentNodes)) return false;
                if (!object.Equals(this.Stars, rhs.Stars)) return false;
                if (!object.Equals(this.WWiseEventDatas, rhs.WWiseEventDatas)) return false;
                if (!object.Equals(this.ResearchProjects, rhs.ResearchProjects)) return false;
                if (!object.Equals(this.AimOpticalSightMarkers, rhs.AimOpticalSightMarkers)) return false;
                if (!object.Equals(this.AmbienceSets, rhs.AmbienceSets)) return false;
                if (!object.Equals(this.WeaponBarrelModels, rhs.WeaponBarrelModels)) return false;
                if (!object.Equals(this.SurfacePatternStyles, rhs.SurfacePatternStyles)) return false;
                if (!object.Equals(this.LayeredMaterialSwaps, rhs.LayeredMaterialSwaps)) return false;
                if (!object.Equals(this.ForceDatas, rhs.ForceDatas)) return false;
                if (!object.Equals(this.TerminalMenus, rhs.TerminalMenus)) return false;
                if (!object.Equals(this.EffectSequences, rhs.EffectSequences)) return false;
                if (!object.Equals(this.SecondaryDamageLists, rhs.SecondaryDamageLists)) return false;
                if (!object.Equals(this.MaterialPaths, rhs.MaterialPaths)) return false;
                if (!object.Equals(this.Clouds, rhs.Clouds)) return false;
                if (!object.Equals(this.FogVolumes, rhs.FogVolumes)) return false;
                if (!object.Equals(this.WWiseKeywordMappings, rhs.WWiseKeywordMappings)) return false;
                if (!object.Equals(this.LegendaryItems, rhs.LegendaryItems)) return false;
                if (!object.Equals(this.ParticleSystemDefineCollisions, rhs.ParticleSystemDefineCollisions)) return false;
                if (!object.Equals(this.SunPresets, rhs.SunPresets)) return false;
                if (!object.Equals(this.PhotoModeFeatures, rhs.PhotoModeFeatures)) return false;
                if (!object.Equals(this.GameplayOptions, rhs.GameplayOptions)) return false;
                if (!object.Equals(this.GameplayOptionsGroups, rhs.GameplayOptionsGroups)) return false;
                if (!object.Equals(this.TimeOfDays, rhs.TimeOfDays)) return false;
                if (!object.Equals(this.ActorValueModulations, rhs.ActorValueModulations)) return false;
                if (!object.Equals(this.Challenges, rhs.Challenges)) return false;
                if (!object.Equals(this.FacialExpressions, rhs.FacialExpressions)) return false;
                if (!object.Equals(this.PERS, rhs.PERS)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.Keywords);
                hash.Add(this.FFKW);
                hash.Add(this.LocationReferenceTypes);
                hash.Add(this.Actions);
                hash.Add(this.Transforms);
                hash.Add(this.TextureSets);
                hash.Add(this.Globals);
                hash.Add(this.DamageTypes);
                hash.Add(this.Classes);
                hash.Add(this.Factions);
                hash.Add(this.AffinityEvents);
                hash.Add(this.HeadParts);
                hash.Add(this.Races);
                hash.Add(this.SoundMarkers);
                hash.Add(this.SoundEchoMarkers);
                hash.Add(this.AcousticSpaces);
                hash.Add(this.AudioOcclusionPrimitives);
                hash.Add(this.MagicEffects);
                hash.Add(this.LandscapeTextures);
                hash.Add(this.ProjectedDecals);
                hash.Add(this.ObjectEffects);
                hash.Add(this.Spells);
                hash.Add(this.Activators);
                hash.Add(this.CurveTables);
                hash.Add(this.Curve3Ds);
                hash.Add(this.Armors);
                hash.Add(this.Books);
                hash.Add(this.Containers);
                hash.Add(this.Doors);
                hash.Add(this.Lights);
                hash.Add(this.MiscItems);
                hash.Add(this.Statics);
                hash.Add(this.StaticCollections);
                hash.Add(this.PackIns);
                hash.Add(this.MoveableStatics);
                hash.Add(this.Grasses);
                hash.Add(this.Florae);
                hash.Add(this.Furniture);
                hash.Add(this.Weapons);
                hash.Add(this.Ammunitions);
                hash.Add(this.Npcs);
                hash.Add(this.LeveledNpcs);
                hash.Add(this.LeveledPackIns);
                hash.Add(this.Keys);
                hash.Add(this.Ingestibles);
                hash.Add(this.IdleMarkers);
                hash.Add(this.BiomeMarkers);
                hash.Add(this.Notes);
                hash.Add(this.Projectiles);
                hash.Add(this.Hazards);
                hash.Add(this.BendableSplines);
                hash.Add(this.Terminals);
                hash.Add(this.LeveledItems);
                hash.Add(this.GenericBaseFormTemplates);
                hash.Add(this.GenericBaseForms);
                hash.Add(this.LeveledBaseForms);
                hash.Add(this.Weathers);
                hash.Add(this.WeatherSettings);
                hash.Add(this.Climates);
                hash.Add(this.ShaderParticleGeometries);
                hash.Add(this.Regions);
                hash.Add(this.NavigationMeshInfoMaps);
                hash.Add(this.Cells);
                hash.Add(this.Worldspaces);
                hash.Add(this.Quests);
                hash.Add(this.IdleAnimations);
                hash.Add(this.Packages);
                hash.Add(this.CombatStyles);
                hash.Add(this.LoadScreens);
                hash.Add(this.AnimatedObjects);
                hash.Add(this.Waters);
                hash.Add(this.EffectShaders);
                hash.Add(this.Explosions);
                hash.Add(this.Debris);
                hash.Add(this.ImageSpaces);
                hash.Add(this.ImageSpaceAdapters);
                hash.Add(this.FormLists);
                hash.Add(this.Perks);
                hash.Add(this.BodyParts);
                hash.Add(this.AddonNodes);
                hash.Add(this.ActorValueInformation);
                hash.Add(this.CameraShots);
                hash.Add(this.CameraPaths);
                hash.Add(this.VoiceTypes);
                hash.Add(this.MaterialTypes);
                hash.Add(this.Impacts);
                hash.Add(this.ImpactDataSets);
                hash.Add(this.ArmorAddons);
                hash.Add(this.Locations);
                hash.Add(this.Messages);
                hash.Add(this.DefaultObjectManagers);
                hash.Add(this.DefaultObjects);
                hash.Add(this.LightingTemplates);
                hash.Add(this.MusicTypes);
                hash.Add(this.Footsteps);
                hash.Add(this.FootstepSets);
                hash.Add(this.StoryManagerBranchNodes);
                hash.Add(this.StoryManagerQuestNodes);
                hash.Add(this.StoryManagerEventNodes);
                hash.Add(this.MusicTracks);
                hash.Add(this.EquipTypes);
                hash.Add(this.Outfits);
                hash.Add(this.ArtObjects);
                hash.Add(this.MovementTypes);
                hash.Add(this.CollisionLayers);
                hash.Add(this.Colors);
                hash.Add(this.ReverbParameters);
                hash.Add(this.ReferenceGroups);
                hash.Add(this.AimModels);
                hash.Add(this.AimAssistModels);
                hash.Add(this.MeleeAimAssistModels);
                hash.Add(this.Layers);
                hash.Add(this.ConstructibleObjects);
                hash.Add(this.ObjectModifications);
                hash.Add(this.Zooms);
                hash.Add(this.InstanceNamingRules);
                hash.Add(this.SoundKeywordMappings);
                hash.Add(this.AttractionRules);
                hash.Add(this.SceneCollections);
                hash.Add(this.AnimationSoundTagSets);
                hash.Add(this.Resources);
                hash.Add(this.Biomes);
                hash.Add(this.NavigationMeshObstacleCoverManagers);
                hash.Add(this.LensFlares);
                hash.Add(this.ObjectVisibilityManagers);
                hash.Add(this.SnapTemplateNodes);
                hash.Add(this.SnapTemplates);
                hash.Add(this.GroundCovers);
                hash.Add(this.MorphableObjects);
                hash.Add(this.Traversals);
                hash.Add(this.ResourceGenerationData);
                hash.Add(this.BiomeSwaps);
                hash.Add(this.Atmospheres);
                hash.Add(this.LeveledSpaceCells);
                hash.Add(this.SpeechChallenges);
                hash.Add(this.AimAssistPoses);
                hash.Add(this.VolumetricLightings);
                hash.Add(this.SurfaceBlocks);
                hash.Add(this.SurfacePatternConfigs);
                hash.Add(this.SurfacePatterns);
                hash.Add(this.SurfaceTrees);
                hash.Add(this.PlanetContentManagerTrees);
                hash.Add(this.BoneModifiers);
                hash.Add(this.SnapTemplateBehaviors);
                hash.Add(this.Planets);
                hash.Add(this.ConditionRecords);
                hash.Add(this.PlanetContentManagerBranchNodes);
                hash.Add(this.PlanetContentManagerContentNodes);
                hash.Add(this.Stars);
                hash.Add(this.WWiseEventDatas);
                hash.Add(this.ResearchProjects);
                hash.Add(this.AimOpticalSightMarkers);
                hash.Add(this.AmbienceSets);
                hash.Add(this.WeaponBarrelModels);
                hash.Add(this.SurfacePatternStyles);
                hash.Add(this.LayeredMaterialSwaps);
                hash.Add(this.ForceDatas);
                hash.Add(this.TerminalMenus);
                hash.Add(this.EffectSequences);
                hash.Add(this.SecondaryDamageLists);
                hash.Add(this.MaterialPaths);
                hash.Add(this.Clouds);
                hash.Add(this.FogVolumes);
                hash.Add(this.WWiseKeywordMappings);
                hash.Add(this.LegendaryItems);
                hash.Add(this.ParticleSystemDefineCollisions);
                hash.Add(this.SunPresets);
                hash.Add(this.PhotoModeFeatures);
                hash.Add(this.GameplayOptions);
                hash.Add(this.GameplayOptionsGroups);
                hash.Add(this.TimeOfDays);
                hash.Add(this.ActorValueModulations);
                hash.Add(this.Challenges);
                hash.Add(this.FacialExpressions);
                hash.Add(this.PERS);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null && !this.Keywords.Specific.All(eval)) return false;
                }
                if (FFKW != null)
                {
                    if (!eval(this.FFKW.Overall)) return false;
                    if (this.FFKW.Specific != null && !this.FFKW.Specific.All(eval)) return false;
                }
                if (LocationReferenceTypes != null)
                {
                    if (!eval(this.LocationReferenceTypes.Overall)) return false;
                    if (this.LocationReferenceTypes.Specific != null && !this.LocationReferenceTypes.Specific.All(eval)) return false;
                }
                if (Actions != null)
                {
                    if (!eval(this.Actions.Overall)) return false;
                    if (this.Actions.Specific != null && !this.Actions.Specific.All(eval)) return false;
                }
                if (Transforms != null)
                {
                    if (!eval(this.Transforms.Overall)) return false;
                    if (this.Transforms.Specific != null && !this.Transforms.Specific.All(eval)) return false;
                }
                if (TextureSets != null)
                {
                    if (!eval(this.TextureSets.Overall)) return false;
                    if (this.TextureSets.Specific != null && !this.TextureSets.Specific.All(eval)) return false;
                }
                if (Globals != null)
                {
                    if (!eval(this.Globals.Overall)) return false;
                    if (this.Globals.Specific != null && !this.Globals.Specific.All(eval)) return false;
                }
                if (DamageTypes != null)
                {
                    if (!eval(this.DamageTypes.Overall)) return false;
                    if (this.DamageTypes.Specific != null && !this.DamageTypes.Specific.All(eval)) return false;
                }
                if (Classes != null)
                {
                    if (!eval(this.Classes.Overall)) return false;
                    if (this.Classes.Specific != null && !this.Classes.Specific.All(eval)) return false;
                }
                if (Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null && !this.Factions.Specific.All(eval)) return false;
                }
                if (AffinityEvents != null)
                {
                    if (!eval(this.AffinityEvents.Overall)) return false;
                    if (this.AffinityEvents.Specific != null && !this.AffinityEvents.Specific.All(eval)) return false;
                }
                if (HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null && !this.HeadParts.Specific.All(eval)) return false;
                }
                if (Races != null)
                {
                    if (!eval(this.Races.Overall)) return false;
                    if (this.Races.Specific != null && !this.Races.Specific.All(eval)) return false;
                }
                if (SoundMarkers != null)
                {
                    if (!eval(this.SoundMarkers.Overall)) return false;
                    if (this.SoundMarkers.Specific != null && !this.SoundMarkers.Specific.All(eval)) return false;
                }
                if (SoundEchoMarkers != null)
                {
                    if (!eval(this.SoundEchoMarkers.Overall)) return false;
                    if (this.SoundEchoMarkers.Specific != null && !this.SoundEchoMarkers.Specific.All(eval)) return false;
                }
                if (AcousticSpaces != null)
                {
                    if (!eval(this.AcousticSpaces.Overall)) return false;
                    if (this.AcousticSpaces.Specific != null && !this.AcousticSpaces.Specific.All(eval)) return false;
                }
                if (AudioOcclusionPrimitives != null)
                {
                    if (!eval(this.AudioOcclusionPrimitives.Overall)) return false;
                    if (this.AudioOcclusionPrimitives.Specific != null && !this.AudioOcclusionPrimitives.Specific.All(eval)) return false;
                }
                if (MagicEffects != null)
                {
                    if (!eval(this.MagicEffects.Overall)) return false;
                    if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.All(eval)) return false;
                }
                if (LandscapeTextures != null)
                {
                    if (!eval(this.LandscapeTextures.Overall)) return false;
                    if (this.LandscapeTextures.Specific != null && !this.LandscapeTextures.Specific.All(eval)) return false;
                }
                if (ProjectedDecals != null)
                {
                    if (!eval(this.ProjectedDecals.Overall)) return false;
                    if (this.ProjectedDecals.Specific != null && !this.ProjectedDecals.Specific.All(eval)) return false;
                }
                if (ObjectEffects != null)
                {
                    if (!eval(this.ObjectEffects.Overall)) return false;
                    if (this.ObjectEffects.Specific != null && !this.ObjectEffects.Specific.All(eval)) return false;
                }
                if (Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null && !this.Spells.Specific.All(eval)) return false;
                }
                if (Activators != null)
                {
                    if (!eval(this.Activators.Overall)) return false;
                    if (this.Activators.Specific != null && !this.Activators.Specific.All(eval)) return false;
                }
                if (CurveTables != null)
                {
                    if (!eval(this.CurveTables.Overall)) return false;
                    if (this.CurveTables.Specific != null && !this.CurveTables.Specific.All(eval)) return false;
                }
                if (Curve3Ds != null)
                {
                    if (!eval(this.Curve3Ds.Overall)) return false;
                    if (this.Curve3Ds.Specific != null && !this.Curve3Ds.Specific.All(eval)) return false;
                }
                if (Armors != null)
                {
                    if (!eval(this.Armors.Overall)) return false;
                    if (this.Armors.Specific != null && !this.Armors.Specific.All(eval)) return false;
                }
                if (Books != null)
                {
                    if (!eval(this.Books.Overall)) return false;
                    if (this.Books.Specific != null && !this.Books.Specific.All(eval)) return false;
                }
                if (Containers != null)
                {
                    if (!eval(this.Containers.Overall)) return false;
                    if (this.Containers.Specific != null && !this.Containers.Specific.All(eval)) return false;
                }
                if (Doors != null)
                {
                    if (!eval(this.Doors.Overall)) return false;
                    if (this.Doors.Specific != null && !this.Doors.Specific.All(eval)) return false;
                }
                if (Lights != null)
                {
                    if (!eval(this.Lights.Overall)) return false;
                    if (this.Lights.Specific != null && !this.Lights.Specific.All(eval)) return false;
                }
                if (MiscItems != null)
                {
                    if (!eval(this.MiscItems.Overall)) return false;
                    if (this.MiscItems.Specific != null && !this.MiscItems.Specific.All(eval)) return false;
                }
                if (Statics != null)
                {
                    if (!eval(this.Statics.Overall)) return false;
                    if (this.Statics.Specific != null && !this.Statics.Specific.All(eval)) return false;
                }
                if (StaticCollections != null)
                {
                    if (!eval(this.StaticCollections.Overall)) return false;
                    if (this.StaticCollections.Specific != null && !this.StaticCollections.Specific.All(eval)) return false;
                }
                if (PackIns != null)
                {
                    if (!eval(this.PackIns.Overall)) return false;
                    if (this.PackIns.Specific != null && !this.PackIns.Specific.All(eval)) return false;
                }
                if (MoveableStatics != null)
                {
                    if (!eval(this.MoveableStatics.Overall)) return false;
                    if (this.MoveableStatics.Specific != null && !this.MoveableStatics.Specific.All(eval)) return false;
                }
                if (Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null && !this.Grasses.Specific.All(eval)) return false;
                }
                if (Florae != null)
                {
                    if (!eval(this.Florae.Overall)) return false;
                    if (this.Florae.Specific != null && !this.Florae.Specific.All(eval)) return false;
                }
                if (Furniture != null)
                {
                    if (!eval(this.Furniture.Overall)) return false;
                    if (this.Furniture.Specific != null && !this.Furniture.Specific.All(eval)) return false;
                }
                if (Weapons != null)
                {
                    if (!eval(this.Weapons.Overall)) return false;
                    if (this.Weapons.Specific != null && !this.Weapons.Specific.All(eval)) return false;
                }
                if (Ammunitions != null)
                {
                    if (!eval(this.Ammunitions.Overall)) return false;
                    if (this.Ammunitions.Specific != null && !this.Ammunitions.Specific.All(eval)) return false;
                }
                if (Npcs != null)
                {
                    if (!eval(this.Npcs.Overall)) return false;
                    if (this.Npcs.Specific != null && !this.Npcs.Specific.All(eval)) return false;
                }
                if (LeveledNpcs != null)
                {
                    if (!eval(this.LeveledNpcs.Overall)) return false;
                    if (this.LeveledNpcs.Specific != null && !this.LeveledNpcs.Specific.All(eval)) return false;
                }
                if (LeveledPackIns != null)
                {
                    if (!eval(this.LeveledPackIns.Overall)) return false;
                    if (this.LeveledPackIns.Specific != null && !this.LeveledPackIns.Specific.All(eval)) return false;
                }
                if (Keys != null)
                {
                    if (!eval(this.Keys.Overall)) return false;
                    if (this.Keys.Specific != null && !this.Keys.Specific.All(eval)) return false;
                }
                if (Ingestibles != null)
                {
                    if (!eval(this.Ingestibles.Overall)) return false;
                    if (this.Ingestibles.Specific != null && !this.Ingestibles.Specific.All(eval)) return false;
                }
                if (IdleMarkers != null)
                {
                    if (!eval(this.IdleMarkers.Overall)) return false;
                    if (this.IdleMarkers.Specific != null && !this.IdleMarkers.Specific.All(eval)) return false;
                }
                if (BiomeMarkers != null)
                {
                    if (!eval(this.BiomeMarkers.Overall)) return false;
                    if (this.BiomeMarkers.Specific != null && !this.BiomeMarkers.Specific.All(eval)) return false;
                }
                if (Notes != null)
                {
                    if (!eval(this.Notes.Overall)) return false;
                    if (this.Notes.Specific != null && !this.Notes.Specific.All(eval)) return false;
                }
                if (Projectiles != null)
                {
                    if (!eval(this.Projectiles.Overall)) return false;
                    if (this.Projectiles.Specific != null && !this.Projectiles.Specific.All(eval)) return false;
                }
                if (Hazards != null)
                {
                    if (!eval(this.Hazards.Overall)) return false;
                    if (this.Hazards.Specific != null && !this.Hazards.Specific.All(eval)) return false;
                }
                if (BendableSplines != null)
                {
                    if (!eval(this.BendableSplines.Overall)) return false;
                    if (this.BendableSplines.Specific != null && !this.BendableSplines.Specific.All(eval)) return false;
                }
                if (Terminals != null)
                {
                    if (!eval(this.Terminals.Overall)) return false;
                    if (this.Terminals.Specific != null && !this.Terminals.Specific.All(eval)) return false;
                }
                if (LeveledItems != null)
                {
                    if (!eval(this.LeveledItems.Overall)) return false;
                    if (this.LeveledItems.Specific != null && !this.LeveledItems.Specific.All(eval)) return false;
                }
                if (GenericBaseFormTemplates != null)
                {
                    if (!eval(this.GenericBaseFormTemplates.Overall)) return false;
                    if (this.GenericBaseFormTemplates.Specific != null && !this.GenericBaseFormTemplates.Specific.All(eval)) return false;
                }
                if (GenericBaseForms != null)
                {
                    if (!eval(this.GenericBaseForms.Overall)) return false;
                    if (this.GenericBaseForms.Specific != null && !this.GenericBaseForms.Specific.All(eval)) return false;
                }
                if (LeveledBaseForms != null)
                {
                    if (!eval(this.LeveledBaseForms.Overall)) return false;
                    if (this.LeveledBaseForms.Specific != null && !this.LeveledBaseForms.Specific.All(eval)) return false;
                }
                if (Weathers != null)
                {
                    if (!eval(this.Weathers.Overall)) return false;
                    if (this.Weathers.Specific != null && !this.Weathers.Specific.All(eval)) return false;
                }
                if (WeatherSettings != null)
                {
                    if (!eval(this.WeatherSettings.Overall)) return false;
                    if (this.WeatherSettings.Specific != null && !this.WeatherSettings.Specific.All(eval)) return false;
                }
                if (Climates != null)
                {
                    if (!eval(this.Climates.Overall)) return false;
                    if (this.Climates.Specific != null && !this.Climates.Specific.All(eval)) return false;
                }
                if (ShaderParticleGeometries != null)
                {
                    if (!eval(this.ShaderParticleGeometries.Overall)) return false;
                    if (this.ShaderParticleGeometries.Specific != null && !this.ShaderParticleGeometries.Specific.All(eval)) return false;
                }
                if (Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null && !this.Regions.Specific.All(eval)) return false;
                }
                if (NavigationMeshInfoMaps != null)
                {
                    if (!eval(this.NavigationMeshInfoMaps.Overall)) return false;
                    if (this.NavigationMeshInfoMaps.Specific != null && !this.NavigationMeshInfoMaps.Specific.All(eval)) return false;
                }
                if (Cells != null)
                {
                    if (!eval(this.Cells.Overall)) return false;
                    if (this.Cells.Specific != null && !this.Cells.Specific.All(eval)) return false;
                }
                if (Worldspaces != null)
                {
                    if (!eval(this.Worldspaces.Overall)) return false;
                    if (this.Worldspaces.Specific != null && !this.Worldspaces.Specific.All(eval)) return false;
                }
                if (Quests != null)
                {
                    if (!eval(this.Quests.Overall)) return false;
                    if (this.Quests.Specific != null && !this.Quests.Specific.All(eval)) return false;
                }
                if (IdleAnimations != null)
                {
                    if (!eval(this.IdleAnimations.Overall)) return false;
                    if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.All(eval)) return false;
                }
                if (Packages != null)
                {
                    if (!eval(this.Packages.Overall)) return false;
                    if (this.Packages.Specific != null && !this.Packages.Specific.All(eval)) return false;
                }
                if (CombatStyles != null)
                {
                    if (!eval(this.CombatStyles.Overall)) return false;
                    if (this.CombatStyles.Specific != null && !this.CombatStyles.Specific.All(eval)) return false;
                }
                if (LoadScreens != null)
                {
                    if (!eval(this.LoadScreens.Overall)) return false;
                    if (this.LoadScreens.Specific != null && !this.LoadScreens.Specific.All(eval)) return false;
                }
                if (AnimatedObjects != null)
                {
                    if (!eval(this.AnimatedObjects.Overall)) return false;
                    if (this.AnimatedObjects.Specific != null && !this.AnimatedObjects.Specific.All(eval)) return false;
                }
                if (Waters != null)
                {
                    if (!eval(this.Waters.Overall)) return false;
                    if (this.Waters.Specific != null && !this.Waters.Specific.All(eval)) return false;
                }
                if (EffectShaders != null)
                {
                    if (!eval(this.EffectShaders.Overall)) return false;
                    if (this.EffectShaders.Specific != null && !this.EffectShaders.Specific.All(eval)) return false;
                }
                if (Explosions != null)
                {
                    if (!eval(this.Explosions.Overall)) return false;
                    if (this.Explosions.Specific != null && !this.Explosions.Specific.All(eval)) return false;
                }
                if (Debris != null)
                {
                    if (!eval(this.Debris.Overall)) return false;
                    if (this.Debris.Specific != null && !this.Debris.Specific.All(eval)) return false;
                }
                if (ImageSpaces != null)
                {
                    if (!eval(this.ImageSpaces.Overall)) return false;
                    if (this.ImageSpaces.Specific != null && !this.ImageSpaces.Specific.All(eval)) return false;
                }
                if (ImageSpaceAdapters != null)
                {
                    if (!eval(this.ImageSpaceAdapters.Overall)) return false;
                    if (this.ImageSpaceAdapters.Specific != null && !this.ImageSpaceAdapters.Specific.All(eval)) return false;
                }
                if (FormLists != null)
                {
                    if (!eval(this.FormLists.Overall)) return false;
                    if (this.FormLists.Specific != null && !this.FormLists.Specific.All(eval)) return false;
                }
                if (Perks != null)
                {
                    if (!eval(this.Perks.Overall)) return false;
                    if (this.Perks.Specific != null && !this.Perks.Specific.All(eval)) return false;
                }
                if (BodyParts != null)
                {
                    if (!eval(this.BodyParts.Overall)) return false;
                    if (this.BodyParts.Specific != null && !this.BodyParts.Specific.All(eval)) return false;
                }
                if (AddonNodes != null)
                {
                    if (!eval(this.AddonNodes.Overall)) return false;
                    if (this.AddonNodes.Specific != null && !this.AddonNodes.Specific.All(eval)) return false;
                }
                if (ActorValueInformation != null)
                {
                    if (!eval(this.ActorValueInformation.Overall)) return false;
                    if (this.ActorValueInformation.Specific != null && !this.ActorValueInformation.Specific.All(eval)) return false;
                }
                if (CameraShots != null)
                {
                    if (!eval(this.CameraShots.Overall)) return false;
                    if (this.CameraShots.Specific != null && !this.CameraShots.Specific.All(eval)) return false;
                }
                if (CameraPaths != null)
                {
                    if (!eval(this.CameraPaths.Overall)) return false;
                    if (this.CameraPaths.Specific != null && !this.CameraPaths.Specific.All(eval)) return false;
                }
                if (VoiceTypes != null)
                {
                    if (!eval(this.VoiceTypes.Overall)) return false;
                    if (this.VoiceTypes.Specific != null && !this.VoiceTypes.Specific.All(eval)) return false;
                }
                if (MaterialTypes != null)
                {
                    if (!eval(this.MaterialTypes.Overall)) return false;
                    if (this.MaterialTypes.Specific != null && !this.MaterialTypes.Specific.All(eval)) return false;
                }
                if (Impacts != null)
                {
                    if (!eval(this.Impacts.Overall)) return false;
                    if (this.Impacts.Specific != null && !this.Impacts.Specific.All(eval)) return false;
                }
                if (ImpactDataSets != null)
                {
                    if (!eval(this.ImpactDataSets.Overall)) return false;
                    if (this.ImpactDataSets.Specific != null && !this.ImpactDataSets.Specific.All(eval)) return false;
                }
                if (ArmorAddons != null)
                {
                    if (!eval(this.ArmorAddons.Overall)) return false;
                    if (this.ArmorAddons.Specific != null && !this.ArmorAddons.Specific.All(eval)) return false;
                }
                if (Locations != null)
                {
                    if (!eval(this.Locations.Overall)) return false;
                    if (this.Locations.Specific != null && !this.Locations.Specific.All(eval)) return false;
                }
                if (Messages != null)
                {
                    if (!eval(this.Messages.Overall)) return false;
                    if (this.Messages.Specific != null && !this.Messages.Specific.All(eval)) return false;
                }
                if (DefaultObjectManagers != null)
                {
                    if (!eval(this.DefaultObjectManagers.Overall)) return false;
                    if (this.DefaultObjectManagers.Specific != null && !this.DefaultObjectManagers.Specific.All(eval)) return false;
                }
                if (DefaultObjects != null)
                {
                    if (!eval(this.DefaultObjects.Overall)) return false;
                    if (this.DefaultObjects.Specific != null && !this.DefaultObjects.Specific.All(eval)) return false;
                }
                if (LightingTemplates != null)
                {
                    if (!eval(this.LightingTemplates.Overall)) return false;
                    if (this.LightingTemplates.Specific != null && !this.LightingTemplates.Specific.All(eval)) return false;
                }
                if (MusicTypes != null)
                {
                    if (!eval(this.MusicTypes.Overall)) return false;
                    if (this.MusicTypes.Specific != null && !this.MusicTypes.Specific.All(eval)) return false;
                }
                if (Footsteps != null)
                {
                    if (!eval(this.Footsteps.Overall)) return false;
                    if (this.Footsteps.Specific != null && !this.Footsteps.Specific.All(eval)) return false;
                }
                if (FootstepSets != null)
                {
                    if (!eval(this.FootstepSets.Overall)) return false;
                    if (this.FootstepSets.Specific != null && !this.FootstepSets.Specific.All(eval)) return false;
                }
                if (StoryManagerBranchNodes != null)
                {
                    if (!eval(this.StoryManagerBranchNodes.Overall)) return false;
                    if (this.StoryManagerBranchNodes.Specific != null && !this.StoryManagerBranchNodes.Specific.All(eval)) return false;
                }
                if (StoryManagerQuestNodes != null)
                {
                    if (!eval(this.StoryManagerQuestNodes.Overall)) return false;
                    if (this.StoryManagerQuestNodes.Specific != null && !this.StoryManagerQuestNodes.Specific.All(eval)) return false;
                }
                if (StoryManagerEventNodes != null)
                {
                    if (!eval(this.StoryManagerEventNodes.Overall)) return false;
                    if (this.StoryManagerEventNodes.Specific != null && !this.StoryManagerEventNodes.Specific.All(eval)) return false;
                }
                if (MusicTracks != null)
                {
                    if (!eval(this.MusicTracks.Overall)) return false;
                    if (this.MusicTracks.Specific != null && !this.MusicTracks.Specific.All(eval)) return false;
                }
                if (EquipTypes != null)
                {
                    if (!eval(this.EquipTypes.Overall)) return false;
                    if (this.EquipTypes.Specific != null && !this.EquipTypes.Specific.All(eval)) return false;
                }
                if (Outfits != null)
                {
                    if (!eval(this.Outfits.Overall)) return false;
                    if (this.Outfits.Specific != null && !this.Outfits.Specific.All(eval)) return false;
                }
                if (ArtObjects != null)
                {
                    if (!eval(this.ArtObjects.Overall)) return false;
                    if (this.ArtObjects.Specific != null && !this.ArtObjects.Specific.All(eval)) return false;
                }
                if (MovementTypes != null)
                {
                    if (!eval(this.MovementTypes.Overall)) return false;
                    if (this.MovementTypes.Specific != null && !this.MovementTypes.Specific.All(eval)) return false;
                }
                if (CollisionLayers != null)
                {
                    if (!eval(this.CollisionLayers.Overall)) return false;
                    if (this.CollisionLayers.Specific != null && !this.CollisionLayers.Specific.All(eval)) return false;
                }
                if (Colors != null)
                {
                    if (!eval(this.Colors.Overall)) return false;
                    if (this.Colors.Specific != null && !this.Colors.Specific.All(eval)) return false;
                }
                if (ReverbParameters != null)
                {
                    if (!eval(this.ReverbParameters.Overall)) return false;
                    if (this.ReverbParameters.Specific != null && !this.ReverbParameters.Specific.All(eval)) return false;
                }
                if (ReferenceGroups != null)
                {
                    if (!eval(this.ReferenceGroups.Overall)) return false;
                    if (this.ReferenceGroups.Specific != null && !this.ReferenceGroups.Specific.All(eval)) return false;
                }
                if (AimModels != null)
                {
                    if (!eval(this.AimModels.Overall)) return false;
                    if (this.AimModels.Specific != null && !this.AimModels.Specific.All(eval)) return false;
                }
                if (AimAssistModels != null)
                {
                    if (!eval(this.AimAssistModels.Overall)) return false;
                    if (this.AimAssistModels.Specific != null && !this.AimAssistModels.Specific.All(eval)) return false;
                }
                if (MeleeAimAssistModels != null)
                {
                    if (!eval(this.MeleeAimAssistModels.Overall)) return false;
                    if (this.MeleeAimAssistModels.Specific != null && !this.MeleeAimAssistModels.Specific.All(eval)) return false;
                }
                if (Layers != null)
                {
                    if (!eval(this.Layers.Overall)) return false;
                    if (this.Layers.Specific != null && !this.Layers.Specific.All(eval)) return false;
                }
                if (ConstructibleObjects != null)
                {
                    if (!eval(this.ConstructibleObjects.Overall)) return false;
                    if (this.ConstructibleObjects.Specific != null && !this.ConstructibleObjects.Specific.All(eval)) return false;
                }
                if (ObjectModifications != null)
                {
                    if (!eval(this.ObjectModifications.Overall)) return false;
                    if (this.ObjectModifications.Specific != null && !this.ObjectModifications.Specific.All(eval)) return false;
                }
                if (Zooms != null)
                {
                    if (!eval(this.Zooms.Overall)) return false;
                    if (this.Zooms.Specific != null && !this.Zooms.Specific.All(eval)) return false;
                }
                if (InstanceNamingRules != null)
                {
                    if (!eval(this.InstanceNamingRules.Overall)) return false;
                    if (this.InstanceNamingRules.Specific != null && !this.InstanceNamingRules.Specific.All(eval)) return false;
                }
                if (SoundKeywordMappings != null)
                {
                    if (!eval(this.SoundKeywordMappings.Overall)) return false;
                    if (this.SoundKeywordMappings.Specific != null && !this.SoundKeywordMappings.Specific.All(eval)) return false;
                }
                if (AttractionRules != null)
                {
                    if (!eval(this.AttractionRules.Overall)) return false;
                    if (this.AttractionRules.Specific != null && !this.AttractionRules.Specific.All(eval)) return false;
                }
                if (SceneCollections != null)
                {
                    if (!eval(this.SceneCollections.Overall)) return false;
                    if (this.SceneCollections.Specific != null && !this.SceneCollections.Specific.All(eval)) return false;
                }
                if (AnimationSoundTagSets != null)
                {
                    if (!eval(this.AnimationSoundTagSets.Overall)) return false;
                    if (this.AnimationSoundTagSets.Specific != null && !this.AnimationSoundTagSets.Specific.All(eval)) return false;
                }
                if (Resources != null)
                {
                    if (!eval(this.Resources.Overall)) return false;
                    if (this.Resources.Specific != null && !this.Resources.Specific.All(eval)) return false;
                }
                if (Biomes != null)
                {
                    if (!eval(this.Biomes.Overall)) return false;
                    if (this.Biomes.Specific != null && !this.Biomes.Specific.All(eval)) return false;
                }
                if (NavigationMeshObstacleCoverManagers != null)
                {
                    if (!eval(this.NavigationMeshObstacleCoverManagers.Overall)) return false;
                    if (this.NavigationMeshObstacleCoverManagers.Specific != null && !this.NavigationMeshObstacleCoverManagers.Specific.All(eval)) return false;
                }
                if (LensFlares != null)
                {
                    if (!eval(this.LensFlares.Overall)) return false;
                    if (this.LensFlares.Specific != null && !this.LensFlares.Specific.All(eval)) return false;
                }
                if (ObjectVisibilityManagers != null)
                {
                    if (!eval(this.ObjectVisibilityManagers.Overall)) return false;
                    if (this.ObjectVisibilityManagers.Specific != null && !this.ObjectVisibilityManagers.Specific.All(eval)) return false;
                }
                if (SnapTemplateNodes != null)
                {
                    if (!eval(this.SnapTemplateNodes.Overall)) return false;
                    if (this.SnapTemplateNodes.Specific != null && !this.SnapTemplateNodes.Specific.All(eval)) return false;
                }
                if (SnapTemplates != null)
                {
                    if (!eval(this.SnapTemplates.Overall)) return false;
                    if (this.SnapTemplates.Specific != null && !this.SnapTemplates.Specific.All(eval)) return false;
                }
                if (GroundCovers != null)
                {
                    if (!eval(this.GroundCovers.Overall)) return false;
                    if (this.GroundCovers.Specific != null && !this.GroundCovers.Specific.All(eval)) return false;
                }
                if (MorphableObjects != null)
                {
                    if (!eval(this.MorphableObjects.Overall)) return false;
                    if (this.MorphableObjects.Specific != null && !this.MorphableObjects.Specific.All(eval)) return false;
                }
                if (Traversals != null)
                {
                    if (!eval(this.Traversals.Overall)) return false;
                    if (this.Traversals.Specific != null && !this.Traversals.Specific.All(eval)) return false;
                }
                if (ResourceGenerationData != null)
                {
                    if (!eval(this.ResourceGenerationData.Overall)) return false;
                    if (this.ResourceGenerationData.Specific != null && !this.ResourceGenerationData.Specific.All(eval)) return false;
                }
                if (BiomeSwaps != null)
                {
                    if (!eval(this.BiomeSwaps.Overall)) return false;
                    if (this.BiomeSwaps.Specific != null && !this.BiomeSwaps.Specific.All(eval)) return false;
                }
                if (Atmospheres != null)
                {
                    if (!eval(this.Atmospheres.Overall)) return false;
                    if (this.Atmospheres.Specific != null && !this.Atmospheres.Specific.All(eval)) return false;
                }
                if (LeveledSpaceCells != null)
                {
                    if (!eval(this.LeveledSpaceCells.Overall)) return false;
                    if (this.LeveledSpaceCells.Specific != null && !this.LeveledSpaceCells.Specific.All(eval)) return false;
                }
                if (SpeechChallenges != null)
                {
                    if (!eval(this.SpeechChallenges.Overall)) return false;
                    if (this.SpeechChallenges.Specific != null && !this.SpeechChallenges.Specific.All(eval)) return false;
                }
                if (AimAssistPoses != null)
                {
                    if (!eval(this.AimAssistPoses.Overall)) return false;
                    if (this.AimAssistPoses.Specific != null && !this.AimAssistPoses.Specific.All(eval)) return false;
                }
                if (VolumetricLightings != null)
                {
                    if (!eval(this.VolumetricLightings.Overall)) return false;
                    if (this.VolumetricLightings.Specific != null && !this.VolumetricLightings.Specific.All(eval)) return false;
                }
                if (SurfaceBlocks != null)
                {
                    if (!eval(this.SurfaceBlocks.Overall)) return false;
                    if (this.SurfaceBlocks.Specific != null && !this.SurfaceBlocks.Specific.All(eval)) return false;
                }
                if (SurfacePatternConfigs != null)
                {
                    if (!eval(this.SurfacePatternConfigs.Overall)) return false;
                    if (this.SurfacePatternConfigs.Specific != null && !this.SurfacePatternConfigs.Specific.All(eval)) return false;
                }
                if (SurfacePatterns != null)
                {
                    if (!eval(this.SurfacePatterns.Overall)) return false;
                    if (this.SurfacePatterns.Specific != null && !this.SurfacePatterns.Specific.All(eval)) return false;
                }
                if (SurfaceTrees != null)
                {
                    if (!eval(this.SurfaceTrees.Overall)) return false;
                    if (this.SurfaceTrees.Specific != null && !this.SurfaceTrees.Specific.All(eval)) return false;
                }
                if (PlanetContentManagerTrees != null)
                {
                    if (!eval(this.PlanetContentManagerTrees.Overall)) return false;
                    if (this.PlanetContentManagerTrees.Specific != null && !this.PlanetContentManagerTrees.Specific.All(eval)) return false;
                }
                if (BoneModifiers != null)
                {
                    if (!eval(this.BoneModifiers.Overall)) return false;
                    if (this.BoneModifiers.Specific != null && !this.BoneModifiers.Specific.All(eval)) return false;
                }
                if (SnapTemplateBehaviors != null)
                {
                    if (!eval(this.SnapTemplateBehaviors.Overall)) return false;
                    if (this.SnapTemplateBehaviors.Specific != null && !this.SnapTemplateBehaviors.Specific.All(eval)) return false;
                }
                if (Planets != null)
                {
                    if (!eval(this.Planets.Overall)) return false;
                    if (this.Planets.Specific != null && !this.Planets.Specific.All(eval)) return false;
                }
                if (ConditionRecords != null)
                {
                    if (!eval(this.ConditionRecords.Overall)) return false;
                    if (this.ConditionRecords.Specific != null && !this.ConditionRecords.Specific.All(eval)) return false;
                }
                if (PlanetContentManagerBranchNodes != null)
                {
                    if (!eval(this.PlanetContentManagerBranchNodes.Overall)) return false;
                    if (this.PlanetContentManagerBranchNodes.Specific != null && !this.PlanetContentManagerBranchNodes.Specific.All(eval)) return false;
                }
                if (PlanetContentManagerContentNodes != null)
                {
                    if (!eval(this.PlanetContentManagerContentNodes.Overall)) return false;
                    if (this.PlanetContentManagerContentNodes.Specific != null && !this.PlanetContentManagerContentNodes.Specific.All(eval)) return false;
                }
                if (Stars != null)
                {
                    if (!eval(this.Stars.Overall)) return false;
                    if (this.Stars.Specific != null && !this.Stars.Specific.All(eval)) return false;
                }
                if (WWiseEventDatas != null)
                {
                    if (!eval(this.WWiseEventDatas.Overall)) return false;
                    if (this.WWiseEventDatas.Specific != null && !this.WWiseEventDatas.Specific.All(eval)) return false;
                }
                if (ResearchProjects != null)
                {
                    if (!eval(this.ResearchProjects.Overall)) return false;
                    if (this.ResearchProjects.Specific != null && !this.ResearchProjects.Specific.All(eval)) return false;
                }
                if (AimOpticalSightMarkers != null)
                {
                    if (!eval(this.AimOpticalSightMarkers.Overall)) return false;
                    if (this.AimOpticalSightMarkers.Specific != null && !this.AimOpticalSightMarkers.Specific.All(eval)) return false;
                }
                if (AmbienceSets != null)
                {
                    if (!eval(this.AmbienceSets.Overall)) return false;
                    if (this.AmbienceSets.Specific != null && !this.AmbienceSets.Specific.All(eval)) return false;
                }
                if (WeaponBarrelModels != null)
                {
                    if (!eval(this.WeaponBarrelModels.Overall)) return false;
                    if (this.WeaponBarrelModels.Specific != null && !this.WeaponBarrelModels.Specific.All(eval)) return false;
                }
                if (SurfacePatternStyles != null)
                {
                    if (!eval(this.SurfacePatternStyles.Overall)) return false;
                    if (this.SurfacePatternStyles.Specific != null && !this.SurfacePatternStyles.Specific.All(eval)) return false;
                }
                if (LayeredMaterialSwaps != null)
                {
                    if (!eval(this.LayeredMaterialSwaps.Overall)) return false;
                    if (this.LayeredMaterialSwaps.Specific != null && !this.LayeredMaterialSwaps.Specific.All(eval)) return false;
                }
                if (ForceDatas != null)
                {
                    if (!eval(this.ForceDatas.Overall)) return false;
                    if (this.ForceDatas.Specific != null && !this.ForceDatas.Specific.All(eval)) return false;
                }
                if (TerminalMenus != null)
                {
                    if (!eval(this.TerminalMenus.Overall)) return false;
                    if (this.TerminalMenus.Specific != null && !this.TerminalMenus.Specific.All(eval)) return false;
                }
                if (EffectSequences != null)
                {
                    if (!eval(this.EffectSequences.Overall)) return false;
                    if (this.EffectSequences.Specific != null && !this.EffectSequences.Specific.All(eval)) return false;
                }
                if (SecondaryDamageLists != null)
                {
                    if (!eval(this.SecondaryDamageLists.Overall)) return false;
                    if (this.SecondaryDamageLists.Specific != null && !this.SecondaryDamageLists.Specific.All(eval)) return false;
                }
                if (MaterialPaths != null)
                {
                    if (!eval(this.MaterialPaths.Overall)) return false;
                    if (this.MaterialPaths.Specific != null && !this.MaterialPaths.Specific.All(eval)) return false;
                }
                if (Clouds != null)
                {
                    if (!eval(this.Clouds.Overall)) return false;
                    if (this.Clouds.Specific != null && !this.Clouds.Specific.All(eval)) return false;
                }
                if (FogVolumes != null)
                {
                    if (!eval(this.FogVolumes.Overall)) return false;
                    if (this.FogVolumes.Specific != null && !this.FogVolumes.Specific.All(eval)) return false;
                }
                if (WWiseKeywordMappings != null)
                {
                    if (!eval(this.WWiseKeywordMappings.Overall)) return false;
                    if (this.WWiseKeywordMappings.Specific != null && !this.WWiseKeywordMappings.Specific.All(eval)) return false;
                }
                if (LegendaryItems != null)
                {
                    if (!eval(this.LegendaryItems.Overall)) return false;
                    if (this.LegendaryItems.Specific != null && !this.LegendaryItems.Specific.All(eval)) return false;
                }
                if (ParticleSystemDefineCollisions != null)
                {
                    if (!eval(this.ParticleSystemDefineCollisions.Overall)) return false;
                    if (this.ParticleSystemDefineCollisions.Specific != null && !this.ParticleSystemDefineCollisions.Specific.All(eval)) return false;
                }
                if (SunPresets != null)
                {
                    if (!eval(this.SunPresets.Overall)) return false;
                    if (this.SunPresets.Specific != null && !this.SunPresets.Specific.All(eval)) return false;
                }
                if (PhotoModeFeatures != null)
                {
                    if (!eval(this.PhotoModeFeatures.Overall)) return false;
                    if (this.PhotoModeFeatures.Specific != null && !this.PhotoModeFeatures.Specific.All(eval)) return false;
                }
                if (GameplayOptions != null)
                {
                    if (!eval(this.GameplayOptions.Overall)) return false;
                    if (this.GameplayOptions.Specific != null && !this.GameplayOptions.Specific.All(eval)) return false;
                }
                if (GameplayOptionsGroups != null)
                {
                    if (!eval(this.GameplayOptionsGroups.Overall)) return false;
                    if (this.GameplayOptionsGroups.Specific != null && !this.GameplayOptionsGroups.Specific.All(eval)) return false;
                }
                if (TimeOfDays != null)
                {
                    if (!eval(this.TimeOfDays.Overall)) return false;
                    if (this.TimeOfDays.Specific != null && !this.TimeOfDays.Specific.All(eval)) return false;
                }
                if (ActorValueModulations != null)
                {
                    if (!eval(this.ActorValueModulations.Overall)) return false;
                    if (this.ActorValueModulations.Specific != null && !this.ActorValueModulations.Specific.All(eval)) return false;
                }
                if (Challenges != null)
                {
                    if (!eval(this.Challenges.Overall)) return false;
                    if (this.Challenges.Specific != null && !this.Challenges.Specific.All(eval)) return false;
                }
                if (FacialExpressions != null)
                {
                    if (!eval(this.FacialExpressions.Overall)) return false;
                    if (this.FacialExpressions.Specific != null && !this.FacialExpressions.Specific.All(eval)) return false;
                }
                if (PERS != null)
                {
                    if (!eval(this.PERS.Overall)) return false;
                    if (this.PERS.Specific != null && !this.PERS.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null && this.Keywords.Specific.Any(eval)) return true;
                }
                if (FFKW != null)
                {
                    if (eval(this.FFKW.Overall)) return true;
                    if (this.FFKW.Specific != null && this.FFKW.Specific.Any(eval)) return true;
                }
                if (LocationReferenceTypes != null)
                {
                    if (eval(this.LocationReferenceTypes.Overall)) return true;
                    if (this.LocationReferenceTypes.Specific != null && this.LocationReferenceTypes.Specific.Any(eval)) return true;
                }
                if (Actions != null)
                {
                    if (eval(this.Actions.Overall)) return true;
                    if (this.Actions.Specific != null && this.Actions.Specific.Any(eval)) return true;
                }
                if (Transforms != null)
                {
                    if (eval(this.Transforms.Overall)) return true;
                    if (this.Transforms.Specific != null && this.Transforms.Specific.Any(eval)) return true;
                }
                if (TextureSets != null)
                {
                    if (eval(this.TextureSets.Overall)) return true;
                    if (this.TextureSets.Specific != null && this.TextureSets.Specific.Any(eval)) return true;
                }
                if (Globals != null)
                {
                    if (eval(this.Globals.Overall)) return true;
                    if (this.Globals.Specific != null && this.Globals.Specific.Any(eval)) return true;
                }
                if (DamageTypes != null)
                {
                    if (eval(this.DamageTypes.Overall)) return true;
                    if (this.DamageTypes.Specific != null && this.DamageTypes.Specific.Any(eval)) return true;
                }
                if (Classes != null)
                {
                    if (eval(this.Classes.Overall)) return true;
                    if (this.Classes.Specific != null && this.Classes.Specific.Any(eval)) return true;
                }
                if (Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null && this.Factions.Specific.Any(eval)) return true;
                }
                if (AffinityEvents != null)
                {
                    if (eval(this.AffinityEvents.Overall)) return true;
                    if (this.AffinityEvents.Specific != null && this.AffinityEvents.Specific.Any(eval)) return true;
                }
                if (HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null && this.HeadParts.Specific.Any(eval)) return true;
                }
                if (Races != null)
                {
                    if (eval(this.Races.Overall)) return true;
                    if (this.Races.Specific != null && this.Races.Specific.Any(eval)) return true;
                }
                if (SoundMarkers != null)
                {
                    if (eval(this.SoundMarkers.Overall)) return true;
                    if (this.SoundMarkers.Specific != null && this.SoundMarkers.Specific.Any(eval)) return true;
                }
                if (SoundEchoMarkers != null)
                {
                    if (eval(this.SoundEchoMarkers.Overall)) return true;
                    if (this.SoundEchoMarkers.Specific != null && this.SoundEchoMarkers.Specific.Any(eval)) return true;
                }
                if (AcousticSpaces != null)
                {
                    if (eval(this.AcousticSpaces.Overall)) return true;
                    if (this.AcousticSpaces.Specific != null && this.AcousticSpaces.Specific.Any(eval)) return true;
                }
                if (AudioOcclusionPrimitives != null)
                {
                    if (eval(this.AudioOcclusionPrimitives.Overall)) return true;
                    if (this.AudioOcclusionPrimitives.Specific != null && this.AudioOcclusionPrimitives.Specific.Any(eval)) return true;
                }
                if (MagicEffects != null)
                {
                    if (eval(this.MagicEffects.Overall)) return true;
                    if (this.MagicEffects.Specific != null && this.MagicEffects.Specific.Any(eval)) return true;
                }
                if (LandscapeTextures != null)
                {
                    if (eval(this.LandscapeTextures.Overall)) return true;
                    if (this.LandscapeTextures.Specific != null && this.LandscapeTextures.Specific.Any(eval)) return true;
                }
                if (ProjectedDecals != null)
                {
                    if (eval(this.ProjectedDecals.Overall)) return true;
                    if (this.ProjectedDecals.Specific != null && this.ProjectedDecals.Specific.Any(eval)) return true;
                }
                if (ObjectEffects != null)
                {
                    if (eval(this.ObjectEffects.Overall)) return true;
                    if (this.ObjectEffects.Specific != null && this.ObjectEffects.Specific.Any(eval)) return true;
                }
                if (Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null && this.Spells.Specific.Any(eval)) return true;
                }
                if (Activators != null)
                {
                    if (eval(this.Activators.Overall)) return true;
                    if (this.Activators.Specific != null && this.Activators.Specific.Any(eval)) return true;
                }
                if (CurveTables != null)
                {
                    if (eval(this.CurveTables.Overall)) return true;
                    if (this.CurveTables.Specific != null && this.CurveTables.Specific.Any(eval)) return true;
                }
                if (Curve3Ds != null)
                {
                    if (eval(this.Curve3Ds.Overall)) return true;
                    if (this.Curve3Ds.Specific != null && this.Curve3Ds.Specific.Any(eval)) return true;
                }
                if (Armors != null)
                {
                    if (eval(this.Armors.Overall)) return true;
                    if (this.Armors.Specific != null && this.Armors.Specific.Any(eval)) return true;
                }
                if (Books != null)
                {
                    if (eval(this.Books.Overall)) return true;
                    if (this.Books.Specific != null && this.Books.Specific.Any(eval)) return true;
                }
                if (Containers != null)
                {
                    if (eval(this.Containers.Overall)) return true;
                    if (this.Containers.Specific != null && this.Containers.Specific.Any(eval)) return true;
                }
                if (Doors != null)
                {
                    if (eval(this.Doors.Overall)) return true;
                    if (this.Doors.Specific != null && this.Doors.Specific.Any(eval)) return true;
                }
                if (Lights != null)
                {
                    if (eval(this.Lights.Overall)) return true;
                    if (this.Lights.Specific != null && this.Lights.Specific.Any(eval)) return true;
                }
                if (MiscItems != null)
                {
                    if (eval(this.MiscItems.Overall)) return true;
                    if (this.MiscItems.Specific != null && this.MiscItems.Specific.Any(eval)) return true;
                }
                if (Statics != null)
                {
                    if (eval(this.Statics.Overall)) return true;
                    if (this.Statics.Specific != null && this.Statics.Specific.Any(eval)) return true;
                }
                if (StaticCollections != null)
                {
                    if (eval(this.StaticCollections.Overall)) return true;
                    if (this.StaticCollections.Specific != null && this.StaticCollections.Specific.Any(eval)) return true;
                }
                if (PackIns != null)
                {
                    if (eval(this.PackIns.Overall)) return true;
                    if (this.PackIns.Specific != null && this.PackIns.Specific.Any(eval)) return true;
                }
                if (MoveableStatics != null)
                {
                    if (eval(this.MoveableStatics.Overall)) return true;
                    if (this.MoveableStatics.Specific != null && this.MoveableStatics.Specific.Any(eval)) return true;
                }
                if (Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null && this.Grasses.Specific.Any(eval)) return true;
                }
                if (Florae != null)
                {
                    if (eval(this.Florae.Overall)) return true;
                    if (this.Florae.Specific != null && this.Florae.Specific.Any(eval)) return true;
                }
                if (Furniture != null)
                {
                    if (eval(this.Furniture.Overall)) return true;
                    if (this.Furniture.Specific != null && this.Furniture.Specific.Any(eval)) return true;
                }
                if (Weapons != null)
                {
                    if (eval(this.Weapons.Overall)) return true;
                    if (this.Weapons.Specific != null && this.Weapons.Specific.Any(eval)) return true;
                }
                if (Ammunitions != null)
                {
                    if (eval(this.Ammunitions.Overall)) return true;
                    if (this.Ammunitions.Specific != null && this.Ammunitions.Specific.Any(eval)) return true;
                }
                if (Npcs != null)
                {
                    if (eval(this.Npcs.Overall)) return true;
                    if (this.Npcs.Specific != null && this.Npcs.Specific.Any(eval)) return true;
                }
                if (LeveledNpcs != null)
                {
                    if (eval(this.LeveledNpcs.Overall)) return true;
                    if (this.LeveledNpcs.Specific != null && this.LeveledNpcs.Specific.Any(eval)) return true;
                }
                if (LeveledPackIns != null)
                {
                    if (eval(this.LeveledPackIns.Overall)) return true;
                    if (this.LeveledPackIns.Specific != null && this.LeveledPackIns.Specific.Any(eval)) return true;
                }
                if (Keys != null)
                {
                    if (eval(this.Keys.Overall)) return true;
                    if (this.Keys.Specific != null && this.Keys.Specific.Any(eval)) return true;
                }
                if (Ingestibles != null)
                {
                    if (eval(this.Ingestibles.Overall)) return true;
                    if (this.Ingestibles.Specific != null && this.Ingestibles.Specific.Any(eval)) return true;
                }
                if (IdleMarkers != null)
                {
                    if (eval(this.IdleMarkers.Overall)) return true;
                    if (this.IdleMarkers.Specific != null && this.IdleMarkers.Specific.Any(eval)) return true;
                }
                if (BiomeMarkers != null)
                {
                    if (eval(this.BiomeMarkers.Overall)) return true;
                    if (this.BiomeMarkers.Specific != null && this.BiomeMarkers.Specific.Any(eval)) return true;
                }
                if (Notes != null)
                {
                    if (eval(this.Notes.Overall)) return true;
                    if (this.Notes.Specific != null && this.Notes.Specific.Any(eval)) return true;
                }
                if (Projectiles != null)
                {
                    if (eval(this.Projectiles.Overall)) return true;
                    if (this.Projectiles.Specific != null && this.Projectiles.Specific.Any(eval)) return true;
                }
                if (Hazards != null)
                {
                    if (eval(this.Hazards.Overall)) return true;
                    if (this.Hazards.Specific != null && this.Hazards.Specific.Any(eval)) return true;
                }
                if (BendableSplines != null)
                {
                    if (eval(this.BendableSplines.Overall)) return true;
                    if (this.BendableSplines.Specific != null && this.BendableSplines.Specific.Any(eval)) return true;
                }
                if (Terminals != null)
                {
                    if (eval(this.Terminals.Overall)) return true;
                    if (this.Terminals.Specific != null && this.Terminals.Specific.Any(eval)) return true;
                }
                if (LeveledItems != null)
                {
                    if (eval(this.LeveledItems.Overall)) return true;
                    if (this.LeveledItems.Specific != null && this.LeveledItems.Specific.Any(eval)) return true;
                }
                if (GenericBaseFormTemplates != null)
                {
                    if (eval(this.GenericBaseFormTemplates.Overall)) return true;
                    if (this.GenericBaseFormTemplates.Specific != null && this.GenericBaseFormTemplates.Specific.Any(eval)) return true;
                }
                if (GenericBaseForms != null)
                {
                    if (eval(this.GenericBaseForms.Overall)) return true;
                    if (this.GenericBaseForms.Specific != null && this.GenericBaseForms.Specific.Any(eval)) return true;
                }
                if (LeveledBaseForms != null)
                {
                    if (eval(this.LeveledBaseForms.Overall)) return true;
                    if (this.LeveledBaseForms.Specific != null && this.LeveledBaseForms.Specific.Any(eval)) return true;
                }
                if (Weathers != null)
                {
                    if (eval(this.Weathers.Overall)) return true;
                    if (this.Weathers.Specific != null && this.Weathers.Specific.Any(eval)) return true;
                }
                if (WeatherSettings != null)
                {
                    if (eval(this.WeatherSettings.Overall)) return true;
                    if (this.WeatherSettings.Specific != null && this.WeatherSettings.Specific.Any(eval)) return true;
                }
                if (Climates != null)
                {
                    if (eval(this.Climates.Overall)) return true;
                    if (this.Climates.Specific != null && this.Climates.Specific.Any(eval)) return true;
                }
                if (ShaderParticleGeometries != null)
                {
                    if (eval(this.ShaderParticleGeometries.Overall)) return true;
                    if (this.ShaderParticleGeometries.Specific != null && this.ShaderParticleGeometries.Specific.Any(eval)) return true;
                }
                if (Regions != null)
                {
                    if (eval(this.Regions.Overall)) return true;
                    if (this.Regions.Specific != null && this.Regions.Specific.Any(eval)) return true;
                }
                if (NavigationMeshInfoMaps != null)
                {
                    if (eval(this.NavigationMeshInfoMaps.Overall)) return true;
                    if (this.NavigationMeshInfoMaps.Specific != null && this.NavigationMeshInfoMaps.Specific.Any(eval)) return true;
                }
                if (Cells != null)
                {
                    if (eval(this.Cells.Overall)) return true;
                    if (this.Cells.Specific != null && this.Cells.Specific.Any(eval)) return true;
                }
                if (Worldspaces != null)
                {
                    if (eval(this.Worldspaces.Overall)) return true;
                    if (this.Worldspaces.Specific != null && this.Worldspaces.Specific.Any(eval)) return true;
                }
                if (Quests != null)
                {
                    if (eval(this.Quests.Overall)) return true;
                    if (this.Quests.Specific != null && this.Quests.Specific.Any(eval)) return true;
                }
                if (IdleAnimations != null)
                {
                    if (eval(this.IdleAnimations.Overall)) return true;
                    if (this.IdleAnimations.Specific != null && this.IdleAnimations.Specific.Any(eval)) return true;
                }
                if (Packages != null)
                {
                    if (eval(this.Packages.Overall)) return true;
                    if (this.Packages.Specific != null && this.Packages.Specific.Any(eval)) return true;
                }
                if (CombatStyles != null)
                {
                    if (eval(this.CombatStyles.Overall)) return true;
                    if (this.CombatStyles.Specific != null && this.CombatStyles.Specific.Any(eval)) return true;
                }
                if (LoadScreens != null)
                {
                    if (eval(this.LoadScreens.Overall)) return true;
                    if (this.LoadScreens.Specific != null && this.LoadScreens.Specific.Any(eval)) return true;
                }
                if (AnimatedObjects != null)
                {
                    if (eval(this.AnimatedObjects.Overall)) return true;
                    if (this.AnimatedObjects.Specific != null && this.AnimatedObjects.Specific.Any(eval)) return true;
                }
                if (Waters != null)
                {
                    if (eval(this.Waters.Overall)) return true;
                    if (this.Waters.Specific != null && this.Waters.Specific.Any(eval)) return true;
                }
                if (EffectShaders != null)
                {
                    if (eval(this.EffectShaders.Overall)) return true;
                    if (this.EffectShaders.Specific != null && this.EffectShaders.Specific.Any(eval)) return true;
                }
                if (Explosions != null)
                {
                    if (eval(this.Explosions.Overall)) return true;
                    if (this.Explosions.Specific != null && this.Explosions.Specific.Any(eval)) return true;
                }
                if (Debris != null)
                {
                    if (eval(this.Debris.Overall)) return true;
                    if (this.Debris.Specific != null && this.Debris.Specific.Any(eval)) return true;
                }
                if (ImageSpaces != null)
                {
                    if (eval(this.ImageSpaces.Overall)) return true;
                    if (this.ImageSpaces.Specific != null && this.ImageSpaces.Specific.Any(eval)) return true;
                }
                if (ImageSpaceAdapters != null)
                {
                    if (eval(this.ImageSpaceAdapters.Overall)) return true;
                    if (this.ImageSpaceAdapters.Specific != null && this.ImageSpaceAdapters.Specific.Any(eval)) return true;
                }
                if (FormLists != null)
                {
                    if (eval(this.FormLists.Overall)) return true;
                    if (this.FormLists.Specific != null && this.FormLists.Specific.Any(eval)) return true;
                }
                if (Perks != null)
                {
                    if (eval(this.Perks.Overall)) return true;
                    if (this.Perks.Specific != null && this.Perks.Specific.Any(eval)) return true;
                }
                if (BodyParts != null)
                {
                    if (eval(this.BodyParts.Overall)) return true;
                    if (this.BodyParts.Specific != null && this.BodyParts.Specific.Any(eval)) return true;
                }
                if (AddonNodes != null)
                {
                    if (eval(this.AddonNodes.Overall)) return true;
                    if (this.AddonNodes.Specific != null && this.AddonNodes.Specific.Any(eval)) return true;
                }
                if (ActorValueInformation != null)
                {
                    if (eval(this.ActorValueInformation.Overall)) return true;
                    if (this.ActorValueInformation.Specific != null && this.ActorValueInformation.Specific.Any(eval)) return true;
                }
                if (CameraShots != null)
                {
                    if (eval(this.CameraShots.Overall)) return true;
                    if (this.CameraShots.Specific != null && this.CameraShots.Specific.Any(eval)) return true;
                }
                if (CameraPaths != null)
                {
                    if (eval(this.CameraPaths.Overall)) return true;
                    if (this.CameraPaths.Specific != null && this.CameraPaths.Specific.Any(eval)) return true;
                }
                if (VoiceTypes != null)
                {
                    if (eval(this.VoiceTypes.Overall)) return true;
                    if (this.VoiceTypes.Specific != null && this.VoiceTypes.Specific.Any(eval)) return true;
                }
                if (MaterialTypes != null)
                {
                    if (eval(this.MaterialTypes.Overall)) return true;
                    if (this.MaterialTypes.Specific != null && this.MaterialTypes.Specific.Any(eval)) return true;
                }
                if (Impacts != null)
                {
                    if (eval(this.Impacts.Overall)) return true;
                    if (this.Impacts.Specific != null && this.Impacts.Specific.Any(eval)) return true;
                }
                if (ImpactDataSets != null)
                {
                    if (eval(this.ImpactDataSets.Overall)) return true;
                    if (this.ImpactDataSets.Specific != null && this.ImpactDataSets.Specific.Any(eval)) return true;
                }
                if (ArmorAddons != null)
                {
                    if (eval(this.ArmorAddons.Overall)) return true;
                    if (this.ArmorAddons.Specific != null && this.ArmorAddons.Specific.Any(eval)) return true;
                }
                if (Locations != null)
                {
                    if (eval(this.Locations.Overall)) return true;
                    if (this.Locations.Specific != null && this.Locations.Specific.Any(eval)) return true;
                }
                if (Messages != null)
                {
                    if (eval(this.Messages.Overall)) return true;
                    if (this.Messages.Specific != null && this.Messages.Specific.Any(eval)) return true;
                }
                if (DefaultObjectManagers != null)
                {
                    if (eval(this.DefaultObjectManagers.Overall)) return true;
                    if (this.DefaultObjectManagers.Specific != null && this.DefaultObjectManagers.Specific.Any(eval)) return true;
                }
                if (DefaultObjects != null)
                {
                    if (eval(this.DefaultObjects.Overall)) return true;
                    if (this.DefaultObjects.Specific != null && this.DefaultObjects.Specific.Any(eval)) return true;
                }
                if (LightingTemplates != null)
                {
                    if (eval(this.LightingTemplates.Overall)) return true;
                    if (this.LightingTemplates.Specific != null && this.LightingTemplates.Specific.Any(eval)) return true;
                }
                if (MusicTypes != null)
                {
                    if (eval(this.MusicTypes.Overall)) return true;
                    if (this.MusicTypes.Specific != null && this.MusicTypes.Specific.Any(eval)) return true;
                }
                if (Footsteps != null)
                {
                    if (eval(this.Footsteps.Overall)) return true;
                    if (this.Footsteps.Specific != null && this.Footsteps.Specific.Any(eval)) return true;
                }
                if (FootstepSets != null)
                {
                    if (eval(this.FootstepSets.Overall)) return true;
                    if (this.FootstepSets.Specific != null && this.FootstepSets.Specific.Any(eval)) return true;
                }
                if (StoryManagerBranchNodes != null)
                {
                    if (eval(this.StoryManagerBranchNodes.Overall)) return true;
                    if (this.StoryManagerBranchNodes.Specific != null && this.StoryManagerBranchNodes.Specific.Any(eval)) return true;
                }
                if (StoryManagerQuestNodes != null)
                {
                    if (eval(this.StoryManagerQuestNodes.Overall)) return true;
                    if (this.StoryManagerQuestNodes.Specific != null && this.StoryManagerQuestNodes.Specific.Any(eval)) return true;
                }
                if (StoryManagerEventNodes != null)
                {
                    if (eval(this.StoryManagerEventNodes.Overall)) return true;
                    if (this.StoryManagerEventNodes.Specific != null && this.StoryManagerEventNodes.Specific.Any(eval)) return true;
                }
                if (MusicTracks != null)
                {
                    if (eval(this.MusicTracks.Overall)) return true;
                    if (this.MusicTracks.Specific != null && this.MusicTracks.Specific.Any(eval)) return true;
                }
                if (EquipTypes != null)
                {
                    if (eval(this.EquipTypes.Overall)) return true;
                    if (this.EquipTypes.Specific != null && this.EquipTypes.Specific.Any(eval)) return true;
                }
                if (Outfits != null)
                {
                    if (eval(this.Outfits.Overall)) return true;
                    if (this.Outfits.Specific != null && this.Outfits.Specific.Any(eval)) return true;
                }
                if (ArtObjects != null)
                {
                    if (eval(this.ArtObjects.Overall)) return true;
                    if (this.ArtObjects.Specific != null && this.ArtObjects.Specific.Any(eval)) return true;
                }
                if (MovementTypes != null)
                {
                    if (eval(this.MovementTypes.Overall)) return true;
                    if (this.MovementTypes.Specific != null && this.MovementTypes.Specific.Any(eval)) return true;
                }
                if (CollisionLayers != null)
                {
                    if (eval(this.CollisionLayers.Overall)) return true;
                    if (this.CollisionLayers.Specific != null && this.CollisionLayers.Specific.Any(eval)) return true;
                }
                if (Colors != null)
                {
                    if (eval(this.Colors.Overall)) return true;
                    if (this.Colors.Specific != null && this.Colors.Specific.Any(eval)) return true;
                }
                if (ReverbParameters != null)
                {
                    if (eval(this.ReverbParameters.Overall)) return true;
                    if (this.ReverbParameters.Specific != null && this.ReverbParameters.Specific.Any(eval)) return true;
                }
                if (ReferenceGroups != null)
                {
                    if (eval(this.ReferenceGroups.Overall)) return true;
                    if (this.ReferenceGroups.Specific != null && this.ReferenceGroups.Specific.Any(eval)) return true;
                }
                if (AimModels != null)
                {
                    if (eval(this.AimModels.Overall)) return true;
                    if (this.AimModels.Specific != null && this.AimModels.Specific.Any(eval)) return true;
                }
                if (AimAssistModels != null)
                {
                    if (eval(this.AimAssistModels.Overall)) return true;
                    if (this.AimAssistModels.Specific != null && this.AimAssistModels.Specific.Any(eval)) return true;
                }
                if (MeleeAimAssistModels != null)
                {
                    if (eval(this.MeleeAimAssistModels.Overall)) return true;
                    if (this.MeleeAimAssistModels.Specific != null && this.MeleeAimAssistModels.Specific.Any(eval)) return true;
                }
                if (Layers != null)
                {
                    if (eval(this.Layers.Overall)) return true;
                    if (this.Layers.Specific != null && this.Layers.Specific.Any(eval)) return true;
                }
                if (ConstructibleObjects != null)
                {
                    if (eval(this.ConstructibleObjects.Overall)) return true;
                    if (this.ConstructibleObjects.Specific != null && this.ConstructibleObjects.Specific.Any(eval)) return true;
                }
                if (ObjectModifications != null)
                {
                    if (eval(this.ObjectModifications.Overall)) return true;
                    if (this.ObjectModifications.Specific != null && this.ObjectModifications.Specific.Any(eval)) return true;
                }
                if (Zooms != null)
                {
                    if (eval(this.Zooms.Overall)) return true;
                    if (this.Zooms.Specific != null && this.Zooms.Specific.Any(eval)) return true;
                }
                if (InstanceNamingRules != null)
                {
                    if (eval(this.InstanceNamingRules.Overall)) return true;
                    if (this.InstanceNamingRules.Specific != null && this.InstanceNamingRules.Specific.Any(eval)) return true;
                }
                if (SoundKeywordMappings != null)
                {
                    if (eval(this.SoundKeywordMappings.Overall)) return true;
                    if (this.SoundKeywordMappings.Specific != null && this.SoundKeywordMappings.Specific.Any(eval)) return true;
                }
                if (AttractionRules != null)
                {
                    if (eval(this.AttractionRules.Overall)) return true;
                    if (this.AttractionRules.Specific != null && this.AttractionRules.Specific.Any(eval)) return true;
                }
                if (SceneCollections != null)
                {
                    if (eval(this.SceneCollections.Overall)) return true;
                    if (this.SceneCollections.Specific != null && this.SceneCollections.Specific.Any(eval)) return true;
                }
                if (AnimationSoundTagSets != null)
                {
                    if (eval(this.AnimationSoundTagSets.Overall)) return true;
                    if (this.AnimationSoundTagSets.Specific != null && this.AnimationSoundTagSets.Specific.Any(eval)) return true;
                }
                if (Resources != null)
                {
                    if (eval(this.Resources.Overall)) return true;
                    if (this.Resources.Specific != null && this.Resources.Specific.Any(eval)) return true;
                }
                if (Biomes != null)
                {
                    if (eval(this.Biomes.Overall)) return true;
                    if (this.Biomes.Specific != null && this.Biomes.Specific.Any(eval)) return true;
                }
                if (NavigationMeshObstacleCoverManagers != null)
                {
                    if (eval(this.NavigationMeshObstacleCoverManagers.Overall)) return true;
                    if (this.NavigationMeshObstacleCoverManagers.Specific != null && this.NavigationMeshObstacleCoverManagers.Specific.Any(eval)) return true;
                }
                if (LensFlares != null)
                {
                    if (eval(this.LensFlares.Overall)) return true;
                    if (this.LensFlares.Specific != null && this.LensFlares.Specific.Any(eval)) return true;
                }
                if (ObjectVisibilityManagers != null)
                {
                    if (eval(this.ObjectVisibilityManagers.Overall)) return true;
                    if (this.ObjectVisibilityManagers.Specific != null && this.ObjectVisibilityManagers.Specific.Any(eval)) return true;
                }
                if (SnapTemplateNodes != null)
                {
                    if (eval(this.SnapTemplateNodes.Overall)) return true;
                    if (this.SnapTemplateNodes.Specific != null && this.SnapTemplateNodes.Specific.Any(eval)) return true;
                }
                if (SnapTemplates != null)
                {
                    if (eval(this.SnapTemplates.Overall)) return true;
                    if (this.SnapTemplates.Specific != null && this.SnapTemplates.Specific.Any(eval)) return true;
                }
                if (GroundCovers != null)
                {
                    if (eval(this.GroundCovers.Overall)) return true;
                    if (this.GroundCovers.Specific != null && this.GroundCovers.Specific.Any(eval)) return true;
                }
                if (MorphableObjects != null)
                {
                    if (eval(this.MorphableObjects.Overall)) return true;
                    if (this.MorphableObjects.Specific != null && this.MorphableObjects.Specific.Any(eval)) return true;
                }
                if (Traversals != null)
                {
                    if (eval(this.Traversals.Overall)) return true;
                    if (this.Traversals.Specific != null && this.Traversals.Specific.Any(eval)) return true;
                }
                if (ResourceGenerationData != null)
                {
                    if (eval(this.ResourceGenerationData.Overall)) return true;
                    if (this.ResourceGenerationData.Specific != null && this.ResourceGenerationData.Specific.Any(eval)) return true;
                }
                if (BiomeSwaps != null)
                {
                    if (eval(this.BiomeSwaps.Overall)) return true;
                    if (this.BiomeSwaps.Specific != null && this.BiomeSwaps.Specific.Any(eval)) return true;
                }
                if (Atmospheres != null)
                {
                    if (eval(this.Atmospheres.Overall)) return true;
                    if (this.Atmospheres.Specific != null && this.Atmospheres.Specific.Any(eval)) return true;
                }
                if (LeveledSpaceCells != null)
                {
                    if (eval(this.LeveledSpaceCells.Overall)) return true;
                    if (this.LeveledSpaceCells.Specific != null && this.LeveledSpaceCells.Specific.Any(eval)) return true;
                }
                if (SpeechChallenges != null)
                {
                    if (eval(this.SpeechChallenges.Overall)) return true;
                    if (this.SpeechChallenges.Specific != null && this.SpeechChallenges.Specific.Any(eval)) return true;
                }
                if (AimAssistPoses != null)
                {
                    if (eval(this.AimAssistPoses.Overall)) return true;
                    if (this.AimAssistPoses.Specific != null && this.AimAssistPoses.Specific.Any(eval)) return true;
                }
                if (VolumetricLightings != null)
                {
                    if (eval(this.VolumetricLightings.Overall)) return true;
                    if (this.VolumetricLightings.Specific != null && this.VolumetricLightings.Specific.Any(eval)) return true;
                }
                if (SurfaceBlocks != null)
                {
                    if (eval(this.SurfaceBlocks.Overall)) return true;
                    if (this.SurfaceBlocks.Specific != null && this.SurfaceBlocks.Specific.Any(eval)) return true;
                }
                if (SurfacePatternConfigs != null)
                {
                    if (eval(this.SurfacePatternConfigs.Overall)) return true;
                    if (this.SurfacePatternConfigs.Specific != null && this.SurfacePatternConfigs.Specific.Any(eval)) return true;
                }
                if (SurfacePatterns != null)
                {
                    if (eval(this.SurfacePatterns.Overall)) return true;
                    if (this.SurfacePatterns.Specific != null && this.SurfacePatterns.Specific.Any(eval)) return true;
                }
                if (SurfaceTrees != null)
                {
                    if (eval(this.SurfaceTrees.Overall)) return true;
                    if (this.SurfaceTrees.Specific != null && this.SurfaceTrees.Specific.Any(eval)) return true;
                }
                if (PlanetContentManagerTrees != null)
                {
                    if (eval(this.PlanetContentManagerTrees.Overall)) return true;
                    if (this.PlanetContentManagerTrees.Specific != null && this.PlanetContentManagerTrees.Specific.Any(eval)) return true;
                }
                if (BoneModifiers != null)
                {
                    if (eval(this.BoneModifiers.Overall)) return true;
                    if (this.BoneModifiers.Specific != null && this.BoneModifiers.Specific.Any(eval)) return true;
                }
                if (SnapTemplateBehaviors != null)
                {
                    if (eval(this.SnapTemplateBehaviors.Overall)) return true;
                    if (this.SnapTemplateBehaviors.Specific != null && this.SnapTemplateBehaviors.Specific.Any(eval)) return true;
                }
                if (Planets != null)
                {
                    if (eval(this.Planets.Overall)) return true;
                    if (this.Planets.Specific != null && this.Planets.Specific.Any(eval)) return true;
                }
                if (ConditionRecords != null)
                {
                    if (eval(this.ConditionRecords.Overall)) return true;
                    if (this.ConditionRecords.Specific != null && this.ConditionRecords.Specific.Any(eval)) return true;
                }
                if (PlanetContentManagerBranchNodes != null)
                {
                    if (eval(this.PlanetContentManagerBranchNodes.Overall)) return true;
                    if (this.PlanetContentManagerBranchNodes.Specific != null && this.PlanetContentManagerBranchNodes.Specific.Any(eval)) return true;
                }
                if (PlanetContentManagerContentNodes != null)
                {
                    if (eval(this.PlanetContentManagerContentNodes.Overall)) return true;
                    if (this.PlanetContentManagerContentNodes.Specific != null && this.PlanetContentManagerContentNodes.Specific.Any(eval)) return true;
                }
                if (Stars != null)
                {
                    if (eval(this.Stars.Overall)) return true;
                    if (this.Stars.Specific != null && this.Stars.Specific.Any(eval)) return true;
                }
                if (WWiseEventDatas != null)
                {
                    if (eval(this.WWiseEventDatas.Overall)) return true;
                    if (this.WWiseEventDatas.Specific != null && this.WWiseEventDatas.Specific.Any(eval)) return true;
                }
                if (ResearchProjects != null)
                {
                    if (eval(this.ResearchProjects.Overall)) return true;
                    if (this.ResearchProjects.Specific != null && this.ResearchProjects.Specific.Any(eval)) return true;
                }
                if (AimOpticalSightMarkers != null)
                {
                    if (eval(this.AimOpticalSightMarkers.Overall)) return true;
                    if (this.AimOpticalSightMarkers.Specific != null && this.AimOpticalSightMarkers.Specific.Any(eval)) return true;
                }
                if (AmbienceSets != null)
                {
                    if (eval(this.AmbienceSets.Overall)) return true;
                    if (this.AmbienceSets.Specific != null && this.AmbienceSets.Specific.Any(eval)) return true;
                }
                if (WeaponBarrelModels != null)
                {
                    if (eval(this.WeaponBarrelModels.Overall)) return true;
                    if (this.WeaponBarrelModels.Specific != null && this.WeaponBarrelModels.Specific.Any(eval)) return true;
                }
                if (SurfacePatternStyles != null)
                {
                    if (eval(this.SurfacePatternStyles.Overall)) return true;
                    if (this.SurfacePatternStyles.Specific != null && this.SurfacePatternStyles.Specific.Any(eval)) return true;
                }
                if (LayeredMaterialSwaps != null)
                {
                    if (eval(this.LayeredMaterialSwaps.Overall)) return true;
                    if (this.LayeredMaterialSwaps.Specific != null && this.LayeredMaterialSwaps.Specific.Any(eval)) return true;
                }
                if (ForceDatas != null)
                {
                    if (eval(this.ForceDatas.Overall)) return true;
                    if (this.ForceDatas.Specific != null && this.ForceDatas.Specific.Any(eval)) return true;
                }
                if (TerminalMenus != null)
                {
                    if (eval(this.TerminalMenus.Overall)) return true;
                    if (this.TerminalMenus.Specific != null && this.TerminalMenus.Specific.Any(eval)) return true;
                }
                if (EffectSequences != null)
                {
                    if (eval(this.EffectSequences.Overall)) return true;
                    if (this.EffectSequences.Specific != null && this.EffectSequences.Specific.Any(eval)) return true;
                }
                if (SecondaryDamageLists != null)
                {
                    if (eval(this.SecondaryDamageLists.Overall)) return true;
                    if (this.SecondaryDamageLists.Specific != null && this.SecondaryDamageLists.Specific.Any(eval)) return true;
                }
                if (MaterialPaths != null)
                {
                    if (eval(this.MaterialPaths.Overall)) return true;
                    if (this.MaterialPaths.Specific != null && this.MaterialPaths.Specific.Any(eval)) return true;
                }
                if (Clouds != null)
                {
                    if (eval(this.Clouds.Overall)) return true;
                    if (this.Clouds.Specific != null && this.Clouds.Specific.Any(eval)) return true;
                }
                if (FogVolumes != null)
                {
                    if (eval(this.FogVolumes.Overall)) return true;
                    if (this.FogVolumes.Specific != null && this.FogVolumes.Specific.Any(eval)) return true;
                }
                if (WWiseKeywordMappings != null)
                {
                    if (eval(this.WWiseKeywordMappings.Overall)) return true;
                    if (this.WWiseKeywordMappings.Specific != null && this.WWiseKeywordMappings.Specific.Any(eval)) return true;
                }
                if (LegendaryItems != null)
                {
                    if (eval(this.LegendaryItems.Overall)) return true;
                    if (this.LegendaryItems.Specific != null && this.LegendaryItems.Specific.Any(eval)) return true;
                }
                if (ParticleSystemDefineCollisions != null)
                {
                    if (eval(this.ParticleSystemDefineCollisions.Overall)) return true;
                    if (this.ParticleSystemDefineCollisions.Specific != null && this.ParticleSystemDefineCollisions.Specific.Any(eval)) return true;
                }
                if (SunPresets != null)
                {
                    if (eval(this.SunPresets.Overall)) return true;
                    if (this.SunPresets.Specific != null && this.SunPresets.Specific.Any(eval)) return true;
                }
                if (PhotoModeFeatures != null)
                {
                    if (eval(this.PhotoModeFeatures.Overall)) return true;
                    if (this.PhotoModeFeatures.Specific != null && this.PhotoModeFeatures.Specific.Any(eval)) return true;
                }
                if (GameplayOptions != null)
                {
                    if (eval(this.GameplayOptions.Overall)) return true;
                    if (this.GameplayOptions.Specific != null && this.GameplayOptions.Specific.Any(eval)) return true;
                }
                if (GameplayOptionsGroups != null)
                {
                    if (eval(this.GameplayOptionsGroups.Overall)) return true;
                    if (this.GameplayOptionsGroups.Specific != null && this.GameplayOptionsGroups.Specific.Any(eval)) return true;
                }
                if (TimeOfDays != null)
                {
                    if (eval(this.TimeOfDays.Overall)) return true;
                    if (this.TimeOfDays.Specific != null && this.TimeOfDays.Specific.Any(eval)) return true;
                }
                if (ActorValueModulations != null)
                {
                    if (eval(this.ActorValueModulations.Overall)) return true;
                    if (this.ActorValueModulations.Specific != null && this.ActorValueModulations.Specific.Any(eval)) return true;
                }
                if (Challenges != null)
                {
                    if (eval(this.Challenges.Overall)) return true;
                    if (this.Challenges.Specific != null && this.Challenges.Specific.Any(eval)) return true;
                }
                if (FacialExpressions != null)
                {
                    if (eval(this.FacialExpressions.Overall)) return true;
                    if (this.FacialExpressions.Specific != null && this.FacialExpressions.Specific.Any(eval)) return true;
                }
                if (PERS != null)
                {
                    if (eval(this.PERS.Overall)) return true;
                    if (this.PERS.Specific != null && this.PERS.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StarfieldMod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, StarfieldModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.Keywords = this.Keywords == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Keywords.Overall), this.Keywords.Specific?.Translate(eval));
                obj.FFKW = this.FFKW == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.FFKW.Overall), this.FFKW.Specific?.Translate(eval));
                obj.LocationReferenceTypes = this.LocationReferenceTypes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LocationReferenceTypes.Overall), this.LocationReferenceTypes.Specific?.Translate(eval));
                obj.Actions = this.Actions == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Actions.Overall), this.Actions.Specific?.Translate(eval));
                obj.Transforms = this.Transforms == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Transforms.Overall), this.Transforms.Specific?.Translate(eval));
                obj.TextureSets = this.TextureSets == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.TextureSets.Overall), this.TextureSets.Specific?.Translate(eval));
                obj.Globals = this.Globals == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
                obj.DamageTypes = this.DamageTypes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.DamageTypes.Overall), this.DamageTypes.Specific?.Translate(eval));
                obj.Classes = this.Classes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Classes.Overall), this.Classes.Specific?.Translate(eval));
                obj.Factions = this.Factions == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Factions.Overall), this.Factions.Specific?.Translate(eval));
                obj.AffinityEvents = this.AffinityEvents == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AffinityEvents.Overall), this.AffinityEvents.Specific?.Translate(eval));
                obj.HeadParts = this.HeadParts == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.HeadParts.Overall), this.HeadParts.Specific?.Translate(eval));
                obj.Races = this.Races == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Races.Overall), this.Races.Specific?.Translate(eval));
                obj.SoundMarkers = this.SoundMarkers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SoundMarkers.Overall), this.SoundMarkers.Specific?.Translate(eval));
                obj.SoundEchoMarkers = this.SoundEchoMarkers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SoundEchoMarkers.Overall), this.SoundEchoMarkers.Specific?.Translate(eval));
                obj.AcousticSpaces = this.AcousticSpaces == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AcousticSpaces.Overall), this.AcousticSpaces.Specific?.Translate(eval));
                obj.AudioOcclusionPrimitives = this.AudioOcclusionPrimitives == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AudioOcclusionPrimitives.Overall), this.AudioOcclusionPrimitives.Specific?.Translate(eval));
                obj.MagicEffects = this.MagicEffects == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.MagicEffects.Overall), this.MagicEffects.Specific?.Translate(eval));
                obj.LandscapeTextures = this.LandscapeTextures == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LandscapeTextures.Overall), this.LandscapeTextures.Specific?.Translate(eval));
                obj.ProjectedDecals = this.ProjectedDecals == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ProjectedDecals.Overall), this.ProjectedDecals.Specific?.Translate(eval));
                obj.ObjectEffects = this.ObjectEffects == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ObjectEffects.Overall), this.ObjectEffects.Specific?.Translate(eval));
                obj.Spells = this.Spells == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Spells.Overall), this.Spells.Specific?.Translate(eval));
                obj.Activators = this.Activators == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Activators.Overall), this.Activators.Specific?.Translate(eval));
                obj.CurveTables = this.CurveTables == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.CurveTables.Overall), this.CurveTables.Specific?.Translate(eval));
                obj.Curve3Ds = this.Curve3Ds == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Curve3Ds.Overall), this.Curve3Ds.Specific?.Translate(eval));
                obj.Armors = this.Armors == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Armors.Overall), this.Armors.Specific?.Translate(eval));
                obj.Books = this.Books == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Books.Overall), this.Books.Specific?.Translate(eval));
                obj.Containers = this.Containers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Containers.Overall), this.Containers.Specific?.Translate(eval));
                obj.Doors = this.Doors == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Doors.Overall), this.Doors.Specific?.Translate(eval));
                obj.Lights = this.Lights == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Lights.Overall), this.Lights.Specific?.Translate(eval));
                obj.MiscItems = this.MiscItems == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.MiscItems.Overall), this.MiscItems.Specific?.Translate(eval));
                obj.Statics = this.Statics == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Statics.Overall), this.Statics.Specific?.Translate(eval));
                obj.StaticCollections = this.StaticCollections == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.StaticCollections.Overall), this.StaticCollections.Specific?.Translate(eval));
                obj.PackIns = this.PackIns == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.PackIns.Overall), this.PackIns.Specific?.Translate(eval));
                obj.MoveableStatics = this.MoveableStatics == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.MoveableStatics.Overall), this.MoveableStatics.Specific?.Translate(eval));
                obj.Grasses = this.Grasses == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Grasses.Overall), this.Grasses.Specific?.Translate(eval));
                obj.Florae = this.Florae == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Florae.Overall), this.Florae.Specific?.Translate(eval));
                obj.Furniture = this.Furniture == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Furniture.Overall), this.Furniture.Specific?.Translate(eval));
                obj.Weapons = this.Weapons == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Weapons.Overall), this.Weapons.Specific?.Translate(eval));
                obj.Ammunitions = this.Ammunitions == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Ammunitions.Overall), this.Ammunitions.Specific?.Translate(eval));
                obj.Npcs = this.Npcs == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Npcs.Overall), this.Npcs.Specific?.Translate(eval));
                obj.LeveledNpcs = this.LeveledNpcs == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LeveledNpcs.Overall), this.LeveledNpcs.Specific?.Translate(eval));
                obj.LeveledPackIns = this.LeveledPackIns == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LeveledPackIns.Overall), this.LeveledPackIns.Specific?.Translate(eval));
                obj.Keys = this.Keys == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Keys.Overall), this.Keys.Specific?.Translate(eval));
                obj.Ingestibles = this.Ingestibles == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Ingestibles.Overall), this.Ingestibles.Specific?.Translate(eval));
                obj.IdleMarkers = this.IdleMarkers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.IdleMarkers.Overall), this.IdleMarkers.Specific?.Translate(eval));
                obj.BiomeMarkers = this.BiomeMarkers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.BiomeMarkers.Overall), this.BiomeMarkers.Specific?.Translate(eval));
                obj.Notes = this.Notes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Notes.Overall), this.Notes.Specific?.Translate(eval));
                obj.Projectiles = this.Projectiles == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Projectiles.Overall), this.Projectiles.Specific?.Translate(eval));
                obj.Hazards = this.Hazards == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Hazards.Overall), this.Hazards.Specific?.Translate(eval));
                obj.BendableSplines = this.BendableSplines == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.BendableSplines.Overall), this.BendableSplines.Specific?.Translate(eval));
                obj.Terminals = this.Terminals == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Terminals.Overall), this.Terminals.Specific?.Translate(eval));
                obj.LeveledItems = this.LeveledItems == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LeveledItems.Overall), this.LeveledItems.Specific?.Translate(eval));
                obj.GenericBaseFormTemplates = this.GenericBaseFormTemplates == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.GenericBaseFormTemplates.Overall), this.GenericBaseFormTemplates.Specific?.Translate(eval));
                obj.GenericBaseForms = this.GenericBaseForms == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.GenericBaseForms.Overall), this.GenericBaseForms.Specific?.Translate(eval));
                obj.LeveledBaseForms = this.LeveledBaseForms == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LeveledBaseForms.Overall), this.LeveledBaseForms.Specific?.Translate(eval));
                obj.Weathers = this.Weathers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Weathers.Overall), this.Weathers.Specific?.Translate(eval));
                obj.WeatherSettings = this.WeatherSettings == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.WeatherSettings.Overall), this.WeatherSettings.Specific?.Translate(eval));
                obj.Climates = this.Climates == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Climates.Overall), this.Climates.Specific?.Translate(eval));
                obj.ShaderParticleGeometries = this.ShaderParticleGeometries == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ShaderParticleGeometries.Overall), this.ShaderParticleGeometries.Specific?.Translate(eval));
                obj.Regions = this.Regions == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Regions.Overall), this.Regions.Specific?.Translate(eval));
                obj.NavigationMeshInfoMaps = this.NavigationMeshInfoMaps == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.NavigationMeshInfoMaps.Overall), this.NavigationMeshInfoMaps.Specific?.Translate(eval));
                obj.Cells = this.Cells == null ? null : new MaskItem<R, StarfieldListGroup.Mask<R>?>(eval(this.Cells.Overall), this.Cells.Specific?.Translate(eval));
                obj.Worldspaces = this.Worldspaces == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Worldspaces.Overall), this.Worldspaces.Specific?.Translate(eval));
                obj.Quests = this.Quests == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Quests.Overall), this.Quests.Specific?.Translate(eval));
                obj.IdleAnimations = this.IdleAnimations == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.IdleAnimations.Overall), this.IdleAnimations.Specific?.Translate(eval));
                obj.Packages = this.Packages == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Packages.Overall), this.Packages.Specific?.Translate(eval));
                obj.CombatStyles = this.CombatStyles == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.CombatStyles.Overall), this.CombatStyles.Specific?.Translate(eval));
                obj.LoadScreens = this.LoadScreens == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LoadScreens.Overall), this.LoadScreens.Specific?.Translate(eval));
                obj.AnimatedObjects = this.AnimatedObjects == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AnimatedObjects.Overall), this.AnimatedObjects.Specific?.Translate(eval));
                obj.Waters = this.Waters == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Waters.Overall), this.Waters.Specific?.Translate(eval));
                obj.EffectShaders = this.EffectShaders == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.EffectShaders.Overall), this.EffectShaders.Specific?.Translate(eval));
                obj.Explosions = this.Explosions == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Explosions.Overall), this.Explosions.Specific?.Translate(eval));
                obj.Debris = this.Debris == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Debris.Overall), this.Debris.Specific?.Translate(eval));
                obj.ImageSpaces = this.ImageSpaces == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ImageSpaces.Overall), this.ImageSpaces.Specific?.Translate(eval));
                obj.ImageSpaceAdapters = this.ImageSpaceAdapters == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ImageSpaceAdapters.Overall), this.ImageSpaceAdapters.Specific?.Translate(eval));
                obj.FormLists = this.FormLists == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.FormLists.Overall), this.FormLists.Specific?.Translate(eval));
                obj.Perks = this.Perks == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Perks.Overall), this.Perks.Specific?.Translate(eval));
                obj.BodyParts = this.BodyParts == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.BodyParts.Overall), this.BodyParts.Specific?.Translate(eval));
                obj.AddonNodes = this.AddonNodes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AddonNodes.Overall), this.AddonNodes.Specific?.Translate(eval));
                obj.ActorValueInformation = this.ActorValueInformation == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ActorValueInformation.Overall), this.ActorValueInformation.Specific?.Translate(eval));
                obj.CameraShots = this.CameraShots == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.CameraShots.Overall), this.CameraShots.Specific?.Translate(eval));
                obj.CameraPaths = this.CameraPaths == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.CameraPaths.Overall), this.CameraPaths.Specific?.Translate(eval));
                obj.VoiceTypes = this.VoiceTypes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.VoiceTypes.Overall), this.VoiceTypes.Specific?.Translate(eval));
                obj.MaterialTypes = this.MaterialTypes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.MaterialTypes.Overall), this.MaterialTypes.Specific?.Translate(eval));
                obj.Impacts = this.Impacts == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Impacts.Overall), this.Impacts.Specific?.Translate(eval));
                obj.ImpactDataSets = this.ImpactDataSets == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ImpactDataSets.Overall), this.ImpactDataSets.Specific?.Translate(eval));
                obj.ArmorAddons = this.ArmorAddons == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ArmorAddons.Overall), this.ArmorAddons.Specific?.Translate(eval));
                obj.Locations = this.Locations == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Locations.Overall), this.Locations.Specific?.Translate(eval));
                obj.Messages = this.Messages == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Messages.Overall), this.Messages.Specific?.Translate(eval));
                obj.DefaultObjectManagers = this.DefaultObjectManagers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.DefaultObjectManagers.Overall), this.DefaultObjectManagers.Specific?.Translate(eval));
                obj.DefaultObjects = this.DefaultObjects == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.DefaultObjects.Overall), this.DefaultObjects.Specific?.Translate(eval));
                obj.LightingTemplates = this.LightingTemplates == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LightingTemplates.Overall), this.LightingTemplates.Specific?.Translate(eval));
                obj.MusicTypes = this.MusicTypes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.MusicTypes.Overall), this.MusicTypes.Specific?.Translate(eval));
                obj.Footsteps = this.Footsteps == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Footsteps.Overall), this.Footsteps.Specific?.Translate(eval));
                obj.FootstepSets = this.FootstepSets == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.FootstepSets.Overall), this.FootstepSets.Specific?.Translate(eval));
                obj.StoryManagerBranchNodes = this.StoryManagerBranchNodes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.StoryManagerBranchNodes.Overall), this.StoryManagerBranchNodes.Specific?.Translate(eval));
                obj.StoryManagerQuestNodes = this.StoryManagerQuestNodes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.StoryManagerQuestNodes.Overall), this.StoryManagerQuestNodes.Specific?.Translate(eval));
                obj.StoryManagerEventNodes = this.StoryManagerEventNodes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.StoryManagerEventNodes.Overall), this.StoryManagerEventNodes.Specific?.Translate(eval));
                obj.MusicTracks = this.MusicTracks == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.MusicTracks.Overall), this.MusicTracks.Specific?.Translate(eval));
                obj.EquipTypes = this.EquipTypes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.EquipTypes.Overall), this.EquipTypes.Specific?.Translate(eval));
                obj.Outfits = this.Outfits == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Outfits.Overall), this.Outfits.Specific?.Translate(eval));
                obj.ArtObjects = this.ArtObjects == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ArtObjects.Overall), this.ArtObjects.Specific?.Translate(eval));
                obj.MovementTypes = this.MovementTypes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.MovementTypes.Overall), this.MovementTypes.Specific?.Translate(eval));
                obj.CollisionLayers = this.CollisionLayers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.CollisionLayers.Overall), this.CollisionLayers.Specific?.Translate(eval));
                obj.Colors = this.Colors == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Colors.Overall), this.Colors.Specific?.Translate(eval));
                obj.ReverbParameters = this.ReverbParameters == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ReverbParameters.Overall), this.ReverbParameters.Specific?.Translate(eval));
                obj.ReferenceGroups = this.ReferenceGroups == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ReferenceGroups.Overall), this.ReferenceGroups.Specific?.Translate(eval));
                obj.AimModels = this.AimModels == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AimModels.Overall), this.AimModels.Specific?.Translate(eval));
                obj.AimAssistModels = this.AimAssistModels == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AimAssistModels.Overall), this.AimAssistModels.Specific?.Translate(eval));
                obj.MeleeAimAssistModels = this.MeleeAimAssistModels == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.MeleeAimAssistModels.Overall), this.MeleeAimAssistModels.Specific?.Translate(eval));
                obj.Layers = this.Layers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Layers.Overall), this.Layers.Specific?.Translate(eval));
                obj.ConstructibleObjects = this.ConstructibleObjects == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ConstructibleObjects.Overall), this.ConstructibleObjects.Specific?.Translate(eval));
                obj.ObjectModifications = this.ObjectModifications == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ObjectModifications.Overall), this.ObjectModifications.Specific?.Translate(eval));
                obj.Zooms = this.Zooms == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Zooms.Overall), this.Zooms.Specific?.Translate(eval));
                obj.InstanceNamingRules = this.InstanceNamingRules == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.InstanceNamingRules.Overall), this.InstanceNamingRules.Specific?.Translate(eval));
                obj.SoundKeywordMappings = this.SoundKeywordMappings == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SoundKeywordMappings.Overall), this.SoundKeywordMappings.Specific?.Translate(eval));
                obj.AttractionRules = this.AttractionRules == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AttractionRules.Overall), this.AttractionRules.Specific?.Translate(eval));
                obj.SceneCollections = this.SceneCollections == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SceneCollections.Overall), this.SceneCollections.Specific?.Translate(eval));
                obj.AnimationSoundTagSets = this.AnimationSoundTagSets == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AnimationSoundTagSets.Overall), this.AnimationSoundTagSets.Specific?.Translate(eval));
                obj.Resources = this.Resources == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Resources.Overall), this.Resources.Specific?.Translate(eval));
                obj.Biomes = this.Biomes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Biomes.Overall), this.Biomes.Specific?.Translate(eval));
                obj.NavigationMeshObstacleCoverManagers = this.NavigationMeshObstacleCoverManagers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.NavigationMeshObstacleCoverManagers.Overall), this.NavigationMeshObstacleCoverManagers.Specific?.Translate(eval));
                obj.LensFlares = this.LensFlares == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LensFlares.Overall), this.LensFlares.Specific?.Translate(eval));
                obj.ObjectVisibilityManagers = this.ObjectVisibilityManagers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ObjectVisibilityManagers.Overall), this.ObjectVisibilityManagers.Specific?.Translate(eval));
                obj.SnapTemplateNodes = this.SnapTemplateNodes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SnapTemplateNodes.Overall), this.SnapTemplateNodes.Specific?.Translate(eval));
                obj.SnapTemplates = this.SnapTemplates == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SnapTemplates.Overall), this.SnapTemplates.Specific?.Translate(eval));
                obj.GroundCovers = this.GroundCovers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.GroundCovers.Overall), this.GroundCovers.Specific?.Translate(eval));
                obj.MorphableObjects = this.MorphableObjects == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.MorphableObjects.Overall), this.MorphableObjects.Specific?.Translate(eval));
                obj.Traversals = this.Traversals == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Traversals.Overall), this.Traversals.Specific?.Translate(eval));
                obj.ResourceGenerationData = this.ResourceGenerationData == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ResourceGenerationData.Overall), this.ResourceGenerationData.Specific?.Translate(eval));
                obj.BiomeSwaps = this.BiomeSwaps == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.BiomeSwaps.Overall), this.BiomeSwaps.Specific?.Translate(eval));
                obj.Atmospheres = this.Atmospheres == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Atmospheres.Overall), this.Atmospheres.Specific?.Translate(eval));
                obj.LeveledSpaceCells = this.LeveledSpaceCells == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LeveledSpaceCells.Overall), this.LeveledSpaceCells.Specific?.Translate(eval));
                obj.SpeechChallenges = this.SpeechChallenges == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SpeechChallenges.Overall), this.SpeechChallenges.Specific?.Translate(eval));
                obj.AimAssistPoses = this.AimAssistPoses == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AimAssistPoses.Overall), this.AimAssistPoses.Specific?.Translate(eval));
                obj.VolumetricLightings = this.VolumetricLightings == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.VolumetricLightings.Overall), this.VolumetricLightings.Specific?.Translate(eval));
                obj.SurfaceBlocks = this.SurfaceBlocks == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SurfaceBlocks.Overall), this.SurfaceBlocks.Specific?.Translate(eval));
                obj.SurfacePatternConfigs = this.SurfacePatternConfigs == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SurfacePatternConfigs.Overall), this.SurfacePatternConfigs.Specific?.Translate(eval));
                obj.SurfacePatterns = this.SurfacePatterns == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SurfacePatterns.Overall), this.SurfacePatterns.Specific?.Translate(eval));
                obj.SurfaceTrees = this.SurfaceTrees == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SurfaceTrees.Overall), this.SurfaceTrees.Specific?.Translate(eval));
                obj.PlanetContentManagerTrees = this.PlanetContentManagerTrees == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.PlanetContentManagerTrees.Overall), this.PlanetContentManagerTrees.Specific?.Translate(eval));
                obj.BoneModifiers = this.BoneModifiers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.BoneModifiers.Overall), this.BoneModifiers.Specific?.Translate(eval));
                obj.SnapTemplateBehaviors = this.SnapTemplateBehaviors == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SnapTemplateBehaviors.Overall), this.SnapTemplateBehaviors.Specific?.Translate(eval));
                obj.Planets = this.Planets == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Planets.Overall), this.Planets.Specific?.Translate(eval));
                obj.ConditionRecords = this.ConditionRecords == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ConditionRecords.Overall), this.ConditionRecords.Specific?.Translate(eval));
                obj.PlanetContentManagerBranchNodes = this.PlanetContentManagerBranchNodes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.PlanetContentManagerBranchNodes.Overall), this.PlanetContentManagerBranchNodes.Specific?.Translate(eval));
                obj.PlanetContentManagerContentNodes = this.PlanetContentManagerContentNodes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.PlanetContentManagerContentNodes.Overall), this.PlanetContentManagerContentNodes.Specific?.Translate(eval));
                obj.Stars = this.Stars == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Stars.Overall), this.Stars.Specific?.Translate(eval));
                obj.WWiseEventDatas = this.WWiseEventDatas == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.WWiseEventDatas.Overall), this.WWiseEventDatas.Specific?.Translate(eval));
                obj.ResearchProjects = this.ResearchProjects == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ResearchProjects.Overall), this.ResearchProjects.Specific?.Translate(eval));
                obj.AimOpticalSightMarkers = this.AimOpticalSightMarkers == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AimOpticalSightMarkers.Overall), this.AimOpticalSightMarkers.Specific?.Translate(eval));
                obj.AmbienceSets = this.AmbienceSets == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.AmbienceSets.Overall), this.AmbienceSets.Specific?.Translate(eval));
                obj.WeaponBarrelModels = this.WeaponBarrelModels == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.WeaponBarrelModels.Overall), this.WeaponBarrelModels.Specific?.Translate(eval));
                obj.SurfacePatternStyles = this.SurfacePatternStyles == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SurfacePatternStyles.Overall), this.SurfacePatternStyles.Specific?.Translate(eval));
                obj.LayeredMaterialSwaps = this.LayeredMaterialSwaps == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LayeredMaterialSwaps.Overall), this.LayeredMaterialSwaps.Specific?.Translate(eval));
                obj.ForceDatas = this.ForceDatas == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ForceDatas.Overall), this.ForceDatas.Specific?.Translate(eval));
                obj.TerminalMenus = this.TerminalMenus == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.TerminalMenus.Overall), this.TerminalMenus.Specific?.Translate(eval));
                obj.EffectSequences = this.EffectSequences == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.EffectSequences.Overall), this.EffectSequences.Specific?.Translate(eval));
                obj.SecondaryDamageLists = this.SecondaryDamageLists == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SecondaryDamageLists.Overall), this.SecondaryDamageLists.Specific?.Translate(eval));
                obj.MaterialPaths = this.MaterialPaths == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.MaterialPaths.Overall), this.MaterialPaths.Specific?.Translate(eval));
                obj.Clouds = this.Clouds == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Clouds.Overall), this.Clouds.Specific?.Translate(eval));
                obj.FogVolumes = this.FogVolumes == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.FogVolumes.Overall), this.FogVolumes.Specific?.Translate(eval));
                obj.WWiseKeywordMappings = this.WWiseKeywordMappings == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.WWiseKeywordMappings.Overall), this.WWiseKeywordMappings.Specific?.Translate(eval));
                obj.LegendaryItems = this.LegendaryItems == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.LegendaryItems.Overall), this.LegendaryItems.Specific?.Translate(eval));
                obj.ParticleSystemDefineCollisions = this.ParticleSystemDefineCollisions == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ParticleSystemDefineCollisions.Overall), this.ParticleSystemDefineCollisions.Specific?.Translate(eval));
                obj.SunPresets = this.SunPresets == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.SunPresets.Overall), this.SunPresets.Specific?.Translate(eval));
                obj.PhotoModeFeatures = this.PhotoModeFeatures == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.PhotoModeFeatures.Overall), this.PhotoModeFeatures.Specific?.Translate(eval));
                obj.GameplayOptions = this.GameplayOptions == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.GameplayOptions.Overall), this.GameplayOptions.Specific?.Translate(eval));
                obj.GameplayOptionsGroups = this.GameplayOptionsGroups == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.GameplayOptionsGroups.Overall), this.GameplayOptionsGroups.Specific?.Translate(eval));
                obj.TimeOfDays = this.TimeOfDays == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.TimeOfDays.Overall), this.TimeOfDays.Specific?.Translate(eval));
                obj.ActorValueModulations = this.ActorValueModulations == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.ActorValueModulations.Overall), this.ActorValueModulations.Specific?.Translate(eval));
                obj.Challenges = this.Challenges == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.Challenges.Overall), this.Challenges.Specific?.Translate(eval));
                obj.FacialExpressions = this.FacialExpressions == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.FacialExpressions.Overall), this.FacialExpressions.Specific?.Translate(eval));
                obj.PERS = this.PERS == null ? null : new MaskItem<R, StarfieldGroup.Mask<R>?>(eval(this.PERS.Overall), this.PERS.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(StarfieldMod.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, StarfieldMod.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(StarfieldMod.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.Print(sb);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.Print(sb);
                    }
                    if (printMask?.Keywords?.Overall ?? true)
                    {
                        Keywords?.Print(sb);
                    }
                    if (printMask?.FFKW?.Overall ?? true)
                    {
                        FFKW?.Print(sb);
                    }
                    if (printMask?.LocationReferenceTypes?.Overall ?? true)
                    {
                        LocationReferenceTypes?.Print(sb);
                    }
                    if (printMask?.Actions?.Overall ?? true)
                    {
                        Actions?.Print(sb);
                    }
                    if (printMask?.Transforms?.Overall ?? true)
                    {
                        Transforms?.Print(sb);
                    }
                    if (printMask?.TextureSets?.Overall ?? true)
                    {
                        TextureSets?.Print(sb);
                    }
                    if (printMask?.Globals?.Overall ?? true)
                    {
                        Globals?.Print(sb);
                    }
                    if (printMask?.DamageTypes?.Overall ?? true)
                    {
                        DamageTypes?.Print(sb);
                    }
                    if (printMask?.Classes?.Overall ?? true)
                    {
                        Classes?.Print(sb);
                    }
                    if (printMask?.Factions?.Overall ?? true)
                    {
                        Factions?.Print(sb);
                    }
                    if (printMask?.AffinityEvents?.Overall ?? true)
                    {
                        AffinityEvents?.Print(sb);
                    }
                    if (printMask?.HeadParts?.Overall ?? true)
                    {
                        HeadParts?.Print(sb);
                    }
                    if (printMask?.Races?.Overall ?? true)
                    {
                        Races?.Print(sb);
                    }
                    if (printMask?.SoundMarkers?.Overall ?? true)
                    {
                        SoundMarkers?.Print(sb);
                    }
                    if (printMask?.SoundEchoMarkers?.Overall ?? true)
                    {
                        SoundEchoMarkers?.Print(sb);
                    }
                    if (printMask?.AcousticSpaces?.Overall ?? true)
                    {
                        AcousticSpaces?.Print(sb);
                    }
                    if (printMask?.AudioOcclusionPrimitives?.Overall ?? true)
                    {
                        AudioOcclusionPrimitives?.Print(sb);
                    }
                    if (printMask?.MagicEffects?.Overall ?? true)
                    {
                        MagicEffects?.Print(sb);
                    }
                    if (printMask?.LandscapeTextures?.Overall ?? true)
                    {
                        LandscapeTextures?.Print(sb);
                    }
                    if (printMask?.ProjectedDecals?.Overall ?? true)
                    {
                        ProjectedDecals?.Print(sb);
                    }
                    if (printMask?.ObjectEffects?.Overall ?? true)
                    {
                        ObjectEffects?.Print(sb);
                    }
                    if (printMask?.Spells?.Overall ?? true)
                    {
                        Spells?.Print(sb);
                    }
                    if (printMask?.Activators?.Overall ?? true)
                    {
                        Activators?.Print(sb);
                    }
                    if (printMask?.CurveTables?.Overall ?? true)
                    {
                        CurveTables?.Print(sb);
                    }
                    if (printMask?.Curve3Ds?.Overall ?? true)
                    {
                        Curve3Ds?.Print(sb);
                    }
                    if (printMask?.Armors?.Overall ?? true)
                    {
                        Armors?.Print(sb);
                    }
                    if (printMask?.Books?.Overall ?? true)
                    {
                        Books?.Print(sb);
                    }
                    if (printMask?.Containers?.Overall ?? true)
                    {
                        Containers?.Print(sb);
                    }
                    if (printMask?.Doors?.Overall ?? true)
                    {
                        Doors?.Print(sb);
                    }
                    if (printMask?.Lights?.Overall ?? true)
                    {
                        Lights?.Print(sb);
                    }
                    if (printMask?.MiscItems?.Overall ?? true)
                    {
                        MiscItems?.Print(sb);
                    }
                    if (printMask?.Statics?.Overall ?? true)
                    {
                        Statics?.Print(sb);
                    }
                    if (printMask?.StaticCollections?.Overall ?? true)
                    {
                        StaticCollections?.Print(sb);
                    }
                    if (printMask?.PackIns?.Overall ?? true)
                    {
                        PackIns?.Print(sb);
                    }
                    if (printMask?.MoveableStatics?.Overall ?? true)
                    {
                        MoveableStatics?.Print(sb);
                    }
                    if (printMask?.Grasses?.Overall ?? true)
                    {
                        Grasses?.Print(sb);
                    }
                    if (printMask?.Florae?.Overall ?? true)
                    {
                        Florae?.Print(sb);
                    }
                    if (printMask?.Furniture?.Overall ?? true)
                    {
                        Furniture?.Print(sb);
                    }
                    if (printMask?.Weapons?.Overall ?? true)
                    {
                        Weapons?.Print(sb);
                    }
                    if (printMask?.Ammunitions?.Overall ?? true)
                    {
                        Ammunitions?.Print(sb);
                    }
                    if (printMask?.Npcs?.Overall ?? true)
                    {
                        Npcs?.Print(sb);
                    }
                    if (printMask?.LeveledNpcs?.Overall ?? true)
                    {
                        LeveledNpcs?.Print(sb);
                    }
                    if (printMask?.LeveledPackIns?.Overall ?? true)
                    {
                        LeveledPackIns?.Print(sb);
                    }
                    if (printMask?.Keys?.Overall ?? true)
                    {
                        Keys?.Print(sb);
                    }
                    if (printMask?.Ingestibles?.Overall ?? true)
                    {
                        Ingestibles?.Print(sb);
                    }
                    if (printMask?.IdleMarkers?.Overall ?? true)
                    {
                        IdleMarkers?.Print(sb);
                    }
                    if (printMask?.BiomeMarkers?.Overall ?? true)
                    {
                        BiomeMarkers?.Print(sb);
                    }
                    if (printMask?.Notes?.Overall ?? true)
                    {
                        Notes?.Print(sb);
                    }
                    if (printMask?.Projectiles?.Overall ?? true)
                    {
                        Projectiles?.Print(sb);
                    }
                    if (printMask?.Hazards?.Overall ?? true)
                    {
                        Hazards?.Print(sb);
                    }
                    if (printMask?.BendableSplines?.Overall ?? true)
                    {
                        BendableSplines?.Print(sb);
                    }
                    if (printMask?.Terminals?.Overall ?? true)
                    {
                        Terminals?.Print(sb);
                    }
                    if (printMask?.LeveledItems?.Overall ?? true)
                    {
                        LeveledItems?.Print(sb);
                    }
                    if (printMask?.GenericBaseFormTemplates?.Overall ?? true)
                    {
                        GenericBaseFormTemplates?.Print(sb);
                    }
                    if (printMask?.GenericBaseForms?.Overall ?? true)
                    {
                        GenericBaseForms?.Print(sb);
                    }
                    if (printMask?.LeveledBaseForms?.Overall ?? true)
                    {
                        LeveledBaseForms?.Print(sb);
                    }
                    if (printMask?.Weathers?.Overall ?? true)
                    {
                        Weathers?.Print(sb);
                    }
                    if (printMask?.WeatherSettings?.Overall ?? true)
                    {
                        WeatherSettings?.Print(sb);
                    }
                    if (printMask?.Climates?.Overall ?? true)
                    {
                        Climates?.Print(sb);
                    }
                    if (printMask?.ShaderParticleGeometries?.Overall ?? true)
                    {
                        ShaderParticleGeometries?.Print(sb);
                    }
                    if (printMask?.Regions?.Overall ?? true)
                    {
                        Regions?.Print(sb);
                    }
                    if (printMask?.NavigationMeshInfoMaps?.Overall ?? true)
                    {
                        NavigationMeshInfoMaps?.Print(sb);
                    }
                    if (printMask?.Cells?.Overall ?? true)
                    {
                        Cells?.Print(sb);
                    }
                    if (printMask?.Worldspaces?.Overall ?? true)
                    {
                        Worldspaces?.Print(sb);
                    }
                    if (printMask?.Quests?.Overall ?? true)
                    {
                        Quests?.Print(sb);
                    }
                    if (printMask?.IdleAnimations?.Overall ?? true)
                    {
                        IdleAnimations?.Print(sb);
                    }
                    if (printMask?.Packages?.Overall ?? true)
                    {
                        Packages?.Print(sb);
                    }
                    if (printMask?.CombatStyles?.Overall ?? true)
                    {
                        CombatStyles?.Print(sb);
                    }
                    if (printMask?.LoadScreens?.Overall ?? true)
                    {
                        LoadScreens?.Print(sb);
                    }
                    if (printMask?.AnimatedObjects?.Overall ?? true)
                    {
                        AnimatedObjects?.Print(sb);
                    }
                    if (printMask?.Waters?.Overall ?? true)
                    {
                        Waters?.Print(sb);
                    }
                    if (printMask?.EffectShaders?.Overall ?? true)
                    {
                        EffectShaders?.Print(sb);
                    }
                    if (printMask?.Explosions?.Overall ?? true)
                    {
                        Explosions?.Print(sb);
                    }
                    if (printMask?.Debris?.Overall ?? true)
                    {
                        Debris?.Print(sb);
                    }
                    if (printMask?.ImageSpaces?.Overall ?? true)
                    {
                        ImageSpaces?.Print(sb);
                    }
                    if (printMask?.ImageSpaceAdapters?.Overall ?? true)
                    {
                        ImageSpaceAdapters?.Print(sb);
                    }
                    if (printMask?.FormLists?.Overall ?? true)
                    {
                        FormLists?.Print(sb);
                    }
                    if (printMask?.Perks?.Overall ?? true)
                    {
                        Perks?.Print(sb);
                    }
                    if (printMask?.BodyParts?.Overall ?? true)
                    {
                        BodyParts?.Print(sb);
                    }
                    if (printMask?.AddonNodes?.Overall ?? true)
                    {
                        AddonNodes?.Print(sb);
                    }
                    if (printMask?.ActorValueInformation?.Overall ?? true)
                    {
                        ActorValueInformation?.Print(sb);
                    }
                    if (printMask?.CameraShots?.Overall ?? true)
                    {
                        CameraShots?.Print(sb);
                    }
                    if (printMask?.CameraPaths?.Overall ?? true)
                    {
                        CameraPaths?.Print(sb);
                    }
                    if (printMask?.VoiceTypes?.Overall ?? true)
                    {
                        VoiceTypes?.Print(sb);
                    }
                    if (printMask?.MaterialTypes?.Overall ?? true)
                    {
                        MaterialTypes?.Print(sb);
                    }
                    if (printMask?.Impacts?.Overall ?? true)
                    {
                        Impacts?.Print(sb);
                    }
                    if (printMask?.ImpactDataSets?.Overall ?? true)
                    {
                        ImpactDataSets?.Print(sb);
                    }
                    if (printMask?.ArmorAddons?.Overall ?? true)
                    {
                        ArmorAddons?.Print(sb);
                    }
                    if (printMask?.Locations?.Overall ?? true)
                    {
                        Locations?.Print(sb);
                    }
                    if (printMask?.Messages?.Overall ?? true)
                    {
                        Messages?.Print(sb);
                    }
                    if (printMask?.DefaultObjectManagers?.Overall ?? true)
                    {
                        DefaultObjectManagers?.Print(sb);
                    }
                    if (printMask?.DefaultObjects?.Overall ?? true)
                    {
                        DefaultObjects?.Print(sb);
                    }
                    if (printMask?.LightingTemplates?.Overall ?? true)
                    {
                        LightingTemplates?.Print(sb);
                    }
                    if (printMask?.MusicTypes?.Overall ?? true)
                    {
                        MusicTypes?.Print(sb);
                    }
                    if (printMask?.Footsteps?.Overall ?? true)
                    {
                        Footsteps?.Print(sb);
                    }
                    if (printMask?.FootstepSets?.Overall ?? true)
                    {
                        FootstepSets?.Print(sb);
                    }
                    if (printMask?.StoryManagerBranchNodes?.Overall ?? true)
                    {
                        StoryManagerBranchNodes?.Print(sb);
                    }
                    if (printMask?.StoryManagerQuestNodes?.Overall ?? true)
                    {
                        StoryManagerQuestNodes?.Print(sb);
                    }
                    if (printMask?.StoryManagerEventNodes?.Overall ?? true)
                    {
                        StoryManagerEventNodes?.Print(sb);
                    }
                    if (printMask?.MusicTracks?.Overall ?? true)
                    {
                        MusicTracks?.Print(sb);
                    }
                    if (printMask?.EquipTypes?.Overall ?? true)
                    {
                        EquipTypes?.Print(sb);
                    }
                    if (printMask?.Outfits?.Overall ?? true)
                    {
                        Outfits?.Print(sb);
                    }
                    if (printMask?.ArtObjects?.Overall ?? true)
                    {
                        ArtObjects?.Print(sb);
                    }
                    if (printMask?.MovementTypes?.Overall ?? true)
                    {
                        MovementTypes?.Print(sb);
                    }
                    if (printMask?.CollisionLayers?.Overall ?? true)
                    {
                        CollisionLayers?.Print(sb);
                    }
                    if (printMask?.Colors?.Overall ?? true)
                    {
                        Colors?.Print(sb);
                    }
                    if (printMask?.ReverbParameters?.Overall ?? true)
                    {
                        ReverbParameters?.Print(sb);
                    }
                    if (printMask?.ReferenceGroups?.Overall ?? true)
                    {
                        ReferenceGroups?.Print(sb);
                    }
                    if (printMask?.AimModels?.Overall ?? true)
                    {
                        AimModels?.Print(sb);
                    }
                    if (printMask?.AimAssistModels?.Overall ?? true)
                    {
                        AimAssistModels?.Print(sb);
                    }
                    if (printMask?.MeleeAimAssistModels?.Overall ?? true)
                    {
                        MeleeAimAssistModels?.Print(sb);
                    }
                    if (printMask?.Layers?.Overall ?? true)
                    {
                        Layers?.Print(sb);
                    }
                    if (printMask?.ConstructibleObjects?.Overall ?? true)
                    {
                        ConstructibleObjects?.Print(sb);
                    }
                    if (printMask?.ObjectModifications?.Overall ?? true)
                    {
                        ObjectModifications?.Print(sb);
                    }
                    if (printMask?.Zooms?.Overall ?? true)
                    {
                        Zooms?.Print(sb);
                    }
                    if (printMask?.InstanceNamingRules?.Overall ?? true)
                    {
                        InstanceNamingRules?.Print(sb);
                    }
                    if (printMask?.SoundKeywordMappings?.Overall ?? true)
                    {
                        SoundKeywordMappings?.Print(sb);
                    }
                    if (printMask?.AttractionRules?.Overall ?? true)
                    {
                        AttractionRules?.Print(sb);
                    }
                    if (printMask?.SceneCollections?.Overall ?? true)
                    {
                        SceneCollections?.Print(sb);
                    }
                    if (printMask?.AnimationSoundTagSets?.Overall ?? true)
                    {
                        AnimationSoundTagSets?.Print(sb);
                    }
                    if (printMask?.Resources?.Overall ?? true)
                    {
                        Resources?.Print(sb);
                    }
                    if (printMask?.Biomes?.Overall ?? true)
                    {
                        Biomes?.Print(sb);
                    }
                    if (printMask?.NavigationMeshObstacleCoverManagers?.Overall ?? true)
                    {
                        NavigationMeshObstacleCoverManagers?.Print(sb);
                    }
                    if (printMask?.LensFlares?.Overall ?? true)
                    {
                        LensFlares?.Print(sb);
                    }
                    if (printMask?.ObjectVisibilityManagers?.Overall ?? true)
                    {
                        ObjectVisibilityManagers?.Print(sb);
                    }
                    if (printMask?.SnapTemplateNodes?.Overall ?? true)
                    {
                        SnapTemplateNodes?.Print(sb);
                    }
                    if (printMask?.SnapTemplates?.Overall ?? true)
                    {
                        SnapTemplates?.Print(sb);
                    }
                    if (printMask?.GroundCovers?.Overall ?? true)
                    {
                        GroundCovers?.Print(sb);
                    }
                    if (printMask?.MorphableObjects?.Overall ?? true)
                    {
                        MorphableObjects?.Print(sb);
                    }
                    if (printMask?.Traversals?.Overall ?? true)
                    {
                        Traversals?.Print(sb);
                    }
                    if (printMask?.ResourceGenerationData?.Overall ?? true)
                    {
                        ResourceGenerationData?.Print(sb);
                    }
                    if (printMask?.BiomeSwaps?.Overall ?? true)
                    {
                        BiomeSwaps?.Print(sb);
                    }
                    if (printMask?.Atmospheres?.Overall ?? true)
                    {
                        Atmospheres?.Print(sb);
                    }
                    if (printMask?.LeveledSpaceCells?.Overall ?? true)
                    {
                        LeveledSpaceCells?.Print(sb);
                    }
                    if (printMask?.SpeechChallenges?.Overall ?? true)
                    {
                        SpeechChallenges?.Print(sb);
                    }
                    if (printMask?.AimAssistPoses?.Overall ?? true)
                    {
                        AimAssistPoses?.Print(sb);
                    }
                    if (printMask?.VolumetricLightings?.Overall ?? true)
                    {
                        VolumetricLightings?.Print(sb);
                    }
                    if (printMask?.SurfaceBlocks?.Overall ?? true)
                    {
                        SurfaceBlocks?.Print(sb);
                    }
                    if (printMask?.SurfacePatternConfigs?.Overall ?? true)
                    {
                        SurfacePatternConfigs?.Print(sb);
                    }
                    if (printMask?.SurfacePatterns?.Overall ?? true)
                    {
                        SurfacePatterns?.Print(sb);
                    }
                    if (printMask?.SurfaceTrees?.Overall ?? true)
                    {
                        SurfaceTrees?.Print(sb);
                    }
                    if (printMask?.PlanetContentManagerTrees?.Overall ?? true)
                    {
                        PlanetContentManagerTrees?.Print(sb);
                    }
                    if (printMask?.BoneModifiers?.Overall ?? true)
                    {
                        BoneModifiers?.Print(sb);
                    }
                    if (printMask?.SnapTemplateBehaviors?.Overall ?? true)
                    {
                        SnapTemplateBehaviors?.Print(sb);
                    }
                    if (printMask?.Planets?.Overall ?? true)
                    {
                        Planets?.Print(sb);
                    }
                    if (printMask?.ConditionRecords?.Overall ?? true)
                    {
                        ConditionRecords?.Print(sb);
                    }
                    if (printMask?.PlanetContentManagerBranchNodes?.Overall ?? true)
                    {
                        PlanetContentManagerBranchNodes?.Print(sb);
                    }
                    if (printMask?.PlanetContentManagerContentNodes?.Overall ?? true)
                    {
                        PlanetContentManagerContentNodes?.Print(sb);
                    }
                    if (printMask?.Stars?.Overall ?? true)
                    {
                        Stars?.Print(sb);
                    }
                    if (printMask?.WWiseEventDatas?.Overall ?? true)
                    {
                        WWiseEventDatas?.Print(sb);
                    }
                    if (printMask?.ResearchProjects?.Overall ?? true)
                    {
                        ResearchProjects?.Print(sb);
                    }
                    if (printMask?.AimOpticalSightMarkers?.Overall ?? true)
                    {
                        AimOpticalSightMarkers?.Print(sb);
                    }
                    if (printMask?.AmbienceSets?.Overall ?? true)
                    {
                        AmbienceSets?.Print(sb);
                    }
                    if (printMask?.WeaponBarrelModels?.Overall ?? true)
                    {
                        WeaponBarrelModels?.Print(sb);
                    }
                    if (printMask?.SurfacePatternStyles?.Overall ?? true)
                    {
                        SurfacePatternStyles?.Print(sb);
                    }
                    if (printMask?.LayeredMaterialSwaps?.Overall ?? true)
                    {
                        LayeredMaterialSwaps?.Print(sb);
                    }
                    if (printMask?.ForceDatas?.Overall ?? true)
                    {
                        ForceDatas?.Print(sb);
                    }
                    if (printMask?.TerminalMenus?.Overall ?? true)
                    {
                        TerminalMenus?.Print(sb);
                    }
                    if (printMask?.EffectSequences?.Overall ?? true)
                    {
                        EffectSequences?.Print(sb);
                    }
                    if (printMask?.SecondaryDamageLists?.Overall ?? true)
                    {
                        SecondaryDamageLists?.Print(sb);
                    }
                    if (printMask?.MaterialPaths?.Overall ?? true)
                    {
                        MaterialPaths?.Print(sb);
                    }
                    if (printMask?.Clouds?.Overall ?? true)
                    {
                        Clouds?.Print(sb);
                    }
                    if (printMask?.FogVolumes?.Overall ?? true)
                    {
                        FogVolumes?.Print(sb);
                    }
                    if (printMask?.WWiseKeywordMappings?.Overall ?? true)
                    {
                        WWiseKeywordMappings?.Print(sb);
                    }
                    if (printMask?.LegendaryItems?.Overall ?? true)
                    {
                        LegendaryItems?.Print(sb);
                    }
                    if (printMask?.ParticleSystemDefineCollisions?.Overall ?? true)
                    {
                        ParticleSystemDefineCollisions?.Print(sb);
                    }
                    if (printMask?.SunPresets?.Overall ?? true)
                    {
                        SunPresets?.Print(sb);
                    }
                    if (printMask?.PhotoModeFeatures?.Overall ?? true)
                    {
                        PhotoModeFeatures?.Print(sb);
                    }
                    if (printMask?.GameplayOptions?.Overall ?? true)
                    {
                        GameplayOptions?.Print(sb);
                    }
                    if (printMask?.GameplayOptionsGroups?.Overall ?? true)
                    {
                        GameplayOptionsGroups?.Print(sb);
                    }
                    if (printMask?.TimeOfDays?.Overall ?? true)
                    {
                        TimeOfDays?.Print(sb);
                    }
                    if (printMask?.ActorValueModulations?.Overall ?? true)
                    {
                        ActorValueModulations?.Print(sb);
                    }
                    if (printMask?.Challenges?.Overall ?? true)
                    {
                        Challenges?.Print(sb);
                    }
                    if (printMask?.FacialExpressions?.Overall ?? true)
                    {
                        FacialExpressions?.Print(sb);
                    }
                    if (printMask?.PERS?.Overall ?? true)
                    {
                        PERS?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, StarfieldModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Keyword.ErrorMask>?>? Keywords;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<FFKWRecord.ErrorMask>?>? FFKW;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LocationReferenceType.ErrorMask>?>? LocationReferenceTypes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ActionRecord.ErrorMask>?>? Actions;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Transform.ErrorMask>?>? Transforms;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<TextureSet.ErrorMask>?>? TextureSets;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Global.ErrorMask>?>? Globals;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<DamageType.ErrorMask>?>? DamageTypes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Class.ErrorMask>?>? Classes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Faction.ErrorMask>?>? Factions;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AffinityEvent.ErrorMask>?>? AffinityEvents;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<HeadPart.ErrorMask>?>? HeadParts;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Race.ErrorMask>?>? Races;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SoundMarker.ErrorMask>?>? SoundMarkers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SoundEchoMarker.ErrorMask>?>? SoundEchoMarkers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AcousticSpace.ErrorMask>?>? AcousticSpaces;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AudioOcclusionPrimitive.ErrorMask>?>? AudioOcclusionPrimitives;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<MagicEffect.ErrorMask>?>? MagicEffects;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LandscapeTexture.ErrorMask>?>? LandscapeTextures;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ProjectedDecal.ErrorMask>?>? ProjectedDecals;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ObjectEffect.ErrorMask>?>? ObjectEffects;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Spell.ErrorMask>?>? Spells;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Activator.ErrorMask>?>? Activators;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<CurveTable.ErrorMask>?>? CurveTables;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Curve3D.ErrorMask>?>? Curve3Ds;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Armor.ErrorMask>?>? Armors;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Book.ErrorMask>?>? Books;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Container.ErrorMask>?>? Containers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Door.ErrorMask>?>? Doors;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Light.ErrorMask>?>? Lights;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<MiscItem.ErrorMask>?>? MiscItems;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Static.ErrorMask>?>? Statics;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<StaticCollection.ErrorMask>?>? StaticCollections;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<PackIn.ErrorMask>?>? PackIns;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<MoveableStatic.ErrorMask>?>? MoveableStatics;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Grass.ErrorMask>?>? Grasses;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Flora.ErrorMask>?>? Florae;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Furniture.ErrorMask>?>? Furniture;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Weapon.ErrorMask>?>? Weapons;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Ammunition.ErrorMask>?>? Ammunitions;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Npc.ErrorMask>?>? Npcs;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledNpc.ErrorMask>?>? LeveledNpcs;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledPackIn.ErrorMask>?>? LeveledPackIns;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Key.ErrorMask>?>? Keys;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Ingestible.ErrorMask>?>? Ingestibles;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<IdleMarker.ErrorMask>?>? IdleMarkers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<BiomeMarker.ErrorMask>?>? BiomeMarkers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Note.ErrorMask>?>? Notes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Projectile.ErrorMask>?>? Projectiles;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Hazard.ErrorMask>?>? Hazards;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<BendableSpline.ErrorMask>?>? BendableSplines;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Terminal.ErrorMask>?>? Terminals;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledItem.ErrorMask>?>? LeveledItems;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<GenericBaseFormTemplate.ErrorMask>?>? GenericBaseFormTemplates;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<GenericBaseForm.ErrorMask>?>? GenericBaseForms;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledBaseForm.ErrorMask>?>? LeveledBaseForms;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Weather.ErrorMask>?>? Weathers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<WeatherSetting.ErrorMask>?>? WeatherSettings;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Climate.ErrorMask>?>? Climates;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ShaderParticleGeometry.ErrorMask>?>? ShaderParticleGeometries;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Region.ErrorMask>?>? Regions;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>? NavigationMeshInfoMaps;
            public MaskItem<Exception?, StarfieldListGroup.ErrorMask<CellBlock.ErrorMask>?>? Cells;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Worldspace.ErrorMask>?>? Worldspaces;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Quest.ErrorMask>?>? Quests;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<IdleAnimation.ErrorMask>?>? IdleAnimations;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Package.ErrorMask>?>? Packages;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<CombatStyle.ErrorMask>?>? CombatStyles;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LoadScreen.ErrorMask>?>? LoadScreens;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AnimatedObject.ErrorMask>?>? AnimatedObjects;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Water.ErrorMask>?>? Waters;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<EffectShader.ErrorMask>?>? EffectShaders;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Explosion.ErrorMask>?>? Explosions;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Debris.ErrorMask>?>? Debris;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ImageSpace.ErrorMask>?>? ImageSpaces;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ImageSpaceAdapter.ErrorMask>?>? ImageSpaceAdapters;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<FormList.ErrorMask>?>? FormLists;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Perk.ErrorMask>?>? Perks;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<BodyPartData.ErrorMask>?>? BodyParts;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AddonNode.ErrorMask>?>? AddonNodes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ActorValueInformation.ErrorMask>?>? ActorValueInformation;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<CameraShot.ErrorMask>?>? CameraShots;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<CameraPath.ErrorMask>?>? CameraPaths;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<VoiceType.ErrorMask>?>? VoiceTypes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<MaterialType.ErrorMask>?>? MaterialTypes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Impact.ErrorMask>?>? Impacts;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ImpactDataSet.ErrorMask>?>? ImpactDataSets;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ArmorAddon.ErrorMask>?>? ArmorAddons;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Location.ErrorMask>?>? Locations;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Message.ErrorMask>?>? Messages;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<DefaultObjectManager.ErrorMask>?>? DefaultObjectManagers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<DefaultObject.ErrorMask>?>? DefaultObjects;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LightingTemplate.ErrorMask>?>? LightingTemplates;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<MusicType.ErrorMask>?>? MusicTypes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Footstep.ErrorMask>?>? Footsteps;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<FootstepSet.ErrorMask>?>? FootstepSets;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<StoryManagerBranchNode.ErrorMask>?>? StoryManagerBranchNodes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<StoryManagerQuestNode.ErrorMask>?>? StoryManagerQuestNodes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<StoryManagerEventNode.ErrorMask>?>? StoryManagerEventNodes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<MusicTrack.ErrorMask>?>? MusicTracks;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<EquipType.ErrorMask>?>? EquipTypes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Outfit.ErrorMask>?>? Outfits;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ArtObject.ErrorMask>?>? ArtObjects;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<MovementType.ErrorMask>?>? MovementTypes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<CollisionLayer.ErrorMask>?>? CollisionLayers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ColorRecord.ErrorMask>?>? Colors;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ReverbParameters.ErrorMask>?>? ReverbParameters;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ReferenceGroup.ErrorMask>?>? ReferenceGroups;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AimModel.ErrorMask>?>? AimModels;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AimAssistModel.ErrorMask>?>? AimAssistModels;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<MeleeAimAssistModel.ErrorMask>?>? MeleeAimAssistModels;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Layer.ErrorMask>?>? Layers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ConstructibleObject.ErrorMask>?>? ConstructibleObjects;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AObjectModification.ErrorMask>?>? ObjectModifications;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Zoom.ErrorMask>?>? Zooms;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<InstanceNamingRules.ErrorMask>?>? InstanceNamingRules;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SoundKeywordMapping.ErrorMask>?>? SoundKeywordMappings;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AttractionRule.ErrorMask>?>? AttractionRules;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SceneCollection.ErrorMask>?>? SceneCollections;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AnimationSoundTagSet.ErrorMask>?>? AnimationSoundTagSets;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Resource.ErrorMask>?>? Resources;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Biome.ErrorMask>?>? Biomes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<NavigationMeshObstacleCoverManager.ErrorMask>?>? NavigationMeshObstacleCoverManagers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LensFlare.ErrorMask>?>? LensFlares;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ObjectVisibilityManager.ErrorMask>?>? ObjectVisibilityManagers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SnapTemplateNode.ErrorMask>?>? SnapTemplateNodes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SnapTemplate.ErrorMask>?>? SnapTemplates;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<GroundCover.ErrorMask>?>? GroundCovers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<MorphableObject.ErrorMask>?>? MorphableObjects;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Traversal.ErrorMask>?>? Traversals;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ResourceGenerationData.ErrorMask>?>? ResourceGenerationData;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<BiomeSwap.ErrorMask>?>? BiomeSwaps;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Atmosphere.ErrorMask>?>? Atmospheres;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledSpaceCell.ErrorMask>?>? LeveledSpaceCells;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SpeechChallenge.ErrorMask>?>? SpeechChallenges;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AimAssistPose.ErrorMask>?>? AimAssistPoses;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<VolumetricLighting.ErrorMask>?>? VolumetricLightings;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfaceBlock.ErrorMask>?>? SurfaceBlocks;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePatternConfig.ErrorMask>?>? SurfacePatternConfigs;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePattern.ErrorMask>?>? SurfacePatterns;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfaceTree.ErrorMask>?>? SurfaceTrees;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<PlanetContentManagerTree.ErrorMask>?>? PlanetContentManagerTrees;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<BoneModifier.ErrorMask>?>? BoneModifiers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SnapTemplateBehavior.ErrorMask>?>? SnapTemplateBehaviors;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Planet.ErrorMask>?>? Planets;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ConditionRecord.ErrorMask>?>? ConditionRecords;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<PlanetContentManagerBranchNode.ErrorMask>?>? PlanetContentManagerBranchNodes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<PlanetContentManagerContentNode.ErrorMask>?>? PlanetContentManagerContentNodes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Star.ErrorMask>?>? Stars;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<WWiseEventData.ErrorMask>?>? WWiseEventDatas;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ResearchProject.ErrorMask>?>? ResearchProjects;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AimOpticalSightMarker.ErrorMask>?>? AimOpticalSightMarkers;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<AmbienceSet.ErrorMask>?>? AmbienceSets;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<WeaponBarrelModel.ErrorMask>?>? WeaponBarrelModels;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePatternStyle.ErrorMask>?>? SurfacePatternStyles;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LayeredMaterialSwap.ErrorMask>?>? LayeredMaterialSwaps;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ForceData.ErrorMask>?>? ForceDatas;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<TerminalMenu.ErrorMask>?>? TerminalMenus;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<EffectSequence.ErrorMask>?>? EffectSequences;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SecondaryDamageList.ErrorMask>?>? SecondaryDamageLists;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<MaterialPath.ErrorMask>?>? MaterialPaths;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Clouds.ErrorMask>?>? Clouds;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<FogVolume.ErrorMask>?>? FogVolumes;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<WWiseKeywordMapping.ErrorMask>?>? WWiseKeywordMappings;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<LegendaryItem.ErrorMask>?>? LegendaryItems;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ParticleSystemDefineCollision.ErrorMask>?>? ParticleSystemDefineCollisions;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<SunPreset.ErrorMask>?>? SunPresets;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<PhotoModeFeature.ErrorMask>?>? PhotoModeFeatures;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<GameplayOptions.ErrorMask>?>? GameplayOptions;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<GameplayOptionsGroup.ErrorMask>?>? GameplayOptionsGroups;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<TimeOfDayRecord.ErrorMask>?>? TimeOfDays;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<ActorValueModulation.ErrorMask>?>? ActorValueModulations;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<Challenge.ErrorMask>?>? Challenges;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<FacialExpression.ErrorMask>?>? FacialExpressions;
            public MaskItem<Exception?, StarfieldGroup.ErrorMask<PERS.ErrorMask>?>? PERS;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                StarfieldMod_FieldIndex enu = (StarfieldMod_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldMod_FieldIndex.ModHeader:
                        return ModHeader;
                    case StarfieldMod_FieldIndex.GameSettings:
                        return GameSettings;
                    case StarfieldMod_FieldIndex.Keywords:
                        return Keywords;
                    case StarfieldMod_FieldIndex.FFKW:
                        return FFKW;
                    case StarfieldMod_FieldIndex.LocationReferenceTypes:
                        return LocationReferenceTypes;
                    case StarfieldMod_FieldIndex.Actions:
                        return Actions;
                    case StarfieldMod_FieldIndex.Transforms:
                        return Transforms;
                    case StarfieldMod_FieldIndex.TextureSets:
                        return TextureSets;
                    case StarfieldMod_FieldIndex.Globals:
                        return Globals;
                    case StarfieldMod_FieldIndex.DamageTypes:
                        return DamageTypes;
                    case StarfieldMod_FieldIndex.Classes:
                        return Classes;
                    case StarfieldMod_FieldIndex.Factions:
                        return Factions;
                    case StarfieldMod_FieldIndex.AffinityEvents:
                        return AffinityEvents;
                    case StarfieldMod_FieldIndex.HeadParts:
                        return HeadParts;
                    case StarfieldMod_FieldIndex.Races:
                        return Races;
                    case StarfieldMod_FieldIndex.SoundMarkers:
                        return SoundMarkers;
                    case StarfieldMod_FieldIndex.SoundEchoMarkers:
                        return SoundEchoMarkers;
                    case StarfieldMod_FieldIndex.AcousticSpaces:
                        return AcousticSpaces;
                    case StarfieldMod_FieldIndex.AudioOcclusionPrimitives:
                        return AudioOcclusionPrimitives;
                    case StarfieldMod_FieldIndex.MagicEffects:
                        return MagicEffects;
                    case StarfieldMod_FieldIndex.LandscapeTextures:
                        return LandscapeTextures;
                    case StarfieldMod_FieldIndex.ProjectedDecals:
                        return ProjectedDecals;
                    case StarfieldMod_FieldIndex.ObjectEffects:
                        return ObjectEffects;
                    case StarfieldMod_FieldIndex.Spells:
                        return Spells;
                    case StarfieldMod_FieldIndex.Activators:
                        return Activators;
                    case StarfieldMod_FieldIndex.CurveTables:
                        return CurveTables;
                    case StarfieldMod_FieldIndex.Curve3Ds:
                        return Curve3Ds;
                    case StarfieldMod_FieldIndex.Armors:
                        return Armors;
                    case StarfieldMod_FieldIndex.Books:
                        return Books;
                    case StarfieldMod_FieldIndex.Containers:
                        return Containers;
                    case StarfieldMod_FieldIndex.Doors:
                        return Doors;
                    case StarfieldMod_FieldIndex.Lights:
                        return Lights;
                    case StarfieldMod_FieldIndex.MiscItems:
                        return MiscItems;
                    case StarfieldMod_FieldIndex.Statics:
                        return Statics;
                    case StarfieldMod_FieldIndex.StaticCollections:
                        return StaticCollections;
                    case StarfieldMod_FieldIndex.PackIns:
                        return PackIns;
                    case StarfieldMod_FieldIndex.MoveableStatics:
                        return MoveableStatics;
                    case StarfieldMod_FieldIndex.Grasses:
                        return Grasses;
                    case StarfieldMod_FieldIndex.Florae:
                        return Florae;
                    case StarfieldMod_FieldIndex.Furniture:
                        return Furniture;
                    case StarfieldMod_FieldIndex.Weapons:
                        return Weapons;
                    case StarfieldMod_FieldIndex.Ammunitions:
                        return Ammunitions;
                    case StarfieldMod_FieldIndex.Npcs:
                        return Npcs;
                    case StarfieldMod_FieldIndex.LeveledNpcs:
                        return LeveledNpcs;
                    case StarfieldMod_FieldIndex.LeveledPackIns:
                        return LeveledPackIns;
                    case StarfieldMod_FieldIndex.Keys:
                        return Keys;
                    case StarfieldMod_FieldIndex.Ingestibles:
                        return Ingestibles;
                    case StarfieldMod_FieldIndex.IdleMarkers:
                        return IdleMarkers;
                    case StarfieldMod_FieldIndex.BiomeMarkers:
                        return BiomeMarkers;
                    case StarfieldMod_FieldIndex.Notes:
                        return Notes;
                    case StarfieldMod_FieldIndex.Projectiles:
                        return Projectiles;
                    case StarfieldMod_FieldIndex.Hazards:
                        return Hazards;
                    case StarfieldMod_FieldIndex.BendableSplines:
                        return BendableSplines;
                    case StarfieldMod_FieldIndex.Terminals:
                        return Terminals;
                    case StarfieldMod_FieldIndex.LeveledItems:
                        return LeveledItems;
                    case StarfieldMod_FieldIndex.GenericBaseFormTemplates:
                        return GenericBaseFormTemplates;
                    case StarfieldMod_FieldIndex.GenericBaseForms:
                        return GenericBaseForms;
                    case StarfieldMod_FieldIndex.LeveledBaseForms:
                        return LeveledBaseForms;
                    case StarfieldMod_FieldIndex.Weathers:
                        return Weathers;
                    case StarfieldMod_FieldIndex.WeatherSettings:
                        return WeatherSettings;
                    case StarfieldMod_FieldIndex.Climates:
                        return Climates;
                    case StarfieldMod_FieldIndex.ShaderParticleGeometries:
                        return ShaderParticleGeometries;
                    case StarfieldMod_FieldIndex.Regions:
                        return Regions;
                    case StarfieldMod_FieldIndex.NavigationMeshInfoMaps:
                        return NavigationMeshInfoMaps;
                    case StarfieldMod_FieldIndex.Cells:
                        return Cells;
                    case StarfieldMod_FieldIndex.Worldspaces:
                        return Worldspaces;
                    case StarfieldMod_FieldIndex.Quests:
                        return Quests;
                    case StarfieldMod_FieldIndex.IdleAnimations:
                        return IdleAnimations;
                    case StarfieldMod_FieldIndex.Packages:
                        return Packages;
                    case StarfieldMod_FieldIndex.CombatStyles:
                        return CombatStyles;
                    case StarfieldMod_FieldIndex.LoadScreens:
                        return LoadScreens;
                    case StarfieldMod_FieldIndex.AnimatedObjects:
                        return AnimatedObjects;
                    case StarfieldMod_FieldIndex.Waters:
                        return Waters;
                    case StarfieldMod_FieldIndex.EffectShaders:
                        return EffectShaders;
                    case StarfieldMod_FieldIndex.Explosions:
                        return Explosions;
                    case StarfieldMod_FieldIndex.Debris:
                        return Debris;
                    case StarfieldMod_FieldIndex.ImageSpaces:
                        return ImageSpaces;
                    case StarfieldMod_FieldIndex.ImageSpaceAdapters:
                        return ImageSpaceAdapters;
                    case StarfieldMod_FieldIndex.FormLists:
                        return FormLists;
                    case StarfieldMod_FieldIndex.Perks:
                        return Perks;
                    case StarfieldMod_FieldIndex.BodyParts:
                        return BodyParts;
                    case StarfieldMod_FieldIndex.AddonNodes:
                        return AddonNodes;
                    case StarfieldMod_FieldIndex.ActorValueInformation:
                        return ActorValueInformation;
                    case StarfieldMod_FieldIndex.CameraShots:
                        return CameraShots;
                    case StarfieldMod_FieldIndex.CameraPaths:
                        return CameraPaths;
                    case StarfieldMod_FieldIndex.VoiceTypes:
                        return VoiceTypes;
                    case StarfieldMod_FieldIndex.MaterialTypes:
                        return MaterialTypes;
                    case StarfieldMod_FieldIndex.Impacts:
                        return Impacts;
                    case StarfieldMod_FieldIndex.ImpactDataSets:
                        return ImpactDataSets;
                    case StarfieldMod_FieldIndex.ArmorAddons:
                        return ArmorAddons;
                    case StarfieldMod_FieldIndex.Locations:
                        return Locations;
                    case StarfieldMod_FieldIndex.Messages:
                        return Messages;
                    case StarfieldMod_FieldIndex.DefaultObjectManagers:
                        return DefaultObjectManagers;
                    case StarfieldMod_FieldIndex.DefaultObjects:
                        return DefaultObjects;
                    case StarfieldMod_FieldIndex.LightingTemplates:
                        return LightingTemplates;
                    case StarfieldMod_FieldIndex.MusicTypes:
                        return MusicTypes;
                    case StarfieldMod_FieldIndex.Footsteps:
                        return Footsteps;
                    case StarfieldMod_FieldIndex.FootstepSets:
                        return FootstepSets;
                    case StarfieldMod_FieldIndex.StoryManagerBranchNodes:
                        return StoryManagerBranchNodes;
                    case StarfieldMod_FieldIndex.StoryManagerQuestNodes:
                        return StoryManagerQuestNodes;
                    case StarfieldMod_FieldIndex.StoryManagerEventNodes:
                        return StoryManagerEventNodes;
                    case StarfieldMod_FieldIndex.MusicTracks:
                        return MusicTracks;
                    case StarfieldMod_FieldIndex.EquipTypes:
                        return EquipTypes;
                    case StarfieldMod_FieldIndex.Outfits:
                        return Outfits;
                    case StarfieldMod_FieldIndex.ArtObjects:
                        return ArtObjects;
                    case StarfieldMod_FieldIndex.MovementTypes:
                        return MovementTypes;
                    case StarfieldMod_FieldIndex.CollisionLayers:
                        return CollisionLayers;
                    case StarfieldMod_FieldIndex.Colors:
                        return Colors;
                    case StarfieldMod_FieldIndex.ReverbParameters:
                        return ReverbParameters;
                    case StarfieldMod_FieldIndex.ReferenceGroups:
                        return ReferenceGroups;
                    case StarfieldMod_FieldIndex.AimModels:
                        return AimModels;
                    case StarfieldMod_FieldIndex.AimAssistModels:
                        return AimAssistModels;
                    case StarfieldMod_FieldIndex.MeleeAimAssistModels:
                        return MeleeAimAssistModels;
                    case StarfieldMod_FieldIndex.Layers:
                        return Layers;
                    case StarfieldMod_FieldIndex.ConstructibleObjects:
                        return ConstructibleObjects;
                    case StarfieldMod_FieldIndex.ObjectModifications:
                        return ObjectModifications;
                    case StarfieldMod_FieldIndex.Zooms:
                        return Zooms;
                    case StarfieldMod_FieldIndex.InstanceNamingRules:
                        return InstanceNamingRules;
                    case StarfieldMod_FieldIndex.SoundKeywordMappings:
                        return SoundKeywordMappings;
                    case StarfieldMod_FieldIndex.AttractionRules:
                        return AttractionRules;
                    case StarfieldMod_FieldIndex.SceneCollections:
                        return SceneCollections;
                    case StarfieldMod_FieldIndex.AnimationSoundTagSets:
                        return AnimationSoundTagSets;
                    case StarfieldMod_FieldIndex.Resources:
                        return Resources;
                    case StarfieldMod_FieldIndex.Biomes:
                        return Biomes;
                    case StarfieldMod_FieldIndex.NavigationMeshObstacleCoverManagers:
                        return NavigationMeshObstacleCoverManagers;
                    case StarfieldMod_FieldIndex.LensFlares:
                        return LensFlares;
                    case StarfieldMod_FieldIndex.ObjectVisibilityManagers:
                        return ObjectVisibilityManagers;
                    case StarfieldMod_FieldIndex.SnapTemplateNodes:
                        return SnapTemplateNodes;
                    case StarfieldMod_FieldIndex.SnapTemplates:
                        return SnapTemplates;
                    case StarfieldMod_FieldIndex.GroundCovers:
                        return GroundCovers;
                    case StarfieldMod_FieldIndex.MorphableObjects:
                        return MorphableObjects;
                    case StarfieldMod_FieldIndex.Traversals:
                        return Traversals;
                    case StarfieldMod_FieldIndex.ResourceGenerationData:
                        return ResourceGenerationData;
                    case StarfieldMod_FieldIndex.BiomeSwaps:
                        return BiomeSwaps;
                    case StarfieldMod_FieldIndex.Atmospheres:
                        return Atmospheres;
                    case StarfieldMod_FieldIndex.LeveledSpaceCells:
                        return LeveledSpaceCells;
                    case StarfieldMod_FieldIndex.SpeechChallenges:
                        return SpeechChallenges;
                    case StarfieldMod_FieldIndex.AimAssistPoses:
                        return AimAssistPoses;
                    case StarfieldMod_FieldIndex.VolumetricLightings:
                        return VolumetricLightings;
                    case StarfieldMod_FieldIndex.SurfaceBlocks:
                        return SurfaceBlocks;
                    case StarfieldMod_FieldIndex.SurfacePatternConfigs:
                        return SurfacePatternConfigs;
                    case StarfieldMod_FieldIndex.SurfacePatterns:
                        return SurfacePatterns;
                    case StarfieldMod_FieldIndex.SurfaceTrees:
                        return SurfaceTrees;
                    case StarfieldMod_FieldIndex.PlanetContentManagerTrees:
                        return PlanetContentManagerTrees;
                    case StarfieldMod_FieldIndex.BoneModifiers:
                        return BoneModifiers;
                    case StarfieldMod_FieldIndex.SnapTemplateBehaviors:
                        return SnapTemplateBehaviors;
                    case StarfieldMod_FieldIndex.Planets:
                        return Planets;
                    case StarfieldMod_FieldIndex.ConditionRecords:
                        return ConditionRecords;
                    case StarfieldMod_FieldIndex.PlanetContentManagerBranchNodes:
                        return PlanetContentManagerBranchNodes;
                    case StarfieldMod_FieldIndex.PlanetContentManagerContentNodes:
                        return PlanetContentManagerContentNodes;
                    case StarfieldMod_FieldIndex.Stars:
                        return Stars;
                    case StarfieldMod_FieldIndex.WWiseEventDatas:
                        return WWiseEventDatas;
                    case StarfieldMod_FieldIndex.ResearchProjects:
                        return ResearchProjects;
                    case StarfieldMod_FieldIndex.AimOpticalSightMarkers:
                        return AimOpticalSightMarkers;
                    case StarfieldMod_FieldIndex.AmbienceSets:
                        return AmbienceSets;
                    case StarfieldMod_FieldIndex.WeaponBarrelModels:
                        return WeaponBarrelModels;
                    case StarfieldMod_FieldIndex.SurfacePatternStyles:
                        return SurfacePatternStyles;
                    case StarfieldMod_FieldIndex.LayeredMaterialSwaps:
                        return LayeredMaterialSwaps;
                    case StarfieldMod_FieldIndex.ForceDatas:
                        return ForceDatas;
                    case StarfieldMod_FieldIndex.TerminalMenus:
                        return TerminalMenus;
                    case StarfieldMod_FieldIndex.EffectSequences:
                        return EffectSequences;
                    case StarfieldMod_FieldIndex.SecondaryDamageLists:
                        return SecondaryDamageLists;
                    case StarfieldMod_FieldIndex.MaterialPaths:
                        return MaterialPaths;
                    case StarfieldMod_FieldIndex.Clouds:
                        return Clouds;
                    case StarfieldMod_FieldIndex.FogVolumes:
                        return FogVolumes;
                    case StarfieldMod_FieldIndex.WWiseKeywordMappings:
                        return WWiseKeywordMappings;
                    case StarfieldMod_FieldIndex.LegendaryItems:
                        return LegendaryItems;
                    case StarfieldMod_FieldIndex.ParticleSystemDefineCollisions:
                        return ParticleSystemDefineCollisions;
                    case StarfieldMod_FieldIndex.SunPresets:
                        return SunPresets;
                    case StarfieldMod_FieldIndex.PhotoModeFeatures:
                        return PhotoModeFeatures;
                    case StarfieldMod_FieldIndex.GameplayOptions:
                        return GameplayOptions;
                    case StarfieldMod_FieldIndex.GameplayOptionsGroups:
                        return GameplayOptionsGroups;
                    case StarfieldMod_FieldIndex.TimeOfDays:
                        return TimeOfDays;
                    case StarfieldMod_FieldIndex.ActorValueModulations:
                        return ActorValueModulations;
                    case StarfieldMod_FieldIndex.Challenges:
                        return Challenges;
                    case StarfieldMod_FieldIndex.FacialExpressions:
                        return FacialExpressions;
                    case StarfieldMod_FieldIndex.PERS:
                        return PERS;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                StarfieldMod_FieldIndex enu = (StarfieldMod_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldMod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, StarfieldModHeader.ErrorMask?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, StarfieldGroup.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Keyword.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.FFKW:
                        this.FFKW = new MaskItem<Exception?, StarfieldGroup.ErrorMask<FFKWRecord.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LocationReferenceType.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Actions:
                        this.Actions = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ActionRecord.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Transforms:
                        this.Transforms = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Transform.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.TextureSets:
                        this.TextureSets = new MaskItem<Exception?, StarfieldGroup.ErrorMask<TextureSet.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Globals:
                        this.Globals = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Global.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.DamageTypes:
                        this.DamageTypes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<DamageType.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Classes:
                        this.Classes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Class.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Faction.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AffinityEvents:
                        this.AffinityEvents = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AffinityEvent.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, StarfieldGroup.ErrorMask<HeadPart.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Races:
                        this.Races = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Race.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SoundMarker.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SoundEchoMarkers:
                        this.SoundEchoMarkers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SoundEchoMarker.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AcousticSpace.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AudioOcclusionPrimitives:
                        this.AudioOcclusionPrimitives = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AudioOcclusionPrimitive.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.MagicEffects:
                        this.MagicEffects = new MaskItem<Exception?, StarfieldGroup.ErrorMask<MagicEffect.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LandscapeTexture.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ProjectedDecals:
                        this.ProjectedDecals = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ProjectedDecal.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ObjectEffect.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Spell.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Activators:
                        this.Activators = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Activator.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.CurveTables:
                        this.CurveTables = new MaskItem<Exception?, StarfieldGroup.ErrorMask<CurveTable.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Curve3Ds:
                        this.Curve3Ds = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Curve3D.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Armors:
                        this.Armors = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Armor.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Books:
                        this.Books = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Book.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Containers:
                        this.Containers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Container.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Doors:
                        this.Doors = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Door.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Lights:
                        this.Lights = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Light.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.MiscItems:
                        this.MiscItems = new MaskItem<Exception?, StarfieldGroup.ErrorMask<MiscItem.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Statics:
                        this.Statics = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Static.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.StaticCollections:
                        this.StaticCollections = new MaskItem<Exception?, StarfieldGroup.ErrorMask<StaticCollection.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.PackIns:
                        this.PackIns = new MaskItem<Exception?, StarfieldGroup.ErrorMask<PackIn.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.MoveableStatics:
                        this.MoveableStatics = new MaskItem<Exception?, StarfieldGroup.ErrorMask<MoveableStatic.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Grass.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Florae:
                        this.Florae = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Flora.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Furniture:
                        this.Furniture = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Furniture.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Weapons:
                        this.Weapons = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Weapon.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Ammunitions:
                        this.Ammunitions = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Ammunition.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Npcs:
                        this.Npcs = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Npc.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledNpc.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LeveledPackIns:
                        this.LeveledPackIns = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledPackIn.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Keys:
                        this.Keys = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Key.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Ingestibles:
                        this.Ingestibles = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Ingestible.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<IdleMarker.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.BiomeMarkers:
                        this.BiomeMarkers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<BiomeMarker.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Notes:
                        this.Notes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Note.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Projectiles:
                        this.Projectiles = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Projectile.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Hazards:
                        this.Hazards = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Hazard.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.BendableSplines:
                        this.BendableSplines = new MaskItem<Exception?, StarfieldGroup.ErrorMask<BendableSpline.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Terminals:
                        this.Terminals = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Terminal.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LeveledItems:
                        this.LeveledItems = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledItem.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.GenericBaseFormTemplates:
                        this.GenericBaseFormTemplates = new MaskItem<Exception?, StarfieldGroup.ErrorMask<GenericBaseFormTemplate.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.GenericBaseForms:
                        this.GenericBaseForms = new MaskItem<Exception?, StarfieldGroup.ErrorMask<GenericBaseForm.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LeveledBaseForms:
                        this.LeveledBaseForms = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledBaseForm.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Weathers:
                        this.Weathers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Weather.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.WeatherSettings:
                        this.WeatherSettings = new MaskItem<Exception?, StarfieldGroup.ErrorMask<WeatherSetting.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Climates:
                        this.Climates = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Climate.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ShaderParticleGeometries:
                        this.ShaderParticleGeometries = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ShaderParticleGeometry.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Region.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.NavigationMeshInfoMaps:
                        this.NavigationMeshInfoMaps = new MaskItem<Exception?, StarfieldGroup.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Cells:
                        this.Cells = new MaskItem<Exception?, StarfieldListGroup.ErrorMask<CellBlock.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Worldspaces:
                        this.Worldspaces = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Worldspace.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Quests:
                        this.Quests = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Quest.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = new MaskItem<Exception?, StarfieldGroup.ErrorMask<IdleAnimation.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Packages:
                        this.Packages = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Package.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.CombatStyles:
                        this.CombatStyles = new MaskItem<Exception?, StarfieldGroup.ErrorMask<CombatStyle.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LoadScreens:
                        this.LoadScreens = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LoadScreen.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AnimatedObject.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Waters:
                        this.Waters = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Water.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.EffectShaders:
                        this.EffectShaders = new MaskItem<Exception?, StarfieldGroup.ErrorMask<EffectShader.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Explosions:
                        this.Explosions = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Explosion.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Debris:
                        this.Debris = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Debris.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ImageSpaces:
                        this.ImageSpaces = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ImageSpace.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ImageSpaceAdapters:
                        this.ImageSpaceAdapters = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ImageSpaceAdapter.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.FormLists:
                        this.FormLists = new MaskItem<Exception?, StarfieldGroup.ErrorMask<FormList.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Perks:
                        this.Perks = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Perk.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.BodyParts:
                        this.BodyParts = new MaskItem<Exception?, StarfieldGroup.ErrorMask<BodyPartData.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AddonNodes:
                        this.AddonNodes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AddonNode.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ActorValueInformation:
                        this.ActorValueInformation = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ActorValueInformation.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.CameraShots:
                        this.CameraShots = new MaskItem<Exception?, StarfieldGroup.ErrorMask<CameraShot.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.CameraPaths:
                        this.CameraPaths = new MaskItem<Exception?, StarfieldGroup.ErrorMask<CameraPath.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.VoiceTypes:
                        this.VoiceTypes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<VoiceType.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.MaterialTypes:
                        this.MaterialTypes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<MaterialType.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Impacts:
                        this.Impacts = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Impact.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ImpactDataSets:
                        this.ImpactDataSets = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ImpactDataSet.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ArmorAddons:
                        this.ArmorAddons = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ArmorAddon.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Locations:
                        this.Locations = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Location.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Messages:
                        this.Messages = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Message.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.DefaultObjectManagers:
                        this.DefaultObjectManagers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<DefaultObjectManager.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.DefaultObjects:
                        this.DefaultObjects = new MaskItem<Exception?, StarfieldGroup.ErrorMask<DefaultObject.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LightingTemplates:
                        this.LightingTemplates = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LightingTemplate.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.MusicTypes:
                        this.MusicTypes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<MusicType.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Footsteps:
                        this.Footsteps = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Footstep.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.FootstepSets:
                        this.FootstepSets = new MaskItem<Exception?, StarfieldGroup.ErrorMask<FootstepSet.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.StoryManagerBranchNodes:
                        this.StoryManagerBranchNodes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<StoryManagerBranchNode.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.StoryManagerQuestNodes:
                        this.StoryManagerQuestNodes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<StoryManagerQuestNode.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.StoryManagerEventNodes:
                        this.StoryManagerEventNodes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<StoryManagerEventNode.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.MusicTracks:
                        this.MusicTracks = new MaskItem<Exception?, StarfieldGroup.ErrorMask<MusicTrack.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.EquipTypes:
                        this.EquipTypes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<EquipType.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Outfits:
                        this.Outfits = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Outfit.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ArtObjects:
                        this.ArtObjects = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ArtObject.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.MovementTypes:
                        this.MovementTypes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<MovementType.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.CollisionLayers:
                        this.CollisionLayers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<CollisionLayer.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Colors:
                        this.Colors = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ColorRecord.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ReverbParameters:
                        this.ReverbParameters = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ReverbParameters.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ReferenceGroups:
                        this.ReferenceGroups = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ReferenceGroup.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AimModels:
                        this.AimModels = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AimModel.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AimAssistModels:
                        this.AimAssistModels = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AimAssistModel.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.MeleeAimAssistModels:
                        this.MeleeAimAssistModels = new MaskItem<Exception?, StarfieldGroup.ErrorMask<MeleeAimAssistModel.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Layers:
                        this.Layers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Layer.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ConstructibleObject.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ObjectModifications:
                        this.ObjectModifications = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AObjectModification.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Zooms:
                        this.Zooms = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Zoom.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.InstanceNamingRules:
                        this.InstanceNamingRules = new MaskItem<Exception?, StarfieldGroup.ErrorMask<InstanceNamingRules.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SoundKeywordMappings:
                        this.SoundKeywordMappings = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SoundKeywordMapping.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AttractionRules:
                        this.AttractionRules = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AttractionRule.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SceneCollections:
                        this.SceneCollections = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SceneCollection.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AnimationSoundTagSets:
                        this.AnimationSoundTagSets = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AnimationSoundTagSet.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Resources:
                        this.Resources = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Resource.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Biomes:
                        this.Biomes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Biome.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.NavigationMeshObstacleCoverManagers:
                        this.NavigationMeshObstacleCoverManagers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<NavigationMeshObstacleCoverManager.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LensFlares:
                        this.LensFlares = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LensFlare.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ObjectVisibilityManagers:
                        this.ObjectVisibilityManagers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ObjectVisibilityManager.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SnapTemplateNodes:
                        this.SnapTemplateNodes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SnapTemplateNode.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SnapTemplates:
                        this.SnapTemplates = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SnapTemplate.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.GroundCovers:
                        this.GroundCovers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<GroundCover.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.MorphableObjects:
                        this.MorphableObjects = new MaskItem<Exception?, StarfieldGroup.ErrorMask<MorphableObject.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Traversals:
                        this.Traversals = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Traversal.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ResourceGenerationData:
                        this.ResourceGenerationData = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ResourceGenerationData.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.BiomeSwaps:
                        this.BiomeSwaps = new MaskItem<Exception?, StarfieldGroup.ErrorMask<BiomeSwap.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Atmospheres:
                        this.Atmospheres = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Atmosphere.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LeveledSpaceCells:
                        this.LeveledSpaceCells = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledSpaceCell.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SpeechChallenges:
                        this.SpeechChallenges = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SpeechChallenge.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AimAssistPoses:
                        this.AimAssistPoses = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AimAssistPose.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.VolumetricLightings:
                        this.VolumetricLightings = new MaskItem<Exception?, StarfieldGroup.ErrorMask<VolumetricLighting.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SurfaceBlocks:
                        this.SurfaceBlocks = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfaceBlock.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SurfacePatternConfigs:
                        this.SurfacePatternConfigs = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePatternConfig.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SurfacePatterns:
                        this.SurfacePatterns = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePattern.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SurfaceTrees:
                        this.SurfaceTrees = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfaceTree.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.PlanetContentManagerTrees:
                        this.PlanetContentManagerTrees = new MaskItem<Exception?, StarfieldGroup.ErrorMask<PlanetContentManagerTree.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.BoneModifiers:
                        this.BoneModifiers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<BoneModifier.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SnapTemplateBehaviors:
                        this.SnapTemplateBehaviors = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SnapTemplateBehavior.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Planets:
                        this.Planets = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Planet.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ConditionRecords:
                        this.ConditionRecords = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ConditionRecord.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.PlanetContentManagerBranchNodes:
                        this.PlanetContentManagerBranchNodes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<PlanetContentManagerBranchNode.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.PlanetContentManagerContentNodes:
                        this.PlanetContentManagerContentNodes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<PlanetContentManagerContentNode.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Stars:
                        this.Stars = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Star.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.WWiseEventDatas:
                        this.WWiseEventDatas = new MaskItem<Exception?, StarfieldGroup.ErrorMask<WWiseEventData.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ResearchProjects:
                        this.ResearchProjects = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ResearchProject.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AimOpticalSightMarkers:
                        this.AimOpticalSightMarkers = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AimOpticalSightMarker.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.AmbienceSets:
                        this.AmbienceSets = new MaskItem<Exception?, StarfieldGroup.ErrorMask<AmbienceSet.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.WeaponBarrelModels:
                        this.WeaponBarrelModels = new MaskItem<Exception?, StarfieldGroup.ErrorMask<WeaponBarrelModel.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SurfacePatternStyles:
                        this.SurfacePatternStyles = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePatternStyle.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LayeredMaterialSwaps:
                        this.LayeredMaterialSwaps = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LayeredMaterialSwap.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ForceDatas:
                        this.ForceDatas = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ForceData.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.TerminalMenus:
                        this.TerminalMenus = new MaskItem<Exception?, StarfieldGroup.ErrorMask<TerminalMenu.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.EffectSequences:
                        this.EffectSequences = new MaskItem<Exception?, StarfieldGroup.ErrorMask<EffectSequence.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SecondaryDamageLists:
                        this.SecondaryDamageLists = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SecondaryDamageList.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.MaterialPaths:
                        this.MaterialPaths = new MaskItem<Exception?, StarfieldGroup.ErrorMask<MaterialPath.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Clouds:
                        this.Clouds = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Clouds.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.FogVolumes:
                        this.FogVolumes = new MaskItem<Exception?, StarfieldGroup.ErrorMask<FogVolume.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.WWiseKeywordMappings:
                        this.WWiseKeywordMappings = new MaskItem<Exception?, StarfieldGroup.ErrorMask<WWiseKeywordMapping.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.LegendaryItems:
                        this.LegendaryItems = new MaskItem<Exception?, StarfieldGroup.ErrorMask<LegendaryItem.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ParticleSystemDefineCollisions:
                        this.ParticleSystemDefineCollisions = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ParticleSystemDefineCollision.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.SunPresets:
                        this.SunPresets = new MaskItem<Exception?, StarfieldGroup.ErrorMask<SunPreset.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.PhotoModeFeatures:
                        this.PhotoModeFeatures = new MaskItem<Exception?, StarfieldGroup.ErrorMask<PhotoModeFeature.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.GameplayOptions:
                        this.GameplayOptions = new MaskItem<Exception?, StarfieldGroup.ErrorMask<GameplayOptions.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.GameplayOptionsGroups:
                        this.GameplayOptionsGroups = new MaskItem<Exception?, StarfieldGroup.ErrorMask<GameplayOptionsGroup.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.TimeOfDays:
                        this.TimeOfDays = new MaskItem<Exception?, StarfieldGroup.ErrorMask<TimeOfDayRecord.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.ActorValueModulations:
                        this.ActorValueModulations = new MaskItem<Exception?, StarfieldGroup.ErrorMask<ActorValueModulation.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.Challenges:
                        this.Challenges = new MaskItem<Exception?, StarfieldGroup.ErrorMask<Challenge.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.FacialExpressions:
                        this.FacialExpressions = new MaskItem<Exception?, StarfieldGroup.ErrorMask<FacialExpression.ErrorMask>?>(ex, null);
                        break;
                    case StarfieldMod_FieldIndex.PERS:
                        this.PERS = new MaskItem<Exception?, StarfieldGroup.ErrorMask<PERS.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                StarfieldMod_FieldIndex enu = (StarfieldMod_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldMod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, StarfieldModHeader.ErrorMask?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, StarfieldGroup.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Keyword.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.FFKW:
                        this.FFKW = (MaskItem<Exception?, StarfieldGroup.ErrorMask<FFKWRecord.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LocationReferenceType.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Actions:
                        this.Actions = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ActionRecord.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Transforms:
                        this.Transforms = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Transform.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.TextureSets:
                        this.TextureSets = (MaskItem<Exception?, StarfieldGroup.ErrorMask<TextureSet.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Globals:
                        this.Globals = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Global.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.DamageTypes:
                        this.DamageTypes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<DamageType.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Classes:
                        this.Classes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Class.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Faction.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AffinityEvents:
                        this.AffinityEvents = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AffinityEvent.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, StarfieldGroup.ErrorMask<HeadPart.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Races:
                        this.Races = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Race.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SoundMarker.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SoundEchoMarkers:
                        this.SoundEchoMarkers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SoundEchoMarker.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AcousticSpace.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AudioOcclusionPrimitives:
                        this.AudioOcclusionPrimitives = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AudioOcclusionPrimitive.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.MagicEffects:
                        this.MagicEffects = (MaskItem<Exception?, StarfieldGroup.ErrorMask<MagicEffect.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LandscapeTexture.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ProjectedDecals:
                        this.ProjectedDecals = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ProjectedDecal.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ObjectEffect.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Spell.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Activators:
                        this.Activators = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Activator.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.CurveTables:
                        this.CurveTables = (MaskItem<Exception?, StarfieldGroup.ErrorMask<CurveTable.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Curve3Ds:
                        this.Curve3Ds = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Curve3D.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Armors:
                        this.Armors = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Armor.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Books:
                        this.Books = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Book.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Containers:
                        this.Containers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Container.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Doors:
                        this.Doors = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Door.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Lights:
                        this.Lights = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Light.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.MiscItems:
                        this.MiscItems = (MaskItem<Exception?, StarfieldGroup.ErrorMask<MiscItem.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Statics:
                        this.Statics = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Static.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.StaticCollections:
                        this.StaticCollections = (MaskItem<Exception?, StarfieldGroup.ErrorMask<StaticCollection.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.PackIns:
                        this.PackIns = (MaskItem<Exception?, StarfieldGroup.ErrorMask<PackIn.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.MoveableStatics:
                        this.MoveableStatics = (MaskItem<Exception?, StarfieldGroup.ErrorMask<MoveableStatic.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Grass.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Florae:
                        this.Florae = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Flora.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Furniture:
                        this.Furniture = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Furniture.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Weapons:
                        this.Weapons = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Weapon.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Ammunitions:
                        this.Ammunitions = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Ammunition.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Npcs:
                        this.Npcs = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Npc.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledNpc.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LeveledPackIns:
                        this.LeveledPackIns = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledPackIn.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Keys:
                        this.Keys = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Key.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Ingestibles:
                        this.Ingestibles = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Ingestible.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<IdleMarker.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.BiomeMarkers:
                        this.BiomeMarkers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<BiomeMarker.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Notes:
                        this.Notes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Note.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Projectiles:
                        this.Projectiles = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Projectile.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Hazards:
                        this.Hazards = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Hazard.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.BendableSplines:
                        this.BendableSplines = (MaskItem<Exception?, StarfieldGroup.ErrorMask<BendableSpline.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Terminals:
                        this.Terminals = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Terminal.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LeveledItems:
                        this.LeveledItems = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledItem.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.GenericBaseFormTemplates:
                        this.GenericBaseFormTemplates = (MaskItem<Exception?, StarfieldGroup.ErrorMask<GenericBaseFormTemplate.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.GenericBaseForms:
                        this.GenericBaseForms = (MaskItem<Exception?, StarfieldGroup.ErrorMask<GenericBaseForm.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LeveledBaseForms:
                        this.LeveledBaseForms = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledBaseForm.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Weathers:
                        this.Weathers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Weather.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.WeatherSettings:
                        this.WeatherSettings = (MaskItem<Exception?, StarfieldGroup.ErrorMask<WeatherSetting.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Climates:
                        this.Climates = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Climate.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ShaderParticleGeometries:
                        this.ShaderParticleGeometries = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ShaderParticleGeometry.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Region.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.NavigationMeshInfoMaps:
                        this.NavigationMeshInfoMaps = (MaskItem<Exception?, StarfieldGroup.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Cells:
                        this.Cells = (MaskItem<Exception?, StarfieldListGroup.ErrorMask<CellBlock.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Worldspaces:
                        this.Worldspaces = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Worldspace.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Quests:
                        this.Quests = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Quest.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = (MaskItem<Exception?, StarfieldGroup.ErrorMask<IdleAnimation.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Packages:
                        this.Packages = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Package.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.CombatStyles:
                        this.CombatStyles = (MaskItem<Exception?, StarfieldGroup.ErrorMask<CombatStyle.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LoadScreens:
                        this.LoadScreens = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LoadScreen.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AnimatedObject.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Waters:
                        this.Waters = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Water.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.EffectShaders:
                        this.EffectShaders = (MaskItem<Exception?, StarfieldGroup.ErrorMask<EffectShader.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Explosions:
                        this.Explosions = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Explosion.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Debris:
                        this.Debris = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Debris.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ImageSpaces:
                        this.ImageSpaces = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ImageSpace.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ImageSpaceAdapters:
                        this.ImageSpaceAdapters = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ImageSpaceAdapter.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.FormLists:
                        this.FormLists = (MaskItem<Exception?, StarfieldGroup.ErrorMask<FormList.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Perks:
                        this.Perks = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Perk.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.BodyParts:
                        this.BodyParts = (MaskItem<Exception?, StarfieldGroup.ErrorMask<BodyPartData.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AddonNodes:
                        this.AddonNodes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AddonNode.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ActorValueInformation:
                        this.ActorValueInformation = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ActorValueInformation.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.CameraShots:
                        this.CameraShots = (MaskItem<Exception?, StarfieldGroup.ErrorMask<CameraShot.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.CameraPaths:
                        this.CameraPaths = (MaskItem<Exception?, StarfieldGroup.ErrorMask<CameraPath.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.VoiceTypes:
                        this.VoiceTypes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<VoiceType.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.MaterialTypes:
                        this.MaterialTypes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<MaterialType.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Impacts:
                        this.Impacts = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Impact.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ImpactDataSets:
                        this.ImpactDataSets = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ImpactDataSet.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ArmorAddons:
                        this.ArmorAddons = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ArmorAddon.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Locations:
                        this.Locations = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Location.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Messages:
                        this.Messages = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Message.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.DefaultObjectManagers:
                        this.DefaultObjectManagers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<DefaultObjectManager.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.DefaultObjects:
                        this.DefaultObjects = (MaskItem<Exception?, StarfieldGroup.ErrorMask<DefaultObject.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LightingTemplates:
                        this.LightingTemplates = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LightingTemplate.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.MusicTypes:
                        this.MusicTypes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<MusicType.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Footsteps:
                        this.Footsteps = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Footstep.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.FootstepSets:
                        this.FootstepSets = (MaskItem<Exception?, StarfieldGroup.ErrorMask<FootstepSet.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.StoryManagerBranchNodes:
                        this.StoryManagerBranchNodes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<StoryManagerBranchNode.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.StoryManagerQuestNodes:
                        this.StoryManagerQuestNodes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<StoryManagerQuestNode.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.StoryManagerEventNodes:
                        this.StoryManagerEventNodes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<StoryManagerEventNode.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.MusicTracks:
                        this.MusicTracks = (MaskItem<Exception?, StarfieldGroup.ErrorMask<MusicTrack.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.EquipTypes:
                        this.EquipTypes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<EquipType.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Outfits:
                        this.Outfits = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Outfit.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ArtObjects:
                        this.ArtObjects = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ArtObject.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.MovementTypes:
                        this.MovementTypes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<MovementType.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.CollisionLayers:
                        this.CollisionLayers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<CollisionLayer.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Colors:
                        this.Colors = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ColorRecord.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ReverbParameters:
                        this.ReverbParameters = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ReverbParameters.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ReferenceGroups:
                        this.ReferenceGroups = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ReferenceGroup.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AimModels:
                        this.AimModels = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AimModel.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AimAssistModels:
                        this.AimAssistModels = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AimAssistModel.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.MeleeAimAssistModels:
                        this.MeleeAimAssistModels = (MaskItem<Exception?, StarfieldGroup.ErrorMask<MeleeAimAssistModel.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Layers:
                        this.Layers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Layer.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ConstructibleObject.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ObjectModifications:
                        this.ObjectModifications = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AObjectModification.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Zooms:
                        this.Zooms = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Zoom.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.InstanceNamingRules:
                        this.InstanceNamingRules = (MaskItem<Exception?, StarfieldGroup.ErrorMask<InstanceNamingRules.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SoundKeywordMappings:
                        this.SoundKeywordMappings = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SoundKeywordMapping.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AttractionRules:
                        this.AttractionRules = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AttractionRule.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SceneCollections:
                        this.SceneCollections = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SceneCollection.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AnimationSoundTagSets:
                        this.AnimationSoundTagSets = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AnimationSoundTagSet.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Resources:
                        this.Resources = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Resource.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Biomes:
                        this.Biomes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Biome.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.NavigationMeshObstacleCoverManagers:
                        this.NavigationMeshObstacleCoverManagers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<NavigationMeshObstacleCoverManager.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LensFlares:
                        this.LensFlares = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LensFlare.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ObjectVisibilityManagers:
                        this.ObjectVisibilityManagers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ObjectVisibilityManager.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SnapTemplateNodes:
                        this.SnapTemplateNodes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SnapTemplateNode.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SnapTemplates:
                        this.SnapTemplates = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SnapTemplate.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.GroundCovers:
                        this.GroundCovers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<GroundCover.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.MorphableObjects:
                        this.MorphableObjects = (MaskItem<Exception?, StarfieldGroup.ErrorMask<MorphableObject.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Traversals:
                        this.Traversals = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Traversal.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ResourceGenerationData:
                        this.ResourceGenerationData = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ResourceGenerationData.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.BiomeSwaps:
                        this.BiomeSwaps = (MaskItem<Exception?, StarfieldGroup.ErrorMask<BiomeSwap.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Atmospheres:
                        this.Atmospheres = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Atmosphere.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LeveledSpaceCells:
                        this.LeveledSpaceCells = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LeveledSpaceCell.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SpeechChallenges:
                        this.SpeechChallenges = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SpeechChallenge.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AimAssistPoses:
                        this.AimAssistPoses = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AimAssistPose.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.VolumetricLightings:
                        this.VolumetricLightings = (MaskItem<Exception?, StarfieldGroup.ErrorMask<VolumetricLighting.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SurfaceBlocks:
                        this.SurfaceBlocks = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfaceBlock.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SurfacePatternConfigs:
                        this.SurfacePatternConfigs = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePatternConfig.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SurfacePatterns:
                        this.SurfacePatterns = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePattern.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SurfaceTrees:
                        this.SurfaceTrees = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfaceTree.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.PlanetContentManagerTrees:
                        this.PlanetContentManagerTrees = (MaskItem<Exception?, StarfieldGroup.ErrorMask<PlanetContentManagerTree.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.BoneModifiers:
                        this.BoneModifiers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<BoneModifier.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SnapTemplateBehaviors:
                        this.SnapTemplateBehaviors = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SnapTemplateBehavior.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Planets:
                        this.Planets = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Planet.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ConditionRecords:
                        this.ConditionRecords = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ConditionRecord.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.PlanetContentManagerBranchNodes:
                        this.PlanetContentManagerBranchNodes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<PlanetContentManagerBranchNode.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.PlanetContentManagerContentNodes:
                        this.PlanetContentManagerContentNodes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<PlanetContentManagerContentNode.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Stars:
                        this.Stars = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Star.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.WWiseEventDatas:
                        this.WWiseEventDatas = (MaskItem<Exception?, StarfieldGroup.ErrorMask<WWiseEventData.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ResearchProjects:
                        this.ResearchProjects = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ResearchProject.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AimOpticalSightMarkers:
                        this.AimOpticalSightMarkers = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AimOpticalSightMarker.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.AmbienceSets:
                        this.AmbienceSets = (MaskItem<Exception?, StarfieldGroup.ErrorMask<AmbienceSet.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.WeaponBarrelModels:
                        this.WeaponBarrelModels = (MaskItem<Exception?, StarfieldGroup.ErrorMask<WeaponBarrelModel.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SurfacePatternStyles:
                        this.SurfacePatternStyles = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SurfacePatternStyle.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LayeredMaterialSwaps:
                        this.LayeredMaterialSwaps = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LayeredMaterialSwap.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ForceDatas:
                        this.ForceDatas = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ForceData.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.TerminalMenus:
                        this.TerminalMenus = (MaskItem<Exception?, StarfieldGroup.ErrorMask<TerminalMenu.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.EffectSequences:
                        this.EffectSequences = (MaskItem<Exception?, StarfieldGroup.ErrorMask<EffectSequence.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SecondaryDamageLists:
                        this.SecondaryDamageLists = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SecondaryDamageList.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.MaterialPaths:
                        this.MaterialPaths = (MaskItem<Exception?, StarfieldGroup.ErrorMask<MaterialPath.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Clouds:
                        this.Clouds = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Clouds.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.FogVolumes:
                        this.FogVolumes = (MaskItem<Exception?, StarfieldGroup.ErrorMask<FogVolume.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.WWiseKeywordMappings:
                        this.WWiseKeywordMappings = (MaskItem<Exception?, StarfieldGroup.ErrorMask<WWiseKeywordMapping.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.LegendaryItems:
                        this.LegendaryItems = (MaskItem<Exception?, StarfieldGroup.ErrorMask<LegendaryItem.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ParticleSystemDefineCollisions:
                        this.ParticleSystemDefineCollisions = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ParticleSystemDefineCollision.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.SunPresets:
                        this.SunPresets = (MaskItem<Exception?, StarfieldGroup.ErrorMask<SunPreset.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.PhotoModeFeatures:
                        this.PhotoModeFeatures = (MaskItem<Exception?, StarfieldGroup.ErrorMask<PhotoModeFeature.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.GameplayOptions:
                        this.GameplayOptions = (MaskItem<Exception?, StarfieldGroup.ErrorMask<GameplayOptions.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.GameplayOptionsGroups:
                        this.GameplayOptionsGroups = (MaskItem<Exception?, StarfieldGroup.ErrorMask<GameplayOptionsGroup.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.TimeOfDays:
                        this.TimeOfDays = (MaskItem<Exception?, StarfieldGroup.ErrorMask<TimeOfDayRecord.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.ActorValueModulations:
                        this.ActorValueModulations = (MaskItem<Exception?, StarfieldGroup.ErrorMask<ActorValueModulation.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.Challenges:
                        this.Challenges = (MaskItem<Exception?, StarfieldGroup.ErrorMask<Challenge.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.FacialExpressions:
                        this.FacialExpressions = (MaskItem<Exception?, StarfieldGroup.ErrorMask<FacialExpression.ErrorMask>?>?)obj;
                        break;
                    case StarfieldMod_FieldIndex.PERS:
                        this.PERS = (MaskItem<Exception?, StarfieldGroup.ErrorMask<PERS.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (Keywords != null) return true;
                if (FFKW != null) return true;
                if (LocationReferenceTypes != null) return true;
                if (Actions != null) return true;
                if (Transforms != null) return true;
                if (TextureSets != null) return true;
                if (Globals != null) return true;
                if (DamageTypes != null) return true;
                if (Classes != null) return true;
                if (Factions != null) return true;
                if (AffinityEvents != null) return true;
                if (HeadParts != null) return true;
                if (Races != null) return true;
                if (SoundMarkers != null) return true;
                if (SoundEchoMarkers != null) return true;
                if (AcousticSpaces != null) return true;
                if (AudioOcclusionPrimitives != null) return true;
                if (MagicEffects != null) return true;
                if (LandscapeTextures != null) return true;
                if (ProjectedDecals != null) return true;
                if (ObjectEffects != null) return true;
                if (Spells != null) return true;
                if (Activators != null) return true;
                if (CurveTables != null) return true;
                if (Curve3Ds != null) return true;
                if (Armors != null) return true;
                if (Books != null) return true;
                if (Containers != null) return true;
                if (Doors != null) return true;
                if (Lights != null) return true;
                if (MiscItems != null) return true;
                if (Statics != null) return true;
                if (StaticCollections != null) return true;
                if (PackIns != null) return true;
                if (MoveableStatics != null) return true;
                if (Grasses != null) return true;
                if (Florae != null) return true;
                if (Furniture != null) return true;
                if (Weapons != null) return true;
                if (Ammunitions != null) return true;
                if (Npcs != null) return true;
                if (LeveledNpcs != null) return true;
                if (LeveledPackIns != null) return true;
                if (Keys != null) return true;
                if (Ingestibles != null) return true;
                if (IdleMarkers != null) return true;
                if (BiomeMarkers != null) return true;
                if (Notes != null) return true;
                if (Projectiles != null) return true;
                if (Hazards != null) return true;
                if (BendableSplines != null) return true;
                if (Terminals != null) return true;
                if (LeveledItems != null) return true;
                if (GenericBaseFormTemplates != null) return true;
                if (GenericBaseForms != null) return true;
                if (LeveledBaseForms != null) return true;
                if (Weathers != null) return true;
                if (WeatherSettings != null) return true;
                if (Climates != null) return true;
                if (ShaderParticleGeometries != null) return true;
                if (Regions != null) return true;
                if (NavigationMeshInfoMaps != null) return true;
                if (Cells != null) return true;
                if (Worldspaces != null) return true;
                if (Quests != null) return true;
                if (IdleAnimations != null) return true;
                if (Packages != null) return true;
                if (CombatStyles != null) return true;
                if (LoadScreens != null) return true;
                if (AnimatedObjects != null) return true;
                if (Waters != null) return true;
                if (EffectShaders != null) return true;
                if (Explosions != null) return true;
                if (Debris != null) return true;
                if (ImageSpaces != null) return true;
                if (ImageSpaceAdapters != null) return true;
                if (FormLists != null) return true;
                if (Perks != null) return true;
                if (BodyParts != null) return true;
                if (AddonNodes != null) return true;
                if (ActorValueInformation != null) return true;
                if (CameraShots != null) return true;
                if (CameraPaths != null) return true;
                if (VoiceTypes != null) return true;
                if (MaterialTypes != null) return true;
                if (Impacts != null) return true;
                if (ImpactDataSets != null) return true;
                if (ArmorAddons != null) return true;
                if (Locations != null) return true;
                if (Messages != null) return true;
                if (DefaultObjectManagers != null) return true;
                if (DefaultObjects != null) return true;
                if (LightingTemplates != null) return true;
                if (MusicTypes != null) return true;
                if (Footsteps != null) return true;
                if (FootstepSets != null) return true;
                if (StoryManagerBranchNodes != null) return true;
                if (StoryManagerQuestNodes != null) return true;
                if (StoryManagerEventNodes != null) return true;
                if (MusicTracks != null) return true;
                if (EquipTypes != null) return true;
                if (Outfits != null) return true;
                if (ArtObjects != null) return true;
                if (MovementTypes != null) return true;
                if (CollisionLayers != null) return true;
                if (Colors != null) return true;
                if (ReverbParameters != null) return true;
                if (ReferenceGroups != null) return true;
                if (AimModels != null) return true;
                if (AimAssistModels != null) return true;
                if (MeleeAimAssistModels != null) return true;
                if (Layers != null) return true;
                if (ConstructibleObjects != null) return true;
                if (ObjectModifications != null) return true;
                if (Zooms != null) return true;
                if (InstanceNamingRules != null) return true;
                if (SoundKeywordMappings != null) return true;
                if (AttractionRules != null) return true;
                if (SceneCollections != null) return true;
                if (AnimationSoundTagSets != null) return true;
                if (Resources != null) return true;
                if (Biomes != null) return true;
                if (NavigationMeshObstacleCoverManagers != null) return true;
                if (LensFlares != null) return true;
                if (ObjectVisibilityManagers != null) return true;
                if (SnapTemplateNodes != null) return true;
                if (SnapTemplates != null) return true;
                if (GroundCovers != null) return true;
                if (MorphableObjects != null) return true;
                if (Traversals != null) return true;
                if (ResourceGenerationData != null) return true;
                if (BiomeSwaps != null) return true;
                if (Atmospheres != null) return true;
                if (LeveledSpaceCells != null) return true;
                if (SpeechChallenges != null) return true;
                if (AimAssistPoses != null) return true;
                if (VolumetricLightings != null) return true;
                if (SurfaceBlocks != null) return true;
                if (SurfacePatternConfigs != null) return true;
                if (SurfacePatterns != null) return true;
                if (SurfaceTrees != null) return true;
                if (PlanetContentManagerTrees != null) return true;
                if (BoneModifiers != null) return true;
                if (SnapTemplateBehaviors != null) return true;
                if (Planets != null) return true;
                if (ConditionRecords != null) return true;
                if (PlanetContentManagerBranchNodes != null) return true;
                if (PlanetContentManagerContentNodes != null) return true;
                if (Stars != null) return true;
                if (WWiseEventDatas != null) return true;
                if (ResearchProjects != null) return true;
                if (AimOpticalSightMarkers != null) return true;
                if (AmbienceSets != null) return true;
                if (WeaponBarrelModels != null) return true;
                if (SurfacePatternStyles != null) return true;
                if (LayeredMaterialSwaps != null) return true;
                if (ForceDatas != null) return true;
                if (TerminalMenus != null) return true;
                if (EffectSequences != null) return true;
                if (SecondaryDamageLists != null) return true;
                if (MaterialPaths != null) return true;
                if (Clouds != null) return true;
                if (FogVolumes != null) return true;
                if (WWiseKeywordMappings != null) return true;
                if (LegendaryItems != null) return true;
                if (ParticleSystemDefineCollisions != null) return true;
                if (SunPresets != null) return true;
                if (PhotoModeFeatures != null) return true;
                if (GameplayOptions != null) return true;
                if (GameplayOptionsGroups != null) return true;
                if (TimeOfDays != null) return true;
                if (ActorValueModulations != null) return true;
                if (Challenges != null) return true;
                if (FacialExpressions != null) return true;
                if (PERS != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                ModHeader?.Print(sb);
                GameSettings?.Print(sb);
                Keywords?.Print(sb);
                FFKW?.Print(sb);
                LocationReferenceTypes?.Print(sb);
                Actions?.Print(sb);
                Transforms?.Print(sb);
                TextureSets?.Print(sb);
                Globals?.Print(sb);
                DamageTypes?.Print(sb);
                Classes?.Print(sb);
                Factions?.Print(sb);
                AffinityEvents?.Print(sb);
                HeadParts?.Print(sb);
                Races?.Print(sb);
                SoundMarkers?.Print(sb);
                SoundEchoMarkers?.Print(sb);
                AcousticSpaces?.Print(sb);
                AudioOcclusionPrimitives?.Print(sb);
                MagicEffects?.Print(sb);
                LandscapeTextures?.Print(sb);
                ProjectedDecals?.Print(sb);
                ObjectEffects?.Print(sb);
                Spells?.Print(sb);
                Activators?.Print(sb);
                CurveTables?.Print(sb);
                Curve3Ds?.Print(sb);
                Armors?.Print(sb);
                Books?.Print(sb);
                Containers?.Print(sb);
                Doors?.Print(sb);
                Lights?.Print(sb);
                MiscItems?.Print(sb);
                Statics?.Print(sb);
                StaticCollections?.Print(sb);
                PackIns?.Print(sb);
                MoveableStatics?.Print(sb);
                Grasses?.Print(sb);
                Florae?.Print(sb);
                Furniture?.Print(sb);
                Weapons?.Print(sb);
                Ammunitions?.Print(sb);
                Npcs?.Print(sb);
                LeveledNpcs?.Print(sb);
                LeveledPackIns?.Print(sb);
                Keys?.Print(sb);
                Ingestibles?.Print(sb);
                IdleMarkers?.Print(sb);
                BiomeMarkers?.Print(sb);
                Notes?.Print(sb);
                Projectiles?.Print(sb);
                Hazards?.Print(sb);
                BendableSplines?.Print(sb);
                Terminals?.Print(sb);
                LeveledItems?.Print(sb);
                GenericBaseFormTemplates?.Print(sb);
                GenericBaseForms?.Print(sb);
                LeveledBaseForms?.Print(sb);
                Weathers?.Print(sb);
                WeatherSettings?.Print(sb);
                Climates?.Print(sb);
                ShaderParticleGeometries?.Print(sb);
                Regions?.Print(sb);
                NavigationMeshInfoMaps?.Print(sb);
                Cells?.Print(sb);
                Worldspaces?.Print(sb);
                Quests?.Print(sb);
                IdleAnimations?.Print(sb);
                Packages?.Print(sb);
                CombatStyles?.Print(sb);
                LoadScreens?.Print(sb);
                AnimatedObjects?.Print(sb);
                Waters?.Print(sb);
                EffectShaders?.Print(sb);
                Explosions?.Print(sb);
                Debris?.Print(sb);
                ImageSpaces?.Print(sb);
                ImageSpaceAdapters?.Print(sb);
                FormLists?.Print(sb);
                Perks?.Print(sb);
                BodyParts?.Print(sb);
                AddonNodes?.Print(sb);
                ActorValueInformation?.Print(sb);
                CameraShots?.Print(sb);
                CameraPaths?.Print(sb);
                VoiceTypes?.Print(sb);
                MaterialTypes?.Print(sb);
                Impacts?.Print(sb);
                ImpactDataSets?.Print(sb);
                ArmorAddons?.Print(sb);
                Locations?.Print(sb);
                Messages?.Print(sb);
                DefaultObjectManagers?.Print(sb);
                DefaultObjects?.Print(sb);
                LightingTemplates?.Print(sb);
                MusicTypes?.Print(sb);
                Footsteps?.Print(sb);
                FootstepSets?.Print(sb);
                StoryManagerBranchNodes?.Print(sb);
                StoryManagerQuestNodes?.Print(sb);
                StoryManagerEventNodes?.Print(sb);
                MusicTracks?.Print(sb);
                EquipTypes?.Print(sb);
                Outfits?.Print(sb);
                ArtObjects?.Print(sb);
                MovementTypes?.Print(sb);
                CollisionLayers?.Print(sb);
                Colors?.Print(sb);
                ReverbParameters?.Print(sb);
                ReferenceGroups?.Print(sb);
                AimModels?.Print(sb);
                AimAssistModels?.Print(sb);
                MeleeAimAssistModels?.Print(sb);
                Layers?.Print(sb);
                ConstructibleObjects?.Print(sb);
                ObjectModifications?.Print(sb);
                Zooms?.Print(sb);
                InstanceNamingRules?.Print(sb);
                SoundKeywordMappings?.Print(sb);
                AttractionRules?.Print(sb);
                SceneCollections?.Print(sb);
                AnimationSoundTagSets?.Print(sb);
                Resources?.Print(sb);
                Biomes?.Print(sb);
                NavigationMeshObstacleCoverManagers?.Print(sb);
                LensFlares?.Print(sb);
                ObjectVisibilityManagers?.Print(sb);
                SnapTemplateNodes?.Print(sb);
                SnapTemplates?.Print(sb);
                GroundCovers?.Print(sb);
                MorphableObjects?.Print(sb);
                Traversals?.Print(sb);
                ResourceGenerationData?.Print(sb);
                BiomeSwaps?.Print(sb);
                Atmospheres?.Print(sb);
                LeveledSpaceCells?.Print(sb);
                SpeechChallenges?.Print(sb);
                AimAssistPoses?.Print(sb);
                VolumetricLightings?.Print(sb);
                SurfaceBlocks?.Print(sb);
                SurfacePatternConfigs?.Print(sb);
                SurfacePatterns?.Print(sb);
                SurfaceTrees?.Print(sb);
                PlanetContentManagerTrees?.Print(sb);
                BoneModifiers?.Print(sb);
                SnapTemplateBehaviors?.Print(sb);
                Planets?.Print(sb);
                ConditionRecords?.Print(sb);
                PlanetContentManagerBranchNodes?.Print(sb);
                PlanetContentManagerContentNodes?.Print(sb);
                Stars?.Print(sb);
                WWiseEventDatas?.Print(sb);
                ResearchProjects?.Print(sb);
                AimOpticalSightMarkers?.Print(sb);
                AmbienceSets?.Print(sb);
                WeaponBarrelModels?.Print(sb);
                SurfacePatternStyles?.Print(sb);
                LayeredMaterialSwaps?.Print(sb);
                ForceDatas?.Print(sb);
                TerminalMenus?.Print(sb);
                EffectSequences?.Print(sb);
                SecondaryDamageLists?.Print(sb);
                MaterialPaths?.Print(sb);
                Clouds?.Print(sb);
                FogVolumes?.Print(sb);
                WWiseKeywordMappings?.Print(sb);
                LegendaryItems?.Print(sb);
                ParticleSystemDefineCollisions?.Print(sb);
                SunPresets?.Print(sb);
                PhotoModeFeatures?.Print(sb);
                GameplayOptions?.Print(sb);
                GameplayOptionsGroups?.Print(sb);
                TimeOfDays?.Print(sb);
                ActorValueModulations?.Print(sb);
                Challenges?.Print(sb);
                FacialExpressions?.Print(sb);
                PERS?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.Keywords = this.Keywords.Combine(rhs.Keywords, (l, r) => l.Combine(r));
                ret.FFKW = this.FFKW.Combine(rhs.FFKW, (l, r) => l.Combine(r));
                ret.LocationReferenceTypes = this.LocationReferenceTypes.Combine(rhs.LocationReferenceTypes, (l, r) => l.Combine(r));
                ret.Actions = this.Actions.Combine(rhs.Actions, (l, r) => l.Combine(r));
                ret.Transforms = this.Transforms.Combine(rhs.Transforms, (l, r) => l.Combine(r));
                ret.TextureSets = this.TextureSets.Combine(rhs.TextureSets, (l, r) => l.Combine(r));
                ret.Globals = this.Globals.Combine(rhs.Globals, (l, r) => l.Combine(r));
                ret.DamageTypes = this.DamageTypes.Combine(rhs.DamageTypes, (l, r) => l.Combine(r));
                ret.Classes = this.Classes.Combine(rhs.Classes, (l, r) => l.Combine(r));
                ret.Factions = this.Factions.Combine(rhs.Factions, (l, r) => l.Combine(r));
                ret.AffinityEvents = this.AffinityEvents.Combine(rhs.AffinityEvents, (l, r) => l.Combine(r));
                ret.HeadParts = this.HeadParts.Combine(rhs.HeadParts, (l, r) => l.Combine(r));
                ret.Races = this.Races.Combine(rhs.Races, (l, r) => l.Combine(r));
                ret.SoundMarkers = this.SoundMarkers.Combine(rhs.SoundMarkers, (l, r) => l.Combine(r));
                ret.SoundEchoMarkers = this.SoundEchoMarkers.Combine(rhs.SoundEchoMarkers, (l, r) => l.Combine(r));
                ret.AcousticSpaces = this.AcousticSpaces.Combine(rhs.AcousticSpaces, (l, r) => l.Combine(r));
                ret.AudioOcclusionPrimitives = this.AudioOcclusionPrimitives.Combine(rhs.AudioOcclusionPrimitives, (l, r) => l.Combine(r));
                ret.MagicEffects = this.MagicEffects.Combine(rhs.MagicEffects, (l, r) => l.Combine(r));
                ret.LandscapeTextures = this.LandscapeTextures.Combine(rhs.LandscapeTextures, (l, r) => l.Combine(r));
                ret.ProjectedDecals = this.ProjectedDecals.Combine(rhs.ProjectedDecals, (l, r) => l.Combine(r));
                ret.ObjectEffects = this.ObjectEffects.Combine(rhs.ObjectEffects, (l, r) => l.Combine(r));
                ret.Spells = this.Spells.Combine(rhs.Spells, (l, r) => l.Combine(r));
                ret.Activators = this.Activators.Combine(rhs.Activators, (l, r) => l.Combine(r));
                ret.CurveTables = this.CurveTables.Combine(rhs.CurveTables, (l, r) => l.Combine(r));
                ret.Curve3Ds = this.Curve3Ds.Combine(rhs.Curve3Ds, (l, r) => l.Combine(r));
                ret.Armors = this.Armors.Combine(rhs.Armors, (l, r) => l.Combine(r));
                ret.Books = this.Books.Combine(rhs.Books, (l, r) => l.Combine(r));
                ret.Containers = this.Containers.Combine(rhs.Containers, (l, r) => l.Combine(r));
                ret.Doors = this.Doors.Combine(rhs.Doors, (l, r) => l.Combine(r));
                ret.Lights = this.Lights.Combine(rhs.Lights, (l, r) => l.Combine(r));
                ret.MiscItems = this.MiscItems.Combine(rhs.MiscItems, (l, r) => l.Combine(r));
                ret.Statics = this.Statics.Combine(rhs.Statics, (l, r) => l.Combine(r));
                ret.StaticCollections = this.StaticCollections.Combine(rhs.StaticCollections, (l, r) => l.Combine(r));
                ret.PackIns = this.PackIns.Combine(rhs.PackIns, (l, r) => l.Combine(r));
                ret.MoveableStatics = this.MoveableStatics.Combine(rhs.MoveableStatics, (l, r) => l.Combine(r));
                ret.Grasses = this.Grasses.Combine(rhs.Grasses, (l, r) => l.Combine(r));
                ret.Florae = this.Florae.Combine(rhs.Florae, (l, r) => l.Combine(r));
                ret.Furniture = this.Furniture.Combine(rhs.Furniture, (l, r) => l.Combine(r));
                ret.Weapons = this.Weapons.Combine(rhs.Weapons, (l, r) => l.Combine(r));
                ret.Ammunitions = this.Ammunitions.Combine(rhs.Ammunitions, (l, r) => l.Combine(r));
                ret.Npcs = this.Npcs.Combine(rhs.Npcs, (l, r) => l.Combine(r));
                ret.LeveledNpcs = this.LeveledNpcs.Combine(rhs.LeveledNpcs, (l, r) => l.Combine(r));
                ret.LeveledPackIns = this.LeveledPackIns.Combine(rhs.LeveledPackIns, (l, r) => l.Combine(r));
                ret.Keys = this.Keys.Combine(rhs.Keys, (l, r) => l.Combine(r));
                ret.Ingestibles = this.Ingestibles.Combine(rhs.Ingestibles, (l, r) => l.Combine(r));
                ret.IdleMarkers = this.IdleMarkers.Combine(rhs.IdleMarkers, (l, r) => l.Combine(r));
                ret.BiomeMarkers = this.BiomeMarkers.Combine(rhs.BiomeMarkers, (l, r) => l.Combine(r));
                ret.Notes = this.Notes.Combine(rhs.Notes, (l, r) => l.Combine(r));
                ret.Projectiles = this.Projectiles.Combine(rhs.Projectiles, (l, r) => l.Combine(r));
                ret.Hazards = this.Hazards.Combine(rhs.Hazards, (l, r) => l.Combine(r));
                ret.BendableSplines = this.BendableSplines.Combine(rhs.BendableSplines, (l, r) => l.Combine(r));
                ret.Terminals = this.Terminals.Combine(rhs.Terminals, (l, r) => l.Combine(r));
                ret.LeveledItems = this.LeveledItems.Combine(rhs.LeveledItems, (l, r) => l.Combine(r));
                ret.GenericBaseFormTemplates = this.GenericBaseFormTemplates.Combine(rhs.GenericBaseFormTemplates, (l, r) => l.Combine(r));
                ret.GenericBaseForms = this.GenericBaseForms.Combine(rhs.GenericBaseForms, (l, r) => l.Combine(r));
                ret.LeveledBaseForms = this.LeveledBaseForms.Combine(rhs.LeveledBaseForms, (l, r) => l.Combine(r));
                ret.Weathers = this.Weathers.Combine(rhs.Weathers, (l, r) => l.Combine(r));
                ret.WeatherSettings = this.WeatherSettings.Combine(rhs.WeatherSettings, (l, r) => l.Combine(r));
                ret.Climates = this.Climates.Combine(rhs.Climates, (l, r) => l.Combine(r));
                ret.ShaderParticleGeometries = this.ShaderParticleGeometries.Combine(rhs.ShaderParticleGeometries, (l, r) => l.Combine(r));
                ret.Regions = this.Regions.Combine(rhs.Regions, (l, r) => l.Combine(r));
                ret.NavigationMeshInfoMaps = this.NavigationMeshInfoMaps.Combine(rhs.NavigationMeshInfoMaps, (l, r) => l.Combine(r));
                ret.Cells = this.Cells.Combine(rhs.Cells, (l, r) => l.Combine(r));
                ret.Worldspaces = this.Worldspaces.Combine(rhs.Worldspaces, (l, r) => l.Combine(r));
                ret.Quests = this.Quests.Combine(rhs.Quests, (l, r) => l.Combine(r));
                ret.IdleAnimations = this.IdleAnimations.Combine(rhs.IdleAnimations, (l, r) => l.Combine(r));
                ret.Packages = this.Packages.Combine(rhs.Packages, (l, r) => l.Combine(r));
                ret.CombatStyles = this.CombatStyles.Combine(rhs.CombatStyles, (l, r) => l.Combine(r));
                ret.LoadScreens = this.LoadScreens.Combine(rhs.LoadScreens, (l, r) => l.Combine(r));
                ret.AnimatedObjects = this.AnimatedObjects.Combine(rhs.AnimatedObjects, (l, r) => l.Combine(r));
                ret.Waters = this.Waters.Combine(rhs.Waters, (l, r) => l.Combine(r));
                ret.EffectShaders = this.EffectShaders.Combine(rhs.EffectShaders, (l, r) => l.Combine(r));
                ret.Explosions = this.Explosions.Combine(rhs.Explosions, (l, r) => l.Combine(r));
                ret.Debris = this.Debris.Combine(rhs.Debris, (l, r) => l.Combine(r));
                ret.ImageSpaces = this.ImageSpaces.Combine(rhs.ImageSpaces, (l, r) => l.Combine(r));
                ret.ImageSpaceAdapters = this.ImageSpaceAdapters.Combine(rhs.ImageSpaceAdapters, (l, r) => l.Combine(r));
                ret.FormLists = this.FormLists.Combine(rhs.FormLists, (l, r) => l.Combine(r));
                ret.Perks = this.Perks.Combine(rhs.Perks, (l, r) => l.Combine(r));
                ret.BodyParts = this.BodyParts.Combine(rhs.BodyParts, (l, r) => l.Combine(r));
                ret.AddonNodes = this.AddonNodes.Combine(rhs.AddonNodes, (l, r) => l.Combine(r));
                ret.ActorValueInformation = this.ActorValueInformation.Combine(rhs.ActorValueInformation, (l, r) => l.Combine(r));
                ret.CameraShots = this.CameraShots.Combine(rhs.CameraShots, (l, r) => l.Combine(r));
                ret.CameraPaths = this.CameraPaths.Combine(rhs.CameraPaths, (l, r) => l.Combine(r));
                ret.VoiceTypes = this.VoiceTypes.Combine(rhs.VoiceTypes, (l, r) => l.Combine(r));
                ret.MaterialTypes = this.MaterialTypes.Combine(rhs.MaterialTypes, (l, r) => l.Combine(r));
                ret.Impacts = this.Impacts.Combine(rhs.Impacts, (l, r) => l.Combine(r));
                ret.ImpactDataSets = this.ImpactDataSets.Combine(rhs.ImpactDataSets, (l, r) => l.Combine(r));
                ret.ArmorAddons = this.ArmorAddons.Combine(rhs.ArmorAddons, (l, r) => l.Combine(r));
                ret.Locations = this.Locations.Combine(rhs.Locations, (l, r) => l.Combine(r));
                ret.Messages = this.Messages.Combine(rhs.Messages, (l, r) => l.Combine(r));
                ret.DefaultObjectManagers = this.DefaultObjectManagers.Combine(rhs.DefaultObjectManagers, (l, r) => l.Combine(r));
                ret.DefaultObjects = this.DefaultObjects.Combine(rhs.DefaultObjects, (l, r) => l.Combine(r));
                ret.LightingTemplates = this.LightingTemplates.Combine(rhs.LightingTemplates, (l, r) => l.Combine(r));
                ret.MusicTypes = this.MusicTypes.Combine(rhs.MusicTypes, (l, r) => l.Combine(r));
                ret.Footsteps = this.Footsteps.Combine(rhs.Footsteps, (l, r) => l.Combine(r));
                ret.FootstepSets = this.FootstepSets.Combine(rhs.FootstepSets, (l, r) => l.Combine(r));
                ret.StoryManagerBranchNodes = this.StoryManagerBranchNodes.Combine(rhs.StoryManagerBranchNodes, (l, r) => l.Combine(r));
                ret.StoryManagerQuestNodes = this.StoryManagerQuestNodes.Combine(rhs.StoryManagerQuestNodes, (l, r) => l.Combine(r));
                ret.StoryManagerEventNodes = this.StoryManagerEventNodes.Combine(rhs.StoryManagerEventNodes, (l, r) => l.Combine(r));
                ret.MusicTracks = this.MusicTracks.Combine(rhs.MusicTracks, (l, r) => l.Combine(r));
                ret.EquipTypes = this.EquipTypes.Combine(rhs.EquipTypes, (l, r) => l.Combine(r));
                ret.Outfits = this.Outfits.Combine(rhs.Outfits, (l, r) => l.Combine(r));
                ret.ArtObjects = this.ArtObjects.Combine(rhs.ArtObjects, (l, r) => l.Combine(r));
                ret.MovementTypes = this.MovementTypes.Combine(rhs.MovementTypes, (l, r) => l.Combine(r));
                ret.CollisionLayers = this.CollisionLayers.Combine(rhs.CollisionLayers, (l, r) => l.Combine(r));
                ret.Colors = this.Colors.Combine(rhs.Colors, (l, r) => l.Combine(r));
                ret.ReverbParameters = this.ReverbParameters.Combine(rhs.ReverbParameters, (l, r) => l.Combine(r));
                ret.ReferenceGroups = this.ReferenceGroups.Combine(rhs.ReferenceGroups, (l, r) => l.Combine(r));
                ret.AimModels = this.AimModels.Combine(rhs.AimModels, (l, r) => l.Combine(r));
                ret.AimAssistModels = this.AimAssistModels.Combine(rhs.AimAssistModels, (l, r) => l.Combine(r));
                ret.MeleeAimAssistModels = this.MeleeAimAssistModels.Combine(rhs.MeleeAimAssistModels, (l, r) => l.Combine(r));
                ret.Layers = this.Layers.Combine(rhs.Layers, (l, r) => l.Combine(r));
                ret.ConstructibleObjects = this.ConstructibleObjects.Combine(rhs.ConstructibleObjects, (l, r) => l.Combine(r));
                ret.ObjectModifications = this.ObjectModifications.Combine(rhs.ObjectModifications, (l, r) => l.Combine(r));
                ret.Zooms = this.Zooms.Combine(rhs.Zooms, (l, r) => l.Combine(r));
                ret.InstanceNamingRules = this.InstanceNamingRules.Combine(rhs.InstanceNamingRules, (l, r) => l.Combine(r));
                ret.SoundKeywordMappings = this.SoundKeywordMappings.Combine(rhs.SoundKeywordMappings, (l, r) => l.Combine(r));
                ret.AttractionRules = this.AttractionRules.Combine(rhs.AttractionRules, (l, r) => l.Combine(r));
                ret.SceneCollections = this.SceneCollections.Combine(rhs.SceneCollections, (l, r) => l.Combine(r));
                ret.AnimationSoundTagSets = this.AnimationSoundTagSets.Combine(rhs.AnimationSoundTagSets, (l, r) => l.Combine(r));
                ret.Resources = this.Resources.Combine(rhs.Resources, (l, r) => l.Combine(r));
                ret.Biomes = this.Biomes.Combine(rhs.Biomes, (l, r) => l.Combine(r));
                ret.NavigationMeshObstacleCoverManagers = this.NavigationMeshObstacleCoverManagers.Combine(rhs.NavigationMeshObstacleCoverManagers, (l, r) => l.Combine(r));
                ret.LensFlares = this.LensFlares.Combine(rhs.LensFlares, (l, r) => l.Combine(r));
                ret.ObjectVisibilityManagers = this.ObjectVisibilityManagers.Combine(rhs.ObjectVisibilityManagers, (l, r) => l.Combine(r));
                ret.SnapTemplateNodes = this.SnapTemplateNodes.Combine(rhs.SnapTemplateNodes, (l, r) => l.Combine(r));
                ret.SnapTemplates = this.SnapTemplates.Combine(rhs.SnapTemplates, (l, r) => l.Combine(r));
                ret.GroundCovers = this.GroundCovers.Combine(rhs.GroundCovers, (l, r) => l.Combine(r));
                ret.MorphableObjects = this.MorphableObjects.Combine(rhs.MorphableObjects, (l, r) => l.Combine(r));
                ret.Traversals = this.Traversals.Combine(rhs.Traversals, (l, r) => l.Combine(r));
                ret.ResourceGenerationData = this.ResourceGenerationData.Combine(rhs.ResourceGenerationData, (l, r) => l.Combine(r));
                ret.BiomeSwaps = this.BiomeSwaps.Combine(rhs.BiomeSwaps, (l, r) => l.Combine(r));
                ret.Atmospheres = this.Atmospheres.Combine(rhs.Atmospheres, (l, r) => l.Combine(r));
                ret.LeveledSpaceCells = this.LeveledSpaceCells.Combine(rhs.LeveledSpaceCells, (l, r) => l.Combine(r));
                ret.SpeechChallenges = this.SpeechChallenges.Combine(rhs.SpeechChallenges, (l, r) => l.Combine(r));
                ret.AimAssistPoses = this.AimAssistPoses.Combine(rhs.AimAssistPoses, (l, r) => l.Combine(r));
                ret.VolumetricLightings = this.VolumetricLightings.Combine(rhs.VolumetricLightings, (l, r) => l.Combine(r));
                ret.SurfaceBlocks = this.SurfaceBlocks.Combine(rhs.SurfaceBlocks, (l, r) => l.Combine(r));
                ret.SurfacePatternConfigs = this.SurfacePatternConfigs.Combine(rhs.SurfacePatternConfigs, (l, r) => l.Combine(r));
                ret.SurfacePatterns = this.SurfacePatterns.Combine(rhs.SurfacePatterns, (l, r) => l.Combine(r));
                ret.SurfaceTrees = this.SurfaceTrees.Combine(rhs.SurfaceTrees, (l, r) => l.Combine(r));
                ret.PlanetContentManagerTrees = this.PlanetContentManagerTrees.Combine(rhs.PlanetContentManagerTrees, (l, r) => l.Combine(r));
                ret.BoneModifiers = this.BoneModifiers.Combine(rhs.BoneModifiers, (l, r) => l.Combine(r));
                ret.SnapTemplateBehaviors = this.SnapTemplateBehaviors.Combine(rhs.SnapTemplateBehaviors, (l, r) => l.Combine(r));
                ret.Planets = this.Planets.Combine(rhs.Planets, (l, r) => l.Combine(r));
                ret.ConditionRecords = this.ConditionRecords.Combine(rhs.ConditionRecords, (l, r) => l.Combine(r));
                ret.PlanetContentManagerBranchNodes = this.PlanetContentManagerBranchNodes.Combine(rhs.PlanetContentManagerBranchNodes, (l, r) => l.Combine(r));
                ret.PlanetContentManagerContentNodes = this.PlanetContentManagerContentNodes.Combine(rhs.PlanetContentManagerContentNodes, (l, r) => l.Combine(r));
                ret.Stars = this.Stars.Combine(rhs.Stars, (l, r) => l.Combine(r));
                ret.WWiseEventDatas = this.WWiseEventDatas.Combine(rhs.WWiseEventDatas, (l, r) => l.Combine(r));
                ret.ResearchProjects = this.ResearchProjects.Combine(rhs.ResearchProjects, (l, r) => l.Combine(r));
                ret.AimOpticalSightMarkers = this.AimOpticalSightMarkers.Combine(rhs.AimOpticalSightMarkers, (l, r) => l.Combine(r));
                ret.AmbienceSets = this.AmbienceSets.Combine(rhs.AmbienceSets, (l, r) => l.Combine(r));
                ret.WeaponBarrelModels = this.WeaponBarrelModels.Combine(rhs.WeaponBarrelModels, (l, r) => l.Combine(r));
                ret.SurfacePatternStyles = this.SurfacePatternStyles.Combine(rhs.SurfacePatternStyles, (l, r) => l.Combine(r));
                ret.LayeredMaterialSwaps = this.LayeredMaterialSwaps.Combine(rhs.LayeredMaterialSwaps, (l, r) => l.Combine(r));
                ret.ForceDatas = this.ForceDatas.Combine(rhs.ForceDatas, (l, r) => l.Combine(r));
                ret.TerminalMenus = this.TerminalMenus.Combine(rhs.TerminalMenus, (l, r) => l.Combine(r));
                ret.EffectSequences = this.EffectSequences.Combine(rhs.EffectSequences, (l, r) => l.Combine(r));
                ret.SecondaryDamageLists = this.SecondaryDamageLists.Combine(rhs.SecondaryDamageLists, (l, r) => l.Combine(r));
                ret.MaterialPaths = this.MaterialPaths.Combine(rhs.MaterialPaths, (l, r) => l.Combine(r));
                ret.Clouds = this.Clouds.Combine(rhs.Clouds, (l, r) => l.Combine(r));
                ret.FogVolumes = this.FogVolumes.Combine(rhs.FogVolumes, (l, r) => l.Combine(r));
                ret.WWiseKeywordMappings = this.WWiseKeywordMappings.Combine(rhs.WWiseKeywordMappings, (l, r) => l.Combine(r));
                ret.LegendaryItems = this.LegendaryItems.Combine(rhs.LegendaryItems, (l, r) => l.Combine(r));
                ret.ParticleSystemDefineCollisions = this.ParticleSystemDefineCollisions.Combine(rhs.ParticleSystemDefineCollisions, (l, r) => l.Combine(r));
                ret.SunPresets = this.SunPresets.Combine(rhs.SunPresets, (l, r) => l.Combine(r));
                ret.PhotoModeFeatures = this.PhotoModeFeatures.Combine(rhs.PhotoModeFeatures, (l, r) => l.Combine(r));
                ret.GameplayOptions = this.GameplayOptions.Combine(rhs.GameplayOptions, (l, r) => l.Combine(r));
                ret.GameplayOptionsGroups = this.GameplayOptionsGroups.Combine(rhs.GameplayOptionsGroups, (l, r) => l.Combine(r));
                ret.TimeOfDays = this.TimeOfDays.Combine(rhs.TimeOfDays, (l, r) => l.Combine(r));
                ret.ActorValueModulations = this.ActorValueModulations.Combine(rhs.ActorValueModulations, (l, r) => l.Combine(r));
                ret.Challenges = this.Challenges.Combine(rhs.Challenges, (l, r) => l.Combine(r));
                ret.FacialExpressions = this.FacialExpressions.Combine(rhs.FacialExpressions, (l, r) => l.Combine(r));
                ret.PERS = this.PERS.Combine(rhs.PERS, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public StarfieldModHeader.TranslationMask? ModHeader;
            public StarfieldGroup.TranslationMask<GameSetting.TranslationMask>? GameSettings;
            public StarfieldGroup.TranslationMask<Keyword.TranslationMask>? Keywords;
            public StarfieldGroup.TranslationMask<FFKWRecord.TranslationMask>? FFKW;
            public StarfieldGroup.TranslationMask<LocationReferenceType.TranslationMask>? LocationReferenceTypes;
            public StarfieldGroup.TranslationMask<ActionRecord.TranslationMask>? Actions;
            public StarfieldGroup.TranslationMask<Transform.TranslationMask>? Transforms;
            public StarfieldGroup.TranslationMask<TextureSet.TranslationMask>? TextureSets;
            public StarfieldGroup.TranslationMask<Global.TranslationMask>? Globals;
            public StarfieldGroup.TranslationMask<DamageType.TranslationMask>? DamageTypes;
            public StarfieldGroup.TranslationMask<Class.TranslationMask>? Classes;
            public StarfieldGroup.TranslationMask<Faction.TranslationMask>? Factions;
            public StarfieldGroup.TranslationMask<AffinityEvent.TranslationMask>? AffinityEvents;
            public StarfieldGroup.TranslationMask<HeadPart.TranslationMask>? HeadParts;
            public StarfieldGroup.TranslationMask<Race.TranslationMask>? Races;
            public StarfieldGroup.TranslationMask<SoundMarker.TranslationMask>? SoundMarkers;
            public StarfieldGroup.TranslationMask<SoundEchoMarker.TranslationMask>? SoundEchoMarkers;
            public StarfieldGroup.TranslationMask<AcousticSpace.TranslationMask>? AcousticSpaces;
            public StarfieldGroup.TranslationMask<AudioOcclusionPrimitive.TranslationMask>? AudioOcclusionPrimitives;
            public StarfieldGroup.TranslationMask<MagicEffect.TranslationMask>? MagicEffects;
            public StarfieldGroup.TranslationMask<LandscapeTexture.TranslationMask>? LandscapeTextures;
            public StarfieldGroup.TranslationMask<ProjectedDecal.TranslationMask>? ProjectedDecals;
            public StarfieldGroup.TranslationMask<ObjectEffect.TranslationMask>? ObjectEffects;
            public StarfieldGroup.TranslationMask<Spell.TranslationMask>? Spells;
            public StarfieldGroup.TranslationMask<Activator.TranslationMask>? Activators;
            public StarfieldGroup.TranslationMask<CurveTable.TranslationMask>? CurveTables;
            public StarfieldGroup.TranslationMask<Curve3D.TranslationMask>? Curve3Ds;
            public StarfieldGroup.TranslationMask<Armor.TranslationMask>? Armors;
            public StarfieldGroup.TranslationMask<Book.TranslationMask>? Books;
            public StarfieldGroup.TranslationMask<Container.TranslationMask>? Containers;
            public StarfieldGroup.TranslationMask<Door.TranslationMask>? Doors;
            public StarfieldGroup.TranslationMask<Light.TranslationMask>? Lights;
            public StarfieldGroup.TranslationMask<MiscItem.TranslationMask>? MiscItems;
            public StarfieldGroup.TranslationMask<Static.TranslationMask>? Statics;
            public StarfieldGroup.TranslationMask<StaticCollection.TranslationMask>? StaticCollections;
            public StarfieldGroup.TranslationMask<PackIn.TranslationMask>? PackIns;
            public StarfieldGroup.TranslationMask<MoveableStatic.TranslationMask>? MoveableStatics;
            public StarfieldGroup.TranslationMask<Grass.TranslationMask>? Grasses;
            public StarfieldGroup.TranslationMask<Flora.TranslationMask>? Florae;
            public StarfieldGroup.TranslationMask<Furniture.TranslationMask>? Furniture;
            public StarfieldGroup.TranslationMask<Weapon.TranslationMask>? Weapons;
            public StarfieldGroup.TranslationMask<Ammunition.TranslationMask>? Ammunitions;
            public StarfieldGroup.TranslationMask<Npc.TranslationMask>? Npcs;
            public StarfieldGroup.TranslationMask<LeveledNpc.TranslationMask>? LeveledNpcs;
            public StarfieldGroup.TranslationMask<LeveledPackIn.TranslationMask>? LeveledPackIns;
            public StarfieldGroup.TranslationMask<Key.TranslationMask>? Keys;
            public StarfieldGroup.TranslationMask<Ingestible.TranslationMask>? Ingestibles;
            public StarfieldGroup.TranslationMask<IdleMarker.TranslationMask>? IdleMarkers;
            public StarfieldGroup.TranslationMask<BiomeMarker.TranslationMask>? BiomeMarkers;
            public StarfieldGroup.TranslationMask<Note.TranslationMask>? Notes;
            public StarfieldGroup.TranslationMask<Projectile.TranslationMask>? Projectiles;
            public StarfieldGroup.TranslationMask<Hazard.TranslationMask>? Hazards;
            public StarfieldGroup.TranslationMask<BendableSpline.TranslationMask>? BendableSplines;
            public StarfieldGroup.TranslationMask<Terminal.TranslationMask>? Terminals;
            public StarfieldGroup.TranslationMask<LeveledItem.TranslationMask>? LeveledItems;
            public StarfieldGroup.TranslationMask<GenericBaseFormTemplate.TranslationMask>? GenericBaseFormTemplates;
            public StarfieldGroup.TranslationMask<GenericBaseForm.TranslationMask>? GenericBaseForms;
            public StarfieldGroup.TranslationMask<LeveledBaseForm.TranslationMask>? LeveledBaseForms;
            public StarfieldGroup.TranslationMask<Weather.TranslationMask>? Weathers;
            public StarfieldGroup.TranslationMask<WeatherSetting.TranslationMask>? WeatherSettings;
            public StarfieldGroup.TranslationMask<Climate.TranslationMask>? Climates;
            public StarfieldGroup.TranslationMask<ShaderParticleGeometry.TranslationMask>? ShaderParticleGeometries;
            public StarfieldGroup.TranslationMask<Region.TranslationMask>? Regions;
            public StarfieldGroup.TranslationMask<NavigationMeshInfoMap.TranslationMask>? NavigationMeshInfoMaps;
            public StarfieldListGroup.TranslationMask<CellBlock.TranslationMask>? Cells;
            public StarfieldGroup.TranslationMask<Worldspace.TranslationMask>? Worldspaces;
            public StarfieldGroup.TranslationMask<Quest.TranslationMask>? Quests;
            public StarfieldGroup.TranslationMask<IdleAnimation.TranslationMask>? IdleAnimations;
            public StarfieldGroup.TranslationMask<Package.TranslationMask>? Packages;
            public StarfieldGroup.TranslationMask<CombatStyle.TranslationMask>? CombatStyles;
            public StarfieldGroup.TranslationMask<LoadScreen.TranslationMask>? LoadScreens;
            public StarfieldGroup.TranslationMask<AnimatedObject.TranslationMask>? AnimatedObjects;
            public StarfieldGroup.TranslationMask<Water.TranslationMask>? Waters;
            public StarfieldGroup.TranslationMask<EffectShader.TranslationMask>? EffectShaders;
            public StarfieldGroup.TranslationMask<Explosion.TranslationMask>? Explosions;
            public StarfieldGroup.TranslationMask<Debris.TranslationMask>? Debris;
            public StarfieldGroup.TranslationMask<ImageSpace.TranslationMask>? ImageSpaces;
            public StarfieldGroup.TranslationMask<ImageSpaceAdapter.TranslationMask>? ImageSpaceAdapters;
            public StarfieldGroup.TranslationMask<FormList.TranslationMask>? FormLists;
            public StarfieldGroup.TranslationMask<Perk.TranslationMask>? Perks;
            public StarfieldGroup.TranslationMask<BodyPartData.TranslationMask>? BodyParts;
            public StarfieldGroup.TranslationMask<AddonNode.TranslationMask>? AddonNodes;
            public StarfieldGroup.TranslationMask<ActorValueInformation.TranslationMask>? ActorValueInformation;
            public StarfieldGroup.TranslationMask<CameraShot.TranslationMask>? CameraShots;
            public StarfieldGroup.TranslationMask<CameraPath.TranslationMask>? CameraPaths;
            public StarfieldGroup.TranslationMask<VoiceType.TranslationMask>? VoiceTypes;
            public StarfieldGroup.TranslationMask<MaterialType.TranslationMask>? MaterialTypes;
            public StarfieldGroup.TranslationMask<Impact.TranslationMask>? Impacts;
            public StarfieldGroup.TranslationMask<ImpactDataSet.TranslationMask>? ImpactDataSets;
            public StarfieldGroup.TranslationMask<ArmorAddon.TranslationMask>? ArmorAddons;
            public StarfieldGroup.TranslationMask<Location.TranslationMask>? Locations;
            public StarfieldGroup.TranslationMask<Message.TranslationMask>? Messages;
            public StarfieldGroup.TranslationMask<DefaultObjectManager.TranslationMask>? DefaultObjectManagers;
            public StarfieldGroup.TranslationMask<DefaultObject.TranslationMask>? DefaultObjects;
            public StarfieldGroup.TranslationMask<LightingTemplate.TranslationMask>? LightingTemplates;
            public StarfieldGroup.TranslationMask<MusicType.TranslationMask>? MusicTypes;
            public StarfieldGroup.TranslationMask<Footstep.TranslationMask>? Footsteps;
            public StarfieldGroup.TranslationMask<FootstepSet.TranslationMask>? FootstepSets;
            public StarfieldGroup.TranslationMask<StoryManagerBranchNode.TranslationMask>? StoryManagerBranchNodes;
            public StarfieldGroup.TranslationMask<StoryManagerQuestNode.TranslationMask>? StoryManagerQuestNodes;
            public StarfieldGroup.TranslationMask<StoryManagerEventNode.TranslationMask>? StoryManagerEventNodes;
            public StarfieldGroup.TranslationMask<MusicTrack.TranslationMask>? MusicTracks;
            public StarfieldGroup.TranslationMask<EquipType.TranslationMask>? EquipTypes;
            public StarfieldGroup.TranslationMask<Outfit.TranslationMask>? Outfits;
            public StarfieldGroup.TranslationMask<ArtObject.TranslationMask>? ArtObjects;
            public StarfieldGroup.TranslationMask<MovementType.TranslationMask>? MovementTypes;
            public StarfieldGroup.TranslationMask<CollisionLayer.TranslationMask>? CollisionLayers;
            public StarfieldGroup.TranslationMask<ColorRecord.TranslationMask>? Colors;
            public StarfieldGroup.TranslationMask<ReverbParameters.TranslationMask>? ReverbParameters;
            public StarfieldGroup.TranslationMask<ReferenceGroup.TranslationMask>? ReferenceGroups;
            public StarfieldGroup.TranslationMask<AimModel.TranslationMask>? AimModels;
            public StarfieldGroup.TranslationMask<AimAssistModel.TranslationMask>? AimAssistModels;
            public StarfieldGroup.TranslationMask<MeleeAimAssistModel.TranslationMask>? MeleeAimAssistModels;
            public StarfieldGroup.TranslationMask<Layer.TranslationMask>? Layers;
            public StarfieldGroup.TranslationMask<ConstructibleObject.TranslationMask>? ConstructibleObjects;
            public StarfieldGroup.TranslationMask<AObjectModification.TranslationMask>? ObjectModifications;
            public StarfieldGroup.TranslationMask<Zoom.TranslationMask>? Zooms;
            public StarfieldGroup.TranslationMask<InstanceNamingRules.TranslationMask>? InstanceNamingRules;
            public StarfieldGroup.TranslationMask<SoundKeywordMapping.TranslationMask>? SoundKeywordMappings;
            public StarfieldGroup.TranslationMask<AttractionRule.TranslationMask>? AttractionRules;
            public StarfieldGroup.TranslationMask<SceneCollection.TranslationMask>? SceneCollections;
            public StarfieldGroup.TranslationMask<AnimationSoundTagSet.TranslationMask>? AnimationSoundTagSets;
            public StarfieldGroup.TranslationMask<Resource.TranslationMask>? Resources;
            public StarfieldGroup.TranslationMask<Biome.TranslationMask>? Biomes;
            public StarfieldGroup.TranslationMask<NavigationMeshObstacleCoverManager.TranslationMask>? NavigationMeshObstacleCoverManagers;
            public StarfieldGroup.TranslationMask<LensFlare.TranslationMask>? LensFlares;
            public StarfieldGroup.TranslationMask<ObjectVisibilityManager.TranslationMask>? ObjectVisibilityManagers;
            public StarfieldGroup.TranslationMask<SnapTemplateNode.TranslationMask>? SnapTemplateNodes;
            public StarfieldGroup.TranslationMask<SnapTemplate.TranslationMask>? SnapTemplates;
            public StarfieldGroup.TranslationMask<GroundCover.TranslationMask>? GroundCovers;
            public StarfieldGroup.TranslationMask<MorphableObject.TranslationMask>? MorphableObjects;
            public StarfieldGroup.TranslationMask<Traversal.TranslationMask>? Traversals;
            public StarfieldGroup.TranslationMask<ResourceGenerationData.TranslationMask>? ResourceGenerationData;
            public StarfieldGroup.TranslationMask<BiomeSwap.TranslationMask>? BiomeSwaps;
            public StarfieldGroup.TranslationMask<Atmosphere.TranslationMask>? Atmospheres;
            public StarfieldGroup.TranslationMask<LeveledSpaceCell.TranslationMask>? LeveledSpaceCells;
            public StarfieldGroup.TranslationMask<SpeechChallenge.TranslationMask>? SpeechChallenges;
            public StarfieldGroup.TranslationMask<AimAssistPose.TranslationMask>? AimAssistPoses;
            public StarfieldGroup.TranslationMask<VolumetricLighting.TranslationMask>? VolumetricLightings;
            public StarfieldGroup.TranslationMask<SurfaceBlock.TranslationMask>? SurfaceBlocks;
            public StarfieldGroup.TranslationMask<SurfacePatternConfig.TranslationMask>? SurfacePatternConfigs;
            public StarfieldGroup.TranslationMask<SurfacePattern.TranslationMask>? SurfacePatterns;
            public StarfieldGroup.TranslationMask<SurfaceTree.TranslationMask>? SurfaceTrees;
            public StarfieldGroup.TranslationMask<PlanetContentManagerTree.TranslationMask>? PlanetContentManagerTrees;
            public StarfieldGroup.TranslationMask<BoneModifier.TranslationMask>? BoneModifiers;
            public StarfieldGroup.TranslationMask<SnapTemplateBehavior.TranslationMask>? SnapTemplateBehaviors;
            public StarfieldGroup.TranslationMask<Planet.TranslationMask>? Planets;
            public StarfieldGroup.TranslationMask<ConditionRecord.TranslationMask>? ConditionRecords;
            public StarfieldGroup.TranslationMask<PlanetContentManagerBranchNode.TranslationMask>? PlanetContentManagerBranchNodes;
            public StarfieldGroup.TranslationMask<PlanetContentManagerContentNode.TranslationMask>? PlanetContentManagerContentNodes;
            public StarfieldGroup.TranslationMask<Star.TranslationMask>? Stars;
            public StarfieldGroup.TranslationMask<WWiseEventData.TranslationMask>? WWiseEventDatas;
            public StarfieldGroup.TranslationMask<ResearchProject.TranslationMask>? ResearchProjects;
            public StarfieldGroup.TranslationMask<AimOpticalSightMarker.TranslationMask>? AimOpticalSightMarkers;
            public StarfieldGroup.TranslationMask<AmbienceSet.TranslationMask>? AmbienceSets;
            public StarfieldGroup.TranslationMask<WeaponBarrelModel.TranslationMask>? WeaponBarrelModels;
            public StarfieldGroup.TranslationMask<SurfacePatternStyle.TranslationMask>? SurfacePatternStyles;
            public StarfieldGroup.TranslationMask<LayeredMaterialSwap.TranslationMask>? LayeredMaterialSwaps;
            public StarfieldGroup.TranslationMask<ForceData.TranslationMask>? ForceDatas;
            public StarfieldGroup.TranslationMask<TerminalMenu.TranslationMask>? TerminalMenus;
            public StarfieldGroup.TranslationMask<EffectSequence.TranslationMask>? EffectSequences;
            public StarfieldGroup.TranslationMask<SecondaryDamageList.TranslationMask>? SecondaryDamageLists;
            public StarfieldGroup.TranslationMask<MaterialPath.TranslationMask>? MaterialPaths;
            public StarfieldGroup.TranslationMask<Clouds.TranslationMask>? Clouds;
            public StarfieldGroup.TranslationMask<FogVolume.TranslationMask>? FogVolumes;
            public StarfieldGroup.TranslationMask<WWiseKeywordMapping.TranslationMask>? WWiseKeywordMappings;
            public StarfieldGroup.TranslationMask<LegendaryItem.TranslationMask>? LegendaryItems;
            public StarfieldGroup.TranslationMask<ParticleSystemDefineCollision.TranslationMask>? ParticleSystemDefineCollisions;
            public StarfieldGroup.TranslationMask<SunPreset.TranslationMask>? SunPresets;
            public StarfieldGroup.TranslationMask<PhotoModeFeature.TranslationMask>? PhotoModeFeatures;
            public StarfieldGroup.TranslationMask<GameplayOptions.TranslationMask>? GameplayOptions;
            public StarfieldGroup.TranslationMask<GameplayOptionsGroup.TranslationMask>? GameplayOptionsGroups;
            public StarfieldGroup.TranslationMask<TimeOfDayRecord.TranslationMask>? TimeOfDays;
            public StarfieldGroup.TranslationMask<ActorValueModulation.TranslationMask>? ActorValueModulations;
            public StarfieldGroup.TranslationMask<Challenge.TranslationMask>? Challenges;
            public StarfieldGroup.TranslationMask<FacialExpression.TranslationMask>? FacialExpressions;
            public StarfieldGroup.TranslationMask<PERS.TranslationMask>? PERS;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader != null ? ModHeader.OnOverall : DefaultOn, ModHeader?.GetCrystal()));
                ret.Add((GameSettings != null ? GameSettings.OnOverall : DefaultOn, GameSettings?.GetCrystal()));
                ret.Add((Keywords != null ? Keywords.OnOverall : DefaultOn, Keywords?.GetCrystal()));
                ret.Add((FFKW != null ? FFKW.OnOverall : DefaultOn, FFKW?.GetCrystal()));
                ret.Add((LocationReferenceTypes != null ? LocationReferenceTypes.OnOverall : DefaultOn, LocationReferenceTypes?.GetCrystal()));
                ret.Add((Actions != null ? Actions.OnOverall : DefaultOn, Actions?.GetCrystal()));
                ret.Add((Transforms != null ? Transforms.OnOverall : DefaultOn, Transforms?.GetCrystal()));
                ret.Add((TextureSets != null ? TextureSets.OnOverall : DefaultOn, TextureSets?.GetCrystal()));
                ret.Add((Globals != null ? Globals.OnOverall : DefaultOn, Globals?.GetCrystal()));
                ret.Add((DamageTypes != null ? DamageTypes.OnOverall : DefaultOn, DamageTypes?.GetCrystal()));
                ret.Add((Classes != null ? Classes.OnOverall : DefaultOn, Classes?.GetCrystal()));
                ret.Add((Factions != null ? Factions.OnOverall : DefaultOn, Factions?.GetCrystal()));
                ret.Add((AffinityEvents != null ? AffinityEvents.OnOverall : DefaultOn, AffinityEvents?.GetCrystal()));
                ret.Add((HeadParts != null ? HeadParts.OnOverall : DefaultOn, HeadParts?.GetCrystal()));
                ret.Add((Races != null ? Races.OnOverall : DefaultOn, Races?.GetCrystal()));
                ret.Add((SoundMarkers != null ? SoundMarkers.OnOverall : DefaultOn, SoundMarkers?.GetCrystal()));
                ret.Add((SoundEchoMarkers != null ? SoundEchoMarkers.OnOverall : DefaultOn, SoundEchoMarkers?.GetCrystal()));
                ret.Add((AcousticSpaces != null ? AcousticSpaces.OnOverall : DefaultOn, AcousticSpaces?.GetCrystal()));
                ret.Add((AudioOcclusionPrimitives != null ? AudioOcclusionPrimitives.OnOverall : DefaultOn, AudioOcclusionPrimitives?.GetCrystal()));
                ret.Add((MagicEffects != null ? MagicEffects.OnOverall : DefaultOn, MagicEffects?.GetCrystal()));
                ret.Add((LandscapeTextures != null ? LandscapeTextures.OnOverall : DefaultOn, LandscapeTextures?.GetCrystal()));
                ret.Add((ProjectedDecals != null ? ProjectedDecals.OnOverall : DefaultOn, ProjectedDecals?.GetCrystal()));
                ret.Add((ObjectEffects != null ? ObjectEffects.OnOverall : DefaultOn, ObjectEffects?.GetCrystal()));
                ret.Add((Spells != null ? Spells.OnOverall : DefaultOn, Spells?.GetCrystal()));
                ret.Add((Activators != null ? Activators.OnOverall : DefaultOn, Activators?.GetCrystal()));
                ret.Add((CurveTables != null ? CurveTables.OnOverall : DefaultOn, CurveTables?.GetCrystal()));
                ret.Add((Curve3Ds != null ? Curve3Ds.OnOverall : DefaultOn, Curve3Ds?.GetCrystal()));
                ret.Add((Armors != null ? Armors.OnOverall : DefaultOn, Armors?.GetCrystal()));
                ret.Add((Books != null ? Books.OnOverall : DefaultOn, Books?.GetCrystal()));
                ret.Add((Containers != null ? Containers.OnOverall : DefaultOn, Containers?.GetCrystal()));
                ret.Add((Doors != null ? Doors.OnOverall : DefaultOn, Doors?.GetCrystal()));
                ret.Add((Lights != null ? Lights.OnOverall : DefaultOn, Lights?.GetCrystal()));
                ret.Add((MiscItems != null ? MiscItems.OnOverall : DefaultOn, MiscItems?.GetCrystal()));
                ret.Add((Statics != null ? Statics.OnOverall : DefaultOn, Statics?.GetCrystal()));
                ret.Add((StaticCollections != null ? StaticCollections.OnOverall : DefaultOn, StaticCollections?.GetCrystal()));
                ret.Add((PackIns != null ? PackIns.OnOverall : DefaultOn, PackIns?.GetCrystal()));
                ret.Add((MoveableStatics != null ? MoveableStatics.OnOverall : DefaultOn, MoveableStatics?.GetCrystal()));
                ret.Add((Grasses != null ? Grasses.OnOverall : DefaultOn, Grasses?.GetCrystal()));
                ret.Add((Florae != null ? Florae.OnOverall : DefaultOn, Florae?.GetCrystal()));
                ret.Add((Furniture != null ? Furniture.OnOverall : DefaultOn, Furniture?.GetCrystal()));
                ret.Add((Weapons != null ? Weapons.OnOverall : DefaultOn, Weapons?.GetCrystal()));
                ret.Add((Ammunitions != null ? Ammunitions.OnOverall : DefaultOn, Ammunitions?.GetCrystal()));
                ret.Add((Npcs != null ? Npcs.OnOverall : DefaultOn, Npcs?.GetCrystal()));
                ret.Add((LeveledNpcs != null ? LeveledNpcs.OnOverall : DefaultOn, LeveledNpcs?.GetCrystal()));
                ret.Add((LeveledPackIns != null ? LeveledPackIns.OnOverall : DefaultOn, LeveledPackIns?.GetCrystal()));
                ret.Add((Keys != null ? Keys.OnOverall : DefaultOn, Keys?.GetCrystal()));
                ret.Add((Ingestibles != null ? Ingestibles.OnOverall : DefaultOn, Ingestibles?.GetCrystal()));
                ret.Add((IdleMarkers != null ? IdleMarkers.OnOverall : DefaultOn, IdleMarkers?.GetCrystal()));
                ret.Add((BiomeMarkers != null ? BiomeMarkers.OnOverall : DefaultOn, BiomeMarkers?.GetCrystal()));
                ret.Add((Notes != null ? Notes.OnOverall : DefaultOn, Notes?.GetCrystal()));
                ret.Add((Projectiles != null ? Projectiles.OnOverall : DefaultOn, Projectiles?.GetCrystal()));
                ret.Add((Hazards != null ? Hazards.OnOverall : DefaultOn, Hazards?.GetCrystal()));
                ret.Add((BendableSplines != null ? BendableSplines.OnOverall : DefaultOn, BendableSplines?.GetCrystal()));
                ret.Add((Terminals != null ? Terminals.OnOverall : DefaultOn, Terminals?.GetCrystal()));
                ret.Add((LeveledItems != null ? LeveledItems.OnOverall : DefaultOn, LeveledItems?.GetCrystal()));
                ret.Add((GenericBaseFormTemplates != null ? GenericBaseFormTemplates.OnOverall : DefaultOn, GenericBaseFormTemplates?.GetCrystal()));
                ret.Add((GenericBaseForms != null ? GenericBaseForms.OnOverall : DefaultOn, GenericBaseForms?.GetCrystal()));
                ret.Add((LeveledBaseForms != null ? LeveledBaseForms.OnOverall : DefaultOn, LeveledBaseForms?.GetCrystal()));
                ret.Add((Weathers != null ? Weathers.OnOverall : DefaultOn, Weathers?.GetCrystal()));
                ret.Add((WeatherSettings != null ? WeatherSettings.OnOverall : DefaultOn, WeatherSettings?.GetCrystal()));
                ret.Add((Climates != null ? Climates.OnOverall : DefaultOn, Climates?.GetCrystal()));
                ret.Add((ShaderParticleGeometries != null ? ShaderParticleGeometries.OnOverall : DefaultOn, ShaderParticleGeometries?.GetCrystal()));
                ret.Add((Regions != null ? Regions.OnOverall : DefaultOn, Regions?.GetCrystal()));
                ret.Add((NavigationMeshInfoMaps != null ? NavigationMeshInfoMaps.OnOverall : DefaultOn, NavigationMeshInfoMaps?.GetCrystal()));
                ret.Add((Cells != null ? Cells.OnOverall : DefaultOn, Cells?.GetCrystal()));
                ret.Add((Worldspaces != null ? Worldspaces.OnOverall : DefaultOn, Worldspaces?.GetCrystal()));
                ret.Add((Quests != null ? Quests.OnOverall : DefaultOn, Quests?.GetCrystal()));
                ret.Add((IdleAnimations != null ? IdleAnimations.OnOverall : DefaultOn, IdleAnimations?.GetCrystal()));
                ret.Add((Packages != null ? Packages.OnOverall : DefaultOn, Packages?.GetCrystal()));
                ret.Add((CombatStyles != null ? CombatStyles.OnOverall : DefaultOn, CombatStyles?.GetCrystal()));
                ret.Add((LoadScreens != null ? LoadScreens.OnOverall : DefaultOn, LoadScreens?.GetCrystal()));
                ret.Add((AnimatedObjects != null ? AnimatedObjects.OnOverall : DefaultOn, AnimatedObjects?.GetCrystal()));
                ret.Add((Waters != null ? Waters.OnOverall : DefaultOn, Waters?.GetCrystal()));
                ret.Add((EffectShaders != null ? EffectShaders.OnOverall : DefaultOn, EffectShaders?.GetCrystal()));
                ret.Add((Explosions != null ? Explosions.OnOverall : DefaultOn, Explosions?.GetCrystal()));
                ret.Add((Debris != null ? Debris.OnOverall : DefaultOn, Debris?.GetCrystal()));
                ret.Add((ImageSpaces != null ? ImageSpaces.OnOverall : DefaultOn, ImageSpaces?.GetCrystal()));
                ret.Add((ImageSpaceAdapters != null ? ImageSpaceAdapters.OnOverall : DefaultOn, ImageSpaceAdapters?.GetCrystal()));
                ret.Add((FormLists != null ? FormLists.OnOverall : DefaultOn, FormLists?.GetCrystal()));
                ret.Add((Perks != null ? Perks.OnOverall : DefaultOn, Perks?.GetCrystal()));
                ret.Add((BodyParts != null ? BodyParts.OnOverall : DefaultOn, BodyParts?.GetCrystal()));
                ret.Add((AddonNodes != null ? AddonNodes.OnOverall : DefaultOn, AddonNodes?.GetCrystal()));
                ret.Add((ActorValueInformation != null ? ActorValueInformation.OnOverall : DefaultOn, ActorValueInformation?.GetCrystal()));
                ret.Add((CameraShots != null ? CameraShots.OnOverall : DefaultOn, CameraShots?.GetCrystal()));
                ret.Add((CameraPaths != null ? CameraPaths.OnOverall : DefaultOn, CameraPaths?.GetCrystal()));
                ret.Add((VoiceTypes != null ? VoiceTypes.OnOverall : DefaultOn, VoiceTypes?.GetCrystal()));
                ret.Add((MaterialTypes != null ? MaterialTypes.OnOverall : DefaultOn, MaterialTypes?.GetCrystal()));
                ret.Add((Impacts != null ? Impacts.OnOverall : DefaultOn, Impacts?.GetCrystal()));
                ret.Add((ImpactDataSets != null ? ImpactDataSets.OnOverall : DefaultOn, ImpactDataSets?.GetCrystal()));
                ret.Add((ArmorAddons != null ? ArmorAddons.OnOverall : DefaultOn, ArmorAddons?.GetCrystal()));
                ret.Add((Locations != null ? Locations.OnOverall : DefaultOn, Locations?.GetCrystal()));
                ret.Add((Messages != null ? Messages.OnOverall : DefaultOn, Messages?.GetCrystal()));
                ret.Add((DefaultObjectManagers != null ? DefaultObjectManagers.OnOverall : DefaultOn, DefaultObjectManagers?.GetCrystal()));
                ret.Add((DefaultObjects != null ? DefaultObjects.OnOverall : DefaultOn, DefaultObjects?.GetCrystal()));
                ret.Add((LightingTemplates != null ? LightingTemplates.OnOverall : DefaultOn, LightingTemplates?.GetCrystal()));
                ret.Add((MusicTypes != null ? MusicTypes.OnOverall : DefaultOn, MusicTypes?.GetCrystal()));
                ret.Add((Footsteps != null ? Footsteps.OnOverall : DefaultOn, Footsteps?.GetCrystal()));
                ret.Add((FootstepSets != null ? FootstepSets.OnOverall : DefaultOn, FootstepSets?.GetCrystal()));
                ret.Add((StoryManagerBranchNodes != null ? StoryManagerBranchNodes.OnOverall : DefaultOn, StoryManagerBranchNodes?.GetCrystal()));
                ret.Add((StoryManagerQuestNodes != null ? StoryManagerQuestNodes.OnOverall : DefaultOn, StoryManagerQuestNodes?.GetCrystal()));
                ret.Add((StoryManagerEventNodes != null ? StoryManagerEventNodes.OnOverall : DefaultOn, StoryManagerEventNodes?.GetCrystal()));
                ret.Add((MusicTracks != null ? MusicTracks.OnOverall : DefaultOn, MusicTracks?.GetCrystal()));
                ret.Add((EquipTypes != null ? EquipTypes.OnOverall : DefaultOn, EquipTypes?.GetCrystal()));
                ret.Add((Outfits != null ? Outfits.OnOverall : DefaultOn, Outfits?.GetCrystal()));
                ret.Add((ArtObjects != null ? ArtObjects.OnOverall : DefaultOn, ArtObjects?.GetCrystal()));
                ret.Add((MovementTypes != null ? MovementTypes.OnOverall : DefaultOn, MovementTypes?.GetCrystal()));
                ret.Add((CollisionLayers != null ? CollisionLayers.OnOverall : DefaultOn, CollisionLayers?.GetCrystal()));
                ret.Add((Colors != null ? Colors.OnOverall : DefaultOn, Colors?.GetCrystal()));
                ret.Add((ReverbParameters != null ? ReverbParameters.OnOverall : DefaultOn, ReverbParameters?.GetCrystal()));
                ret.Add((ReferenceGroups != null ? ReferenceGroups.OnOverall : DefaultOn, ReferenceGroups?.GetCrystal()));
                ret.Add((AimModels != null ? AimModels.OnOverall : DefaultOn, AimModels?.GetCrystal()));
                ret.Add((AimAssistModels != null ? AimAssistModels.OnOverall : DefaultOn, AimAssistModels?.GetCrystal()));
                ret.Add((MeleeAimAssistModels != null ? MeleeAimAssistModels.OnOverall : DefaultOn, MeleeAimAssistModels?.GetCrystal()));
                ret.Add((Layers != null ? Layers.OnOverall : DefaultOn, Layers?.GetCrystal()));
                ret.Add((ConstructibleObjects != null ? ConstructibleObjects.OnOverall : DefaultOn, ConstructibleObjects?.GetCrystal()));
                ret.Add((ObjectModifications != null ? ObjectModifications.OnOverall : DefaultOn, ObjectModifications?.GetCrystal()));
                ret.Add((Zooms != null ? Zooms.OnOverall : DefaultOn, Zooms?.GetCrystal()));
                ret.Add((InstanceNamingRules != null ? InstanceNamingRules.OnOverall : DefaultOn, InstanceNamingRules?.GetCrystal()));
                ret.Add((SoundKeywordMappings != null ? SoundKeywordMappings.OnOverall : DefaultOn, SoundKeywordMappings?.GetCrystal()));
                ret.Add((AttractionRules != null ? AttractionRules.OnOverall : DefaultOn, AttractionRules?.GetCrystal()));
                ret.Add((SceneCollections != null ? SceneCollections.OnOverall : DefaultOn, SceneCollections?.GetCrystal()));
                ret.Add((AnimationSoundTagSets != null ? AnimationSoundTagSets.OnOverall : DefaultOn, AnimationSoundTagSets?.GetCrystal()));
                ret.Add((Resources != null ? Resources.OnOverall : DefaultOn, Resources?.GetCrystal()));
                ret.Add((Biomes != null ? Biomes.OnOverall : DefaultOn, Biomes?.GetCrystal()));
                ret.Add((NavigationMeshObstacleCoverManagers != null ? NavigationMeshObstacleCoverManagers.OnOverall : DefaultOn, NavigationMeshObstacleCoverManagers?.GetCrystal()));
                ret.Add((LensFlares != null ? LensFlares.OnOverall : DefaultOn, LensFlares?.GetCrystal()));
                ret.Add((ObjectVisibilityManagers != null ? ObjectVisibilityManagers.OnOverall : DefaultOn, ObjectVisibilityManagers?.GetCrystal()));
                ret.Add((SnapTemplateNodes != null ? SnapTemplateNodes.OnOverall : DefaultOn, SnapTemplateNodes?.GetCrystal()));
                ret.Add((SnapTemplates != null ? SnapTemplates.OnOverall : DefaultOn, SnapTemplates?.GetCrystal()));
                ret.Add((GroundCovers != null ? GroundCovers.OnOverall : DefaultOn, GroundCovers?.GetCrystal()));
                ret.Add((MorphableObjects != null ? MorphableObjects.OnOverall : DefaultOn, MorphableObjects?.GetCrystal()));
                ret.Add((Traversals != null ? Traversals.OnOverall : DefaultOn, Traversals?.GetCrystal()));
                ret.Add((ResourceGenerationData != null ? ResourceGenerationData.OnOverall : DefaultOn, ResourceGenerationData?.GetCrystal()));
                ret.Add((BiomeSwaps != null ? BiomeSwaps.OnOverall : DefaultOn, BiomeSwaps?.GetCrystal()));
                ret.Add((Atmospheres != null ? Atmospheres.OnOverall : DefaultOn, Atmospheres?.GetCrystal()));
                ret.Add((LeveledSpaceCells != null ? LeveledSpaceCells.OnOverall : DefaultOn, LeveledSpaceCells?.GetCrystal()));
                ret.Add((SpeechChallenges != null ? SpeechChallenges.OnOverall : DefaultOn, SpeechChallenges?.GetCrystal()));
                ret.Add((AimAssistPoses != null ? AimAssistPoses.OnOverall : DefaultOn, AimAssistPoses?.GetCrystal()));
                ret.Add((VolumetricLightings != null ? VolumetricLightings.OnOverall : DefaultOn, VolumetricLightings?.GetCrystal()));
                ret.Add((SurfaceBlocks != null ? SurfaceBlocks.OnOverall : DefaultOn, SurfaceBlocks?.GetCrystal()));
                ret.Add((SurfacePatternConfigs != null ? SurfacePatternConfigs.OnOverall : DefaultOn, SurfacePatternConfigs?.GetCrystal()));
                ret.Add((SurfacePatterns != null ? SurfacePatterns.OnOverall : DefaultOn, SurfacePatterns?.GetCrystal()));
                ret.Add((SurfaceTrees != null ? SurfaceTrees.OnOverall : DefaultOn, SurfaceTrees?.GetCrystal()));
                ret.Add((PlanetContentManagerTrees != null ? PlanetContentManagerTrees.OnOverall : DefaultOn, PlanetContentManagerTrees?.GetCrystal()));
                ret.Add((BoneModifiers != null ? BoneModifiers.OnOverall : DefaultOn, BoneModifiers?.GetCrystal()));
                ret.Add((SnapTemplateBehaviors != null ? SnapTemplateBehaviors.OnOverall : DefaultOn, SnapTemplateBehaviors?.GetCrystal()));
                ret.Add((Planets != null ? Planets.OnOverall : DefaultOn, Planets?.GetCrystal()));
                ret.Add((ConditionRecords != null ? ConditionRecords.OnOverall : DefaultOn, ConditionRecords?.GetCrystal()));
                ret.Add((PlanetContentManagerBranchNodes != null ? PlanetContentManagerBranchNodes.OnOverall : DefaultOn, PlanetContentManagerBranchNodes?.GetCrystal()));
                ret.Add((PlanetContentManagerContentNodes != null ? PlanetContentManagerContentNodes.OnOverall : DefaultOn, PlanetContentManagerContentNodes?.GetCrystal()));
                ret.Add((Stars != null ? Stars.OnOverall : DefaultOn, Stars?.GetCrystal()));
                ret.Add((WWiseEventDatas != null ? WWiseEventDatas.OnOverall : DefaultOn, WWiseEventDatas?.GetCrystal()));
                ret.Add((ResearchProjects != null ? ResearchProjects.OnOverall : DefaultOn, ResearchProjects?.GetCrystal()));
                ret.Add((AimOpticalSightMarkers != null ? AimOpticalSightMarkers.OnOverall : DefaultOn, AimOpticalSightMarkers?.GetCrystal()));
                ret.Add((AmbienceSets != null ? AmbienceSets.OnOverall : DefaultOn, AmbienceSets?.GetCrystal()));
                ret.Add((WeaponBarrelModels != null ? WeaponBarrelModels.OnOverall : DefaultOn, WeaponBarrelModels?.GetCrystal()));
                ret.Add((SurfacePatternStyles != null ? SurfacePatternStyles.OnOverall : DefaultOn, SurfacePatternStyles?.GetCrystal()));
                ret.Add((LayeredMaterialSwaps != null ? LayeredMaterialSwaps.OnOverall : DefaultOn, LayeredMaterialSwaps?.GetCrystal()));
                ret.Add((ForceDatas != null ? ForceDatas.OnOverall : DefaultOn, ForceDatas?.GetCrystal()));
                ret.Add((TerminalMenus != null ? TerminalMenus.OnOverall : DefaultOn, TerminalMenus?.GetCrystal()));
                ret.Add((EffectSequences != null ? EffectSequences.OnOverall : DefaultOn, EffectSequences?.GetCrystal()));
                ret.Add((SecondaryDamageLists != null ? SecondaryDamageLists.OnOverall : DefaultOn, SecondaryDamageLists?.GetCrystal()));
                ret.Add((MaterialPaths != null ? MaterialPaths.OnOverall : DefaultOn, MaterialPaths?.GetCrystal()));
                ret.Add((Clouds != null ? Clouds.OnOverall : DefaultOn, Clouds?.GetCrystal()));
                ret.Add((FogVolumes != null ? FogVolumes.OnOverall : DefaultOn, FogVolumes?.GetCrystal()));
                ret.Add((WWiseKeywordMappings != null ? WWiseKeywordMappings.OnOverall : DefaultOn, WWiseKeywordMappings?.GetCrystal()));
                ret.Add((LegendaryItems != null ? LegendaryItems.OnOverall : DefaultOn, LegendaryItems?.GetCrystal()));
                ret.Add((ParticleSystemDefineCollisions != null ? ParticleSystemDefineCollisions.OnOverall : DefaultOn, ParticleSystemDefineCollisions?.GetCrystal()));
                ret.Add((SunPresets != null ? SunPresets.OnOverall : DefaultOn, SunPresets?.GetCrystal()));
                ret.Add((PhotoModeFeatures != null ? PhotoModeFeatures.OnOverall : DefaultOn, PhotoModeFeatures?.GetCrystal()));
                ret.Add((GameplayOptions != null ? GameplayOptions.OnOverall : DefaultOn, GameplayOptions?.GetCrystal()));
                ret.Add((GameplayOptionsGroups != null ? GameplayOptionsGroups.OnOverall : DefaultOn, GameplayOptionsGroups?.GetCrystal()));
                ret.Add((TimeOfDays != null ? TimeOfDays.OnOverall : DefaultOn, TimeOfDays?.GetCrystal()));
                ret.Add((ActorValueModulations != null ? ActorValueModulations.OnOverall : DefaultOn, ActorValueModulations?.GetCrystal()));
                ret.Add((Challenges != null ? Challenges.OnOverall : DefaultOn, Challenges?.GetCrystal()));
                ret.Add((FacialExpressions != null ? FacialExpressions.OnOverall : DefaultOn, FacialExpressions?.GetCrystal()));
                ret.Add((PERS != null ? PERS.OnOverall : DefaultOn, PERS?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public StarfieldRelease StarfieldRelease { get; }
        public override GameRelease GameRelease => StarfieldRelease.ToGameRelease();
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        IGroup<T>? IMod.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroup? IMod.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        uint IModGetter.GetRecordCount() => this.GetRecordCount();
        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => StarfieldModMixIn.GetEqualsMask(this, (IStarfieldModGetter)rhs, include);
        public override bool CanUseLocalization => true;
        public override bool UsingLocalization
        {
            get => this.ModHeader.Flags.HasFlag(StarfieldModHeader.HeaderFlag.Localized);
            set => this.ModHeader.Flags = this.ModHeader.Flags.SetFlag(StarfieldModHeader.HeaderFlag.Localized, value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<MasterReference> IMod.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IMod.NextFormID
        {
            get => this.ModHeader.Stats.NextFormID;
            set => this.ModHeader.Stats.NextFormID = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IModGetter.NextFormID => this.ModHeader.Stats.NextFormID;
        /// <param name="modKey">ModKey to assign to the mod</param>
        /// <param name="release">Release to assign to the mod</param>
        /// <param name="headerVersion">Header version to assign to the mod.  Default value is latest header version the game supports</param>
        /// <param name="forceUseLowerFormIDRanges">Default value of false, which will not use lower FormID ranges from 1-X.  A null value will refer to header version + game release to determine if it should be allowed.  True will force it to always use FormIDs 1-X</param>
        public StarfieldMod(
            ModKey modKey,
            StarfieldRelease release,
            float? headerVersion = null,
            bool? forceUseLowerFormIDRanges = false)
            : base(modKey)
        {
            if (headerVersion != null)
            {
                this.ModHeader.Stats.Version = headerVersion.Value;
            }
            this.StarfieldRelease = release;
            this.ModHeader.Stats.NextFormID = GetDefaultInitialNextFormID(forceUseLowerFormIDRanges: forceUseLowerFormIDRanges);
            _GameSettings_Object = new StarfieldGroup<GameSetting>(this);
            _Keywords_Object = new StarfieldGroup<Keyword>(this);
            _FFKW_Object = new StarfieldGroup<FFKWRecord>(this);
            _LocationReferenceTypes_Object = new StarfieldGroup<LocationReferenceType>(this);
            _Actions_Object = new StarfieldGroup<ActionRecord>(this);
            _Transforms_Object = new StarfieldGroup<Transform>(this);
            _TextureSets_Object = new StarfieldGroup<TextureSet>(this);
            _Globals_Object = new StarfieldGroup<Global>(this);
            _DamageTypes_Object = new StarfieldGroup<DamageType>(this);
            _Classes_Object = new StarfieldGroup<Class>(this);
            _Factions_Object = new StarfieldGroup<Faction>(this);
            _AffinityEvents_Object = new StarfieldGroup<AffinityEvent>(this);
            _HeadParts_Object = new StarfieldGroup<HeadPart>(this);
            _Races_Object = new StarfieldGroup<Race>(this);
            _SoundMarkers_Object = new StarfieldGroup<SoundMarker>(this);
            _SoundEchoMarkers_Object = new StarfieldGroup<SoundEchoMarker>(this);
            _AcousticSpaces_Object = new StarfieldGroup<AcousticSpace>(this);
            _AudioOcclusionPrimitives_Object = new StarfieldGroup<AudioOcclusionPrimitive>(this);
            _MagicEffects_Object = new StarfieldGroup<MagicEffect>(this);
            _LandscapeTextures_Object = new StarfieldGroup<LandscapeTexture>(this);
            _ProjectedDecals_Object = new StarfieldGroup<ProjectedDecal>(this);
            _ObjectEffects_Object = new StarfieldGroup<ObjectEffect>(this);
            _Spells_Object = new StarfieldGroup<Spell>(this);
            _Activators_Object = new StarfieldGroup<Activator>(this);
            _CurveTables_Object = new StarfieldGroup<CurveTable>(this);
            _Curve3Ds_Object = new StarfieldGroup<Curve3D>(this);
            _Armors_Object = new StarfieldGroup<Armor>(this);
            _Books_Object = new StarfieldGroup<Book>(this);
            _Containers_Object = new StarfieldGroup<Container>(this);
            _Doors_Object = new StarfieldGroup<Door>(this);
            _Lights_Object = new StarfieldGroup<Light>(this);
            _MiscItems_Object = new StarfieldGroup<MiscItem>(this);
            _Statics_Object = new StarfieldGroup<Static>(this);
            _StaticCollections_Object = new StarfieldGroup<StaticCollection>(this);
            _PackIns_Object = new StarfieldGroup<PackIn>(this);
            _MoveableStatics_Object = new StarfieldGroup<MoveableStatic>(this);
            _Grasses_Object = new StarfieldGroup<Grass>(this);
            _Florae_Object = new StarfieldGroup<Flora>(this);
            _Furniture_Object = new StarfieldGroup<Furniture>(this);
            _Weapons_Object = new StarfieldGroup<Weapon>(this);
            _Ammunitions_Object = new StarfieldGroup<Ammunition>(this);
            _Npcs_Object = new StarfieldGroup<Npc>(this);
            _LeveledNpcs_Object = new StarfieldGroup<LeveledNpc>(this);
            _LeveledPackIns_Object = new StarfieldGroup<LeveledPackIn>(this);
            _Keys_Object = new StarfieldGroup<Key>(this);
            _Ingestibles_Object = new StarfieldGroup<Ingestible>(this);
            _IdleMarkers_Object = new StarfieldGroup<IdleMarker>(this);
            _BiomeMarkers_Object = new StarfieldGroup<BiomeMarker>(this);
            _Notes_Object = new StarfieldGroup<Note>(this);
            _Projectiles_Object = new StarfieldGroup<Projectile>(this);
            _Hazards_Object = new StarfieldGroup<Hazard>(this);
            _BendableSplines_Object = new StarfieldGroup<BendableSpline>(this);
            _Terminals_Object = new StarfieldGroup<Terminal>(this);
            _LeveledItems_Object = new StarfieldGroup<LeveledItem>(this);
            _GenericBaseFormTemplates_Object = new StarfieldGroup<GenericBaseFormTemplate>(this);
            _GenericBaseForms_Object = new StarfieldGroup<GenericBaseForm>(this);
            _LeveledBaseForms_Object = new StarfieldGroup<LeveledBaseForm>(this);
            _Weathers_Object = new StarfieldGroup<Weather>(this);
            _WeatherSettings_Object = new StarfieldGroup<WeatherSetting>(this);
            _Climates_Object = new StarfieldGroup<Climate>(this);
            _ShaderParticleGeometries_Object = new StarfieldGroup<ShaderParticleGeometry>(this);
            _Regions_Object = new StarfieldGroup<Region>(this);
            _NavigationMeshInfoMaps_Object = new StarfieldGroup<NavigationMeshInfoMap>(this);
            _Worldspaces_Object = new StarfieldGroup<Worldspace>(this);
            _Quests_Object = new StarfieldGroup<Quest>(this);
            _IdleAnimations_Object = new StarfieldGroup<IdleAnimation>(this);
            _Packages_Object = new StarfieldGroup<Package>(this);
            _CombatStyles_Object = new StarfieldGroup<CombatStyle>(this);
            _LoadScreens_Object = new StarfieldGroup<LoadScreen>(this);
            _AnimatedObjects_Object = new StarfieldGroup<AnimatedObject>(this);
            _Waters_Object = new StarfieldGroup<Water>(this);
            _EffectShaders_Object = new StarfieldGroup<EffectShader>(this);
            _Explosions_Object = new StarfieldGroup<Explosion>(this);
            _Debris_Object = new StarfieldGroup<Debris>(this);
            _ImageSpaces_Object = new StarfieldGroup<ImageSpace>(this);
            _ImageSpaceAdapters_Object = new StarfieldGroup<ImageSpaceAdapter>(this);
            _FormLists_Object = new StarfieldGroup<FormList>(this);
            _Perks_Object = new StarfieldGroup<Perk>(this);
            _BodyParts_Object = new StarfieldGroup<BodyPartData>(this);
            _AddonNodes_Object = new StarfieldGroup<AddonNode>(this);
            _ActorValueInformation_Object = new StarfieldGroup<ActorValueInformation>(this);
            _CameraShots_Object = new StarfieldGroup<CameraShot>(this);
            _CameraPaths_Object = new StarfieldGroup<CameraPath>(this);
            _VoiceTypes_Object = new StarfieldGroup<VoiceType>(this);
            _MaterialTypes_Object = new StarfieldGroup<MaterialType>(this);
            _Impacts_Object = new StarfieldGroup<Impact>(this);
            _ImpactDataSets_Object = new StarfieldGroup<ImpactDataSet>(this);
            _ArmorAddons_Object = new StarfieldGroup<ArmorAddon>(this);
            _Locations_Object = new StarfieldGroup<Location>(this);
            _Messages_Object = new StarfieldGroup<Message>(this);
            _DefaultObjectManagers_Object = new StarfieldGroup<DefaultObjectManager>(this);
            _DefaultObjects_Object = new StarfieldGroup<DefaultObject>(this);
            _LightingTemplates_Object = new StarfieldGroup<LightingTemplate>(this);
            _MusicTypes_Object = new StarfieldGroup<MusicType>(this);
            _Footsteps_Object = new StarfieldGroup<Footstep>(this);
            _FootstepSets_Object = new StarfieldGroup<FootstepSet>(this);
            _StoryManagerBranchNodes_Object = new StarfieldGroup<StoryManagerBranchNode>(this);
            _StoryManagerQuestNodes_Object = new StarfieldGroup<StoryManagerQuestNode>(this);
            _StoryManagerEventNodes_Object = new StarfieldGroup<StoryManagerEventNode>(this);
            _MusicTracks_Object = new StarfieldGroup<MusicTrack>(this);
            _EquipTypes_Object = new StarfieldGroup<EquipType>(this);
            _Outfits_Object = new StarfieldGroup<Outfit>(this);
            _ArtObjects_Object = new StarfieldGroup<ArtObject>(this);
            _MovementTypes_Object = new StarfieldGroup<MovementType>(this);
            _CollisionLayers_Object = new StarfieldGroup<CollisionLayer>(this);
            _Colors_Object = new StarfieldGroup<ColorRecord>(this);
            _ReverbParameters_Object = new StarfieldGroup<ReverbParameters>(this);
            _ReferenceGroups_Object = new StarfieldGroup<ReferenceGroup>(this);
            _AimModels_Object = new StarfieldGroup<AimModel>(this);
            _AimAssistModels_Object = new StarfieldGroup<AimAssistModel>(this);
            _MeleeAimAssistModels_Object = new StarfieldGroup<MeleeAimAssistModel>(this);
            _Layers_Object = new StarfieldGroup<Layer>(this);
            _ConstructibleObjects_Object = new StarfieldGroup<ConstructibleObject>(this);
            _ObjectModifications_Object = new StarfieldGroup<AObjectModification>(this);
            _Zooms_Object = new StarfieldGroup<Zoom>(this);
            _InstanceNamingRules_Object = new StarfieldGroup<InstanceNamingRules>(this);
            _SoundKeywordMappings_Object = new StarfieldGroup<SoundKeywordMapping>(this);
            _AttractionRules_Object = new StarfieldGroup<AttractionRule>(this);
            _SceneCollections_Object = new StarfieldGroup<SceneCollection>(this);
            _AnimationSoundTagSets_Object = new StarfieldGroup<AnimationSoundTagSet>(this);
            _Resources_Object = new StarfieldGroup<Resource>(this);
            _Biomes_Object = new StarfieldGroup<Biome>(this);
            _NavigationMeshObstacleCoverManagers_Object = new StarfieldGroup<NavigationMeshObstacleCoverManager>(this);
            _LensFlares_Object = new StarfieldGroup<LensFlare>(this);
            _ObjectVisibilityManagers_Object = new StarfieldGroup<ObjectVisibilityManager>(this);
            _SnapTemplateNodes_Object = new StarfieldGroup<SnapTemplateNode>(this);
            _SnapTemplates_Object = new StarfieldGroup<SnapTemplate>(this);
            _GroundCovers_Object = new StarfieldGroup<GroundCover>(this);
            _MorphableObjects_Object = new StarfieldGroup<MorphableObject>(this);
            _Traversals_Object = new StarfieldGroup<Traversal>(this);
            _ResourceGenerationData_Object = new StarfieldGroup<ResourceGenerationData>(this);
            _BiomeSwaps_Object = new StarfieldGroup<BiomeSwap>(this);
            _Atmospheres_Object = new StarfieldGroup<Atmosphere>(this);
            _LeveledSpaceCells_Object = new StarfieldGroup<LeveledSpaceCell>(this);
            _SpeechChallenges_Object = new StarfieldGroup<SpeechChallenge>(this);
            _AimAssistPoses_Object = new StarfieldGroup<AimAssistPose>(this);
            _VolumetricLightings_Object = new StarfieldGroup<VolumetricLighting>(this);
            _SurfaceBlocks_Object = new StarfieldGroup<SurfaceBlock>(this);
            _SurfacePatternConfigs_Object = new StarfieldGroup<SurfacePatternConfig>(this);
            _SurfacePatterns_Object = new StarfieldGroup<SurfacePattern>(this);
            _SurfaceTrees_Object = new StarfieldGroup<SurfaceTree>(this);
            _PlanetContentManagerTrees_Object = new StarfieldGroup<PlanetContentManagerTree>(this);
            _BoneModifiers_Object = new StarfieldGroup<BoneModifier>(this);
            _SnapTemplateBehaviors_Object = new StarfieldGroup<SnapTemplateBehavior>(this);
            _Planets_Object = new StarfieldGroup<Planet>(this);
            _ConditionRecords_Object = new StarfieldGroup<ConditionRecord>(this);
            _PlanetContentManagerBranchNodes_Object = new StarfieldGroup<PlanetContentManagerBranchNode>(this);
            _PlanetContentManagerContentNodes_Object = new StarfieldGroup<PlanetContentManagerContentNode>(this);
            _Stars_Object = new StarfieldGroup<Star>(this);
            _WWiseEventDatas_Object = new StarfieldGroup<WWiseEventData>(this);
            _ResearchProjects_Object = new StarfieldGroup<ResearchProject>(this);
            _AimOpticalSightMarkers_Object = new StarfieldGroup<AimOpticalSightMarker>(this);
            _AmbienceSets_Object = new StarfieldGroup<AmbienceSet>(this);
            _WeaponBarrelModels_Object = new StarfieldGroup<WeaponBarrelModel>(this);
            _SurfacePatternStyles_Object = new StarfieldGroup<SurfacePatternStyle>(this);
            _LayeredMaterialSwaps_Object = new StarfieldGroup<LayeredMaterialSwap>(this);
            _ForceDatas_Object = new StarfieldGroup<ForceData>(this);
            _TerminalMenus_Object = new StarfieldGroup<TerminalMenu>(this);
            _EffectSequences_Object = new StarfieldGroup<EffectSequence>(this);
            _SecondaryDamageLists_Object = new StarfieldGroup<SecondaryDamageList>(this);
            _MaterialPaths_Object = new StarfieldGroup<MaterialPath>(this);
            _Clouds_Object = new StarfieldGroup<Clouds>(this);
            _FogVolumes_Object = new StarfieldGroup<FogVolume>(this);
            _WWiseKeywordMappings_Object = new StarfieldGroup<WWiseKeywordMapping>(this);
            _LegendaryItems_Object = new StarfieldGroup<LegendaryItem>(this);
            _ParticleSystemDefineCollisions_Object = new StarfieldGroup<ParticleSystemDefineCollision>(this);
            _SunPresets_Object = new StarfieldGroup<SunPreset>(this);
            _PhotoModeFeatures_Object = new StarfieldGroup<PhotoModeFeature>(this);
            _GameplayOptions_Object = new StarfieldGroup<GameplayOptions>(this);
            _GameplayOptionsGroups_Object = new StarfieldGroup<GameplayOptionsGroup>(this);
            _TimeOfDays_Object = new StarfieldGroup<TimeOfDayRecord>(this);
            _ActorValueModulations_Object = new StarfieldGroup<ActorValueModulation>(this);
            _Challenges_Object = new StarfieldGroup<Challenge>(this);
            _FacialExpressions_Object = new StarfieldGroup<FacialExpression>(this);
            _PERS_Object = new StarfieldGroup<PERS>(this);
            CustomCtor();
        }
        public void AddRecords(
            StarfieldMod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(rhsMod.Keywords.RecordCache.Items);
            }
            if (mask?.FFKW ?? true)
            {
                this.FFKW.RecordCache.Set(rhsMod.FFKW.RecordCache.Items);
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(rhsMod.LocationReferenceTypes.RecordCache.Items);
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(rhsMod.Actions.RecordCache.Items);
            }
            if (mask?.Transforms ?? true)
            {
                this.Transforms.RecordCache.Set(rhsMod.Transforms.RecordCache.Items);
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(rhsMod.TextureSets.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
            if (mask?.DamageTypes ?? true)
            {
                this.DamageTypes.RecordCache.Set(rhsMod.DamageTypes.RecordCache.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(rhsMod.Classes.RecordCache.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(rhsMod.Factions.RecordCache.Items);
            }
            if (mask?.AffinityEvents ?? true)
            {
                this.AffinityEvents.RecordCache.Set(rhsMod.AffinityEvents.RecordCache.Items);
            }
            if (mask?.HeadParts ?? true)
            {
                this.HeadParts.RecordCache.Set(rhsMod.HeadParts.RecordCache.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(rhsMod.Races.RecordCache.Items);
            }
            if (mask?.SoundMarkers ?? true)
            {
                this.SoundMarkers.RecordCache.Set(rhsMod.SoundMarkers.RecordCache.Items);
            }
            if (mask?.SoundEchoMarkers ?? true)
            {
                this.SoundEchoMarkers.RecordCache.Set(rhsMod.SoundEchoMarkers.RecordCache.Items);
            }
            if (mask?.AcousticSpaces ?? true)
            {
                this.AcousticSpaces.RecordCache.Set(rhsMod.AcousticSpaces.RecordCache.Items);
            }
            if (mask?.AudioOcclusionPrimitives ?? true)
            {
                this.AudioOcclusionPrimitives.RecordCache.Set(rhsMod.AudioOcclusionPrimitives.RecordCache.Items);
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.RecordCache.Set(rhsMod.MagicEffects.RecordCache.Items);
            }
            if (mask?.LandscapeTextures ?? true)
            {
                this.LandscapeTextures.RecordCache.Set(rhsMod.LandscapeTextures.RecordCache.Items);
            }
            if (mask?.ProjectedDecals ?? true)
            {
                this.ProjectedDecals.RecordCache.Set(rhsMod.ProjectedDecals.RecordCache.Items);
            }
            if (mask?.ObjectEffects ?? true)
            {
                this.ObjectEffects.RecordCache.Set(rhsMod.ObjectEffects.RecordCache.Items);
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.RecordCache.Set(rhsMod.Spells.RecordCache.Items);
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.RecordCache.Set(rhsMod.Activators.RecordCache.Items);
            }
            if (mask?.CurveTables ?? true)
            {
                this.CurveTables.RecordCache.Set(rhsMod.CurveTables.RecordCache.Items);
            }
            if (mask?.Curve3Ds ?? true)
            {
                this.Curve3Ds.RecordCache.Set(rhsMod.Curve3Ds.RecordCache.Items);
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.RecordCache.Set(rhsMod.Armors.RecordCache.Items);
            }
            if (mask?.Books ?? true)
            {
                this.Books.RecordCache.Set(rhsMod.Books.RecordCache.Items);
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.RecordCache.Set(rhsMod.Containers.RecordCache.Items);
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.RecordCache.Set(rhsMod.Doors.RecordCache.Items);
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.RecordCache.Set(rhsMod.Lights.RecordCache.Items);
            }
            if (mask?.MiscItems ?? true)
            {
                this.MiscItems.RecordCache.Set(rhsMod.MiscItems.RecordCache.Items);
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.RecordCache.Set(rhsMod.Statics.RecordCache.Items);
            }
            if (mask?.StaticCollections ?? true)
            {
                this.StaticCollections.RecordCache.Set(rhsMod.StaticCollections.RecordCache.Items);
            }
            if (mask?.PackIns ?? true)
            {
                this.PackIns.RecordCache.Set(rhsMod.PackIns.RecordCache.Items);
            }
            if (mask?.MoveableStatics ?? true)
            {
                this.MoveableStatics.RecordCache.Set(rhsMod.MoveableStatics.RecordCache.Items);
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.RecordCache.Set(rhsMod.Grasses.RecordCache.Items);
            }
            if (mask?.Florae ?? true)
            {
                this.Florae.RecordCache.Set(rhsMod.Florae.RecordCache.Items);
            }
            if (mask?.Furniture ?? true)
            {
                this.Furniture.RecordCache.Set(rhsMod.Furniture.RecordCache.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(rhsMod.Weapons.RecordCache.Items);
            }
            if (mask?.Ammunitions ?? true)
            {
                this.Ammunitions.RecordCache.Set(rhsMod.Ammunitions.RecordCache.Items);
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(rhsMod.Npcs.RecordCache.Items);
            }
            if (mask?.LeveledNpcs ?? true)
            {
                this.LeveledNpcs.RecordCache.Set(rhsMod.LeveledNpcs.RecordCache.Items);
            }
            if (mask?.LeveledPackIns ?? true)
            {
                this.LeveledPackIns.RecordCache.Set(rhsMod.LeveledPackIns.RecordCache.Items);
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.RecordCache.Set(rhsMod.Keys.RecordCache.Items);
            }
            if (mask?.Ingestibles ?? true)
            {
                this.Ingestibles.RecordCache.Set(rhsMod.Ingestibles.RecordCache.Items);
            }
            if (mask?.IdleMarkers ?? true)
            {
                this.IdleMarkers.RecordCache.Set(rhsMod.IdleMarkers.RecordCache.Items);
            }
            if (mask?.BiomeMarkers ?? true)
            {
                this.BiomeMarkers.RecordCache.Set(rhsMod.BiomeMarkers.RecordCache.Items);
            }
            if (mask?.Notes ?? true)
            {
                this.Notes.RecordCache.Set(rhsMod.Notes.RecordCache.Items);
            }
            if (mask?.Projectiles ?? true)
            {
                this.Projectiles.RecordCache.Set(rhsMod.Projectiles.RecordCache.Items);
            }
            if (mask?.Hazards ?? true)
            {
                this.Hazards.RecordCache.Set(rhsMod.Hazards.RecordCache.Items);
            }
            if (mask?.BendableSplines ?? true)
            {
                this.BendableSplines.RecordCache.Set(rhsMod.BendableSplines.RecordCache.Items);
            }
            if (mask?.Terminals ?? true)
            {
                this.Terminals.RecordCache.Set(rhsMod.Terminals.RecordCache.Items);
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.RecordCache.Set(rhsMod.LeveledItems.RecordCache.Items);
            }
            if (mask?.GenericBaseFormTemplates ?? true)
            {
                this.GenericBaseFormTemplates.RecordCache.Set(rhsMod.GenericBaseFormTemplates.RecordCache.Items);
            }
            if (mask?.GenericBaseForms ?? true)
            {
                this.GenericBaseForms.RecordCache.Set(rhsMod.GenericBaseForms.RecordCache.Items);
            }
            if (mask?.LeveledBaseForms ?? true)
            {
                this.LeveledBaseForms.RecordCache.Set(rhsMod.LeveledBaseForms.RecordCache.Items);
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.RecordCache.Set(rhsMod.Weathers.RecordCache.Items);
            }
            if (mask?.WeatherSettings ?? true)
            {
                this.WeatherSettings.RecordCache.Set(rhsMod.WeatherSettings.RecordCache.Items);
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.RecordCache.Set(rhsMod.Climates.RecordCache.Items);
            }
            if (mask?.ShaderParticleGeometries ?? true)
            {
                this.ShaderParticleGeometries.RecordCache.Set(rhsMod.ShaderParticleGeometries.RecordCache.Items);
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.RecordCache.Set(rhsMod.Regions.RecordCache.Items);
            }
            if (mask?.NavigationMeshInfoMaps ?? true)
            {
                this.NavigationMeshInfoMaps.RecordCache.Set(rhsMod.NavigationMeshInfoMaps.RecordCache.Items);
            }
            if (mask?.Cells ?? true)
            {
                if (rhsMod.Cells.Records.Count > 0)
                {
                    throw new NotImplementedException("Cell additions need implementing");
                }
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.RecordCache.Set(rhsMod.Worldspaces.RecordCache.Items);
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.RecordCache.Set(rhsMod.Quests.RecordCache.Items);
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.RecordCache.Set(rhsMod.IdleAnimations.RecordCache.Items);
            }
            if (mask?.Packages ?? true)
            {
                this.Packages.RecordCache.Set(rhsMod.Packages.RecordCache.Items);
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.RecordCache.Set(rhsMod.CombatStyles.RecordCache.Items);
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.RecordCache.Set(rhsMod.LoadScreens.RecordCache.Items);
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.RecordCache.Set(rhsMod.AnimatedObjects.RecordCache.Items);
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.RecordCache.Set(rhsMod.Waters.RecordCache.Items);
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.RecordCache.Set(rhsMod.EffectShaders.RecordCache.Items);
            }
            if (mask?.Explosions ?? true)
            {
                this.Explosions.RecordCache.Set(rhsMod.Explosions.RecordCache.Items);
            }
            if (mask?.Debris ?? true)
            {
                this.Debris.RecordCache.Set(rhsMod.Debris.RecordCache.Items);
            }
            if (mask?.ImageSpaces ?? true)
            {
                this.ImageSpaces.RecordCache.Set(rhsMod.ImageSpaces.RecordCache.Items);
            }
            if (mask?.ImageSpaceAdapters ?? true)
            {
                this.ImageSpaceAdapters.RecordCache.Set(rhsMod.ImageSpaceAdapters.RecordCache.Items);
            }
            if (mask?.FormLists ?? true)
            {
                this.FormLists.RecordCache.Set(rhsMod.FormLists.RecordCache.Items);
            }
            if (mask?.Perks ?? true)
            {
                this.Perks.RecordCache.Set(rhsMod.Perks.RecordCache.Items);
            }
            if (mask?.BodyParts ?? true)
            {
                this.BodyParts.RecordCache.Set(rhsMod.BodyParts.RecordCache.Items);
            }
            if (mask?.AddonNodes ?? true)
            {
                this.AddonNodes.RecordCache.Set(rhsMod.AddonNodes.RecordCache.Items);
            }
            if (mask?.ActorValueInformation ?? true)
            {
                this.ActorValueInformation.RecordCache.Set(rhsMod.ActorValueInformation.RecordCache.Items);
            }
            if (mask?.CameraShots ?? true)
            {
                this.CameraShots.RecordCache.Set(rhsMod.CameraShots.RecordCache.Items);
            }
            if (mask?.CameraPaths ?? true)
            {
                this.CameraPaths.RecordCache.Set(rhsMod.CameraPaths.RecordCache.Items);
            }
            if (mask?.VoiceTypes ?? true)
            {
                this.VoiceTypes.RecordCache.Set(rhsMod.VoiceTypes.RecordCache.Items);
            }
            if (mask?.MaterialTypes ?? true)
            {
                this.MaterialTypes.RecordCache.Set(rhsMod.MaterialTypes.RecordCache.Items);
            }
            if (mask?.Impacts ?? true)
            {
                this.Impacts.RecordCache.Set(rhsMod.Impacts.RecordCache.Items);
            }
            if (mask?.ImpactDataSets ?? true)
            {
                this.ImpactDataSets.RecordCache.Set(rhsMod.ImpactDataSets.RecordCache.Items);
            }
            if (mask?.ArmorAddons ?? true)
            {
                this.ArmorAddons.RecordCache.Set(rhsMod.ArmorAddons.RecordCache.Items);
            }
            if (mask?.Locations ?? true)
            {
                this.Locations.RecordCache.Set(rhsMod.Locations.RecordCache.Items);
            }
            if (mask?.Messages ?? true)
            {
                this.Messages.RecordCache.Set(rhsMod.Messages.RecordCache.Items);
            }
            if (mask?.DefaultObjectManagers ?? true)
            {
                this.DefaultObjectManagers.RecordCache.Set(rhsMod.DefaultObjectManagers.RecordCache.Items);
            }
            if (mask?.DefaultObjects ?? true)
            {
                this.DefaultObjects.RecordCache.Set(rhsMod.DefaultObjects.RecordCache.Items);
            }
            if (mask?.LightingTemplates ?? true)
            {
                this.LightingTemplates.RecordCache.Set(rhsMod.LightingTemplates.RecordCache.Items);
            }
            if (mask?.MusicTypes ?? true)
            {
                this.MusicTypes.RecordCache.Set(rhsMod.MusicTypes.RecordCache.Items);
            }
            if (mask?.Footsteps ?? true)
            {
                this.Footsteps.RecordCache.Set(rhsMod.Footsteps.RecordCache.Items);
            }
            if (mask?.FootstepSets ?? true)
            {
                this.FootstepSets.RecordCache.Set(rhsMod.FootstepSets.RecordCache.Items);
            }
            if (mask?.StoryManagerBranchNodes ?? true)
            {
                this.StoryManagerBranchNodes.RecordCache.Set(rhsMod.StoryManagerBranchNodes.RecordCache.Items);
            }
            if (mask?.StoryManagerQuestNodes ?? true)
            {
                this.StoryManagerQuestNodes.RecordCache.Set(rhsMod.StoryManagerQuestNodes.RecordCache.Items);
            }
            if (mask?.StoryManagerEventNodes ?? true)
            {
                this.StoryManagerEventNodes.RecordCache.Set(rhsMod.StoryManagerEventNodes.RecordCache.Items);
            }
            if (mask?.MusicTracks ?? true)
            {
                this.MusicTracks.RecordCache.Set(rhsMod.MusicTracks.RecordCache.Items);
            }
            if (mask?.EquipTypes ?? true)
            {
                this.EquipTypes.RecordCache.Set(rhsMod.EquipTypes.RecordCache.Items);
            }
            if (mask?.Outfits ?? true)
            {
                this.Outfits.RecordCache.Set(rhsMod.Outfits.RecordCache.Items);
            }
            if (mask?.ArtObjects ?? true)
            {
                this.ArtObjects.RecordCache.Set(rhsMod.ArtObjects.RecordCache.Items);
            }
            if (mask?.MovementTypes ?? true)
            {
                this.MovementTypes.RecordCache.Set(rhsMod.MovementTypes.RecordCache.Items);
            }
            if (mask?.CollisionLayers ?? true)
            {
                this.CollisionLayers.RecordCache.Set(rhsMod.CollisionLayers.RecordCache.Items);
            }
            if (mask?.Colors ?? true)
            {
                this.Colors.RecordCache.Set(rhsMod.Colors.RecordCache.Items);
            }
            if (mask?.ReverbParameters ?? true)
            {
                this.ReverbParameters.RecordCache.Set(rhsMod.ReverbParameters.RecordCache.Items);
            }
            if (mask?.ReferenceGroups ?? true)
            {
                this.ReferenceGroups.RecordCache.Set(rhsMod.ReferenceGroups.RecordCache.Items);
            }
            if (mask?.AimModels ?? true)
            {
                this.AimModels.RecordCache.Set(rhsMod.AimModels.RecordCache.Items);
            }
            if (mask?.AimAssistModels ?? true)
            {
                this.AimAssistModels.RecordCache.Set(rhsMod.AimAssistModels.RecordCache.Items);
            }
            if (mask?.MeleeAimAssistModels ?? true)
            {
                this.MeleeAimAssistModels.RecordCache.Set(rhsMod.MeleeAimAssistModels.RecordCache.Items);
            }
            if (mask?.Layers ?? true)
            {
                this.Layers.RecordCache.Set(rhsMod.Layers.RecordCache.Items);
            }
            if (mask?.ConstructibleObjects ?? true)
            {
                this.ConstructibleObjects.RecordCache.Set(rhsMod.ConstructibleObjects.RecordCache.Items);
            }
            if (mask?.ObjectModifications ?? true)
            {
                this.ObjectModifications.RecordCache.Set(rhsMod.ObjectModifications.RecordCache.Items);
            }
            if (mask?.Zooms ?? true)
            {
                this.Zooms.RecordCache.Set(rhsMod.Zooms.RecordCache.Items);
            }
            if (mask?.InstanceNamingRules ?? true)
            {
                this.InstanceNamingRules.RecordCache.Set(rhsMod.InstanceNamingRules.RecordCache.Items);
            }
            if (mask?.SoundKeywordMappings ?? true)
            {
                this.SoundKeywordMappings.RecordCache.Set(rhsMod.SoundKeywordMappings.RecordCache.Items);
            }
            if (mask?.AttractionRules ?? true)
            {
                this.AttractionRules.RecordCache.Set(rhsMod.AttractionRules.RecordCache.Items);
            }
            if (mask?.SceneCollections ?? true)
            {
                this.SceneCollections.RecordCache.Set(rhsMod.SceneCollections.RecordCache.Items);
            }
            if (mask?.AnimationSoundTagSets ?? true)
            {
                this.AnimationSoundTagSets.RecordCache.Set(rhsMod.AnimationSoundTagSets.RecordCache.Items);
            }
            if (mask?.Resources ?? true)
            {
                this.Resources.RecordCache.Set(rhsMod.Resources.RecordCache.Items);
            }
            if (mask?.Biomes ?? true)
            {
                this.Biomes.RecordCache.Set(rhsMod.Biomes.RecordCache.Items);
            }
            if (mask?.NavigationMeshObstacleCoverManagers ?? true)
            {
                this.NavigationMeshObstacleCoverManagers.RecordCache.Set(rhsMod.NavigationMeshObstacleCoverManagers.RecordCache.Items);
            }
            if (mask?.LensFlares ?? true)
            {
                this.LensFlares.RecordCache.Set(rhsMod.LensFlares.RecordCache.Items);
            }
            if (mask?.ObjectVisibilityManagers ?? true)
            {
                this.ObjectVisibilityManagers.RecordCache.Set(rhsMod.ObjectVisibilityManagers.RecordCache.Items);
            }
            if (mask?.SnapTemplateNodes ?? true)
            {
                this.SnapTemplateNodes.RecordCache.Set(rhsMod.SnapTemplateNodes.RecordCache.Items);
            }
            if (mask?.SnapTemplates ?? true)
            {
                this.SnapTemplates.RecordCache.Set(rhsMod.SnapTemplates.RecordCache.Items);
            }
            if (mask?.GroundCovers ?? true)
            {
                this.GroundCovers.RecordCache.Set(rhsMod.GroundCovers.RecordCache.Items);
            }
            if (mask?.MorphableObjects ?? true)
            {
                this.MorphableObjects.RecordCache.Set(rhsMod.MorphableObjects.RecordCache.Items);
            }
            if (mask?.Traversals ?? true)
            {
                this.Traversals.RecordCache.Set(rhsMod.Traversals.RecordCache.Items);
            }
            if (mask?.ResourceGenerationData ?? true)
            {
                this.ResourceGenerationData.RecordCache.Set(rhsMod.ResourceGenerationData.RecordCache.Items);
            }
            if (mask?.BiomeSwaps ?? true)
            {
                this.BiomeSwaps.RecordCache.Set(rhsMod.BiomeSwaps.RecordCache.Items);
            }
            if (mask?.Atmospheres ?? true)
            {
                this.Atmospheres.RecordCache.Set(rhsMod.Atmospheres.RecordCache.Items);
            }
            if (mask?.LeveledSpaceCells ?? true)
            {
                this.LeveledSpaceCells.RecordCache.Set(rhsMod.LeveledSpaceCells.RecordCache.Items);
            }
            if (mask?.SpeechChallenges ?? true)
            {
                this.SpeechChallenges.RecordCache.Set(rhsMod.SpeechChallenges.RecordCache.Items);
            }
            if (mask?.AimAssistPoses ?? true)
            {
                this.AimAssistPoses.RecordCache.Set(rhsMod.AimAssistPoses.RecordCache.Items);
            }
            if (mask?.VolumetricLightings ?? true)
            {
                this.VolumetricLightings.RecordCache.Set(rhsMod.VolumetricLightings.RecordCache.Items);
            }
            if (mask?.SurfaceBlocks ?? true)
            {
                this.SurfaceBlocks.RecordCache.Set(rhsMod.SurfaceBlocks.RecordCache.Items);
            }
            if (mask?.SurfacePatternConfigs ?? true)
            {
                this.SurfacePatternConfigs.RecordCache.Set(rhsMod.SurfacePatternConfigs.RecordCache.Items);
            }
            if (mask?.SurfacePatterns ?? true)
            {
                this.SurfacePatterns.RecordCache.Set(rhsMod.SurfacePatterns.RecordCache.Items);
            }
            if (mask?.SurfaceTrees ?? true)
            {
                this.SurfaceTrees.RecordCache.Set(rhsMod.SurfaceTrees.RecordCache.Items);
            }
            if (mask?.PlanetContentManagerTrees ?? true)
            {
                this.PlanetContentManagerTrees.RecordCache.Set(rhsMod.PlanetContentManagerTrees.RecordCache.Items);
            }
            if (mask?.BoneModifiers ?? true)
            {
                this.BoneModifiers.RecordCache.Set(rhsMod.BoneModifiers.RecordCache.Items);
            }
            if (mask?.SnapTemplateBehaviors ?? true)
            {
                this.SnapTemplateBehaviors.RecordCache.Set(rhsMod.SnapTemplateBehaviors.RecordCache.Items);
            }
            if (mask?.Planets ?? true)
            {
                this.Planets.RecordCache.Set(rhsMod.Planets.RecordCache.Items);
            }
            if (mask?.ConditionRecords ?? true)
            {
                this.ConditionRecords.RecordCache.Set(rhsMod.ConditionRecords.RecordCache.Items);
            }
            if (mask?.PlanetContentManagerBranchNodes ?? true)
            {
                this.PlanetContentManagerBranchNodes.RecordCache.Set(rhsMod.PlanetContentManagerBranchNodes.RecordCache.Items);
            }
            if (mask?.PlanetContentManagerContentNodes ?? true)
            {
                this.PlanetContentManagerContentNodes.RecordCache.Set(rhsMod.PlanetContentManagerContentNodes.RecordCache.Items);
            }
            if (mask?.Stars ?? true)
            {
                this.Stars.RecordCache.Set(rhsMod.Stars.RecordCache.Items);
            }
            if (mask?.WWiseEventDatas ?? true)
            {
                this.WWiseEventDatas.RecordCache.Set(rhsMod.WWiseEventDatas.RecordCache.Items);
            }
            if (mask?.ResearchProjects ?? true)
            {
                this.ResearchProjects.RecordCache.Set(rhsMod.ResearchProjects.RecordCache.Items);
            }
            if (mask?.AimOpticalSightMarkers ?? true)
            {
                this.AimOpticalSightMarkers.RecordCache.Set(rhsMod.AimOpticalSightMarkers.RecordCache.Items);
            }
            if (mask?.AmbienceSets ?? true)
            {
                this.AmbienceSets.RecordCache.Set(rhsMod.AmbienceSets.RecordCache.Items);
            }
            if (mask?.WeaponBarrelModels ?? true)
            {
                this.WeaponBarrelModels.RecordCache.Set(rhsMod.WeaponBarrelModels.RecordCache.Items);
            }
            if (mask?.SurfacePatternStyles ?? true)
            {
                this.SurfacePatternStyles.RecordCache.Set(rhsMod.SurfacePatternStyles.RecordCache.Items);
            }
            if (mask?.LayeredMaterialSwaps ?? true)
            {
                this.LayeredMaterialSwaps.RecordCache.Set(rhsMod.LayeredMaterialSwaps.RecordCache.Items);
            }
            if (mask?.ForceDatas ?? true)
            {
                this.ForceDatas.RecordCache.Set(rhsMod.ForceDatas.RecordCache.Items);
            }
            if (mask?.TerminalMenus ?? true)
            {
                this.TerminalMenus.RecordCache.Set(rhsMod.TerminalMenus.RecordCache.Items);
            }
            if (mask?.EffectSequences ?? true)
            {
                this.EffectSequences.RecordCache.Set(rhsMod.EffectSequences.RecordCache.Items);
            }
            if (mask?.SecondaryDamageLists ?? true)
            {
                this.SecondaryDamageLists.RecordCache.Set(rhsMod.SecondaryDamageLists.RecordCache.Items);
            }
            if (mask?.MaterialPaths ?? true)
            {
                this.MaterialPaths.RecordCache.Set(rhsMod.MaterialPaths.RecordCache.Items);
            }
            if (mask?.Clouds ?? true)
            {
                this.Clouds.RecordCache.Set(rhsMod.Clouds.RecordCache.Items);
            }
            if (mask?.FogVolumes ?? true)
            {
                this.FogVolumes.RecordCache.Set(rhsMod.FogVolumes.RecordCache.Items);
            }
            if (mask?.WWiseKeywordMappings ?? true)
            {
                this.WWiseKeywordMappings.RecordCache.Set(rhsMod.WWiseKeywordMappings.RecordCache.Items);
            }
            if (mask?.LegendaryItems ?? true)
            {
                this.LegendaryItems.RecordCache.Set(rhsMod.LegendaryItems.RecordCache.Items);
            }
            if (mask?.ParticleSystemDefineCollisions ?? true)
            {
                this.ParticleSystemDefineCollisions.RecordCache.Set(rhsMod.ParticleSystemDefineCollisions.RecordCache.Items);
            }
            if (mask?.SunPresets ?? true)
            {
                this.SunPresets.RecordCache.Set(rhsMod.SunPresets.RecordCache.Items);
            }
            if (mask?.PhotoModeFeatures ?? true)
            {
                this.PhotoModeFeatures.RecordCache.Set(rhsMod.PhotoModeFeatures.RecordCache.Items);
            }
            if (mask?.GameplayOptions ?? true)
            {
                this.GameplayOptions.RecordCache.Set(rhsMod.GameplayOptions.RecordCache.Items);
            }
            if (mask?.GameplayOptionsGroups ?? true)
            {
                this.GameplayOptionsGroups.RecordCache.Set(rhsMod.GameplayOptionsGroups.RecordCache.Items);
            }
            if (mask?.TimeOfDays ?? true)
            {
                this.TimeOfDays.RecordCache.Set(rhsMod.TimeOfDays.RecordCache.Items);
            }
            if (mask?.ActorValueModulations ?? true)
            {
                this.ActorValueModulations.RecordCache.Set(rhsMod.ActorValueModulations.RecordCache.Items);
            }
            if (mask?.Challenges ?? true)
            {
                this.Challenges.RecordCache.Set(rhsMod.Challenges.RecordCache.Items);
            }
            if (mask?.FacialExpressions ?? true)
            {
                this.FacialExpressions.RecordCache.Set(rhsMod.FacialExpressions.RecordCache.Items);
            }
            if (mask?.PERS ?? true)
            {
                this.PERS.RecordCache.Set(rhsMod.PERS.RecordCache.Items);
            }
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = this.GetRecordCount();
        }

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StarfieldModCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => StarfieldModSetterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => StarfieldModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks() => StarfieldModSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => StarfieldModSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => StarfieldModSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        #region Binary Create
        public static StarfieldMod CreateFromBinary(
            ModPath path,
            StarfieldRelease release,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)StarfieldModHeader.HeaderFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(gameRelease, path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam);
                    }
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static StarfieldMod CreateFromBinary(
            ModPath path,
            StarfieldRelease release,
            ErrorMaskBuilder? errorMask,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)StarfieldModHeader.HeaderFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(gameRelease, path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam);
                    }
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static StarfieldMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            StarfieldRelease release,
            RecordTypeInfoCacheReader infoCache,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        public static StarfieldMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            StarfieldRelease release,
            RecordTypeInfoCacheReader infoCache,
            ErrorMaskBuilder? errorMask,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        #endregion

        public static IStarfieldModDisposableGetter CreateFromBinaryOverlay(
            ModPath path,
            StarfieldRelease release,
            BinaryReadParameters? param = null)
        {
            return StarfieldModBinaryOverlay.StarfieldModFactory(
                path: path,
                release: release,
                param: param);
        }

        public static IStarfieldModDisposableGetter CreateFromBinaryOverlay(
            Stream stream,
            StarfieldRelease release,
            ModKey modKey,
            BinaryReadParameters? param = null)
        {
            param ??= BinaryReadParameters.Default;
            var meta = ParsingMeta.Factory(param, release.ToGameRelease(), modKey, stream);
            return StarfieldModBinaryOverlay.StarfieldModFactory(
                stream: new MutagenBinaryReadStream(stream, meta),
                modKey: modKey,
                release: release,
                shouldDispose: false);
        }

        public static StarfieldMod CreateFromBinary(
            MutagenFrame frame,
            StarfieldRelease release,
            GroupMask? importMask = null)
        {
            try
            {
                var ret = new StarfieldMod(
                    modKey: frame.MetaData.ModKey,
                    release: release);
                ((StarfieldModSetterCommon)((IStarfieldModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                    item: ret,
                    frame: frame,
                    release: release,
                    importMask: importMask);
                return ret;
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, frame.MetaData.ModKey);
                throw;
            }
        }

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static StarfieldMod GetNew()
        {
            return new StarfieldMod();
        }

    }
    #endregion

    #region Interface
    public partial interface IStarfieldMod :
        IAssetLinkContainer,
        IContextMod<IStarfieldMod, IStarfieldModGetter>,
        IFormLinkContainer,
        ILoquiObjectSetter<IStarfieldMod>,
        IMajorRecordEnumerable,
        IMod,
        IStarfieldModGetter
    {
        new StarfieldModHeader ModHeader { get; }
        new StarfieldGroup<GameSetting> GameSettings { get; }
        new StarfieldGroup<Keyword> Keywords { get; }
        new StarfieldGroup<FFKWRecord> FFKW { get; }
        new StarfieldGroup<LocationReferenceType> LocationReferenceTypes { get; }
        new StarfieldGroup<ActionRecord> Actions { get; }
        new StarfieldGroup<Transform> Transforms { get; }
        new StarfieldGroup<TextureSet> TextureSets { get; }
        new StarfieldGroup<Global> Globals { get; }
        new StarfieldGroup<DamageType> DamageTypes { get; }
        new StarfieldGroup<Class> Classes { get; }
        new StarfieldGroup<Faction> Factions { get; }
        new StarfieldGroup<AffinityEvent> AffinityEvents { get; }
        new StarfieldGroup<HeadPart> HeadParts { get; }
        new StarfieldGroup<Race> Races { get; }
        new StarfieldGroup<SoundMarker> SoundMarkers { get; }
        new StarfieldGroup<SoundEchoMarker> SoundEchoMarkers { get; }
        new StarfieldGroup<AcousticSpace> AcousticSpaces { get; }
        new StarfieldGroup<AudioOcclusionPrimitive> AudioOcclusionPrimitives { get; }
        new StarfieldGroup<MagicEffect> MagicEffects { get; }
        new StarfieldGroup<LandscapeTexture> LandscapeTextures { get; }
        new StarfieldGroup<ProjectedDecal> ProjectedDecals { get; }
        new StarfieldGroup<ObjectEffect> ObjectEffects { get; }
        new StarfieldGroup<Spell> Spells { get; }
        new StarfieldGroup<Activator> Activators { get; }
        new StarfieldGroup<CurveTable> CurveTables { get; }
        new StarfieldGroup<Curve3D> Curve3Ds { get; }
        new StarfieldGroup<Armor> Armors { get; }
        new StarfieldGroup<Book> Books { get; }
        new StarfieldGroup<Container> Containers { get; }
        new StarfieldGroup<Door> Doors { get; }
        new StarfieldGroup<Light> Lights { get; }
        new StarfieldGroup<MiscItem> MiscItems { get; }
        new StarfieldGroup<Static> Statics { get; }
        new StarfieldGroup<StaticCollection> StaticCollections { get; }
        new StarfieldGroup<PackIn> PackIns { get; }
        new StarfieldGroup<MoveableStatic> MoveableStatics { get; }
        new StarfieldGroup<Grass> Grasses { get; }
        new StarfieldGroup<Flora> Florae { get; }
        new StarfieldGroup<Furniture> Furniture { get; }
        new StarfieldGroup<Weapon> Weapons { get; }
        new StarfieldGroup<Ammunition> Ammunitions { get; }
        new StarfieldGroup<Npc> Npcs { get; }
        new StarfieldGroup<LeveledNpc> LeveledNpcs { get; }
        new StarfieldGroup<LeveledPackIn> LeveledPackIns { get; }
        new StarfieldGroup<Key> Keys { get; }
        new StarfieldGroup<Ingestible> Ingestibles { get; }
        new StarfieldGroup<IdleMarker> IdleMarkers { get; }
        new StarfieldGroup<BiomeMarker> BiomeMarkers { get; }
        new StarfieldGroup<Note> Notes { get; }
        new StarfieldGroup<Projectile> Projectiles { get; }
        new StarfieldGroup<Hazard> Hazards { get; }
        new StarfieldGroup<BendableSpline> BendableSplines { get; }
        new StarfieldGroup<Terminal> Terminals { get; }
        new StarfieldGroup<LeveledItem> LeveledItems { get; }
        new StarfieldGroup<GenericBaseFormTemplate> GenericBaseFormTemplates { get; }
        new StarfieldGroup<GenericBaseForm> GenericBaseForms { get; }
        new StarfieldGroup<LeveledBaseForm> LeveledBaseForms { get; }
        new StarfieldGroup<Weather> Weathers { get; }
        new StarfieldGroup<WeatherSetting> WeatherSettings { get; }
        new StarfieldGroup<Climate> Climates { get; }
        new StarfieldGroup<ShaderParticleGeometry> ShaderParticleGeometries { get; }
        new StarfieldGroup<Region> Regions { get; }
        new StarfieldGroup<NavigationMeshInfoMap> NavigationMeshInfoMaps { get; }
        new StarfieldListGroup<CellBlock> Cells { get; }
        new StarfieldGroup<Worldspace> Worldspaces { get; }
        new StarfieldGroup<Quest> Quests { get; }
        new StarfieldGroup<IdleAnimation> IdleAnimations { get; }
        new StarfieldGroup<Package> Packages { get; }
        new StarfieldGroup<CombatStyle> CombatStyles { get; }
        new StarfieldGroup<LoadScreen> LoadScreens { get; }
        new StarfieldGroup<AnimatedObject> AnimatedObjects { get; }
        new StarfieldGroup<Water> Waters { get; }
        new StarfieldGroup<EffectShader> EffectShaders { get; }
        new StarfieldGroup<Explosion> Explosions { get; }
        new StarfieldGroup<Debris> Debris { get; }
        new StarfieldGroup<ImageSpace> ImageSpaces { get; }
        new StarfieldGroup<ImageSpaceAdapter> ImageSpaceAdapters { get; }
        new StarfieldGroup<FormList> FormLists { get; }
        new StarfieldGroup<Perk> Perks { get; }
        new StarfieldGroup<BodyPartData> BodyParts { get; }
        new StarfieldGroup<AddonNode> AddonNodes { get; }
        new StarfieldGroup<ActorValueInformation> ActorValueInformation { get; }
        new StarfieldGroup<CameraShot> CameraShots { get; }
        new StarfieldGroup<CameraPath> CameraPaths { get; }
        new StarfieldGroup<VoiceType> VoiceTypes { get; }
        new StarfieldGroup<MaterialType> MaterialTypes { get; }
        new StarfieldGroup<Impact> Impacts { get; }
        new StarfieldGroup<ImpactDataSet> ImpactDataSets { get; }
        new StarfieldGroup<ArmorAddon> ArmorAddons { get; }
        new StarfieldGroup<Location> Locations { get; }
        new StarfieldGroup<Message> Messages { get; }
        new StarfieldGroup<DefaultObjectManager> DefaultObjectManagers { get; }
        new StarfieldGroup<DefaultObject> DefaultObjects { get; }
        new StarfieldGroup<LightingTemplate> LightingTemplates { get; }
        new StarfieldGroup<MusicType> MusicTypes { get; }
        new StarfieldGroup<Footstep> Footsteps { get; }
        new StarfieldGroup<FootstepSet> FootstepSets { get; }
        new StarfieldGroup<StoryManagerBranchNode> StoryManagerBranchNodes { get; }
        new StarfieldGroup<StoryManagerQuestNode> StoryManagerQuestNodes { get; }
        new StarfieldGroup<StoryManagerEventNode> StoryManagerEventNodes { get; }
        new StarfieldGroup<MusicTrack> MusicTracks { get; }
        new StarfieldGroup<EquipType> EquipTypes { get; }
        new StarfieldGroup<Outfit> Outfits { get; }
        new StarfieldGroup<ArtObject> ArtObjects { get; }
        new StarfieldGroup<MovementType> MovementTypes { get; }
        new StarfieldGroup<CollisionLayer> CollisionLayers { get; }
        new StarfieldGroup<ColorRecord> Colors { get; }
        new StarfieldGroup<ReverbParameters> ReverbParameters { get; }
        new StarfieldGroup<ReferenceGroup> ReferenceGroups { get; }
        new StarfieldGroup<AimModel> AimModels { get; }
        new StarfieldGroup<AimAssistModel> AimAssistModels { get; }
        new StarfieldGroup<MeleeAimAssistModel> MeleeAimAssistModels { get; }
        new StarfieldGroup<Layer> Layers { get; }
        new StarfieldGroup<ConstructibleObject> ConstructibleObjects { get; }
        new StarfieldGroup<AObjectModification> ObjectModifications { get; }
        new StarfieldGroup<Zoom> Zooms { get; }
        new StarfieldGroup<InstanceNamingRules> InstanceNamingRules { get; }
        new StarfieldGroup<SoundKeywordMapping> SoundKeywordMappings { get; }
        new StarfieldGroup<AttractionRule> AttractionRules { get; }
        new StarfieldGroup<SceneCollection> SceneCollections { get; }
        new StarfieldGroup<AnimationSoundTagSet> AnimationSoundTagSets { get; }
        new StarfieldGroup<Resource> Resources { get; }
        new StarfieldGroup<Biome> Biomes { get; }
        new StarfieldGroup<NavigationMeshObstacleCoverManager> NavigationMeshObstacleCoverManagers { get; }
        new StarfieldGroup<LensFlare> LensFlares { get; }
        new StarfieldGroup<ObjectVisibilityManager> ObjectVisibilityManagers { get; }
        new StarfieldGroup<SnapTemplateNode> SnapTemplateNodes { get; }
        new StarfieldGroup<SnapTemplate> SnapTemplates { get; }
        new StarfieldGroup<GroundCover> GroundCovers { get; }
        new StarfieldGroup<MorphableObject> MorphableObjects { get; }
        new StarfieldGroup<Traversal> Traversals { get; }
        new StarfieldGroup<ResourceGenerationData> ResourceGenerationData { get; }
        new StarfieldGroup<BiomeSwap> BiomeSwaps { get; }
        new StarfieldGroup<Atmosphere> Atmospheres { get; }
        new StarfieldGroup<LeveledSpaceCell> LeveledSpaceCells { get; }
        new StarfieldGroup<SpeechChallenge> SpeechChallenges { get; }
        new StarfieldGroup<AimAssistPose> AimAssistPoses { get; }
        new StarfieldGroup<VolumetricLighting> VolumetricLightings { get; }
        new StarfieldGroup<SurfaceBlock> SurfaceBlocks { get; }
        new StarfieldGroup<SurfacePatternConfig> SurfacePatternConfigs { get; }
        new StarfieldGroup<SurfacePattern> SurfacePatterns { get; }
        new StarfieldGroup<SurfaceTree> SurfaceTrees { get; }
        new StarfieldGroup<PlanetContentManagerTree> PlanetContentManagerTrees { get; }
        new StarfieldGroup<BoneModifier> BoneModifiers { get; }
        new StarfieldGroup<SnapTemplateBehavior> SnapTemplateBehaviors { get; }
        new StarfieldGroup<Planet> Planets { get; }
        new StarfieldGroup<ConditionRecord> ConditionRecords { get; }
        new StarfieldGroup<PlanetContentManagerBranchNode> PlanetContentManagerBranchNodes { get; }
        new StarfieldGroup<PlanetContentManagerContentNode> PlanetContentManagerContentNodes { get; }
        new StarfieldGroup<Star> Stars { get; }
        new StarfieldGroup<WWiseEventData> WWiseEventDatas { get; }
        new StarfieldGroup<ResearchProject> ResearchProjects { get; }
        new StarfieldGroup<AimOpticalSightMarker> AimOpticalSightMarkers { get; }
        new StarfieldGroup<AmbienceSet> AmbienceSets { get; }
        new StarfieldGroup<WeaponBarrelModel> WeaponBarrelModels { get; }
        new StarfieldGroup<SurfacePatternStyle> SurfacePatternStyles { get; }
        new StarfieldGroup<LayeredMaterialSwap> LayeredMaterialSwaps { get; }
        new StarfieldGroup<ForceData> ForceDatas { get; }
        new StarfieldGroup<TerminalMenu> TerminalMenus { get; }
        new StarfieldGroup<EffectSequence> EffectSequences { get; }
        new StarfieldGroup<SecondaryDamageList> SecondaryDamageLists { get; }
        new StarfieldGroup<MaterialPath> MaterialPaths { get; }
        new StarfieldGroup<Clouds> Clouds { get; }
        new StarfieldGroup<FogVolume> FogVolumes { get; }
        new StarfieldGroup<WWiseKeywordMapping> WWiseKeywordMappings { get; }
        new StarfieldGroup<LegendaryItem> LegendaryItems { get; }
        new StarfieldGroup<ParticleSystemDefineCollision> ParticleSystemDefineCollisions { get; }
        new StarfieldGroup<SunPreset> SunPresets { get; }
        new StarfieldGroup<PhotoModeFeature> PhotoModeFeatures { get; }
        new StarfieldGroup<GameplayOptions> GameplayOptions { get; }
        new StarfieldGroup<GameplayOptionsGroup> GameplayOptionsGroups { get; }
        new StarfieldGroup<TimeOfDayRecord> TimeOfDays { get; }
        new StarfieldGroup<ActorValueModulation> ActorValueModulations { get; }
        new StarfieldGroup<Challenge> Challenges { get; }
        new StarfieldGroup<FacialExpression> FacialExpressions { get; }
        new StarfieldGroup<PERS> PERS { get; }
    }

    public partial interface IStarfieldModGetter :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IContextGetterMod<IStarfieldMod, IStarfieldModGetter>,
        IFormLinkContainerGetter,
        ILoquiObject<IStarfieldModGetter>,
        IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>,
        IMajorRecordGetterEnumerable,
        IModGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => StarfieldMod_Registration.Instance;
        IStarfieldModHeaderGetter ModHeader { get; }
        IStarfieldGroupGetter<IGameSettingGetter> GameSettings { get; }
        IStarfieldGroupGetter<IKeywordGetter> Keywords { get; }
        IStarfieldGroupGetter<IFFKWRecordGetter> FFKW { get; }
        IStarfieldGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes { get; }
        IStarfieldGroupGetter<IActionRecordGetter> Actions { get; }
        IStarfieldGroupGetter<ITransformGetter> Transforms { get; }
        IStarfieldGroupGetter<ITextureSetGetter> TextureSets { get; }
        IStarfieldGroupGetter<IGlobalGetter> Globals { get; }
        IStarfieldGroupGetter<IDamageTypeGetter> DamageTypes { get; }
        IStarfieldGroupGetter<IClassGetter> Classes { get; }
        IStarfieldGroupGetter<IFactionGetter> Factions { get; }
        IStarfieldGroupGetter<IAffinityEventGetter> AffinityEvents { get; }
        IStarfieldGroupGetter<IHeadPartGetter> HeadParts { get; }
        IStarfieldGroupGetter<IRaceGetter> Races { get; }
        IStarfieldGroupGetter<ISoundMarkerGetter> SoundMarkers { get; }
        IStarfieldGroupGetter<ISoundEchoMarkerGetter> SoundEchoMarkers { get; }
        IStarfieldGroupGetter<IAcousticSpaceGetter> AcousticSpaces { get; }
        IStarfieldGroupGetter<IAudioOcclusionPrimitiveGetter> AudioOcclusionPrimitives { get; }
        IStarfieldGroupGetter<IMagicEffectGetter> MagicEffects { get; }
        IStarfieldGroupGetter<ILandscapeTextureGetter> LandscapeTextures { get; }
        IStarfieldGroupGetter<IProjectedDecalGetter> ProjectedDecals { get; }
        IStarfieldGroupGetter<IObjectEffectGetter> ObjectEffects { get; }
        IStarfieldGroupGetter<ISpellGetter> Spells { get; }
        IStarfieldGroupGetter<IActivatorGetter> Activators { get; }
        IStarfieldGroupGetter<ICurveTableGetter> CurveTables { get; }
        IStarfieldGroupGetter<ICurve3DGetter> Curve3Ds { get; }
        IStarfieldGroupGetter<IArmorGetter> Armors { get; }
        IStarfieldGroupGetter<IBookGetter> Books { get; }
        IStarfieldGroupGetter<IContainerGetter> Containers { get; }
        IStarfieldGroupGetter<IDoorGetter> Doors { get; }
        IStarfieldGroupGetter<ILightGetter> Lights { get; }
        IStarfieldGroupGetter<IMiscItemGetter> MiscItems { get; }
        IStarfieldGroupGetter<IStaticGetter> Statics { get; }
        IStarfieldGroupGetter<IStaticCollectionGetter> StaticCollections { get; }
        IStarfieldGroupGetter<IPackInGetter> PackIns { get; }
        IStarfieldGroupGetter<IMoveableStaticGetter> MoveableStatics { get; }
        IStarfieldGroupGetter<IGrassGetter> Grasses { get; }
        IStarfieldGroupGetter<IFloraGetter> Florae { get; }
        IStarfieldGroupGetter<IFurnitureGetter> Furniture { get; }
        IStarfieldGroupGetter<IWeaponGetter> Weapons { get; }
        IStarfieldGroupGetter<IAmmunitionGetter> Ammunitions { get; }
        IStarfieldGroupGetter<INpcGetter> Npcs { get; }
        IStarfieldGroupGetter<ILeveledNpcGetter> LeveledNpcs { get; }
        IStarfieldGroupGetter<ILeveledPackInGetter> LeveledPackIns { get; }
        IStarfieldGroupGetter<IKeyGetter> Keys { get; }
        IStarfieldGroupGetter<IIngestibleGetter> Ingestibles { get; }
        IStarfieldGroupGetter<IIdleMarkerGetter> IdleMarkers { get; }
        IStarfieldGroupGetter<IBiomeMarkerGetter> BiomeMarkers { get; }
        IStarfieldGroupGetter<INoteGetter> Notes { get; }
        IStarfieldGroupGetter<IProjectileGetter> Projectiles { get; }
        IStarfieldGroupGetter<IHazardGetter> Hazards { get; }
        IStarfieldGroupGetter<IBendableSplineGetter> BendableSplines { get; }
        IStarfieldGroupGetter<ITerminalGetter> Terminals { get; }
        IStarfieldGroupGetter<ILeveledItemGetter> LeveledItems { get; }
        IStarfieldGroupGetter<IGenericBaseFormTemplateGetter> GenericBaseFormTemplates { get; }
        IStarfieldGroupGetter<IGenericBaseFormGetter> GenericBaseForms { get; }
        IStarfieldGroupGetter<ILeveledBaseFormGetter> LeveledBaseForms { get; }
        IStarfieldGroupGetter<IWeatherGetter> Weathers { get; }
        IStarfieldGroupGetter<IWeatherSettingGetter> WeatherSettings { get; }
        IStarfieldGroupGetter<IClimateGetter> Climates { get; }
        IStarfieldGroupGetter<IShaderParticleGeometryGetter> ShaderParticleGeometries { get; }
        IStarfieldGroupGetter<IRegionGetter> Regions { get; }
        IStarfieldGroupGetter<INavigationMeshInfoMapGetter> NavigationMeshInfoMaps { get; }
        IStarfieldListGroupGetter<ICellBlockGetter> Cells { get; }
        IStarfieldGroupGetter<IWorldspaceGetter> Worldspaces { get; }
        IStarfieldGroupGetter<IQuestGetter> Quests { get; }
        IStarfieldGroupGetter<IIdleAnimationGetter> IdleAnimations { get; }
        IStarfieldGroupGetter<IPackageGetter> Packages { get; }
        IStarfieldGroupGetter<ICombatStyleGetter> CombatStyles { get; }
        IStarfieldGroupGetter<ILoadScreenGetter> LoadScreens { get; }
        IStarfieldGroupGetter<IAnimatedObjectGetter> AnimatedObjects { get; }
        IStarfieldGroupGetter<IWaterGetter> Waters { get; }
        IStarfieldGroupGetter<IEffectShaderGetter> EffectShaders { get; }
        IStarfieldGroupGetter<IExplosionGetter> Explosions { get; }
        IStarfieldGroupGetter<IDebrisGetter> Debris { get; }
        IStarfieldGroupGetter<IImageSpaceGetter> ImageSpaces { get; }
        IStarfieldGroupGetter<IImageSpaceAdapterGetter> ImageSpaceAdapters { get; }
        IStarfieldGroupGetter<IFormListGetter> FormLists { get; }
        IStarfieldGroupGetter<IPerkGetter> Perks { get; }
        IStarfieldGroupGetter<IBodyPartDataGetter> BodyParts { get; }
        IStarfieldGroupGetter<IAddonNodeGetter> AddonNodes { get; }
        IStarfieldGroupGetter<IActorValueInformationGetter> ActorValueInformation { get; }
        IStarfieldGroupGetter<ICameraShotGetter> CameraShots { get; }
        IStarfieldGroupGetter<ICameraPathGetter> CameraPaths { get; }
        IStarfieldGroupGetter<IVoiceTypeGetter> VoiceTypes { get; }
        IStarfieldGroupGetter<IMaterialTypeGetter> MaterialTypes { get; }
        IStarfieldGroupGetter<IImpactGetter> Impacts { get; }
        IStarfieldGroupGetter<IImpactDataSetGetter> ImpactDataSets { get; }
        IStarfieldGroupGetter<IArmorAddonGetter> ArmorAddons { get; }
        IStarfieldGroupGetter<ILocationGetter> Locations { get; }
        IStarfieldGroupGetter<IMessageGetter> Messages { get; }
        IStarfieldGroupGetter<IDefaultObjectManagerGetter> DefaultObjectManagers { get; }
        IStarfieldGroupGetter<IDefaultObjectGetter> DefaultObjects { get; }
        IStarfieldGroupGetter<ILightingTemplateGetter> LightingTemplates { get; }
        IStarfieldGroupGetter<IMusicTypeGetter> MusicTypes { get; }
        IStarfieldGroupGetter<IFootstepGetter> Footsteps { get; }
        IStarfieldGroupGetter<IFootstepSetGetter> FootstepSets { get; }
        IStarfieldGroupGetter<IStoryManagerBranchNodeGetter> StoryManagerBranchNodes { get; }
        IStarfieldGroupGetter<IStoryManagerQuestNodeGetter> StoryManagerQuestNodes { get; }
        IStarfieldGroupGetter<IStoryManagerEventNodeGetter> StoryManagerEventNodes { get; }
        IStarfieldGroupGetter<IMusicTrackGetter> MusicTracks { get; }
        IStarfieldGroupGetter<IEquipTypeGetter> EquipTypes { get; }
        IStarfieldGroupGetter<IOutfitGetter> Outfits { get; }
        IStarfieldGroupGetter<IArtObjectGetter> ArtObjects { get; }
        IStarfieldGroupGetter<IMovementTypeGetter> MovementTypes { get; }
        IStarfieldGroupGetter<ICollisionLayerGetter> CollisionLayers { get; }
        IStarfieldGroupGetter<IColorRecordGetter> Colors { get; }
        IStarfieldGroupGetter<IReverbParametersGetter> ReverbParameters { get; }
        IStarfieldGroupGetter<IReferenceGroupGetter> ReferenceGroups { get; }
        IStarfieldGroupGetter<IAimModelGetter> AimModels { get; }
        IStarfieldGroupGetter<IAimAssistModelGetter> AimAssistModels { get; }
        IStarfieldGroupGetter<IMeleeAimAssistModelGetter> MeleeAimAssistModels { get; }
        IStarfieldGroupGetter<ILayerGetter> Layers { get; }
        IStarfieldGroupGetter<IConstructibleObjectGetter> ConstructibleObjects { get; }
        IStarfieldGroupGetter<IAObjectModificationGetter> ObjectModifications { get; }
        IStarfieldGroupGetter<IZoomGetter> Zooms { get; }
        IStarfieldGroupGetter<IInstanceNamingRulesGetter> InstanceNamingRules { get; }
        IStarfieldGroupGetter<ISoundKeywordMappingGetter> SoundKeywordMappings { get; }
        IStarfieldGroupGetter<IAttractionRuleGetter> AttractionRules { get; }
        IStarfieldGroupGetter<ISceneCollectionGetter> SceneCollections { get; }
        IStarfieldGroupGetter<IAnimationSoundTagSetGetter> AnimationSoundTagSets { get; }
        IStarfieldGroupGetter<IResourceGetter> Resources { get; }
        IStarfieldGroupGetter<IBiomeGetter> Biomes { get; }
        IStarfieldGroupGetter<INavigationMeshObstacleCoverManagerGetter> NavigationMeshObstacleCoverManagers { get; }
        IStarfieldGroupGetter<ILensFlareGetter> LensFlares { get; }
        IStarfieldGroupGetter<IObjectVisibilityManagerGetter> ObjectVisibilityManagers { get; }
        IStarfieldGroupGetter<ISnapTemplateNodeGetter> SnapTemplateNodes { get; }
        IStarfieldGroupGetter<ISnapTemplateGetter> SnapTemplates { get; }
        IStarfieldGroupGetter<IGroundCoverGetter> GroundCovers { get; }
        IStarfieldGroupGetter<IMorphableObjectGetter> MorphableObjects { get; }
        IStarfieldGroupGetter<ITraversalGetter> Traversals { get; }
        IStarfieldGroupGetter<IResourceGenerationDataGetter> ResourceGenerationData { get; }
        IStarfieldGroupGetter<IBiomeSwapGetter> BiomeSwaps { get; }
        IStarfieldGroupGetter<IAtmosphereGetter> Atmospheres { get; }
        IStarfieldGroupGetter<ILeveledSpaceCellGetter> LeveledSpaceCells { get; }
        IStarfieldGroupGetter<ISpeechChallengeGetter> SpeechChallenges { get; }
        IStarfieldGroupGetter<IAimAssistPoseGetter> AimAssistPoses { get; }
        IStarfieldGroupGetter<IVolumetricLightingGetter> VolumetricLightings { get; }
        IStarfieldGroupGetter<ISurfaceBlockGetter> SurfaceBlocks { get; }
        IStarfieldGroupGetter<ISurfacePatternConfigGetter> SurfacePatternConfigs { get; }
        IStarfieldGroupGetter<ISurfacePatternGetter> SurfacePatterns { get; }
        IStarfieldGroupGetter<ISurfaceTreeGetter> SurfaceTrees { get; }
        IStarfieldGroupGetter<IPlanetContentManagerTreeGetter> PlanetContentManagerTrees { get; }
        IStarfieldGroupGetter<IBoneModifierGetter> BoneModifiers { get; }
        IStarfieldGroupGetter<ISnapTemplateBehaviorGetter> SnapTemplateBehaviors { get; }
        IStarfieldGroupGetter<IPlanetGetter> Planets { get; }
        IStarfieldGroupGetter<IConditionRecordGetter> ConditionRecords { get; }
        IStarfieldGroupGetter<IPlanetContentManagerBranchNodeGetter> PlanetContentManagerBranchNodes { get; }
        IStarfieldGroupGetter<IPlanetContentManagerContentNodeGetter> PlanetContentManagerContentNodes { get; }
        IStarfieldGroupGetter<IStarGetter> Stars { get; }
        IStarfieldGroupGetter<IWWiseEventDataGetter> WWiseEventDatas { get; }
        IStarfieldGroupGetter<IResearchProjectGetter> ResearchProjects { get; }
        IStarfieldGroupGetter<IAimOpticalSightMarkerGetter> AimOpticalSightMarkers { get; }
        IStarfieldGroupGetter<IAmbienceSetGetter> AmbienceSets { get; }
        IStarfieldGroupGetter<IWeaponBarrelModelGetter> WeaponBarrelModels { get; }
        IStarfieldGroupGetter<ISurfacePatternStyleGetter> SurfacePatternStyles { get; }
        IStarfieldGroupGetter<ILayeredMaterialSwapGetter> LayeredMaterialSwaps { get; }
        IStarfieldGroupGetter<IForceDataGetter> ForceDatas { get; }
        IStarfieldGroupGetter<ITerminalMenuGetter> TerminalMenus { get; }
        IStarfieldGroupGetter<IEffectSequenceGetter> EffectSequences { get; }
        IStarfieldGroupGetter<ISecondaryDamageListGetter> SecondaryDamageLists { get; }
        IStarfieldGroupGetter<IMaterialPathGetter> MaterialPaths { get; }
        IStarfieldGroupGetter<ICloudsGetter> Clouds { get; }
        IStarfieldGroupGetter<IFogVolumeGetter> FogVolumes { get; }
        IStarfieldGroupGetter<IWWiseKeywordMappingGetter> WWiseKeywordMappings { get; }
        IStarfieldGroupGetter<ILegendaryItemGetter> LegendaryItems { get; }
        IStarfieldGroupGetter<IParticleSystemDefineCollisionGetter> ParticleSystemDefineCollisions { get; }
        IStarfieldGroupGetter<ISunPresetGetter> SunPresets { get; }
        IStarfieldGroupGetter<IPhotoModeFeatureGetter> PhotoModeFeatures { get; }
        IStarfieldGroupGetter<IGameplayOptionsGetter> GameplayOptions { get; }
        IStarfieldGroupGetter<IGameplayOptionsGroupGetter> GameplayOptionsGroups { get; }
        IStarfieldGroupGetter<ITimeOfDayRecordGetter> TimeOfDays { get; }
        IStarfieldGroupGetter<IActorValueModulationGetter> ActorValueModulations { get; }
        IStarfieldGroupGetter<IChallengeGetter> Challenges { get; }
        IStarfieldGroupGetter<IFacialExpressionGetter> FacialExpressions { get; }
        IStarfieldGroupGetter<IPERSGetter> PERS { get; }

        #region Mutagen
        StarfieldRelease StarfieldRelease { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class StarfieldModMixIn
    {
        public static void Clear(this IStarfieldMod item)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StarfieldMod.Mask<bool> GetEqualsMask(
            this IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStarfieldModGetter item,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStarfieldModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            StarfieldMod.TranslationMask? equalsMask = null)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs)
        {
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs,
            out StarfieldMod.ErrorMask errorMask,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StarfieldMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStarfieldMod lhs,
            IStarfieldModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StarfieldMod DeepCopy(
            this IStarfieldModGetter item,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            return ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StarfieldMod DeepCopy(
            this IStarfieldModGetter item,
            out StarfieldMod.ErrorMask errorMask,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            return ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StarfieldMod DeepCopy(
            this IStarfieldModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IGroupGetter<T>? TryGetTopLevelGroup<T>(this IStarfieldModGetter obj)
            where T : IMajorRecordGetter
        {
            return (IGroupGetter<T>?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroupGetter? TryGetTopLevelGroup(
            this IStarfieldModGetter obj,
            Type type)
        {
            return (IGroupGetter?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static IGroup<T>? TryGetTopLevelGroup<T>(this IStarfieldMod obj)
            where T : IMajorRecord
        {
            return (IGroup<T>?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroup? TryGetTopLevelGroup(
            this IStarfieldMod obj,
            Type type)
        {
            return (IGroup?)((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static uint GetRecordCount(this IStarfieldModGetter item)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).GetRecordCount(item: item);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this IStarfieldModGetter obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IStarfieldModGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this IStarfieldModGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this IStarfieldMod obj)
        {
            return ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IStarfieldMod obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this IStarfieldMod obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            IEnumerable<FormKey> keys)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            IEnumerable<IFormLinkIdentifier> keys)
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            HashSet<FormKey> keys)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IStarfieldMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IStarfieldMod obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, TSetter, TGetter>> EnumerateMajorRecordContexts<TSetter, TGetter>(
            this IStarfieldModGetter obj,
            ILinkCache linkCache,
            bool throwIfUnknown = true)
            where TSetter : class, IMajorRecordQueryable, TGetter
            where TGetter : class, IMajorRecordQueryableGetter
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: typeof(TGetter),
                throwIfUnknown: throwIfUnknown)
                .Select(m => m.AsType<IStarfieldMod, IStarfieldModGetter, IMajorRecordQueryable, IMajorRecordQueryableGetter, TSetter, TGetter>())
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IMajorRecordGetter>> EnumerateMajorRecordContexts(this IStarfieldModGetter obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: null!)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            this IStarfieldModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStarfieldMod item,
            MutagenFrame frame,
            StarfieldRelease release,
            GroupMask? importMask = null)
        {
            ((StarfieldModSetterCommon)((IStarfieldModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                release: release,
                importMask: importMask);
        }

        public static void CopyInFromBinary(
            this IStarfieldMod item,
            ModPath path,
            StarfieldRelease release,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)StarfieldModHeader.HeaderFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(gameRelease, path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam);
                    }
                    CopyInFromBinary(
                        item: item,
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static void CopyInFromBinary(
            this IStarfieldMod item,
            Stream stream,
            ModKey modKey,
            StarfieldRelease release,
            RecordTypeInfoCacheReader infoCache,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    CopyInFromBinary(
                        item: item,
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum StarfieldMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Keywords = 2,
        FFKW = 3,
        LocationReferenceTypes = 4,
        Actions = 5,
        Transforms = 6,
        TextureSets = 7,
        Globals = 8,
        DamageTypes = 9,
        Classes = 10,
        Factions = 11,
        AffinityEvents = 12,
        HeadParts = 13,
        Races = 14,
        SoundMarkers = 15,
        SoundEchoMarkers = 16,
        AcousticSpaces = 17,
        AudioOcclusionPrimitives = 18,
        MagicEffects = 19,
        LandscapeTextures = 20,
        ProjectedDecals = 21,
        ObjectEffects = 22,
        Spells = 23,
        Activators = 24,
        CurveTables = 25,
        Curve3Ds = 26,
        Armors = 27,
        Books = 28,
        Containers = 29,
        Doors = 30,
        Lights = 31,
        MiscItems = 32,
        Statics = 33,
        StaticCollections = 34,
        PackIns = 35,
        MoveableStatics = 36,
        Grasses = 37,
        Florae = 38,
        Furniture = 39,
        Weapons = 40,
        Ammunitions = 41,
        Npcs = 42,
        LeveledNpcs = 43,
        LeveledPackIns = 44,
        Keys = 45,
        Ingestibles = 46,
        IdleMarkers = 47,
        BiomeMarkers = 48,
        Notes = 49,
        Projectiles = 50,
        Hazards = 51,
        BendableSplines = 52,
        Terminals = 53,
        LeveledItems = 54,
        GenericBaseFormTemplates = 55,
        GenericBaseForms = 56,
        LeveledBaseForms = 57,
        Weathers = 58,
        WeatherSettings = 59,
        Climates = 60,
        ShaderParticleGeometries = 61,
        Regions = 62,
        NavigationMeshInfoMaps = 63,
        Cells = 64,
        Worldspaces = 65,
        Quests = 66,
        IdleAnimations = 67,
        Packages = 68,
        CombatStyles = 69,
        LoadScreens = 70,
        AnimatedObjects = 71,
        Waters = 72,
        EffectShaders = 73,
        Explosions = 74,
        Debris = 75,
        ImageSpaces = 76,
        ImageSpaceAdapters = 77,
        FormLists = 78,
        Perks = 79,
        BodyParts = 80,
        AddonNodes = 81,
        ActorValueInformation = 82,
        CameraShots = 83,
        CameraPaths = 84,
        VoiceTypes = 85,
        MaterialTypes = 86,
        Impacts = 87,
        ImpactDataSets = 88,
        ArmorAddons = 89,
        Locations = 90,
        Messages = 91,
        DefaultObjectManagers = 92,
        DefaultObjects = 93,
        LightingTemplates = 94,
        MusicTypes = 95,
        Footsteps = 96,
        FootstepSets = 97,
        StoryManagerBranchNodes = 98,
        StoryManagerQuestNodes = 99,
        StoryManagerEventNodes = 100,
        MusicTracks = 101,
        EquipTypes = 102,
        Outfits = 103,
        ArtObjects = 104,
        MovementTypes = 105,
        CollisionLayers = 106,
        Colors = 107,
        ReverbParameters = 108,
        ReferenceGroups = 109,
        AimModels = 110,
        AimAssistModels = 111,
        MeleeAimAssistModels = 112,
        Layers = 113,
        ConstructibleObjects = 114,
        ObjectModifications = 115,
        Zooms = 116,
        InstanceNamingRules = 117,
        SoundKeywordMappings = 118,
        AttractionRules = 119,
        SceneCollections = 120,
        AnimationSoundTagSets = 121,
        Resources = 122,
        Biomes = 123,
        NavigationMeshObstacleCoverManagers = 124,
        LensFlares = 125,
        ObjectVisibilityManagers = 126,
        SnapTemplateNodes = 127,
        SnapTemplates = 128,
        GroundCovers = 129,
        MorphableObjects = 130,
        Traversals = 131,
        ResourceGenerationData = 132,
        BiomeSwaps = 133,
        Atmospheres = 134,
        LeveledSpaceCells = 135,
        SpeechChallenges = 136,
        AimAssistPoses = 137,
        VolumetricLightings = 138,
        SurfaceBlocks = 139,
        SurfacePatternConfigs = 140,
        SurfacePatterns = 141,
        SurfaceTrees = 142,
        PlanetContentManagerTrees = 143,
        BoneModifiers = 144,
        SnapTemplateBehaviors = 145,
        Planets = 146,
        ConditionRecords = 147,
        PlanetContentManagerBranchNodes = 148,
        PlanetContentManagerContentNodes = 149,
        Stars = 150,
        WWiseEventDatas = 151,
        ResearchProjects = 152,
        AimOpticalSightMarkers = 153,
        AmbienceSets = 154,
        WeaponBarrelModels = 155,
        SurfacePatternStyles = 156,
        LayeredMaterialSwaps = 157,
        ForceDatas = 158,
        TerminalMenus = 159,
        EffectSequences = 160,
        SecondaryDamageLists = 161,
        MaterialPaths = 162,
        Clouds = 163,
        FogVolumes = 164,
        WWiseKeywordMappings = 165,
        LegendaryItems = 166,
        ParticleSystemDefineCollisions = 167,
        SunPresets = 168,
        PhotoModeFeatures = 169,
        GameplayOptions = 170,
        GameplayOptionsGroups = 171,
        TimeOfDays = 172,
        ActorValueModulations = 173,
        Challenges = 174,
        FacialExpressions = 175,
        PERS = 176,
    }
    #endregion

    #region Registration
    internal partial class StarfieldMod_Registration : ILoquiRegistration
    {
        public static readonly StarfieldMod_Registration Instance = new StarfieldMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 177;

        public const ushort FieldCount = 177;

        public static readonly Type MaskType = typeof(StarfieldMod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StarfieldMod.ErrorMask);

        public static readonly Type ClassType = typeof(StarfieldMod);

        public static readonly Type GetterType = typeof(IStarfieldModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStarfieldMod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.StarfieldMod";

        public const string Name = "StarfieldMod";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static readonly Type BinaryWriteTranslation = typeof(StarfieldModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StarfieldModSetterCommon
    {
        public static readonly StarfieldModSetterCommon Instance = new StarfieldModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStarfieldMod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Keywords.Clear();
            item.FFKW.Clear();
            item.LocationReferenceTypes.Clear();
            item.Actions.Clear();
            item.Transforms.Clear();
            item.TextureSets.Clear();
            item.Globals.Clear();
            item.DamageTypes.Clear();
            item.Classes.Clear();
            item.Factions.Clear();
            item.AffinityEvents.Clear();
            item.HeadParts.Clear();
            item.Races.Clear();
            item.SoundMarkers.Clear();
            item.SoundEchoMarkers.Clear();
            item.AcousticSpaces.Clear();
            item.AudioOcclusionPrimitives.Clear();
            item.MagicEffects.Clear();
            item.LandscapeTextures.Clear();
            item.ProjectedDecals.Clear();
            item.ObjectEffects.Clear();
            item.Spells.Clear();
            item.Activators.Clear();
            item.CurveTables.Clear();
            item.Curve3Ds.Clear();
            item.Armors.Clear();
            item.Books.Clear();
            item.Containers.Clear();
            item.Doors.Clear();
            item.Lights.Clear();
            item.MiscItems.Clear();
            item.Statics.Clear();
            item.StaticCollections.Clear();
            item.PackIns.Clear();
            item.MoveableStatics.Clear();
            item.Grasses.Clear();
            item.Florae.Clear();
            item.Furniture.Clear();
            item.Weapons.Clear();
            item.Ammunitions.Clear();
            item.Npcs.Clear();
            item.LeveledNpcs.Clear();
            item.LeveledPackIns.Clear();
            item.Keys.Clear();
            item.Ingestibles.Clear();
            item.IdleMarkers.Clear();
            item.BiomeMarkers.Clear();
            item.Notes.Clear();
            item.Projectiles.Clear();
            item.Hazards.Clear();
            item.BendableSplines.Clear();
            item.Terminals.Clear();
            item.LeveledItems.Clear();
            item.GenericBaseFormTemplates.Clear();
            item.GenericBaseForms.Clear();
            item.LeveledBaseForms.Clear();
            item.Weathers.Clear();
            item.WeatherSettings.Clear();
            item.Climates.Clear();
            item.ShaderParticleGeometries.Clear();
            item.Regions.Clear();
            item.NavigationMeshInfoMaps.Clear();
            item.Worldspaces.Clear();
            item.Quests.Clear();
            item.IdleAnimations.Clear();
            item.Packages.Clear();
            item.CombatStyles.Clear();
            item.LoadScreens.Clear();
            item.AnimatedObjects.Clear();
            item.Waters.Clear();
            item.EffectShaders.Clear();
            item.Explosions.Clear();
            item.Debris.Clear();
            item.ImageSpaces.Clear();
            item.ImageSpaceAdapters.Clear();
            item.FormLists.Clear();
            item.Perks.Clear();
            item.BodyParts.Clear();
            item.AddonNodes.Clear();
            item.ActorValueInformation.Clear();
            item.CameraShots.Clear();
            item.CameraPaths.Clear();
            item.VoiceTypes.Clear();
            item.MaterialTypes.Clear();
            item.Impacts.Clear();
            item.ImpactDataSets.Clear();
            item.ArmorAddons.Clear();
            item.Locations.Clear();
            item.Messages.Clear();
            item.DefaultObjectManagers.Clear();
            item.DefaultObjects.Clear();
            item.LightingTemplates.Clear();
            item.MusicTypes.Clear();
            item.Footsteps.Clear();
            item.FootstepSets.Clear();
            item.StoryManagerBranchNodes.Clear();
            item.StoryManagerQuestNodes.Clear();
            item.StoryManagerEventNodes.Clear();
            item.MusicTracks.Clear();
            item.EquipTypes.Clear();
            item.Outfits.Clear();
            item.ArtObjects.Clear();
            item.MovementTypes.Clear();
            item.CollisionLayers.Clear();
            item.Colors.Clear();
            item.ReverbParameters.Clear();
            item.ReferenceGroups.Clear();
            item.AimModels.Clear();
            item.AimAssistModels.Clear();
            item.MeleeAimAssistModels.Clear();
            item.Layers.Clear();
            item.ConstructibleObjects.Clear();
            item.ObjectModifications.Clear();
            item.Zooms.Clear();
            item.InstanceNamingRules.Clear();
            item.SoundKeywordMappings.Clear();
            item.AttractionRules.Clear();
            item.SceneCollections.Clear();
            item.AnimationSoundTagSets.Clear();
            item.Resources.Clear();
            item.Biomes.Clear();
            item.NavigationMeshObstacleCoverManagers.Clear();
            item.LensFlares.Clear();
            item.ObjectVisibilityManagers.Clear();
            item.SnapTemplateNodes.Clear();
            item.SnapTemplates.Clear();
            item.GroundCovers.Clear();
            item.MorphableObjects.Clear();
            item.Traversals.Clear();
            item.ResourceGenerationData.Clear();
            item.BiomeSwaps.Clear();
            item.Atmospheres.Clear();
            item.LeveledSpaceCells.Clear();
            item.SpeechChallenges.Clear();
            item.AimAssistPoses.Clear();
            item.VolumetricLightings.Clear();
            item.SurfaceBlocks.Clear();
            item.SurfacePatternConfigs.Clear();
            item.SurfacePatterns.Clear();
            item.SurfaceTrees.Clear();
            item.PlanetContentManagerTrees.Clear();
            item.BoneModifiers.Clear();
            item.SnapTemplateBehaviors.Clear();
            item.Planets.Clear();
            item.ConditionRecords.Clear();
            item.PlanetContentManagerBranchNodes.Clear();
            item.PlanetContentManagerContentNodes.Clear();
            item.Stars.Clear();
            item.WWiseEventDatas.Clear();
            item.ResearchProjects.Clear();
            item.AimOpticalSightMarkers.Clear();
            item.AmbienceSets.Clear();
            item.WeaponBarrelModels.Clear();
            item.SurfacePatternStyles.Clear();
            item.LayeredMaterialSwaps.Clear();
            item.ForceDatas.Clear();
            item.TerminalMenus.Clear();
            item.EffectSequences.Clear();
            item.SecondaryDamageLists.Clear();
            item.MaterialPaths.Clear();
            item.Clouds.Clear();
            item.FogVolumes.Clear();
            item.WWiseKeywordMappings.Clear();
            item.LegendaryItems.Clear();
            item.ParticleSystemDefineCollisions.Clear();
            item.SunPresets.Clear();
            item.PhotoModeFeatures.Clear();
            item.GameplayOptions.Clear();
            item.GameplayOptionsGroups.Clear();
            item.TimeOfDays.Clear();
            item.ActorValueModulations.Clear();
            item.Challenges.Clear();
            item.FacialExpressions.Clear();
            item.PERS.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IStarfieldMod obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ModHeader.RemapLinks(mapping);
            obj.Keywords.RemapLinks(mapping);
            obj.LocationReferenceTypes.RemapLinks(mapping);
            obj.Actions.RemapLinks(mapping);
            obj.Globals.RemapLinks(mapping);
            obj.DamageTypes.RemapLinks(mapping);
            obj.Classes.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.AffinityEvents.RemapLinks(mapping);
            obj.HeadParts.RemapLinks(mapping);
            obj.Races.RemapLinks(mapping);
            obj.SoundMarkers.RemapLinks(mapping);
            obj.SoundEchoMarkers.RemapLinks(mapping);
            obj.AcousticSpaces.RemapLinks(mapping);
            obj.MagicEffects.RemapLinks(mapping);
            obj.LandscapeTextures.RemapLinks(mapping);
            obj.ProjectedDecals.RemapLinks(mapping);
            obj.ObjectEffects.RemapLinks(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Activators.RemapLinks(mapping);
            obj.Armors.RemapLinks(mapping);
            obj.Books.RemapLinks(mapping);
            obj.Containers.RemapLinks(mapping);
            obj.Doors.RemapLinks(mapping);
            obj.Lights.RemapLinks(mapping);
            obj.MiscItems.RemapLinks(mapping);
            obj.Statics.RemapLinks(mapping);
            obj.StaticCollections.RemapLinks(mapping);
            obj.PackIns.RemapLinks(mapping);
            obj.MoveableStatics.RemapLinks(mapping);
            obj.Grasses.RemapLinks(mapping);
            obj.Florae.RemapLinks(mapping);
            obj.Furniture.RemapLinks(mapping);
            obj.Weapons.RemapLinks(mapping);
            obj.Ammunitions.RemapLinks(mapping);
            obj.Npcs.RemapLinks(mapping);
            obj.LeveledNpcs.RemapLinks(mapping);
            obj.LeveledPackIns.RemapLinks(mapping);
            obj.Keys.RemapLinks(mapping);
            obj.Ingestibles.RemapLinks(mapping);
            obj.IdleMarkers.RemapLinks(mapping);
            obj.BiomeMarkers.RemapLinks(mapping);
            obj.Notes.RemapLinks(mapping);
            obj.Projectiles.RemapLinks(mapping);
            obj.Hazards.RemapLinks(mapping);
            obj.BendableSplines.RemapLinks(mapping);
            obj.Terminals.RemapLinks(mapping);
            obj.LeveledItems.RemapLinks(mapping);
            obj.GenericBaseForms.RemapLinks(mapping);
            obj.LeveledBaseForms.RemapLinks(mapping);
            obj.Weathers.RemapLinks(mapping);
            obj.WeatherSettings.RemapLinks(mapping);
            obj.Climates.RemapLinks(mapping);
            obj.Regions.RemapLinks(mapping);
            obj.NavigationMeshInfoMaps.RemapLinks(mapping);
            obj.Cells.RemapLinks(mapping);
            obj.Worldspaces.RemapLinks(mapping);
            obj.Quests.RemapLinks(mapping);
            obj.IdleAnimations.RemapLinks(mapping);
            obj.Packages.RemapLinks(mapping);
            obj.CombatStyles.RemapLinks(mapping);
            obj.LoadScreens.RemapLinks(mapping);
            obj.AnimatedObjects.RemapLinks(mapping);
            obj.Waters.RemapLinks(mapping);
            obj.EffectShaders.RemapLinks(mapping);
            obj.Explosions.RemapLinks(mapping);
            obj.ImageSpaces.RemapLinks(mapping);
            obj.FormLists.RemapLinks(mapping);
            obj.Perks.RemapLinks(mapping);
            obj.BodyParts.RemapLinks(mapping);
            obj.AddonNodes.RemapLinks(mapping);
            obj.CameraShots.RemapLinks(mapping);
            obj.CameraPaths.RemapLinks(mapping);
            obj.VoiceTypes.RemapLinks(mapping);
            obj.MaterialTypes.RemapLinks(mapping);
            obj.Impacts.RemapLinks(mapping);
            obj.ImpactDataSets.RemapLinks(mapping);
            obj.ArmorAddons.RemapLinks(mapping);
            obj.Locations.RemapLinks(mapping);
            obj.Messages.RemapLinks(mapping);
            obj.DefaultObjectManagers.RemapLinks(mapping);
            obj.DefaultObjects.RemapLinks(mapping);
            obj.MusicTypes.RemapLinks(mapping);
            obj.Footsteps.RemapLinks(mapping);
            obj.FootstepSets.RemapLinks(mapping);
            obj.StoryManagerBranchNodes.RemapLinks(mapping);
            obj.StoryManagerQuestNodes.RemapLinks(mapping);
            obj.StoryManagerEventNodes.RemapLinks(mapping);
            obj.MusicTracks.RemapLinks(mapping);
            obj.EquipTypes.RemapLinks(mapping);
            obj.Outfits.RemapLinks(mapping);
            obj.ArtObjects.RemapLinks(mapping);
            obj.CollisionLayers.RemapLinks(mapping);
            obj.Colors.RemapLinks(mapping);
            obj.ReferenceGroups.RemapLinks(mapping);
            obj.Layers.RemapLinks(mapping);
            obj.ConstructibleObjects.RemapLinks(mapping);
            obj.ObjectModifications.RemapLinks(mapping);
            obj.Zooms.RemapLinks(mapping);
            obj.InstanceNamingRules.RemapLinks(mapping);
            obj.SoundKeywordMappings.RemapLinks(mapping);
            obj.SceneCollections.RemapLinks(mapping);
            obj.AnimationSoundTagSets.RemapLinks(mapping);
            obj.Resources.RemapLinks(mapping);
            obj.Biomes.RemapLinks(mapping);
            obj.ObjectVisibilityManagers.RemapLinks(mapping);
            obj.SnapTemplateNodes.RemapLinks(mapping);
            obj.SnapTemplates.RemapLinks(mapping);
            obj.GroundCovers.RemapLinks(mapping);
            obj.MorphableObjects.RemapLinks(mapping);
            obj.ResourceGenerationData.RemapLinks(mapping);
            obj.Atmospheres.RemapLinks(mapping);
            obj.LeveledSpaceCells.RemapLinks(mapping);
            obj.SpeechChallenges.RemapLinks(mapping);
            obj.SurfaceBlocks.RemapLinks(mapping);
            obj.SurfacePatternConfigs.RemapLinks(mapping);
            obj.SurfacePatterns.RemapLinks(mapping);
            obj.SurfaceTrees.RemapLinks(mapping);
            obj.PlanetContentManagerTrees.RemapLinks(mapping);
            obj.BoneModifiers.RemapLinks(mapping);
            obj.SnapTemplateBehaviors.RemapLinks(mapping);
            obj.Planets.RemapLinks(mapping);
            obj.ConditionRecords.RemapLinks(mapping);
            obj.PlanetContentManagerBranchNodes.RemapLinks(mapping);
            obj.PlanetContentManagerContentNodes.RemapLinks(mapping);
            obj.Stars.RemapLinks(mapping);
            obj.WWiseEventDatas.RemapLinks(mapping);
            obj.ResearchProjects.RemapLinks(mapping);
            obj.AimOpticalSightMarkers.RemapLinks(mapping);
            obj.AmbienceSets.RemapLinks(mapping);
            obj.LayeredMaterialSwaps.RemapLinks(mapping);
            obj.TerminalMenus.RemapLinks(mapping);
            obj.SecondaryDamageLists.RemapLinks(mapping);
            obj.WWiseKeywordMappings.RemapLinks(mapping);
            obj.LegendaryItems.RemapLinks(mapping);
            obj.SunPresets.RemapLinks(mapping);
            obj.PhotoModeFeatures.RemapLinks(mapping);
            obj.GameplayOptions.RemapLinks(mapping);
            obj.GameplayOptionsGroups.RemapLinks(mapping);
            obj.TimeOfDays.RemapLinks(mapping);
            obj.ActorValueModulations.RemapLinks(mapping);
            obj.Challenges.RemapLinks(mapping);
            obj.PERS.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(IStarfieldMod obj)
        {
            foreach (var item in StarfieldModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IStarfieldMod obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IStarfieldMod obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in StarfieldModCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IStarfieldMod obj,
            HashSet<FormKey> keys)
        {
            obj.GameSettings.Remove(keys);
            obj.Keywords.Remove(keys);
            obj.FFKW.Remove(keys);
            obj.LocationReferenceTypes.Remove(keys);
            obj.Actions.Remove(keys);
            obj.Transforms.Remove(keys);
            obj.TextureSets.Remove(keys);
            obj.Globals.Remove(keys);
            obj.DamageTypes.Remove(keys);
            obj.Classes.Remove(keys);
            obj.Factions.Remove(keys);
            obj.AffinityEvents.Remove(keys);
            obj.HeadParts.Remove(keys);
            obj.Races.Remove(keys);
            obj.SoundMarkers.Remove(keys);
            obj.SoundEchoMarkers.Remove(keys);
            obj.AcousticSpaces.Remove(keys);
            obj.AudioOcclusionPrimitives.Remove(keys);
            obj.MagicEffects.Remove(keys);
            obj.LandscapeTextures.Remove(keys);
            obj.ProjectedDecals.Remove(keys);
            obj.ObjectEffects.Remove(keys);
            obj.Spells.Remove(keys);
            obj.Activators.Remove(keys);
            obj.CurveTables.Remove(keys);
            obj.Curve3Ds.Remove(keys);
            obj.Armors.Remove(keys);
            obj.Books.Remove(keys);
            obj.Containers.Remove(keys);
            obj.Doors.Remove(keys);
            obj.Lights.Remove(keys);
            obj.MiscItems.Remove(keys);
            obj.Statics.Remove(keys);
            obj.StaticCollections.Remove(keys);
            obj.PackIns.Remove(keys);
            obj.MoveableStatics.Remove(keys);
            obj.Grasses.Remove(keys);
            obj.Florae.Remove(keys);
            obj.Furniture.Remove(keys);
            obj.Weapons.Remove(keys);
            obj.Ammunitions.Remove(keys);
            obj.Npcs.Remove(keys);
            obj.LeveledNpcs.Remove(keys);
            obj.LeveledPackIns.Remove(keys);
            obj.Keys.Remove(keys);
            obj.Ingestibles.Remove(keys);
            obj.IdleMarkers.Remove(keys);
            obj.BiomeMarkers.Remove(keys);
            obj.Notes.Remove(keys);
            obj.Projectiles.Remove(keys);
            obj.Hazards.Remove(keys);
            obj.BendableSplines.Remove(keys);
            obj.Terminals.Remove(keys);
            obj.LeveledItems.Remove(keys);
            obj.GenericBaseFormTemplates.Remove(keys);
            obj.GenericBaseForms.Remove(keys);
            obj.LeveledBaseForms.Remove(keys);
            obj.Weathers.Remove(keys);
            obj.WeatherSettings.Remove(keys);
            obj.Climates.Remove(keys);
            obj.ShaderParticleGeometries.Remove(keys);
            obj.Regions.Remove(keys);
            obj.NavigationMeshInfoMaps.Remove(keys);
            obj.Cells.Remove(keys);
            obj.Worldspaces.Remove(keys);
            obj.Quests.Remove(keys);
            obj.IdleAnimations.Remove(keys);
            obj.Packages.Remove(keys);
            obj.CombatStyles.Remove(keys);
            obj.LoadScreens.Remove(keys);
            obj.AnimatedObjects.Remove(keys);
            obj.Waters.Remove(keys);
            obj.EffectShaders.Remove(keys);
            obj.Explosions.Remove(keys);
            obj.Debris.Remove(keys);
            obj.ImageSpaces.Remove(keys);
            obj.ImageSpaceAdapters.Remove(keys);
            obj.FormLists.Remove(keys);
            obj.Perks.Remove(keys);
            obj.BodyParts.Remove(keys);
            obj.AddonNodes.Remove(keys);
            obj.ActorValueInformation.Remove(keys);
            obj.CameraShots.Remove(keys);
            obj.CameraPaths.Remove(keys);
            obj.VoiceTypes.Remove(keys);
            obj.MaterialTypes.Remove(keys);
            obj.Impacts.Remove(keys);
            obj.ImpactDataSets.Remove(keys);
            obj.ArmorAddons.Remove(keys);
            obj.Locations.Remove(keys);
            obj.Messages.Remove(keys);
            obj.DefaultObjectManagers.Remove(keys);
            obj.DefaultObjects.Remove(keys);
            obj.LightingTemplates.Remove(keys);
            obj.MusicTypes.Remove(keys);
            obj.Footsteps.Remove(keys);
            obj.FootstepSets.Remove(keys);
            obj.StoryManagerBranchNodes.Remove(keys);
            obj.StoryManagerQuestNodes.Remove(keys);
            obj.StoryManagerEventNodes.Remove(keys);
            obj.MusicTracks.Remove(keys);
            obj.EquipTypes.Remove(keys);
            obj.Outfits.Remove(keys);
            obj.ArtObjects.Remove(keys);
            obj.MovementTypes.Remove(keys);
            obj.CollisionLayers.Remove(keys);
            obj.Colors.Remove(keys);
            obj.ReverbParameters.Remove(keys);
            obj.ReferenceGroups.Remove(keys);
            obj.AimModels.Remove(keys);
            obj.AimAssistModels.Remove(keys);
            obj.MeleeAimAssistModels.Remove(keys);
            obj.Layers.Remove(keys);
            obj.ConstructibleObjects.Remove(keys);
            obj.ObjectModifications.Remove(keys);
            obj.Zooms.Remove(keys);
            obj.InstanceNamingRules.Remove(keys);
            obj.SoundKeywordMappings.Remove(keys);
            obj.AttractionRules.Remove(keys);
            obj.SceneCollections.Remove(keys);
            obj.AnimationSoundTagSets.Remove(keys);
            obj.Resources.Remove(keys);
            obj.Biomes.Remove(keys);
            obj.NavigationMeshObstacleCoverManagers.Remove(keys);
            obj.LensFlares.Remove(keys);
            obj.ObjectVisibilityManagers.Remove(keys);
            obj.SnapTemplateNodes.Remove(keys);
            obj.SnapTemplates.Remove(keys);
            obj.GroundCovers.Remove(keys);
            obj.MorphableObjects.Remove(keys);
            obj.Traversals.Remove(keys);
            obj.ResourceGenerationData.Remove(keys);
            obj.BiomeSwaps.Remove(keys);
            obj.Atmospheres.Remove(keys);
            obj.LeveledSpaceCells.Remove(keys);
            obj.SpeechChallenges.Remove(keys);
            obj.AimAssistPoses.Remove(keys);
            obj.VolumetricLightings.Remove(keys);
            obj.SurfaceBlocks.Remove(keys);
            obj.SurfacePatternConfigs.Remove(keys);
            obj.SurfacePatterns.Remove(keys);
            obj.SurfaceTrees.Remove(keys);
            obj.PlanetContentManagerTrees.Remove(keys);
            obj.BoneModifiers.Remove(keys);
            obj.SnapTemplateBehaviors.Remove(keys);
            obj.Planets.Remove(keys);
            obj.ConditionRecords.Remove(keys);
            obj.PlanetContentManagerBranchNodes.Remove(keys);
            obj.PlanetContentManagerContentNodes.Remove(keys);
            obj.Stars.Remove(keys);
            obj.WWiseEventDatas.Remove(keys);
            obj.ResearchProjects.Remove(keys);
            obj.AimOpticalSightMarkers.Remove(keys);
            obj.AmbienceSets.Remove(keys);
            obj.WeaponBarrelModels.Remove(keys);
            obj.SurfacePatternStyles.Remove(keys);
            obj.LayeredMaterialSwaps.Remove(keys);
            obj.ForceDatas.Remove(keys);
            obj.TerminalMenus.Remove(keys);
            obj.EffectSequences.Remove(keys);
            obj.SecondaryDamageLists.Remove(keys);
            obj.MaterialPaths.Remove(keys);
            obj.Clouds.Remove(keys);
            obj.FogVolumes.Remove(keys);
            obj.WWiseKeywordMappings.Remove(keys);
            obj.LegendaryItems.Remove(keys);
            obj.ParticleSystemDefineCollisions.Remove(keys);
            obj.SunPresets.Remove(keys);
            obj.PhotoModeFeatures.Remove(keys);
            obj.GameplayOptions.Remove(keys);
            obj.GameplayOptionsGroups.Remove(keys);
            obj.TimeOfDays.Remove(keys);
            obj.ActorValueModulations.Remove(keys);
            obj.Challenges.Remove(keys);
            obj.FacialExpressions.Remove(keys);
            obj.PERS.Remove(keys);
        }
        
        public void Remove(
            IStarfieldMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    if (!StarfieldMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                case "GameSettingInt":
                case "IGameSettingIntGetter":
                case "IGameSettingInt":
                case "IGameSettingIntInternal":
                case "GameSettingFloat":
                case "IGameSettingFloatGetter":
                case "IGameSettingFloat":
                case "IGameSettingFloatInternal":
                case "GameSettingString":
                case "IGameSettingStringGetter":
                case "IGameSettingString":
                case "IGameSettingStringInternal":
                case "GameSettingBool":
                case "IGameSettingBoolGetter":
                case "IGameSettingBool":
                case "IGameSettingBoolInternal":
                case "GameSettingUInt":
                case "IGameSettingUIntGetter":
                case "IGameSettingUInt":
                case "IGameSettingUIntInternal":
                    obj.GameSettings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    obj.Keywords.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FFKWRecord":
                case "IFFKWRecordGetter":
                case "IFFKWRecord":
                case "IFFKWRecordInternal":
                    obj.FFKW.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    obj.LocationReferenceTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    obj.Actions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    obj.Transforms.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    obj.TextureSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    obj.Globals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DamageType":
                case "IDamageTypeGetter":
                case "IDamageType":
                case "IDamageTypeInternal":
                    obj.DamageTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    obj.Classes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    obj.Factions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AffinityEvent":
                case "IAffinityEventGetter":
                case "IAffinityEvent":
                case "IAffinityEventInternal":
                    obj.AffinityEvents.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    obj.HeadParts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    obj.Races.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    obj.SoundMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundEchoMarker":
                case "ISoundEchoMarkerGetter":
                case "ISoundEchoMarker":
                case "ISoundEchoMarkerInternal":
                    obj.SoundEchoMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    obj.AcousticSpaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveGetter":
                case "IAudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveInternal":
                    obj.AudioOcclusionPrimitives.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    obj.MagicEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    obj.LandscapeTextures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ProjectedDecal":
                case "IProjectedDecalGetter":
                case "IProjectedDecal":
                case "IProjectedDecalInternal":
                    obj.ProjectedDecals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    obj.ObjectEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    obj.Spells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    obj.Activators.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CurveTable":
                case "ICurveTableGetter":
                case "ICurveTable":
                case "ICurveTableInternal":
                    obj.CurveTables.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Curve3D":
                case "ICurve3DGetter":
                case "ICurve3D":
                case "ICurve3DInternal":
                    obj.Curve3Ds.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    obj.Armors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    obj.Books.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    obj.Containers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    obj.Doors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    obj.Lights.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    obj.MiscItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    obj.Statics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StaticCollection":
                case "IStaticCollectionGetter":
                case "IStaticCollection":
                case "IStaticCollectionInternal":
                    obj.StaticCollections.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PackIn":
                case "IPackInGetter":
                case "IPackIn":
                case "IPackInInternal":
                    obj.PackIns.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    obj.MoveableStatics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    obj.Grasses.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    obj.Florae.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    obj.Furniture.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    obj.Weapons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    obj.Ammunitions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    obj.Npcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    obj.LeveledNpcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledPackIn":
                case "ILeveledPackInGetter":
                case "ILeveledPackIn":
                case "ILeveledPackInInternal":
                    obj.LeveledPackIns.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    obj.Keys.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    obj.Ingestibles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    obj.IdleMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BiomeMarker":
                case "IBiomeMarkerGetter":
                case "IBiomeMarker":
                case "IBiomeMarkerInternal":
                    obj.BiomeMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Note":
                case "INoteGetter":
                case "INote":
                case "INoteInternal":
                    obj.Notes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    obj.Projectiles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    obj.Hazards.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BendableSpline":
                case "IBendableSplineGetter":
                case "IBendableSpline":
                case "IBendableSplineInternal":
                    obj.BendableSplines.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Terminal":
                case "ITerminalGetter":
                case "ITerminal":
                case "ITerminalInternal":
                    obj.Terminals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    obj.LeveledItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "GenericBaseFormTemplate":
                case "IGenericBaseFormTemplateGetter":
                case "IGenericBaseFormTemplate":
                case "IGenericBaseFormTemplateInternal":
                    obj.GenericBaseFormTemplates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "GenericBaseForm":
                case "IGenericBaseFormGetter":
                case "IGenericBaseForm":
                case "IGenericBaseFormInternal":
                    obj.GenericBaseForms.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledBaseForm":
                case "ILeveledBaseFormGetter":
                case "ILeveledBaseForm":
                case "ILeveledBaseFormInternal":
                    obj.LeveledBaseForms.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    obj.Weathers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "WeatherSetting":
                case "IWeatherSettingGetter":
                case "IWeatherSetting":
                case "IWeatherSettingInternal":
                    obj.WeatherSettings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    obj.Climates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    obj.ShaderParticleGeometries.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    obj.Regions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    obj.NavigationMeshInfoMaps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    obj.IdleAnimations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    obj.Packages.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    obj.CombatStyles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    obj.LoadScreens.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    obj.AnimatedObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    obj.Waters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    obj.EffectShaders.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    obj.Explosions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    obj.Debris.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    obj.ImageSpaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    obj.ImageSpaceAdapters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    obj.FormLists.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    obj.Perks.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    obj.BodyParts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    obj.AddonNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    obj.ActorValueInformation.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    obj.CameraShots.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    obj.CameraPaths.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    obj.VoiceTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    obj.MaterialTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    obj.Impacts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    obj.ImpactDataSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    obj.ArmorAddons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    obj.Locations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    obj.Messages.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    obj.DefaultObjectManagers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DefaultObject":
                case "IDefaultObjectGetter":
                case "IDefaultObject":
                case "IDefaultObjectInternal":
                    obj.DefaultObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    obj.LightingTemplates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    obj.MusicTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    obj.Footsteps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    obj.FootstepSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    obj.StoryManagerBranchNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    obj.StoryManagerQuestNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    obj.StoryManagerEventNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    obj.MusicTracks.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    obj.EquipTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    obj.Outfits.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    obj.ArtObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    obj.MovementTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    obj.CollisionLayers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    obj.Colors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    obj.ReverbParameters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ReferenceGroup":
                case "IReferenceGroupGetter":
                case "IReferenceGroup":
                case "IReferenceGroupInternal":
                    obj.ReferenceGroups.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AimModel":
                case "IAimModelGetter":
                case "IAimModel":
                case "IAimModelInternal":
                    obj.AimModels.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AimAssistModel":
                case "IAimAssistModelGetter":
                case "IAimAssistModel":
                case "IAimAssistModelInternal":
                    obj.AimAssistModels.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MeleeAimAssistModel":
                case "IMeleeAimAssistModelGetter":
                case "IMeleeAimAssistModel":
                case "IMeleeAimAssistModelInternal":
                    obj.MeleeAimAssistModels.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Layer":
                case "ILayerGetter":
                case "ILayer":
                case "ILayerInternal":
                    obj.Layers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    obj.ConstructibleObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AObjectModification":
                case "IAObjectModificationGetter":
                case "IAObjectModification":
                case "IAObjectModificationInternal":
                case "WeaponModification":
                case "IWeaponModificationGetter":
                case "IWeaponModification":
                case "IWeaponModificationInternal":
                case "ArmorModification":
                case "IArmorModificationGetter":
                case "IArmorModification":
                case "IArmorModificationInternal":
                case "FloraModification":
                case "IFloraModificationGetter":
                case "IFloraModification":
                case "IFloraModificationInternal":
                case "NpcModification":
                case "INpcModificationGetter":
                case "INpcModification":
                case "INpcModificationInternal":
                case "ContainerModification":
                case "IContainerModificationGetter":
                case "IContainerModification":
                case "IContainerModificationInternal":
                case "ObjectModification":
                case "IObjectModificationGetter":
                case "IObjectModification":
                case "IObjectModificationInternal":
                case "UnknownObjectModification":
                case "IUnknownObjectModificationGetter":
                case "IUnknownObjectModification":
                case "IUnknownObjectModificationInternal":
                    obj.ObjectModifications.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Zoom":
                case "IZoomGetter":
                case "IZoom":
                case "IZoomInternal":
                    obj.Zooms.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "InstanceNamingRules":
                case "IInstanceNamingRulesGetter":
                case "IInstanceNamingRules":
                case "IInstanceNamingRulesInternal":
                    obj.InstanceNamingRules.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundKeywordMapping":
                case "ISoundKeywordMappingGetter":
                case "ISoundKeywordMapping":
                case "ISoundKeywordMappingInternal":
                    obj.SoundKeywordMappings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AttractionRule":
                case "IAttractionRuleGetter":
                case "IAttractionRule":
                case "IAttractionRuleInternal":
                    obj.AttractionRules.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SceneCollection":
                case "ISceneCollectionGetter":
                case "ISceneCollection":
                case "ISceneCollectionInternal":
                    obj.SceneCollections.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AnimationSoundTagSet":
                case "IAnimationSoundTagSetGetter":
                case "IAnimationSoundTagSet":
                case "IAnimationSoundTagSetInternal":
                    obj.AnimationSoundTagSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Resource":
                case "IResourceGetter":
                case "IResource":
                case "IResourceInternal":
                    obj.Resources.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Biome":
                case "IBiomeGetter":
                case "IBiome":
                case "IBiomeInternal":
                    obj.Biomes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "NavigationMeshObstacleCoverManager":
                case "INavigationMeshObstacleCoverManagerGetter":
                case "INavigationMeshObstacleCoverManager":
                case "INavigationMeshObstacleCoverManagerInternal":
                    obj.NavigationMeshObstacleCoverManagers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    obj.LensFlares.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ObjectVisibilityManager":
                case "IObjectVisibilityManagerGetter":
                case "IObjectVisibilityManager":
                case "IObjectVisibilityManagerInternal":
                    obj.ObjectVisibilityManagers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SnapTemplateNode":
                case "ISnapTemplateNodeGetter":
                case "ISnapTemplateNode":
                case "ISnapTemplateNodeInternal":
                    obj.SnapTemplateNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SnapTemplate":
                case "ISnapTemplateGetter":
                case "ISnapTemplate":
                case "ISnapTemplateInternal":
                    obj.SnapTemplates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "GroundCover":
                case "IGroundCoverGetter":
                case "IGroundCover":
                case "IGroundCoverInternal":
                    obj.GroundCovers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MorphableObject":
                case "IMorphableObjectGetter":
                case "IMorphableObject":
                case "IMorphableObjectInternal":
                    obj.MorphableObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Traversal":
                case "ITraversalGetter":
                case "ITraversal":
                case "ITraversalInternal":
                    obj.Traversals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ResourceGenerationData":
                case "IResourceGenerationDataGetter":
                case "IResourceGenerationData":
                case "IResourceGenerationDataInternal":
                    obj.ResourceGenerationData.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BiomeSwap":
                case "IBiomeSwapGetter":
                case "IBiomeSwap":
                case "IBiomeSwapInternal":
                    obj.BiomeSwaps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Atmosphere":
                case "IAtmosphereGetter":
                case "IAtmosphere":
                case "IAtmosphereInternal":
                    obj.Atmospheres.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledSpaceCell":
                case "ILeveledSpaceCellGetter":
                case "ILeveledSpaceCell":
                case "ILeveledSpaceCellInternal":
                    obj.LeveledSpaceCells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SpeechChallenge":
                case "ISpeechChallengeGetter":
                case "ISpeechChallenge":
                case "ISpeechChallengeInternal":
                    obj.SpeechChallenges.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AimAssistPose":
                case "IAimAssistPoseGetter":
                case "IAimAssistPose":
                case "IAimAssistPoseInternal":
                    obj.AimAssistPoses.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    obj.VolumetricLightings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SurfaceBlock":
                case "ISurfaceBlockGetter":
                case "ISurfaceBlock":
                case "ISurfaceBlockInternal":
                    obj.SurfaceBlocks.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SurfacePatternConfig":
                case "ISurfacePatternConfigGetter":
                case "ISurfacePatternConfig":
                case "ISurfacePatternConfigInternal":
                    obj.SurfacePatternConfigs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SurfacePattern":
                case "ISurfacePatternGetter":
                case "ISurfacePattern":
                case "ISurfacePatternInternal":
                    obj.SurfacePatterns.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SurfaceTree":
                case "ISurfaceTreeGetter":
                case "ISurfaceTree":
                case "ISurfaceTreeInternal":
                    obj.SurfaceTrees.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlanetContentManagerTree":
                case "IPlanetContentManagerTreeGetter":
                case "IPlanetContentManagerTree":
                case "IPlanetContentManagerTreeInternal":
                    obj.PlanetContentManagerTrees.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BoneModifier":
                case "IBoneModifierGetter":
                case "IBoneModifier":
                case "IBoneModifierInternal":
                    obj.BoneModifiers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SnapTemplateBehavior":
                case "ISnapTemplateBehaviorGetter":
                case "ISnapTemplateBehavior":
                case "ISnapTemplateBehaviorInternal":
                    obj.SnapTemplateBehaviors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Planet":
                case "IPlanetGetter":
                case "IPlanet":
                case "IPlanetInternal":
                    obj.Planets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ConditionRecord":
                case "IConditionRecordGetter":
                case "IConditionRecord":
                case "IConditionRecordInternal":
                    obj.ConditionRecords.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlanetContentManagerBranchNode":
                case "IPlanetContentManagerBranchNodeGetter":
                case "IPlanetContentManagerBranchNode":
                case "IPlanetContentManagerBranchNodeInternal":
                    obj.PlanetContentManagerBranchNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlanetContentManagerContentNode":
                case "IPlanetContentManagerContentNodeGetter":
                case "IPlanetContentManagerContentNode":
                case "IPlanetContentManagerContentNodeInternal":
                    obj.PlanetContentManagerContentNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Star":
                case "IStarGetter":
                case "IStar":
                case "IStarInternal":
                    obj.Stars.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "WWiseEventData":
                case "IWWiseEventDataGetter":
                case "IWWiseEventData":
                case "IWWiseEventDataInternal":
                    obj.WWiseEventDatas.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ResearchProject":
                case "IResearchProjectGetter":
                case "IResearchProject":
                case "IResearchProjectInternal":
                    obj.ResearchProjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AimOpticalSightMarker":
                case "IAimOpticalSightMarkerGetter":
                case "IAimOpticalSightMarker":
                case "IAimOpticalSightMarkerInternal":
                    obj.AimOpticalSightMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AmbienceSet":
                case "IAmbienceSetGetter":
                case "IAmbienceSet":
                case "IAmbienceSetInternal":
                    obj.AmbienceSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "WeaponBarrelModel":
                case "IWeaponBarrelModelGetter":
                case "IWeaponBarrelModel":
                case "IWeaponBarrelModelInternal":
                    obj.WeaponBarrelModels.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SurfacePatternStyle":
                case "ISurfacePatternStyleGetter":
                case "ISurfacePatternStyle":
                case "ISurfacePatternStyleInternal":
                    obj.SurfacePatternStyles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LayeredMaterialSwap":
                case "ILayeredMaterialSwapGetter":
                case "ILayeredMaterialSwap":
                case "ILayeredMaterialSwapInternal":
                    obj.LayeredMaterialSwaps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ForceData":
                case "IForceDataGetter":
                case "IForceData":
                case "IForceDataInternal":
                    obj.ForceDatas.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TerminalMenu":
                case "ITerminalMenuGetter":
                case "ITerminalMenu":
                case "ITerminalMenuInternal":
                    obj.TerminalMenus.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EffectSequence":
                case "IEffectSequenceGetter":
                case "IEffectSequence":
                case "IEffectSequenceInternal":
                    obj.EffectSequences.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SecondaryDamageList":
                case "ISecondaryDamageListGetter":
                case "ISecondaryDamageList":
                case "ISecondaryDamageListInternal":
                    obj.SecondaryDamageLists.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MaterialPath":
                case "IMaterialPathGetter":
                case "IMaterialPath":
                case "IMaterialPathInternal":
                    obj.MaterialPaths.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Clouds":
                case "ICloudsGetter":
                case "IClouds":
                case "ICloudsInternal":
                    obj.Clouds.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FogVolume":
                case "IFogVolumeGetter":
                case "IFogVolume":
                case "IFogVolumeInternal":
                    obj.FogVolumes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "WWiseKeywordMapping":
                case "IWWiseKeywordMappingGetter":
                case "IWWiseKeywordMapping":
                case "IWWiseKeywordMappingInternal":
                    obj.WWiseKeywordMappings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LegendaryItem":
                case "ILegendaryItemGetter":
                case "ILegendaryItem":
                case "ILegendaryItemInternal":
                    obj.LegendaryItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ParticleSystemDefineCollision":
                case "IParticleSystemDefineCollisionGetter":
                case "IParticleSystemDefineCollision":
                case "IParticleSystemDefineCollisionInternal":
                    obj.ParticleSystemDefineCollisions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SunPreset":
                case "ISunPresetGetter":
                case "ISunPreset":
                case "ISunPresetInternal":
                    obj.SunPresets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PhotoModeFeature":
                case "IPhotoModeFeatureGetter":
                case "IPhotoModeFeature":
                case "IPhotoModeFeatureInternal":
                    obj.PhotoModeFeatures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "GameplayOptions":
                case "IGameplayOptionsGetter":
                case "IGameplayOptions":
                case "IGameplayOptionsInternal":
                    obj.GameplayOptions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "GameplayOptionsGroup":
                case "IGameplayOptionsGroupGetter":
                case "IGameplayOptionsGroup":
                case "IGameplayOptionsGroupInternal":
                    obj.GameplayOptionsGroups.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TimeOfDayRecord":
                case "ITimeOfDayRecordGetter":
                case "ITimeOfDayRecord":
                case "ITimeOfDayRecordInternal":
                    obj.TimeOfDays.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActorValueModulation":
                case "IActorValueModulationGetter":
                case "IActorValueModulation":
                case "IActorValueModulationInternal":
                    obj.ActorValueModulations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Challenge":
                case "IChallengeGetter":
                case "IChallenge":
                case "IChallengeInternal":
                    obj.Challenges.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FacialExpression":
                case "IFacialExpressionGetter":
                case "IFacialExpression":
                case "IFacialExpressionInternal":
                    obj.FacialExpressions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PERS":
                case "IPERSGetter":
                case "IPERS":
                case "IPERSInternal":
                    obj.PERS.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                case "PlacedArrow":
                case "IPlacedArrowGetter":
                case "IPlacedArrow":
                case "IPlacedArrowInternal":
                case "PlacedBeam":
                case "IPlacedBeamGetter":
                case "IPlacedBeam":
                case "IPlacedBeamInternal":
                case "PlacedFlame":
                case "IPlacedFlameGetter":
                case "IPlacedFlame":
                case "IPlacedFlameInternal":
                case "PlacedCone":
                case "IPlacedConeGetter":
                case "IPlacedCone":
                case "IPlacedConeInternal":
                case "PlacedBarrier":
                case "IPlacedBarrierGetter":
                case "IPlacedBarrier":
                case "IPlacedBarrierInternal":
                case "PlacedTrap":
                case "IPlacedTrapGetter":
                case "IPlacedTrap":
                case "IPlacedTrapInternal":
                case "PlacedHazard":
                case "IPlacedHazardGetter":
                case "IPlacedHazard":
                case "IPlacedHazardInternal":
                case "PlacedMissile":
                case "IPlacedMissileGetter":
                case "IPlacedMissile":
                case "IPlacedMissileInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IBaseObject":
                case "IBaseObjectGetter":
                    Remove(obj, keys, typeof(IAcousticSpaceGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAddonNodeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArtObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAudioOcclusionPrimitiveGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBendableSplineGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBiomeMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IConstructibleObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDebrisGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IExplosionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IGenericBaseFormGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IGrassGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILegendaryItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledPackInGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAObjectModificationGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IPackInGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectedDecalGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IResourceGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundEchoMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticCollectionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITerminalGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWaterGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IIdleRelation":
                case "IIdleRelationGetter":
                    Remove(obj, keys, typeof(IActionRecordGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IConstructibleObjectTarget":
                case "IConstructibleObjectTargetGetter":
                    Remove(obj, keys, typeof(IActionRecordGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IGenericBaseFormGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAObjectModificationGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IPackInGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITerminalGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IStaticTarget":
                case "IStaticTargetGetter":
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITerminalGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IItem":
                case "IItemGetter":
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILegendaryItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectedDecalGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IResearchResourceTarget":
                case "IResearchResourceTargetGetter":
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IConstructibleObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IResourceGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IOutfitTarget":
                case "IOutfitTargetGetter":
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IBindableEquipment":
                case "IBindableEquipmentGetter":
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "INpcTemplateTarget":
                case "INpcTemplateTargetGetter":
                    Remove(obj, keys, typeof(IBiomeMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IComplexLocation":
                case "IComplexLocationGetter":
                    Remove(obj, keys, typeof(IWorldspaceGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ICellOrObject":
                case "ICellOrObjectGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ISpaceCellSpawn":
                case "ISpaceCellSpawnGetter":
                    Remove(obj, keys, typeof(ILeveledSpaceCellGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IResourceTarget":
                case "IResourceTargetGetter":
                    Remove(obj, keys, typeof(IConstructibleObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IOwner":
                case "IOwnerGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IObjectId":
                case "IObjectIdGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IRelatable":
                case "IRelatableGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IRaceGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IAliasVoiceType":
                case "IAliasVoiceTypeGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IVoiceTypeOrList":
                case "IVoiceTypeOrListGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IVoiceTypeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IExternalBaseTemplate":
                case "IExternalBaseTemplateGetter":
                    Remove(obj, keys, typeof(IGenericBaseFormGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledBaseFormGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILeveledBaseFormTarget":
                case "ILeveledBaseFormTargetGetter":
                    Remove(obj, keys, typeof(IGenericBaseFormGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledBaseFormGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                    Remove(obj, keys, typeof(IKeywordGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IHarvestTarget":
                case "IHarvestTargetGetter":
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "INpcSpawn":
                case "INpcSpawnGetter":
                    Remove(obj, keys, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILeveledPackInTarget":
                case "ILeveledPackInTargetGetter":
                    Remove(obj, keys, typeof(ILeveledPackInGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IPackInGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlanetContentTarget":
                case "IPlanetContentTargetGetter":
                    Remove(obj, keys, typeof(ILeveledPackInGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IPackInGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWorldspaceGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IEmittance":
                case "IEmittanceGetter":
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IRegionGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILocationRecord":
                case "ILocationRecordGetter":
                    Remove(obj, keys, typeof(ILocationReferenceTypeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IEffectRecord":
                case "IEffectRecordGetter":
                    Remove(obj, keys, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlacedSimple":
                case "IPlacedSimpleGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ILinkedReference":
                case "ILinkedReferenceGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlacedThing":
                case "IPlacedThingGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ITraversalTarget":
                case "ITraversalTargetGetter":
                    Remove(obj, keys, typeof(ITraversalGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlanetNode":
                case "IPlanetNodeGetter":
                    Remove(obj, keys, typeof(IPlanetContentManagerBranchNodeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IPlanetContentManagerContentNodeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlanetParentNode":
                case "IPlanetParentNodeGetter":
                    Remove(obj, keys, typeof(IPlanetContentManagerBranchNodeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IPlanetContentManagerTreeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ISpellRecord":
                case "ISpellRecordGetter":
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlaceableObject":
                case "IPlaceableObjectGetter":
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IReferenceableObject":
                case "IReferenceableObjectGetter":
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IExplodeSpawn":
                case "IExplodeSpawnGetter":
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IStarfieldMod obj)
        {
            if (obj.Keywords is IAssetLinkContainer KeywordslinkCont)
            {
                foreach (var item in KeywordslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.LocationReferenceTypes is IAssetLinkContainer LocationReferenceTypeslinkCont)
            {
                foreach (var item in LocationReferenceTypeslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Globals is IAssetLinkContainer GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Factions is IAssetLinkContainer FactionslinkCont)
            {
                foreach (var item in FactionslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.HeadParts is IAssetLinkContainer HeadPartslinkCont)
            {
                foreach (var item in HeadPartslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Races is IAssetLinkContainer RaceslinkCont)
            {
                foreach (var item in RaceslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.LandscapeTextures.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.ProjectedDecals is IAssetLinkContainer ProjectedDecalslinkCont)
            {
                foreach (var item in ProjectedDecalslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Activators is IAssetLinkContainer ActivatorslinkCont)
            {
                foreach (var item in ActivatorslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Armors is IAssetLinkContainer ArmorslinkCont)
            {
                foreach (var item in ArmorslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Books is IAssetLinkContainer BookslinkCont)
            {
                foreach (var item in BookslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Containers is IAssetLinkContainer ContainerslinkCont)
            {
                foreach (var item in ContainerslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Doors is IAssetLinkContainer DoorslinkCont)
            {
                foreach (var item in DoorslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Lights is IAssetLinkContainer LightslinkCont)
            {
                foreach (var item in LightslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.MiscItems is IAssetLinkContainer MiscItemslinkCont)
            {
                foreach (var item in MiscItemslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Statics is IAssetLinkContainer StaticslinkCont)
            {
                foreach (var item in StaticslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.StaticCollections is IAssetLinkContainer StaticCollectionslinkCont)
            {
                foreach (var item in StaticCollectionslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.PackIns is IAssetLinkContainer PackInslinkCont)
            {
                foreach (var item in PackInslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.MoveableStatics is IAssetLinkContainer MoveableStaticslinkCont)
            {
                foreach (var item in MoveableStaticslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Grasses is IAssetLinkContainer GrasseslinkCont)
            {
                foreach (var item in GrasseslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Florae is IAssetLinkContainer FloraelinkCont)
            {
                foreach (var item in FloraelinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Furniture is IAssetLinkContainer FurniturelinkCont)
            {
                foreach (var item in FurniturelinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Weapons is IAssetLinkContainer WeaponslinkCont)
            {
                foreach (var item in WeaponslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Ammunitions.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Npcs is IAssetLinkContainer NpcslinkCont)
            {
                foreach (var item in NpcslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.LeveledNpcs is IAssetLinkContainer LeveledNpcslinkCont)
            {
                foreach (var item in LeveledNpcslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.LeveledPackIns is IAssetLinkContainer LeveledPackInslinkCont)
            {
                foreach (var item in LeveledPackInslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Keys.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Ingestibles is IAssetLinkContainer IngestibleslinkCont)
            {
                foreach (var item in IngestibleslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.IdleMarkers.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.BiomeMarkers is IAssetLinkContainer BiomeMarkerslinkCont)
            {
                foreach (var item in BiomeMarkerslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Notes is IAssetLinkContainer NoteslinkCont)
            {
                foreach (var item in NoteslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Projectiles is IAssetLinkContainer ProjectileslinkCont)
            {
                foreach (var item in ProjectileslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Hazards is IAssetLinkContainer HazardslinkCont)
            {
                foreach (var item in HazardslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.BendableSplines is IAssetLinkContainer BendableSplineslinkCont)
            {
                foreach (var item in BendableSplineslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Terminals is IAssetLinkContainer TerminalslinkCont)
            {
                foreach (var item in TerminalslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.LeveledItems is IAssetLinkContainer LeveledItemslinkCont)
            {
                foreach (var item in LeveledItemslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.GenericBaseForms is IAssetLinkContainer GenericBaseFormslinkCont)
            {
                foreach (var item in GenericBaseFormslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.LeveledBaseForms.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Weathers.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Cells is IAssetLinkContainer CellslinkCont)
            {
                foreach (var item in CellslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Worldspaces is IAssetLinkContainer WorldspaceslinkCont)
            {
                foreach (var item in WorldspaceslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Quests is IAssetLinkContainer QuestslinkCont)
            {
                foreach (var item in QuestslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.AnimatedObjects is IAssetLinkContainer AnimatedObjectslinkCont)
            {
                foreach (var item in AnimatedObjectslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.EffectShaders is IAssetLinkContainer EffectShaderslinkCont)
            {
                foreach (var item in EffectShaderslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Explosions is IAssetLinkContainer ExplosionslinkCont)
            {
                foreach (var item in ExplosionslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Debris.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.FormLists is IAssetLinkContainer FormListslinkCont)
            {
                foreach (var item in FormListslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Perks.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.BodyParts.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.AddonNodes is IAssetLinkContainer AddonNodeslinkCont)
            {
                foreach (var item in AddonNodeslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.CameraShots.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.MaterialTypes.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Impacts is IAssetLinkContainer ImpactslinkCont)
            {
                foreach (var item in ImpactslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.ArmorAddons is IAssetLinkContainer ArmorAddonslinkCont)
            {
                foreach (var item in ArmorAddonslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Locations is IAssetLinkContainer LocationslinkCont)
            {
                foreach (var item in LocationslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.ArtObjects is IAssetLinkContainer ArtObjectslinkCont)
            {
                foreach (var item in ArtObjectslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.ReferenceGroups is IAssetLinkContainer ReferenceGroupslinkCont)
            {
                foreach (var item in ReferenceGroupslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Layers is IAssetLinkContainer LayerslinkCont)
            {
                foreach (var item in LayerslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.ConstructibleObjects is IAssetLinkContainer ConstructibleObjectslinkCont)
            {
                foreach (var item in ConstructibleObjectslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.ObjectModifications is IAssetLinkContainer ObjectModificationslinkCont)
            {
                foreach (var item in ObjectModificationslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.SnapTemplateNodes is IAssetLinkContainer SnapTemplateNodeslinkCont)
            {
                foreach (var item in SnapTemplateNodeslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.SnapTemplates is IAssetLinkContainer SnapTemplateslinkCont)
            {
                foreach (var item in SnapTemplateslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.GroundCovers is IAssetLinkContainer GroundCoverslinkCont)
            {
                foreach (var item in GroundCoverslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.MorphableObjects.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.SurfaceBlocks is IAssetLinkContainer SurfaceBlockslinkCont)
            {
                foreach (var item in SurfaceBlockslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.SurfacePatterns is IAssetLinkContainer SurfacePatternslinkCont)
            {
                foreach (var item in SurfacePatternslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.SurfaceTrees is IAssetLinkContainer SurfaceTreeslinkCont)
            {
                foreach (var item in SurfaceTreeslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.BoneModifiers is IAssetLinkContainer BoneModifierslinkCont)
            {
                foreach (var item in BoneModifierslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.SnapTemplateBehaviors is IAssetLinkContainer SnapTemplateBehaviorslinkCont)
            {
                foreach (var item in SnapTemplateBehaviorslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Planets is IAssetLinkContainer PlanetslinkCont)
            {
                foreach (var item in PlanetslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.PlanetContentManagerBranchNodes is IAssetLinkContainer PlanetContentManagerBranchNodeslinkCont)
            {
                foreach (var item in PlanetContentManagerBranchNodeslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.PlanetContentManagerContentNodes is IAssetLinkContainer PlanetContentManagerContentNodeslinkCont)
            {
                foreach (var item in PlanetContentManagerContentNodeslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Stars is IAssetLinkContainer StarslinkCont)
            {
                foreach (var item in StarslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.LayeredMaterialSwaps is IAssetLinkContainer LayeredMaterialSwapslinkCont)
            {
                foreach (var item in LayeredMaterialSwapslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.LegendaryItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.TimeOfDays is IAssetLinkContainer TimeOfDayslinkCont)
            {
                foreach (var item in TimeOfDayslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.ActorValueModulations is IAssetLinkContainer ActorValueModulationslinkCont)
            {
                foreach (var item in ActorValueModulationslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Challenges is IAssetLinkContainer ChallengeslinkCont)
            {
                foreach (var item in ChallengeslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        private static partial void RemapInferredAssetLinks(
            IStarfieldMod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            AssetLinkQuery queryCategories);
        
        public void RemapAssetLinks(
            IStarfieldMod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            RemapInferredAssetLinks(obj, mapping, queryCategories);
            obj.Keywords.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LocationReferenceTypes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Globals.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Factions.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.HeadParts.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Races.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LandscapeTextures.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ProjectedDecals.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Activators.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Armors.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Books.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Containers.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Doors.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Lights.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.MiscItems.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Statics.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.StaticCollections.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.PackIns.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.MoveableStatics.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Grasses.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Florae.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Furniture.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Weapons.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Ammunitions.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Npcs.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LeveledNpcs.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LeveledPackIns.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Keys.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Ingestibles.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.IdleMarkers.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.BiomeMarkers.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Notes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Projectiles.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Hazards.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.BendableSplines.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Terminals.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LeveledItems.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.GenericBaseForms.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LeveledBaseForms.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Weathers.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Cells.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Worldspaces.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Quests.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.AnimatedObjects.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.EffectShaders.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Explosions.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Debris.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.FormLists.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Perks.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.BodyParts.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.AddonNodes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.CameraShots.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.MaterialTypes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Impacts.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ArmorAddons.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Locations.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ArtObjects.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ReferenceGroups.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Layers.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ConstructibleObjects.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ObjectModifications.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.SnapTemplateNodes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.SnapTemplates.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.GroundCovers.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.MorphableObjects.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.SurfaceBlocks.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.SurfacePatterns.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.SurfaceTrees.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.BoneModifiers.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.SnapTemplateBehaviors.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Planets.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.PlanetContentManagerBranchNodes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.PlanetContentManagerContentNodes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Stars.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LayeredMaterialSwaps.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LegendaryItems.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.TimeOfDays.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ActorValueModulations.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Challenges.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStarfieldMod item,
            MutagenFrame frame,
            StarfieldRelease release,
            GroupMask? importMask = null)
        {
            PluginUtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                fillTyped: StarfieldModBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class StarfieldModCommon
    {
        public static readonly StarfieldModCommon Instance = new StarfieldModCommon();

        public StarfieldMod.Mask<bool> GetEqualsMask(
            IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StarfieldMod.Mask<bool>(false);
            ((StarfieldModCommon)((IStarfieldModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStarfieldModGetter item,
            IStarfieldModGetter rhs,
            StarfieldMod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Keywords = MaskItemExt.Factory(item.Keywords.GetEqualsMask(rhs.Keywords, include), include);
            ret.FFKW = MaskItemExt.Factory(item.FFKW.GetEqualsMask(rhs.FFKW, include), include);
            ret.LocationReferenceTypes = MaskItemExt.Factory(item.LocationReferenceTypes.GetEqualsMask(rhs.LocationReferenceTypes, include), include);
            ret.Actions = MaskItemExt.Factory(item.Actions.GetEqualsMask(rhs.Actions, include), include);
            ret.Transforms = MaskItemExt.Factory(item.Transforms.GetEqualsMask(rhs.Transforms, include), include);
            ret.TextureSets = MaskItemExt.Factory(item.TextureSets.GetEqualsMask(rhs.TextureSets, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.DamageTypes = MaskItemExt.Factory(item.DamageTypes.GetEqualsMask(rhs.DamageTypes, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
            ret.AffinityEvents = MaskItemExt.Factory(item.AffinityEvents.GetEqualsMask(rhs.AffinityEvents, include), include);
            ret.HeadParts = MaskItemExt.Factory(item.HeadParts.GetEqualsMask(rhs.HeadParts, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.SoundMarkers = MaskItemExt.Factory(item.SoundMarkers.GetEqualsMask(rhs.SoundMarkers, include), include);
            ret.SoundEchoMarkers = MaskItemExt.Factory(item.SoundEchoMarkers.GetEqualsMask(rhs.SoundEchoMarkers, include), include);
            ret.AcousticSpaces = MaskItemExt.Factory(item.AcousticSpaces.GetEqualsMask(rhs.AcousticSpaces, include), include);
            ret.AudioOcclusionPrimitives = MaskItemExt.Factory(item.AudioOcclusionPrimitives.GetEqualsMask(rhs.AudioOcclusionPrimitives, include), include);
            ret.MagicEffects = MaskItemExt.Factory(item.MagicEffects.GetEqualsMask(rhs.MagicEffects, include), include);
            ret.LandscapeTextures = MaskItemExt.Factory(item.LandscapeTextures.GetEqualsMask(rhs.LandscapeTextures, include), include);
            ret.ProjectedDecals = MaskItemExt.Factory(item.ProjectedDecals.GetEqualsMask(rhs.ProjectedDecals, include), include);
            ret.ObjectEffects = MaskItemExt.Factory(item.ObjectEffects.GetEqualsMask(rhs.ObjectEffects, include), include);
            ret.Spells = MaskItemExt.Factory(item.Spells.GetEqualsMask(rhs.Spells, include), include);
            ret.Activators = MaskItemExt.Factory(item.Activators.GetEqualsMask(rhs.Activators, include), include);
            ret.CurveTables = MaskItemExt.Factory(item.CurveTables.GetEqualsMask(rhs.CurveTables, include), include);
            ret.Curve3Ds = MaskItemExt.Factory(item.Curve3Ds.GetEqualsMask(rhs.Curve3Ds, include), include);
            ret.Armors = MaskItemExt.Factory(item.Armors.GetEqualsMask(rhs.Armors, include), include);
            ret.Books = MaskItemExt.Factory(item.Books.GetEqualsMask(rhs.Books, include), include);
            ret.Containers = MaskItemExt.Factory(item.Containers.GetEqualsMask(rhs.Containers, include), include);
            ret.Doors = MaskItemExt.Factory(item.Doors.GetEqualsMask(rhs.Doors, include), include);
            ret.Lights = MaskItemExt.Factory(item.Lights.GetEqualsMask(rhs.Lights, include), include);
            ret.MiscItems = MaskItemExt.Factory(item.MiscItems.GetEqualsMask(rhs.MiscItems, include), include);
            ret.Statics = MaskItemExt.Factory(item.Statics.GetEqualsMask(rhs.Statics, include), include);
            ret.StaticCollections = MaskItemExt.Factory(item.StaticCollections.GetEqualsMask(rhs.StaticCollections, include), include);
            ret.PackIns = MaskItemExt.Factory(item.PackIns.GetEqualsMask(rhs.PackIns, include), include);
            ret.MoveableStatics = MaskItemExt.Factory(item.MoveableStatics.GetEqualsMask(rhs.MoveableStatics, include), include);
            ret.Grasses = MaskItemExt.Factory(item.Grasses.GetEqualsMask(rhs.Grasses, include), include);
            ret.Florae = MaskItemExt.Factory(item.Florae.GetEqualsMask(rhs.Florae, include), include);
            ret.Furniture = MaskItemExt.Factory(item.Furniture.GetEqualsMask(rhs.Furniture, include), include);
            ret.Weapons = MaskItemExt.Factory(item.Weapons.GetEqualsMask(rhs.Weapons, include), include);
            ret.Ammunitions = MaskItemExt.Factory(item.Ammunitions.GetEqualsMask(rhs.Ammunitions, include), include);
            ret.Npcs = MaskItemExt.Factory(item.Npcs.GetEqualsMask(rhs.Npcs, include), include);
            ret.LeveledNpcs = MaskItemExt.Factory(item.LeveledNpcs.GetEqualsMask(rhs.LeveledNpcs, include), include);
            ret.LeveledPackIns = MaskItemExt.Factory(item.LeveledPackIns.GetEqualsMask(rhs.LeveledPackIns, include), include);
            ret.Keys = MaskItemExt.Factory(item.Keys.GetEqualsMask(rhs.Keys, include), include);
            ret.Ingestibles = MaskItemExt.Factory(item.Ingestibles.GetEqualsMask(rhs.Ingestibles, include), include);
            ret.IdleMarkers = MaskItemExt.Factory(item.IdleMarkers.GetEqualsMask(rhs.IdleMarkers, include), include);
            ret.BiomeMarkers = MaskItemExt.Factory(item.BiomeMarkers.GetEqualsMask(rhs.BiomeMarkers, include), include);
            ret.Notes = MaskItemExt.Factory(item.Notes.GetEqualsMask(rhs.Notes, include), include);
            ret.Projectiles = MaskItemExt.Factory(item.Projectiles.GetEqualsMask(rhs.Projectiles, include), include);
            ret.Hazards = MaskItemExt.Factory(item.Hazards.GetEqualsMask(rhs.Hazards, include), include);
            ret.BendableSplines = MaskItemExt.Factory(item.BendableSplines.GetEqualsMask(rhs.BendableSplines, include), include);
            ret.Terminals = MaskItemExt.Factory(item.Terminals.GetEqualsMask(rhs.Terminals, include), include);
            ret.LeveledItems = MaskItemExt.Factory(item.LeveledItems.GetEqualsMask(rhs.LeveledItems, include), include);
            ret.GenericBaseFormTemplates = MaskItemExt.Factory(item.GenericBaseFormTemplates.GetEqualsMask(rhs.GenericBaseFormTemplates, include), include);
            ret.GenericBaseForms = MaskItemExt.Factory(item.GenericBaseForms.GetEqualsMask(rhs.GenericBaseForms, include), include);
            ret.LeveledBaseForms = MaskItemExt.Factory(item.LeveledBaseForms.GetEqualsMask(rhs.LeveledBaseForms, include), include);
            ret.Weathers = MaskItemExt.Factory(item.Weathers.GetEqualsMask(rhs.Weathers, include), include);
            ret.WeatherSettings = MaskItemExt.Factory(item.WeatherSettings.GetEqualsMask(rhs.WeatherSettings, include), include);
            ret.Climates = MaskItemExt.Factory(item.Climates.GetEqualsMask(rhs.Climates, include), include);
            ret.ShaderParticleGeometries = MaskItemExt.Factory(item.ShaderParticleGeometries.GetEqualsMask(rhs.ShaderParticleGeometries, include), include);
            ret.Regions = MaskItemExt.Factory(item.Regions.GetEqualsMask(rhs.Regions, include), include);
            ret.NavigationMeshInfoMaps = MaskItemExt.Factory(item.NavigationMeshInfoMaps.GetEqualsMask(rhs.NavigationMeshInfoMaps, include), include);
            ret.Cells = MaskItemExt.Factory(item.Cells.GetEqualsMask(rhs.Cells, include), include);
            ret.Worldspaces = MaskItemExt.Factory(item.Worldspaces.GetEqualsMask(rhs.Worldspaces, include), include);
            ret.Quests = MaskItemExt.Factory(item.Quests.GetEqualsMask(rhs.Quests, include), include);
            ret.IdleAnimations = MaskItemExt.Factory(item.IdleAnimations.GetEqualsMask(rhs.IdleAnimations, include), include);
            ret.Packages = MaskItemExt.Factory(item.Packages.GetEqualsMask(rhs.Packages, include), include);
            ret.CombatStyles = MaskItemExt.Factory(item.CombatStyles.GetEqualsMask(rhs.CombatStyles, include), include);
            ret.LoadScreens = MaskItemExt.Factory(item.LoadScreens.GetEqualsMask(rhs.LoadScreens, include), include);
            ret.AnimatedObjects = MaskItemExt.Factory(item.AnimatedObjects.GetEqualsMask(rhs.AnimatedObjects, include), include);
            ret.Waters = MaskItemExt.Factory(item.Waters.GetEqualsMask(rhs.Waters, include), include);
            ret.EffectShaders = MaskItemExt.Factory(item.EffectShaders.GetEqualsMask(rhs.EffectShaders, include), include);
            ret.Explosions = MaskItemExt.Factory(item.Explosions.GetEqualsMask(rhs.Explosions, include), include);
            ret.Debris = MaskItemExt.Factory(item.Debris.GetEqualsMask(rhs.Debris, include), include);
            ret.ImageSpaces = MaskItemExt.Factory(item.ImageSpaces.GetEqualsMask(rhs.ImageSpaces, include), include);
            ret.ImageSpaceAdapters = MaskItemExt.Factory(item.ImageSpaceAdapters.GetEqualsMask(rhs.ImageSpaceAdapters, include), include);
            ret.FormLists = MaskItemExt.Factory(item.FormLists.GetEqualsMask(rhs.FormLists, include), include);
            ret.Perks = MaskItemExt.Factory(item.Perks.GetEqualsMask(rhs.Perks, include), include);
            ret.BodyParts = MaskItemExt.Factory(item.BodyParts.GetEqualsMask(rhs.BodyParts, include), include);
            ret.AddonNodes = MaskItemExt.Factory(item.AddonNodes.GetEqualsMask(rhs.AddonNodes, include), include);
            ret.ActorValueInformation = MaskItemExt.Factory(item.ActorValueInformation.GetEqualsMask(rhs.ActorValueInformation, include), include);
            ret.CameraShots = MaskItemExt.Factory(item.CameraShots.GetEqualsMask(rhs.CameraShots, include), include);
            ret.CameraPaths = MaskItemExt.Factory(item.CameraPaths.GetEqualsMask(rhs.CameraPaths, include), include);
            ret.VoiceTypes = MaskItemExt.Factory(item.VoiceTypes.GetEqualsMask(rhs.VoiceTypes, include), include);
            ret.MaterialTypes = MaskItemExt.Factory(item.MaterialTypes.GetEqualsMask(rhs.MaterialTypes, include), include);
            ret.Impacts = MaskItemExt.Factory(item.Impacts.GetEqualsMask(rhs.Impacts, include), include);
            ret.ImpactDataSets = MaskItemExt.Factory(item.ImpactDataSets.GetEqualsMask(rhs.ImpactDataSets, include), include);
            ret.ArmorAddons = MaskItemExt.Factory(item.ArmorAddons.GetEqualsMask(rhs.ArmorAddons, include), include);
            ret.Locations = MaskItemExt.Factory(item.Locations.GetEqualsMask(rhs.Locations, include), include);
            ret.Messages = MaskItemExt.Factory(item.Messages.GetEqualsMask(rhs.Messages, include), include);
            ret.DefaultObjectManagers = MaskItemExt.Factory(item.DefaultObjectManagers.GetEqualsMask(rhs.DefaultObjectManagers, include), include);
            ret.DefaultObjects = MaskItemExt.Factory(item.DefaultObjects.GetEqualsMask(rhs.DefaultObjects, include), include);
            ret.LightingTemplates = MaskItemExt.Factory(item.LightingTemplates.GetEqualsMask(rhs.LightingTemplates, include), include);
            ret.MusicTypes = MaskItemExt.Factory(item.MusicTypes.GetEqualsMask(rhs.MusicTypes, include), include);
            ret.Footsteps = MaskItemExt.Factory(item.Footsteps.GetEqualsMask(rhs.Footsteps, include), include);
            ret.FootstepSets = MaskItemExt.Factory(item.FootstepSets.GetEqualsMask(rhs.FootstepSets, include), include);
            ret.StoryManagerBranchNodes = MaskItemExt.Factory(item.StoryManagerBranchNodes.GetEqualsMask(rhs.StoryManagerBranchNodes, include), include);
            ret.StoryManagerQuestNodes = MaskItemExt.Factory(item.StoryManagerQuestNodes.GetEqualsMask(rhs.StoryManagerQuestNodes, include), include);
            ret.StoryManagerEventNodes = MaskItemExt.Factory(item.StoryManagerEventNodes.GetEqualsMask(rhs.StoryManagerEventNodes, include), include);
            ret.MusicTracks = MaskItemExt.Factory(item.MusicTracks.GetEqualsMask(rhs.MusicTracks, include), include);
            ret.EquipTypes = MaskItemExt.Factory(item.EquipTypes.GetEqualsMask(rhs.EquipTypes, include), include);
            ret.Outfits = MaskItemExt.Factory(item.Outfits.GetEqualsMask(rhs.Outfits, include), include);
            ret.ArtObjects = MaskItemExt.Factory(item.ArtObjects.GetEqualsMask(rhs.ArtObjects, include), include);
            ret.MovementTypes = MaskItemExt.Factory(item.MovementTypes.GetEqualsMask(rhs.MovementTypes, include), include);
            ret.CollisionLayers = MaskItemExt.Factory(item.CollisionLayers.GetEqualsMask(rhs.CollisionLayers, include), include);
            ret.Colors = MaskItemExt.Factory(item.Colors.GetEqualsMask(rhs.Colors, include), include);
            ret.ReverbParameters = MaskItemExt.Factory(item.ReverbParameters.GetEqualsMask(rhs.ReverbParameters, include), include);
            ret.ReferenceGroups = MaskItemExt.Factory(item.ReferenceGroups.GetEqualsMask(rhs.ReferenceGroups, include), include);
            ret.AimModels = MaskItemExt.Factory(item.AimModels.GetEqualsMask(rhs.AimModels, include), include);
            ret.AimAssistModels = MaskItemExt.Factory(item.AimAssistModels.GetEqualsMask(rhs.AimAssistModels, include), include);
            ret.MeleeAimAssistModels = MaskItemExt.Factory(item.MeleeAimAssistModels.GetEqualsMask(rhs.MeleeAimAssistModels, include), include);
            ret.Layers = MaskItemExt.Factory(item.Layers.GetEqualsMask(rhs.Layers, include), include);
            ret.ConstructibleObjects = MaskItemExt.Factory(item.ConstructibleObjects.GetEqualsMask(rhs.ConstructibleObjects, include), include);
            ret.ObjectModifications = MaskItemExt.Factory(item.ObjectModifications.GetEqualsMask(rhs.ObjectModifications, include), include);
            ret.Zooms = MaskItemExt.Factory(item.Zooms.GetEqualsMask(rhs.Zooms, include), include);
            ret.InstanceNamingRules = MaskItemExt.Factory(item.InstanceNamingRules.GetEqualsMask(rhs.InstanceNamingRules, include), include);
            ret.SoundKeywordMappings = MaskItemExt.Factory(item.SoundKeywordMappings.GetEqualsMask(rhs.SoundKeywordMappings, include), include);
            ret.AttractionRules = MaskItemExt.Factory(item.AttractionRules.GetEqualsMask(rhs.AttractionRules, include), include);
            ret.SceneCollections = MaskItemExt.Factory(item.SceneCollections.GetEqualsMask(rhs.SceneCollections, include), include);
            ret.AnimationSoundTagSets = MaskItemExt.Factory(item.AnimationSoundTagSets.GetEqualsMask(rhs.AnimationSoundTagSets, include), include);
            ret.Resources = MaskItemExt.Factory(item.Resources.GetEqualsMask(rhs.Resources, include), include);
            ret.Biomes = MaskItemExt.Factory(item.Biomes.GetEqualsMask(rhs.Biomes, include), include);
            ret.NavigationMeshObstacleCoverManagers = MaskItemExt.Factory(item.NavigationMeshObstacleCoverManagers.GetEqualsMask(rhs.NavigationMeshObstacleCoverManagers, include), include);
            ret.LensFlares = MaskItemExt.Factory(item.LensFlares.GetEqualsMask(rhs.LensFlares, include), include);
            ret.ObjectVisibilityManagers = MaskItemExt.Factory(item.ObjectVisibilityManagers.GetEqualsMask(rhs.ObjectVisibilityManagers, include), include);
            ret.SnapTemplateNodes = MaskItemExt.Factory(item.SnapTemplateNodes.GetEqualsMask(rhs.SnapTemplateNodes, include), include);
            ret.SnapTemplates = MaskItemExt.Factory(item.SnapTemplates.GetEqualsMask(rhs.SnapTemplates, include), include);
            ret.GroundCovers = MaskItemExt.Factory(item.GroundCovers.GetEqualsMask(rhs.GroundCovers, include), include);
            ret.MorphableObjects = MaskItemExt.Factory(item.MorphableObjects.GetEqualsMask(rhs.MorphableObjects, include), include);
            ret.Traversals = MaskItemExt.Factory(item.Traversals.GetEqualsMask(rhs.Traversals, include), include);
            ret.ResourceGenerationData = MaskItemExt.Factory(item.ResourceGenerationData.GetEqualsMask(rhs.ResourceGenerationData, include), include);
            ret.BiomeSwaps = MaskItemExt.Factory(item.BiomeSwaps.GetEqualsMask(rhs.BiomeSwaps, include), include);
            ret.Atmospheres = MaskItemExt.Factory(item.Atmospheres.GetEqualsMask(rhs.Atmospheres, include), include);
            ret.LeveledSpaceCells = MaskItemExt.Factory(item.LeveledSpaceCells.GetEqualsMask(rhs.LeveledSpaceCells, include), include);
            ret.SpeechChallenges = MaskItemExt.Factory(item.SpeechChallenges.GetEqualsMask(rhs.SpeechChallenges, include), include);
            ret.AimAssistPoses = MaskItemExt.Factory(item.AimAssistPoses.GetEqualsMask(rhs.AimAssistPoses, include), include);
            ret.VolumetricLightings = MaskItemExt.Factory(item.VolumetricLightings.GetEqualsMask(rhs.VolumetricLightings, include), include);
            ret.SurfaceBlocks = MaskItemExt.Factory(item.SurfaceBlocks.GetEqualsMask(rhs.SurfaceBlocks, include), include);
            ret.SurfacePatternConfigs = MaskItemExt.Factory(item.SurfacePatternConfigs.GetEqualsMask(rhs.SurfacePatternConfigs, include), include);
            ret.SurfacePatterns = MaskItemExt.Factory(item.SurfacePatterns.GetEqualsMask(rhs.SurfacePatterns, include), include);
            ret.SurfaceTrees = MaskItemExt.Factory(item.SurfaceTrees.GetEqualsMask(rhs.SurfaceTrees, include), include);
            ret.PlanetContentManagerTrees = MaskItemExt.Factory(item.PlanetContentManagerTrees.GetEqualsMask(rhs.PlanetContentManagerTrees, include), include);
            ret.BoneModifiers = MaskItemExt.Factory(item.BoneModifiers.GetEqualsMask(rhs.BoneModifiers, include), include);
            ret.SnapTemplateBehaviors = MaskItemExt.Factory(item.SnapTemplateBehaviors.GetEqualsMask(rhs.SnapTemplateBehaviors, include), include);
            ret.Planets = MaskItemExt.Factory(item.Planets.GetEqualsMask(rhs.Planets, include), include);
            ret.ConditionRecords = MaskItemExt.Factory(item.ConditionRecords.GetEqualsMask(rhs.ConditionRecords, include), include);
            ret.PlanetContentManagerBranchNodes = MaskItemExt.Factory(item.PlanetContentManagerBranchNodes.GetEqualsMask(rhs.PlanetContentManagerBranchNodes, include), include);
            ret.PlanetContentManagerContentNodes = MaskItemExt.Factory(item.PlanetContentManagerContentNodes.GetEqualsMask(rhs.PlanetContentManagerContentNodes, include), include);
            ret.Stars = MaskItemExt.Factory(item.Stars.GetEqualsMask(rhs.Stars, include), include);
            ret.WWiseEventDatas = MaskItemExt.Factory(item.WWiseEventDatas.GetEqualsMask(rhs.WWiseEventDatas, include), include);
            ret.ResearchProjects = MaskItemExt.Factory(item.ResearchProjects.GetEqualsMask(rhs.ResearchProjects, include), include);
            ret.AimOpticalSightMarkers = MaskItemExt.Factory(item.AimOpticalSightMarkers.GetEqualsMask(rhs.AimOpticalSightMarkers, include), include);
            ret.AmbienceSets = MaskItemExt.Factory(item.AmbienceSets.GetEqualsMask(rhs.AmbienceSets, include), include);
            ret.WeaponBarrelModels = MaskItemExt.Factory(item.WeaponBarrelModels.GetEqualsMask(rhs.WeaponBarrelModels, include), include);
            ret.SurfacePatternStyles = MaskItemExt.Factory(item.SurfacePatternStyles.GetEqualsMask(rhs.SurfacePatternStyles, include), include);
            ret.LayeredMaterialSwaps = MaskItemExt.Factory(item.LayeredMaterialSwaps.GetEqualsMask(rhs.LayeredMaterialSwaps, include), include);
            ret.ForceDatas = MaskItemExt.Factory(item.ForceDatas.GetEqualsMask(rhs.ForceDatas, include), include);
            ret.TerminalMenus = MaskItemExt.Factory(item.TerminalMenus.GetEqualsMask(rhs.TerminalMenus, include), include);
            ret.EffectSequences = MaskItemExt.Factory(item.EffectSequences.GetEqualsMask(rhs.EffectSequences, include), include);
            ret.SecondaryDamageLists = MaskItemExt.Factory(item.SecondaryDamageLists.GetEqualsMask(rhs.SecondaryDamageLists, include), include);
            ret.MaterialPaths = MaskItemExt.Factory(item.MaterialPaths.GetEqualsMask(rhs.MaterialPaths, include), include);
            ret.Clouds = MaskItemExt.Factory(item.Clouds.GetEqualsMask(rhs.Clouds, include), include);
            ret.FogVolumes = MaskItemExt.Factory(item.FogVolumes.GetEqualsMask(rhs.FogVolumes, include), include);
            ret.WWiseKeywordMappings = MaskItemExt.Factory(item.WWiseKeywordMappings.GetEqualsMask(rhs.WWiseKeywordMappings, include), include);
            ret.LegendaryItems = MaskItemExt.Factory(item.LegendaryItems.GetEqualsMask(rhs.LegendaryItems, include), include);
            ret.ParticleSystemDefineCollisions = MaskItemExt.Factory(item.ParticleSystemDefineCollisions.GetEqualsMask(rhs.ParticleSystemDefineCollisions, include), include);
            ret.SunPresets = MaskItemExt.Factory(item.SunPresets.GetEqualsMask(rhs.SunPresets, include), include);
            ret.PhotoModeFeatures = MaskItemExt.Factory(item.PhotoModeFeatures.GetEqualsMask(rhs.PhotoModeFeatures, include), include);
            ret.GameplayOptions = MaskItemExt.Factory(item.GameplayOptions.GetEqualsMask(rhs.GameplayOptions, include), include);
            ret.GameplayOptionsGroups = MaskItemExt.Factory(item.GameplayOptionsGroups.GetEqualsMask(rhs.GameplayOptionsGroups, include), include);
            ret.TimeOfDays = MaskItemExt.Factory(item.TimeOfDays.GetEqualsMask(rhs.TimeOfDays, include), include);
            ret.ActorValueModulations = MaskItemExt.Factory(item.ActorValueModulations.GetEqualsMask(rhs.ActorValueModulations, include), include);
            ret.Challenges = MaskItemExt.Factory(item.Challenges.GetEqualsMask(rhs.Challenges, include), include);
            ret.FacialExpressions = MaskItemExt.Factory(item.FacialExpressions.GetEqualsMask(rhs.FacialExpressions, include), include);
            ret.PERS = MaskItemExt.Factory(item.PERS.GetEqualsMask(rhs.PERS, include), include);
        }
        
        public string Print(
            IStarfieldModGetter item,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStarfieldModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"StarfieldMod =>");
            }
            else
            {
                sb.AppendLine($"{name} (StarfieldMod) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStarfieldModGetter item,
            StructuredStringBuilder sb,
            StarfieldMod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.Print(sb, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.Print(sb, "GameSettings");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                item.Keywords?.Print(sb, "Keywords");
            }
            if (printMask?.FFKW?.Overall ?? true)
            {
                item.FFKW?.Print(sb, "FFKW");
            }
            if (printMask?.LocationReferenceTypes?.Overall ?? true)
            {
                item.LocationReferenceTypes?.Print(sb, "LocationReferenceTypes");
            }
            if (printMask?.Actions?.Overall ?? true)
            {
                item.Actions?.Print(sb, "Actions");
            }
            if (printMask?.Transforms?.Overall ?? true)
            {
                item.Transforms?.Print(sb, "Transforms");
            }
            if (printMask?.TextureSets?.Overall ?? true)
            {
                item.TextureSets?.Print(sb, "TextureSets");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.Print(sb, "Globals");
            }
            if (printMask?.DamageTypes?.Overall ?? true)
            {
                item.DamageTypes?.Print(sb, "DamageTypes");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.Print(sb, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.Print(sb, "Factions");
            }
            if (printMask?.AffinityEvents?.Overall ?? true)
            {
                item.AffinityEvents?.Print(sb, "AffinityEvents");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                item.HeadParts?.Print(sb, "HeadParts");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.Print(sb, "Races");
            }
            if (printMask?.SoundMarkers?.Overall ?? true)
            {
                item.SoundMarkers?.Print(sb, "SoundMarkers");
            }
            if (printMask?.SoundEchoMarkers?.Overall ?? true)
            {
                item.SoundEchoMarkers?.Print(sb, "SoundEchoMarkers");
            }
            if (printMask?.AcousticSpaces?.Overall ?? true)
            {
                item.AcousticSpaces?.Print(sb, "AcousticSpaces");
            }
            if (printMask?.AudioOcclusionPrimitives?.Overall ?? true)
            {
                item.AudioOcclusionPrimitives?.Print(sb, "AudioOcclusionPrimitives");
            }
            if (printMask?.MagicEffects?.Overall ?? true)
            {
                item.MagicEffects?.Print(sb, "MagicEffects");
            }
            if (printMask?.LandscapeTextures?.Overall ?? true)
            {
                item.LandscapeTextures?.Print(sb, "LandscapeTextures");
            }
            if (printMask?.ProjectedDecals?.Overall ?? true)
            {
                item.ProjectedDecals?.Print(sb, "ProjectedDecals");
            }
            if (printMask?.ObjectEffects?.Overall ?? true)
            {
                item.ObjectEffects?.Print(sb, "ObjectEffects");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                item.Spells?.Print(sb, "Spells");
            }
            if (printMask?.Activators?.Overall ?? true)
            {
                item.Activators?.Print(sb, "Activators");
            }
            if (printMask?.CurveTables?.Overall ?? true)
            {
                item.CurveTables?.Print(sb, "CurveTables");
            }
            if (printMask?.Curve3Ds?.Overall ?? true)
            {
                item.Curve3Ds?.Print(sb, "Curve3Ds");
            }
            if (printMask?.Armors?.Overall ?? true)
            {
                item.Armors?.Print(sb, "Armors");
            }
            if (printMask?.Books?.Overall ?? true)
            {
                item.Books?.Print(sb, "Books");
            }
            if (printMask?.Containers?.Overall ?? true)
            {
                item.Containers?.Print(sb, "Containers");
            }
            if (printMask?.Doors?.Overall ?? true)
            {
                item.Doors?.Print(sb, "Doors");
            }
            if (printMask?.Lights?.Overall ?? true)
            {
                item.Lights?.Print(sb, "Lights");
            }
            if (printMask?.MiscItems?.Overall ?? true)
            {
                item.MiscItems?.Print(sb, "MiscItems");
            }
            if (printMask?.Statics?.Overall ?? true)
            {
                item.Statics?.Print(sb, "Statics");
            }
            if (printMask?.StaticCollections?.Overall ?? true)
            {
                item.StaticCollections?.Print(sb, "StaticCollections");
            }
            if (printMask?.PackIns?.Overall ?? true)
            {
                item.PackIns?.Print(sb, "PackIns");
            }
            if (printMask?.MoveableStatics?.Overall ?? true)
            {
                item.MoveableStatics?.Print(sb, "MoveableStatics");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                item.Grasses?.Print(sb, "Grasses");
            }
            if (printMask?.Florae?.Overall ?? true)
            {
                item.Florae?.Print(sb, "Florae");
            }
            if (printMask?.Furniture?.Overall ?? true)
            {
                item.Furniture?.Print(sb, "Furniture");
            }
            if (printMask?.Weapons?.Overall ?? true)
            {
                item.Weapons?.Print(sb, "Weapons");
            }
            if (printMask?.Ammunitions?.Overall ?? true)
            {
                item.Ammunitions?.Print(sb, "Ammunitions");
            }
            if (printMask?.Npcs?.Overall ?? true)
            {
                item.Npcs?.Print(sb, "Npcs");
            }
            if (printMask?.LeveledNpcs?.Overall ?? true)
            {
                item.LeveledNpcs?.Print(sb, "LeveledNpcs");
            }
            if (printMask?.LeveledPackIns?.Overall ?? true)
            {
                item.LeveledPackIns?.Print(sb, "LeveledPackIns");
            }
            if (printMask?.Keys?.Overall ?? true)
            {
                item.Keys?.Print(sb, "Keys");
            }
            if (printMask?.Ingestibles?.Overall ?? true)
            {
                item.Ingestibles?.Print(sb, "Ingestibles");
            }
            if (printMask?.IdleMarkers?.Overall ?? true)
            {
                item.IdleMarkers?.Print(sb, "IdleMarkers");
            }
            if (printMask?.BiomeMarkers?.Overall ?? true)
            {
                item.BiomeMarkers?.Print(sb, "BiomeMarkers");
            }
            if (printMask?.Notes?.Overall ?? true)
            {
                item.Notes?.Print(sb, "Notes");
            }
            if (printMask?.Projectiles?.Overall ?? true)
            {
                item.Projectiles?.Print(sb, "Projectiles");
            }
            if (printMask?.Hazards?.Overall ?? true)
            {
                item.Hazards?.Print(sb, "Hazards");
            }
            if (printMask?.BendableSplines?.Overall ?? true)
            {
                item.BendableSplines?.Print(sb, "BendableSplines");
            }
            if (printMask?.Terminals?.Overall ?? true)
            {
                item.Terminals?.Print(sb, "Terminals");
            }
            if (printMask?.LeveledItems?.Overall ?? true)
            {
                item.LeveledItems?.Print(sb, "LeveledItems");
            }
            if (printMask?.GenericBaseFormTemplates?.Overall ?? true)
            {
                item.GenericBaseFormTemplates?.Print(sb, "GenericBaseFormTemplates");
            }
            if (printMask?.GenericBaseForms?.Overall ?? true)
            {
                item.GenericBaseForms?.Print(sb, "GenericBaseForms");
            }
            if (printMask?.LeveledBaseForms?.Overall ?? true)
            {
                item.LeveledBaseForms?.Print(sb, "LeveledBaseForms");
            }
            if (printMask?.Weathers?.Overall ?? true)
            {
                item.Weathers?.Print(sb, "Weathers");
            }
            if (printMask?.WeatherSettings?.Overall ?? true)
            {
                item.WeatherSettings?.Print(sb, "WeatherSettings");
            }
            if (printMask?.Climates?.Overall ?? true)
            {
                item.Climates?.Print(sb, "Climates");
            }
            if (printMask?.ShaderParticleGeometries?.Overall ?? true)
            {
                item.ShaderParticleGeometries?.Print(sb, "ShaderParticleGeometries");
            }
            if (printMask?.Regions?.Overall ?? true)
            {
                item.Regions?.Print(sb, "Regions");
            }
            if (printMask?.NavigationMeshInfoMaps?.Overall ?? true)
            {
                item.NavigationMeshInfoMaps?.Print(sb, "NavigationMeshInfoMaps");
            }
            if (printMask?.Cells?.Overall ?? true)
            {
                item.Cells?.Print(sb, "Cells");
            }
            if (printMask?.Worldspaces?.Overall ?? true)
            {
                item.Worldspaces?.Print(sb, "Worldspaces");
            }
            if (printMask?.Quests?.Overall ?? true)
            {
                item.Quests?.Print(sb, "Quests");
            }
            if (printMask?.IdleAnimations?.Overall ?? true)
            {
                item.IdleAnimations?.Print(sb, "IdleAnimations");
            }
            if (printMask?.Packages?.Overall ?? true)
            {
                item.Packages?.Print(sb, "Packages");
            }
            if (printMask?.CombatStyles?.Overall ?? true)
            {
                item.CombatStyles?.Print(sb, "CombatStyles");
            }
            if (printMask?.LoadScreens?.Overall ?? true)
            {
                item.LoadScreens?.Print(sb, "LoadScreens");
            }
            if (printMask?.AnimatedObjects?.Overall ?? true)
            {
                item.AnimatedObjects?.Print(sb, "AnimatedObjects");
            }
            if (printMask?.Waters?.Overall ?? true)
            {
                item.Waters?.Print(sb, "Waters");
            }
            if (printMask?.EffectShaders?.Overall ?? true)
            {
                item.EffectShaders?.Print(sb, "EffectShaders");
            }
            if (printMask?.Explosions?.Overall ?? true)
            {
                item.Explosions?.Print(sb, "Explosions");
            }
            if (printMask?.Debris?.Overall ?? true)
            {
                item.Debris?.Print(sb, "Debris");
            }
            if (printMask?.ImageSpaces?.Overall ?? true)
            {
                item.ImageSpaces?.Print(sb, "ImageSpaces");
            }
            if (printMask?.ImageSpaceAdapters?.Overall ?? true)
            {
                item.ImageSpaceAdapters?.Print(sb, "ImageSpaceAdapters");
            }
            if (printMask?.FormLists?.Overall ?? true)
            {
                item.FormLists?.Print(sb, "FormLists");
            }
            if (printMask?.Perks?.Overall ?? true)
            {
                item.Perks?.Print(sb, "Perks");
            }
            if (printMask?.BodyParts?.Overall ?? true)
            {
                item.BodyParts?.Print(sb, "BodyParts");
            }
            if (printMask?.AddonNodes?.Overall ?? true)
            {
                item.AddonNodes?.Print(sb, "AddonNodes");
            }
            if (printMask?.ActorValueInformation?.Overall ?? true)
            {
                item.ActorValueInformation?.Print(sb, "ActorValueInformation");
            }
            if (printMask?.CameraShots?.Overall ?? true)
            {
                item.CameraShots?.Print(sb, "CameraShots");
            }
            if (printMask?.CameraPaths?.Overall ?? true)
            {
                item.CameraPaths?.Print(sb, "CameraPaths");
            }
            if (printMask?.VoiceTypes?.Overall ?? true)
            {
                item.VoiceTypes?.Print(sb, "VoiceTypes");
            }
            if (printMask?.MaterialTypes?.Overall ?? true)
            {
                item.MaterialTypes?.Print(sb, "MaterialTypes");
            }
            if (printMask?.Impacts?.Overall ?? true)
            {
                item.Impacts?.Print(sb, "Impacts");
            }
            if (printMask?.ImpactDataSets?.Overall ?? true)
            {
                item.ImpactDataSets?.Print(sb, "ImpactDataSets");
            }
            if (printMask?.ArmorAddons?.Overall ?? true)
            {
                item.ArmorAddons?.Print(sb, "ArmorAddons");
            }
            if (printMask?.Locations?.Overall ?? true)
            {
                item.Locations?.Print(sb, "Locations");
            }
            if (printMask?.Messages?.Overall ?? true)
            {
                item.Messages?.Print(sb, "Messages");
            }
            if (printMask?.DefaultObjectManagers?.Overall ?? true)
            {
                item.DefaultObjectManagers?.Print(sb, "DefaultObjectManagers");
            }
            if (printMask?.DefaultObjects?.Overall ?? true)
            {
                item.DefaultObjects?.Print(sb, "DefaultObjects");
            }
            if (printMask?.LightingTemplates?.Overall ?? true)
            {
                item.LightingTemplates?.Print(sb, "LightingTemplates");
            }
            if (printMask?.MusicTypes?.Overall ?? true)
            {
                item.MusicTypes?.Print(sb, "MusicTypes");
            }
            if (printMask?.Footsteps?.Overall ?? true)
            {
                item.Footsteps?.Print(sb, "Footsteps");
            }
            if (printMask?.FootstepSets?.Overall ?? true)
            {
                item.FootstepSets?.Print(sb, "FootstepSets");
            }
            if (printMask?.StoryManagerBranchNodes?.Overall ?? true)
            {
                item.StoryManagerBranchNodes?.Print(sb, "StoryManagerBranchNodes");
            }
            if (printMask?.StoryManagerQuestNodes?.Overall ?? true)
            {
                item.StoryManagerQuestNodes?.Print(sb, "StoryManagerQuestNodes");
            }
            if (printMask?.StoryManagerEventNodes?.Overall ?? true)
            {
                item.StoryManagerEventNodes?.Print(sb, "StoryManagerEventNodes");
            }
            if (printMask?.MusicTracks?.Overall ?? true)
            {
                item.MusicTracks?.Print(sb, "MusicTracks");
            }
            if (printMask?.EquipTypes?.Overall ?? true)
            {
                item.EquipTypes?.Print(sb, "EquipTypes");
            }
            if (printMask?.Outfits?.Overall ?? true)
            {
                item.Outfits?.Print(sb, "Outfits");
            }
            if (printMask?.ArtObjects?.Overall ?? true)
            {
                item.ArtObjects?.Print(sb, "ArtObjects");
            }
            if (printMask?.MovementTypes?.Overall ?? true)
            {
                item.MovementTypes?.Print(sb, "MovementTypes");
            }
            if (printMask?.CollisionLayers?.Overall ?? true)
            {
                item.CollisionLayers?.Print(sb, "CollisionLayers");
            }
            if (printMask?.Colors?.Overall ?? true)
            {
                item.Colors?.Print(sb, "Colors");
            }
            if (printMask?.ReverbParameters?.Overall ?? true)
            {
                item.ReverbParameters?.Print(sb, "ReverbParameters");
            }
            if (printMask?.ReferenceGroups?.Overall ?? true)
            {
                item.ReferenceGroups?.Print(sb, "ReferenceGroups");
            }
            if (printMask?.AimModels?.Overall ?? true)
            {
                item.AimModels?.Print(sb, "AimModels");
            }
            if (printMask?.AimAssistModels?.Overall ?? true)
            {
                item.AimAssistModels?.Print(sb, "AimAssistModels");
            }
            if (printMask?.MeleeAimAssistModels?.Overall ?? true)
            {
                item.MeleeAimAssistModels?.Print(sb, "MeleeAimAssistModels");
            }
            if (printMask?.Layers?.Overall ?? true)
            {
                item.Layers?.Print(sb, "Layers");
            }
            if (printMask?.ConstructibleObjects?.Overall ?? true)
            {
                item.ConstructibleObjects?.Print(sb, "ConstructibleObjects");
            }
            if (printMask?.ObjectModifications?.Overall ?? true)
            {
                item.ObjectModifications?.Print(sb, "ObjectModifications");
            }
            if (printMask?.Zooms?.Overall ?? true)
            {
                item.Zooms?.Print(sb, "Zooms");
            }
            if (printMask?.InstanceNamingRules?.Overall ?? true)
            {
                item.InstanceNamingRules?.Print(sb, "InstanceNamingRules");
            }
            if (printMask?.SoundKeywordMappings?.Overall ?? true)
            {
                item.SoundKeywordMappings?.Print(sb, "SoundKeywordMappings");
            }
            if (printMask?.AttractionRules?.Overall ?? true)
            {
                item.AttractionRules?.Print(sb, "AttractionRules");
            }
            if (printMask?.SceneCollections?.Overall ?? true)
            {
                item.SceneCollections?.Print(sb, "SceneCollections");
            }
            if (printMask?.AnimationSoundTagSets?.Overall ?? true)
            {
                item.AnimationSoundTagSets?.Print(sb, "AnimationSoundTagSets");
            }
            if (printMask?.Resources?.Overall ?? true)
            {
                item.Resources?.Print(sb, "Resources");
            }
            if (printMask?.Biomes?.Overall ?? true)
            {
                item.Biomes?.Print(sb, "Biomes");
            }
            if (printMask?.NavigationMeshObstacleCoverManagers?.Overall ?? true)
            {
                item.NavigationMeshObstacleCoverManagers?.Print(sb, "NavigationMeshObstacleCoverManagers");
            }
            if (printMask?.LensFlares?.Overall ?? true)
            {
                item.LensFlares?.Print(sb, "LensFlares");
            }
            if (printMask?.ObjectVisibilityManagers?.Overall ?? true)
            {
                item.ObjectVisibilityManagers?.Print(sb, "ObjectVisibilityManagers");
            }
            if (printMask?.SnapTemplateNodes?.Overall ?? true)
            {
                item.SnapTemplateNodes?.Print(sb, "SnapTemplateNodes");
            }
            if (printMask?.SnapTemplates?.Overall ?? true)
            {
                item.SnapTemplates?.Print(sb, "SnapTemplates");
            }
            if (printMask?.GroundCovers?.Overall ?? true)
            {
                item.GroundCovers?.Print(sb, "GroundCovers");
            }
            if (printMask?.MorphableObjects?.Overall ?? true)
            {
                item.MorphableObjects?.Print(sb, "MorphableObjects");
            }
            if (printMask?.Traversals?.Overall ?? true)
            {
                item.Traversals?.Print(sb, "Traversals");
            }
            if (printMask?.ResourceGenerationData?.Overall ?? true)
            {
                item.ResourceGenerationData?.Print(sb, "ResourceGenerationData");
            }
            if (printMask?.BiomeSwaps?.Overall ?? true)
            {
                item.BiomeSwaps?.Print(sb, "BiomeSwaps");
            }
            if (printMask?.Atmospheres?.Overall ?? true)
            {
                item.Atmospheres?.Print(sb, "Atmospheres");
            }
            if (printMask?.LeveledSpaceCells?.Overall ?? true)
            {
                item.LeveledSpaceCells?.Print(sb, "LeveledSpaceCells");
            }
            if (printMask?.SpeechChallenges?.Overall ?? true)
            {
                item.SpeechChallenges?.Print(sb, "SpeechChallenges");
            }
            if (printMask?.AimAssistPoses?.Overall ?? true)
            {
                item.AimAssistPoses?.Print(sb, "AimAssistPoses");
            }
            if (printMask?.VolumetricLightings?.Overall ?? true)
            {
                item.VolumetricLightings?.Print(sb, "VolumetricLightings");
            }
            if (printMask?.SurfaceBlocks?.Overall ?? true)
            {
                item.SurfaceBlocks?.Print(sb, "SurfaceBlocks");
            }
            if (printMask?.SurfacePatternConfigs?.Overall ?? true)
            {
                item.SurfacePatternConfigs?.Print(sb, "SurfacePatternConfigs");
            }
            if (printMask?.SurfacePatterns?.Overall ?? true)
            {
                item.SurfacePatterns?.Print(sb, "SurfacePatterns");
            }
            if (printMask?.SurfaceTrees?.Overall ?? true)
            {
                item.SurfaceTrees?.Print(sb, "SurfaceTrees");
            }
            if (printMask?.PlanetContentManagerTrees?.Overall ?? true)
            {
                item.PlanetContentManagerTrees?.Print(sb, "PlanetContentManagerTrees");
            }
            if (printMask?.BoneModifiers?.Overall ?? true)
            {
                item.BoneModifiers?.Print(sb, "BoneModifiers");
            }
            if (printMask?.SnapTemplateBehaviors?.Overall ?? true)
            {
                item.SnapTemplateBehaviors?.Print(sb, "SnapTemplateBehaviors");
            }
            if (printMask?.Planets?.Overall ?? true)
            {
                item.Planets?.Print(sb, "Planets");
            }
            if (printMask?.ConditionRecords?.Overall ?? true)
            {
                item.ConditionRecords?.Print(sb, "ConditionRecords");
            }
            if (printMask?.PlanetContentManagerBranchNodes?.Overall ?? true)
            {
                item.PlanetContentManagerBranchNodes?.Print(sb, "PlanetContentManagerBranchNodes");
            }
            if (printMask?.PlanetContentManagerContentNodes?.Overall ?? true)
            {
                item.PlanetContentManagerContentNodes?.Print(sb, "PlanetContentManagerContentNodes");
            }
            if (printMask?.Stars?.Overall ?? true)
            {
                item.Stars?.Print(sb, "Stars");
            }
            if (printMask?.WWiseEventDatas?.Overall ?? true)
            {
                item.WWiseEventDatas?.Print(sb, "WWiseEventDatas");
            }
            if (printMask?.ResearchProjects?.Overall ?? true)
            {
                item.ResearchProjects?.Print(sb, "ResearchProjects");
            }
            if (printMask?.AimOpticalSightMarkers?.Overall ?? true)
            {
                item.AimOpticalSightMarkers?.Print(sb, "AimOpticalSightMarkers");
            }
            if (printMask?.AmbienceSets?.Overall ?? true)
            {
                item.AmbienceSets?.Print(sb, "AmbienceSets");
            }
            if (printMask?.WeaponBarrelModels?.Overall ?? true)
            {
                item.WeaponBarrelModels?.Print(sb, "WeaponBarrelModels");
            }
            if (printMask?.SurfacePatternStyles?.Overall ?? true)
            {
                item.SurfacePatternStyles?.Print(sb, "SurfacePatternStyles");
            }
            if (printMask?.LayeredMaterialSwaps?.Overall ?? true)
            {
                item.LayeredMaterialSwaps?.Print(sb, "LayeredMaterialSwaps");
            }
            if (printMask?.ForceDatas?.Overall ?? true)
            {
                item.ForceDatas?.Print(sb, "ForceDatas");
            }
            if (printMask?.TerminalMenus?.Overall ?? true)
            {
                item.TerminalMenus?.Print(sb, "TerminalMenus");
            }
            if (printMask?.EffectSequences?.Overall ?? true)
            {
                item.EffectSequences?.Print(sb, "EffectSequences");
            }
            if (printMask?.SecondaryDamageLists?.Overall ?? true)
            {
                item.SecondaryDamageLists?.Print(sb, "SecondaryDamageLists");
            }
            if (printMask?.MaterialPaths?.Overall ?? true)
            {
                item.MaterialPaths?.Print(sb, "MaterialPaths");
            }
            if (printMask?.Clouds?.Overall ?? true)
            {
                item.Clouds?.Print(sb, "Clouds");
            }
            if (printMask?.FogVolumes?.Overall ?? true)
            {
                item.FogVolumes?.Print(sb, "FogVolumes");
            }
            if (printMask?.WWiseKeywordMappings?.Overall ?? true)
            {
                item.WWiseKeywordMappings?.Print(sb, "WWiseKeywordMappings");
            }
            if (printMask?.LegendaryItems?.Overall ?? true)
            {
                item.LegendaryItems?.Print(sb, "LegendaryItems");
            }
            if (printMask?.ParticleSystemDefineCollisions?.Overall ?? true)
            {
                item.ParticleSystemDefineCollisions?.Print(sb, "ParticleSystemDefineCollisions");
            }
            if (printMask?.SunPresets?.Overall ?? true)
            {
                item.SunPresets?.Print(sb, "SunPresets");
            }
            if (printMask?.PhotoModeFeatures?.Overall ?? true)
            {
                item.PhotoModeFeatures?.Print(sb, "PhotoModeFeatures");
            }
            if (printMask?.GameplayOptions?.Overall ?? true)
            {
                item.GameplayOptions?.Print(sb, "GameplayOptions");
            }
            if (printMask?.GameplayOptionsGroups?.Overall ?? true)
            {
                item.GameplayOptionsGroups?.Print(sb, "GameplayOptionsGroups");
            }
            if (printMask?.TimeOfDays?.Overall ?? true)
            {
                item.TimeOfDays?.Print(sb, "TimeOfDays");
            }
            if (printMask?.ActorValueModulations?.Overall ?? true)
            {
                item.ActorValueModulations?.Print(sb, "ActorValueModulations");
            }
            if (printMask?.Challenges?.Overall ?? true)
            {
                item.Challenges?.Print(sb, "Challenges");
            }
            if (printMask?.FacialExpressions?.Overall ?? true)
            {
                item.FacialExpressions?.Print(sb, "FacialExpressions");
            }
            if (printMask?.PERS?.Overall ?? true)
            {
                item.PERS?.Print(sb, "PERS");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStarfieldModGetter? lhs,
            IStarfieldModGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ModHeader) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ModHeader, rhs.ModHeader, out var lhsModHeader, out var rhsModHeader, out var isModHeaderEqual))
                {
                    if (!((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)lhsModHeader).CommonInstance()!).Equals(lhsModHeader, rhsModHeader, equalsMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ModHeader))) return false;
                }
                else if (!isModHeaderEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GameSettings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GameSettings, rhs.GameSettings, out var lhsGameSettings, out var rhsGameSettings, out var isGameSettingsEqual))
                {
                    if (!object.Equals(lhsGameSettings, rhsGameSettings)) return false;
                }
                else if (!isGameSettingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Keywords) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Keywords, rhs.Keywords, out var lhsKeywords, out var rhsKeywords, out var isKeywordsEqual))
                {
                    if (!object.Equals(lhsKeywords, rhsKeywords)) return false;
                }
                else if (!isKeywordsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FFKW) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FFKW, rhs.FFKW, out var lhsFFKW, out var rhsFFKW, out var isFFKWEqual))
                {
                    if (!object.Equals(lhsFFKW, rhsFFKW)) return false;
                }
                else if (!isFFKWEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LocationReferenceTypes, rhs.LocationReferenceTypes, out var lhsLocationReferenceTypes, out var rhsLocationReferenceTypes, out var isLocationReferenceTypesEqual))
                {
                    if (!object.Equals(lhsLocationReferenceTypes, rhsLocationReferenceTypes)) return false;
                }
                else if (!isLocationReferenceTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Actions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Actions, rhs.Actions, out var lhsActions, out var rhsActions, out var isActionsEqual))
                {
                    if (!object.Equals(lhsActions, rhsActions)) return false;
                }
                else if (!isActionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Transforms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Transforms, rhs.Transforms, out var lhsTransforms, out var rhsTransforms, out var isTransformsEqual))
                {
                    if (!object.Equals(lhsTransforms, rhsTransforms)) return false;
                }
                else if (!isTransformsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.TextureSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TextureSets, rhs.TextureSets, out var lhsTextureSets, out var rhsTextureSets, out var isTextureSetsEqual))
                {
                    if (!object.Equals(lhsTextureSets, rhsTextureSets)) return false;
                }
                else if (!isTextureSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Globals) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Globals, rhs.Globals, out var lhsGlobals, out var rhsGlobals, out var isGlobalsEqual))
                {
                    if (!object.Equals(lhsGlobals, rhsGlobals)) return false;
                }
                else if (!isGlobalsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.DamageTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DamageTypes, rhs.DamageTypes, out var lhsDamageTypes, out var rhsDamageTypes, out var isDamageTypesEqual))
                {
                    if (!object.Equals(lhsDamageTypes, rhsDamageTypes)) return false;
                }
                else if (!isDamageTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Classes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Classes, rhs.Classes, out var lhsClasses, out var rhsClasses, out var isClassesEqual))
                {
                    if (!object.Equals(lhsClasses, rhsClasses)) return false;
                }
                else if (!isClassesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Factions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Factions, rhs.Factions, out var lhsFactions, out var rhsFactions, out var isFactionsEqual))
                {
                    if (!object.Equals(lhsFactions, rhsFactions)) return false;
                }
                else if (!isFactionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AffinityEvents) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AffinityEvents, rhs.AffinityEvents, out var lhsAffinityEvents, out var rhsAffinityEvents, out var isAffinityEventsEqual))
                {
                    if (!object.Equals(lhsAffinityEvents, rhsAffinityEvents)) return false;
                }
                else if (!isAffinityEventsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.HeadParts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HeadParts, rhs.HeadParts, out var lhsHeadParts, out var rhsHeadParts, out var isHeadPartsEqual))
                {
                    if (!object.Equals(lhsHeadParts, rhsHeadParts)) return false;
                }
                else if (!isHeadPartsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Races) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Races, rhs.Races, out var lhsRaces, out var rhsRaces, out var isRacesEqual))
                {
                    if (!object.Equals(lhsRaces, rhsRaces)) return false;
                }
                else if (!isRacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SoundMarkers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundMarkers, rhs.SoundMarkers, out var lhsSoundMarkers, out var rhsSoundMarkers, out var isSoundMarkersEqual))
                {
                    if (!object.Equals(lhsSoundMarkers, rhsSoundMarkers)) return false;
                }
                else if (!isSoundMarkersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SoundEchoMarkers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundEchoMarkers, rhs.SoundEchoMarkers, out var lhsSoundEchoMarkers, out var rhsSoundEchoMarkers, out var isSoundEchoMarkersEqual))
                {
                    if (!object.Equals(lhsSoundEchoMarkers, rhsSoundEchoMarkers)) return false;
                }
                else if (!isSoundEchoMarkersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AcousticSpaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AcousticSpaces, rhs.AcousticSpaces, out var lhsAcousticSpaces, out var rhsAcousticSpaces, out var isAcousticSpacesEqual))
                {
                    if (!object.Equals(lhsAcousticSpaces, rhsAcousticSpaces)) return false;
                }
                else if (!isAcousticSpacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AudioOcclusionPrimitives, rhs.AudioOcclusionPrimitives, out var lhsAudioOcclusionPrimitives, out var rhsAudioOcclusionPrimitives, out var isAudioOcclusionPrimitivesEqual))
                {
                    if (!object.Equals(lhsAudioOcclusionPrimitives, rhsAudioOcclusionPrimitives)) return false;
                }
                else if (!isAudioOcclusionPrimitivesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MagicEffects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MagicEffects, rhs.MagicEffects, out var lhsMagicEffects, out var rhsMagicEffects, out var isMagicEffectsEqual))
                {
                    if (!object.Equals(lhsMagicEffects, rhsMagicEffects)) return false;
                }
                else if (!isMagicEffectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LandscapeTextures) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LandscapeTextures, rhs.LandscapeTextures, out var lhsLandscapeTextures, out var rhsLandscapeTextures, out var isLandscapeTexturesEqual))
                {
                    if (!object.Equals(lhsLandscapeTextures, rhsLandscapeTextures)) return false;
                }
                else if (!isLandscapeTexturesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ProjectedDecals) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ProjectedDecals, rhs.ProjectedDecals, out var lhsProjectedDecals, out var rhsProjectedDecals, out var isProjectedDecalsEqual))
                {
                    if (!object.Equals(lhsProjectedDecals, rhsProjectedDecals)) return false;
                }
                else if (!isProjectedDecalsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ObjectEffects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectEffects, rhs.ObjectEffects, out var lhsObjectEffects, out var rhsObjectEffects, out var isObjectEffectsEqual))
                {
                    if (!object.Equals(lhsObjectEffects, rhsObjectEffects)) return false;
                }
                else if (!isObjectEffectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Spells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Spells, rhs.Spells, out var lhsSpells, out var rhsSpells, out var isSpellsEqual))
                {
                    if (!object.Equals(lhsSpells, rhsSpells)) return false;
                }
                else if (!isSpellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Activators) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Activators, rhs.Activators, out var lhsActivators, out var rhsActivators, out var isActivatorsEqual))
                {
                    if (!object.Equals(lhsActivators, rhsActivators)) return false;
                }
                else if (!isActivatorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.CurveTables) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CurveTables, rhs.CurveTables, out var lhsCurveTables, out var rhsCurveTables, out var isCurveTablesEqual))
                {
                    if (!object.Equals(lhsCurveTables, rhsCurveTables)) return false;
                }
                else if (!isCurveTablesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Curve3Ds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Curve3Ds, rhs.Curve3Ds, out var lhsCurve3Ds, out var rhsCurve3Ds, out var isCurve3DsEqual))
                {
                    if (!object.Equals(lhsCurve3Ds, rhsCurve3Ds)) return false;
                }
                else if (!isCurve3DsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Armors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Armors, rhs.Armors, out var lhsArmors, out var rhsArmors, out var isArmorsEqual))
                {
                    if (!object.Equals(lhsArmors, rhsArmors)) return false;
                }
                else if (!isArmorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Books) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Books, rhs.Books, out var lhsBooks, out var rhsBooks, out var isBooksEqual))
                {
                    if (!object.Equals(lhsBooks, rhsBooks)) return false;
                }
                else if (!isBooksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Containers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Containers, rhs.Containers, out var lhsContainers, out var rhsContainers, out var isContainersEqual))
                {
                    if (!object.Equals(lhsContainers, rhsContainers)) return false;
                }
                else if (!isContainersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Doors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Doors, rhs.Doors, out var lhsDoors, out var rhsDoors, out var isDoorsEqual))
                {
                    if (!object.Equals(lhsDoors, rhsDoors)) return false;
                }
                else if (!isDoorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Lights) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Lights, rhs.Lights, out var lhsLights, out var rhsLights, out var isLightsEqual))
                {
                    if (!object.Equals(lhsLights, rhsLights)) return false;
                }
                else if (!isLightsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MiscItems) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MiscItems, rhs.MiscItems, out var lhsMiscItems, out var rhsMiscItems, out var isMiscItemsEqual))
                {
                    if (!object.Equals(lhsMiscItems, rhsMiscItems)) return false;
                }
                else if (!isMiscItemsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Statics) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Statics, rhs.Statics, out var lhsStatics, out var rhsStatics, out var isStaticsEqual))
                {
                    if (!object.Equals(lhsStatics, rhsStatics)) return false;
                }
                else if (!isStaticsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.StaticCollections) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StaticCollections, rhs.StaticCollections, out var lhsStaticCollections, out var rhsStaticCollections, out var isStaticCollectionsEqual))
                {
                    if (!object.Equals(lhsStaticCollections, rhsStaticCollections)) return false;
                }
                else if (!isStaticCollectionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PackIns) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PackIns, rhs.PackIns, out var lhsPackIns, out var rhsPackIns, out var isPackInsEqual))
                {
                    if (!object.Equals(lhsPackIns, rhsPackIns)) return false;
                }
                else if (!isPackInsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MoveableStatics) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MoveableStatics, rhs.MoveableStatics, out var lhsMoveableStatics, out var rhsMoveableStatics, out var isMoveableStaticsEqual))
                {
                    if (!object.Equals(lhsMoveableStatics, rhsMoveableStatics)) return false;
                }
                else if (!isMoveableStaticsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Grasses) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Grasses, rhs.Grasses, out var lhsGrasses, out var rhsGrasses, out var isGrassesEqual))
                {
                    if (!object.Equals(lhsGrasses, rhsGrasses)) return false;
                }
                else if (!isGrassesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Florae) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Florae, rhs.Florae, out var lhsFlorae, out var rhsFlorae, out var isFloraeEqual))
                {
                    if (!object.Equals(lhsFlorae, rhsFlorae)) return false;
                }
                else if (!isFloraeEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Furniture) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Furniture, rhs.Furniture, out var lhsFurniture, out var rhsFurniture, out var isFurnitureEqual))
                {
                    if (!object.Equals(lhsFurniture, rhsFurniture)) return false;
                }
                else if (!isFurnitureEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Weapons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weapons, rhs.Weapons, out var lhsWeapons, out var rhsWeapons, out var isWeaponsEqual))
                {
                    if (!object.Equals(lhsWeapons, rhsWeapons)) return false;
                }
                else if (!isWeaponsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Ammunitions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ammunitions, rhs.Ammunitions, out var lhsAmmunitions, out var rhsAmmunitions, out var isAmmunitionsEqual))
                {
                    if (!object.Equals(lhsAmmunitions, rhsAmmunitions)) return false;
                }
                else if (!isAmmunitionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Npcs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Npcs, rhs.Npcs, out var lhsNpcs, out var rhsNpcs, out var isNpcsEqual))
                {
                    if (!object.Equals(lhsNpcs, rhsNpcs)) return false;
                }
                else if (!isNpcsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LeveledNpcs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledNpcs, rhs.LeveledNpcs, out var lhsLeveledNpcs, out var rhsLeveledNpcs, out var isLeveledNpcsEqual))
                {
                    if (!object.Equals(lhsLeveledNpcs, rhsLeveledNpcs)) return false;
                }
                else if (!isLeveledNpcsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LeveledPackIns) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledPackIns, rhs.LeveledPackIns, out var lhsLeveledPackIns, out var rhsLeveledPackIns, out var isLeveledPackInsEqual))
                {
                    if (!object.Equals(lhsLeveledPackIns, rhsLeveledPackIns)) return false;
                }
                else if (!isLeveledPackInsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Keys) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Keys, rhs.Keys, out var lhsKeys, out var rhsKeys, out var isKeysEqual))
                {
                    if (!object.Equals(lhsKeys, rhsKeys)) return false;
                }
                else if (!isKeysEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Ingestibles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ingestibles, rhs.Ingestibles, out var lhsIngestibles, out var rhsIngestibles, out var isIngestiblesEqual))
                {
                    if (!object.Equals(lhsIngestibles, rhsIngestibles)) return false;
                }
                else if (!isIngestiblesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.IdleMarkers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IdleMarkers, rhs.IdleMarkers, out var lhsIdleMarkers, out var rhsIdleMarkers, out var isIdleMarkersEqual))
                {
                    if (!object.Equals(lhsIdleMarkers, rhsIdleMarkers)) return false;
                }
                else if (!isIdleMarkersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BiomeMarkers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BiomeMarkers, rhs.BiomeMarkers, out var lhsBiomeMarkers, out var rhsBiomeMarkers, out var isBiomeMarkersEqual))
                {
                    if (!object.Equals(lhsBiomeMarkers, rhsBiomeMarkers)) return false;
                }
                else if (!isBiomeMarkersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Notes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Notes, rhs.Notes, out var lhsNotes, out var rhsNotes, out var isNotesEqual))
                {
                    if (!object.Equals(lhsNotes, rhsNotes)) return false;
                }
                else if (!isNotesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Projectiles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Projectiles, rhs.Projectiles, out var lhsProjectiles, out var rhsProjectiles, out var isProjectilesEqual))
                {
                    if (!object.Equals(lhsProjectiles, rhsProjectiles)) return false;
                }
                else if (!isProjectilesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Hazards) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Hazards, rhs.Hazards, out var lhsHazards, out var rhsHazards, out var isHazardsEqual))
                {
                    if (!object.Equals(lhsHazards, rhsHazards)) return false;
                }
                else if (!isHazardsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BendableSplines) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BendableSplines, rhs.BendableSplines, out var lhsBendableSplines, out var rhsBendableSplines, out var isBendableSplinesEqual))
                {
                    if (!object.Equals(lhsBendableSplines, rhsBendableSplines)) return false;
                }
                else if (!isBendableSplinesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Terminals) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Terminals, rhs.Terminals, out var lhsTerminals, out var rhsTerminals, out var isTerminalsEqual))
                {
                    if (!object.Equals(lhsTerminals, rhsTerminals)) return false;
                }
                else if (!isTerminalsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LeveledItems) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledItems, rhs.LeveledItems, out var lhsLeveledItems, out var rhsLeveledItems, out var isLeveledItemsEqual))
                {
                    if (!object.Equals(lhsLeveledItems, rhsLeveledItems)) return false;
                }
                else if (!isLeveledItemsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GenericBaseFormTemplates) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GenericBaseFormTemplates, rhs.GenericBaseFormTemplates, out var lhsGenericBaseFormTemplates, out var rhsGenericBaseFormTemplates, out var isGenericBaseFormTemplatesEqual))
                {
                    if (!object.Equals(lhsGenericBaseFormTemplates, rhsGenericBaseFormTemplates)) return false;
                }
                else if (!isGenericBaseFormTemplatesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GenericBaseForms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GenericBaseForms, rhs.GenericBaseForms, out var lhsGenericBaseForms, out var rhsGenericBaseForms, out var isGenericBaseFormsEqual))
                {
                    if (!object.Equals(lhsGenericBaseForms, rhsGenericBaseForms)) return false;
                }
                else if (!isGenericBaseFormsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LeveledBaseForms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledBaseForms, rhs.LeveledBaseForms, out var lhsLeveledBaseForms, out var rhsLeveledBaseForms, out var isLeveledBaseFormsEqual))
                {
                    if (!object.Equals(lhsLeveledBaseForms, rhsLeveledBaseForms)) return false;
                }
                else if (!isLeveledBaseFormsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Weathers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weathers, rhs.Weathers, out var lhsWeathers, out var rhsWeathers, out var isWeathersEqual))
                {
                    if (!object.Equals(lhsWeathers, rhsWeathers)) return false;
                }
                else if (!isWeathersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.WeatherSettings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WeatherSettings, rhs.WeatherSettings, out var lhsWeatherSettings, out var rhsWeatherSettings, out var isWeatherSettingsEqual))
                {
                    if (!object.Equals(lhsWeatherSettings, rhsWeatherSettings)) return false;
                }
                else if (!isWeatherSettingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Climates) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Climates, rhs.Climates, out var lhsClimates, out var rhsClimates, out var isClimatesEqual))
                {
                    if (!object.Equals(lhsClimates, rhsClimates)) return false;
                }
                else if (!isClimatesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ShaderParticleGeometries) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ShaderParticleGeometries, rhs.ShaderParticleGeometries, out var lhsShaderParticleGeometries, out var rhsShaderParticleGeometries, out var isShaderParticleGeometriesEqual))
                {
                    if (!object.Equals(lhsShaderParticleGeometries, rhsShaderParticleGeometries)) return false;
                }
                else if (!isShaderParticleGeometriesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Regions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Regions, rhs.Regions, out var lhsRegions, out var rhsRegions, out var isRegionsEqual))
                {
                    if (!object.Equals(lhsRegions, rhsRegions)) return false;
                }
                else if (!isRegionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.NavigationMeshInfoMaps) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NavigationMeshInfoMaps, rhs.NavigationMeshInfoMaps, out var lhsNavigationMeshInfoMaps, out var rhsNavigationMeshInfoMaps, out var isNavigationMeshInfoMapsEqual))
                {
                    if (!object.Equals(lhsNavigationMeshInfoMaps, rhsNavigationMeshInfoMaps)) return false;
                }
                else if (!isNavigationMeshInfoMapsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Cells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Cells, rhs.Cells, out var lhsCells, out var rhsCells, out var isCellsEqual))
                {
                    if (!object.Equals(lhsCells, rhsCells)) return false;
                }
                else if (!isCellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Worldspaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Worldspaces, rhs.Worldspaces, out var lhsWorldspaces, out var rhsWorldspaces, out var isWorldspacesEqual))
                {
                    if (!object.Equals(lhsWorldspaces, rhsWorldspaces)) return false;
                }
                else if (!isWorldspacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Quests) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Quests, rhs.Quests, out var lhsQuests, out var rhsQuests, out var isQuestsEqual))
                {
                    if (!object.Equals(lhsQuests, rhsQuests)) return false;
                }
                else if (!isQuestsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.IdleAnimations) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IdleAnimations, rhs.IdleAnimations, out var lhsIdleAnimations, out var rhsIdleAnimations, out var isIdleAnimationsEqual))
                {
                    if (!object.Equals(lhsIdleAnimations, rhsIdleAnimations)) return false;
                }
                else if (!isIdleAnimationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Packages) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Packages, rhs.Packages, out var lhsPackages, out var rhsPackages, out var isPackagesEqual))
                {
                    if (!object.Equals(lhsPackages, rhsPackages)) return false;
                }
                else if (!isPackagesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.CombatStyles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CombatStyles, rhs.CombatStyles, out var lhsCombatStyles, out var rhsCombatStyles, out var isCombatStylesEqual))
                {
                    if (!object.Equals(lhsCombatStyles, rhsCombatStyles)) return false;
                }
                else if (!isCombatStylesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LoadScreens) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LoadScreens, rhs.LoadScreens, out var lhsLoadScreens, out var rhsLoadScreens, out var isLoadScreensEqual))
                {
                    if (!object.Equals(lhsLoadScreens, rhsLoadScreens)) return false;
                }
                else if (!isLoadScreensEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AnimatedObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AnimatedObjects, rhs.AnimatedObjects, out var lhsAnimatedObjects, out var rhsAnimatedObjects, out var isAnimatedObjectsEqual))
                {
                    if (!object.Equals(lhsAnimatedObjects, rhsAnimatedObjects)) return false;
                }
                else if (!isAnimatedObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Waters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Waters, rhs.Waters, out var lhsWaters, out var rhsWaters, out var isWatersEqual))
                {
                    if (!object.Equals(lhsWaters, rhsWaters)) return false;
                }
                else if (!isWatersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.EffectShaders) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EffectShaders, rhs.EffectShaders, out var lhsEffectShaders, out var rhsEffectShaders, out var isEffectShadersEqual))
                {
                    if (!object.Equals(lhsEffectShaders, rhsEffectShaders)) return false;
                }
                else if (!isEffectShadersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Explosions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Explosions, rhs.Explosions, out var lhsExplosions, out var rhsExplosions, out var isExplosionsEqual))
                {
                    if (!object.Equals(lhsExplosions, rhsExplosions)) return false;
                }
                else if (!isExplosionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Debris) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Debris, rhs.Debris, out var lhsDebris, out var rhsDebris, out var isDebrisEqual))
                {
                    if (!object.Equals(lhsDebris, rhsDebris)) return false;
                }
                else if (!isDebrisEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ImageSpaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ImageSpaces, rhs.ImageSpaces, out var lhsImageSpaces, out var rhsImageSpaces, out var isImageSpacesEqual))
                {
                    if (!object.Equals(lhsImageSpaces, rhsImageSpaces)) return false;
                }
                else if (!isImageSpacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ImageSpaceAdapters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ImageSpaceAdapters, rhs.ImageSpaceAdapters, out var lhsImageSpaceAdapters, out var rhsImageSpaceAdapters, out var isImageSpaceAdaptersEqual))
                {
                    if (!object.Equals(lhsImageSpaceAdapters, rhsImageSpaceAdapters)) return false;
                }
                else if (!isImageSpaceAdaptersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FormLists) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FormLists, rhs.FormLists, out var lhsFormLists, out var rhsFormLists, out var isFormListsEqual))
                {
                    if (!object.Equals(lhsFormLists, rhsFormLists)) return false;
                }
                else if (!isFormListsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Perks) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Perks, rhs.Perks, out var lhsPerks, out var rhsPerks, out var isPerksEqual))
                {
                    if (!object.Equals(lhsPerks, rhsPerks)) return false;
                }
                else if (!isPerksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BodyParts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BodyParts, rhs.BodyParts, out var lhsBodyParts, out var rhsBodyParts, out var isBodyPartsEqual))
                {
                    if (!object.Equals(lhsBodyParts, rhsBodyParts)) return false;
                }
                else if (!isBodyPartsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AddonNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AddonNodes, rhs.AddonNodes, out var lhsAddonNodes, out var rhsAddonNodes, out var isAddonNodesEqual))
                {
                    if (!object.Equals(lhsAddonNodes, rhsAddonNodes)) return false;
                }
                else if (!isAddonNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ActorValueInformation) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ActorValueInformation, rhs.ActorValueInformation, out var lhsActorValueInformation, out var rhsActorValueInformation, out var isActorValueInformationEqual))
                {
                    if (!object.Equals(lhsActorValueInformation, rhsActorValueInformation)) return false;
                }
                else if (!isActorValueInformationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.CameraShots) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CameraShots, rhs.CameraShots, out var lhsCameraShots, out var rhsCameraShots, out var isCameraShotsEqual))
                {
                    if (!object.Equals(lhsCameraShots, rhsCameraShots)) return false;
                }
                else if (!isCameraShotsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.CameraPaths) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CameraPaths, rhs.CameraPaths, out var lhsCameraPaths, out var rhsCameraPaths, out var isCameraPathsEqual))
                {
                    if (!object.Equals(lhsCameraPaths, rhsCameraPaths)) return false;
                }
                else if (!isCameraPathsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.VoiceTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VoiceTypes, rhs.VoiceTypes, out var lhsVoiceTypes, out var rhsVoiceTypes, out var isVoiceTypesEqual))
                {
                    if (!object.Equals(lhsVoiceTypes, rhsVoiceTypes)) return false;
                }
                else if (!isVoiceTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MaterialTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MaterialTypes, rhs.MaterialTypes, out var lhsMaterialTypes, out var rhsMaterialTypes, out var isMaterialTypesEqual))
                {
                    if (!object.Equals(lhsMaterialTypes, rhsMaterialTypes)) return false;
                }
                else if (!isMaterialTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Impacts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Impacts, rhs.Impacts, out var lhsImpacts, out var rhsImpacts, out var isImpactsEqual))
                {
                    if (!object.Equals(lhsImpacts, rhsImpacts)) return false;
                }
                else if (!isImpactsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ImpactDataSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ImpactDataSets, rhs.ImpactDataSets, out var lhsImpactDataSets, out var rhsImpactDataSets, out var isImpactDataSetsEqual))
                {
                    if (!object.Equals(lhsImpactDataSets, rhsImpactDataSets)) return false;
                }
                else if (!isImpactDataSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ArmorAddons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ArmorAddons, rhs.ArmorAddons, out var lhsArmorAddons, out var rhsArmorAddons, out var isArmorAddonsEqual))
                {
                    if (!object.Equals(lhsArmorAddons, rhsArmorAddons)) return false;
                }
                else if (!isArmorAddonsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Locations) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Locations, rhs.Locations, out var lhsLocations, out var rhsLocations, out var isLocationsEqual))
                {
                    if (!object.Equals(lhsLocations, rhsLocations)) return false;
                }
                else if (!isLocationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Messages) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Messages, rhs.Messages, out var lhsMessages, out var rhsMessages, out var isMessagesEqual))
                {
                    if (!object.Equals(lhsMessages, rhsMessages)) return false;
                }
                else if (!isMessagesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.DefaultObjectManagers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DefaultObjectManagers, rhs.DefaultObjectManagers, out var lhsDefaultObjectManagers, out var rhsDefaultObjectManagers, out var isDefaultObjectManagersEqual))
                {
                    if (!object.Equals(lhsDefaultObjectManagers, rhsDefaultObjectManagers)) return false;
                }
                else if (!isDefaultObjectManagersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.DefaultObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DefaultObjects, rhs.DefaultObjects, out var lhsDefaultObjects, out var rhsDefaultObjects, out var isDefaultObjectsEqual))
                {
                    if (!object.Equals(lhsDefaultObjects, rhsDefaultObjects)) return false;
                }
                else if (!isDefaultObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LightingTemplates) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LightingTemplates, rhs.LightingTemplates, out var lhsLightingTemplates, out var rhsLightingTemplates, out var isLightingTemplatesEqual))
                {
                    if (!object.Equals(lhsLightingTemplates, rhsLightingTemplates)) return false;
                }
                else if (!isLightingTemplatesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MusicTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MusicTypes, rhs.MusicTypes, out var lhsMusicTypes, out var rhsMusicTypes, out var isMusicTypesEqual))
                {
                    if (!object.Equals(lhsMusicTypes, rhsMusicTypes)) return false;
                }
                else if (!isMusicTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Footsteps) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Footsteps, rhs.Footsteps, out var lhsFootsteps, out var rhsFootsteps, out var isFootstepsEqual))
                {
                    if (!object.Equals(lhsFootsteps, rhsFootsteps)) return false;
                }
                else if (!isFootstepsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FootstepSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FootstepSets, rhs.FootstepSets, out var lhsFootstepSets, out var rhsFootstepSets, out var isFootstepSetsEqual))
                {
                    if (!object.Equals(lhsFootstepSets, rhsFootstepSets)) return false;
                }
                else if (!isFootstepSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.StoryManagerBranchNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StoryManagerBranchNodes, rhs.StoryManagerBranchNodes, out var lhsStoryManagerBranchNodes, out var rhsStoryManagerBranchNodes, out var isStoryManagerBranchNodesEqual))
                {
                    if (!object.Equals(lhsStoryManagerBranchNodes, rhsStoryManagerBranchNodes)) return false;
                }
                else if (!isStoryManagerBranchNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.StoryManagerQuestNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StoryManagerQuestNodes, rhs.StoryManagerQuestNodes, out var lhsStoryManagerQuestNodes, out var rhsStoryManagerQuestNodes, out var isStoryManagerQuestNodesEqual))
                {
                    if (!object.Equals(lhsStoryManagerQuestNodes, rhsStoryManagerQuestNodes)) return false;
                }
                else if (!isStoryManagerQuestNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.StoryManagerEventNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StoryManagerEventNodes, rhs.StoryManagerEventNodes, out var lhsStoryManagerEventNodes, out var rhsStoryManagerEventNodes, out var isStoryManagerEventNodesEqual))
                {
                    if (!object.Equals(lhsStoryManagerEventNodes, rhsStoryManagerEventNodes)) return false;
                }
                else if (!isStoryManagerEventNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MusicTracks) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MusicTracks, rhs.MusicTracks, out var lhsMusicTracks, out var rhsMusicTracks, out var isMusicTracksEqual))
                {
                    if (!object.Equals(lhsMusicTracks, rhsMusicTracks)) return false;
                }
                else if (!isMusicTracksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.EquipTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EquipTypes, rhs.EquipTypes, out var lhsEquipTypes, out var rhsEquipTypes, out var isEquipTypesEqual))
                {
                    if (!object.Equals(lhsEquipTypes, rhsEquipTypes)) return false;
                }
                else if (!isEquipTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Outfits) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Outfits, rhs.Outfits, out var lhsOutfits, out var rhsOutfits, out var isOutfitsEqual))
                {
                    if (!object.Equals(lhsOutfits, rhsOutfits)) return false;
                }
                else if (!isOutfitsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ArtObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ArtObjects, rhs.ArtObjects, out var lhsArtObjects, out var rhsArtObjects, out var isArtObjectsEqual))
                {
                    if (!object.Equals(lhsArtObjects, rhsArtObjects)) return false;
                }
                else if (!isArtObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MovementTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MovementTypes, rhs.MovementTypes, out var lhsMovementTypes, out var rhsMovementTypes, out var isMovementTypesEqual))
                {
                    if (!object.Equals(lhsMovementTypes, rhsMovementTypes)) return false;
                }
                else if (!isMovementTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.CollisionLayers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CollisionLayers, rhs.CollisionLayers, out var lhsCollisionLayers, out var rhsCollisionLayers, out var isCollisionLayersEqual))
                {
                    if (!object.Equals(lhsCollisionLayers, rhsCollisionLayers)) return false;
                }
                else if (!isCollisionLayersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Colors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Colors, rhs.Colors, out var lhsColors, out var rhsColors, out var isColorsEqual))
                {
                    if (!object.Equals(lhsColors, rhsColors)) return false;
                }
                else if (!isColorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ReverbParameters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ReverbParameters, rhs.ReverbParameters, out var lhsReverbParameters, out var rhsReverbParameters, out var isReverbParametersEqual))
                {
                    if (!object.Equals(lhsReverbParameters, rhsReverbParameters)) return false;
                }
                else if (!isReverbParametersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ReferenceGroups) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ReferenceGroups, rhs.ReferenceGroups, out var lhsReferenceGroups, out var rhsReferenceGroups, out var isReferenceGroupsEqual))
                {
                    if (!object.Equals(lhsReferenceGroups, rhsReferenceGroups)) return false;
                }
                else if (!isReferenceGroupsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AimModels) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AimModels, rhs.AimModels, out var lhsAimModels, out var rhsAimModels, out var isAimModelsEqual))
                {
                    if (!object.Equals(lhsAimModels, rhsAimModels)) return false;
                }
                else if (!isAimModelsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AimAssistModels) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AimAssistModels, rhs.AimAssistModels, out var lhsAimAssistModels, out var rhsAimAssistModels, out var isAimAssistModelsEqual))
                {
                    if (!object.Equals(lhsAimAssistModels, rhsAimAssistModels)) return false;
                }
                else if (!isAimAssistModelsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MeleeAimAssistModels) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MeleeAimAssistModels, rhs.MeleeAimAssistModels, out var lhsMeleeAimAssistModels, out var rhsMeleeAimAssistModels, out var isMeleeAimAssistModelsEqual))
                {
                    if (!object.Equals(lhsMeleeAimAssistModels, rhsMeleeAimAssistModels)) return false;
                }
                else if (!isMeleeAimAssistModelsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Layers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Layers, rhs.Layers, out var lhsLayers, out var rhsLayers, out var isLayersEqual))
                {
                    if (!object.Equals(lhsLayers, rhsLayers)) return false;
                }
                else if (!isLayersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ConstructibleObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ConstructibleObjects, rhs.ConstructibleObjects, out var lhsConstructibleObjects, out var rhsConstructibleObjects, out var isConstructibleObjectsEqual))
                {
                    if (!object.Equals(lhsConstructibleObjects, rhsConstructibleObjects)) return false;
                }
                else if (!isConstructibleObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ObjectModifications) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectModifications, rhs.ObjectModifications, out var lhsObjectModifications, out var rhsObjectModifications, out var isObjectModificationsEqual))
                {
                    if (!object.Equals(lhsObjectModifications, rhsObjectModifications)) return false;
                }
                else if (!isObjectModificationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Zooms) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Zooms, rhs.Zooms, out var lhsZooms, out var rhsZooms, out var isZoomsEqual))
                {
                    if (!object.Equals(lhsZooms, rhsZooms)) return false;
                }
                else if (!isZoomsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.InstanceNamingRules) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.InstanceNamingRules, rhs.InstanceNamingRules, out var lhsInstanceNamingRules, out var rhsInstanceNamingRules, out var isInstanceNamingRulesEqual))
                {
                    if (!object.Equals(lhsInstanceNamingRules, rhsInstanceNamingRules)) return false;
                }
                else if (!isInstanceNamingRulesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SoundKeywordMappings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundKeywordMappings, rhs.SoundKeywordMappings, out var lhsSoundKeywordMappings, out var rhsSoundKeywordMappings, out var isSoundKeywordMappingsEqual))
                {
                    if (!object.Equals(lhsSoundKeywordMappings, rhsSoundKeywordMappings)) return false;
                }
                else if (!isSoundKeywordMappingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AttractionRules) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AttractionRules, rhs.AttractionRules, out var lhsAttractionRules, out var rhsAttractionRules, out var isAttractionRulesEqual))
                {
                    if (!object.Equals(lhsAttractionRules, rhsAttractionRules)) return false;
                }
                else if (!isAttractionRulesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SceneCollections) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SceneCollections, rhs.SceneCollections, out var lhsSceneCollections, out var rhsSceneCollections, out var isSceneCollectionsEqual))
                {
                    if (!object.Equals(lhsSceneCollections, rhsSceneCollections)) return false;
                }
                else if (!isSceneCollectionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AnimationSoundTagSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AnimationSoundTagSets, rhs.AnimationSoundTagSets, out var lhsAnimationSoundTagSets, out var rhsAnimationSoundTagSets, out var isAnimationSoundTagSetsEqual))
                {
                    if (!object.Equals(lhsAnimationSoundTagSets, rhsAnimationSoundTagSets)) return false;
                }
                else if (!isAnimationSoundTagSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Resources) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Resources, rhs.Resources, out var lhsResources, out var rhsResources, out var isResourcesEqual))
                {
                    if (!object.Equals(lhsResources, rhsResources)) return false;
                }
                else if (!isResourcesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Biomes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Biomes, rhs.Biomes, out var lhsBiomes, out var rhsBiomes, out var isBiomesEqual))
                {
                    if (!object.Equals(lhsBiomes, rhsBiomes)) return false;
                }
                else if (!isBiomesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.NavigationMeshObstacleCoverManagers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NavigationMeshObstacleCoverManagers, rhs.NavigationMeshObstacleCoverManagers, out var lhsNavigationMeshObstacleCoverManagers, out var rhsNavigationMeshObstacleCoverManagers, out var isNavigationMeshObstacleCoverManagersEqual))
                {
                    if (!object.Equals(lhsNavigationMeshObstacleCoverManagers, rhsNavigationMeshObstacleCoverManagers)) return false;
                }
                else if (!isNavigationMeshObstacleCoverManagersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LensFlares) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LensFlares, rhs.LensFlares, out var lhsLensFlares, out var rhsLensFlares, out var isLensFlaresEqual))
                {
                    if (!object.Equals(lhsLensFlares, rhsLensFlares)) return false;
                }
                else if (!isLensFlaresEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ObjectVisibilityManagers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectVisibilityManagers, rhs.ObjectVisibilityManagers, out var lhsObjectVisibilityManagers, out var rhsObjectVisibilityManagers, out var isObjectVisibilityManagersEqual))
                {
                    if (!object.Equals(lhsObjectVisibilityManagers, rhsObjectVisibilityManagers)) return false;
                }
                else if (!isObjectVisibilityManagersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SnapTemplateNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SnapTemplateNodes, rhs.SnapTemplateNodes, out var lhsSnapTemplateNodes, out var rhsSnapTemplateNodes, out var isSnapTemplateNodesEqual))
                {
                    if (!object.Equals(lhsSnapTemplateNodes, rhsSnapTemplateNodes)) return false;
                }
                else if (!isSnapTemplateNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SnapTemplates) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SnapTemplates, rhs.SnapTemplates, out var lhsSnapTemplates, out var rhsSnapTemplates, out var isSnapTemplatesEqual))
                {
                    if (!object.Equals(lhsSnapTemplates, rhsSnapTemplates)) return false;
                }
                else if (!isSnapTemplatesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GroundCovers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GroundCovers, rhs.GroundCovers, out var lhsGroundCovers, out var rhsGroundCovers, out var isGroundCoversEqual))
                {
                    if (!object.Equals(lhsGroundCovers, rhsGroundCovers)) return false;
                }
                else if (!isGroundCoversEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MorphableObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MorphableObjects, rhs.MorphableObjects, out var lhsMorphableObjects, out var rhsMorphableObjects, out var isMorphableObjectsEqual))
                {
                    if (!object.Equals(lhsMorphableObjects, rhsMorphableObjects)) return false;
                }
                else if (!isMorphableObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Traversals) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Traversals, rhs.Traversals, out var lhsTraversals, out var rhsTraversals, out var isTraversalsEqual))
                {
                    if (!object.Equals(lhsTraversals, rhsTraversals)) return false;
                }
                else if (!isTraversalsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ResourceGenerationData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ResourceGenerationData, rhs.ResourceGenerationData, out var lhsResourceGenerationData, out var rhsResourceGenerationData, out var isResourceGenerationDataEqual))
                {
                    if (!object.Equals(lhsResourceGenerationData, rhsResourceGenerationData)) return false;
                }
                else if (!isResourceGenerationDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BiomeSwaps) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BiomeSwaps, rhs.BiomeSwaps, out var lhsBiomeSwaps, out var rhsBiomeSwaps, out var isBiomeSwapsEqual))
                {
                    if (!object.Equals(lhsBiomeSwaps, rhsBiomeSwaps)) return false;
                }
                else if (!isBiomeSwapsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Atmospheres) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Atmospheres, rhs.Atmospheres, out var lhsAtmospheres, out var rhsAtmospheres, out var isAtmospheresEqual))
                {
                    if (!object.Equals(lhsAtmospheres, rhsAtmospheres)) return false;
                }
                else if (!isAtmospheresEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LeveledSpaceCells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledSpaceCells, rhs.LeveledSpaceCells, out var lhsLeveledSpaceCells, out var rhsLeveledSpaceCells, out var isLeveledSpaceCellsEqual))
                {
                    if (!object.Equals(lhsLeveledSpaceCells, rhsLeveledSpaceCells)) return false;
                }
                else if (!isLeveledSpaceCellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SpeechChallenges) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SpeechChallenges, rhs.SpeechChallenges, out var lhsSpeechChallenges, out var rhsSpeechChallenges, out var isSpeechChallengesEqual))
                {
                    if (!object.Equals(lhsSpeechChallenges, rhsSpeechChallenges)) return false;
                }
                else if (!isSpeechChallengesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AimAssistPoses) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AimAssistPoses, rhs.AimAssistPoses, out var lhsAimAssistPoses, out var rhsAimAssistPoses, out var isAimAssistPosesEqual))
                {
                    if (!object.Equals(lhsAimAssistPoses, rhsAimAssistPoses)) return false;
                }
                else if (!isAimAssistPosesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.VolumetricLightings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VolumetricLightings, rhs.VolumetricLightings, out var lhsVolumetricLightings, out var rhsVolumetricLightings, out var isVolumetricLightingsEqual))
                {
                    if (!object.Equals(lhsVolumetricLightings, rhsVolumetricLightings)) return false;
                }
                else if (!isVolumetricLightingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfaceBlocks) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SurfaceBlocks, rhs.SurfaceBlocks, out var lhsSurfaceBlocks, out var rhsSurfaceBlocks, out var isSurfaceBlocksEqual))
                {
                    if (!object.Equals(lhsSurfaceBlocks, rhsSurfaceBlocks)) return false;
                }
                else if (!isSurfaceBlocksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfacePatternConfigs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SurfacePatternConfigs, rhs.SurfacePatternConfigs, out var lhsSurfacePatternConfigs, out var rhsSurfacePatternConfigs, out var isSurfacePatternConfigsEqual))
                {
                    if (!object.Equals(lhsSurfacePatternConfigs, rhsSurfacePatternConfigs)) return false;
                }
                else if (!isSurfacePatternConfigsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfacePatterns) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SurfacePatterns, rhs.SurfacePatterns, out var lhsSurfacePatterns, out var rhsSurfacePatterns, out var isSurfacePatternsEqual))
                {
                    if (!object.Equals(lhsSurfacePatterns, rhsSurfacePatterns)) return false;
                }
                else if (!isSurfacePatternsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfaceTrees) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SurfaceTrees, rhs.SurfaceTrees, out var lhsSurfaceTrees, out var rhsSurfaceTrees, out var isSurfaceTreesEqual))
                {
                    if (!object.Equals(lhsSurfaceTrees, rhsSurfaceTrees)) return false;
                }
                else if (!isSurfaceTreesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PlanetContentManagerTrees) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PlanetContentManagerTrees, rhs.PlanetContentManagerTrees, out var lhsPlanetContentManagerTrees, out var rhsPlanetContentManagerTrees, out var isPlanetContentManagerTreesEqual))
                {
                    if (!object.Equals(lhsPlanetContentManagerTrees, rhsPlanetContentManagerTrees)) return false;
                }
                else if (!isPlanetContentManagerTreesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BoneModifiers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BoneModifiers, rhs.BoneModifiers, out var lhsBoneModifiers, out var rhsBoneModifiers, out var isBoneModifiersEqual))
                {
                    if (!object.Equals(lhsBoneModifiers, rhsBoneModifiers)) return false;
                }
                else if (!isBoneModifiersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SnapTemplateBehaviors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SnapTemplateBehaviors, rhs.SnapTemplateBehaviors, out var lhsSnapTemplateBehaviors, out var rhsSnapTemplateBehaviors, out var isSnapTemplateBehaviorsEqual))
                {
                    if (!object.Equals(lhsSnapTemplateBehaviors, rhsSnapTemplateBehaviors)) return false;
                }
                else if (!isSnapTemplateBehaviorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Planets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Planets, rhs.Planets, out var lhsPlanets, out var rhsPlanets, out var isPlanetsEqual))
                {
                    if (!object.Equals(lhsPlanets, rhsPlanets)) return false;
                }
                else if (!isPlanetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ConditionRecords) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ConditionRecords, rhs.ConditionRecords, out var lhsConditionRecords, out var rhsConditionRecords, out var isConditionRecordsEqual))
                {
                    if (!object.Equals(lhsConditionRecords, rhsConditionRecords)) return false;
                }
                else if (!isConditionRecordsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PlanetContentManagerBranchNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PlanetContentManagerBranchNodes, rhs.PlanetContentManagerBranchNodes, out var lhsPlanetContentManagerBranchNodes, out var rhsPlanetContentManagerBranchNodes, out var isPlanetContentManagerBranchNodesEqual))
                {
                    if (!object.Equals(lhsPlanetContentManagerBranchNodes, rhsPlanetContentManagerBranchNodes)) return false;
                }
                else if (!isPlanetContentManagerBranchNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PlanetContentManagerContentNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PlanetContentManagerContentNodes, rhs.PlanetContentManagerContentNodes, out var lhsPlanetContentManagerContentNodes, out var rhsPlanetContentManagerContentNodes, out var isPlanetContentManagerContentNodesEqual))
                {
                    if (!object.Equals(lhsPlanetContentManagerContentNodes, rhsPlanetContentManagerContentNodes)) return false;
                }
                else if (!isPlanetContentManagerContentNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Stars) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Stars, rhs.Stars, out var lhsStars, out var rhsStars, out var isStarsEqual))
                {
                    if (!object.Equals(lhsStars, rhsStars)) return false;
                }
                else if (!isStarsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.WWiseEventDatas) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WWiseEventDatas, rhs.WWiseEventDatas, out var lhsWWiseEventDatas, out var rhsWWiseEventDatas, out var isWWiseEventDatasEqual))
                {
                    if (!object.Equals(lhsWWiseEventDatas, rhsWWiseEventDatas)) return false;
                }
                else if (!isWWiseEventDatasEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ResearchProjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ResearchProjects, rhs.ResearchProjects, out var lhsResearchProjects, out var rhsResearchProjects, out var isResearchProjectsEqual))
                {
                    if (!object.Equals(lhsResearchProjects, rhsResearchProjects)) return false;
                }
                else if (!isResearchProjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AimOpticalSightMarkers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AimOpticalSightMarkers, rhs.AimOpticalSightMarkers, out var lhsAimOpticalSightMarkers, out var rhsAimOpticalSightMarkers, out var isAimOpticalSightMarkersEqual))
                {
                    if (!object.Equals(lhsAimOpticalSightMarkers, rhsAimOpticalSightMarkers)) return false;
                }
                else if (!isAimOpticalSightMarkersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AmbienceSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AmbienceSets, rhs.AmbienceSets, out var lhsAmbienceSets, out var rhsAmbienceSets, out var isAmbienceSetsEqual))
                {
                    if (!object.Equals(lhsAmbienceSets, rhsAmbienceSets)) return false;
                }
                else if (!isAmbienceSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.WeaponBarrelModels) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WeaponBarrelModels, rhs.WeaponBarrelModels, out var lhsWeaponBarrelModels, out var rhsWeaponBarrelModels, out var isWeaponBarrelModelsEqual))
                {
                    if (!object.Equals(lhsWeaponBarrelModels, rhsWeaponBarrelModels)) return false;
                }
                else if (!isWeaponBarrelModelsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfacePatternStyles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SurfacePatternStyles, rhs.SurfacePatternStyles, out var lhsSurfacePatternStyles, out var rhsSurfacePatternStyles, out var isSurfacePatternStylesEqual))
                {
                    if (!object.Equals(lhsSurfacePatternStyles, rhsSurfacePatternStyles)) return false;
                }
                else if (!isSurfacePatternStylesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LayeredMaterialSwaps) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LayeredMaterialSwaps, rhs.LayeredMaterialSwaps, out var lhsLayeredMaterialSwaps, out var rhsLayeredMaterialSwaps, out var isLayeredMaterialSwapsEqual))
                {
                    if (!object.Equals(lhsLayeredMaterialSwaps, rhsLayeredMaterialSwaps)) return false;
                }
                else if (!isLayeredMaterialSwapsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ForceDatas) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ForceDatas, rhs.ForceDatas, out var lhsForceDatas, out var rhsForceDatas, out var isForceDatasEqual))
                {
                    if (!object.Equals(lhsForceDatas, rhsForceDatas)) return false;
                }
                else if (!isForceDatasEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.TerminalMenus) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TerminalMenus, rhs.TerminalMenus, out var lhsTerminalMenus, out var rhsTerminalMenus, out var isTerminalMenusEqual))
                {
                    if (!object.Equals(lhsTerminalMenus, rhsTerminalMenus)) return false;
                }
                else if (!isTerminalMenusEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.EffectSequences) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EffectSequences, rhs.EffectSequences, out var lhsEffectSequences, out var rhsEffectSequences, out var isEffectSequencesEqual))
                {
                    if (!object.Equals(lhsEffectSequences, rhsEffectSequences)) return false;
                }
                else if (!isEffectSequencesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SecondaryDamageLists) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SecondaryDamageLists, rhs.SecondaryDamageLists, out var lhsSecondaryDamageLists, out var rhsSecondaryDamageLists, out var isSecondaryDamageListsEqual))
                {
                    if (!object.Equals(lhsSecondaryDamageLists, rhsSecondaryDamageLists)) return false;
                }
                else if (!isSecondaryDamageListsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MaterialPaths) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MaterialPaths, rhs.MaterialPaths, out var lhsMaterialPaths, out var rhsMaterialPaths, out var isMaterialPathsEqual))
                {
                    if (!object.Equals(lhsMaterialPaths, rhsMaterialPaths)) return false;
                }
                else if (!isMaterialPathsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Clouds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Clouds, rhs.Clouds, out var lhsClouds, out var rhsClouds, out var isCloudsEqual))
                {
                    if (!object.Equals(lhsClouds, rhsClouds)) return false;
                }
                else if (!isCloudsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FogVolumes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FogVolumes, rhs.FogVolumes, out var lhsFogVolumes, out var rhsFogVolumes, out var isFogVolumesEqual))
                {
                    if (!object.Equals(lhsFogVolumes, rhsFogVolumes)) return false;
                }
                else if (!isFogVolumesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.WWiseKeywordMappings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WWiseKeywordMappings, rhs.WWiseKeywordMappings, out var lhsWWiseKeywordMappings, out var rhsWWiseKeywordMappings, out var isWWiseKeywordMappingsEqual))
                {
                    if (!object.Equals(lhsWWiseKeywordMappings, rhsWWiseKeywordMappings)) return false;
                }
                else if (!isWWiseKeywordMappingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LegendaryItems) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LegendaryItems, rhs.LegendaryItems, out var lhsLegendaryItems, out var rhsLegendaryItems, out var isLegendaryItemsEqual))
                {
                    if (!object.Equals(lhsLegendaryItems, rhsLegendaryItems)) return false;
                }
                else if (!isLegendaryItemsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ParticleSystemDefineCollisions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ParticleSystemDefineCollisions, rhs.ParticleSystemDefineCollisions, out var lhsParticleSystemDefineCollisions, out var rhsParticleSystemDefineCollisions, out var isParticleSystemDefineCollisionsEqual))
                {
                    if (!object.Equals(lhsParticleSystemDefineCollisions, rhsParticleSystemDefineCollisions)) return false;
                }
                else if (!isParticleSystemDefineCollisionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SunPresets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SunPresets, rhs.SunPresets, out var lhsSunPresets, out var rhsSunPresets, out var isSunPresetsEqual))
                {
                    if (!object.Equals(lhsSunPresets, rhsSunPresets)) return false;
                }
                else if (!isSunPresetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PhotoModeFeatures) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PhotoModeFeatures, rhs.PhotoModeFeatures, out var lhsPhotoModeFeatures, out var rhsPhotoModeFeatures, out var isPhotoModeFeaturesEqual))
                {
                    if (!object.Equals(lhsPhotoModeFeatures, rhsPhotoModeFeatures)) return false;
                }
                else if (!isPhotoModeFeaturesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GameplayOptions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GameplayOptions, rhs.GameplayOptions, out var lhsGameplayOptions, out var rhsGameplayOptions, out var isGameplayOptionsEqual))
                {
                    if (!object.Equals(lhsGameplayOptions, rhsGameplayOptions)) return false;
                }
                else if (!isGameplayOptionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GameplayOptionsGroups) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GameplayOptionsGroups, rhs.GameplayOptionsGroups, out var lhsGameplayOptionsGroups, out var rhsGameplayOptionsGroups, out var isGameplayOptionsGroupsEqual))
                {
                    if (!object.Equals(lhsGameplayOptionsGroups, rhsGameplayOptionsGroups)) return false;
                }
                else if (!isGameplayOptionsGroupsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.TimeOfDays) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TimeOfDays, rhs.TimeOfDays, out var lhsTimeOfDays, out var rhsTimeOfDays, out var isTimeOfDaysEqual))
                {
                    if (!object.Equals(lhsTimeOfDays, rhsTimeOfDays)) return false;
                }
                else if (!isTimeOfDaysEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ActorValueModulations) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ActorValueModulations, rhs.ActorValueModulations, out var lhsActorValueModulations, out var rhsActorValueModulations, out var isActorValueModulationsEqual))
                {
                    if (!object.Equals(lhsActorValueModulations, rhsActorValueModulations)) return false;
                }
                else if (!isActorValueModulationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Challenges) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Challenges, rhs.Challenges, out var lhsChallenges, out var rhsChallenges, out var isChallengesEqual))
                {
                    if (!object.Equals(lhsChallenges, rhsChallenges)) return false;
                }
                else if (!isChallengesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FacialExpressions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FacialExpressions, rhs.FacialExpressions, out var lhsFacialExpressions, out var rhsFacialExpressions, out var isFacialExpressionsEqual))
                {
                    if (!object.Equals(lhsFacialExpressions, rhsFacialExpressions)) return false;
                }
                else if (!isFacialExpressionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PERS) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PERS, rhs.PERS, out var lhsPERS, out var rhsPERS, out var isPERSEqual))
                {
                    if (!object.Equals(lhsPERS, rhsPERS)) return false;
                }
                else if (!isPERSEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IStarfieldModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.Keywords);
            hash.Add(item.FFKW);
            hash.Add(item.LocationReferenceTypes);
            hash.Add(item.Actions);
            hash.Add(item.Transforms);
            hash.Add(item.TextureSets);
            hash.Add(item.Globals);
            hash.Add(item.DamageTypes);
            hash.Add(item.Classes);
            hash.Add(item.Factions);
            hash.Add(item.AffinityEvents);
            hash.Add(item.HeadParts);
            hash.Add(item.Races);
            hash.Add(item.SoundMarkers);
            hash.Add(item.SoundEchoMarkers);
            hash.Add(item.AcousticSpaces);
            hash.Add(item.AudioOcclusionPrimitives);
            hash.Add(item.MagicEffects);
            hash.Add(item.LandscapeTextures);
            hash.Add(item.ProjectedDecals);
            hash.Add(item.ObjectEffects);
            hash.Add(item.Spells);
            hash.Add(item.Activators);
            hash.Add(item.CurveTables);
            hash.Add(item.Curve3Ds);
            hash.Add(item.Armors);
            hash.Add(item.Books);
            hash.Add(item.Containers);
            hash.Add(item.Doors);
            hash.Add(item.Lights);
            hash.Add(item.MiscItems);
            hash.Add(item.Statics);
            hash.Add(item.StaticCollections);
            hash.Add(item.PackIns);
            hash.Add(item.MoveableStatics);
            hash.Add(item.Grasses);
            hash.Add(item.Florae);
            hash.Add(item.Furniture);
            hash.Add(item.Weapons);
            hash.Add(item.Ammunitions);
            hash.Add(item.Npcs);
            hash.Add(item.LeveledNpcs);
            hash.Add(item.LeveledPackIns);
            hash.Add(item.Keys);
            hash.Add(item.Ingestibles);
            hash.Add(item.IdleMarkers);
            hash.Add(item.BiomeMarkers);
            hash.Add(item.Notes);
            hash.Add(item.Projectiles);
            hash.Add(item.Hazards);
            hash.Add(item.BendableSplines);
            hash.Add(item.Terminals);
            hash.Add(item.LeveledItems);
            hash.Add(item.GenericBaseFormTemplates);
            hash.Add(item.GenericBaseForms);
            hash.Add(item.LeveledBaseForms);
            hash.Add(item.Weathers);
            hash.Add(item.WeatherSettings);
            hash.Add(item.Climates);
            hash.Add(item.ShaderParticleGeometries);
            hash.Add(item.Regions);
            hash.Add(item.NavigationMeshInfoMaps);
            hash.Add(item.Cells);
            hash.Add(item.Worldspaces);
            hash.Add(item.Quests);
            hash.Add(item.IdleAnimations);
            hash.Add(item.Packages);
            hash.Add(item.CombatStyles);
            hash.Add(item.LoadScreens);
            hash.Add(item.AnimatedObjects);
            hash.Add(item.Waters);
            hash.Add(item.EffectShaders);
            hash.Add(item.Explosions);
            hash.Add(item.Debris);
            hash.Add(item.ImageSpaces);
            hash.Add(item.ImageSpaceAdapters);
            hash.Add(item.FormLists);
            hash.Add(item.Perks);
            hash.Add(item.BodyParts);
            hash.Add(item.AddonNodes);
            hash.Add(item.ActorValueInformation);
            hash.Add(item.CameraShots);
            hash.Add(item.CameraPaths);
            hash.Add(item.VoiceTypes);
            hash.Add(item.MaterialTypes);
            hash.Add(item.Impacts);
            hash.Add(item.ImpactDataSets);
            hash.Add(item.ArmorAddons);
            hash.Add(item.Locations);
            hash.Add(item.Messages);
            hash.Add(item.DefaultObjectManagers);
            hash.Add(item.DefaultObjects);
            hash.Add(item.LightingTemplates);
            hash.Add(item.MusicTypes);
            hash.Add(item.Footsteps);
            hash.Add(item.FootstepSets);
            hash.Add(item.StoryManagerBranchNodes);
            hash.Add(item.StoryManagerQuestNodes);
            hash.Add(item.StoryManagerEventNodes);
            hash.Add(item.MusicTracks);
            hash.Add(item.EquipTypes);
            hash.Add(item.Outfits);
            hash.Add(item.ArtObjects);
            hash.Add(item.MovementTypes);
            hash.Add(item.CollisionLayers);
            hash.Add(item.Colors);
            hash.Add(item.ReverbParameters);
            hash.Add(item.ReferenceGroups);
            hash.Add(item.AimModels);
            hash.Add(item.AimAssistModels);
            hash.Add(item.MeleeAimAssistModels);
            hash.Add(item.Layers);
            hash.Add(item.ConstructibleObjects);
            hash.Add(item.ObjectModifications);
            hash.Add(item.Zooms);
            hash.Add(item.InstanceNamingRules);
            hash.Add(item.SoundKeywordMappings);
            hash.Add(item.AttractionRules);
            hash.Add(item.SceneCollections);
            hash.Add(item.AnimationSoundTagSets);
            hash.Add(item.Resources);
            hash.Add(item.Biomes);
            hash.Add(item.NavigationMeshObstacleCoverManagers);
            hash.Add(item.LensFlares);
            hash.Add(item.ObjectVisibilityManagers);
            hash.Add(item.SnapTemplateNodes);
            hash.Add(item.SnapTemplates);
            hash.Add(item.GroundCovers);
            hash.Add(item.MorphableObjects);
            hash.Add(item.Traversals);
            hash.Add(item.ResourceGenerationData);
            hash.Add(item.BiomeSwaps);
            hash.Add(item.Atmospheres);
            hash.Add(item.LeveledSpaceCells);
            hash.Add(item.SpeechChallenges);
            hash.Add(item.AimAssistPoses);
            hash.Add(item.VolumetricLightings);
            hash.Add(item.SurfaceBlocks);
            hash.Add(item.SurfacePatternConfigs);
            hash.Add(item.SurfacePatterns);
            hash.Add(item.SurfaceTrees);
            hash.Add(item.PlanetContentManagerTrees);
            hash.Add(item.BoneModifiers);
            hash.Add(item.SnapTemplateBehaviors);
            hash.Add(item.Planets);
            hash.Add(item.ConditionRecords);
            hash.Add(item.PlanetContentManagerBranchNodes);
            hash.Add(item.PlanetContentManagerContentNodes);
            hash.Add(item.Stars);
            hash.Add(item.WWiseEventDatas);
            hash.Add(item.ResearchProjects);
            hash.Add(item.AimOpticalSightMarkers);
            hash.Add(item.AmbienceSets);
            hash.Add(item.WeaponBarrelModels);
            hash.Add(item.SurfacePatternStyles);
            hash.Add(item.LayeredMaterialSwaps);
            hash.Add(item.ForceDatas);
            hash.Add(item.TerminalMenus);
            hash.Add(item.EffectSequences);
            hash.Add(item.SecondaryDamageLists);
            hash.Add(item.MaterialPaths);
            hash.Add(item.Clouds);
            hash.Add(item.FogVolumes);
            hash.Add(item.WWiseKeywordMappings);
            hash.Add(item.LegendaryItems);
            hash.Add(item.ParticleSystemDefineCollisions);
            hash.Add(item.SunPresets);
            hash.Add(item.PhotoModeFeatures);
            hash.Add(item.GameplayOptions);
            hash.Add(item.GameplayOptionsGroups);
            hash.Add(item.TimeOfDays);
            hash.Add(item.ActorValueModulations);
            hash.Add(item.Challenges);
            hash.Add(item.FacialExpressions);
            hash.Add(item.PERS);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return StarfieldMod.GetNew();
        }
        
        #region Mutagen
        public object? GetGroup(
            IStarfieldModGetter obj,
            Type type)
        {
            switch (type.Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    return obj.Keywords;
                case "FFKWRecord":
                case "IFFKWRecordGetter":
                case "IFFKWRecord":
                case "IFFKWRecordInternal":
                    return obj.FFKW;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    return obj.LocationReferenceTypes;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    return obj.Actions;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    return obj.Transforms;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    return obj.TextureSets;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals;
                case "DamageType":
                case "IDamageTypeGetter":
                case "IDamageType":
                case "IDamageTypeInternal":
                    return obj.DamageTypes;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions;
                case "AffinityEvent":
                case "IAffinityEventGetter":
                case "IAffinityEvent":
                case "IAffinityEventInternal":
                    return obj.AffinityEvents;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    return obj.HeadParts;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    return obj.SoundMarkers;
                case "SoundEchoMarker":
                case "ISoundEchoMarkerGetter":
                case "ISoundEchoMarker":
                case "ISoundEchoMarkerInternal":
                    return obj.SoundEchoMarkers;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    return obj.AcousticSpaces;
                case "AudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveGetter":
                case "IAudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveInternal":
                    return obj.AudioOcclusionPrimitives;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    return obj.MagicEffects;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    return obj.LandscapeTextures;
                case "ProjectedDecal":
                case "IProjectedDecalGetter":
                case "IProjectedDecal":
                case "IProjectedDecalInternal":
                    return obj.ProjectedDecals;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    return obj.ObjectEffects;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    return obj.Spells;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    return obj.Activators;
                case "CurveTable":
                case "ICurveTableGetter":
                case "ICurveTable":
                case "ICurveTableInternal":
                    return obj.CurveTables;
                case "Curve3D":
                case "ICurve3DGetter":
                case "ICurve3D":
                case "ICurve3DInternal":
                    return obj.Curve3Ds;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    return obj.Armors;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    return obj.Books;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    return obj.Containers;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    return obj.Doors;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    return obj.Lights;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    return obj.MiscItems;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    return obj.Statics;
                case "StaticCollection":
                case "IStaticCollectionGetter":
                case "IStaticCollection":
                case "IStaticCollectionInternal":
                    return obj.StaticCollections;
                case "PackIn":
                case "IPackInGetter":
                case "IPackIn":
                case "IPackInInternal":
                    return obj.PackIns;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    return obj.MoveableStatics;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    return obj.Grasses;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    return obj.Florae;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    return obj.Furniture;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    return obj.Weapons;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    return obj.Ammunitions;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    return obj.Npcs;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    return obj.LeveledNpcs;
                case "LeveledPackIn":
                case "ILeveledPackInGetter":
                case "ILeveledPackIn":
                case "ILeveledPackInInternal":
                    return obj.LeveledPackIns;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    return obj.Keys;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    return obj.Ingestibles;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    return obj.IdleMarkers;
                case "BiomeMarker":
                case "IBiomeMarkerGetter":
                case "IBiomeMarker":
                case "IBiomeMarkerInternal":
                    return obj.BiomeMarkers;
                case "Note":
                case "INoteGetter":
                case "INote":
                case "INoteInternal":
                    return obj.Notes;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    return obj.Projectiles;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    return obj.Hazards;
                case "BendableSpline":
                case "IBendableSplineGetter":
                case "IBendableSpline":
                case "IBendableSplineInternal":
                    return obj.BendableSplines;
                case "Terminal":
                case "ITerminalGetter":
                case "ITerminal":
                case "ITerminalInternal":
                    return obj.Terminals;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    return obj.LeveledItems;
                case "GenericBaseFormTemplate":
                case "IGenericBaseFormTemplateGetter":
                case "IGenericBaseFormTemplate":
                case "IGenericBaseFormTemplateInternal":
                    return obj.GenericBaseFormTemplates;
                case "GenericBaseForm":
                case "IGenericBaseFormGetter":
                case "IGenericBaseForm":
                case "IGenericBaseFormInternal":
                    return obj.GenericBaseForms;
                case "LeveledBaseForm":
                case "ILeveledBaseFormGetter":
                case "ILeveledBaseForm":
                case "ILeveledBaseFormInternal":
                    return obj.LeveledBaseForms;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    return obj.Weathers;
                case "WeatherSetting":
                case "IWeatherSettingGetter":
                case "IWeatherSetting":
                case "IWeatherSettingInternal":
                    return obj.WeatherSettings;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    return obj.Climates;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    return obj.ShaderParticleGeometries;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    return obj.Regions;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    return obj.NavigationMeshInfoMaps;
                case "CellBlock":
                case "ICellBlockGetter":
                case "ICellBlock":
                    return obj.Cells.Records;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    return obj.Worldspaces;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    return obj.Quests;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    return obj.IdleAnimations;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    return obj.Packages;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    return obj.CombatStyles;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    return obj.LoadScreens;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    return obj.AnimatedObjects;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    return obj.Waters;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    return obj.EffectShaders;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    return obj.Explosions;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    return obj.Debris;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    return obj.ImageSpaces;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    return obj.ImageSpaceAdapters;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    return obj.FormLists;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    return obj.Perks;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    return obj.BodyParts;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    return obj.AddonNodes;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    return obj.ActorValueInformation;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    return obj.CameraShots;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    return obj.CameraPaths;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    return obj.VoiceTypes;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    return obj.MaterialTypes;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    return obj.Impacts;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    return obj.ImpactDataSets;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    return obj.ArmorAddons;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    return obj.Locations;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    return obj.Messages;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    return obj.DefaultObjectManagers;
                case "DefaultObject":
                case "IDefaultObjectGetter":
                case "IDefaultObject":
                case "IDefaultObjectInternal":
                    return obj.DefaultObjects;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    return obj.LightingTemplates;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    return obj.MusicTypes;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    return obj.Footsteps;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    return obj.FootstepSets;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    return obj.StoryManagerBranchNodes;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    return obj.StoryManagerQuestNodes;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    return obj.StoryManagerEventNodes;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    return obj.MusicTracks;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    return obj.EquipTypes;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    return obj.Outfits;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    return obj.ArtObjects;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    return obj.MovementTypes;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    return obj.CollisionLayers;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    return obj.Colors;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    return obj.ReverbParameters;
                case "ReferenceGroup":
                case "IReferenceGroupGetter":
                case "IReferenceGroup":
                case "IReferenceGroupInternal":
                    return obj.ReferenceGroups;
                case "AimModel":
                case "IAimModelGetter":
                case "IAimModel":
                case "IAimModelInternal":
                    return obj.AimModels;
                case "AimAssistModel":
                case "IAimAssistModelGetter":
                case "IAimAssistModel":
                case "IAimAssistModelInternal":
                    return obj.AimAssistModels;
                case "MeleeAimAssistModel":
                case "IMeleeAimAssistModelGetter":
                case "IMeleeAimAssistModel":
                case "IMeleeAimAssistModelInternal":
                    return obj.MeleeAimAssistModels;
                case "Layer":
                case "ILayerGetter":
                case "ILayer":
                case "ILayerInternal":
                    return obj.Layers;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    return obj.ConstructibleObjects;
                case "AObjectModification":
                case "IAObjectModificationGetter":
                case "IAObjectModification":
                case "IAObjectModificationInternal":
                    return obj.ObjectModifications;
                case "Zoom":
                case "IZoomGetter":
                case "IZoom":
                case "IZoomInternal":
                    return obj.Zooms;
                case "InstanceNamingRules":
                case "IInstanceNamingRulesGetter":
                case "IInstanceNamingRules":
                case "IInstanceNamingRulesInternal":
                    return obj.InstanceNamingRules;
                case "SoundKeywordMapping":
                case "ISoundKeywordMappingGetter":
                case "ISoundKeywordMapping":
                case "ISoundKeywordMappingInternal":
                    return obj.SoundKeywordMappings;
                case "AttractionRule":
                case "IAttractionRuleGetter":
                case "IAttractionRule":
                case "IAttractionRuleInternal":
                    return obj.AttractionRules;
                case "SceneCollection":
                case "ISceneCollectionGetter":
                case "ISceneCollection":
                case "ISceneCollectionInternal":
                    return obj.SceneCollections;
                case "AnimationSoundTagSet":
                case "IAnimationSoundTagSetGetter":
                case "IAnimationSoundTagSet":
                case "IAnimationSoundTagSetInternal":
                    return obj.AnimationSoundTagSets;
                case "Resource":
                case "IResourceGetter":
                case "IResource":
                case "IResourceInternal":
                    return obj.Resources;
                case "Biome":
                case "IBiomeGetter":
                case "IBiome":
                case "IBiomeInternal":
                    return obj.Biomes;
                case "NavigationMeshObstacleCoverManager":
                case "INavigationMeshObstacleCoverManagerGetter":
                case "INavigationMeshObstacleCoverManager":
                case "INavigationMeshObstacleCoverManagerInternal":
                    return obj.NavigationMeshObstacleCoverManagers;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    return obj.LensFlares;
                case "ObjectVisibilityManager":
                case "IObjectVisibilityManagerGetter":
                case "IObjectVisibilityManager":
                case "IObjectVisibilityManagerInternal":
                    return obj.ObjectVisibilityManagers;
                case "SnapTemplateNode":
                case "ISnapTemplateNodeGetter":
                case "ISnapTemplateNode":
                case "ISnapTemplateNodeInternal":
                    return obj.SnapTemplateNodes;
                case "SnapTemplate":
                case "ISnapTemplateGetter":
                case "ISnapTemplate":
                case "ISnapTemplateInternal":
                    return obj.SnapTemplates;
                case "GroundCover":
                case "IGroundCoverGetter":
                case "IGroundCover":
                case "IGroundCoverInternal":
                    return obj.GroundCovers;
                case "MorphableObject":
                case "IMorphableObjectGetter":
                case "IMorphableObject":
                case "IMorphableObjectInternal":
                    return obj.MorphableObjects;
                case "Traversal":
                case "ITraversalGetter":
                case "ITraversal":
                case "ITraversalInternal":
                    return obj.Traversals;
                case "ResourceGenerationData":
                case "IResourceGenerationDataGetter":
                case "IResourceGenerationData":
                case "IResourceGenerationDataInternal":
                    return obj.ResourceGenerationData;
                case "BiomeSwap":
                case "IBiomeSwapGetter":
                case "IBiomeSwap":
                case "IBiomeSwapInternal":
                    return obj.BiomeSwaps;
                case "Atmosphere":
                case "IAtmosphereGetter":
                case "IAtmosphere":
                case "IAtmosphereInternal":
                    return obj.Atmospheres;
                case "LeveledSpaceCell":
                case "ILeveledSpaceCellGetter":
                case "ILeveledSpaceCell":
                case "ILeveledSpaceCellInternal":
                    return obj.LeveledSpaceCells;
                case "SpeechChallenge":
                case "ISpeechChallengeGetter":
                case "ISpeechChallenge":
                case "ISpeechChallengeInternal":
                    return obj.SpeechChallenges;
                case "AimAssistPose":
                case "IAimAssistPoseGetter":
                case "IAimAssistPose":
                case "IAimAssistPoseInternal":
                    return obj.AimAssistPoses;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    return obj.VolumetricLightings;
                case "SurfaceBlock":
                case "ISurfaceBlockGetter":
                case "ISurfaceBlock":
                case "ISurfaceBlockInternal":
                    return obj.SurfaceBlocks;
                case "SurfacePatternConfig":
                case "ISurfacePatternConfigGetter":
                case "ISurfacePatternConfig":
                case "ISurfacePatternConfigInternal":
                    return obj.SurfacePatternConfigs;
                case "SurfacePattern":
                case "ISurfacePatternGetter":
                case "ISurfacePattern":
                case "ISurfacePatternInternal":
                    return obj.SurfacePatterns;
                case "SurfaceTree":
                case "ISurfaceTreeGetter":
                case "ISurfaceTree":
                case "ISurfaceTreeInternal":
                    return obj.SurfaceTrees;
                case "PlanetContentManagerTree":
                case "IPlanetContentManagerTreeGetter":
                case "IPlanetContentManagerTree":
                case "IPlanetContentManagerTreeInternal":
                    return obj.PlanetContentManagerTrees;
                case "BoneModifier":
                case "IBoneModifierGetter":
                case "IBoneModifier":
                case "IBoneModifierInternal":
                    return obj.BoneModifiers;
                case "SnapTemplateBehavior":
                case "ISnapTemplateBehaviorGetter":
                case "ISnapTemplateBehavior":
                case "ISnapTemplateBehaviorInternal":
                    return obj.SnapTemplateBehaviors;
                case "Planet":
                case "IPlanetGetter":
                case "IPlanet":
                case "IPlanetInternal":
                    return obj.Planets;
                case "ConditionRecord":
                case "IConditionRecordGetter":
                case "IConditionRecord":
                case "IConditionRecordInternal":
                    return obj.ConditionRecords;
                case "PlanetContentManagerBranchNode":
                case "IPlanetContentManagerBranchNodeGetter":
                case "IPlanetContentManagerBranchNode":
                case "IPlanetContentManagerBranchNodeInternal":
                    return obj.PlanetContentManagerBranchNodes;
                case "PlanetContentManagerContentNode":
                case "IPlanetContentManagerContentNodeGetter":
                case "IPlanetContentManagerContentNode":
                case "IPlanetContentManagerContentNodeInternal":
                    return obj.PlanetContentManagerContentNodes;
                case "Star":
                case "IStarGetter":
                case "IStar":
                case "IStarInternal":
                    return obj.Stars;
                case "WWiseEventData":
                case "IWWiseEventDataGetter":
                case "IWWiseEventData":
                case "IWWiseEventDataInternal":
                    return obj.WWiseEventDatas;
                case "ResearchProject":
                case "IResearchProjectGetter":
                case "IResearchProject":
                case "IResearchProjectInternal":
                    return obj.ResearchProjects;
                case "AimOpticalSightMarker":
                case "IAimOpticalSightMarkerGetter":
                case "IAimOpticalSightMarker":
                case "IAimOpticalSightMarkerInternal":
                    return obj.AimOpticalSightMarkers;
                case "AmbienceSet":
                case "IAmbienceSetGetter":
                case "IAmbienceSet":
                case "IAmbienceSetInternal":
                    return obj.AmbienceSets;
                case "WeaponBarrelModel":
                case "IWeaponBarrelModelGetter":
                case "IWeaponBarrelModel":
                case "IWeaponBarrelModelInternal":
                    return obj.WeaponBarrelModels;
                case "SurfacePatternStyle":
                case "ISurfacePatternStyleGetter":
                case "ISurfacePatternStyle":
                case "ISurfacePatternStyleInternal":
                    return obj.SurfacePatternStyles;
                case "LayeredMaterialSwap":
                case "ILayeredMaterialSwapGetter":
                case "ILayeredMaterialSwap":
                case "ILayeredMaterialSwapInternal":
                    return obj.LayeredMaterialSwaps;
                case "ForceData":
                case "IForceDataGetter":
                case "IForceData":
                case "IForceDataInternal":
                    return obj.ForceDatas;
                case "TerminalMenu":
                case "ITerminalMenuGetter":
                case "ITerminalMenu":
                case "ITerminalMenuInternal":
                    return obj.TerminalMenus;
                case "EffectSequence":
                case "IEffectSequenceGetter":
                case "IEffectSequence":
                case "IEffectSequenceInternal":
                    return obj.EffectSequences;
                case "SecondaryDamageList":
                case "ISecondaryDamageListGetter":
                case "ISecondaryDamageList":
                case "ISecondaryDamageListInternal":
                    return obj.SecondaryDamageLists;
                case "MaterialPath":
                case "IMaterialPathGetter":
                case "IMaterialPath":
                case "IMaterialPathInternal":
                    return obj.MaterialPaths;
                case "Clouds":
                case "ICloudsGetter":
                case "IClouds":
                case "ICloudsInternal":
                    return obj.Clouds;
                case "FogVolume":
                case "IFogVolumeGetter":
                case "IFogVolume":
                case "IFogVolumeInternal":
                    return obj.FogVolumes;
                case "WWiseKeywordMapping":
                case "IWWiseKeywordMappingGetter":
                case "IWWiseKeywordMapping":
                case "IWWiseKeywordMappingInternal":
                    return obj.WWiseKeywordMappings;
                case "LegendaryItem":
                case "ILegendaryItemGetter":
                case "ILegendaryItem":
                case "ILegendaryItemInternal":
                    return obj.LegendaryItems;
                case "ParticleSystemDefineCollision":
                case "IParticleSystemDefineCollisionGetter":
                case "IParticleSystemDefineCollision":
                case "IParticleSystemDefineCollisionInternal":
                    return obj.ParticleSystemDefineCollisions;
                case "SunPreset":
                case "ISunPresetGetter":
                case "ISunPreset":
                case "ISunPresetInternal":
                    return obj.SunPresets;
                case "PhotoModeFeature":
                case "IPhotoModeFeatureGetter":
                case "IPhotoModeFeature":
                case "IPhotoModeFeatureInternal":
                    return obj.PhotoModeFeatures;
                case "GameplayOptions":
                case "IGameplayOptionsGetter":
                case "IGameplayOptions":
                case "IGameplayOptionsInternal":
                    return obj.GameplayOptions;
                case "GameplayOptionsGroup":
                case "IGameplayOptionsGroupGetter":
                case "IGameplayOptionsGroup":
                case "IGameplayOptionsGroupInternal":
                    return obj.GameplayOptionsGroups;
                case "TimeOfDayRecord":
                case "ITimeOfDayRecordGetter":
                case "ITimeOfDayRecord":
                case "ITimeOfDayRecordInternal":
                    return obj.TimeOfDays;
                case "ActorValueModulation":
                case "IActorValueModulationGetter":
                case "IActorValueModulation":
                case "IActorValueModulationInternal":
                    return obj.ActorValueModulations;
                case "Challenge":
                case "IChallengeGetter":
                case "IChallenge":
                case "IChallengeInternal":
                    return obj.Challenges;
                case "FacialExpression":
                case "IFacialExpressionGetter":
                case "IFacialExpression":
                case "IFacialExpressionInternal":
                    return obj.FacialExpressions;
                case "PERS":
                case "IPERSGetter":
                case "IPERS":
                case "IPERSInternal":
                    return obj.PERS;
                default:
                    return null;
            }
        }
        
        public static void WriteParallel(
            IStarfieldModGetter item,
            MutagenWriter writer,
            BinaryWriteParameters param,
            ModKey modKey)
        {
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            Stream[] outputStreams = new Stream[176];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, 0, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Keywords, 1, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.FFKW, 2, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LocationReferenceTypes, 3, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Actions, 4, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Transforms, 5, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.TextureSets, 6, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Globals, 7, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DamageTypes, 8, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Classes, 9, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Factions, 10, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AffinityEvents, 11, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.HeadParts, 12, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Races, 13, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundMarkers, 14, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundEchoMarkers, 15, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AcousticSpaces, 16, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AudioOcclusionPrimitives, 17, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MagicEffects, 18, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LandscapeTextures, 19, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ProjectedDecals, 20, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ObjectEffects, 21, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Spells, 22, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Activators, 23, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CurveTables, 24, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Curve3Ds, 25, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Armors, 26, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Books, 27, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Containers, 28, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Doors, 29, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Lights, 30, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MiscItems, 31, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Statics, 32, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StaticCollections, 33, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.PackIns, 34, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MoveableStatics, 35, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Grasses, 36, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Florae, 37, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Furniture, 38, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Weapons, 39, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Ammunitions, 40, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Npcs, 41, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledNpcs, 42, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledPackIns, 43, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Keys, 44, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Ingestibles, 45, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.IdleMarkers, 46, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.BiomeMarkers, 47, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Notes, 48, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Projectiles, 49, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Hazards, 50, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.BendableSplines, 51, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Terminals, 52, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledItems, 53, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.GenericBaseFormTemplates, 54, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.GenericBaseForms, 55, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledBaseForms, 56, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Weathers, 57, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.WeatherSettings, 58, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Climates, 59, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ShaderParticleGeometries, 60, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Regions, 61, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.NavigationMeshInfoMaps, 62, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteCellsParallel(item.Cells, 63, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteWorldspacesParallel(item.Worldspaces, 64, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteQuestsParallel(item.Quests, 65, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.IdleAnimations, 66, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Packages, 67, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CombatStyles, 68, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LoadScreens, 69, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AnimatedObjects, 70, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Waters, 71, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.EffectShaders, 72, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Explosions, 73, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Debris, 74, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ImageSpaces, 75, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ImageSpaceAdapters, 76, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.FormLists, 77, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Perks, 78, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.BodyParts, 79, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AddonNodes, 80, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ActorValueInformation, 81, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CameraShots, 82, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CameraPaths, 83, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.VoiceTypes, 84, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MaterialTypes, 85, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Impacts, 86, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ImpactDataSets, 87, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ArmorAddons, 88, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Locations, 89, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Messages, 90, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DefaultObjectManagers, 91, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DefaultObjects, 92, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LightingTemplates, 93, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MusicTypes, 94, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Footsteps, 95, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.FootstepSets, 96, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerBranchNodes, 97, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerQuestNodes, 98, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerEventNodes, 99, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MusicTracks, 100, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.EquipTypes, 101, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Outfits, 102, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ArtObjects, 103, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MovementTypes, 104, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CollisionLayers, 105, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Colors, 106, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ReverbParameters, 107, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ReferenceGroups, 108, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AimModels, 109, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AimAssistModels, 110, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MeleeAimAssistModels, 111, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Layers, 112, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ConstructibleObjects, 113, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ObjectModifications, 114, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Zooms, 115, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.InstanceNamingRules, 116, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundKeywordMappings, 117, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AttractionRules, 118, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SceneCollections, 119, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AnimationSoundTagSets, 120, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Resources, 121, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Biomes, 122, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.NavigationMeshObstacleCoverManagers, 123, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LensFlares, 124, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ObjectVisibilityManagers, 125, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SnapTemplateNodes, 126, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SnapTemplates, 127, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.GroundCovers, 128, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MorphableObjects, 129, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Traversals, 130, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ResourceGenerationData, 131, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.BiomeSwaps, 132, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Atmospheres, 133, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledSpaceCells, 134, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SpeechChallenges, 135, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AimAssistPoses, 136, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.VolumetricLightings, 137, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SurfaceBlocks, 138, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SurfacePatternConfigs, 139, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SurfacePatterns, 140, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SurfaceTrees, 141, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.PlanetContentManagerTrees, 142, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.BoneModifiers, 143, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SnapTemplateBehaviors, 144, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Planets, 145, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ConditionRecords, 146, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.PlanetContentManagerBranchNodes, 147, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.PlanetContentManagerContentNodes, 148, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Stars, 149, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.WWiseEventDatas, 150, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ResearchProjects, 151, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AimOpticalSightMarkers, 152, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AmbienceSets, 153, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.WeaponBarrelModels, 154, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SurfacePatternStyles, 155, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LayeredMaterialSwaps, 156, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ForceDatas, 157, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.TerminalMenus, 158, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.EffectSequences, 159, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SecondaryDamageLists, 160, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MaterialPaths, 161, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Clouds, 162, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.FogVolumes, 163, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.WWiseKeywordMappings, 164, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LegendaryItems, 165, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ParticleSystemDefineCollisions, 166, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SunPresets, 167, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.PhotoModeFeatures, 168, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.GameplayOptions, 169, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.GameplayOptionsGroups, 170, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.TimeOfDays, 171, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ActorValueModulations, 172, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Challenges, 173, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.FacialExpressions, 174, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.PERS, 175, outputStreams, writer.MetaData, param.Parallel));
            Parallel.Invoke(param.Parallel.ParallelOptions, toDo.ToArray());
            PluginUtilityTranslation.CompileStreamsInto(
                outputStreams.WhereNotNull(),
                writer.BaseStream);
        }
        
        public static void WriteGroupParallel<T>(
            IStarfieldGroupGetter<T> group,
            int targetIndex,
            Stream[] streamDepositArray,
            WritingBundle bundle,
            ParallelWriteParameters parallelParam)
            where T : class, IStarfieldMajorRecordGetter, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Cut(parallelParam.CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[bundle.Constants.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), RecordTypes.GRUP.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, bundle.Constants, dispose: false))
            {
                stream.Position += 8;
                StarfieldGroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, parallelParam.ParallelOptions, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, bundle with {}, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            PluginUtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public uint GetRecordCount(IStarfieldModGetter item)
        {
            uint count = (uint)item.EnumerateMajorRecords().Count();
            count += item.GameSettings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Keywords.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.FFKW.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LocationReferenceTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Actions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Transforms.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.TextureSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Globals.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DamageTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Classes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Factions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AffinityEvents.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.HeadParts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Races.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundEchoMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AcousticSpaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AudioOcclusionPrimitives.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MagicEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LandscapeTextures.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ProjectedDecals.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ObjectEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Spells.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Activators.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CurveTables.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Curve3Ds.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Armors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Books.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Containers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Doors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Lights.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MiscItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Statics.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StaticCollections.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.PackIns.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MoveableStatics.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Grasses.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Florae.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Furniture.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Weapons.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Ammunitions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Npcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledNpcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledPackIns.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Keys.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Ingestibles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.IdleMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.BiomeMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Notes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Projectiles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Hazards.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.BendableSplines.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Terminals.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.GenericBaseFormTemplates.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.GenericBaseForms.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledBaseForms.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Weathers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.WeatherSettings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Climates.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ShaderParticleGeometries.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Regions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.NavigationMeshInfoMaps.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Cells.Records.Count > 0 ? 1 : default(uint);
            count += item.Worldspaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Quests.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.IdleAnimations.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Packages.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CombatStyles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LoadScreens.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AnimatedObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Waters.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.EffectShaders.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Explosions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Debris.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ImageSpaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ImageSpaceAdapters.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.FormLists.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Perks.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.BodyParts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AddonNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ActorValueInformation.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CameraShots.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CameraPaths.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.VoiceTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MaterialTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Impacts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ImpactDataSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ArmorAddons.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Locations.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Messages.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DefaultObjectManagers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DefaultObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LightingTemplates.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MusicTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Footsteps.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.FootstepSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StoryManagerBranchNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StoryManagerQuestNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StoryManagerEventNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MusicTracks.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.EquipTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Outfits.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ArtObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MovementTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CollisionLayers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Colors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ReverbParameters.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ReferenceGroups.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AimModels.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AimAssistModels.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MeleeAimAssistModels.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Layers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ConstructibleObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ObjectModifications.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Zooms.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.InstanceNamingRules.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundKeywordMappings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AttractionRules.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SceneCollections.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AnimationSoundTagSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Resources.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Biomes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.NavigationMeshObstacleCoverManagers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LensFlares.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ObjectVisibilityManagers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SnapTemplateNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SnapTemplates.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.GroundCovers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MorphableObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Traversals.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ResourceGenerationData.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.BiomeSwaps.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Atmospheres.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledSpaceCells.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SpeechChallenges.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AimAssistPoses.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.VolumetricLightings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SurfaceBlocks.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SurfacePatternConfigs.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SurfacePatterns.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SurfaceTrees.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.PlanetContentManagerTrees.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.BoneModifiers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SnapTemplateBehaviors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Planets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ConditionRecords.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.PlanetContentManagerBranchNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.PlanetContentManagerContentNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Stars.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.WWiseEventDatas.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ResearchProjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AimOpticalSightMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AmbienceSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.WeaponBarrelModels.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SurfacePatternStyles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LayeredMaterialSwaps.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ForceDatas.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.TerminalMenus.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.EffectSequences.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SecondaryDamageLists.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MaterialPaths.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Clouds.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.FogVolumes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.WWiseKeywordMappings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LegendaryItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ParticleSystemDefineCollisions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SunPresets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.PhotoModeFeatures.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.GameplayOptions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.GameplayOptionsGroups.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.TimeOfDays.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ActorValueModulations.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Challenges.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.FacialExpressions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.PERS.RecordCache.Count > 0 ? 1 : default(uint);
            GetCustomRecordCount(item, (customCount) => count += customCount);
            return count;
        }
        
        partial void GetCustomRecordCount(IStarfieldModGetter item, Action<uint> setter);
        
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStarfieldModGetter obj)
        {
            foreach (var item in obj.ModHeader.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.LocationReferenceTypes is IFormLinkContainerGetter LocationReferenceTypeslinkCont)
            {
                foreach (var item in LocationReferenceTypeslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Actions.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.Globals is IFormLinkContainerGetter GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.DamageTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AffinityEvents.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundMarkers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundEchoMarkers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AcousticSpaces.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LandscapeTextures.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ProjectedDecals.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectEffects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MiscItems.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StaticCollections.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.PackIns.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MoveableStatics.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.Grasses is IFormLinkContainerGetter GrasseslinkCont)
            {
                foreach (var item in GrasseslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Florae.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledNpcs.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledPackIns.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Ingestibles.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.IdleMarkers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.BiomeMarkers.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.Notes is IFormLinkContainerGetter NoteslinkCont)
            {
                foreach (var item in NoteslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Projectiles.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Hazards.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.BendableSplines.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Terminals.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.GenericBaseForms.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledBaseForms.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.WeatherSettings.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshInfoMaps.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Packages.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.CombatStyles.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.AnimatedObjects is IFormLinkContainerGetter AnimatedObjectslinkCont)
            {
                foreach (var item in AnimatedObjectslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Waters.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Explosions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaces.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.FormLists.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Perks.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.BodyParts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AddonNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.CameraShots.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.CameraPaths.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.VoiceTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Impacts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ImpactDataSets.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ArmorAddons.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Locations.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Messages.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjectManagers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Footsteps.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.FootstepSets.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerBranchNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerQuestNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerEventNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTracks.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.EquipTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Outfits.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ArtObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.CollisionLayers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Colors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ReferenceGroups.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Layers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ConstructibleObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectModifications.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Zooms.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.InstanceNamingRules.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundKeywordMappings.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SceneCollections.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AnimationSoundTagSets.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Resources.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Biomes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectVisibilityManagers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SnapTemplateNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SnapTemplates.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.GroundCovers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MorphableObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ResourceGenerationData.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Atmospheres.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledSpaceCells.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SpeechChallenges.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SurfaceBlocks.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SurfacePatternConfigs.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SurfacePatterns.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SurfaceTrees.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.PlanetContentManagerTrees.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.BoneModifiers is IFormLinkContainerGetter BoneModifierslinkCont)
            {
                foreach (var item in BoneModifierslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.SnapTemplateBehaviors is IFormLinkContainerGetter SnapTemplateBehaviorslinkCont)
            {
                foreach (var item in SnapTemplateBehaviorslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Planets.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ConditionRecords.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.PlanetContentManagerBranchNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.PlanetContentManagerContentNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Stars.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.WWiseEventDatas.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ResearchProjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AimOpticalSightMarkers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AmbienceSets.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.LayeredMaterialSwaps is IFormLinkContainerGetter LayeredMaterialSwapslinkCont)
            {
                foreach (var item in LayeredMaterialSwapslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.TerminalMenus is IFormLinkContainerGetter TerminalMenuslinkCont)
            {
                foreach (var item in TerminalMenuslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.SecondaryDamageLists.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.WWiseKeywordMappings.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LegendaryItems.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SunPresets.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.PhotoModeFeatures.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.GameplayOptions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.GameplayOptionsGroups.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.TimeOfDays is IFormLinkContainerGetter TimeOfDayslinkCont)
            {
                foreach (var item in TimeOfDayslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.ActorValueModulations.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.Challenges is IFormLinkContainerGetter ChallengeslinkCont)
            {
                foreach (var item in ChallengeslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.PERS.EnumerateFormLinks())
            {
                yield return item;
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(IStarfieldModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FFKW.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Actions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Transforms.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TextureSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DamageTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AffinityEvents.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundEchoMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AudioOcclusionPrimitives.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ProjectedDecals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CurveTables.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Curve3Ds.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MiscItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StaticCollections.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.PackIns.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MoveableStatics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Florae.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledPackIns.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingestibles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BiomeMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Notes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Projectiles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hazards.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BendableSplines.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Terminals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.GenericBaseFormTemplates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.GenericBaseForms.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledBaseForms.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.WeatherSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ShaderParticleGeometries.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshInfoMaps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Packages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CombatStyles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Explosions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Debris.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaceAdapters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FormLists.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Perks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BodyParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AddonNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ActorValueInformation.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CameraShots.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CameraPaths.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VoiceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Impacts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImpactDataSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ArmorAddons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Locations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Messages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjectManagers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LightingTemplates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Footsteps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FootstepSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerBranchNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerQuestNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerEventNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTracks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EquipTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Outfits.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ArtObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MovementTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CollisionLayers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Colors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ReverbParameters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ReferenceGroups.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AimModels.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AimAssistModels.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MeleeAimAssistModels.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Layers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectModifications.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Zooms.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.InstanceNamingRules.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundKeywordMappings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AttractionRules.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SceneCollections.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AnimationSoundTagSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Resources.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Biomes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshObstacleCoverManagers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LensFlares.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectVisibilityManagers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SnapTemplateNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SnapTemplates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.GroundCovers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MorphableObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Traversals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ResourceGenerationData.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BiomeSwaps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Atmospheres.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledSpaceCells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SpeechChallenges.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AimAssistPoses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VolumetricLightings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SurfaceBlocks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SurfacePatternConfigs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SurfacePatterns.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SurfaceTrees.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.PlanetContentManagerTrees.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BoneModifiers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SnapTemplateBehaviors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Planets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ConditionRecords.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.PlanetContentManagerBranchNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.PlanetContentManagerContentNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Stars.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.WWiseEventDatas.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ResearchProjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AimOpticalSightMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AmbienceSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.WeaponBarrelModels.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SurfacePatternStyles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LayeredMaterialSwaps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ForceDatas.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TerminalMenus.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EffectSequences.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SecondaryDamageLists.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialPaths.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Clouds.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FogVolumes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.WWiseKeywordMappings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LegendaryItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ParticleSystemDefineCollisions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SunPresets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.PhotoModeFeatures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.GameplayOptions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.GameplayOptionsGroups.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TimeOfDays.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ActorValueModulations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Challenges.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FacialExpressions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.PERS.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IStarfieldModGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IStarfieldModGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                    if (!StarfieldMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in obj.Keywords.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FFKWRecord":
                case "IFFKWRecordGetter":
                case "IFFKWRecord":
                case "IFFKWRecordInternal":
                    foreach (var item in obj.FFKW.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in obj.Actions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    foreach (var item in obj.Transforms.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in obj.TextureSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DamageType":
                case "IDamageTypeGetter":
                case "IDamageType":
                case "IDamageTypeInternal":
                    foreach (var item in obj.DamageTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AffinityEvent":
                case "IAffinityEventGetter":
                case "IAffinityEvent":
                case "IAffinityEventInternal":
                    foreach (var item in obj.AffinityEvents.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in obj.HeadParts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    foreach (var item in obj.SoundMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundEchoMarker":
                case "ISoundEchoMarkerGetter":
                case "ISoundEchoMarker":
                case "ISoundEchoMarkerInternal":
                    foreach (var item in obj.SoundEchoMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveGetter":
                case "IAudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveInternal":
                    foreach (var item in obj.AudioOcclusionPrimitives.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ProjectedDecal":
                case "IProjectedDecalGetter":
                case "IProjectedDecal":
                case "IProjectedDecalInternal":
                    foreach (var item in obj.ProjectedDecals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    foreach (var item in obj.ObjectEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in obj.Spells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CurveTable":
                case "ICurveTableGetter":
                case "ICurveTable":
                case "ICurveTableInternal":
                    foreach (var item in obj.CurveTables.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Curve3D":
                case "ICurve3DGetter":
                case "ICurve3D":
                case "ICurve3DInternal":
                    foreach (var item in obj.Curve3Ds.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    foreach (var item in obj.MiscItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StaticCollection":
                case "IStaticCollectionGetter":
                case "IStaticCollection":
                case "IStaticCollectionInternal":
                    foreach (var item in obj.StaticCollections.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PackIn":
                case "IPackInGetter":
                case "IPackIn":
                case "IPackInInternal":
                    foreach (var item in obj.PackIns.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    foreach (var item in obj.MoveableStatics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Florae.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in obj.Furniture.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in obj.Ammunitions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledPackIn":
                case "ILeveledPackInGetter":
                case "ILeveledPackIn":
                case "ILeveledPackInInternal":
                    foreach (var item in obj.LeveledPackIns.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    foreach (var item in obj.Ingestibles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    foreach (var item in obj.IdleMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BiomeMarker":
                case "IBiomeMarkerGetter":
                case "IBiomeMarker":
                case "IBiomeMarkerInternal":
                    foreach (var item in obj.BiomeMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Note":
                case "INoteGetter":
                case "INote":
                case "INoteInternal":
                    foreach (var item in obj.Notes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    foreach (var item in obj.Projectiles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    foreach (var item in obj.Hazards.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BendableSpline":
                case "IBendableSplineGetter":
                case "IBendableSpline":
                case "IBendableSplineInternal":
                    foreach (var item in obj.BendableSplines.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Terminal":
                case "ITerminalGetter":
                case "ITerminal":
                case "ITerminalInternal":
                    foreach (var item in obj.Terminals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "GenericBaseFormTemplate":
                case "IGenericBaseFormTemplateGetter":
                case "IGenericBaseFormTemplate":
                case "IGenericBaseFormTemplateInternal":
                    foreach (var item in obj.GenericBaseFormTemplates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "GenericBaseForm":
                case "IGenericBaseFormGetter":
                case "IGenericBaseForm":
                case "IGenericBaseFormInternal":
                    foreach (var item in obj.GenericBaseForms.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledBaseForm":
                case "ILeveledBaseFormGetter":
                case "ILeveledBaseForm":
                case "ILeveledBaseFormInternal":
                    foreach (var item in obj.LeveledBaseForms.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in obj.Weathers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "WeatherSetting":
                case "IWeatherSettingGetter":
                case "IWeatherSetting":
                case "IWeatherSettingInternal":
                    foreach (var item in obj.WeatherSettings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in obj.Climates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    foreach (var item in obj.ShaderParticleGeometries.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in obj.Regions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    foreach (var item in obj.NavigationMeshInfoMaps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in obj.IdleAnimations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    foreach (var item in obj.Packages.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in obj.CombatStyles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in obj.LoadScreens.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in obj.Waters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in obj.EffectShaders.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    foreach (var item in obj.Explosions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in obj.Debris.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    foreach (var item in obj.ImageSpaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    foreach (var item in obj.ImageSpaceAdapters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    foreach (var item in obj.FormLists.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    foreach (var item in obj.Perks.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    foreach (var item in obj.BodyParts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    foreach (var item in obj.AddonNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    foreach (var item in obj.ActorValueInformation.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    foreach (var item in obj.CameraShots.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    foreach (var item in obj.CameraPaths.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    foreach (var item in obj.VoiceTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    foreach (var item in obj.MaterialTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    foreach (var item in obj.Impacts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    foreach (var item in obj.ImpactDataSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    foreach (var item in obj.ArmorAddons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    foreach (var item in obj.Locations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    foreach (var item in obj.Messages.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    foreach (var item in obj.DefaultObjectManagers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObject":
                case "IDefaultObjectGetter":
                case "IDefaultObject":
                case "IDefaultObjectInternal":
                    foreach (var item in obj.DefaultObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    foreach (var item in obj.LightingTemplates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    foreach (var item in obj.MusicTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    foreach (var item in obj.Footsteps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    foreach (var item in obj.FootstepSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    foreach (var item in obj.StoryManagerBranchNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    foreach (var item in obj.StoryManagerQuestNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    foreach (var item in obj.StoryManagerEventNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    foreach (var item in obj.MusicTracks.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    foreach (var item in obj.EquipTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    foreach (var item in obj.Outfits.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    foreach (var item in obj.ArtObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    foreach (var item in obj.MovementTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    foreach (var item in obj.CollisionLayers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    foreach (var item in obj.Colors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    foreach (var item in obj.ReverbParameters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReferenceGroup":
                case "IReferenceGroupGetter":
                case "IReferenceGroup":
                case "IReferenceGroupInternal":
                    foreach (var item in obj.ReferenceGroups.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AimModel":
                case "IAimModelGetter":
                case "IAimModel":
                case "IAimModelInternal":
                    foreach (var item in obj.AimModels.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AimAssistModel":
                case "IAimAssistModelGetter":
                case "IAimAssistModel":
                case "IAimAssistModelInternal":
                    foreach (var item in obj.AimAssistModels.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MeleeAimAssistModel":
                case "IMeleeAimAssistModelGetter":
                case "IMeleeAimAssistModel":
                case "IMeleeAimAssistModelInternal":
                    foreach (var item in obj.MeleeAimAssistModels.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Layer":
                case "ILayerGetter":
                case "ILayer":
                case "ILayerInternal":
                    foreach (var item in obj.Layers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AObjectModification":
                case "IAObjectModificationGetter":
                case "IAObjectModification":
                case "IAObjectModificationInternal":
                    foreach (var item in obj.ObjectModifications.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Zoom":
                case "IZoomGetter":
                case "IZoom":
                case "IZoomInternal":
                    foreach (var item in obj.Zooms.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "InstanceNamingRules":
                case "IInstanceNamingRulesGetter":
                case "IInstanceNamingRules":
                case "IInstanceNamingRulesInternal":
                    foreach (var item in obj.InstanceNamingRules.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundKeywordMapping":
                case "ISoundKeywordMappingGetter":
                case "ISoundKeywordMapping":
                case "ISoundKeywordMappingInternal":
                    foreach (var item in obj.SoundKeywordMappings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AttractionRule":
                case "IAttractionRuleGetter":
                case "IAttractionRule":
                case "IAttractionRuleInternal":
                    foreach (var item in obj.AttractionRules.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SceneCollection":
                case "ISceneCollectionGetter":
                case "ISceneCollection":
                case "ISceneCollectionInternal":
                    foreach (var item in obj.SceneCollections.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimationSoundTagSet":
                case "IAnimationSoundTagSetGetter":
                case "IAnimationSoundTagSet":
                case "IAnimationSoundTagSetInternal":
                    foreach (var item in obj.AnimationSoundTagSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Resource":
                case "IResourceGetter":
                case "IResource":
                case "IResourceInternal":
                    foreach (var item in obj.Resources.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Biome":
                case "IBiomeGetter":
                case "IBiome":
                case "IBiomeInternal":
                    foreach (var item in obj.Biomes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshObstacleCoverManager":
                case "INavigationMeshObstacleCoverManagerGetter":
                case "INavigationMeshObstacleCoverManager":
                case "INavigationMeshObstacleCoverManagerInternal":
                    foreach (var item in obj.NavigationMeshObstacleCoverManagers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    foreach (var item in obj.LensFlares.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectVisibilityManager":
                case "IObjectVisibilityManagerGetter":
                case "IObjectVisibilityManager":
                case "IObjectVisibilityManagerInternal":
                    foreach (var item in obj.ObjectVisibilityManagers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SnapTemplateNode":
                case "ISnapTemplateNodeGetter":
                case "ISnapTemplateNode":
                case "ISnapTemplateNodeInternal":
                    foreach (var item in obj.SnapTemplateNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SnapTemplate":
                case "ISnapTemplateGetter":
                case "ISnapTemplate":
                case "ISnapTemplateInternal":
                    foreach (var item in obj.SnapTemplates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "GroundCover":
                case "IGroundCoverGetter":
                case "IGroundCover":
                case "IGroundCoverInternal":
                    foreach (var item in obj.GroundCovers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MorphableObject":
                case "IMorphableObjectGetter":
                case "IMorphableObject":
                case "IMorphableObjectInternal":
                    foreach (var item in obj.MorphableObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Traversal":
                case "ITraversalGetter":
                case "ITraversal":
                case "ITraversalInternal":
                    foreach (var item in obj.Traversals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ResourceGenerationData":
                case "IResourceGenerationDataGetter":
                case "IResourceGenerationData":
                case "IResourceGenerationDataInternal":
                    foreach (var item in obj.ResourceGenerationData.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BiomeSwap":
                case "IBiomeSwapGetter":
                case "IBiomeSwap":
                case "IBiomeSwapInternal":
                    foreach (var item in obj.BiomeSwaps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Atmosphere":
                case "IAtmosphereGetter":
                case "IAtmosphere":
                case "IAtmosphereInternal":
                    foreach (var item in obj.Atmospheres.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledSpaceCell":
                case "ILeveledSpaceCellGetter":
                case "ILeveledSpaceCell":
                case "ILeveledSpaceCellInternal":
                    foreach (var item in obj.LeveledSpaceCells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SpeechChallenge":
                case "ISpeechChallengeGetter":
                case "ISpeechChallenge":
                case "ISpeechChallengeInternal":
                    foreach (var item in obj.SpeechChallenges.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AimAssistPose":
                case "IAimAssistPoseGetter":
                case "IAimAssistPose":
                case "IAimAssistPoseInternal":
                    foreach (var item in obj.AimAssistPoses.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    foreach (var item in obj.VolumetricLightings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfaceBlock":
                case "ISurfaceBlockGetter":
                case "ISurfaceBlock":
                case "ISurfaceBlockInternal":
                    foreach (var item in obj.SurfaceBlocks.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfacePatternConfig":
                case "ISurfacePatternConfigGetter":
                case "ISurfacePatternConfig":
                case "ISurfacePatternConfigInternal":
                    foreach (var item in obj.SurfacePatternConfigs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfacePattern":
                case "ISurfacePatternGetter":
                case "ISurfacePattern":
                case "ISurfacePatternInternal":
                    foreach (var item in obj.SurfacePatterns.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfaceTree":
                case "ISurfaceTreeGetter":
                case "ISurfaceTree":
                case "ISurfaceTreeInternal":
                    foreach (var item in obj.SurfaceTrees.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlanetContentManagerTree":
                case "IPlanetContentManagerTreeGetter":
                case "IPlanetContentManagerTree":
                case "IPlanetContentManagerTreeInternal":
                    foreach (var item in obj.PlanetContentManagerTrees.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BoneModifier":
                case "IBoneModifierGetter":
                case "IBoneModifier":
                case "IBoneModifierInternal":
                    foreach (var item in obj.BoneModifiers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SnapTemplateBehavior":
                case "ISnapTemplateBehaviorGetter":
                case "ISnapTemplateBehavior":
                case "ISnapTemplateBehaviorInternal":
                    foreach (var item in obj.SnapTemplateBehaviors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Planet":
                case "IPlanetGetter":
                case "IPlanet":
                case "IPlanetInternal":
                    foreach (var item in obj.Planets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ConditionRecord":
                case "IConditionRecordGetter":
                case "IConditionRecord":
                case "IConditionRecordInternal":
                    foreach (var item in obj.ConditionRecords.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlanetContentManagerBranchNode":
                case "IPlanetContentManagerBranchNodeGetter":
                case "IPlanetContentManagerBranchNode":
                case "IPlanetContentManagerBranchNodeInternal":
                    foreach (var item in obj.PlanetContentManagerBranchNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlanetContentManagerContentNode":
                case "IPlanetContentManagerContentNodeGetter":
                case "IPlanetContentManagerContentNode":
                case "IPlanetContentManagerContentNodeInternal":
                    foreach (var item in obj.PlanetContentManagerContentNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Star":
                case "IStarGetter":
                case "IStar":
                case "IStarInternal":
                    foreach (var item in obj.Stars.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "WWiseEventData":
                case "IWWiseEventDataGetter":
                case "IWWiseEventData":
                case "IWWiseEventDataInternal":
                    foreach (var item in obj.WWiseEventDatas.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ResearchProject":
                case "IResearchProjectGetter":
                case "IResearchProject":
                case "IResearchProjectInternal":
                    foreach (var item in obj.ResearchProjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AimOpticalSightMarker":
                case "IAimOpticalSightMarkerGetter":
                case "IAimOpticalSightMarker":
                case "IAimOpticalSightMarkerInternal":
                    foreach (var item in obj.AimOpticalSightMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AmbienceSet":
                case "IAmbienceSetGetter":
                case "IAmbienceSet":
                case "IAmbienceSetInternal":
                    foreach (var item in obj.AmbienceSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "WeaponBarrelModel":
                case "IWeaponBarrelModelGetter":
                case "IWeaponBarrelModel":
                case "IWeaponBarrelModelInternal":
                    foreach (var item in obj.WeaponBarrelModels.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfacePatternStyle":
                case "ISurfacePatternStyleGetter":
                case "ISurfacePatternStyle":
                case "ISurfacePatternStyleInternal":
                    foreach (var item in obj.SurfacePatternStyles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LayeredMaterialSwap":
                case "ILayeredMaterialSwapGetter":
                case "ILayeredMaterialSwap":
                case "ILayeredMaterialSwapInternal":
                    foreach (var item in obj.LayeredMaterialSwaps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ForceData":
                case "IForceDataGetter":
                case "IForceData":
                case "IForceDataInternal":
                    foreach (var item in obj.ForceDatas.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TerminalMenu":
                case "ITerminalMenuGetter":
                case "ITerminalMenu":
                case "ITerminalMenuInternal":
                    foreach (var item in obj.TerminalMenus.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectSequence":
                case "IEffectSequenceGetter":
                case "IEffectSequence":
                case "IEffectSequenceInternal":
                    foreach (var item in obj.EffectSequences.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SecondaryDamageList":
                case "ISecondaryDamageListGetter":
                case "ISecondaryDamageList":
                case "ISecondaryDamageListInternal":
                    foreach (var item in obj.SecondaryDamageLists.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialPath":
                case "IMaterialPathGetter":
                case "IMaterialPath":
                case "IMaterialPathInternal":
                    foreach (var item in obj.MaterialPaths.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Clouds":
                case "ICloudsGetter":
                case "IClouds":
                case "ICloudsInternal":
                    foreach (var item in obj.Clouds.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FogVolume":
                case "IFogVolumeGetter":
                case "IFogVolume":
                case "IFogVolumeInternal":
                    foreach (var item in obj.FogVolumes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "WWiseKeywordMapping":
                case "IWWiseKeywordMappingGetter":
                case "IWWiseKeywordMapping":
                case "IWWiseKeywordMappingInternal":
                    foreach (var item in obj.WWiseKeywordMappings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LegendaryItem":
                case "ILegendaryItemGetter":
                case "ILegendaryItem":
                case "ILegendaryItemInternal":
                    foreach (var item in obj.LegendaryItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ParticleSystemDefineCollision":
                case "IParticleSystemDefineCollisionGetter":
                case "IParticleSystemDefineCollision":
                case "IParticleSystemDefineCollisionInternal":
                    foreach (var item in obj.ParticleSystemDefineCollisions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SunPreset":
                case "ISunPresetGetter":
                case "ISunPreset":
                case "ISunPresetInternal":
                    foreach (var item in obj.SunPresets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PhotoModeFeature":
                case "IPhotoModeFeatureGetter":
                case "IPhotoModeFeature":
                case "IPhotoModeFeatureInternal":
                    foreach (var item in obj.PhotoModeFeatures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameplayOptions":
                case "IGameplayOptionsGetter":
                case "IGameplayOptions":
                case "IGameplayOptionsInternal":
                    foreach (var item in obj.GameplayOptions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameplayOptionsGroup":
                case "IGameplayOptionsGroupGetter":
                case "IGameplayOptionsGroup":
                case "IGameplayOptionsGroupInternal":
                    foreach (var item in obj.GameplayOptionsGroups.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TimeOfDayRecord":
                case "ITimeOfDayRecordGetter":
                case "ITimeOfDayRecord":
                case "ITimeOfDayRecordInternal":
                    foreach (var item in obj.TimeOfDays.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueModulation":
                case "IActorValueModulationGetter":
                case "IActorValueModulation":
                case "IActorValueModulationInternal":
                    foreach (var item in obj.ActorValueModulations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Challenge":
                case "IChallengeGetter":
                case "IChallenge":
                case "IChallengeInternal":
                    foreach (var item in obj.Challenges.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FacialExpression":
                case "IFacialExpressionGetter":
                case "IFacialExpression":
                case "IFacialExpressionInternal":
                    foreach (var item in obj.FacialExpressions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PERS":
                case "IPERSGetter":
                case "IPERS":
                case "IPERSInternal":
                    foreach (var item in obj.PERS.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Starfield, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IStarfieldModGetter obj,
            ILinkCache linkCache)
        {
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GameSetting, IGameSettingGetter>(
                srcGroup: obj.GameSettings,
                type: typeof(IGameSettingGetter),
                modKey: obj.ModKey,
                group: (m) => m.GameSettings,
                groupGetter: (m) => m.GameSettings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Keyword, IKeywordGetter>(
                srcGroup: obj.Keywords,
                type: typeof(IKeywordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Keywords,
                groupGetter: (m) => m.Keywords))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FFKWRecord, IFFKWRecordGetter>(
                srcGroup: obj.FFKW,
                type: typeof(IFFKWRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.FFKW,
                groupGetter: (m) => m.FFKW))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LocationReferenceType, ILocationReferenceTypeGetter>(
                srcGroup: obj.LocationReferenceTypes,
                type: typeof(ILocationReferenceTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.LocationReferenceTypes,
                groupGetter: (m) => m.LocationReferenceTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ActionRecord, IActionRecordGetter>(
                srcGroup: obj.Actions,
                type: typeof(IActionRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Actions,
                groupGetter: (m) => m.Actions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Transform, ITransformGetter>(
                srcGroup: obj.Transforms,
                type: typeof(ITransformGetter),
                modKey: obj.ModKey,
                group: (m) => m.Transforms,
                groupGetter: (m) => m.Transforms))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, TextureSet, ITextureSetGetter>(
                srcGroup: obj.TextureSets,
                type: typeof(ITextureSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.TextureSets,
                groupGetter: (m) => m.TextureSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Global, IGlobalGetter>(
                srcGroup: obj.Globals,
                type: typeof(IGlobalGetter),
                modKey: obj.ModKey,
                group: (m) => m.Globals,
                groupGetter: (m) => m.Globals))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, DamageType, IDamageTypeGetter>(
                srcGroup: obj.DamageTypes,
                type: typeof(IDamageTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.DamageTypes,
                groupGetter: (m) => m.DamageTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Class, IClassGetter>(
                srcGroup: obj.Classes,
                type: typeof(IClassGetter),
                modKey: obj.ModKey,
                group: (m) => m.Classes,
                groupGetter: (m) => m.Classes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Faction, IFactionGetter>(
                srcGroup: obj.Factions,
                type: typeof(IFactionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Factions,
                groupGetter: (m) => m.Factions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AffinityEvent, IAffinityEventGetter>(
                srcGroup: obj.AffinityEvents,
                type: typeof(IAffinityEventGetter),
                modKey: obj.ModKey,
                group: (m) => m.AffinityEvents,
                groupGetter: (m) => m.AffinityEvents))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, HeadPart, IHeadPartGetter>(
                srcGroup: obj.HeadParts,
                type: typeof(IHeadPartGetter),
                modKey: obj.ModKey,
                group: (m) => m.HeadParts,
                groupGetter: (m) => m.HeadParts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Race, IRaceGetter>(
                srcGroup: obj.Races,
                type: typeof(IRaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Races,
                groupGetter: (m) => m.Races))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SoundMarker, ISoundMarkerGetter>(
                srcGroup: obj.SoundMarkers,
                type: typeof(ISoundMarkerGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundMarkers,
                groupGetter: (m) => m.SoundMarkers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SoundEchoMarker, ISoundEchoMarkerGetter>(
                srcGroup: obj.SoundEchoMarkers,
                type: typeof(ISoundEchoMarkerGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundEchoMarkers,
                groupGetter: (m) => m.SoundEchoMarkers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AcousticSpace, IAcousticSpaceGetter>(
                srcGroup: obj.AcousticSpaces,
                type: typeof(IAcousticSpaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.AcousticSpaces,
                groupGetter: (m) => m.AcousticSpaces))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AudioOcclusionPrimitive, IAudioOcclusionPrimitiveGetter>(
                srcGroup: obj.AudioOcclusionPrimitives,
                type: typeof(IAudioOcclusionPrimitiveGetter),
                modKey: obj.ModKey,
                group: (m) => m.AudioOcclusionPrimitives,
                groupGetter: (m) => m.AudioOcclusionPrimitives))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MagicEffect, IMagicEffectGetter>(
                srcGroup: obj.MagicEffects,
                type: typeof(IMagicEffectGetter),
                modKey: obj.ModKey,
                group: (m) => m.MagicEffects,
                groupGetter: (m) => m.MagicEffects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LandscapeTexture, ILandscapeTextureGetter>(
                srcGroup: obj.LandscapeTextures,
                type: typeof(ILandscapeTextureGetter),
                modKey: obj.ModKey,
                group: (m) => m.LandscapeTextures,
                groupGetter: (m) => m.LandscapeTextures))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ProjectedDecal, IProjectedDecalGetter>(
                srcGroup: obj.ProjectedDecals,
                type: typeof(IProjectedDecalGetter),
                modKey: obj.ModKey,
                group: (m) => m.ProjectedDecals,
                groupGetter: (m) => m.ProjectedDecals))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ObjectEffect, IObjectEffectGetter>(
                srcGroup: obj.ObjectEffects,
                type: typeof(IObjectEffectGetter),
                modKey: obj.ModKey,
                group: (m) => m.ObjectEffects,
                groupGetter: (m) => m.ObjectEffects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Spell, ISpellGetter>(
                srcGroup: obj.Spells,
                type: typeof(ISpellGetter),
                modKey: obj.ModKey,
                group: (m) => m.Spells,
                groupGetter: (m) => m.Spells))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Activator, IActivatorGetter>(
                srcGroup: obj.Activators,
                type: typeof(IActivatorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Activators,
                groupGetter: (m) => m.Activators))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, CurveTable, ICurveTableGetter>(
                srcGroup: obj.CurveTables,
                type: typeof(ICurveTableGetter),
                modKey: obj.ModKey,
                group: (m) => m.CurveTables,
                groupGetter: (m) => m.CurveTables))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Curve3D, ICurve3DGetter>(
                srcGroup: obj.Curve3Ds,
                type: typeof(ICurve3DGetter),
                modKey: obj.ModKey,
                group: (m) => m.Curve3Ds,
                groupGetter: (m) => m.Curve3Ds))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Armor, IArmorGetter>(
                srcGroup: obj.Armors,
                type: typeof(IArmorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Armors,
                groupGetter: (m) => m.Armors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Book, IBookGetter>(
                srcGroup: obj.Books,
                type: typeof(IBookGetter),
                modKey: obj.ModKey,
                group: (m) => m.Books,
                groupGetter: (m) => m.Books))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Container, IContainerGetter>(
                srcGroup: obj.Containers,
                type: typeof(IContainerGetter),
                modKey: obj.ModKey,
                group: (m) => m.Containers,
                groupGetter: (m) => m.Containers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Door, IDoorGetter>(
                srcGroup: obj.Doors,
                type: typeof(IDoorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Doors,
                groupGetter: (m) => m.Doors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Light, ILightGetter>(
                srcGroup: obj.Lights,
                type: typeof(ILightGetter),
                modKey: obj.ModKey,
                group: (m) => m.Lights,
                groupGetter: (m) => m.Lights))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MiscItem, IMiscItemGetter>(
                srcGroup: obj.MiscItems,
                type: typeof(IMiscItemGetter),
                modKey: obj.ModKey,
                group: (m) => m.MiscItems,
                groupGetter: (m) => m.MiscItems))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Static, IStaticGetter>(
                srcGroup: obj.Statics,
                type: typeof(IStaticGetter),
                modKey: obj.ModKey,
                group: (m) => m.Statics,
                groupGetter: (m) => m.Statics))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, StaticCollection, IStaticCollectionGetter>(
                srcGroup: obj.StaticCollections,
                type: typeof(IStaticCollectionGetter),
                modKey: obj.ModKey,
                group: (m) => m.StaticCollections,
                groupGetter: (m) => m.StaticCollections))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PackIn, IPackInGetter>(
                srcGroup: obj.PackIns,
                type: typeof(IPackInGetter),
                modKey: obj.ModKey,
                group: (m) => m.PackIns,
                groupGetter: (m) => m.PackIns))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MoveableStatic, IMoveableStaticGetter>(
                srcGroup: obj.MoveableStatics,
                type: typeof(IMoveableStaticGetter),
                modKey: obj.ModKey,
                group: (m) => m.MoveableStatics,
                groupGetter: (m) => m.MoveableStatics))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Grass, IGrassGetter>(
                srcGroup: obj.Grasses,
                type: typeof(IGrassGetter),
                modKey: obj.ModKey,
                group: (m) => m.Grasses,
                groupGetter: (m) => m.Grasses))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Flora, IFloraGetter>(
                srcGroup: obj.Florae,
                type: typeof(IFloraGetter),
                modKey: obj.ModKey,
                group: (m) => m.Florae,
                groupGetter: (m) => m.Florae))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Furniture, IFurnitureGetter>(
                srcGroup: obj.Furniture,
                type: typeof(IFurnitureGetter),
                modKey: obj.ModKey,
                group: (m) => m.Furniture,
                groupGetter: (m) => m.Furniture))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Weapon, IWeaponGetter>(
                srcGroup: obj.Weapons,
                type: typeof(IWeaponGetter),
                modKey: obj.ModKey,
                group: (m) => m.Weapons,
                groupGetter: (m) => m.Weapons))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Ammunition, IAmmunitionGetter>(
                srcGroup: obj.Ammunitions,
                type: typeof(IAmmunitionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Ammunitions,
                groupGetter: (m) => m.Ammunitions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Npc, INpcGetter>(
                srcGroup: obj.Npcs,
                type: typeof(INpcGetter),
                modKey: obj.ModKey,
                group: (m) => m.Npcs,
                groupGetter: (m) => m.Npcs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LeveledNpc, ILeveledNpcGetter>(
                srcGroup: obj.LeveledNpcs,
                type: typeof(ILeveledNpcGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledNpcs,
                groupGetter: (m) => m.LeveledNpcs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LeveledPackIn, ILeveledPackInGetter>(
                srcGroup: obj.LeveledPackIns,
                type: typeof(ILeveledPackInGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledPackIns,
                groupGetter: (m) => m.LeveledPackIns))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Key, IKeyGetter>(
                srcGroup: obj.Keys,
                type: typeof(IKeyGetter),
                modKey: obj.ModKey,
                group: (m) => m.Keys,
                groupGetter: (m) => m.Keys))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Ingestible, IIngestibleGetter>(
                srcGroup: obj.Ingestibles,
                type: typeof(IIngestibleGetter),
                modKey: obj.ModKey,
                group: (m) => m.Ingestibles,
                groupGetter: (m) => m.Ingestibles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, IdleMarker, IIdleMarkerGetter>(
                srcGroup: obj.IdleMarkers,
                type: typeof(IIdleMarkerGetter),
                modKey: obj.ModKey,
                group: (m) => m.IdleMarkers,
                groupGetter: (m) => m.IdleMarkers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BiomeMarker, IBiomeMarkerGetter>(
                srcGroup: obj.BiomeMarkers,
                type: typeof(IBiomeMarkerGetter),
                modKey: obj.ModKey,
                group: (m) => m.BiomeMarkers,
                groupGetter: (m) => m.BiomeMarkers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Note, INoteGetter>(
                srcGroup: obj.Notes,
                type: typeof(INoteGetter),
                modKey: obj.ModKey,
                group: (m) => m.Notes,
                groupGetter: (m) => m.Notes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Projectile, IProjectileGetter>(
                srcGroup: obj.Projectiles,
                type: typeof(IProjectileGetter),
                modKey: obj.ModKey,
                group: (m) => m.Projectiles,
                groupGetter: (m) => m.Projectiles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Hazard, IHazardGetter>(
                srcGroup: obj.Hazards,
                type: typeof(IHazardGetter),
                modKey: obj.ModKey,
                group: (m) => m.Hazards,
                groupGetter: (m) => m.Hazards))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BendableSpline, IBendableSplineGetter>(
                srcGroup: obj.BendableSplines,
                type: typeof(IBendableSplineGetter),
                modKey: obj.ModKey,
                group: (m) => m.BendableSplines,
                groupGetter: (m) => m.BendableSplines))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Terminal, ITerminalGetter>(
                srcGroup: obj.Terminals,
                type: typeof(ITerminalGetter),
                modKey: obj.ModKey,
                group: (m) => m.Terminals,
                groupGetter: (m) => m.Terminals))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LeveledItem, ILeveledItemGetter>(
                srcGroup: obj.LeveledItems,
                type: typeof(ILeveledItemGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledItems,
                groupGetter: (m) => m.LeveledItems))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GenericBaseFormTemplate, IGenericBaseFormTemplateGetter>(
                srcGroup: obj.GenericBaseFormTemplates,
                type: typeof(IGenericBaseFormTemplateGetter),
                modKey: obj.ModKey,
                group: (m) => m.GenericBaseFormTemplates,
                groupGetter: (m) => m.GenericBaseFormTemplates))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GenericBaseForm, IGenericBaseFormGetter>(
                srcGroup: obj.GenericBaseForms,
                type: typeof(IGenericBaseFormGetter),
                modKey: obj.ModKey,
                group: (m) => m.GenericBaseForms,
                groupGetter: (m) => m.GenericBaseForms))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LeveledBaseForm, ILeveledBaseFormGetter>(
                srcGroup: obj.LeveledBaseForms,
                type: typeof(ILeveledBaseFormGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledBaseForms,
                groupGetter: (m) => m.LeveledBaseForms))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Weather, IWeatherGetter>(
                srcGroup: obj.Weathers,
                type: typeof(IWeatherGetter),
                modKey: obj.ModKey,
                group: (m) => m.Weathers,
                groupGetter: (m) => m.Weathers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, WeatherSetting, IWeatherSettingGetter>(
                srcGroup: obj.WeatherSettings,
                type: typeof(IWeatherSettingGetter),
                modKey: obj.ModKey,
                group: (m) => m.WeatherSettings,
                groupGetter: (m) => m.WeatherSettings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Climate, IClimateGetter>(
                srcGroup: obj.Climates,
                type: typeof(IClimateGetter),
                modKey: obj.ModKey,
                group: (m) => m.Climates,
                groupGetter: (m) => m.Climates))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ShaderParticleGeometry, IShaderParticleGeometryGetter>(
                srcGroup: obj.ShaderParticleGeometries,
                type: typeof(IShaderParticleGeometryGetter),
                modKey: obj.ModKey,
                group: (m) => m.ShaderParticleGeometries,
                groupGetter: (m) => m.ShaderParticleGeometries))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Region, IRegionGetter>(
                srcGroup: obj.Regions,
                type: typeof(IRegionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Regions,
                groupGetter: (m) => m.Regions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, NavigationMeshInfoMap, INavigationMeshInfoMapGetter>(
                srcGroup: obj.NavigationMeshInfoMaps,
                type: typeof(INavigationMeshInfoMapGetter),
                modKey: obj.ModKey,
                group: (m) => m.NavigationMeshInfoMaps,
                groupGetter: (m) => m.NavigationMeshInfoMaps))
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                linkCache: linkCache,
                modKey: obj.ModKey,
                parent: null))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Worldspace, IWorldspaceGetter>(
                srcGroup: obj.Worldspaces,
                type: typeof(IWorldspaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Worldspaces,
                groupGetter: (m) => m.Worldspaces))
            {
                yield return item;
            }
            foreach (var groupItem in obj.Worldspaces)
            {
                foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                    duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                {
                    yield return item;
                }
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Quest, IQuestGetter>(
                srcGroup: obj.Quests,
                type: typeof(IQuestGetter),
                modKey: obj.ModKey,
                group: (m) => m.Quests,
                groupGetter: (m) => m.Quests))
            {
                yield return item;
            }
            foreach (var groupItem in obj.Quests)
            {
                foreach (var item in QuestCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(linkCache.Resolve<IQuestGetter>(r.FormKey)),
                    duplicateInto: (m, r, e, f) => m.Quests.DuplicateInAsNewRecord(linkCache.Resolve<IQuestGetter>(r.FormKey), e, f)))
                {
                    yield return item;
                }
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, IdleAnimation, IIdleAnimationGetter>(
                srcGroup: obj.IdleAnimations,
                type: typeof(IIdleAnimationGetter),
                modKey: obj.ModKey,
                group: (m) => m.IdleAnimations,
                groupGetter: (m) => m.IdleAnimations))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Package, IPackageGetter>(
                srcGroup: obj.Packages,
                type: typeof(IPackageGetter),
                modKey: obj.ModKey,
                group: (m) => m.Packages,
                groupGetter: (m) => m.Packages))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, CombatStyle, ICombatStyleGetter>(
                srcGroup: obj.CombatStyles,
                type: typeof(ICombatStyleGetter),
                modKey: obj.ModKey,
                group: (m) => m.CombatStyles,
                groupGetter: (m) => m.CombatStyles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LoadScreen, ILoadScreenGetter>(
                srcGroup: obj.LoadScreens,
                type: typeof(ILoadScreenGetter),
                modKey: obj.ModKey,
                group: (m) => m.LoadScreens,
                groupGetter: (m) => m.LoadScreens))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AnimatedObject, IAnimatedObjectGetter>(
                srcGroup: obj.AnimatedObjects,
                type: typeof(IAnimatedObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.AnimatedObjects,
                groupGetter: (m) => m.AnimatedObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Water, IWaterGetter>(
                srcGroup: obj.Waters,
                type: typeof(IWaterGetter),
                modKey: obj.ModKey,
                group: (m) => m.Waters,
                groupGetter: (m) => m.Waters))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, EffectShader, IEffectShaderGetter>(
                srcGroup: obj.EffectShaders,
                type: typeof(IEffectShaderGetter),
                modKey: obj.ModKey,
                group: (m) => m.EffectShaders,
                groupGetter: (m) => m.EffectShaders))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Explosion, IExplosionGetter>(
                srcGroup: obj.Explosions,
                type: typeof(IExplosionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Explosions,
                groupGetter: (m) => m.Explosions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Debris, IDebrisGetter>(
                srcGroup: obj.Debris,
                type: typeof(IDebrisGetter),
                modKey: obj.ModKey,
                group: (m) => m.Debris,
                groupGetter: (m) => m.Debris))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ImageSpace, IImageSpaceGetter>(
                srcGroup: obj.ImageSpaces,
                type: typeof(IImageSpaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.ImageSpaces,
                groupGetter: (m) => m.ImageSpaces))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ImageSpaceAdapter, IImageSpaceAdapterGetter>(
                srcGroup: obj.ImageSpaceAdapters,
                type: typeof(IImageSpaceAdapterGetter),
                modKey: obj.ModKey,
                group: (m) => m.ImageSpaceAdapters,
                groupGetter: (m) => m.ImageSpaceAdapters))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FormList, IFormListGetter>(
                srcGroup: obj.FormLists,
                type: typeof(IFormListGetter),
                modKey: obj.ModKey,
                group: (m) => m.FormLists,
                groupGetter: (m) => m.FormLists))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Perk, IPerkGetter>(
                srcGroup: obj.Perks,
                type: typeof(IPerkGetter),
                modKey: obj.ModKey,
                group: (m) => m.Perks,
                groupGetter: (m) => m.Perks))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BodyPartData, IBodyPartDataGetter>(
                srcGroup: obj.BodyParts,
                type: typeof(IBodyPartDataGetter),
                modKey: obj.ModKey,
                group: (m) => m.BodyParts,
                groupGetter: (m) => m.BodyParts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AddonNode, IAddonNodeGetter>(
                srcGroup: obj.AddonNodes,
                type: typeof(IAddonNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.AddonNodes,
                groupGetter: (m) => m.AddonNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ActorValueInformation, IActorValueInformationGetter>(
                srcGroup: obj.ActorValueInformation,
                type: typeof(IActorValueInformationGetter),
                modKey: obj.ModKey,
                group: (m) => m.ActorValueInformation,
                groupGetter: (m) => m.ActorValueInformation))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, CameraShot, ICameraShotGetter>(
                srcGroup: obj.CameraShots,
                type: typeof(ICameraShotGetter),
                modKey: obj.ModKey,
                group: (m) => m.CameraShots,
                groupGetter: (m) => m.CameraShots))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, CameraPath, ICameraPathGetter>(
                srcGroup: obj.CameraPaths,
                type: typeof(ICameraPathGetter),
                modKey: obj.ModKey,
                group: (m) => m.CameraPaths,
                groupGetter: (m) => m.CameraPaths))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, VoiceType, IVoiceTypeGetter>(
                srcGroup: obj.VoiceTypes,
                type: typeof(IVoiceTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.VoiceTypes,
                groupGetter: (m) => m.VoiceTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MaterialType, IMaterialTypeGetter>(
                srcGroup: obj.MaterialTypes,
                type: typeof(IMaterialTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.MaterialTypes,
                groupGetter: (m) => m.MaterialTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Impact, IImpactGetter>(
                srcGroup: obj.Impacts,
                type: typeof(IImpactGetter),
                modKey: obj.ModKey,
                group: (m) => m.Impacts,
                groupGetter: (m) => m.Impacts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ImpactDataSet, IImpactDataSetGetter>(
                srcGroup: obj.ImpactDataSets,
                type: typeof(IImpactDataSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.ImpactDataSets,
                groupGetter: (m) => m.ImpactDataSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ArmorAddon, IArmorAddonGetter>(
                srcGroup: obj.ArmorAddons,
                type: typeof(IArmorAddonGetter),
                modKey: obj.ModKey,
                group: (m) => m.ArmorAddons,
                groupGetter: (m) => m.ArmorAddons))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Location, ILocationGetter>(
                srcGroup: obj.Locations,
                type: typeof(ILocationGetter),
                modKey: obj.ModKey,
                group: (m) => m.Locations,
                groupGetter: (m) => m.Locations))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Message, IMessageGetter>(
                srcGroup: obj.Messages,
                type: typeof(IMessageGetter),
                modKey: obj.ModKey,
                group: (m) => m.Messages,
                groupGetter: (m) => m.Messages))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, DefaultObjectManager, IDefaultObjectManagerGetter>(
                srcGroup: obj.DefaultObjectManagers,
                type: typeof(IDefaultObjectManagerGetter),
                modKey: obj.ModKey,
                group: (m) => m.DefaultObjectManagers,
                groupGetter: (m) => m.DefaultObjectManagers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, DefaultObject, IDefaultObjectGetter>(
                srcGroup: obj.DefaultObjects,
                type: typeof(IDefaultObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.DefaultObjects,
                groupGetter: (m) => m.DefaultObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LightingTemplate, ILightingTemplateGetter>(
                srcGroup: obj.LightingTemplates,
                type: typeof(ILightingTemplateGetter),
                modKey: obj.ModKey,
                group: (m) => m.LightingTemplates,
                groupGetter: (m) => m.LightingTemplates))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MusicType, IMusicTypeGetter>(
                srcGroup: obj.MusicTypes,
                type: typeof(IMusicTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.MusicTypes,
                groupGetter: (m) => m.MusicTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Footstep, IFootstepGetter>(
                srcGroup: obj.Footsteps,
                type: typeof(IFootstepGetter),
                modKey: obj.ModKey,
                group: (m) => m.Footsteps,
                groupGetter: (m) => m.Footsteps))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FootstepSet, IFootstepSetGetter>(
                srcGroup: obj.FootstepSets,
                type: typeof(IFootstepSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.FootstepSets,
                groupGetter: (m) => m.FootstepSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, StoryManagerBranchNode, IStoryManagerBranchNodeGetter>(
                srcGroup: obj.StoryManagerBranchNodes,
                type: typeof(IStoryManagerBranchNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.StoryManagerBranchNodes,
                groupGetter: (m) => m.StoryManagerBranchNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, StoryManagerQuestNode, IStoryManagerQuestNodeGetter>(
                srcGroup: obj.StoryManagerQuestNodes,
                type: typeof(IStoryManagerQuestNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.StoryManagerQuestNodes,
                groupGetter: (m) => m.StoryManagerQuestNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, StoryManagerEventNode, IStoryManagerEventNodeGetter>(
                srcGroup: obj.StoryManagerEventNodes,
                type: typeof(IStoryManagerEventNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.StoryManagerEventNodes,
                groupGetter: (m) => m.StoryManagerEventNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MusicTrack, IMusicTrackGetter>(
                srcGroup: obj.MusicTracks,
                type: typeof(IMusicTrackGetter),
                modKey: obj.ModKey,
                group: (m) => m.MusicTracks,
                groupGetter: (m) => m.MusicTracks))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, EquipType, IEquipTypeGetter>(
                srcGroup: obj.EquipTypes,
                type: typeof(IEquipTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.EquipTypes,
                groupGetter: (m) => m.EquipTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Outfit, IOutfitGetter>(
                srcGroup: obj.Outfits,
                type: typeof(IOutfitGetter),
                modKey: obj.ModKey,
                group: (m) => m.Outfits,
                groupGetter: (m) => m.Outfits))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ArtObject, IArtObjectGetter>(
                srcGroup: obj.ArtObjects,
                type: typeof(IArtObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.ArtObjects,
                groupGetter: (m) => m.ArtObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MovementType, IMovementTypeGetter>(
                srcGroup: obj.MovementTypes,
                type: typeof(IMovementTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.MovementTypes,
                groupGetter: (m) => m.MovementTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, CollisionLayer, ICollisionLayerGetter>(
                srcGroup: obj.CollisionLayers,
                type: typeof(ICollisionLayerGetter),
                modKey: obj.ModKey,
                group: (m) => m.CollisionLayers,
                groupGetter: (m) => m.CollisionLayers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ColorRecord, IColorRecordGetter>(
                srcGroup: obj.Colors,
                type: typeof(IColorRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Colors,
                groupGetter: (m) => m.Colors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ReverbParameters, IReverbParametersGetter>(
                srcGroup: obj.ReverbParameters,
                type: typeof(IReverbParametersGetter),
                modKey: obj.ModKey,
                group: (m) => m.ReverbParameters,
                groupGetter: (m) => m.ReverbParameters))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ReferenceGroup, IReferenceGroupGetter>(
                srcGroup: obj.ReferenceGroups,
                type: typeof(IReferenceGroupGetter),
                modKey: obj.ModKey,
                group: (m) => m.ReferenceGroups,
                groupGetter: (m) => m.ReferenceGroups))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AimModel, IAimModelGetter>(
                srcGroup: obj.AimModels,
                type: typeof(IAimModelGetter),
                modKey: obj.ModKey,
                group: (m) => m.AimModels,
                groupGetter: (m) => m.AimModels))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AimAssistModel, IAimAssistModelGetter>(
                srcGroup: obj.AimAssistModels,
                type: typeof(IAimAssistModelGetter),
                modKey: obj.ModKey,
                group: (m) => m.AimAssistModels,
                groupGetter: (m) => m.AimAssistModels))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MeleeAimAssistModel, IMeleeAimAssistModelGetter>(
                srcGroup: obj.MeleeAimAssistModels,
                type: typeof(IMeleeAimAssistModelGetter),
                modKey: obj.ModKey,
                group: (m) => m.MeleeAimAssistModels,
                groupGetter: (m) => m.MeleeAimAssistModels))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Layer, ILayerGetter>(
                srcGroup: obj.Layers,
                type: typeof(ILayerGetter),
                modKey: obj.ModKey,
                group: (m) => m.Layers,
                groupGetter: (m) => m.Layers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ConstructibleObject, IConstructibleObjectGetter>(
                srcGroup: obj.ConstructibleObjects,
                type: typeof(IConstructibleObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.ConstructibleObjects,
                groupGetter: (m) => m.ConstructibleObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AObjectModification, IAObjectModificationGetter>(
                srcGroup: obj.ObjectModifications,
                type: typeof(IAObjectModificationGetter),
                modKey: obj.ModKey,
                group: (m) => m.ObjectModifications,
                groupGetter: (m) => m.ObjectModifications))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Zoom, IZoomGetter>(
                srcGroup: obj.Zooms,
                type: typeof(IZoomGetter),
                modKey: obj.ModKey,
                group: (m) => m.Zooms,
                groupGetter: (m) => m.Zooms))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, InstanceNamingRules, IInstanceNamingRulesGetter>(
                srcGroup: obj.InstanceNamingRules,
                type: typeof(IInstanceNamingRulesGetter),
                modKey: obj.ModKey,
                group: (m) => m.InstanceNamingRules,
                groupGetter: (m) => m.InstanceNamingRules))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SoundKeywordMapping, ISoundKeywordMappingGetter>(
                srcGroup: obj.SoundKeywordMappings,
                type: typeof(ISoundKeywordMappingGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundKeywordMappings,
                groupGetter: (m) => m.SoundKeywordMappings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AttractionRule, IAttractionRuleGetter>(
                srcGroup: obj.AttractionRules,
                type: typeof(IAttractionRuleGetter),
                modKey: obj.ModKey,
                group: (m) => m.AttractionRules,
                groupGetter: (m) => m.AttractionRules))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SceneCollection, ISceneCollectionGetter>(
                srcGroup: obj.SceneCollections,
                type: typeof(ISceneCollectionGetter),
                modKey: obj.ModKey,
                group: (m) => m.SceneCollections,
                groupGetter: (m) => m.SceneCollections))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AnimationSoundTagSet, IAnimationSoundTagSetGetter>(
                srcGroup: obj.AnimationSoundTagSets,
                type: typeof(IAnimationSoundTagSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.AnimationSoundTagSets,
                groupGetter: (m) => m.AnimationSoundTagSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Resource, IResourceGetter>(
                srcGroup: obj.Resources,
                type: typeof(IResourceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Resources,
                groupGetter: (m) => m.Resources))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Biome, IBiomeGetter>(
                srcGroup: obj.Biomes,
                type: typeof(IBiomeGetter),
                modKey: obj.ModKey,
                group: (m) => m.Biomes,
                groupGetter: (m) => m.Biomes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, NavigationMeshObstacleCoverManager, INavigationMeshObstacleCoverManagerGetter>(
                srcGroup: obj.NavigationMeshObstacleCoverManagers,
                type: typeof(INavigationMeshObstacleCoverManagerGetter),
                modKey: obj.ModKey,
                group: (m) => m.NavigationMeshObstacleCoverManagers,
                groupGetter: (m) => m.NavigationMeshObstacleCoverManagers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LensFlare, ILensFlareGetter>(
                srcGroup: obj.LensFlares,
                type: typeof(ILensFlareGetter),
                modKey: obj.ModKey,
                group: (m) => m.LensFlares,
                groupGetter: (m) => m.LensFlares))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ObjectVisibilityManager, IObjectVisibilityManagerGetter>(
                srcGroup: obj.ObjectVisibilityManagers,
                type: typeof(IObjectVisibilityManagerGetter),
                modKey: obj.ModKey,
                group: (m) => m.ObjectVisibilityManagers,
                groupGetter: (m) => m.ObjectVisibilityManagers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SnapTemplateNode, ISnapTemplateNodeGetter>(
                srcGroup: obj.SnapTemplateNodes,
                type: typeof(ISnapTemplateNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.SnapTemplateNodes,
                groupGetter: (m) => m.SnapTemplateNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SnapTemplate, ISnapTemplateGetter>(
                srcGroup: obj.SnapTemplates,
                type: typeof(ISnapTemplateGetter),
                modKey: obj.ModKey,
                group: (m) => m.SnapTemplates,
                groupGetter: (m) => m.SnapTemplates))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GroundCover, IGroundCoverGetter>(
                srcGroup: obj.GroundCovers,
                type: typeof(IGroundCoverGetter),
                modKey: obj.ModKey,
                group: (m) => m.GroundCovers,
                groupGetter: (m) => m.GroundCovers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MorphableObject, IMorphableObjectGetter>(
                srcGroup: obj.MorphableObjects,
                type: typeof(IMorphableObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.MorphableObjects,
                groupGetter: (m) => m.MorphableObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Traversal, ITraversalGetter>(
                srcGroup: obj.Traversals,
                type: typeof(ITraversalGetter),
                modKey: obj.ModKey,
                group: (m) => m.Traversals,
                groupGetter: (m) => m.Traversals))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ResourceGenerationData, IResourceGenerationDataGetter>(
                srcGroup: obj.ResourceGenerationData,
                type: typeof(IResourceGenerationDataGetter),
                modKey: obj.ModKey,
                group: (m) => m.ResourceGenerationData,
                groupGetter: (m) => m.ResourceGenerationData))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BiomeSwap, IBiomeSwapGetter>(
                srcGroup: obj.BiomeSwaps,
                type: typeof(IBiomeSwapGetter),
                modKey: obj.ModKey,
                group: (m) => m.BiomeSwaps,
                groupGetter: (m) => m.BiomeSwaps))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Atmosphere, IAtmosphereGetter>(
                srcGroup: obj.Atmospheres,
                type: typeof(IAtmosphereGetter),
                modKey: obj.ModKey,
                group: (m) => m.Atmospheres,
                groupGetter: (m) => m.Atmospheres))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LeveledSpaceCell, ILeveledSpaceCellGetter>(
                srcGroup: obj.LeveledSpaceCells,
                type: typeof(ILeveledSpaceCellGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledSpaceCells,
                groupGetter: (m) => m.LeveledSpaceCells))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SpeechChallenge, ISpeechChallengeGetter>(
                srcGroup: obj.SpeechChallenges,
                type: typeof(ISpeechChallengeGetter),
                modKey: obj.ModKey,
                group: (m) => m.SpeechChallenges,
                groupGetter: (m) => m.SpeechChallenges))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AimAssistPose, IAimAssistPoseGetter>(
                srcGroup: obj.AimAssistPoses,
                type: typeof(IAimAssistPoseGetter),
                modKey: obj.ModKey,
                group: (m) => m.AimAssistPoses,
                groupGetter: (m) => m.AimAssistPoses))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, VolumetricLighting, IVolumetricLightingGetter>(
                srcGroup: obj.VolumetricLightings,
                type: typeof(IVolumetricLightingGetter),
                modKey: obj.ModKey,
                group: (m) => m.VolumetricLightings,
                groupGetter: (m) => m.VolumetricLightings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfaceBlock, ISurfaceBlockGetter>(
                srcGroup: obj.SurfaceBlocks,
                type: typeof(ISurfaceBlockGetter),
                modKey: obj.ModKey,
                group: (m) => m.SurfaceBlocks,
                groupGetter: (m) => m.SurfaceBlocks))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfacePatternConfig, ISurfacePatternConfigGetter>(
                srcGroup: obj.SurfacePatternConfigs,
                type: typeof(ISurfacePatternConfigGetter),
                modKey: obj.ModKey,
                group: (m) => m.SurfacePatternConfigs,
                groupGetter: (m) => m.SurfacePatternConfigs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfacePattern, ISurfacePatternGetter>(
                srcGroup: obj.SurfacePatterns,
                type: typeof(ISurfacePatternGetter),
                modKey: obj.ModKey,
                group: (m) => m.SurfacePatterns,
                groupGetter: (m) => m.SurfacePatterns))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfaceTree, ISurfaceTreeGetter>(
                srcGroup: obj.SurfaceTrees,
                type: typeof(ISurfaceTreeGetter),
                modKey: obj.ModKey,
                group: (m) => m.SurfaceTrees,
                groupGetter: (m) => m.SurfaceTrees))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PlanetContentManagerTree, IPlanetContentManagerTreeGetter>(
                srcGroup: obj.PlanetContentManagerTrees,
                type: typeof(IPlanetContentManagerTreeGetter),
                modKey: obj.ModKey,
                group: (m) => m.PlanetContentManagerTrees,
                groupGetter: (m) => m.PlanetContentManagerTrees))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BoneModifier, IBoneModifierGetter>(
                srcGroup: obj.BoneModifiers,
                type: typeof(IBoneModifierGetter),
                modKey: obj.ModKey,
                group: (m) => m.BoneModifiers,
                groupGetter: (m) => m.BoneModifiers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SnapTemplateBehavior, ISnapTemplateBehaviorGetter>(
                srcGroup: obj.SnapTemplateBehaviors,
                type: typeof(ISnapTemplateBehaviorGetter),
                modKey: obj.ModKey,
                group: (m) => m.SnapTemplateBehaviors,
                groupGetter: (m) => m.SnapTemplateBehaviors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Planet, IPlanetGetter>(
                srcGroup: obj.Planets,
                type: typeof(IPlanetGetter),
                modKey: obj.ModKey,
                group: (m) => m.Planets,
                groupGetter: (m) => m.Planets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ConditionRecord, IConditionRecordGetter>(
                srcGroup: obj.ConditionRecords,
                type: typeof(IConditionRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.ConditionRecords,
                groupGetter: (m) => m.ConditionRecords))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PlanetContentManagerBranchNode, IPlanetContentManagerBranchNodeGetter>(
                srcGroup: obj.PlanetContentManagerBranchNodes,
                type: typeof(IPlanetContentManagerBranchNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.PlanetContentManagerBranchNodes,
                groupGetter: (m) => m.PlanetContentManagerBranchNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PlanetContentManagerContentNode, IPlanetContentManagerContentNodeGetter>(
                srcGroup: obj.PlanetContentManagerContentNodes,
                type: typeof(IPlanetContentManagerContentNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.PlanetContentManagerContentNodes,
                groupGetter: (m) => m.PlanetContentManagerContentNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Star, IStarGetter>(
                srcGroup: obj.Stars,
                type: typeof(IStarGetter),
                modKey: obj.ModKey,
                group: (m) => m.Stars,
                groupGetter: (m) => m.Stars))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, WWiseEventData, IWWiseEventDataGetter>(
                srcGroup: obj.WWiseEventDatas,
                type: typeof(IWWiseEventDataGetter),
                modKey: obj.ModKey,
                group: (m) => m.WWiseEventDatas,
                groupGetter: (m) => m.WWiseEventDatas))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ResearchProject, IResearchProjectGetter>(
                srcGroup: obj.ResearchProjects,
                type: typeof(IResearchProjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.ResearchProjects,
                groupGetter: (m) => m.ResearchProjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AimOpticalSightMarker, IAimOpticalSightMarkerGetter>(
                srcGroup: obj.AimOpticalSightMarkers,
                type: typeof(IAimOpticalSightMarkerGetter),
                modKey: obj.ModKey,
                group: (m) => m.AimOpticalSightMarkers,
                groupGetter: (m) => m.AimOpticalSightMarkers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AmbienceSet, IAmbienceSetGetter>(
                srcGroup: obj.AmbienceSets,
                type: typeof(IAmbienceSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.AmbienceSets,
                groupGetter: (m) => m.AmbienceSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, WeaponBarrelModel, IWeaponBarrelModelGetter>(
                srcGroup: obj.WeaponBarrelModels,
                type: typeof(IWeaponBarrelModelGetter),
                modKey: obj.ModKey,
                group: (m) => m.WeaponBarrelModels,
                groupGetter: (m) => m.WeaponBarrelModels))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfacePatternStyle, ISurfacePatternStyleGetter>(
                srcGroup: obj.SurfacePatternStyles,
                type: typeof(ISurfacePatternStyleGetter),
                modKey: obj.ModKey,
                group: (m) => m.SurfacePatternStyles,
                groupGetter: (m) => m.SurfacePatternStyles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LayeredMaterialSwap, ILayeredMaterialSwapGetter>(
                srcGroup: obj.LayeredMaterialSwaps,
                type: typeof(ILayeredMaterialSwapGetter),
                modKey: obj.ModKey,
                group: (m) => m.LayeredMaterialSwaps,
                groupGetter: (m) => m.LayeredMaterialSwaps))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ForceData, IForceDataGetter>(
                srcGroup: obj.ForceDatas,
                type: typeof(IForceDataGetter),
                modKey: obj.ModKey,
                group: (m) => m.ForceDatas,
                groupGetter: (m) => m.ForceDatas))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, TerminalMenu, ITerminalMenuGetter>(
                srcGroup: obj.TerminalMenus,
                type: typeof(ITerminalMenuGetter),
                modKey: obj.ModKey,
                group: (m) => m.TerminalMenus,
                groupGetter: (m) => m.TerminalMenus))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, EffectSequence, IEffectSequenceGetter>(
                srcGroup: obj.EffectSequences,
                type: typeof(IEffectSequenceGetter),
                modKey: obj.ModKey,
                group: (m) => m.EffectSequences,
                groupGetter: (m) => m.EffectSequences))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SecondaryDamageList, ISecondaryDamageListGetter>(
                srcGroup: obj.SecondaryDamageLists,
                type: typeof(ISecondaryDamageListGetter),
                modKey: obj.ModKey,
                group: (m) => m.SecondaryDamageLists,
                groupGetter: (m) => m.SecondaryDamageLists))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MaterialPath, IMaterialPathGetter>(
                srcGroup: obj.MaterialPaths,
                type: typeof(IMaterialPathGetter),
                modKey: obj.ModKey,
                group: (m) => m.MaterialPaths,
                groupGetter: (m) => m.MaterialPaths))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Clouds, ICloudsGetter>(
                srcGroup: obj.Clouds,
                type: typeof(ICloudsGetter),
                modKey: obj.ModKey,
                group: (m) => m.Clouds,
                groupGetter: (m) => m.Clouds))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FogVolume, IFogVolumeGetter>(
                srcGroup: obj.FogVolumes,
                type: typeof(IFogVolumeGetter),
                modKey: obj.ModKey,
                group: (m) => m.FogVolumes,
                groupGetter: (m) => m.FogVolumes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, WWiseKeywordMapping, IWWiseKeywordMappingGetter>(
                srcGroup: obj.WWiseKeywordMappings,
                type: typeof(IWWiseKeywordMappingGetter),
                modKey: obj.ModKey,
                group: (m) => m.WWiseKeywordMappings,
                groupGetter: (m) => m.WWiseKeywordMappings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LegendaryItem, ILegendaryItemGetter>(
                srcGroup: obj.LegendaryItems,
                type: typeof(ILegendaryItemGetter),
                modKey: obj.ModKey,
                group: (m) => m.LegendaryItems,
                groupGetter: (m) => m.LegendaryItems))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ParticleSystemDefineCollision, IParticleSystemDefineCollisionGetter>(
                srcGroup: obj.ParticleSystemDefineCollisions,
                type: typeof(IParticleSystemDefineCollisionGetter),
                modKey: obj.ModKey,
                group: (m) => m.ParticleSystemDefineCollisions,
                groupGetter: (m) => m.ParticleSystemDefineCollisions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SunPreset, ISunPresetGetter>(
                srcGroup: obj.SunPresets,
                type: typeof(ISunPresetGetter),
                modKey: obj.ModKey,
                group: (m) => m.SunPresets,
                groupGetter: (m) => m.SunPresets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PhotoModeFeature, IPhotoModeFeatureGetter>(
                srcGroup: obj.PhotoModeFeatures,
                type: typeof(IPhotoModeFeatureGetter),
                modKey: obj.ModKey,
                group: (m) => m.PhotoModeFeatures,
                groupGetter: (m) => m.PhotoModeFeatures))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GameplayOptions, IGameplayOptionsGetter>(
                srcGroup: obj.GameplayOptions,
                type: typeof(IGameplayOptionsGetter),
                modKey: obj.ModKey,
                group: (m) => m.GameplayOptions,
                groupGetter: (m) => m.GameplayOptions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GameplayOptionsGroup, IGameplayOptionsGroupGetter>(
                srcGroup: obj.GameplayOptionsGroups,
                type: typeof(IGameplayOptionsGroupGetter),
                modKey: obj.ModKey,
                group: (m) => m.GameplayOptionsGroups,
                groupGetter: (m) => m.GameplayOptionsGroups))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, TimeOfDayRecord, ITimeOfDayRecordGetter>(
                srcGroup: obj.TimeOfDays,
                type: typeof(ITimeOfDayRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.TimeOfDays,
                groupGetter: (m) => m.TimeOfDays))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ActorValueModulation, IActorValueModulationGetter>(
                srcGroup: obj.ActorValueModulations,
                type: typeof(IActorValueModulationGetter),
                modKey: obj.ModKey,
                group: (m) => m.ActorValueModulations,
                groupGetter: (m) => m.ActorValueModulations))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Challenge, IChallengeGetter>(
                srcGroup: obj.Challenges,
                type: typeof(IChallengeGetter),
                modKey: obj.ModKey,
                group: (m) => m.Challenges,
                groupGetter: (m) => m.Challenges))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FacialExpression, IFacialExpressionGetter>(
                srcGroup: obj.FacialExpressions,
                type: typeof(IFacialExpressionGetter),
                modKey: obj.ModKey,
                group: (m) => m.FacialExpressions,
                groupGetter: (m) => m.FacialExpressions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PERS, IPERSGetter>(
                srcGroup: obj.PERS,
                type: typeof(IPERSGetter),
                modKey: obj.ModKey,
                group: (m) => m.PERS,
                groupGetter: (m) => m.PERS))
            {
                yield return item;
            }
        }
        
        public IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IStarfieldModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IStarfieldMajorRecord":
                case "StarfieldMajorRecord":
                    if (!StarfieldMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IStarfieldMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GameSetting, IGameSettingGetter>(
                        srcGroup: obj.GameSettings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GameSettings,
                        groupGetter: (m) => m.GameSettings))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Keyword, IKeywordGetter>(
                        srcGroup: obj.Keywords,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Keywords,
                        groupGetter: (m) => m.Keywords))
                    {
                        yield return item;
                    }
                    yield break;
                case "FFKWRecord":
                case "IFFKWRecordGetter":
                case "IFFKWRecord":
                case "IFFKWRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FFKWRecord, IFFKWRecordGetter>(
                        srcGroup: obj.FFKW,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FFKW,
                        groupGetter: (m) => m.FFKW))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LocationReferenceType, ILocationReferenceTypeGetter>(
                        srcGroup: obj.LocationReferenceTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LocationReferenceTypes,
                        groupGetter: (m) => m.LocationReferenceTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ActionRecord, IActionRecordGetter>(
                        srcGroup: obj.Actions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Actions,
                        groupGetter: (m) => m.Actions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Transform":
                case "ITransformGetter":
                case "ITransform":
                case "ITransformInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Transform, ITransformGetter>(
                        srcGroup: obj.Transforms,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Transforms,
                        groupGetter: (m) => m.Transforms))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, TextureSet, ITextureSetGetter>(
                        srcGroup: obj.TextureSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.TextureSets,
                        groupGetter: (m) => m.TextureSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Global, IGlobalGetter>(
                        srcGroup: obj.Globals,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Globals,
                        groupGetter: (m) => m.Globals))
                    {
                        yield return item;
                    }
                    yield break;
                case "DamageType":
                case "IDamageTypeGetter":
                case "IDamageType":
                case "IDamageTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, DamageType, IDamageTypeGetter>(
                        srcGroup: obj.DamageTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DamageTypes,
                        groupGetter: (m) => m.DamageTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Class, IClassGetter>(
                        srcGroup: obj.Classes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Classes,
                        groupGetter: (m) => m.Classes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Faction, IFactionGetter>(
                        srcGroup: obj.Factions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Factions,
                        groupGetter: (m) => m.Factions))
                    {
                        yield return item;
                    }
                    yield break;
                case "AffinityEvent":
                case "IAffinityEventGetter":
                case "IAffinityEvent":
                case "IAffinityEventInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AffinityEvent, IAffinityEventGetter>(
                        srcGroup: obj.AffinityEvents,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AffinityEvents,
                        groupGetter: (m) => m.AffinityEvents))
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, HeadPart, IHeadPartGetter>(
                        srcGroup: obj.HeadParts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.HeadParts,
                        groupGetter: (m) => m.HeadParts))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Race, IRaceGetter>(
                        srcGroup: obj.Races,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Races,
                        groupGetter: (m) => m.Races))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SoundMarker, ISoundMarkerGetter>(
                        srcGroup: obj.SoundMarkers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundMarkers,
                        groupGetter: (m) => m.SoundMarkers))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundEchoMarker":
                case "ISoundEchoMarkerGetter":
                case "ISoundEchoMarker":
                case "ISoundEchoMarkerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SoundEchoMarker, ISoundEchoMarkerGetter>(
                        srcGroup: obj.SoundEchoMarkers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundEchoMarkers,
                        groupGetter: (m) => m.SoundEchoMarkers))
                    {
                        yield return item;
                    }
                    yield break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AcousticSpace, IAcousticSpaceGetter>(
                        srcGroup: obj.AcousticSpaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AcousticSpaces,
                        groupGetter: (m) => m.AcousticSpaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "AudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveGetter":
                case "IAudioOcclusionPrimitive":
                case "IAudioOcclusionPrimitiveInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AudioOcclusionPrimitive, IAudioOcclusionPrimitiveGetter>(
                        srcGroup: obj.AudioOcclusionPrimitives,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AudioOcclusionPrimitives,
                        groupGetter: (m) => m.AudioOcclusionPrimitives))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MagicEffect, IMagicEffectGetter>(
                        srcGroup: obj.MagicEffects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MagicEffects,
                        groupGetter: (m) => m.MagicEffects))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LandscapeTexture, ILandscapeTextureGetter>(
                        srcGroup: obj.LandscapeTextures,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LandscapeTextures,
                        groupGetter: (m) => m.LandscapeTextures))
                    {
                        yield return item;
                    }
                    yield break;
                case "ProjectedDecal":
                case "IProjectedDecalGetter":
                case "IProjectedDecal":
                case "IProjectedDecalInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ProjectedDecal, IProjectedDecalGetter>(
                        srcGroup: obj.ProjectedDecals,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ProjectedDecals,
                        groupGetter: (m) => m.ProjectedDecals))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ObjectEffect, IObjectEffectGetter>(
                        srcGroup: obj.ObjectEffects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ObjectEffects,
                        groupGetter: (m) => m.ObjectEffects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Spell, ISpellGetter>(
                        srcGroup: obj.Spells,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Spells,
                        groupGetter: (m) => m.Spells))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Activator, IActivatorGetter>(
                        srcGroup: obj.Activators,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Activators,
                        groupGetter: (m) => m.Activators))
                    {
                        yield return item;
                    }
                    yield break;
                case "CurveTable":
                case "ICurveTableGetter":
                case "ICurveTable":
                case "ICurveTableInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, CurveTable, ICurveTableGetter>(
                        srcGroup: obj.CurveTables,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CurveTables,
                        groupGetter: (m) => m.CurveTables))
                    {
                        yield return item;
                    }
                    yield break;
                case "Curve3D":
                case "ICurve3DGetter":
                case "ICurve3D":
                case "ICurve3DInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Curve3D, ICurve3DGetter>(
                        srcGroup: obj.Curve3Ds,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Curve3Ds,
                        groupGetter: (m) => m.Curve3Ds))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Armor, IArmorGetter>(
                        srcGroup: obj.Armors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Armors,
                        groupGetter: (m) => m.Armors))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Book, IBookGetter>(
                        srcGroup: obj.Books,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Books,
                        groupGetter: (m) => m.Books))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Container, IContainerGetter>(
                        srcGroup: obj.Containers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Containers,
                        groupGetter: (m) => m.Containers))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Door, IDoorGetter>(
                        srcGroup: obj.Doors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Doors,
                        groupGetter: (m) => m.Doors))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Light, ILightGetter>(
                        srcGroup: obj.Lights,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Lights,
                        groupGetter: (m) => m.Lights))
                    {
                        yield return item;
                    }
                    yield break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MiscItem, IMiscItemGetter>(
                        srcGroup: obj.MiscItems,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MiscItems,
                        groupGetter: (m) => m.MiscItems))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Static, IStaticGetter>(
                        srcGroup: obj.Statics,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Statics,
                        groupGetter: (m) => m.Statics))
                    {
                        yield return item;
                    }
                    yield break;
                case "StaticCollection":
                case "IStaticCollectionGetter":
                case "IStaticCollection":
                case "IStaticCollectionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, StaticCollection, IStaticCollectionGetter>(
                        srcGroup: obj.StaticCollections,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StaticCollections,
                        groupGetter: (m) => m.StaticCollections))
                    {
                        yield return item;
                    }
                    yield break;
                case "PackIn":
                case "IPackInGetter":
                case "IPackIn":
                case "IPackInInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PackIn, IPackInGetter>(
                        srcGroup: obj.PackIns,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.PackIns,
                        groupGetter: (m) => m.PackIns))
                    {
                        yield return item;
                    }
                    yield break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MoveableStatic, IMoveableStaticGetter>(
                        srcGroup: obj.MoveableStatics,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MoveableStatics,
                        groupGetter: (m) => m.MoveableStatics))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Grass, IGrassGetter>(
                        srcGroup: obj.Grasses,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Grasses,
                        groupGetter: (m) => m.Grasses))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Flora, IFloraGetter>(
                        srcGroup: obj.Florae,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Florae,
                        groupGetter: (m) => m.Florae))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Furniture, IFurnitureGetter>(
                        srcGroup: obj.Furniture,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Furniture,
                        groupGetter: (m) => m.Furniture))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Weapon, IWeaponGetter>(
                        srcGroup: obj.Weapons,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Weapons,
                        groupGetter: (m) => m.Weapons))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Ammunition, IAmmunitionGetter>(
                        srcGroup: obj.Ammunitions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Ammunitions,
                        groupGetter: (m) => m.Ammunitions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Npc, INpcGetter>(
                        srcGroup: obj.Npcs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Npcs,
                        groupGetter: (m) => m.Npcs))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LeveledNpc, ILeveledNpcGetter>(
                        srcGroup: obj.LeveledNpcs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledNpcs,
                        groupGetter: (m) => m.LeveledNpcs))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledPackIn":
                case "ILeveledPackInGetter":
                case "ILeveledPackIn":
                case "ILeveledPackInInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LeveledPackIn, ILeveledPackInGetter>(
                        srcGroup: obj.LeveledPackIns,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledPackIns,
                        groupGetter: (m) => m.LeveledPackIns))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Key, IKeyGetter>(
                        srcGroup: obj.Keys,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Keys,
                        groupGetter: (m) => m.Keys))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Ingestible, IIngestibleGetter>(
                        srcGroup: obj.Ingestibles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Ingestibles,
                        groupGetter: (m) => m.Ingestibles))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, IdleMarker, IIdleMarkerGetter>(
                        srcGroup: obj.IdleMarkers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.IdleMarkers,
                        groupGetter: (m) => m.IdleMarkers))
                    {
                        yield return item;
                    }
                    yield break;
                case "BiomeMarker":
                case "IBiomeMarkerGetter":
                case "IBiomeMarker":
                case "IBiomeMarkerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BiomeMarker, IBiomeMarkerGetter>(
                        srcGroup: obj.BiomeMarkers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.BiomeMarkers,
                        groupGetter: (m) => m.BiomeMarkers))
                    {
                        yield return item;
                    }
                    yield break;
                case "Note":
                case "INoteGetter":
                case "INote":
                case "INoteInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Note, INoteGetter>(
                        srcGroup: obj.Notes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Notes,
                        groupGetter: (m) => m.Notes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Projectile, IProjectileGetter>(
                        srcGroup: obj.Projectiles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Projectiles,
                        groupGetter: (m) => m.Projectiles))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Hazard, IHazardGetter>(
                        srcGroup: obj.Hazards,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Hazards,
                        groupGetter: (m) => m.Hazards))
                    {
                        yield return item;
                    }
                    yield break;
                case "BendableSpline":
                case "IBendableSplineGetter":
                case "IBendableSpline":
                case "IBendableSplineInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BendableSpline, IBendableSplineGetter>(
                        srcGroup: obj.BendableSplines,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.BendableSplines,
                        groupGetter: (m) => m.BendableSplines))
                    {
                        yield return item;
                    }
                    yield break;
                case "Terminal":
                case "ITerminalGetter":
                case "ITerminal":
                case "ITerminalInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Terminal, ITerminalGetter>(
                        srcGroup: obj.Terminals,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Terminals,
                        groupGetter: (m) => m.Terminals))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LeveledItem, ILeveledItemGetter>(
                        srcGroup: obj.LeveledItems,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledItems,
                        groupGetter: (m) => m.LeveledItems))
                    {
                        yield return item;
                    }
                    yield break;
                case "GenericBaseFormTemplate":
                case "IGenericBaseFormTemplateGetter":
                case "IGenericBaseFormTemplate":
                case "IGenericBaseFormTemplateInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GenericBaseFormTemplate, IGenericBaseFormTemplateGetter>(
                        srcGroup: obj.GenericBaseFormTemplates,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GenericBaseFormTemplates,
                        groupGetter: (m) => m.GenericBaseFormTemplates))
                    {
                        yield return item;
                    }
                    yield break;
                case "GenericBaseForm":
                case "IGenericBaseFormGetter":
                case "IGenericBaseForm":
                case "IGenericBaseFormInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GenericBaseForm, IGenericBaseFormGetter>(
                        srcGroup: obj.GenericBaseForms,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GenericBaseForms,
                        groupGetter: (m) => m.GenericBaseForms))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledBaseForm":
                case "ILeveledBaseFormGetter":
                case "ILeveledBaseForm":
                case "ILeveledBaseFormInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LeveledBaseForm, ILeveledBaseFormGetter>(
                        srcGroup: obj.LeveledBaseForms,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledBaseForms,
                        groupGetter: (m) => m.LeveledBaseForms))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Weather, IWeatherGetter>(
                        srcGroup: obj.Weathers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Weathers,
                        groupGetter: (m) => m.Weathers))
                    {
                        yield return item;
                    }
                    yield break;
                case "WeatherSetting":
                case "IWeatherSettingGetter":
                case "IWeatherSetting":
                case "IWeatherSettingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, WeatherSetting, IWeatherSettingGetter>(
                        srcGroup: obj.WeatherSettings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.WeatherSettings,
                        groupGetter: (m) => m.WeatherSettings))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Climate, IClimateGetter>(
                        srcGroup: obj.Climates,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Climates,
                        groupGetter: (m) => m.Climates))
                    {
                        yield return item;
                    }
                    yield break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ShaderParticleGeometry, IShaderParticleGeometryGetter>(
                        srcGroup: obj.ShaderParticleGeometries,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ShaderParticleGeometries,
                        groupGetter: (m) => m.ShaderParticleGeometries))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Region, IRegionGetter>(
                        srcGroup: obj.Regions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Regions,
                        groupGetter: (m) => m.Regions))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, NavigationMeshInfoMap, INavigationMeshInfoMapGetter>(
                        srcGroup: obj.NavigationMeshInfoMaps,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.NavigationMeshInfoMaps,
                        groupGetter: (m) => m.NavigationMeshInfoMaps))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Worldspace, IWorldspaceGetter>(
                        srcGroup: obj.Worldspaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Worldspaces,
                        groupGetter: (m) => m.Worldspaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Quest, IQuestGetter>(
                        srcGroup: obj.Quests,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Quests,
                        groupGetter: (m) => m.Quests))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, IdleAnimation, IIdleAnimationGetter>(
                        srcGroup: obj.IdleAnimations,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.IdleAnimations,
                        groupGetter: (m) => m.IdleAnimations))
                    {
                        yield return item;
                    }
                    yield break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Package, IPackageGetter>(
                        srcGroup: obj.Packages,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Packages,
                        groupGetter: (m) => m.Packages))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, CombatStyle, ICombatStyleGetter>(
                        srcGroup: obj.CombatStyles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CombatStyles,
                        groupGetter: (m) => m.CombatStyles))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LoadScreen, ILoadScreenGetter>(
                        srcGroup: obj.LoadScreens,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LoadScreens,
                        groupGetter: (m) => m.LoadScreens))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AnimatedObject, IAnimatedObjectGetter>(
                        srcGroup: obj.AnimatedObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AnimatedObjects,
                        groupGetter: (m) => m.AnimatedObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Water, IWaterGetter>(
                        srcGroup: obj.Waters,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Waters,
                        groupGetter: (m) => m.Waters))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, EffectShader, IEffectShaderGetter>(
                        srcGroup: obj.EffectShaders,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.EffectShaders,
                        groupGetter: (m) => m.EffectShaders))
                    {
                        yield return item;
                    }
                    yield break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Explosion, IExplosionGetter>(
                        srcGroup: obj.Explosions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Explosions,
                        groupGetter: (m) => m.Explosions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Debris, IDebrisGetter>(
                        srcGroup: obj.Debris,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Debris,
                        groupGetter: (m) => m.Debris))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ImageSpace, IImageSpaceGetter>(
                        srcGroup: obj.ImageSpaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ImageSpaces,
                        groupGetter: (m) => m.ImageSpaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ImageSpaceAdapter, IImageSpaceAdapterGetter>(
                        srcGroup: obj.ImageSpaceAdapters,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ImageSpaceAdapters,
                        groupGetter: (m) => m.ImageSpaceAdapters))
                    {
                        yield return item;
                    }
                    yield break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FormList, IFormListGetter>(
                        srcGroup: obj.FormLists,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FormLists,
                        groupGetter: (m) => m.FormLists))
                    {
                        yield return item;
                    }
                    yield break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Perk, IPerkGetter>(
                        srcGroup: obj.Perks,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Perks,
                        groupGetter: (m) => m.Perks))
                    {
                        yield return item;
                    }
                    yield break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BodyPartData, IBodyPartDataGetter>(
                        srcGroup: obj.BodyParts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.BodyParts,
                        groupGetter: (m) => m.BodyParts))
                    {
                        yield return item;
                    }
                    yield break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AddonNode, IAddonNodeGetter>(
                        srcGroup: obj.AddonNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AddonNodes,
                        groupGetter: (m) => m.AddonNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ActorValueInformation, IActorValueInformationGetter>(
                        srcGroup: obj.ActorValueInformation,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ActorValueInformation,
                        groupGetter: (m) => m.ActorValueInformation))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, CameraShot, ICameraShotGetter>(
                        srcGroup: obj.CameraShots,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CameraShots,
                        groupGetter: (m) => m.CameraShots))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, CameraPath, ICameraPathGetter>(
                        srcGroup: obj.CameraPaths,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CameraPaths,
                        groupGetter: (m) => m.CameraPaths))
                    {
                        yield return item;
                    }
                    yield break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, VoiceType, IVoiceTypeGetter>(
                        srcGroup: obj.VoiceTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.VoiceTypes,
                        groupGetter: (m) => m.VoiceTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MaterialType, IMaterialTypeGetter>(
                        srcGroup: obj.MaterialTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MaterialTypes,
                        groupGetter: (m) => m.MaterialTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Impact, IImpactGetter>(
                        srcGroup: obj.Impacts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Impacts,
                        groupGetter: (m) => m.Impacts))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ImpactDataSet, IImpactDataSetGetter>(
                        srcGroup: obj.ImpactDataSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ImpactDataSets,
                        groupGetter: (m) => m.ImpactDataSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ArmorAddon, IArmorAddonGetter>(
                        srcGroup: obj.ArmorAddons,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ArmorAddons,
                        groupGetter: (m) => m.ArmorAddons))
                    {
                        yield return item;
                    }
                    yield break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Location, ILocationGetter>(
                        srcGroup: obj.Locations,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Locations,
                        groupGetter: (m) => m.Locations))
                    {
                        yield return item;
                    }
                    yield break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Message, IMessageGetter>(
                        srcGroup: obj.Messages,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Messages,
                        groupGetter: (m) => m.Messages))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, DefaultObjectManager, IDefaultObjectManagerGetter>(
                        srcGroup: obj.DefaultObjectManagers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DefaultObjectManagers,
                        groupGetter: (m) => m.DefaultObjectManagers))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObject":
                case "IDefaultObjectGetter":
                case "IDefaultObject":
                case "IDefaultObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, DefaultObject, IDefaultObjectGetter>(
                        srcGroup: obj.DefaultObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DefaultObjects,
                        groupGetter: (m) => m.DefaultObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LightingTemplate, ILightingTemplateGetter>(
                        srcGroup: obj.LightingTemplates,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LightingTemplates,
                        groupGetter: (m) => m.LightingTemplates))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MusicType, IMusicTypeGetter>(
                        srcGroup: obj.MusicTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MusicTypes,
                        groupGetter: (m) => m.MusicTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Footstep, IFootstepGetter>(
                        srcGroup: obj.Footsteps,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Footsteps,
                        groupGetter: (m) => m.Footsteps))
                    {
                        yield return item;
                    }
                    yield break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FootstepSet, IFootstepSetGetter>(
                        srcGroup: obj.FootstepSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FootstepSets,
                        groupGetter: (m) => m.FootstepSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, StoryManagerBranchNode, IStoryManagerBranchNodeGetter>(
                        srcGroup: obj.StoryManagerBranchNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StoryManagerBranchNodes,
                        groupGetter: (m) => m.StoryManagerBranchNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, StoryManagerQuestNode, IStoryManagerQuestNodeGetter>(
                        srcGroup: obj.StoryManagerQuestNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StoryManagerQuestNodes,
                        groupGetter: (m) => m.StoryManagerQuestNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, StoryManagerEventNode, IStoryManagerEventNodeGetter>(
                        srcGroup: obj.StoryManagerEventNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StoryManagerEventNodes,
                        groupGetter: (m) => m.StoryManagerEventNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MusicTrack, IMusicTrackGetter>(
                        srcGroup: obj.MusicTracks,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MusicTracks,
                        groupGetter: (m) => m.MusicTracks))
                    {
                        yield return item;
                    }
                    yield break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, EquipType, IEquipTypeGetter>(
                        srcGroup: obj.EquipTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.EquipTypes,
                        groupGetter: (m) => m.EquipTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Outfit, IOutfitGetter>(
                        srcGroup: obj.Outfits,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Outfits,
                        groupGetter: (m) => m.Outfits))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ArtObject, IArtObjectGetter>(
                        srcGroup: obj.ArtObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ArtObjects,
                        groupGetter: (m) => m.ArtObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MovementType, IMovementTypeGetter>(
                        srcGroup: obj.MovementTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MovementTypes,
                        groupGetter: (m) => m.MovementTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, CollisionLayer, ICollisionLayerGetter>(
                        srcGroup: obj.CollisionLayers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CollisionLayers,
                        groupGetter: (m) => m.CollisionLayers))
                    {
                        yield return item;
                    }
                    yield break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ColorRecord, IColorRecordGetter>(
                        srcGroup: obj.Colors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Colors,
                        groupGetter: (m) => m.Colors))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ReverbParameters, IReverbParametersGetter>(
                        srcGroup: obj.ReverbParameters,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ReverbParameters,
                        groupGetter: (m) => m.ReverbParameters))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReferenceGroup":
                case "IReferenceGroupGetter":
                case "IReferenceGroup":
                case "IReferenceGroupInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ReferenceGroup, IReferenceGroupGetter>(
                        srcGroup: obj.ReferenceGroups,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ReferenceGroups,
                        groupGetter: (m) => m.ReferenceGroups))
                    {
                        yield return item;
                    }
                    yield break;
                case "AimModel":
                case "IAimModelGetter":
                case "IAimModel":
                case "IAimModelInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AimModel, IAimModelGetter>(
                        srcGroup: obj.AimModels,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AimModels,
                        groupGetter: (m) => m.AimModels))
                    {
                        yield return item;
                    }
                    yield break;
                case "AimAssistModel":
                case "IAimAssistModelGetter":
                case "IAimAssistModel":
                case "IAimAssistModelInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AimAssistModel, IAimAssistModelGetter>(
                        srcGroup: obj.AimAssistModels,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AimAssistModels,
                        groupGetter: (m) => m.AimAssistModels))
                    {
                        yield return item;
                    }
                    yield break;
                case "MeleeAimAssistModel":
                case "IMeleeAimAssistModelGetter":
                case "IMeleeAimAssistModel":
                case "IMeleeAimAssistModelInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MeleeAimAssistModel, IMeleeAimAssistModelGetter>(
                        srcGroup: obj.MeleeAimAssistModels,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MeleeAimAssistModels,
                        groupGetter: (m) => m.MeleeAimAssistModels))
                    {
                        yield return item;
                    }
                    yield break;
                case "Layer":
                case "ILayerGetter":
                case "ILayer":
                case "ILayerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Layer, ILayerGetter>(
                        srcGroup: obj.Layers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Layers,
                        groupGetter: (m) => m.Layers))
                    {
                        yield return item;
                    }
                    yield break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ConstructibleObject, IConstructibleObjectGetter>(
                        srcGroup: obj.ConstructibleObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ConstructibleObjects,
                        groupGetter: (m) => m.ConstructibleObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "AObjectModification":
                case "IAObjectModificationGetter":
                case "IAObjectModification":
                case "IAObjectModificationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AObjectModification, IAObjectModificationGetter>(
                        srcGroup: obj.ObjectModifications,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ObjectModifications,
                        groupGetter: (m) => m.ObjectModifications))
                    {
                        yield return item;
                    }
                    yield break;
                case "Zoom":
                case "IZoomGetter":
                case "IZoom":
                case "IZoomInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Zoom, IZoomGetter>(
                        srcGroup: obj.Zooms,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Zooms,
                        groupGetter: (m) => m.Zooms))
                    {
                        yield return item;
                    }
                    yield break;
                case "InstanceNamingRules":
                case "IInstanceNamingRulesGetter":
                case "IInstanceNamingRules":
                case "IInstanceNamingRulesInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, InstanceNamingRules, IInstanceNamingRulesGetter>(
                        srcGroup: obj.InstanceNamingRules,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.InstanceNamingRules,
                        groupGetter: (m) => m.InstanceNamingRules))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundKeywordMapping":
                case "ISoundKeywordMappingGetter":
                case "ISoundKeywordMapping":
                case "ISoundKeywordMappingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SoundKeywordMapping, ISoundKeywordMappingGetter>(
                        srcGroup: obj.SoundKeywordMappings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundKeywordMappings,
                        groupGetter: (m) => m.SoundKeywordMappings))
                    {
                        yield return item;
                    }
                    yield break;
                case "AttractionRule":
                case "IAttractionRuleGetter":
                case "IAttractionRule":
                case "IAttractionRuleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AttractionRule, IAttractionRuleGetter>(
                        srcGroup: obj.AttractionRules,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AttractionRules,
                        groupGetter: (m) => m.AttractionRules))
                    {
                        yield return item;
                    }
                    yield break;
                case "SceneCollection":
                case "ISceneCollectionGetter":
                case "ISceneCollection":
                case "ISceneCollectionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SceneCollection, ISceneCollectionGetter>(
                        srcGroup: obj.SceneCollections,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SceneCollections,
                        groupGetter: (m) => m.SceneCollections))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimationSoundTagSet":
                case "IAnimationSoundTagSetGetter":
                case "IAnimationSoundTagSet":
                case "IAnimationSoundTagSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AnimationSoundTagSet, IAnimationSoundTagSetGetter>(
                        srcGroup: obj.AnimationSoundTagSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AnimationSoundTagSets,
                        groupGetter: (m) => m.AnimationSoundTagSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "Resource":
                case "IResourceGetter":
                case "IResource":
                case "IResourceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Resource, IResourceGetter>(
                        srcGroup: obj.Resources,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Resources,
                        groupGetter: (m) => m.Resources))
                    {
                        yield return item;
                    }
                    yield break;
                case "Biome":
                case "IBiomeGetter":
                case "IBiome":
                case "IBiomeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Biome, IBiomeGetter>(
                        srcGroup: obj.Biomes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Biomes,
                        groupGetter: (m) => m.Biomes))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshObstacleCoverManager":
                case "INavigationMeshObstacleCoverManagerGetter":
                case "INavigationMeshObstacleCoverManager":
                case "INavigationMeshObstacleCoverManagerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, NavigationMeshObstacleCoverManager, INavigationMeshObstacleCoverManagerGetter>(
                        srcGroup: obj.NavigationMeshObstacleCoverManagers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.NavigationMeshObstacleCoverManagers,
                        groupGetter: (m) => m.NavigationMeshObstacleCoverManagers))
                    {
                        yield return item;
                    }
                    yield break;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LensFlare, ILensFlareGetter>(
                        srcGroup: obj.LensFlares,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LensFlares,
                        groupGetter: (m) => m.LensFlares))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectVisibilityManager":
                case "IObjectVisibilityManagerGetter":
                case "IObjectVisibilityManager":
                case "IObjectVisibilityManagerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ObjectVisibilityManager, IObjectVisibilityManagerGetter>(
                        srcGroup: obj.ObjectVisibilityManagers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ObjectVisibilityManagers,
                        groupGetter: (m) => m.ObjectVisibilityManagers))
                    {
                        yield return item;
                    }
                    yield break;
                case "SnapTemplateNode":
                case "ISnapTemplateNodeGetter":
                case "ISnapTemplateNode":
                case "ISnapTemplateNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SnapTemplateNode, ISnapTemplateNodeGetter>(
                        srcGroup: obj.SnapTemplateNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SnapTemplateNodes,
                        groupGetter: (m) => m.SnapTemplateNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "SnapTemplate":
                case "ISnapTemplateGetter":
                case "ISnapTemplate":
                case "ISnapTemplateInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SnapTemplate, ISnapTemplateGetter>(
                        srcGroup: obj.SnapTemplates,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SnapTemplates,
                        groupGetter: (m) => m.SnapTemplates))
                    {
                        yield return item;
                    }
                    yield break;
                case "GroundCover":
                case "IGroundCoverGetter":
                case "IGroundCover":
                case "IGroundCoverInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GroundCover, IGroundCoverGetter>(
                        srcGroup: obj.GroundCovers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GroundCovers,
                        groupGetter: (m) => m.GroundCovers))
                    {
                        yield return item;
                    }
                    yield break;
                case "MorphableObject":
                case "IMorphableObjectGetter":
                case "IMorphableObject":
                case "IMorphableObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MorphableObject, IMorphableObjectGetter>(
                        srcGroup: obj.MorphableObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MorphableObjects,
                        groupGetter: (m) => m.MorphableObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Traversal":
                case "ITraversalGetter":
                case "ITraversal":
                case "ITraversalInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Traversal, ITraversalGetter>(
                        srcGroup: obj.Traversals,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Traversals,
                        groupGetter: (m) => m.Traversals))
                    {
                        yield return item;
                    }
                    yield break;
                case "ResourceGenerationData":
                case "IResourceGenerationDataGetter":
                case "IResourceGenerationData":
                case "IResourceGenerationDataInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ResourceGenerationData, IResourceGenerationDataGetter>(
                        srcGroup: obj.ResourceGenerationData,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ResourceGenerationData,
                        groupGetter: (m) => m.ResourceGenerationData))
                    {
                        yield return item;
                    }
                    yield break;
                case "BiomeSwap":
                case "IBiomeSwapGetter":
                case "IBiomeSwap":
                case "IBiomeSwapInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BiomeSwap, IBiomeSwapGetter>(
                        srcGroup: obj.BiomeSwaps,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.BiomeSwaps,
                        groupGetter: (m) => m.BiomeSwaps))
                    {
                        yield return item;
                    }
                    yield break;
                case "Atmosphere":
                case "IAtmosphereGetter":
                case "IAtmosphere":
                case "IAtmosphereInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Atmosphere, IAtmosphereGetter>(
                        srcGroup: obj.Atmospheres,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Atmospheres,
                        groupGetter: (m) => m.Atmospheres))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledSpaceCell":
                case "ILeveledSpaceCellGetter":
                case "ILeveledSpaceCell":
                case "ILeveledSpaceCellInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LeveledSpaceCell, ILeveledSpaceCellGetter>(
                        srcGroup: obj.LeveledSpaceCells,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledSpaceCells,
                        groupGetter: (m) => m.LeveledSpaceCells))
                    {
                        yield return item;
                    }
                    yield break;
                case "SpeechChallenge":
                case "ISpeechChallengeGetter":
                case "ISpeechChallenge":
                case "ISpeechChallengeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SpeechChallenge, ISpeechChallengeGetter>(
                        srcGroup: obj.SpeechChallenges,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SpeechChallenges,
                        groupGetter: (m) => m.SpeechChallenges))
                    {
                        yield return item;
                    }
                    yield break;
                case "AimAssistPose":
                case "IAimAssistPoseGetter":
                case "IAimAssistPose":
                case "IAimAssistPoseInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AimAssistPose, IAimAssistPoseGetter>(
                        srcGroup: obj.AimAssistPoses,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AimAssistPoses,
                        groupGetter: (m) => m.AimAssistPoses))
                    {
                        yield return item;
                    }
                    yield break;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, VolumetricLighting, IVolumetricLightingGetter>(
                        srcGroup: obj.VolumetricLightings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.VolumetricLightings,
                        groupGetter: (m) => m.VolumetricLightings))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfaceBlock":
                case "ISurfaceBlockGetter":
                case "ISurfaceBlock":
                case "ISurfaceBlockInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfaceBlock, ISurfaceBlockGetter>(
                        srcGroup: obj.SurfaceBlocks,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SurfaceBlocks,
                        groupGetter: (m) => m.SurfaceBlocks))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfacePatternConfig":
                case "ISurfacePatternConfigGetter":
                case "ISurfacePatternConfig":
                case "ISurfacePatternConfigInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfacePatternConfig, ISurfacePatternConfigGetter>(
                        srcGroup: obj.SurfacePatternConfigs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SurfacePatternConfigs,
                        groupGetter: (m) => m.SurfacePatternConfigs))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfacePattern":
                case "ISurfacePatternGetter":
                case "ISurfacePattern":
                case "ISurfacePatternInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfacePattern, ISurfacePatternGetter>(
                        srcGroup: obj.SurfacePatterns,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SurfacePatterns,
                        groupGetter: (m) => m.SurfacePatterns))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfaceTree":
                case "ISurfaceTreeGetter":
                case "ISurfaceTree":
                case "ISurfaceTreeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfaceTree, ISurfaceTreeGetter>(
                        srcGroup: obj.SurfaceTrees,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SurfaceTrees,
                        groupGetter: (m) => m.SurfaceTrees))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlanetContentManagerTree":
                case "IPlanetContentManagerTreeGetter":
                case "IPlanetContentManagerTree":
                case "IPlanetContentManagerTreeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PlanetContentManagerTree, IPlanetContentManagerTreeGetter>(
                        srcGroup: obj.PlanetContentManagerTrees,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.PlanetContentManagerTrees,
                        groupGetter: (m) => m.PlanetContentManagerTrees))
                    {
                        yield return item;
                    }
                    yield break;
                case "BoneModifier":
                case "IBoneModifierGetter":
                case "IBoneModifier":
                case "IBoneModifierInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, BoneModifier, IBoneModifierGetter>(
                        srcGroup: obj.BoneModifiers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.BoneModifiers,
                        groupGetter: (m) => m.BoneModifiers))
                    {
                        yield return item;
                    }
                    yield break;
                case "SnapTemplateBehavior":
                case "ISnapTemplateBehaviorGetter":
                case "ISnapTemplateBehavior":
                case "ISnapTemplateBehaviorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SnapTemplateBehavior, ISnapTemplateBehaviorGetter>(
                        srcGroup: obj.SnapTemplateBehaviors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SnapTemplateBehaviors,
                        groupGetter: (m) => m.SnapTemplateBehaviors))
                    {
                        yield return item;
                    }
                    yield break;
                case "Planet":
                case "IPlanetGetter":
                case "IPlanet":
                case "IPlanetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Planet, IPlanetGetter>(
                        srcGroup: obj.Planets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Planets,
                        groupGetter: (m) => m.Planets))
                    {
                        yield return item;
                    }
                    yield break;
                case "ConditionRecord":
                case "IConditionRecordGetter":
                case "IConditionRecord":
                case "IConditionRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ConditionRecord, IConditionRecordGetter>(
                        srcGroup: obj.ConditionRecords,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ConditionRecords,
                        groupGetter: (m) => m.ConditionRecords))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlanetContentManagerBranchNode":
                case "IPlanetContentManagerBranchNodeGetter":
                case "IPlanetContentManagerBranchNode":
                case "IPlanetContentManagerBranchNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PlanetContentManagerBranchNode, IPlanetContentManagerBranchNodeGetter>(
                        srcGroup: obj.PlanetContentManagerBranchNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.PlanetContentManagerBranchNodes,
                        groupGetter: (m) => m.PlanetContentManagerBranchNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlanetContentManagerContentNode":
                case "IPlanetContentManagerContentNodeGetter":
                case "IPlanetContentManagerContentNode":
                case "IPlanetContentManagerContentNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PlanetContentManagerContentNode, IPlanetContentManagerContentNodeGetter>(
                        srcGroup: obj.PlanetContentManagerContentNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.PlanetContentManagerContentNodes,
                        groupGetter: (m) => m.PlanetContentManagerContentNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Star":
                case "IStarGetter":
                case "IStar":
                case "IStarInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Star, IStarGetter>(
                        srcGroup: obj.Stars,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Stars,
                        groupGetter: (m) => m.Stars))
                    {
                        yield return item;
                    }
                    yield break;
                case "WWiseEventData":
                case "IWWiseEventDataGetter":
                case "IWWiseEventData":
                case "IWWiseEventDataInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, WWiseEventData, IWWiseEventDataGetter>(
                        srcGroup: obj.WWiseEventDatas,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.WWiseEventDatas,
                        groupGetter: (m) => m.WWiseEventDatas))
                    {
                        yield return item;
                    }
                    yield break;
                case "ResearchProject":
                case "IResearchProjectGetter":
                case "IResearchProject":
                case "IResearchProjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ResearchProject, IResearchProjectGetter>(
                        srcGroup: obj.ResearchProjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ResearchProjects,
                        groupGetter: (m) => m.ResearchProjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "AimOpticalSightMarker":
                case "IAimOpticalSightMarkerGetter":
                case "IAimOpticalSightMarker":
                case "IAimOpticalSightMarkerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AimOpticalSightMarker, IAimOpticalSightMarkerGetter>(
                        srcGroup: obj.AimOpticalSightMarkers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AimOpticalSightMarkers,
                        groupGetter: (m) => m.AimOpticalSightMarkers))
                    {
                        yield return item;
                    }
                    yield break;
                case "AmbienceSet":
                case "IAmbienceSetGetter":
                case "IAmbienceSet":
                case "IAmbienceSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, AmbienceSet, IAmbienceSetGetter>(
                        srcGroup: obj.AmbienceSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AmbienceSets,
                        groupGetter: (m) => m.AmbienceSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "WeaponBarrelModel":
                case "IWeaponBarrelModelGetter":
                case "IWeaponBarrelModel":
                case "IWeaponBarrelModelInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, WeaponBarrelModel, IWeaponBarrelModelGetter>(
                        srcGroup: obj.WeaponBarrelModels,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.WeaponBarrelModels,
                        groupGetter: (m) => m.WeaponBarrelModels))
                    {
                        yield return item;
                    }
                    yield break;
                case "SurfacePatternStyle":
                case "ISurfacePatternStyleGetter":
                case "ISurfacePatternStyle":
                case "ISurfacePatternStyleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SurfacePatternStyle, ISurfacePatternStyleGetter>(
                        srcGroup: obj.SurfacePatternStyles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SurfacePatternStyles,
                        groupGetter: (m) => m.SurfacePatternStyles))
                    {
                        yield return item;
                    }
                    yield break;
                case "LayeredMaterialSwap":
                case "ILayeredMaterialSwapGetter":
                case "ILayeredMaterialSwap":
                case "ILayeredMaterialSwapInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LayeredMaterialSwap, ILayeredMaterialSwapGetter>(
                        srcGroup: obj.LayeredMaterialSwaps,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LayeredMaterialSwaps,
                        groupGetter: (m) => m.LayeredMaterialSwaps))
                    {
                        yield return item;
                    }
                    yield break;
                case "ForceData":
                case "IForceDataGetter":
                case "IForceData":
                case "IForceDataInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ForceData, IForceDataGetter>(
                        srcGroup: obj.ForceDatas,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ForceDatas,
                        groupGetter: (m) => m.ForceDatas))
                    {
                        yield return item;
                    }
                    yield break;
                case "TerminalMenu":
                case "ITerminalMenuGetter":
                case "ITerminalMenu":
                case "ITerminalMenuInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, TerminalMenu, ITerminalMenuGetter>(
                        srcGroup: obj.TerminalMenus,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.TerminalMenus,
                        groupGetter: (m) => m.TerminalMenus))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectSequence":
                case "IEffectSequenceGetter":
                case "IEffectSequence":
                case "IEffectSequenceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, EffectSequence, IEffectSequenceGetter>(
                        srcGroup: obj.EffectSequences,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.EffectSequences,
                        groupGetter: (m) => m.EffectSequences))
                    {
                        yield return item;
                    }
                    yield break;
                case "SecondaryDamageList":
                case "ISecondaryDamageListGetter":
                case "ISecondaryDamageList":
                case "ISecondaryDamageListInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SecondaryDamageList, ISecondaryDamageListGetter>(
                        srcGroup: obj.SecondaryDamageLists,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SecondaryDamageLists,
                        groupGetter: (m) => m.SecondaryDamageLists))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialPath":
                case "IMaterialPathGetter":
                case "IMaterialPath":
                case "IMaterialPathInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, MaterialPath, IMaterialPathGetter>(
                        srcGroup: obj.MaterialPaths,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MaterialPaths,
                        groupGetter: (m) => m.MaterialPaths))
                    {
                        yield return item;
                    }
                    yield break;
                case "Clouds":
                case "ICloudsGetter":
                case "IClouds":
                case "ICloudsInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Clouds, ICloudsGetter>(
                        srcGroup: obj.Clouds,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Clouds,
                        groupGetter: (m) => m.Clouds))
                    {
                        yield return item;
                    }
                    yield break;
                case "FogVolume":
                case "IFogVolumeGetter":
                case "IFogVolume":
                case "IFogVolumeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FogVolume, IFogVolumeGetter>(
                        srcGroup: obj.FogVolumes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FogVolumes,
                        groupGetter: (m) => m.FogVolumes))
                    {
                        yield return item;
                    }
                    yield break;
                case "WWiseKeywordMapping":
                case "IWWiseKeywordMappingGetter":
                case "IWWiseKeywordMapping":
                case "IWWiseKeywordMappingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, WWiseKeywordMapping, IWWiseKeywordMappingGetter>(
                        srcGroup: obj.WWiseKeywordMappings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.WWiseKeywordMappings,
                        groupGetter: (m) => m.WWiseKeywordMappings))
                    {
                        yield return item;
                    }
                    yield break;
                case "LegendaryItem":
                case "ILegendaryItemGetter":
                case "ILegendaryItem":
                case "ILegendaryItemInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, LegendaryItem, ILegendaryItemGetter>(
                        srcGroup: obj.LegendaryItems,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LegendaryItems,
                        groupGetter: (m) => m.LegendaryItems))
                    {
                        yield return item;
                    }
                    yield break;
                case "ParticleSystemDefineCollision":
                case "IParticleSystemDefineCollisionGetter":
                case "IParticleSystemDefineCollision":
                case "IParticleSystemDefineCollisionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ParticleSystemDefineCollision, IParticleSystemDefineCollisionGetter>(
                        srcGroup: obj.ParticleSystemDefineCollisions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ParticleSystemDefineCollisions,
                        groupGetter: (m) => m.ParticleSystemDefineCollisions))
                    {
                        yield return item;
                    }
                    yield break;
                case "SunPreset":
                case "ISunPresetGetter":
                case "ISunPreset":
                case "ISunPresetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, SunPreset, ISunPresetGetter>(
                        srcGroup: obj.SunPresets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SunPresets,
                        groupGetter: (m) => m.SunPresets))
                    {
                        yield return item;
                    }
                    yield break;
                case "PhotoModeFeature":
                case "IPhotoModeFeatureGetter":
                case "IPhotoModeFeature":
                case "IPhotoModeFeatureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PhotoModeFeature, IPhotoModeFeatureGetter>(
                        srcGroup: obj.PhotoModeFeatures,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.PhotoModeFeatures,
                        groupGetter: (m) => m.PhotoModeFeatures))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameplayOptions":
                case "IGameplayOptionsGetter":
                case "IGameplayOptions":
                case "IGameplayOptionsInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GameplayOptions, IGameplayOptionsGetter>(
                        srcGroup: obj.GameplayOptions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GameplayOptions,
                        groupGetter: (m) => m.GameplayOptions))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameplayOptionsGroup":
                case "IGameplayOptionsGroupGetter":
                case "IGameplayOptionsGroup":
                case "IGameplayOptionsGroupInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, GameplayOptionsGroup, IGameplayOptionsGroupGetter>(
                        srcGroup: obj.GameplayOptionsGroups,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GameplayOptionsGroups,
                        groupGetter: (m) => m.GameplayOptionsGroups))
                    {
                        yield return item;
                    }
                    yield break;
                case "TimeOfDayRecord":
                case "ITimeOfDayRecordGetter":
                case "ITimeOfDayRecord":
                case "ITimeOfDayRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, TimeOfDayRecord, ITimeOfDayRecordGetter>(
                        srcGroup: obj.TimeOfDays,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.TimeOfDays,
                        groupGetter: (m) => m.TimeOfDays))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueModulation":
                case "IActorValueModulationGetter":
                case "IActorValueModulation":
                case "IActorValueModulationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, ActorValueModulation, IActorValueModulationGetter>(
                        srcGroup: obj.ActorValueModulations,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ActorValueModulations,
                        groupGetter: (m) => m.ActorValueModulations))
                    {
                        yield return item;
                    }
                    yield break;
                case "Challenge":
                case "IChallengeGetter":
                case "IChallenge":
                case "IChallengeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, Challenge, IChallengeGetter>(
                        srcGroup: obj.Challenges,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Challenges,
                        groupGetter: (m) => m.Challenges))
                    {
                        yield return item;
                    }
                    yield break;
                case "FacialExpression":
                case "IFacialExpressionGetter":
                case "IFacialExpression":
                case "IFacialExpressionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, FacialExpression, IFacialExpressionGetter>(
                        srcGroup: obj.FacialExpressions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FacialExpressions,
                        groupGetter: (m) => m.FacialExpressions))
                    {
                        yield return item;
                    }
                    yield break;
                case "PERS":
                case "IPERSGetter":
                case "IPERS":
                case "IPERSInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IStarfieldMod, IStarfieldModGetter, PERS, IPERSGetter>(
                        srcGroup: obj.PERS,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.PERS,
                        groupGetter: (m) => m.PERS))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var groupItem in obj.Quests)
                    {
                        foreach (var item in QuestCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(linkCache.Resolve<IQuestGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Quests.DuplicateInAsNewRecord(linkCache.Resolve<IQuestGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var groupItem in obj.Quests)
                    {
                        foreach (var item in QuestCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(linkCache.Resolve<IQuestGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Quests.DuplicateInAsNewRecord(linkCache.Resolve<IQuestGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var groupItem in obj.Quests)
                    {
                        foreach (var item in QuestCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(linkCache.Resolve<IQuestGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Quests.DuplicateInAsNewRecord(linkCache.Resolve<IQuestGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var groupItem in obj.Quests)
                    {
                        foreach (var item in QuestCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Quests.GetOrAddAsOverride(linkCache.Resolve<IQuestGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Quests.DuplicateInAsNewRecord(linkCache.Resolve<IQuestGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<IStarfieldModGetter, IStarfieldMod, IStarfieldModGetter>(
                        GameCategory.Starfield,
                        obj,
                        type,
                        linkCache,
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public static partial IEnumerable<IAssetLinkGetter> GetInferredAssetLinks(IStarfieldModGetter obj, Type? assetType);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IStarfieldModGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            if (queryCategories.HasFlag(AssetLinkQuery.Inferred))
            {
                foreach (var additional in GetInferredAssetLinks(obj, assetType))
                {
                    yield return additional;
                }
            }
            if (obj.Keywords is IAssetLinkContainerGetter KeywordslinkCont)
            {
                foreach (var item in KeywordslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.LocationReferenceTypes is IAssetLinkContainerGetter LocationReferenceTypeslinkCont)
            {
                foreach (var item in LocationReferenceTypeslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Globals is IAssetLinkContainerGetter GlobalslinkCont)
            {
                foreach (var item in GlobalslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Factions is IAssetLinkContainerGetter FactionslinkCont)
            {
                foreach (var item in FactionslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.HeadParts is IAssetLinkContainerGetter HeadPartslinkCont)
            {
                foreach (var item in HeadPartslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Races is IAssetLinkContainerGetter RaceslinkCont)
            {
                foreach (var item in RaceslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.LandscapeTextures.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.ProjectedDecals is IAssetLinkContainerGetter ProjectedDecalslinkCont)
            {
                foreach (var item in ProjectedDecalslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Activators is IAssetLinkContainerGetter ActivatorslinkCont)
            {
                foreach (var item in ActivatorslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Armors is IAssetLinkContainerGetter ArmorslinkCont)
            {
                foreach (var item in ArmorslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Books is IAssetLinkContainerGetter BookslinkCont)
            {
                foreach (var item in BookslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Containers is IAssetLinkContainerGetter ContainerslinkCont)
            {
                foreach (var item in ContainerslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Doors is IAssetLinkContainerGetter DoorslinkCont)
            {
                foreach (var item in DoorslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Lights is IAssetLinkContainerGetter LightslinkCont)
            {
                foreach (var item in LightslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.MiscItems is IAssetLinkContainerGetter MiscItemslinkCont)
            {
                foreach (var item in MiscItemslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Statics is IAssetLinkContainerGetter StaticslinkCont)
            {
                foreach (var item in StaticslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.StaticCollections is IAssetLinkContainerGetter StaticCollectionslinkCont)
            {
                foreach (var item in StaticCollectionslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.PackIns is IAssetLinkContainerGetter PackInslinkCont)
            {
                foreach (var item in PackInslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.MoveableStatics is IAssetLinkContainerGetter MoveableStaticslinkCont)
            {
                foreach (var item in MoveableStaticslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Grasses is IAssetLinkContainerGetter GrasseslinkCont)
            {
                foreach (var item in GrasseslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Florae is IAssetLinkContainerGetter FloraelinkCont)
            {
                foreach (var item in FloraelinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Furniture is IAssetLinkContainerGetter FurniturelinkCont)
            {
                foreach (var item in FurniturelinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Weapons is IAssetLinkContainerGetter WeaponslinkCont)
            {
                foreach (var item in WeaponslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Ammunitions.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.Npcs is IAssetLinkContainerGetter NpcslinkCont)
            {
                foreach (var item in NpcslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.LeveledNpcs is IAssetLinkContainerGetter LeveledNpcslinkCont)
            {
                foreach (var item in LeveledNpcslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.LeveledPackIns is IAssetLinkContainerGetter LeveledPackInslinkCont)
            {
                foreach (var item in LeveledPackInslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Keys.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.Ingestibles is IAssetLinkContainerGetter IngestibleslinkCont)
            {
                foreach (var item in IngestibleslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.IdleMarkers.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.BiomeMarkers is IAssetLinkContainerGetter BiomeMarkerslinkCont)
            {
                foreach (var item in BiomeMarkerslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Notes is IAssetLinkContainerGetter NoteslinkCont)
            {
                foreach (var item in NoteslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Projectiles is IAssetLinkContainerGetter ProjectileslinkCont)
            {
                foreach (var item in ProjectileslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Hazards is IAssetLinkContainerGetter HazardslinkCont)
            {
                foreach (var item in HazardslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.BendableSplines is IAssetLinkContainerGetter BendableSplineslinkCont)
            {
                foreach (var item in BendableSplineslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Terminals is IAssetLinkContainerGetter TerminalslinkCont)
            {
                foreach (var item in TerminalslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.LeveledItems is IAssetLinkContainerGetter LeveledItemslinkCont)
            {
                foreach (var item in LeveledItemslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.GenericBaseForms is IAssetLinkContainerGetter GenericBaseFormslinkCont)
            {
                foreach (var item in GenericBaseFormslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.LeveledBaseForms.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.Cells is IAssetLinkContainerGetter CellslinkCont)
            {
                foreach (var item in CellslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Worldspaces is IAssetLinkContainerGetter WorldspaceslinkCont)
            {
                foreach (var item in WorldspaceslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Quests is IAssetLinkContainerGetter QuestslinkCont)
            {
                foreach (var item in QuestslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.AnimatedObjects is IAssetLinkContainerGetter AnimatedObjectslinkCont)
            {
                foreach (var item in AnimatedObjectslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.EffectShaders is IAssetLinkContainerGetter EffectShaderslinkCont)
            {
                foreach (var item in EffectShaderslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Explosions is IAssetLinkContainerGetter ExplosionslinkCont)
            {
                foreach (var item in ExplosionslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Debris.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.FormLists is IAssetLinkContainerGetter FormListslinkCont)
            {
                foreach (var item in FormListslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Perks.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.BodyParts.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.AddonNodes is IAssetLinkContainerGetter AddonNodeslinkCont)
            {
                foreach (var item in AddonNodeslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.CameraShots.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.MaterialTypes.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.Impacts is IAssetLinkContainerGetter ImpactslinkCont)
            {
                foreach (var item in ImpactslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.ArmorAddons is IAssetLinkContainerGetter ArmorAddonslinkCont)
            {
                foreach (var item in ArmorAddonslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Locations is IAssetLinkContainerGetter LocationslinkCont)
            {
                foreach (var item in LocationslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.ArtObjects is IAssetLinkContainerGetter ArtObjectslinkCont)
            {
                foreach (var item in ArtObjectslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.ReferenceGroups is IAssetLinkContainerGetter ReferenceGroupslinkCont)
            {
                foreach (var item in ReferenceGroupslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Layers is IAssetLinkContainerGetter LayerslinkCont)
            {
                foreach (var item in LayerslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.ConstructibleObjects is IAssetLinkContainerGetter ConstructibleObjectslinkCont)
            {
                foreach (var item in ConstructibleObjectslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.ObjectModifications is IAssetLinkContainerGetter ObjectModificationslinkCont)
            {
                foreach (var item in ObjectModificationslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.SnapTemplateNodes is IAssetLinkContainerGetter SnapTemplateNodeslinkCont)
            {
                foreach (var item in SnapTemplateNodeslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.SnapTemplates is IAssetLinkContainerGetter SnapTemplateslinkCont)
            {
                foreach (var item in SnapTemplateslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.GroundCovers is IAssetLinkContainerGetter GroundCoverslinkCont)
            {
                foreach (var item in GroundCoverslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.MorphableObjects.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.SurfaceBlocks is IAssetLinkContainerGetter SurfaceBlockslinkCont)
            {
                foreach (var item in SurfaceBlockslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.SurfacePatterns is IAssetLinkContainerGetter SurfacePatternslinkCont)
            {
                foreach (var item in SurfacePatternslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.SurfaceTrees is IAssetLinkContainerGetter SurfaceTreeslinkCont)
            {
                foreach (var item in SurfaceTreeslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.BoneModifiers is IAssetLinkContainerGetter BoneModifierslinkCont)
            {
                foreach (var item in BoneModifierslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.SnapTemplateBehaviors is IAssetLinkContainerGetter SnapTemplateBehaviorslinkCont)
            {
                foreach (var item in SnapTemplateBehaviorslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Planets is IAssetLinkContainerGetter PlanetslinkCont)
            {
                foreach (var item in PlanetslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.PlanetContentManagerBranchNodes is IAssetLinkContainerGetter PlanetContentManagerBranchNodeslinkCont)
            {
                foreach (var item in PlanetContentManagerBranchNodeslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.PlanetContentManagerContentNodes is IAssetLinkContainerGetter PlanetContentManagerContentNodeslinkCont)
            {
                foreach (var item in PlanetContentManagerContentNodeslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Stars is IAssetLinkContainerGetter StarslinkCont)
            {
                foreach (var item in StarslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.LayeredMaterialSwaps is IAssetLinkContainerGetter LayeredMaterialSwapslinkCont)
            {
                foreach (var item in LayeredMaterialSwapslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.LegendaryItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.TimeOfDays is IAssetLinkContainerGetter TimeOfDayslinkCont)
            {
                foreach (var item in TimeOfDayslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.ActorValueModulations is IAssetLinkContainerGetter ActorValueModulationslinkCont)
            {
                foreach (var item in ActorValueModulationslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Challenges is IAssetLinkContainerGetter ChallengeslinkCont)
            {
                foreach (var item in ChallengeslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class StarfieldModSetterTranslationCommon
    {
        public static readonly StarfieldModSetterTranslationCommon Instance = new StarfieldModSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStarfieldMod item,
            IStarfieldModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Keywords);
                try
                {
                    item.Keywords.DeepCopyIn(
                        rhs: rhs.Keywords,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Keywords));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FFKW) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.FFKW);
                try
                {
                    item.FFKW.DeepCopyIn(
                        rhs: rhs.FFKW,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.FFKW));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LocationReferenceTypes);
                try
                {
                    item.LocationReferenceTypes.DeepCopyIn(
                        rhs: rhs.LocationReferenceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LocationReferenceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Actions) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Actions);
                try
                {
                    item.Actions.DeepCopyIn(
                        rhs: rhs.Actions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Actions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Transforms) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Transforms);
                try
                {
                    item.Transforms.DeepCopyIn(
                        rhs: rhs.Transforms,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Transforms));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.TextureSets) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.TextureSets);
                try
                {
                    item.TextureSets.DeepCopyIn(
                        rhs: rhs.TextureSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.TextureSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.DamageTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.DamageTypes);
                try
                {
                    item.DamageTypes.DeepCopyIn(
                        rhs: rhs.DamageTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.DamageTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyIn(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyIn(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AffinityEvents) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AffinityEvents);
                try
                {
                    item.AffinityEvents.DeepCopyIn(
                        rhs: rhs.AffinityEvents,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AffinityEvents));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.DeepCopyIn(
                        rhs: rhs.HeadParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.HeadParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyIn(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SoundMarkers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SoundMarkers);
                try
                {
                    item.SoundMarkers.DeepCopyIn(
                        rhs: rhs.SoundMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SoundMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SoundEchoMarkers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SoundEchoMarkers);
                try
                {
                    item.SoundEchoMarkers.DeepCopyIn(
                        rhs: rhs.SoundEchoMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SoundEchoMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AcousticSpaces) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AcousticSpaces);
                try
                {
                    item.AcousticSpaces.DeepCopyIn(
                        rhs: rhs.AcousticSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AcousticSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives);
                try
                {
                    item.AudioOcclusionPrimitives.DeepCopyIn(
                        rhs: rhs.AudioOcclusionPrimitives,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MagicEffects) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.MagicEffects);
                try
                {
                    item.MagicEffects.DeepCopyIn(
                        rhs: rhs.MagicEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.MagicEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LandscapeTextures) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LandscapeTextures);
                try
                {
                    item.LandscapeTextures.DeepCopyIn(
                        rhs: rhs.LandscapeTextures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LandscapeTextures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ProjectedDecals) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ProjectedDecals);
                try
                {
                    item.ProjectedDecals.DeepCopyIn(
                        rhs: rhs.ProjectedDecals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ProjectedDecals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ObjectEffects) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ObjectEffects);
                try
                {
                    item.ObjectEffects.DeepCopyIn(
                        rhs: rhs.ObjectEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ObjectEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Spells);
                try
                {
                    item.Spells.DeepCopyIn(
                        rhs: rhs.Spells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Spells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Activators) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Activators);
                try
                {
                    item.Activators.DeepCopyIn(
                        rhs: rhs.Activators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Activators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.CurveTables) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.CurveTables);
                try
                {
                    item.CurveTables.DeepCopyIn(
                        rhs: rhs.CurveTables,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.CurveTables));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Curve3Ds) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Curve3Ds);
                try
                {
                    item.Curve3Ds.DeepCopyIn(
                        rhs: rhs.Curve3Ds,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Curve3Ds));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Armors) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Armors);
                try
                {
                    item.Armors.DeepCopyIn(
                        rhs: rhs.Armors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Armors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Books) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Books);
                try
                {
                    item.Books.DeepCopyIn(
                        rhs: rhs.Books,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Books));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Containers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Containers);
                try
                {
                    item.Containers.DeepCopyIn(
                        rhs: rhs.Containers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Containers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Doors) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Doors);
                try
                {
                    item.Doors.DeepCopyIn(
                        rhs: rhs.Doors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Doors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Lights) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Lights);
                try
                {
                    item.Lights.DeepCopyIn(
                        rhs: rhs.Lights,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Lights));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MiscItems) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.MiscItems);
                try
                {
                    item.MiscItems.DeepCopyIn(
                        rhs: rhs.MiscItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.MiscItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Statics) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Statics);
                try
                {
                    item.Statics.DeepCopyIn(
                        rhs: rhs.Statics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Statics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.StaticCollections) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.StaticCollections);
                try
                {
                    item.StaticCollections.DeepCopyIn(
                        rhs: rhs.StaticCollections,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.StaticCollections));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PackIns) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.PackIns);
                try
                {
                    item.PackIns.DeepCopyIn(
                        rhs: rhs.PackIns,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.PackIns));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MoveableStatics) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.MoveableStatics);
                try
                {
                    item.MoveableStatics.DeepCopyIn(
                        rhs: rhs.MoveableStatics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.MoveableStatics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Grasses);
                try
                {
                    item.Grasses.DeepCopyIn(
                        rhs: rhs.Grasses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Grasses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Florae) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Florae);
                try
                {
                    item.Florae.DeepCopyIn(
                        rhs: rhs.Florae,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Florae));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Furniture) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Furniture);
                try
                {
                    item.Furniture.DeepCopyIn(
                        rhs: rhs.Furniture,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Furniture));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Weapons) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Weapons);
                try
                {
                    item.Weapons.DeepCopyIn(
                        rhs: rhs.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Weapons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Ammunitions) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Ammunitions);
                try
                {
                    item.Ammunitions.DeepCopyIn(
                        rhs: rhs.Ammunitions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Ammunitions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Npcs) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Npcs);
                try
                {
                    item.Npcs.DeepCopyIn(
                        rhs: rhs.Npcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Npcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LeveledNpcs) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LeveledNpcs);
                try
                {
                    item.LeveledNpcs.DeepCopyIn(
                        rhs: rhs.LeveledNpcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LeveledNpcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LeveledPackIns) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LeveledPackIns);
                try
                {
                    item.LeveledPackIns.DeepCopyIn(
                        rhs: rhs.LeveledPackIns,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LeveledPackIns));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Keys) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Keys);
                try
                {
                    item.Keys.DeepCopyIn(
                        rhs: rhs.Keys,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Keys));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Ingestibles) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Ingestibles);
                try
                {
                    item.Ingestibles.DeepCopyIn(
                        rhs: rhs.Ingestibles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Ingestibles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.IdleMarkers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.IdleMarkers);
                try
                {
                    item.IdleMarkers.DeepCopyIn(
                        rhs: rhs.IdleMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.IdleMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BiomeMarkers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.BiomeMarkers);
                try
                {
                    item.BiomeMarkers.DeepCopyIn(
                        rhs: rhs.BiomeMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.BiomeMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Notes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Notes);
                try
                {
                    item.Notes.DeepCopyIn(
                        rhs: rhs.Notes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Notes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Projectiles) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Projectiles);
                try
                {
                    item.Projectiles.DeepCopyIn(
                        rhs: rhs.Projectiles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Projectiles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Hazards) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Hazards);
                try
                {
                    item.Hazards.DeepCopyIn(
                        rhs: rhs.Hazards,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Hazards));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BendableSplines) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.BendableSplines);
                try
                {
                    item.BendableSplines.DeepCopyIn(
                        rhs: rhs.BendableSplines,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.BendableSplines));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Terminals) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Terminals);
                try
                {
                    item.Terminals.DeepCopyIn(
                        rhs: rhs.Terminals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Terminals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LeveledItems) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LeveledItems);
                try
                {
                    item.LeveledItems.DeepCopyIn(
                        rhs: rhs.LeveledItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LeveledItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GenericBaseFormTemplates) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.GenericBaseFormTemplates);
                try
                {
                    item.GenericBaseFormTemplates.DeepCopyIn(
                        rhs: rhs.GenericBaseFormTemplates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.GenericBaseFormTemplates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GenericBaseForms) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.GenericBaseForms);
                try
                {
                    item.GenericBaseForms.DeepCopyIn(
                        rhs: rhs.GenericBaseForms,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.GenericBaseForms));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LeveledBaseForms) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LeveledBaseForms);
                try
                {
                    item.LeveledBaseForms.DeepCopyIn(
                        rhs: rhs.LeveledBaseForms,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LeveledBaseForms));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Weathers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Weathers);
                try
                {
                    item.Weathers.DeepCopyIn(
                        rhs: rhs.Weathers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Weathers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.WeatherSettings) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.WeatherSettings);
                try
                {
                    item.WeatherSettings.DeepCopyIn(
                        rhs: rhs.WeatherSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.WeatherSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Climates) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Climates);
                try
                {
                    item.Climates.DeepCopyIn(
                        rhs: rhs.Climates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Climates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ShaderParticleGeometries) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ShaderParticleGeometries);
                try
                {
                    item.ShaderParticleGeometries.DeepCopyIn(
                        rhs: rhs.ShaderParticleGeometries,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ShaderParticleGeometries));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Regions);
                try
                {
                    item.Regions.DeepCopyIn(
                        rhs: rhs.Regions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Regions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.NavigationMeshInfoMaps) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.NavigationMeshInfoMaps);
                try
                {
                    item.NavigationMeshInfoMaps.DeepCopyIn(
                        rhs: rhs.NavigationMeshInfoMaps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.NavigationMeshInfoMaps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Cells) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Cells);
                try
                {
                    item.Cells.DeepCopyIn(
                        rhs: rhs.Cells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Cells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Worldspaces) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Worldspaces);
                try
                {
                    item.Worldspaces.DeepCopyIn(
                        rhs: rhs.Worldspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Worldspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Quests);
                try
                {
                    item.Quests.DeepCopyIn(
                        rhs: rhs.Quests,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Quests));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.IdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.IdleAnimations);
                try
                {
                    item.IdleAnimations.DeepCopyIn(
                        rhs: rhs.IdleAnimations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.IdleAnimations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Packages) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Packages);
                try
                {
                    item.Packages.DeepCopyIn(
                        rhs: rhs.Packages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Packages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.CombatStyles) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.CombatStyles);
                try
                {
                    item.CombatStyles.DeepCopyIn(
                        rhs: rhs.CombatStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.CombatStyles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LoadScreens) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LoadScreens);
                try
                {
                    item.LoadScreens.DeepCopyIn(
                        rhs: rhs.LoadScreens,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LoadScreens));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AnimatedObjects) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AnimatedObjects);
                try
                {
                    item.AnimatedObjects.DeepCopyIn(
                        rhs: rhs.AnimatedObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AnimatedObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Waters) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Waters);
                try
                {
                    item.Waters.DeepCopyIn(
                        rhs: rhs.Waters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Waters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.EffectShaders) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.EffectShaders);
                try
                {
                    item.EffectShaders.DeepCopyIn(
                        rhs: rhs.EffectShaders,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.EffectShaders));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Explosions) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Explosions);
                try
                {
                    item.Explosions.DeepCopyIn(
                        rhs: rhs.Explosions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Explosions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Debris) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Debris);
                try
                {
                    item.Debris.DeepCopyIn(
                        rhs: rhs.Debris,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Debris));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ImageSpaces) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ImageSpaces);
                try
                {
                    item.ImageSpaces.DeepCopyIn(
                        rhs: rhs.ImageSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ImageSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ImageSpaceAdapters) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ImageSpaceAdapters);
                try
                {
                    item.ImageSpaceAdapters.DeepCopyIn(
                        rhs: rhs.ImageSpaceAdapters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ImageSpaceAdapters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FormLists) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.FormLists);
                try
                {
                    item.FormLists.DeepCopyIn(
                        rhs: rhs.FormLists,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.FormLists));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Perks) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Perks);
                try
                {
                    item.Perks.DeepCopyIn(
                        rhs: rhs.Perks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Perks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BodyParts) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.BodyParts);
                try
                {
                    item.BodyParts.DeepCopyIn(
                        rhs: rhs.BodyParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.BodyParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AddonNodes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AddonNodes);
                try
                {
                    item.AddonNodes.DeepCopyIn(
                        rhs: rhs.AddonNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AddonNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ActorValueInformation) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ActorValueInformation);
                try
                {
                    item.ActorValueInformation.DeepCopyIn(
                        rhs: rhs.ActorValueInformation,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ActorValueInformation));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.CameraShots) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.CameraShots);
                try
                {
                    item.CameraShots.DeepCopyIn(
                        rhs: rhs.CameraShots,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.CameraShots));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.CameraPaths) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.CameraPaths);
                try
                {
                    item.CameraPaths.DeepCopyIn(
                        rhs: rhs.CameraPaths,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.CameraPaths));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.VoiceTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.VoiceTypes);
                try
                {
                    item.VoiceTypes.DeepCopyIn(
                        rhs: rhs.VoiceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.VoiceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MaterialTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.MaterialTypes);
                try
                {
                    item.MaterialTypes.DeepCopyIn(
                        rhs: rhs.MaterialTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.MaterialTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Impacts) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Impacts);
                try
                {
                    item.Impacts.DeepCopyIn(
                        rhs: rhs.Impacts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Impacts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ImpactDataSets) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ImpactDataSets);
                try
                {
                    item.ImpactDataSets.DeepCopyIn(
                        rhs: rhs.ImpactDataSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ImpactDataSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ArmorAddons) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ArmorAddons);
                try
                {
                    item.ArmorAddons.DeepCopyIn(
                        rhs: rhs.ArmorAddons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ArmorAddons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Locations) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Locations);
                try
                {
                    item.Locations.DeepCopyIn(
                        rhs: rhs.Locations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Locations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Messages) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Messages);
                try
                {
                    item.Messages.DeepCopyIn(
                        rhs: rhs.Messages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Messages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.DefaultObjectManagers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.DefaultObjectManagers);
                try
                {
                    item.DefaultObjectManagers.DeepCopyIn(
                        rhs: rhs.DefaultObjectManagers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.DefaultObjectManagers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.DefaultObjects) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.DefaultObjects);
                try
                {
                    item.DefaultObjects.DeepCopyIn(
                        rhs: rhs.DefaultObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.DefaultObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LightingTemplates) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LightingTemplates);
                try
                {
                    item.LightingTemplates.DeepCopyIn(
                        rhs: rhs.LightingTemplates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LightingTemplates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MusicTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.MusicTypes);
                try
                {
                    item.MusicTypes.DeepCopyIn(
                        rhs: rhs.MusicTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.MusicTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Footsteps) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Footsteps);
                try
                {
                    item.Footsteps.DeepCopyIn(
                        rhs: rhs.Footsteps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Footsteps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FootstepSets) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.FootstepSets);
                try
                {
                    item.FootstepSets.DeepCopyIn(
                        rhs: rhs.FootstepSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.FootstepSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.StoryManagerBranchNodes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.StoryManagerBranchNodes);
                try
                {
                    item.StoryManagerBranchNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerBranchNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.StoryManagerBranchNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.StoryManagerQuestNodes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.StoryManagerQuestNodes);
                try
                {
                    item.StoryManagerQuestNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerQuestNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.StoryManagerQuestNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.StoryManagerEventNodes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.StoryManagerEventNodes);
                try
                {
                    item.StoryManagerEventNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerEventNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.StoryManagerEventNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MusicTracks) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.MusicTracks);
                try
                {
                    item.MusicTracks.DeepCopyIn(
                        rhs: rhs.MusicTracks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.MusicTracks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.EquipTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.EquipTypes);
                try
                {
                    item.EquipTypes.DeepCopyIn(
                        rhs: rhs.EquipTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.EquipTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Outfits) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Outfits);
                try
                {
                    item.Outfits.DeepCopyIn(
                        rhs: rhs.Outfits,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Outfits));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ArtObjects) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ArtObjects);
                try
                {
                    item.ArtObjects.DeepCopyIn(
                        rhs: rhs.ArtObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ArtObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MovementTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.MovementTypes);
                try
                {
                    item.MovementTypes.DeepCopyIn(
                        rhs: rhs.MovementTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.MovementTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.CollisionLayers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.CollisionLayers);
                try
                {
                    item.CollisionLayers.DeepCopyIn(
                        rhs: rhs.CollisionLayers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.CollisionLayers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Colors) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Colors);
                try
                {
                    item.Colors.DeepCopyIn(
                        rhs: rhs.Colors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Colors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ReverbParameters) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ReverbParameters);
                try
                {
                    item.ReverbParameters.DeepCopyIn(
                        rhs: rhs.ReverbParameters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ReverbParameters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ReferenceGroups) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ReferenceGroups);
                try
                {
                    item.ReferenceGroups.DeepCopyIn(
                        rhs: rhs.ReferenceGroups,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ReferenceGroups));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AimModels) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AimModels);
                try
                {
                    item.AimModels.DeepCopyIn(
                        rhs: rhs.AimModels,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AimModels));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AimAssistModels) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AimAssistModels);
                try
                {
                    item.AimAssistModels.DeepCopyIn(
                        rhs: rhs.AimAssistModels,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AimAssistModels));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MeleeAimAssistModels) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.MeleeAimAssistModels);
                try
                {
                    item.MeleeAimAssistModels.DeepCopyIn(
                        rhs: rhs.MeleeAimAssistModels,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.MeleeAimAssistModels));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Layers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Layers);
                try
                {
                    item.Layers.DeepCopyIn(
                        rhs: rhs.Layers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Layers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ConstructibleObjects) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ConstructibleObjects);
                try
                {
                    item.ConstructibleObjects.DeepCopyIn(
                        rhs: rhs.ConstructibleObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ConstructibleObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ObjectModifications) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ObjectModifications);
                try
                {
                    item.ObjectModifications.DeepCopyIn(
                        rhs: rhs.ObjectModifications,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ObjectModifications));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Zooms) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Zooms);
                try
                {
                    item.Zooms.DeepCopyIn(
                        rhs: rhs.Zooms,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Zooms));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.InstanceNamingRules) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.InstanceNamingRules);
                try
                {
                    item.InstanceNamingRules.DeepCopyIn(
                        rhs: rhs.InstanceNamingRules,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.InstanceNamingRules));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SoundKeywordMappings) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SoundKeywordMappings);
                try
                {
                    item.SoundKeywordMappings.DeepCopyIn(
                        rhs: rhs.SoundKeywordMappings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SoundKeywordMappings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AttractionRules) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AttractionRules);
                try
                {
                    item.AttractionRules.DeepCopyIn(
                        rhs: rhs.AttractionRules,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AttractionRules));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SceneCollections) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SceneCollections);
                try
                {
                    item.SceneCollections.DeepCopyIn(
                        rhs: rhs.SceneCollections,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SceneCollections));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AnimationSoundTagSets) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AnimationSoundTagSets);
                try
                {
                    item.AnimationSoundTagSets.DeepCopyIn(
                        rhs: rhs.AnimationSoundTagSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AnimationSoundTagSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Resources) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Resources);
                try
                {
                    item.Resources.DeepCopyIn(
                        rhs: rhs.Resources,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Resources));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Biomes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Biomes);
                try
                {
                    item.Biomes.DeepCopyIn(
                        rhs: rhs.Biomes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Biomes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.NavigationMeshObstacleCoverManagers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.NavigationMeshObstacleCoverManagers);
                try
                {
                    item.NavigationMeshObstacleCoverManagers.DeepCopyIn(
                        rhs: rhs.NavigationMeshObstacleCoverManagers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.NavigationMeshObstacleCoverManagers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LensFlares) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LensFlares);
                try
                {
                    item.LensFlares.DeepCopyIn(
                        rhs: rhs.LensFlares,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LensFlares));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ObjectVisibilityManagers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ObjectVisibilityManagers);
                try
                {
                    item.ObjectVisibilityManagers.DeepCopyIn(
                        rhs: rhs.ObjectVisibilityManagers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ObjectVisibilityManagers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SnapTemplateNodes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SnapTemplateNodes);
                try
                {
                    item.SnapTemplateNodes.DeepCopyIn(
                        rhs: rhs.SnapTemplateNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SnapTemplateNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SnapTemplates) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SnapTemplates);
                try
                {
                    item.SnapTemplates.DeepCopyIn(
                        rhs: rhs.SnapTemplates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SnapTemplates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GroundCovers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.GroundCovers);
                try
                {
                    item.GroundCovers.DeepCopyIn(
                        rhs: rhs.GroundCovers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.GroundCovers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MorphableObjects) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.MorphableObjects);
                try
                {
                    item.MorphableObjects.DeepCopyIn(
                        rhs: rhs.MorphableObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.MorphableObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Traversals) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Traversals);
                try
                {
                    item.Traversals.DeepCopyIn(
                        rhs: rhs.Traversals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Traversals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ResourceGenerationData) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ResourceGenerationData);
                try
                {
                    item.ResourceGenerationData.DeepCopyIn(
                        rhs: rhs.ResourceGenerationData,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ResourceGenerationData));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BiomeSwaps) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.BiomeSwaps);
                try
                {
                    item.BiomeSwaps.DeepCopyIn(
                        rhs: rhs.BiomeSwaps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.BiomeSwaps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Atmospheres) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Atmospheres);
                try
                {
                    item.Atmospheres.DeepCopyIn(
                        rhs: rhs.Atmospheres,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Atmospheres));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LeveledSpaceCells) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LeveledSpaceCells);
                try
                {
                    item.LeveledSpaceCells.DeepCopyIn(
                        rhs: rhs.LeveledSpaceCells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LeveledSpaceCells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SpeechChallenges) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SpeechChallenges);
                try
                {
                    item.SpeechChallenges.DeepCopyIn(
                        rhs: rhs.SpeechChallenges,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SpeechChallenges));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AimAssistPoses) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AimAssistPoses);
                try
                {
                    item.AimAssistPoses.DeepCopyIn(
                        rhs: rhs.AimAssistPoses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AimAssistPoses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.VolumetricLightings) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.VolumetricLightings);
                try
                {
                    item.VolumetricLightings.DeepCopyIn(
                        rhs: rhs.VolumetricLightings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.VolumetricLightings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfaceBlocks) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SurfaceBlocks);
                try
                {
                    item.SurfaceBlocks.DeepCopyIn(
                        rhs: rhs.SurfaceBlocks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SurfaceBlocks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfacePatternConfigs) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SurfacePatternConfigs);
                try
                {
                    item.SurfacePatternConfigs.DeepCopyIn(
                        rhs: rhs.SurfacePatternConfigs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SurfacePatternConfigs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfacePatterns) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SurfacePatterns);
                try
                {
                    item.SurfacePatterns.DeepCopyIn(
                        rhs: rhs.SurfacePatterns,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SurfacePatterns));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfaceTrees) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SurfaceTrees);
                try
                {
                    item.SurfaceTrees.DeepCopyIn(
                        rhs: rhs.SurfaceTrees,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SurfaceTrees));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PlanetContentManagerTrees) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.PlanetContentManagerTrees);
                try
                {
                    item.PlanetContentManagerTrees.DeepCopyIn(
                        rhs: rhs.PlanetContentManagerTrees,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.PlanetContentManagerTrees));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.BoneModifiers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.BoneModifiers);
                try
                {
                    item.BoneModifiers.DeepCopyIn(
                        rhs: rhs.BoneModifiers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.BoneModifiers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SnapTemplateBehaviors) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SnapTemplateBehaviors);
                try
                {
                    item.SnapTemplateBehaviors.DeepCopyIn(
                        rhs: rhs.SnapTemplateBehaviors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SnapTemplateBehaviors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Planets) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Planets);
                try
                {
                    item.Planets.DeepCopyIn(
                        rhs: rhs.Planets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Planets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ConditionRecords) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ConditionRecords);
                try
                {
                    item.ConditionRecords.DeepCopyIn(
                        rhs: rhs.ConditionRecords,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ConditionRecords));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PlanetContentManagerBranchNodes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.PlanetContentManagerBranchNodes);
                try
                {
                    item.PlanetContentManagerBranchNodes.DeepCopyIn(
                        rhs: rhs.PlanetContentManagerBranchNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.PlanetContentManagerBranchNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PlanetContentManagerContentNodes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.PlanetContentManagerContentNodes);
                try
                {
                    item.PlanetContentManagerContentNodes.DeepCopyIn(
                        rhs: rhs.PlanetContentManagerContentNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.PlanetContentManagerContentNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Stars) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Stars);
                try
                {
                    item.Stars.DeepCopyIn(
                        rhs: rhs.Stars,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Stars));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.WWiseEventDatas) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.WWiseEventDatas);
                try
                {
                    item.WWiseEventDatas.DeepCopyIn(
                        rhs: rhs.WWiseEventDatas,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.WWiseEventDatas));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ResearchProjects) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ResearchProjects);
                try
                {
                    item.ResearchProjects.DeepCopyIn(
                        rhs: rhs.ResearchProjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ResearchProjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AimOpticalSightMarkers) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AimOpticalSightMarkers);
                try
                {
                    item.AimOpticalSightMarkers.DeepCopyIn(
                        rhs: rhs.AimOpticalSightMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AimOpticalSightMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.AmbienceSets) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.AmbienceSets);
                try
                {
                    item.AmbienceSets.DeepCopyIn(
                        rhs: rhs.AmbienceSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.AmbienceSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.WeaponBarrelModels) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.WeaponBarrelModels);
                try
                {
                    item.WeaponBarrelModels.DeepCopyIn(
                        rhs: rhs.WeaponBarrelModels,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.WeaponBarrelModels));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SurfacePatternStyles) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SurfacePatternStyles);
                try
                {
                    item.SurfacePatternStyles.DeepCopyIn(
                        rhs: rhs.SurfacePatternStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SurfacePatternStyles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LayeredMaterialSwaps) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LayeredMaterialSwaps);
                try
                {
                    item.LayeredMaterialSwaps.DeepCopyIn(
                        rhs: rhs.LayeredMaterialSwaps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LayeredMaterialSwaps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ForceDatas) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ForceDatas);
                try
                {
                    item.ForceDatas.DeepCopyIn(
                        rhs: rhs.ForceDatas,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ForceDatas));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.TerminalMenus) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.TerminalMenus);
                try
                {
                    item.TerminalMenus.DeepCopyIn(
                        rhs: rhs.TerminalMenus,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.TerminalMenus));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.EffectSequences) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.EffectSequences);
                try
                {
                    item.EffectSequences.DeepCopyIn(
                        rhs: rhs.EffectSequences,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.EffectSequences));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SecondaryDamageLists) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SecondaryDamageLists);
                try
                {
                    item.SecondaryDamageLists.DeepCopyIn(
                        rhs: rhs.SecondaryDamageLists,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SecondaryDamageLists));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.MaterialPaths) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.MaterialPaths);
                try
                {
                    item.MaterialPaths.DeepCopyIn(
                        rhs: rhs.MaterialPaths,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.MaterialPaths));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Clouds) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Clouds);
                try
                {
                    item.Clouds.DeepCopyIn(
                        rhs: rhs.Clouds,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Clouds));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FogVolumes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.FogVolumes);
                try
                {
                    item.FogVolumes.DeepCopyIn(
                        rhs: rhs.FogVolumes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.FogVolumes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.WWiseKeywordMappings) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.WWiseKeywordMappings);
                try
                {
                    item.WWiseKeywordMappings.DeepCopyIn(
                        rhs: rhs.WWiseKeywordMappings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.WWiseKeywordMappings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.LegendaryItems) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.LegendaryItems);
                try
                {
                    item.LegendaryItems.DeepCopyIn(
                        rhs: rhs.LegendaryItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.LegendaryItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ParticleSystemDefineCollisions) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ParticleSystemDefineCollisions);
                try
                {
                    item.ParticleSystemDefineCollisions.DeepCopyIn(
                        rhs: rhs.ParticleSystemDefineCollisions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ParticleSystemDefineCollisions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.SunPresets) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.SunPresets);
                try
                {
                    item.SunPresets.DeepCopyIn(
                        rhs: rhs.SunPresets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.SunPresets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PhotoModeFeatures) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.PhotoModeFeatures);
                try
                {
                    item.PhotoModeFeatures.DeepCopyIn(
                        rhs: rhs.PhotoModeFeatures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.PhotoModeFeatures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GameplayOptions) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.GameplayOptions);
                try
                {
                    item.GameplayOptions.DeepCopyIn(
                        rhs: rhs.GameplayOptions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.GameplayOptions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.GameplayOptionsGroups) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.GameplayOptionsGroups);
                try
                {
                    item.GameplayOptionsGroups.DeepCopyIn(
                        rhs: rhs.GameplayOptionsGroups,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.GameplayOptionsGroups));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.TimeOfDays) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.TimeOfDays);
                try
                {
                    item.TimeOfDays.DeepCopyIn(
                        rhs: rhs.TimeOfDays,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.TimeOfDays));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.ActorValueModulations) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.ActorValueModulations);
                try
                {
                    item.ActorValueModulations.DeepCopyIn(
                        rhs: rhs.ActorValueModulations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.ActorValueModulations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.Challenges) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.Challenges);
                try
                {
                    item.Challenges.DeepCopyIn(
                        rhs: rhs.Challenges,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.Challenges));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.FacialExpressions) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.FacialExpressions);
                try
                {
                    item.FacialExpressions.DeepCopyIn(
                        rhs: rhs.FacialExpressions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.FacialExpressions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldMod_FieldIndex.PERS) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldMod_FieldIndex.PERS);
                try
                {
                    item.PERS.DeepCopyIn(
                        rhs: rhs.PERS,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)StarfieldMod_FieldIndex.PERS));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IStarfieldMod item,
            IStarfieldModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public partial StarfieldMod DeepCopyGetNew(IStarfieldModGetter item);
        public StarfieldMod DeepCopy(
            IStarfieldModGetter item,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            var ret = DeepCopyGetNew(item);
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StarfieldMod DeepCopy(
            IStarfieldModGetter item,
            out StarfieldMod.ErrorMask errorMask,
            StarfieldMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            var ret = DeepCopyGetNew(item);
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StarfieldMod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StarfieldMod DeepCopy(
            IStarfieldModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            var ret = DeepCopyGetNew(item);
            ((StarfieldModSetterTranslationCommon)((IStarfieldModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class StarfieldMod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StarfieldMod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StarfieldMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StarfieldModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return StarfieldModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StarfieldModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Mutagen
namespace Mutagen.Bethesda.Starfield
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Keywords;
        public bool FFKW;
        public bool LocationReferenceTypes;
        public bool Actions;
        public bool Transforms;
        public bool TextureSets;
        public bool Globals;
        public bool DamageTypes;
        public bool Classes;
        public bool Factions;
        public bool AffinityEvents;
        public bool HeadParts;
        public bool Races;
        public bool SoundMarkers;
        public bool SoundEchoMarkers;
        public bool AcousticSpaces;
        public bool AudioOcclusionPrimitives;
        public bool MagicEffects;
        public bool LandscapeTextures;
        public bool ProjectedDecals;
        public bool ObjectEffects;
        public bool Spells;
        public bool Activators;
        public bool CurveTables;
        public bool Curve3Ds;
        public bool Armors;
        public bool Books;
        public bool Containers;
        public bool Doors;
        public bool Lights;
        public bool MiscItems;
        public bool Statics;
        public bool StaticCollections;
        public bool PackIns;
        public bool MoveableStatics;
        public bool Grasses;
        public bool Florae;
        public bool Furniture;
        public bool Weapons;
        public bool Ammunitions;
        public bool Npcs;
        public bool LeveledNpcs;
        public bool LeveledPackIns;
        public bool Keys;
        public bool Ingestibles;
        public bool IdleMarkers;
        public bool BiomeMarkers;
        public bool Notes;
        public bool Projectiles;
        public bool Hazards;
        public bool BendableSplines;
        public bool Terminals;
        public bool LeveledItems;
        public bool GenericBaseFormTemplates;
        public bool GenericBaseForms;
        public bool LeveledBaseForms;
        public bool Weathers;
        public bool WeatherSettings;
        public bool Climates;
        public bool ShaderParticleGeometries;
        public bool Regions;
        public bool NavigationMeshInfoMaps;
        public bool Cells;
        public bool Worldspaces;
        public bool Quests;
        public bool IdleAnimations;
        public bool Packages;
        public bool CombatStyles;
        public bool LoadScreens;
        public bool AnimatedObjects;
        public bool Waters;
        public bool EffectShaders;
        public bool Explosions;
        public bool Debris;
        public bool ImageSpaces;
        public bool ImageSpaceAdapters;
        public bool FormLists;
        public bool Perks;
        public bool BodyParts;
        public bool AddonNodes;
        public bool ActorValueInformation;
        public bool CameraShots;
        public bool CameraPaths;
        public bool VoiceTypes;
        public bool MaterialTypes;
        public bool Impacts;
        public bool ImpactDataSets;
        public bool ArmorAddons;
        public bool Locations;
        public bool Messages;
        public bool DefaultObjectManagers;
        public bool DefaultObjects;
        public bool LightingTemplates;
        public bool MusicTypes;
        public bool Footsteps;
        public bool FootstepSets;
        public bool StoryManagerBranchNodes;
        public bool StoryManagerQuestNodes;
        public bool StoryManagerEventNodes;
        public bool MusicTracks;
        public bool EquipTypes;
        public bool Outfits;
        public bool ArtObjects;
        public bool MovementTypes;
        public bool CollisionLayers;
        public bool Colors;
        public bool ReverbParameters;
        public bool ReferenceGroups;
        public bool AimModels;
        public bool AimAssistModels;
        public bool MeleeAimAssistModels;
        public bool Layers;
        public bool ConstructibleObjects;
        public bool ObjectModifications;
        public bool Zooms;
        public bool InstanceNamingRules;
        public bool SoundKeywordMappings;
        public bool AttractionRules;
        public bool SceneCollections;
        public bool AnimationSoundTagSets;
        public bool Resources;
        public bool Biomes;
        public bool NavigationMeshObstacleCoverManagers;
        public bool LensFlares;
        public bool ObjectVisibilityManagers;
        public bool SnapTemplateNodes;
        public bool SnapTemplates;
        public bool GroundCovers;
        public bool MorphableObjects;
        public bool Traversals;
        public bool ResourceGenerationData;
        public bool BiomeSwaps;
        public bool Atmospheres;
        public bool LeveledSpaceCells;
        public bool SpeechChallenges;
        public bool AimAssistPoses;
        public bool VolumetricLightings;
        public bool SurfaceBlocks;
        public bool SurfacePatternConfigs;
        public bool SurfacePatterns;
        public bool SurfaceTrees;
        public bool PlanetContentManagerTrees;
        public bool BoneModifiers;
        public bool SnapTemplateBehaviors;
        public bool Planets;
        public bool ConditionRecords;
        public bool PlanetContentManagerBranchNodes;
        public bool PlanetContentManagerContentNodes;
        public bool Stars;
        public bool WWiseEventDatas;
        public bool ResearchProjects;
        public bool AimOpticalSightMarkers;
        public bool AmbienceSets;
        public bool WeaponBarrelModels;
        public bool SurfacePatternStyles;
        public bool LayeredMaterialSwaps;
        public bool ForceDatas;
        public bool TerminalMenus;
        public bool EffectSequences;
        public bool SecondaryDamageLists;
        public bool MaterialPaths;
        public bool Clouds;
        public bool FogVolumes;
        public bool WWiseKeywordMappings;
        public bool LegendaryItems;
        public bool ParticleSystemDefineCollisions;
        public bool SunPresets;
        public bool PhotoModeFeatures;
        public bool GameplayOptions;
        public bool GameplayOptionsGroups;
        public bool TimeOfDays;
        public bool ActorValueModulations;
        public bool Challenges;
        public bool FacialExpressions;
        public bool PERS;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Keywords = defaultValue;
            FFKW = defaultValue;
            LocationReferenceTypes = defaultValue;
            Actions = defaultValue;
            Transforms = defaultValue;
            TextureSets = defaultValue;
            Globals = defaultValue;
            DamageTypes = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            AffinityEvents = defaultValue;
            HeadParts = defaultValue;
            Races = defaultValue;
            SoundMarkers = defaultValue;
            SoundEchoMarkers = defaultValue;
            AcousticSpaces = defaultValue;
            AudioOcclusionPrimitives = defaultValue;
            MagicEffects = defaultValue;
            LandscapeTextures = defaultValue;
            ProjectedDecals = defaultValue;
            ObjectEffects = defaultValue;
            Spells = defaultValue;
            Activators = defaultValue;
            CurveTables = defaultValue;
            Curve3Ds = defaultValue;
            Armors = defaultValue;
            Books = defaultValue;
            Containers = defaultValue;
            Doors = defaultValue;
            Lights = defaultValue;
            MiscItems = defaultValue;
            Statics = defaultValue;
            StaticCollections = defaultValue;
            PackIns = defaultValue;
            MoveableStatics = defaultValue;
            Grasses = defaultValue;
            Florae = defaultValue;
            Furniture = defaultValue;
            Weapons = defaultValue;
            Ammunitions = defaultValue;
            Npcs = defaultValue;
            LeveledNpcs = defaultValue;
            LeveledPackIns = defaultValue;
            Keys = defaultValue;
            Ingestibles = defaultValue;
            IdleMarkers = defaultValue;
            BiomeMarkers = defaultValue;
            Notes = defaultValue;
            Projectiles = defaultValue;
            Hazards = defaultValue;
            BendableSplines = defaultValue;
            Terminals = defaultValue;
            LeveledItems = defaultValue;
            GenericBaseFormTemplates = defaultValue;
            GenericBaseForms = defaultValue;
            LeveledBaseForms = defaultValue;
            Weathers = defaultValue;
            WeatherSettings = defaultValue;
            Climates = defaultValue;
            ShaderParticleGeometries = defaultValue;
            Regions = defaultValue;
            NavigationMeshInfoMaps = defaultValue;
            Cells = defaultValue;
            Worldspaces = defaultValue;
            Quests = defaultValue;
            IdleAnimations = defaultValue;
            Packages = defaultValue;
            CombatStyles = defaultValue;
            LoadScreens = defaultValue;
            AnimatedObjects = defaultValue;
            Waters = defaultValue;
            EffectShaders = defaultValue;
            Explosions = defaultValue;
            Debris = defaultValue;
            ImageSpaces = defaultValue;
            ImageSpaceAdapters = defaultValue;
            FormLists = defaultValue;
            Perks = defaultValue;
            BodyParts = defaultValue;
            AddonNodes = defaultValue;
            ActorValueInformation = defaultValue;
            CameraShots = defaultValue;
            CameraPaths = defaultValue;
            VoiceTypes = defaultValue;
            MaterialTypes = defaultValue;
            Impacts = defaultValue;
            ImpactDataSets = defaultValue;
            ArmorAddons = defaultValue;
            Locations = defaultValue;
            Messages = defaultValue;
            DefaultObjectManagers = defaultValue;
            DefaultObjects = defaultValue;
            LightingTemplates = defaultValue;
            MusicTypes = defaultValue;
            Footsteps = defaultValue;
            FootstepSets = defaultValue;
            StoryManagerBranchNodes = defaultValue;
            StoryManagerQuestNodes = defaultValue;
            StoryManagerEventNodes = defaultValue;
            MusicTracks = defaultValue;
            EquipTypes = defaultValue;
            Outfits = defaultValue;
            ArtObjects = defaultValue;
            MovementTypes = defaultValue;
            CollisionLayers = defaultValue;
            Colors = defaultValue;
            ReverbParameters = defaultValue;
            ReferenceGroups = defaultValue;
            AimModels = defaultValue;
            AimAssistModels = defaultValue;
            MeleeAimAssistModels = defaultValue;
            Layers = defaultValue;
            ConstructibleObjects = defaultValue;
            ObjectModifications = defaultValue;
            Zooms = defaultValue;
            InstanceNamingRules = defaultValue;
            SoundKeywordMappings = defaultValue;
            AttractionRules = defaultValue;
            SceneCollections = defaultValue;
            AnimationSoundTagSets = defaultValue;
            Resources = defaultValue;
            Biomes = defaultValue;
            NavigationMeshObstacleCoverManagers = defaultValue;
            LensFlares = defaultValue;
            ObjectVisibilityManagers = defaultValue;
            SnapTemplateNodes = defaultValue;
            SnapTemplates = defaultValue;
            GroundCovers = defaultValue;
            MorphableObjects = defaultValue;
            Traversals = defaultValue;
            ResourceGenerationData = defaultValue;
            BiomeSwaps = defaultValue;
            Atmospheres = defaultValue;
            LeveledSpaceCells = defaultValue;
            SpeechChallenges = defaultValue;
            AimAssistPoses = defaultValue;
            VolumetricLightings = defaultValue;
            SurfaceBlocks = defaultValue;
            SurfacePatternConfigs = defaultValue;
            SurfacePatterns = defaultValue;
            SurfaceTrees = defaultValue;
            PlanetContentManagerTrees = defaultValue;
            BoneModifiers = defaultValue;
            SnapTemplateBehaviors = defaultValue;
            Planets = defaultValue;
            ConditionRecords = defaultValue;
            PlanetContentManagerBranchNodes = defaultValue;
            PlanetContentManagerContentNodes = defaultValue;
            Stars = defaultValue;
            WWiseEventDatas = defaultValue;
            ResearchProjects = defaultValue;
            AimOpticalSightMarkers = defaultValue;
            AmbienceSets = defaultValue;
            WeaponBarrelModels = defaultValue;
            SurfacePatternStyles = defaultValue;
            LayeredMaterialSwaps = defaultValue;
            ForceDatas = defaultValue;
            TerminalMenus = defaultValue;
            EffectSequences = defaultValue;
            SecondaryDamageLists = defaultValue;
            MaterialPaths = defaultValue;
            Clouds = defaultValue;
            FogVolumes = defaultValue;
            WWiseKeywordMappings = defaultValue;
            LegendaryItems = defaultValue;
            ParticleSystemDefineCollisions = defaultValue;
            SunPresets = defaultValue;
            PhotoModeFeatures = defaultValue;
            GameplayOptions = defaultValue;
            GameplayOptionsGroups = defaultValue;
            TimeOfDays = defaultValue;
            ActorValueModulations = defaultValue;
            Challenges = defaultValue;
            FacialExpressions = defaultValue;
            PERS = defaultValue;
        }
    }

    public interface IStarfieldModDisposableGetter : IStarfieldModGetter, IModDisposeGetter
    {
    }

    /// <summary>
    /// Different game release versions a Starfield mod can have
    /// </summary>
    public enum StarfieldRelease
    {
        Starfield = 8
    }

    public static class StarfieldReleaseExt
    {
        public static GameRelease ToGameRelease(this StarfieldRelease release)
        {
            return release switch
            {
                StarfieldRelease.Starfield => GameRelease.Starfield,
                _ => throw new ArgumentException()
            };
        }

        public static StarfieldRelease ToStarfieldRelease(this GameRelease release)
        {
            return release switch
            {
                GameRelease.Starfield => StarfieldRelease.Starfield,
                _ => throw new ArgumentException()
            };
        }
    }
}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class StarfieldMod_Registration : IModRegistration
    {
        public GameCategory GameCategory => GameCategory.Starfield;
    }

}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class StarfieldModBinaryWriteTranslation
    {
        public static readonly StarfieldModBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IStarfieldModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            TypedWriteParams translationParams = default)
        {
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Keywords ?? true)
            {
                var KeywordsItem = item.Keywords;
                if (KeywordsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)KeywordsItem).BinaryWriteTranslator).Write<IKeywordGetter>(
                        item: KeywordsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FFKW ?? true)
            {
                var FFKWItem = item.FFKW;
                if (FFKWItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FFKWItem).BinaryWriteTranslator).Write<IFFKWRecordGetter>(
                        item: FFKWItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LocationReferenceTypes ?? true)
            {
                var LocationReferenceTypesItem = item.LocationReferenceTypes;
                if (LocationReferenceTypesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LocationReferenceTypesItem).BinaryWriteTranslator).Write<ILocationReferenceTypeGetter>(
                        item: LocationReferenceTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Actions ?? true)
            {
                var ActionsItem = item.Actions;
                if (ActionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ActionsItem).BinaryWriteTranslator).Write<IActionRecordGetter>(
                        item: ActionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Transforms ?? true)
            {
                var TransformsItem = item.Transforms;
                if (TransformsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)TransformsItem).BinaryWriteTranslator).Write<ITransformGetter>(
                        item: TransformsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.TextureSets ?? true)
            {
                var TextureSetsItem = item.TextureSets;
                if (TextureSetsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)TextureSetsItem).BinaryWriteTranslator).Write<ITextureSetGetter>(
                        item: TextureSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Globals ?? true)
            {
                var GlobalsItem = item.Globals;
                if (GlobalsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GlobalsItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: GlobalsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DamageTypes ?? true)
            {
                var DamageTypesItem = item.DamageTypes;
                if (DamageTypesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)DamageTypesItem).BinaryWriteTranslator).Write<IDamageTypeGetter>(
                        item: DamageTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Classes ?? true)
            {
                var ClassesItem = item.Classes;
                if (ClassesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ClassesItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: ClassesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Factions ?? true)
            {
                var FactionsItem = item.Factions;
                if (FactionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FactionsItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: FactionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AffinityEvents ?? true)
            {
                var AffinityEventsItem = item.AffinityEvents;
                if (AffinityEventsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AffinityEventsItem).BinaryWriteTranslator).Write<IAffinityEventGetter>(
                        item: AffinityEventsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.HeadParts ?? true)
            {
                var HeadPartsItem = item.HeadParts;
                if (HeadPartsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)HeadPartsItem).BinaryWriteTranslator).Write<IHeadPartGetter>(
                        item: HeadPartsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Races ?? true)
            {
                var RacesItem = item.Races;
                if (RacesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)RacesItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: RacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundMarkers ?? true)
            {
                var SoundMarkersItem = item.SoundMarkers;
                if (SoundMarkersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SoundMarkersItem).BinaryWriteTranslator).Write<ISoundMarkerGetter>(
                        item: SoundMarkersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundEchoMarkers ?? true)
            {
                var SoundEchoMarkersItem = item.SoundEchoMarkers;
                if (SoundEchoMarkersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SoundEchoMarkersItem).BinaryWriteTranslator).Write<ISoundEchoMarkerGetter>(
                        item: SoundEchoMarkersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AcousticSpaces ?? true)
            {
                var AcousticSpacesItem = item.AcousticSpaces;
                if (AcousticSpacesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AcousticSpacesItem).BinaryWriteTranslator).Write<IAcousticSpaceGetter>(
                        item: AcousticSpacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AudioOcclusionPrimitives ?? true)
            {
                var AudioOcclusionPrimitivesItem = item.AudioOcclusionPrimitives;
                if (AudioOcclusionPrimitivesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AudioOcclusionPrimitivesItem).BinaryWriteTranslator).Write<IAudioOcclusionPrimitiveGetter>(
                        item: AudioOcclusionPrimitivesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MagicEffects ?? true)
            {
                var MagicEffectsItem = item.MagicEffects;
                if (MagicEffectsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MagicEffectsItem).BinaryWriteTranslator).Write<IMagicEffectGetter>(
                        item: MagicEffectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LandscapeTextures ?? true)
            {
                var LandscapeTexturesItem = item.LandscapeTextures;
                if (LandscapeTexturesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LandscapeTexturesItem).BinaryWriteTranslator).Write<ILandscapeTextureGetter>(
                        item: LandscapeTexturesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ProjectedDecals ?? true)
            {
                var ProjectedDecalsItem = item.ProjectedDecals;
                if (ProjectedDecalsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ProjectedDecalsItem).BinaryWriteTranslator).Write<IProjectedDecalGetter>(
                        item: ProjectedDecalsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ObjectEffects ?? true)
            {
                var ObjectEffectsItem = item.ObjectEffects;
                if (ObjectEffectsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ObjectEffectsItem).BinaryWriteTranslator).Write<IObjectEffectGetter>(
                        item: ObjectEffectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Spells ?? true)
            {
                var SpellsItem = item.Spells;
                if (SpellsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SpellsItem).BinaryWriteTranslator).Write<ISpellGetter>(
                        item: SpellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Activators ?? true)
            {
                var ActivatorsItem = item.Activators;
                if (ActivatorsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ActivatorsItem).BinaryWriteTranslator).Write<IActivatorGetter>(
                        item: ActivatorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CurveTables ?? true)
            {
                var CurveTablesItem = item.CurveTables;
                if (CurveTablesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)CurveTablesItem).BinaryWriteTranslator).Write<ICurveTableGetter>(
                        item: CurveTablesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Curve3Ds ?? true)
            {
                var Curve3DsItem = item.Curve3Ds;
                if (Curve3DsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)Curve3DsItem).BinaryWriteTranslator).Write<ICurve3DGetter>(
                        item: Curve3DsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Armors ?? true)
            {
                var ArmorsItem = item.Armors;
                if (ArmorsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ArmorsItem).BinaryWriteTranslator).Write<IArmorGetter>(
                        item: ArmorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Books ?? true)
            {
                var BooksItem = item.Books;
                if (BooksItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)BooksItem).BinaryWriteTranslator).Write<IBookGetter>(
                        item: BooksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Containers ?? true)
            {
                var ContainersItem = item.Containers;
                if (ContainersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ContainersItem).BinaryWriteTranslator).Write<IContainerGetter>(
                        item: ContainersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Doors ?? true)
            {
                var DoorsItem = item.Doors;
                if (DoorsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)DoorsItem).BinaryWriteTranslator).Write<IDoorGetter>(
                        item: DoorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Lights ?? true)
            {
                var LightsItem = item.Lights;
                if (LightsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LightsItem).BinaryWriteTranslator).Write<ILightGetter>(
                        item: LightsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MiscItems ?? true)
            {
                var MiscItemsItem = item.MiscItems;
                if (MiscItemsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MiscItemsItem).BinaryWriteTranslator).Write<IMiscItemGetter>(
                        item: MiscItemsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Statics ?? true)
            {
                var StaticsItem = item.Statics;
                if (StaticsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)StaticsItem).BinaryWriteTranslator).Write<IStaticGetter>(
                        item: StaticsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StaticCollections ?? true)
            {
                var StaticCollectionsItem = item.StaticCollections;
                if (StaticCollectionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)StaticCollectionsItem).BinaryWriteTranslator).Write<IStaticCollectionGetter>(
                        item: StaticCollectionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.PackIns ?? true)
            {
                var PackInsItem = item.PackIns;
                if (PackInsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)PackInsItem).BinaryWriteTranslator).Write<IPackInGetter>(
                        item: PackInsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MoveableStatics ?? true)
            {
                var MoveableStaticsItem = item.MoveableStatics;
                if (MoveableStaticsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MoveableStaticsItem).BinaryWriteTranslator).Write<IMoveableStaticGetter>(
                        item: MoveableStaticsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Grasses ?? true)
            {
                var GrassesItem = item.Grasses;
                if (GrassesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GrassesItem).BinaryWriteTranslator).Write<IGrassGetter>(
                        item: GrassesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Florae ?? true)
            {
                var FloraeItem = item.Florae;
                if (FloraeItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FloraeItem).BinaryWriteTranslator).Write<IFloraGetter>(
                        item: FloraeItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Furniture ?? true)
            {
                var FurnitureItem = item.Furniture;
                if (FurnitureItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FurnitureItem).BinaryWriteTranslator).Write<IFurnitureGetter>(
                        item: FurnitureItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                var WeaponsItem = item.Weapons;
                if (WeaponsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)WeaponsItem).BinaryWriteTranslator).Write<IWeaponGetter>(
                        item: WeaponsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Ammunitions ?? true)
            {
                var AmmunitionsItem = item.Ammunitions;
                if (AmmunitionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AmmunitionsItem).BinaryWriteTranslator).Write<IAmmunitionGetter>(
                        item: AmmunitionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Npcs ?? true)
            {
                var NpcsItem = item.Npcs;
                if (NpcsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)NpcsItem).BinaryWriteTranslator).Write<INpcGetter>(
                        item: NpcsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledNpcs ?? true)
            {
                var LeveledNpcsItem = item.LeveledNpcs;
                if (LeveledNpcsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LeveledNpcsItem).BinaryWriteTranslator).Write<ILeveledNpcGetter>(
                        item: LeveledNpcsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledPackIns ?? true)
            {
                var LeveledPackInsItem = item.LeveledPackIns;
                if (LeveledPackInsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LeveledPackInsItem).BinaryWriteTranslator).Write<ILeveledPackInGetter>(
                        item: LeveledPackInsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Keys ?? true)
            {
                var KeysItem = item.Keys;
                if (KeysItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)KeysItem).BinaryWriteTranslator).Write<IKeyGetter>(
                        item: KeysItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Ingestibles ?? true)
            {
                var IngestiblesItem = item.Ingestibles;
                if (IngestiblesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)IngestiblesItem).BinaryWriteTranslator).Write<IIngestibleGetter>(
                        item: IngestiblesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.IdleMarkers ?? true)
            {
                var IdleMarkersItem = item.IdleMarkers;
                if (IdleMarkersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)IdleMarkersItem).BinaryWriteTranslator).Write<IIdleMarkerGetter>(
                        item: IdleMarkersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.BiomeMarkers ?? true)
            {
                var BiomeMarkersItem = item.BiomeMarkers;
                if (BiomeMarkersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)BiomeMarkersItem).BinaryWriteTranslator).Write<IBiomeMarkerGetter>(
                        item: BiomeMarkersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Notes ?? true)
            {
                var NotesItem = item.Notes;
                if (NotesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)NotesItem).BinaryWriteTranslator).Write<INoteGetter>(
                        item: NotesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Projectiles ?? true)
            {
                var ProjectilesItem = item.Projectiles;
                if (ProjectilesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ProjectilesItem).BinaryWriteTranslator).Write<IProjectileGetter>(
                        item: ProjectilesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Hazards ?? true)
            {
                var HazardsItem = item.Hazards;
                if (HazardsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)HazardsItem).BinaryWriteTranslator).Write<IHazardGetter>(
                        item: HazardsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.BendableSplines ?? true)
            {
                var BendableSplinesItem = item.BendableSplines;
                if (BendableSplinesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)BendableSplinesItem).BinaryWriteTranslator).Write<IBendableSplineGetter>(
                        item: BendableSplinesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Terminals ?? true)
            {
                var TerminalsItem = item.Terminals;
                if (TerminalsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)TerminalsItem).BinaryWriteTranslator).Write<ITerminalGetter>(
                        item: TerminalsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledItems ?? true)
            {
                var LeveledItemsItem = item.LeveledItems;
                if (LeveledItemsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LeveledItemsItem).BinaryWriteTranslator).Write<ILeveledItemGetter>(
                        item: LeveledItemsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.GenericBaseFormTemplates ?? true)
            {
                var GenericBaseFormTemplatesItem = item.GenericBaseFormTemplates;
                if (GenericBaseFormTemplatesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GenericBaseFormTemplatesItem).BinaryWriteTranslator).Write<IGenericBaseFormTemplateGetter>(
                        item: GenericBaseFormTemplatesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.GenericBaseForms ?? true)
            {
                var GenericBaseFormsItem = item.GenericBaseForms;
                if (GenericBaseFormsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GenericBaseFormsItem).BinaryWriteTranslator).Write<IGenericBaseFormGetter>(
                        item: GenericBaseFormsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledBaseForms ?? true)
            {
                var LeveledBaseFormsItem = item.LeveledBaseForms;
                if (LeveledBaseFormsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LeveledBaseFormsItem).BinaryWriteTranslator).Write<ILeveledBaseFormGetter>(
                        item: LeveledBaseFormsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Weathers ?? true)
            {
                var WeathersItem = item.Weathers;
                if (WeathersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)WeathersItem).BinaryWriteTranslator).Write<IWeatherGetter>(
                        item: WeathersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.WeatherSettings ?? true)
            {
                var WeatherSettingsItem = item.WeatherSettings;
                if (WeatherSettingsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)WeatherSettingsItem).BinaryWriteTranslator).Write<IWeatherSettingGetter>(
                        item: WeatherSettingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Climates ?? true)
            {
                var ClimatesItem = item.Climates;
                if (ClimatesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ClimatesItem).BinaryWriteTranslator).Write<IClimateGetter>(
                        item: ClimatesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ShaderParticleGeometries ?? true)
            {
                var ShaderParticleGeometriesItem = item.ShaderParticleGeometries;
                if (ShaderParticleGeometriesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ShaderParticleGeometriesItem).BinaryWriteTranslator).Write<IShaderParticleGeometryGetter>(
                        item: ShaderParticleGeometriesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Regions ?? true)
            {
                var RegionsItem = item.Regions;
                if (RegionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)RegionsItem).BinaryWriteTranslator).Write<IRegionGetter>(
                        item: RegionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.NavigationMeshInfoMaps ?? true)
            {
                var NavigationMeshInfoMapsItem = item.NavigationMeshInfoMaps;
                if (NavigationMeshInfoMapsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)NavigationMeshInfoMapsItem).BinaryWriteTranslator).Write<INavigationMeshInfoMapGetter>(
                        item: NavigationMeshInfoMapsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Cells ?? true)
            {
                var CellsItem = item.Cells;
                if (CellsItem.Records.Count > 0)
                {
                    ((StarfieldListGroupBinaryWriteTranslation)((IBinaryItem)CellsItem).BinaryWriteTranslator).Write<ICellBlockGetter>(
                        item: CellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Worldspaces ?? true)
            {
                var WorldspacesItem = item.Worldspaces;
                if (WorldspacesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)WorldspacesItem).BinaryWriteTranslator).Write<IWorldspaceGetter>(
                        item: WorldspacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Quests ?? true)
            {
                var QuestsItem = item.Quests;
                if (QuestsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)QuestsItem).BinaryWriteTranslator).Write<IQuestGetter>(
                        item: QuestsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.IdleAnimations ?? true)
            {
                var IdleAnimationsItem = item.IdleAnimations;
                if (IdleAnimationsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)IdleAnimationsItem).BinaryWriteTranslator).Write<IIdleAnimationGetter>(
                        item: IdleAnimationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Packages ?? true)
            {
                var PackagesItem = item.Packages;
                if (PackagesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)PackagesItem).BinaryWriteTranslator).Write<IPackageGetter>(
                        item: PackagesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CombatStyles ?? true)
            {
                var CombatStylesItem = item.CombatStyles;
                if (CombatStylesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)CombatStylesItem).BinaryWriteTranslator).Write<ICombatStyleGetter>(
                        item: CombatStylesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LoadScreens ?? true)
            {
                var LoadScreensItem = item.LoadScreens;
                if (LoadScreensItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LoadScreensItem).BinaryWriteTranslator).Write<ILoadScreenGetter>(
                        item: LoadScreensItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AnimatedObjects ?? true)
            {
                var AnimatedObjectsItem = item.AnimatedObjects;
                if (AnimatedObjectsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AnimatedObjectsItem).BinaryWriteTranslator).Write<IAnimatedObjectGetter>(
                        item: AnimatedObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Waters ?? true)
            {
                var WatersItem = item.Waters;
                if (WatersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)WatersItem).BinaryWriteTranslator).Write<IWaterGetter>(
                        item: WatersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.EffectShaders ?? true)
            {
                var EffectShadersItem = item.EffectShaders;
                if (EffectShadersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)EffectShadersItem).BinaryWriteTranslator).Write<IEffectShaderGetter>(
                        item: EffectShadersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Explosions ?? true)
            {
                var ExplosionsItem = item.Explosions;
                if (ExplosionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ExplosionsItem).BinaryWriteTranslator).Write<IExplosionGetter>(
                        item: ExplosionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Debris ?? true)
            {
                var DebrisItem = item.Debris;
                if (DebrisItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)DebrisItem).BinaryWriteTranslator).Write<IDebrisGetter>(
                        item: DebrisItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ImageSpaces ?? true)
            {
                var ImageSpacesItem = item.ImageSpaces;
                if (ImageSpacesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ImageSpacesItem).BinaryWriteTranslator).Write<IImageSpaceGetter>(
                        item: ImageSpacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ImageSpaceAdapters ?? true)
            {
                var ImageSpaceAdaptersItem = item.ImageSpaceAdapters;
                if (ImageSpaceAdaptersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ImageSpaceAdaptersItem).BinaryWriteTranslator).Write<IImageSpaceAdapterGetter>(
                        item: ImageSpaceAdaptersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FormLists ?? true)
            {
                var FormListsItem = item.FormLists;
                if (FormListsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FormListsItem).BinaryWriteTranslator).Write<IFormListGetter>(
                        item: FormListsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Perks ?? true)
            {
                var PerksItem = item.Perks;
                if (PerksItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)PerksItem).BinaryWriteTranslator).Write<IPerkGetter>(
                        item: PerksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.BodyParts ?? true)
            {
                var BodyPartsItem = item.BodyParts;
                if (BodyPartsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)BodyPartsItem).BinaryWriteTranslator).Write<IBodyPartDataGetter>(
                        item: BodyPartsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AddonNodes ?? true)
            {
                var AddonNodesItem = item.AddonNodes;
                if (AddonNodesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AddonNodesItem).BinaryWriteTranslator).Write<IAddonNodeGetter>(
                        item: AddonNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ActorValueInformation ?? true)
            {
                var ActorValueInformationItem = item.ActorValueInformation;
                if (ActorValueInformationItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ActorValueInformationItem).BinaryWriteTranslator).Write<IActorValueInformationGetter>(
                        item: ActorValueInformationItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CameraShots ?? true)
            {
                var CameraShotsItem = item.CameraShots;
                if (CameraShotsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)CameraShotsItem).BinaryWriteTranslator).Write<ICameraShotGetter>(
                        item: CameraShotsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CameraPaths ?? true)
            {
                var CameraPathsItem = item.CameraPaths;
                if (CameraPathsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)CameraPathsItem).BinaryWriteTranslator).Write<ICameraPathGetter>(
                        item: CameraPathsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.VoiceTypes ?? true)
            {
                var VoiceTypesItem = item.VoiceTypes;
                if (VoiceTypesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)VoiceTypesItem).BinaryWriteTranslator).Write<IVoiceTypeGetter>(
                        item: VoiceTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MaterialTypes ?? true)
            {
                var MaterialTypesItem = item.MaterialTypes;
                if (MaterialTypesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MaterialTypesItem).BinaryWriteTranslator).Write<IMaterialTypeGetter>(
                        item: MaterialTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Impacts ?? true)
            {
                var ImpactsItem = item.Impacts;
                if (ImpactsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ImpactsItem).BinaryWriteTranslator).Write<IImpactGetter>(
                        item: ImpactsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ImpactDataSets ?? true)
            {
                var ImpactDataSetsItem = item.ImpactDataSets;
                if (ImpactDataSetsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ImpactDataSetsItem).BinaryWriteTranslator).Write<IImpactDataSetGetter>(
                        item: ImpactDataSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ArmorAddons ?? true)
            {
                var ArmorAddonsItem = item.ArmorAddons;
                if (ArmorAddonsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ArmorAddonsItem).BinaryWriteTranslator).Write<IArmorAddonGetter>(
                        item: ArmorAddonsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Locations ?? true)
            {
                var LocationsItem = item.Locations;
                if (LocationsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LocationsItem).BinaryWriteTranslator).Write<ILocationGetter>(
                        item: LocationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Messages ?? true)
            {
                var MessagesItem = item.Messages;
                if (MessagesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MessagesItem).BinaryWriteTranslator).Write<IMessageGetter>(
                        item: MessagesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DefaultObjectManagers ?? true)
            {
                var DefaultObjectManagersItem = item.DefaultObjectManagers;
                if (DefaultObjectManagersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)DefaultObjectManagersItem).BinaryWriteTranslator).Write<IDefaultObjectManagerGetter>(
                        item: DefaultObjectManagersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DefaultObjects ?? true)
            {
                var DefaultObjectsItem = item.DefaultObjects;
                if (DefaultObjectsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)DefaultObjectsItem).BinaryWriteTranslator).Write<IDefaultObjectGetter>(
                        item: DefaultObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LightingTemplates ?? true)
            {
                var LightingTemplatesItem = item.LightingTemplates;
                if (LightingTemplatesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LightingTemplatesItem).BinaryWriteTranslator).Write<ILightingTemplateGetter>(
                        item: LightingTemplatesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MusicTypes ?? true)
            {
                var MusicTypesItem = item.MusicTypes;
                if (MusicTypesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MusicTypesItem).BinaryWriteTranslator).Write<IMusicTypeGetter>(
                        item: MusicTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Footsteps ?? true)
            {
                var FootstepsItem = item.Footsteps;
                if (FootstepsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FootstepsItem).BinaryWriteTranslator).Write<IFootstepGetter>(
                        item: FootstepsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FootstepSets ?? true)
            {
                var FootstepSetsItem = item.FootstepSets;
                if (FootstepSetsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FootstepSetsItem).BinaryWriteTranslator).Write<IFootstepSetGetter>(
                        item: FootstepSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StoryManagerBranchNodes ?? true)
            {
                var StoryManagerBranchNodesItem = item.StoryManagerBranchNodes;
                if (StoryManagerBranchNodesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)StoryManagerBranchNodesItem).BinaryWriteTranslator).Write<IStoryManagerBranchNodeGetter>(
                        item: StoryManagerBranchNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StoryManagerQuestNodes ?? true)
            {
                var StoryManagerQuestNodesItem = item.StoryManagerQuestNodes;
                if (StoryManagerQuestNodesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)StoryManagerQuestNodesItem).BinaryWriteTranslator).Write<IStoryManagerQuestNodeGetter>(
                        item: StoryManagerQuestNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StoryManagerEventNodes ?? true)
            {
                var StoryManagerEventNodesItem = item.StoryManagerEventNodes;
                if (StoryManagerEventNodesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)StoryManagerEventNodesItem).BinaryWriteTranslator).Write<IStoryManagerEventNodeGetter>(
                        item: StoryManagerEventNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MusicTracks ?? true)
            {
                var MusicTracksItem = item.MusicTracks;
                if (MusicTracksItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MusicTracksItem).BinaryWriteTranslator).Write<IMusicTrackGetter>(
                        item: MusicTracksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.EquipTypes ?? true)
            {
                var EquipTypesItem = item.EquipTypes;
                if (EquipTypesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)EquipTypesItem).BinaryWriteTranslator).Write<IEquipTypeGetter>(
                        item: EquipTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Outfits ?? true)
            {
                var OutfitsItem = item.Outfits;
                if (OutfitsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)OutfitsItem).BinaryWriteTranslator).Write<IOutfitGetter>(
                        item: OutfitsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ArtObjects ?? true)
            {
                var ArtObjectsItem = item.ArtObjects;
                if (ArtObjectsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ArtObjectsItem).BinaryWriteTranslator).Write<IArtObjectGetter>(
                        item: ArtObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MovementTypes ?? true)
            {
                var MovementTypesItem = item.MovementTypes;
                if (MovementTypesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MovementTypesItem).BinaryWriteTranslator).Write<IMovementTypeGetter>(
                        item: MovementTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CollisionLayers ?? true)
            {
                var CollisionLayersItem = item.CollisionLayers;
                if (CollisionLayersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)CollisionLayersItem).BinaryWriteTranslator).Write<ICollisionLayerGetter>(
                        item: CollisionLayersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Colors ?? true)
            {
                var ColorsItem = item.Colors;
                if (ColorsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ColorsItem).BinaryWriteTranslator).Write<IColorRecordGetter>(
                        item: ColorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ReverbParameters ?? true)
            {
                var ReverbParametersItem = item.ReverbParameters;
                if (ReverbParametersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ReverbParametersItem).BinaryWriteTranslator).Write<IReverbParametersGetter>(
                        item: ReverbParametersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ReferenceGroups ?? true)
            {
                var ReferenceGroupsItem = item.ReferenceGroups;
                if (ReferenceGroupsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ReferenceGroupsItem).BinaryWriteTranslator).Write<IReferenceGroupGetter>(
                        item: ReferenceGroupsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AimModels ?? true)
            {
                var AimModelsItem = item.AimModels;
                if (AimModelsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AimModelsItem).BinaryWriteTranslator).Write<IAimModelGetter>(
                        item: AimModelsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AimAssistModels ?? true)
            {
                var AimAssistModelsItem = item.AimAssistModels;
                if (AimAssistModelsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AimAssistModelsItem).BinaryWriteTranslator).Write<IAimAssistModelGetter>(
                        item: AimAssistModelsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MeleeAimAssistModels ?? true)
            {
                var MeleeAimAssistModelsItem = item.MeleeAimAssistModels;
                if (MeleeAimAssistModelsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MeleeAimAssistModelsItem).BinaryWriteTranslator).Write<IMeleeAimAssistModelGetter>(
                        item: MeleeAimAssistModelsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Layers ?? true)
            {
                var LayersItem = item.Layers;
                if (LayersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LayersItem).BinaryWriteTranslator).Write<ILayerGetter>(
                        item: LayersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ConstructibleObjects ?? true)
            {
                var ConstructibleObjectsItem = item.ConstructibleObjects;
                if (ConstructibleObjectsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ConstructibleObjectsItem).BinaryWriteTranslator).Write<IConstructibleObjectGetter>(
                        item: ConstructibleObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ObjectModifications ?? true)
            {
                var ObjectModificationsItem = item.ObjectModifications;
                if (ObjectModificationsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ObjectModificationsItem).BinaryWriteTranslator).Write<IAObjectModificationGetter>(
                        item: ObjectModificationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Zooms ?? true)
            {
                var ZoomsItem = item.Zooms;
                if (ZoomsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ZoomsItem).BinaryWriteTranslator).Write<IZoomGetter>(
                        item: ZoomsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.InstanceNamingRules ?? true)
            {
                var InstanceNamingRulesItem = item.InstanceNamingRules;
                if (InstanceNamingRulesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)InstanceNamingRulesItem).BinaryWriteTranslator).Write<IInstanceNamingRulesGetter>(
                        item: InstanceNamingRulesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundKeywordMappings ?? true)
            {
                var SoundKeywordMappingsItem = item.SoundKeywordMappings;
                if (SoundKeywordMappingsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SoundKeywordMappingsItem).BinaryWriteTranslator).Write<ISoundKeywordMappingGetter>(
                        item: SoundKeywordMappingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AttractionRules ?? true)
            {
                var AttractionRulesItem = item.AttractionRules;
                if (AttractionRulesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AttractionRulesItem).BinaryWriteTranslator).Write<IAttractionRuleGetter>(
                        item: AttractionRulesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SceneCollections ?? true)
            {
                var SceneCollectionsItem = item.SceneCollections;
                if (SceneCollectionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SceneCollectionsItem).BinaryWriteTranslator).Write<ISceneCollectionGetter>(
                        item: SceneCollectionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AnimationSoundTagSets ?? true)
            {
                var AnimationSoundTagSetsItem = item.AnimationSoundTagSets;
                if (AnimationSoundTagSetsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AnimationSoundTagSetsItem).BinaryWriteTranslator).Write<IAnimationSoundTagSetGetter>(
                        item: AnimationSoundTagSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Resources ?? true)
            {
                var ResourcesItem = item.Resources;
                if (ResourcesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ResourcesItem).BinaryWriteTranslator).Write<IResourceGetter>(
                        item: ResourcesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Biomes ?? true)
            {
                var BiomesItem = item.Biomes;
                if (BiomesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)BiomesItem).BinaryWriteTranslator).Write<IBiomeGetter>(
                        item: BiomesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.NavigationMeshObstacleCoverManagers ?? true)
            {
                var NavigationMeshObstacleCoverManagersItem = item.NavigationMeshObstacleCoverManagers;
                if (NavigationMeshObstacleCoverManagersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)NavigationMeshObstacleCoverManagersItem).BinaryWriteTranslator).Write<INavigationMeshObstacleCoverManagerGetter>(
                        item: NavigationMeshObstacleCoverManagersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LensFlares ?? true)
            {
                var LensFlaresItem = item.LensFlares;
                if (LensFlaresItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LensFlaresItem).BinaryWriteTranslator).Write<ILensFlareGetter>(
                        item: LensFlaresItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ObjectVisibilityManagers ?? true)
            {
                var ObjectVisibilityManagersItem = item.ObjectVisibilityManagers;
                if (ObjectVisibilityManagersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ObjectVisibilityManagersItem).BinaryWriteTranslator).Write<IObjectVisibilityManagerGetter>(
                        item: ObjectVisibilityManagersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SnapTemplateNodes ?? true)
            {
                var SnapTemplateNodesItem = item.SnapTemplateNodes;
                if (SnapTemplateNodesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SnapTemplateNodesItem).BinaryWriteTranslator).Write<ISnapTemplateNodeGetter>(
                        item: SnapTemplateNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SnapTemplates ?? true)
            {
                var SnapTemplatesItem = item.SnapTemplates;
                if (SnapTemplatesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SnapTemplatesItem).BinaryWriteTranslator).Write<ISnapTemplateGetter>(
                        item: SnapTemplatesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.GroundCovers ?? true)
            {
                var GroundCoversItem = item.GroundCovers;
                if (GroundCoversItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GroundCoversItem).BinaryWriteTranslator).Write<IGroundCoverGetter>(
                        item: GroundCoversItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MorphableObjects ?? true)
            {
                var MorphableObjectsItem = item.MorphableObjects;
                if (MorphableObjectsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MorphableObjectsItem).BinaryWriteTranslator).Write<IMorphableObjectGetter>(
                        item: MorphableObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Traversals ?? true)
            {
                var TraversalsItem = item.Traversals;
                if (TraversalsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)TraversalsItem).BinaryWriteTranslator).Write<ITraversalGetter>(
                        item: TraversalsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ResourceGenerationData ?? true)
            {
                var ResourceGenerationDataItem = item.ResourceGenerationData;
                if (ResourceGenerationDataItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ResourceGenerationDataItem).BinaryWriteTranslator).Write<IResourceGenerationDataGetter>(
                        item: ResourceGenerationDataItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.BiomeSwaps ?? true)
            {
                var BiomeSwapsItem = item.BiomeSwaps;
                if (BiomeSwapsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)BiomeSwapsItem).BinaryWriteTranslator).Write<IBiomeSwapGetter>(
                        item: BiomeSwapsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Atmospheres ?? true)
            {
                var AtmospheresItem = item.Atmospheres;
                if (AtmospheresItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AtmospheresItem).BinaryWriteTranslator).Write<IAtmosphereGetter>(
                        item: AtmospheresItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledSpaceCells ?? true)
            {
                var LeveledSpaceCellsItem = item.LeveledSpaceCells;
                if (LeveledSpaceCellsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LeveledSpaceCellsItem).BinaryWriteTranslator).Write<ILeveledSpaceCellGetter>(
                        item: LeveledSpaceCellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SpeechChallenges ?? true)
            {
                var SpeechChallengesItem = item.SpeechChallenges;
                if (SpeechChallengesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SpeechChallengesItem).BinaryWriteTranslator).Write<ISpeechChallengeGetter>(
                        item: SpeechChallengesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AimAssistPoses ?? true)
            {
                var AimAssistPosesItem = item.AimAssistPoses;
                if (AimAssistPosesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AimAssistPosesItem).BinaryWriteTranslator).Write<IAimAssistPoseGetter>(
                        item: AimAssistPosesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.VolumetricLightings ?? true)
            {
                var VolumetricLightingsItem = item.VolumetricLightings;
                if (VolumetricLightingsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)VolumetricLightingsItem).BinaryWriteTranslator).Write<IVolumetricLightingGetter>(
                        item: VolumetricLightingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SurfaceBlocks ?? true)
            {
                var SurfaceBlocksItem = item.SurfaceBlocks;
                if (SurfaceBlocksItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SurfaceBlocksItem).BinaryWriteTranslator).Write<ISurfaceBlockGetter>(
                        item: SurfaceBlocksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SurfacePatternConfigs ?? true)
            {
                var SurfacePatternConfigsItem = item.SurfacePatternConfigs;
                if (SurfacePatternConfigsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SurfacePatternConfigsItem).BinaryWriteTranslator).Write<ISurfacePatternConfigGetter>(
                        item: SurfacePatternConfigsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SurfacePatterns ?? true)
            {
                var SurfacePatternsItem = item.SurfacePatterns;
                if (SurfacePatternsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SurfacePatternsItem).BinaryWriteTranslator).Write<ISurfacePatternGetter>(
                        item: SurfacePatternsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SurfaceTrees ?? true)
            {
                var SurfaceTreesItem = item.SurfaceTrees;
                if (SurfaceTreesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SurfaceTreesItem).BinaryWriteTranslator).Write<ISurfaceTreeGetter>(
                        item: SurfaceTreesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.PlanetContentManagerTrees ?? true)
            {
                var PlanetContentManagerTreesItem = item.PlanetContentManagerTrees;
                if (PlanetContentManagerTreesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)PlanetContentManagerTreesItem).BinaryWriteTranslator).Write<IPlanetContentManagerTreeGetter>(
                        item: PlanetContentManagerTreesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.BoneModifiers ?? true)
            {
                var BoneModifiersItem = item.BoneModifiers;
                if (BoneModifiersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)BoneModifiersItem).BinaryWriteTranslator).Write<IBoneModifierGetter>(
                        item: BoneModifiersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SnapTemplateBehaviors ?? true)
            {
                var SnapTemplateBehaviorsItem = item.SnapTemplateBehaviors;
                if (SnapTemplateBehaviorsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SnapTemplateBehaviorsItem).BinaryWriteTranslator).Write<ISnapTemplateBehaviorGetter>(
                        item: SnapTemplateBehaviorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Planets ?? true)
            {
                var PlanetsItem = item.Planets;
                if (PlanetsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)PlanetsItem).BinaryWriteTranslator).Write<IPlanetGetter>(
                        item: PlanetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ConditionRecords ?? true)
            {
                var ConditionRecordsItem = item.ConditionRecords;
                if (ConditionRecordsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ConditionRecordsItem).BinaryWriteTranslator).Write<IConditionRecordGetter>(
                        item: ConditionRecordsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.PlanetContentManagerBranchNodes ?? true)
            {
                var PlanetContentManagerBranchNodesItem = item.PlanetContentManagerBranchNodes;
                if (PlanetContentManagerBranchNodesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)PlanetContentManagerBranchNodesItem).BinaryWriteTranslator).Write<IPlanetContentManagerBranchNodeGetter>(
                        item: PlanetContentManagerBranchNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.PlanetContentManagerContentNodes ?? true)
            {
                var PlanetContentManagerContentNodesItem = item.PlanetContentManagerContentNodes;
                if (PlanetContentManagerContentNodesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)PlanetContentManagerContentNodesItem).BinaryWriteTranslator).Write<IPlanetContentManagerContentNodeGetter>(
                        item: PlanetContentManagerContentNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Stars ?? true)
            {
                var StarsItem = item.Stars;
                if (StarsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)StarsItem).BinaryWriteTranslator).Write<IStarGetter>(
                        item: StarsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.WWiseEventDatas ?? true)
            {
                var WWiseEventDatasItem = item.WWiseEventDatas;
                if (WWiseEventDatasItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)WWiseEventDatasItem).BinaryWriteTranslator).Write<IWWiseEventDataGetter>(
                        item: WWiseEventDatasItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ResearchProjects ?? true)
            {
                var ResearchProjectsItem = item.ResearchProjects;
                if (ResearchProjectsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ResearchProjectsItem).BinaryWriteTranslator).Write<IResearchProjectGetter>(
                        item: ResearchProjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AimOpticalSightMarkers ?? true)
            {
                var AimOpticalSightMarkersItem = item.AimOpticalSightMarkers;
                if (AimOpticalSightMarkersItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AimOpticalSightMarkersItem).BinaryWriteTranslator).Write<IAimOpticalSightMarkerGetter>(
                        item: AimOpticalSightMarkersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AmbienceSets ?? true)
            {
                var AmbienceSetsItem = item.AmbienceSets;
                if (AmbienceSetsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)AmbienceSetsItem).BinaryWriteTranslator).Write<IAmbienceSetGetter>(
                        item: AmbienceSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.WeaponBarrelModels ?? true)
            {
                var WeaponBarrelModelsItem = item.WeaponBarrelModels;
                if (WeaponBarrelModelsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)WeaponBarrelModelsItem).BinaryWriteTranslator).Write<IWeaponBarrelModelGetter>(
                        item: WeaponBarrelModelsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SurfacePatternStyles ?? true)
            {
                var SurfacePatternStylesItem = item.SurfacePatternStyles;
                if (SurfacePatternStylesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SurfacePatternStylesItem).BinaryWriteTranslator).Write<ISurfacePatternStyleGetter>(
                        item: SurfacePatternStylesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LayeredMaterialSwaps ?? true)
            {
                var LayeredMaterialSwapsItem = item.LayeredMaterialSwaps;
                if (LayeredMaterialSwapsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LayeredMaterialSwapsItem).BinaryWriteTranslator).Write<ILayeredMaterialSwapGetter>(
                        item: LayeredMaterialSwapsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ForceDatas ?? true)
            {
                var ForceDatasItem = item.ForceDatas;
                if (ForceDatasItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ForceDatasItem).BinaryWriteTranslator).Write<IForceDataGetter>(
                        item: ForceDatasItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.TerminalMenus ?? true)
            {
                var TerminalMenusItem = item.TerminalMenus;
                if (TerminalMenusItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)TerminalMenusItem).BinaryWriteTranslator).Write<ITerminalMenuGetter>(
                        item: TerminalMenusItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.EffectSequences ?? true)
            {
                var EffectSequencesItem = item.EffectSequences;
                if (EffectSequencesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)EffectSequencesItem).BinaryWriteTranslator).Write<IEffectSequenceGetter>(
                        item: EffectSequencesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SecondaryDamageLists ?? true)
            {
                var SecondaryDamageListsItem = item.SecondaryDamageLists;
                if (SecondaryDamageListsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SecondaryDamageListsItem).BinaryWriteTranslator).Write<ISecondaryDamageListGetter>(
                        item: SecondaryDamageListsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MaterialPaths ?? true)
            {
                var MaterialPathsItem = item.MaterialPaths;
                if (MaterialPathsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)MaterialPathsItem).BinaryWriteTranslator).Write<IMaterialPathGetter>(
                        item: MaterialPathsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Clouds ?? true)
            {
                var CloudsItem = item.Clouds;
                if (CloudsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)CloudsItem).BinaryWriteTranslator).Write<ICloudsGetter>(
                        item: CloudsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FogVolumes ?? true)
            {
                var FogVolumesItem = item.FogVolumes;
                if (FogVolumesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FogVolumesItem).BinaryWriteTranslator).Write<IFogVolumeGetter>(
                        item: FogVolumesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.WWiseKeywordMappings ?? true)
            {
                var WWiseKeywordMappingsItem = item.WWiseKeywordMappings;
                if (WWiseKeywordMappingsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)WWiseKeywordMappingsItem).BinaryWriteTranslator).Write<IWWiseKeywordMappingGetter>(
                        item: WWiseKeywordMappingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LegendaryItems ?? true)
            {
                var LegendaryItemsItem = item.LegendaryItems;
                if (LegendaryItemsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)LegendaryItemsItem).BinaryWriteTranslator).Write<ILegendaryItemGetter>(
                        item: LegendaryItemsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ParticleSystemDefineCollisions ?? true)
            {
                var ParticleSystemDefineCollisionsItem = item.ParticleSystemDefineCollisions;
                if (ParticleSystemDefineCollisionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ParticleSystemDefineCollisionsItem).BinaryWriteTranslator).Write<IParticleSystemDefineCollisionGetter>(
                        item: ParticleSystemDefineCollisionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SunPresets ?? true)
            {
                var SunPresetsItem = item.SunPresets;
                if (SunPresetsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)SunPresetsItem).BinaryWriteTranslator).Write<ISunPresetGetter>(
                        item: SunPresetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.PhotoModeFeatures ?? true)
            {
                var PhotoModeFeaturesItem = item.PhotoModeFeatures;
                if (PhotoModeFeaturesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)PhotoModeFeaturesItem).BinaryWriteTranslator).Write<IPhotoModeFeatureGetter>(
                        item: PhotoModeFeaturesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.GameplayOptions ?? true)
            {
                var GameplayOptionsItem = item.GameplayOptions;
                if (GameplayOptionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GameplayOptionsItem).BinaryWriteTranslator).Write<IGameplayOptionsGetter>(
                        item: GameplayOptionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.GameplayOptionsGroups ?? true)
            {
                var GameplayOptionsGroupsItem = item.GameplayOptionsGroups;
                if (GameplayOptionsGroupsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)GameplayOptionsGroupsItem).BinaryWriteTranslator).Write<IGameplayOptionsGroupGetter>(
                        item: GameplayOptionsGroupsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.TimeOfDays ?? true)
            {
                var TimeOfDaysItem = item.TimeOfDays;
                if (TimeOfDaysItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)TimeOfDaysItem).BinaryWriteTranslator).Write<ITimeOfDayRecordGetter>(
                        item: TimeOfDaysItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ActorValueModulations ?? true)
            {
                var ActorValueModulationsItem = item.ActorValueModulations;
                if (ActorValueModulationsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ActorValueModulationsItem).BinaryWriteTranslator).Write<IActorValueModulationGetter>(
                        item: ActorValueModulationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Challenges ?? true)
            {
                var ChallengesItem = item.Challenges;
                if (ChallengesItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)ChallengesItem).BinaryWriteTranslator).Write<IChallengeGetter>(
                        item: ChallengesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FacialExpressions ?? true)
            {
                var FacialExpressionsItem = item.FacialExpressions;
                if (FacialExpressionsItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)FacialExpressionsItem).BinaryWriteTranslator).Write<IFacialExpressionGetter>(
                        item: FacialExpressionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.PERS ?? true)
            {
                var PERSItem = item.PERS;
                if (PERSItem.RecordCache.Count > 0)
                {
                    ((StarfieldGroupBinaryWriteTranslation)((IBinaryItem)PERSItem).BinaryWriteTranslator).Write<IPERSGetter>(
                        item: PERSItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IStarfieldModGetter item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            param ??= BinaryWriteParameters.Default;
            if (param.Parallel.MaxDegreeOfParallelism != 1)
            {
                StarfieldModCommon.WriteParallel(
                    item: item,
                    writer: writer,
                    param: param,
                    modKey: modKey);
                return;
            }
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            Write(
                item: (IStarfieldModGetter)item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

    }

    internal partial class StarfieldModBinaryCreateTranslation
    {
        public static readonly StarfieldModBinaryCreateTranslation Instance = new StarfieldModBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IStarfieldMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        translationParams: null);
                    return (int)StarfieldMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    if (importMask?.Keywords ?? true)
                    {
                        item.Keywords.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Keywords;
                }
                case RecordTypeInts.FFKW:
                {
                    if (importMask?.FFKW ?? true)
                    {
                        item.FFKW.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.FFKW;
                }
                case RecordTypeInts.LCRT:
                {
                    if (importMask?.LocationReferenceTypes ?? true)
                    {
                        item.LocationReferenceTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    if (importMask?.Actions ?? true)
                    {
                        item.Actions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Actions;
                }
                case RecordTypeInts.TRNS:
                {
                    if (importMask?.Transforms ?? true)
                    {
                        item.Transforms.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Transforms;
                }
                case RecordTypeInts.TXST:
                {
                    if (importMask?.TextureSets ?? true)
                    {
                        item.TextureSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    if (importMask?.Globals ?? true)
                    {
                        item.Globals.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Globals;
                }
                case RecordTypeInts.DMGT:
                {
                    if (importMask?.DamageTypes ?? true)
                    {
                        item.DamageTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.DamageTypes;
                }
                case RecordTypeInts.CLAS:
                {
                    if (importMask?.Classes ?? true)
                    {
                        item.Classes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    if (importMask?.Factions ?? true)
                    {
                        item.Factions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Factions;
                }
                case RecordTypeInts.AFFE:
                {
                    if (importMask?.AffinityEvents ?? true)
                    {
                        item.AffinityEvents.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AffinityEvents;
                }
                case RecordTypeInts.HDPT:
                {
                    if (importMask?.HeadParts ?? true)
                    {
                        item.HeadParts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.RACE:
                {
                    if (importMask?.Races ?? true)
                    {
                        item.Races.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    if (importMask?.SoundMarkers ?? true)
                    {
                        item.SoundMarkers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SoundMarkers;
                }
                case RecordTypeInts.SECH:
                {
                    if (importMask?.SoundEchoMarkers ?? true)
                    {
                        item.SoundEchoMarkers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SoundEchoMarkers;
                }
                case RecordTypeInts.ASPC:
                {
                    if (importMask?.AcousticSpaces ?? true)
                    {
                        item.AcousticSpaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AcousticSpaces;
                }
                case RecordTypeInts.AOPF:
                {
                    if (importMask?.AudioOcclusionPrimitives ?? true)
                    {
                        item.AudioOcclusionPrimitives.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives;
                }
                case RecordTypeInts.MGEF:
                {
                    if (importMask?.MagicEffects ?? true)
                    {
                        item.MagicEffects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.LTEX:
                {
                    if (importMask?.LandscapeTextures ?? true)
                    {
                        item.LandscapeTextures.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LandscapeTextures;
                }
                case RecordTypeInts.PDCL:
                {
                    if (importMask?.ProjectedDecals ?? true)
                    {
                        item.ProjectedDecals.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ProjectedDecals;
                }
                case RecordTypeInts.ENCH:
                {
                    if (importMask?.ObjectEffects ?? true)
                    {
                        item.ObjectEffects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ObjectEffects;
                }
                case RecordTypeInts.SPEL:
                {
                    if (importMask?.Spells ?? true)
                    {
                        item.Spells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Spells;
                }
                case RecordTypeInts.ACTI:
                {
                    if (importMask?.Activators ?? true)
                    {
                        item.Activators.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Activators;
                }
                case RecordTypeInts.CURV:
                {
                    if (importMask?.CurveTables ?? true)
                    {
                        item.CurveTables.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.CurveTables;
                }
                case RecordTypeInts.CUR3:
                {
                    if (importMask?.Curve3Ds ?? true)
                    {
                        item.Curve3Ds.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Curve3Ds;
                }
                case RecordTypeInts.ARMO:
                {
                    if (importMask?.Armors ?? true)
                    {
                        item.Armors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    if (importMask?.Books ?? true)
                    {
                        item.Books.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Books;
                }
                case RecordTypeInts.CONT:
                {
                    if (importMask?.Containers ?? true)
                    {
                        item.Containers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    if (importMask?.Doors ?? true)
                    {
                        item.Doors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Doors;
                }
                case RecordTypeInts.LIGH:
                {
                    if (importMask?.Lights ?? true)
                    {
                        item.Lights.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    if (importMask?.MiscItems ?? true)
                    {
                        item.MiscItems.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.MiscItems;
                }
                case RecordTypeInts.STAT:
                {
                    if (importMask?.Statics ?? true)
                    {
                        item.Statics.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Statics;
                }
                case RecordTypeInts.SCOL:
                {
                    if (importMask?.StaticCollections ?? true)
                    {
                        item.StaticCollections.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.StaticCollections;
                }
                case RecordTypeInts.PKIN:
                {
                    if (importMask?.PackIns ?? true)
                    {
                        item.PackIns.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.PackIns;
                }
                case RecordTypeInts.MSTT:
                {
                    if (importMask?.MoveableStatics ?? true)
                    {
                        item.MoveableStatics.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.MoveableStatics;
                }
                case RecordTypeInts.GRAS:
                {
                    if (importMask?.Grasses ?? true)
                    {
                        item.Grasses.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Grasses;
                }
                case RecordTypeInts.FLOR:
                {
                    if (importMask?.Florae ?? true)
                    {
                        item.Florae.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Florae;
                }
                case RecordTypeInts.FURN:
                {
                    if (importMask?.Furniture ?? true)
                    {
                        item.Furniture.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    if (importMask?.Weapons ?? true)
                    {
                        item.Weapons.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    if (importMask?.Ammunitions ?? true)
                    {
                        item.Ammunitions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    if (importMask?.Npcs ?? true)
                    {
                        item.Npcs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.LVLN:
                {
                    if (importMask?.LeveledNpcs ?? true)
                    {
                        item.LeveledNpcs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LeveledNpcs;
                }
                case RecordTypeInts.LVLP:
                {
                    if (importMask?.LeveledPackIns ?? true)
                    {
                        item.LeveledPackIns.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LeveledPackIns;
                }
                case RecordTypeInts.KEYM:
                {
                    if (importMask?.Keys ?? true)
                    {
                        item.Keys.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    if (importMask?.Ingestibles ?? true)
                    {
                        item.Ingestibles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Ingestibles;
                }
                case RecordTypeInts.IDLM:
                {
                    if (importMask?.IdleMarkers ?? true)
                    {
                        item.IdleMarkers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.IdleMarkers;
                }
                case RecordTypeInts.BMMO:
                {
                    if (importMask?.BiomeMarkers ?? true)
                    {
                        item.BiomeMarkers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.BiomeMarkers;
                }
                case RecordTypeInts.NOTE:
                {
                    if (importMask?.Notes ?? true)
                    {
                        item.Notes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Notes;
                }
                case RecordTypeInts.PROJ:
                {
                    if (importMask?.Projectiles ?? true)
                    {
                        item.Projectiles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Projectiles;
                }
                case RecordTypeInts.HAZD:
                {
                    if (importMask?.Hazards ?? true)
                    {
                        item.Hazards.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Hazards;
                }
                case RecordTypeInts.BNDS:
                {
                    if (importMask?.BendableSplines ?? true)
                    {
                        item.BendableSplines.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.BendableSplines;
                }
                case RecordTypeInts.TERM:
                {
                    if (importMask?.Terminals ?? true)
                    {
                        item.Terminals.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Terminals;
                }
                case RecordTypeInts.LVLI:
                {
                    if (importMask?.LeveledItems ?? true)
                    {
                        item.LeveledItems.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.GBFT:
                {
                    if (importMask?.GenericBaseFormTemplates ?? true)
                    {
                        item.GenericBaseFormTemplates.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.GenericBaseFormTemplates;
                }
                case RecordTypeInts.GBFM:
                {
                    if (importMask?.GenericBaseForms ?? true)
                    {
                        item.GenericBaseForms.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.GenericBaseForms;
                }
                case RecordTypeInts.LVLB:
                {
                    if (importMask?.LeveledBaseForms ?? true)
                    {
                        item.LeveledBaseForms.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LeveledBaseForms;
                }
                case RecordTypeInts.WTHR:
                {
                    if (importMask?.Weathers ?? true)
                    {
                        item.Weathers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Weathers;
                }
                case RecordTypeInts.WTHS:
                {
                    if (importMask?.WeatherSettings ?? true)
                    {
                        item.WeatherSettings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.WeatherSettings;
                }
                case RecordTypeInts.CLMT:
                {
                    if (importMask?.Climates ?? true)
                    {
                        item.Climates.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Climates;
                }
                case RecordTypeInts.SPGD:
                {
                    if (importMask?.ShaderParticleGeometries ?? true)
                    {
                        item.ShaderParticleGeometries.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ShaderParticleGeometries;
                }
                case RecordTypeInts.REGN:
                {
                    if (importMask?.Regions ?? true)
                    {
                        item.Regions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Regions;
                }
                case RecordTypeInts.NAVI:
                {
                    if (importMask?.NavigationMeshInfoMaps ?? true)
                    {
                        item.NavigationMeshInfoMaps.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.NavigationMeshInfoMaps;
                }
                case RecordTypeInts.CELL:
                {
                    if (importMask?.Cells ?? true)
                    {
                        item.Cells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    if (importMask?.Worldspaces ?? true)
                    {
                        item.Worldspaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.QUST:
                {
                    if (importMask?.Quests ?? true)
                    {
                        item.Quests.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    if (importMask?.IdleAnimations ?? true)
                    {
                        item.IdleAnimations.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    if (importMask?.Packages ?? true)
                    {
                        item.Packages.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Packages;
                }
                case RecordTypeInts.CSTY:
                {
                    if (importMask?.CombatStyles ?? true)
                    {
                        item.CombatStyles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    if (importMask?.LoadScreens ?? true)
                    {
                        item.LoadScreens.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.ANIO:
                {
                    if (importMask?.AnimatedObjects ?? true)
                    {
                        item.AnimatedObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    if (importMask?.Waters ?? true)
                    {
                        item.Waters.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    if (importMask?.EffectShaders ?? true)
                    {
                        item.EffectShaders.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.EffectShaders;
                }
                case RecordTypeInts.EXPL:
                {
                    if (importMask?.Explosions ?? true)
                    {
                        item.Explosions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Explosions;
                }
                case RecordTypeInts.DEBR:
                {
                    if (importMask?.Debris ?? true)
                    {
                        item.Debris.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Debris;
                }
                case RecordTypeInts.IMGS:
                {
                    if (importMask?.ImageSpaces ?? true)
                    {
                        item.ImageSpaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.IMAD:
                {
                    if (importMask?.ImageSpaceAdapters ?? true)
                    {
                        item.ImageSpaceAdapters.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ImageSpaceAdapters;
                }
                case RecordTypeInts.FLST:
                {
                    if (importMask?.FormLists ?? true)
                    {
                        item.FormLists.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.FormLists;
                }
                case RecordTypeInts.PERK:
                {
                    if (importMask?.Perks ?? true)
                    {
                        item.Perks.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Perks;
                }
                case RecordTypeInts.BPTD:
                {
                    if (importMask?.BodyParts ?? true)
                    {
                        item.BodyParts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.BodyParts;
                }
                case RecordTypeInts.ADDN:
                {
                    if (importMask?.AddonNodes ?? true)
                    {
                        item.AddonNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AddonNodes;
                }
                case RecordTypeInts.AVIF:
                {
                    if (importMask?.ActorValueInformation ?? true)
                    {
                        item.ActorValueInformation.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ActorValueInformation;
                }
                case RecordTypeInts.CAMS:
                {
                    if (importMask?.CameraShots ?? true)
                    {
                        item.CameraShots.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.CameraShots;
                }
                case RecordTypeInts.CPTH:
                {
                    if (importMask?.CameraPaths ?? true)
                    {
                        item.CameraPaths.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.CameraPaths;
                }
                case RecordTypeInts.VTYP:
                {
                    if (importMask?.VoiceTypes ?? true)
                    {
                        item.VoiceTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.MATT:
                {
                    if (importMask?.MaterialTypes ?? true)
                    {
                        item.MaterialTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.MaterialTypes;
                }
                case RecordTypeInts.IPCT:
                {
                    if (importMask?.Impacts ?? true)
                    {
                        item.Impacts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Impacts;
                }
                case RecordTypeInts.IPDS:
                {
                    if (importMask?.ImpactDataSets ?? true)
                    {
                        item.ImpactDataSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ImpactDataSets;
                }
                case RecordTypeInts.ARMA:
                {
                    if (importMask?.ArmorAddons ?? true)
                    {
                        item.ArmorAddons.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ArmorAddons;
                }
                case RecordTypeInts.LCTN:
                {
                    if (importMask?.Locations ?? true)
                    {
                        item.Locations.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Locations;
                }
                case RecordTypeInts.MESG:
                {
                    if (importMask?.Messages ?? true)
                    {
                        item.Messages.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Messages;
                }
                case RecordTypeInts.DOBJ:
                {
                    if (importMask?.DefaultObjectManagers ?? true)
                    {
                        item.DefaultObjectManagers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.DefaultObjectManagers;
                }
                case RecordTypeInts.DFOB:
                {
                    if (importMask?.DefaultObjects ?? true)
                    {
                        item.DefaultObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.DefaultObjects;
                }
                case RecordTypeInts.LGTM:
                {
                    if (importMask?.LightingTemplates ?? true)
                    {
                        item.LightingTemplates.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LightingTemplates;
                }
                case RecordTypeInts.MUSC:
                {
                    if (importMask?.MusicTypes ?? true)
                    {
                        item.MusicTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.MusicTypes;
                }
                case RecordTypeInts.FSTP:
                {
                    if (importMask?.Footsteps ?? true)
                    {
                        item.Footsteps.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Footsteps;
                }
                case RecordTypeInts.FSTS:
                {
                    if (importMask?.FootstepSets ?? true)
                    {
                        item.FootstepSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.FootstepSets;
                }
                case RecordTypeInts.SMBN:
                {
                    if (importMask?.StoryManagerBranchNodes ?? true)
                    {
                        item.StoryManagerBranchNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.StoryManagerBranchNodes;
                }
                case RecordTypeInts.SMQN:
                {
                    if (importMask?.StoryManagerQuestNodes ?? true)
                    {
                        item.StoryManagerQuestNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.StoryManagerQuestNodes;
                }
                case RecordTypeInts.SMEN:
                {
                    if (importMask?.StoryManagerEventNodes ?? true)
                    {
                        item.StoryManagerEventNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.StoryManagerEventNodes;
                }
                case RecordTypeInts.MUST:
                {
                    if (importMask?.MusicTracks ?? true)
                    {
                        item.MusicTracks.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.MusicTracks;
                }
                case RecordTypeInts.EQUP:
                {
                    if (importMask?.EquipTypes ?? true)
                    {
                        item.EquipTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.EquipTypes;
                }
                case RecordTypeInts.OTFT:
                {
                    if (importMask?.Outfits ?? true)
                    {
                        item.Outfits.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Outfits;
                }
                case RecordTypeInts.ARTO:
                {
                    if (importMask?.ArtObjects ?? true)
                    {
                        item.ArtObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ArtObjects;
                }
                case RecordTypeInts.MOVT:
                {
                    if (importMask?.MovementTypes ?? true)
                    {
                        item.MovementTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.COLL:
                {
                    if (importMask?.CollisionLayers ?? true)
                    {
                        item.CollisionLayers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.CollisionLayers;
                }
                case RecordTypeInts.CLFM:
                {
                    if (importMask?.Colors ?? true)
                    {
                        item.Colors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Colors;
                }
                case RecordTypeInts.REVB:
                {
                    if (importMask?.ReverbParameters ?? true)
                    {
                        item.ReverbParameters.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ReverbParameters;
                }
                case RecordTypeInts.RFGP:
                {
                    if (importMask?.ReferenceGroups ?? true)
                    {
                        item.ReferenceGroups.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ReferenceGroups;
                }
                case RecordTypeInts.AMDL:
                {
                    if (importMask?.AimModels ?? true)
                    {
                        item.AimModels.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AimModels;
                }
                case RecordTypeInts.AAMD:
                {
                    if (importMask?.AimAssistModels ?? true)
                    {
                        item.AimAssistModels.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AimAssistModels;
                }
                case RecordTypeInts.MAAM:
                {
                    if (importMask?.MeleeAimAssistModels ?? true)
                    {
                        item.MeleeAimAssistModels.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.MeleeAimAssistModels;
                }
                case RecordTypeInts.LAYR:
                {
                    if (importMask?.Layers ?? true)
                    {
                        item.Layers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Layers;
                }
                case RecordTypeInts.COBJ:
                {
                    if (importMask?.ConstructibleObjects ?? true)
                    {
                        item.ConstructibleObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ConstructibleObjects;
                }
                case RecordTypeInts.OMOD:
                {
                    if (importMask?.ObjectModifications ?? true)
                    {
                        item.ObjectModifications.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ObjectModifications;
                }
                case RecordTypeInts.ZOOM:
                {
                    if (importMask?.Zooms ?? true)
                    {
                        item.Zooms.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Zooms;
                }
                case RecordTypeInts.INNR:
                {
                    if (importMask?.InstanceNamingRules ?? true)
                    {
                        item.InstanceNamingRules.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.InstanceNamingRules;
                }
                case RecordTypeInts.KSSM:
                {
                    if (importMask?.SoundKeywordMappings ?? true)
                    {
                        item.SoundKeywordMappings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SoundKeywordMappings;
                }
                case RecordTypeInts.AORU:
                {
                    if (importMask?.AttractionRules ?? true)
                    {
                        item.AttractionRules.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AttractionRules;
                }
                case RecordTypeInts.SCCO:
                {
                    if (importMask?.SceneCollections ?? true)
                    {
                        item.SceneCollections.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SceneCollections;
                }
                case RecordTypeInts.STAG:
                {
                    if (importMask?.AnimationSoundTagSets ?? true)
                    {
                        item.AnimationSoundTagSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AnimationSoundTagSets;
                }
                case RecordTypeInts.IRES:
                {
                    if (importMask?.Resources ?? true)
                    {
                        item.Resources.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Resources;
                }
                case RecordTypeInts.BIOM:
                {
                    if (importMask?.Biomes ?? true)
                    {
                        item.Biomes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Biomes;
                }
                case RecordTypeInts.NOCM:
                {
                    if (importMask?.NavigationMeshObstacleCoverManagers ?? true)
                    {
                        item.NavigationMeshObstacleCoverManagers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.NavigationMeshObstacleCoverManagers;
                }
                case RecordTypeInts.LENS:
                {
                    if (importMask?.LensFlares ?? true)
                    {
                        item.LensFlares.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LensFlares;
                }
                case RecordTypeInts.OVIS:
                {
                    if (importMask?.ObjectVisibilityManagers ?? true)
                    {
                        item.ObjectVisibilityManagers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ObjectVisibilityManagers;
                }
                case RecordTypeInts.STND:
                {
                    if (importMask?.SnapTemplateNodes ?? true)
                    {
                        item.SnapTemplateNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SnapTemplateNodes;
                }
                case RecordTypeInts.STMP:
                {
                    if (importMask?.SnapTemplates ?? true)
                    {
                        item.SnapTemplates.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SnapTemplates;
                }
                case RecordTypeInts.GCVR:
                {
                    if (importMask?.GroundCovers ?? true)
                    {
                        item.GroundCovers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.GroundCovers;
                }
                case RecordTypeInts.MRPH:
                {
                    if (importMask?.MorphableObjects ?? true)
                    {
                        item.MorphableObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.MorphableObjects;
                }
                case RecordTypeInts.TRAV:
                {
                    if (importMask?.Traversals ?? true)
                    {
                        item.Traversals.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Traversals;
                }
                case RecordTypeInts.RSGD:
                {
                    if (importMask?.ResourceGenerationData ?? true)
                    {
                        item.ResourceGenerationData.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ResourceGenerationData;
                }
                case RecordTypeInts.OSWP:
                {
                    if (importMask?.BiomeSwaps ?? true)
                    {
                        item.BiomeSwaps.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.BiomeSwaps;
                }
                case RecordTypeInts.ATMO:
                {
                    if (importMask?.Atmospheres ?? true)
                    {
                        item.Atmospheres.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Atmospheres;
                }
                case RecordTypeInts.LVSC:
                {
                    if (importMask?.LeveledSpaceCells ?? true)
                    {
                        item.LeveledSpaceCells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LeveledSpaceCells;
                }
                case RecordTypeInts.SPCH:
                {
                    if (importMask?.SpeechChallenges ?? true)
                    {
                        item.SpeechChallenges.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SpeechChallenges;
                }
                case RecordTypeInts.AAPD:
                {
                    if (importMask?.AimAssistPoses ?? true)
                    {
                        item.AimAssistPoses.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AimAssistPoses;
                }
                case RecordTypeInts.VOLI:
                {
                    if (importMask?.VolumetricLightings ?? true)
                    {
                        item.VolumetricLightings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.VolumetricLightings;
                }
                case RecordTypeInts.SFBK:
                {
                    if (importMask?.SurfaceBlocks ?? true)
                    {
                        item.SurfaceBlocks.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SurfaceBlocks;
                }
                case RecordTypeInts.SFPC:
                {
                    if (importMask?.SurfacePatternConfigs ?? true)
                    {
                        item.SurfacePatternConfigs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SurfacePatternConfigs;
                }
                case RecordTypeInts.SFPT:
                {
                    if (importMask?.SurfacePatterns ?? true)
                    {
                        item.SurfacePatterns.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SurfacePatterns;
                }
                case RecordTypeInts.SFTR:
                {
                    if (importMask?.SurfaceTrees ?? true)
                    {
                        item.SurfaceTrees.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SurfaceTrees;
                }
                case RecordTypeInts.PCMT:
                {
                    if (importMask?.PlanetContentManagerTrees ?? true)
                    {
                        item.PlanetContentManagerTrees.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.PlanetContentManagerTrees;
                }
                case RecordTypeInts.BMOD:
                {
                    if (importMask?.BoneModifiers ?? true)
                    {
                        item.BoneModifiers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.BoneModifiers;
                }
                case RecordTypeInts.STBH:
                {
                    if (importMask?.SnapTemplateBehaviors ?? true)
                    {
                        item.SnapTemplateBehaviors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SnapTemplateBehaviors;
                }
                case RecordTypeInts.PNDT:
                {
                    if (importMask?.Planets ?? true)
                    {
                        item.Planets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Planets;
                }
                case RecordTypeInts.CNDF:
                {
                    if (importMask?.ConditionRecords ?? true)
                    {
                        item.ConditionRecords.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ConditionRecords;
                }
                case RecordTypeInts.PCBN:
                {
                    if (importMask?.PlanetContentManagerBranchNodes ?? true)
                    {
                        item.PlanetContentManagerBranchNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.PlanetContentManagerBranchNodes;
                }
                case RecordTypeInts.PCCN:
                {
                    if (importMask?.PlanetContentManagerContentNodes ?? true)
                    {
                        item.PlanetContentManagerContentNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.PlanetContentManagerContentNodes;
                }
                case RecordTypeInts.STDT:
                {
                    if (importMask?.Stars ?? true)
                    {
                        item.Stars.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Stars;
                }
                case RecordTypeInts.WWED:
                {
                    if (importMask?.WWiseEventDatas ?? true)
                    {
                        item.WWiseEventDatas.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.WWiseEventDatas;
                }
                case RecordTypeInts.RSPJ:
                {
                    if (importMask?.ResearchProjects ?? true)
                    {
                        item.ResearchProjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ResearchProjects;
                }
                case RecordTypeInts.AOPS:
                {
                    if (importMask?.AimOpticalSightMarkers ?? true)
                    {
                        item.AimOpticalSightMarkers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AimOpticalSightMarkers;
                }
                case RecordTypeInts.AMBS:
                {
                    if (importMask?.AmbienceSets ?? true)
                    {
                        item.AmbienceSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.AmbienceSets;
                }
                case RecordTypeInts.WBAR:
                {
                    if (importMask?.WeaponBarrelModels ?? true)
                    {
                        item.WeaponBarrelModels.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.WeaponBarrelModels;
                }
                case RecordTypeInts.PTST:
                {
                    if (importMask?.SurfacePatternStyles ?? true)
                    {
                        item.SurfacePatternStyles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SurfacePatternStyles;
                }
                case RecordTypeInts.LMSW:
                {
                    if (importMask?.LayeredMaterialSwaps ?? true)
                    {
                        item.LayeredMaterialSwaps.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LayeredMaterialSwaps;
                }
                case RecordTypeInts.FORC:
                {
                    if (importMask?.ForceDatas ?? true)
                    {
                        item.ForceDatas.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ForceDatas;
                }
                case RecordTypeInts.TMLM:
                {
                    if (importMask?.TerminalMenus ?? true)
                    {
                        item.TerminalMenus.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.TerminalMenus;
                }
                case RecordTypeInts.EFSQ:
                {
                    if (importMask?.EffectSequences ?? true)
                    {
                        item.EffectSequences.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.EffectSequences;
                }
                case RecordTypeInts.SDLT:
                {
                    if (importMask?.SecondaryDamageLists ?? true)
                    {
                        item.SecondaryDamageLists.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SecondaryDamageLists;
                }
                case RecordTypeInts.MTPT:
                {
                    if (importMask?.MaterialPaths ?? true)
                    {
                        item.MaterialPaths.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.MaterialPaths;
                }
                case RecordTypeInts.CLDF:
                {
                    if (importMask?.Clouds ?? true)
                    {
                        item.Clouds.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Clouds;
                }
                case RecordTypeInts.FOGV:
                {
                    if (importMask?.FogVolumes ?? true)
                    {
                        item.FogVolumes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.FogVolumes;
                }
                case RecordTypeInts.WKMF:
                {
                    if (importMask?.WWiseKeywordMappings ?? true)
                    {
                        item.WWiseKeywordMappings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.WWiseKeywordMappings;
                }
                case RecordTypeInts.LGDI:
                {
                    if (importMask?.LegendaryItems ?? true)
                    {
                        item.LegendaryItems.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.LegendaryItems;
                }
                case RecordTypeInts.PSDC:
                {
                    if (importMask?.ParticleSystemDefineCollisions ?? true)
                    {
                        item.ParticleSystemDefineCollisions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ParticleSystemDefineCollisions;
                }
                case RecordTypeInts.SUNP:
                {
                    if (importMask?.SunPresets ?? true)
                    {
                        item.SunPresets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.SunPresets;
                }
                case RecordTypeInts.PMFT:
                {
                    if (importMask?.PhotoModeFeatures ?? true)
                    {
                        item.PhotoModeFeatures.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.PhotoModeFeatures;
                }
                case RecordTypeInts.GPOF:
                {
                    if (importMask?.GameplayOptions ?? true)
                    {
                        item.GameplayOptions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.GameplayOptions;
                }
                case RecordTypeInts.GPOG:
                {
                    if (importMask?.GameplayOptionsGroups ?? true)
                    {
                        item.GameplayOptionsGroups.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.GameplayOptionsGroups;
                }
                case RecordTypeInts.TODD:
                {
                    if (importMask?.TimeOfDays ?? true)
                    {
                        item.TimeOfDays.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.TimeOfDays;
                }
                case RecordTypeInts.AVMD:
                {
                    if (importMask?.ActorValueModulations ?? true)
                    {
                        item.ActorValueModulations.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.ActorValueModulations;
                }
                case RecordTypeInts.CHAL:
                {
                    if (importMask?.Challenges ?? true)
                    {
                        item.Challenges.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.Challenges;
                }
                case RecordTypeInts.FXPD:
                {
                    if (importMask?.FacialExpressions ?? true)
                    {
                        item.FacialExpressions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.FacialExpressions;
                }
                case RecordTypeInts.PERS:
                {
                    if (importMask?.PERS ?? true)
                    {
                        item.PERS.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)StarfieldMod_FieldIndex.PERS;
                }
                default:
                    frame.Position += contentLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class StarfieldModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IStarfieldModGetter item,
            MutagenWriter writer,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            var modKey = item.ModKey;
            StarfieldModBinaryWriteTranslation.Instance.Write(
                item: item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

        public static void WriteToBinary(
            this IStarfieldModGetter item,
            FilePath path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            param = PluginUtilityTranslation.SetStringsWriter(item, param, path, modKey);
            var bundle = new WritingBundle(item.StarfieldRelease.ToGameRelease())
            {
                StringsWriter = param.StringsWriter,
                CleanNulls = param.CleanNulls,
                TargetLanguageOverride = param.TargetLanguageOverride,
                Header = item
            };
            if (param.Encodings != null)
            {
                bundle.Encodings = param.Encodings;
            }
            using var memStream = new MemoryTributary();
            using (var writer = new MutagenWriter(
                memStream,
                bundle,
                dispose: false))
            {
                StarfieldModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
            using (var fs = param.FileSystem.GetOrDefault().FileStream.New(path, FileMode.Create, FileAccess.Write))
            {
                memStream.Position = 0;
                memStream.CopyTo(fs);
            }
            param.StringsWriter?.Dispose();
        }

        public static void WriteToBinary(
            this IStarfieldModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(
                stream: stream,
                new WritingBundle(item.StarfieldRelease.ToGameRelease()),
                dispose: false))
            {
                StarfieldModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    [DebuggerDisplay("{GameRelease} {ModKey.ToString()}")]
    internal partial class StarfieldModBinaryOverlay : IStarfieldModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StarfieldMod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StarfieldMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StarfieldModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StarfieldModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IStarfieldModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IStarfieldModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public StarfieldRelease StarfieldRelease { get; }
        public GameRelease GameRelease => StarfieldRelease.ToGameRelease();
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        uint IModGetter.GetRecordCount() => this.GetRecordCount();
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public bool CanUseLocalization => true;
        public bool UsingLocalization => this.ModHeader.Flags.HasFlag(StarfieldModHeader.HeaderFlag.Localized);
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StarfieldModCommon.Instance.EnumerateFormLinks(this);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => StarfieldModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IStarfieldMod, IStarfieldModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IStarfieldMod, IStarfieldModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        uint IModGetter.NextFormID => ModHeader.Stats.NextFormID;
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _stream;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _stream.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private IStarfieldModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? StarfieldModHeaderBinaryOverlay.StarfieldModHeaderFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max), _package) : default;
        public IStarfieldModHeaderGetter ModHeader => _ModHeader ?? new StarfieldModHeader();
        #endregion
        #region GameSettings
        private List<RangeInt64>? _GameSettingsLocations;
        private IStarfieldGroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocations != null ? StarfieldGroupBinaryOverlay<IGameSettingGetter>.StarfieldGroupFactory(_stream, _GameSettingsLocations, _package) : default;
        public IStarfieldGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new StarfieldGroup<GameSetting>(this);
        #endregion
        #region Keywords
        private List<RangeInt64>? _KeywordsLocations;
        private IStarfieldGroupGetter<IKeywordGetter>? _Keywords => _KeywordsLocations != null ? StarfieldGroupBinaryOverlay<IKeywordGetter>.StarfieldGroupFactory(_stream, _KeywordsLocations, _package) : default;
        public IStarfieldGroupGetter<IKeywordGetter> Keywords => _Keywords ?? new StarfieldGroup<Keyword>(this);
        #endregion
        #region FFKW
        private List<RangeInt64>? _FFKWLocations;
        private IStarfieldGroupGetter<IFFKWRecordGetter>? _FFKW => _FFKWLocations != null ? StarfieldGroupBinaryOverlay<IFFKWRecordGetter>.StarfieldGroupFactory(_stream, _FFKWLocations, _package) : default;
        public IStarfieldGroupGetter<IFFKWRecordGetter> FFKW => _FFKW ?? new StarfieldGroup<FFKWRecord>(this);
        #endregion
        #region LocationReferenceTypes
        private List<RangeInt64>? _LocationReferenceTypesLocations;
        private IStarfieldGroupGetter<ILocationReferenceTypeGetter>? _LocationReferenceTypes => _LocationReferenceTypesLocations != null ? StarfieldGroupBinaryOverlay<ILocationReferenceTypeGetter>.StarfieldGroupFactory(_stream, _LocationReferenceTypesLocations, _package) : default;
        public IStarfieldGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes => _LocationReferenceTypes ?? new StarfieldGroup<LocationReferenceType>(this);
        #endregion
        #region Actions
        private List<RangeInt64>? _ActionsLocations;
        private IStarfieldGroupGetter<IActionRecordGetter>? _Actions => _ActionsLocations != null ? StarfieldGroupBinaryOverlay<IActionRecordGetter>.StarfieldGroupFactory(_stream, _ActionsLocations, _package) : default;
        public IStarfieldGroupGetter<IActionRecordGetter> Actions => _Actions ?? new StarfieldGroup<ActionRecord>(this);
        #endregion
        #region Transforms
        private List<RangeInt64>? _TransformsLocations;
        private IStarfieldGroupGetter<ITransformGetter>? _Transforms => _TransformsLocations != null ? StarfieldGroupBinaryOverlay<ITransformGetter>.StarfieldGroupFactory(_stream, _TransformsLocations, _package) : default;
        public IStarfieldGroupGetter<ITransformGetter> Transforms => _Transforms ?? new StarfieldGroup<Transform>(this);
        #endregion
        #region TextureSets
        private List<RangeInt64>? _TextureSetsLocations;
        private IStarfieldGroupGetter<ITextureSetGetter>? _TextureSets => _TextureSetsLocations != null ? StarfieldGroupBinaryOverlay<ITextureSetGetter>.StarfieldGroupFactory(_stream, _TextureSetsLocations, _package) : default;
        public IStarfieldGroupGetter<ITextureSetGetter> TextureSets => _TextureSets ?? new StarfieldGroup<TextureSet>(this);
        #endregion
        #region Globals
        private List<RangeInt64>? _GlobalsLocations;
        private IStarfieldGroupGetter<IGlobalGetter>? _Globals => _GlobalsLocations != null ? StarfieldGroupBinaryOverlay<IGlobalGetter>.StarfieldGroupFactory(_stream, _GlobalsLocations, _package) : default;
        public IStarfieldGroupGetter<IGlobalGetter> Globals => _Globals ?? new StarfieldGroup<Global>(this);
        #endregion
        #region DamageTypes
        private List<RangeInt64>? _DamageTypesLocations;
        private IStarfieldGroupGetter<IDamageTypeGetter>? _DamageTypes => _DamageTypesLocations != null ? StarfieldGroupBinaryOverlay<IDamageTypeGetter>.StarfieldGroupFactory(_stream, _DamageTypesLocations, _package) : default;
        public IStarfieldGroupGetter<IDamageTypeGetter> DamageTypes => _DamageTypes ?? new StarfieldGroup<DamageType>(this);
        #endregion
        #region Classes
        private List<RangeInt64>? _ClassesLocations;
        private IStarfieldGroupGetter<IClassGetter>? _Classes => _ClassesLocations != null ? StarfieldGroupBinaryOverlay<IClassGetter>.StarfieldGroupFactory(_stream, _ClassesLocations, _package) : default;
        public IStarfieldGroupGetter<IClassGetter> Classes => _Classes ?? new StarfieldGroup<Class>(this);
        #endregion
        #region Factions
        private List<RangeInt64>? _FactionsLocations;
        private IStarfieldGroupGetter<IFactionGetter>? _Factions => _FactionsLocations != null ? StarfieldGroupBinaryOverlay<IFactionGetter>.StarfieldGroupFactory(_stream, _FactionsLocations, _package) : default;
        public IStarfieldGroupGetter<IFactionGetter> Factions => _Factions ?? new StarfieldGroup<Faction>(this);
        #endregion
        #region AffinityEvents
        private List<RangeInt64>? _AffinityEventsLocations;
        private IStarfieldGroupGetter<IAffinityEventGetter>? _AffinityEvents => _AffinityEventsLocations != null ? StarfieldGroupBinaryOverlay<IAffinityEventGetter>.StarfieldGroupFactory(_stream, _AffinityEventsLocations, _package) : default;
        public IStarfieldGroupGetter<IAffinityEventGetter> AffinityEvents => _AffinityEvents ?? new StarfieldGroup<AffinityEvent>(this);
        #endregion
        #region HeadParts
        private List<RangeInt64>? _HeadPartsLocations;
        private IStarfieldGroupGetter<IHeadPartGetter>? _HeadParts => _HeadPartsLocations != null ? StarfieldGroupBinaryOverlay<IHeadPartGetter>.StarfieldGroupFactory(_stream, _HeadPartsLocations, _package) : default;
        public IStarfieldGroupGetter<IHeadPartGetter> HeadParts => _HeadParts ?? new StarfieldGroup<HeadPart>(this);
        #endregion
        #region Races
        private List<RangeInt64>? _RacesLocations;
        private IStarfieldGroupGetter<IRaceGetter>? _Races => _RacesLocations != null ? StarfieldGroupBinaryOverlay<IRaceGetter>.StarfieldGroupFactory(_stream, _RacesLocations, _package) : default;
        public IStarfieldGroupGetter<IRaceGetter> Races => _Races ?? new StarfieldGroup<Race>(this);
        #endregion
        #region SoundMarkers
        private List<RangeInt64>? _SoundMarkersLocations;
        private IStarfieldGroupGetter<ISoundMarkerGetter>? _SoundMarkers => _SoundMarkersLocations != null ? StarfieldGroupBinaryOverlay<ISoundMarkerGetter>.StarfieldGroupFactory(_stream, _SoundMarkersLocations, _package) : default;
        public IStarfieldGroupGetter<ISoundMarkerGetter> SoundMarkers => _SoundMarkers ?? new StarfieldGroup<SoundMarker>(this);
        #endregion
        #region SoundEchoMarkers
        private List<RangeInt64>? _SoundEchoMarkersLocations;
        private IStarfieldGroupGetter<ISoundEchoMarkerGetter>? _SoundEchoMarkers => _SoundEchoMarkersLocations != null ? StarfieldGroupBinaryOverlay<ISoundEchoMarkerGetter>.StarfieldGroupFactory(_stream, _SoundEchoMarkersLocations, _package) : default;
        public IStarfieldGroupGetter<ISoundEchoMarkerGetter> SoundEchoMarkers => _SoundEchoMarkers ?? new StarfieldGroup<SoundEchoMarker>(this);
        #endregion
        #region AcousticSpaces
        private List<RangeInt64>? _AcousticSpacesLocations;
        private IStarfieldGroupGetter<IAcousticSpaceGetter>? _AcousticSpaces => _AcousticSpacesLocations != null ? StarfieldGroupBinaryOverlay<IAcousticSpaceGetter>.StarfieldGroupFactory(_stream, _AcousticSpacesLocations, _package) : default;
        public IStarfieldGroupGetter<IAcousticSpaceGetter> AcousticSpaces => _AcousticSpaces ?? new StarfieldGroup<AcousticSpace>(this);
        #endregion
        #region AudioOcclusionPrimitives
        private List<RangeInt64>? _AudioOcclusionPrimitivesLocations;
        private IStarfieldGroupGetter<IAudioOcclusionPrimitiveGetter>? _AudioOcclusionPrimitives => _AudioOcclusionPrimitivesLocations != null ? StarfieldGroupBinaryOverlay<IAudioOcclusionPrimitiveGetter>.StarfieldGroupFactory(_stream, _AudioOcclusionPrimitivesLocations, _package) : default;
        public IStarfieldGroupGetter<IAudioOcclusionPrimitiveGetter> AudioOcclusionPrimitives => _AudioOcclusionPrimitives ?? new StarfieldGroup<AudioOcclusionPrimitive>(this);
        #endregion
        #region MagicEffects
        private List<RangeInt64>? _MagicEffectsLocations;
        private IStarfieldGroupGetter<IMagicEffectGetter>? _MagicEffects => _MagicEffectsLocations != null ? StarfieldGroupBinaryOverlay<IMagicEffectGetter>.StarfieldGroupFactory(_stream, _MagicEffectsLocations, _package) : default;
        public IStarfieldGroupGetter<IMagicEffectGetter> MagicEffects => _MagicEffects ?? new StarfieldGroup<MagicEffect>(this);
        #endregion
        #region LandscapeTextures
        private List<RangeInt64>? _LandscapeTexturesLocations;
        private IStarfieldGroupGetter<ILandscapeTextureGetter>? _LandscapeTextures => _LandscapeTexturesLocations != null ? StarfieldGroupBinaryOverlay<ILandscapeTextureGetter>.StarfieldGroupFactory(_stream, _LandscapeTexturesLocations, _package) : default;
        public IStarfieldGroupGetter<ILandscapeTextureGetter> LandscapeTextures => _LandscapeTextures ?? new StarfieldGroup<LandscapeTexture>(this);
        #endregion
        #region ProjectedDecals
        private List<RangeInt64>? _ProjectedDecalsLocations;
        private IStarfieldGroupGetter<IProjectedDecalGetter>? _ProjectedDecals => _ProjectedDecalsLocations != null ? StarfieldGroupBinaryOverlay<IProjectedDecalGetter>.StarfieldGroupFactory(_stream, _ProjectedDecalsLocations, _package) : default;
        public IStarfieldGroupGetter<IProjectedDecalGetter> ProjectedDecals => _ProjectedDecals ?? new StarfieldGroup<ProjectedDecal>(this);
        #endregion
        #region ObjectEffects
        private List<RangeInt64>? _ObjectEffectsLocations;
        private IStarfieldGroupGetter<IObjectEffectGetter>? _ObjectEffects => _ObjectEffectsLocations != null ? StarfieldGroupBinaryOverlay<IObjectEffectGetter>.StarfieldGroupFactory(_stream, _ObjectEffectsLocations, _package) : default;
        public IStarfieldGroupGetter<IObjectEffectGetter> ObjectEffects => _ObjectEffects ?? new StarfieldGroup<ObjectEffect>(this);
        #endregion
        #region Spells
        private List<RangeInt64>? _SpellsLocations;
        private IStarfieldGroupGetter<ISpellGetter>? _Spells => _SpellsLocations != null ? StarfieldGroupBinaryOverlay<ISpellGetter>.StarfieldGroupFactory(_stream, _SpellsLocations, _package) : default;
        public IStarfieldGroupGetter<ISpellGetter> Spells => _Spells ?? new StarfieldGroup<Spell>(this);
        #endregion
        #region Activators
        private List<RangeInt64>? _ActivatorsLocations;
        private IStarfieldGroupGetter<IActivatorGetter>? _Activators => _ActivatorsLocations != null ? StarfieldGroupBinaryOverlay<IActivatorGetter>.StarfieldGroupFactory(_stream, _ActivatorsLocations, _package) : default;
        public IStarfieldGroupGetter<IActivatorGetter> Activators => _Activators ?? new StarfieldGroup<Activator>(this);
        #endregion
        #region CurveTables
        private List<RangeInt64>? _CurveTablesLocations;
        private IStarfieldGroupGetter<ICurveTableGetter>? _CurveTables => _CurveTablesLocations != null ? StarfieldGroupBinaryOverlay<ICurveTableGetter>.StarfieldGroupFactory(_stream, _CurveTablesLocations, _package) : default;
        public IStarfieldGroupGetter<ICurveTableGetter> CurveTables => _CurveTables ?? new StarfieldGroup<CurveTable>(this);
        #endregion
        #region Curve3Ds
        private List<RangeInt64>? _Curve3DsLocations;
        private IStarfieldGroupGetter<ICurve3DGetter>? _Curve3Ds => _Curve3DsLocations != null ? StarfieldGroupBinaryOverlay<ICurve3DGetter>.StarfieldGroupFactory(_stream, _Curve3DsLocations, _package) : default;
        public IStarfieldGroupGetter<ICurve3DGetter> Curve3Ds => _Curve3Ds ?? new StarfieldGroup<Curve3D>(this);
        #endregion
        #region Armors
        private List<RangeInt64>? _ArmorsLocations;
        private IStarfieldGroupGetter<IArmorGetter>? _Armors => _ArmorsLocations != null ? StarfieldGroupBinaryOverlay<IArmorGetter>.StarfieldGroupFactory(_stream, _ArmorsLocations, _package) : default;
        public IStarfieldGroupGetter<IArmorGetter> Armors => _Armors ?? new StarfieldGroup<Armor>(this);
        #endregion
        #region Books
        private List<RangeInt64>? _BooksLocations;
        private IStarfieldGroupGetter<IBookGetter>? _Books => _BooksLocations != null ? StarfieldGroupBinaryOverlay<IBookGetter>.StarfieldGroupFactory(_stream, _BooksLocations, _package) : default;
        public IStarfieldGroupGetter<IBookGetter> Books => _Books ?? new StarfieldGroup<Book>(this);
        #endregion
        #region Containers
        private List<RangeInt64>? _ContainersLocations;
        private IStarfieldGroupGetter<IContainerGetter>? _Containers => _ContainersLocations != null ? StarfieldGroupBinaryOverlay<IContainerGetter>.StarfieldGroupFactory(_stream, _ContainersLocations, _package) : default;
        public IStarfieldGroupGetter<IContainerGetter> Containers => _Containers ?? new StarfieldGroup<Container>(this);
        #endregion
        #region Doors
        private List<RangeInt64>? _DoorsLocations;
        private IStarfieldGroupGetter<IDoorGetter>? _Doors => _DoorsLocations != null ? StarfieldGroupBinaryOverlay<IDoorGetter>.StarfieldGroupFactory(_stream, _DoorsLocations, _package) : default;
        public IStarfieldGroupGetter<IDoorGetter> Doors => _Doors ?? new StarfieldGroup<Door>(this);
        #endregion
        #region Lights
        private List<RangeInt64>? _LightsLocations;
        private IStarfieldGroupGetter<ILightGetter>? _Lights => _LightsLocations != null ? StarfieldGroupBinaryOverlay<ILightGetter>.StarfieldGroupFactory(_stream, _LightsLocations, _package) : default;
        public IStarfieldGroupGetter<ILightGetter> Lights => _Lights ?? new StarfieldGroup<Light>(this);
        #endregion
        #region MiscItems
        private List<RangeInt64>? _MiscItemsLocations;
        private IStarfieldGroupGetter<IMiscItemGetter>? _MiscItems => _MiscItemsLocations != null ? StarfieldGroupBinaryOverlay<IMiscItemGetter>.StarfieldGroupFactory(_stream, _MiscItemsLocations, _package) : default;
        public IStarfieldGroupGetter<IMiscItemGetter> MiscItems => _MiscItems ?? new StarfieldGroup<MiscItem>(this);
        #endregion
        #region Statics
        private List<RangeInt64>? _StaticsLocations;
        private IStarfieldGroupGetter<IStaticGetter>? _Statics => _StaticsLocations != null ? StarfieldGroupBinaryOverlay<IStaticGetter>.StarfieldGroupFactory(_stream, _StaticsLocations, _package) : default;
        public IStarfieldGroupGetter<IStaticGetter> Statics => _Statics ?? new StarfieldGroup<Static>(this);
        #endregion
        #region StaticCollections
        private List<RangeInt64>? _StaticCollectionsLocations;
        private IStarfieldGroupGetter<IStaticCollectionGetter>? _StaticCollections => _StaticCollectionsLocations != null ? StarfieldGroupBinaryOverlay<IStaticCollectionGetter>.StarfieldGroupFactory(_stream, _StaticCollectionsLocations, _package) : default;
        public IStarfieldGroupGetter<IStaticCollectionGetter> StaticCollections => _StaticCollections ?? new StarfieldGroup<StaticCollection>(this);
        #endregion
        #region PackIns
        private List<RangeInt64>? _PackInsLocations;
        private IStarfieldGroupGetter<IPackInGetter>? _PackIns => _PackInsLocations != null ? StarfieldGroupBinaryOverlay<IPackInGetter>.StarfieldGroupFactory(_stream, _PackInsLocations, _package) : default;
        public IStarfieldGroupGetter<IPackInGetter> PackIns => _PackIns ?? new StarfieldGroup<PackIn>(this);
        #endregion
        #region MoveableStatics
        private List<RangeInt64>? _MoveableStaticsLocations;
        private IStarfieldGroupGetter<IMoveableStaticGetter>? _MoveableStatics => _MoveableStaticsLocations != null ? StarfieldGroupBinaryOverlay<IMoveableStaticGetter>.StarfieldGroupFactory(_stream, _MoveableStaticsLocations, _package) : default;
        public IStarfieldGroupGetter<IMoveableStaticGetter> MoveableStatics => _MoveableStatics ?? new StarfieldGroup<MoveableStatic>(this);
        #endregion
        #region Grasses
        private List<RangeInt64>? _GrassesLocations;
        private IStarfieldGroupGetter<IGrassGetter>? _Grasses => _GrassesLocations != null ? StarfieldGroupBinaryOverlay<IGrassGetter>.StarfieldGroupFactory(_stream, _GrassesLocations, _package) : default;
        public IStarfieldGroupGetter<IGrassGetter> Grasses => _Grasses ?? new StarfieldGroup<Grass>(this);
        #endregion
        #region Florae
        private List<RangeInt64>? _FloraeLocations;
        private IStarfieldGroupGetter<IFloraGetter>? _Florae => _FloraeLocations != null ? StarfieldGroupBinaryOverlay<IFloraGetter>.StarfieldGroupFactory(_stream, _FloraeLocations, _package) : default;
        public IStarfieldGroupGetter<IFloraGetter> Florae => _Florae ?? new StarfieldGroup<Flora>(this);
        #endregion
        #region Furniture
        private List<RangeInt64>? _FurnitureLocations;
        private IStarfieldGroupGetter<IFurnitureGetter>? _Furniture => _FurnitureLocations != null ? StarfieldGroupBinaryOverlay<IFurnitureGetter>.StarfieldGroupFactory(_stream, _FurnitureLocations, _package) : default;
        public IStarfieldGroupGetter<IFurnitureGetter> Furniture => _Furniture ?? new StarfieldGroup<Furniture>(this);
        #endregion
        #region Weapons
        private List<RangeInt64>? _WeaponsLocations;
        private IStarfieldGroupGetter<IWeaponGetter>? _Weapons => _WeaponsLocations != null ? StarfieldGroupBinaryOverlay<IWeaponGetter>.StarfieldGroupFactory(_stream, _WeaponsLocations, _package) : default;
        public IStarfieldGroupGetter<IWeaponGetter> Weapons => _Weapons ?? new StarfieldGroup<Weapon>(this);
        #endregion
        #region Ammunitions
        private List<RangeInt64>? _AmmunitionsLocations;
        private IStarfieldGroupGetter<IAmmunitionGetter>? _Ammunitions => _AmmunitionsLocations != null ? StarfieldGroupBinaryOverlay<IAmmunitionGetter>.StarfieldGroupFactory(_stream, _AmmunitionsLocations, _package) : default;
        public IStarfieldGroupGetter<IAmmunitionGetter> Ammunitions => _Ammunitions ?? new StarfieldGroup<Ammunition>(this);
        #endregion
        #region Npcs
        private List<RangeInt64>? _NpcsLocations;
        private IStarfieldGroupGetter<INpcGetter>? _Npcs => _NpcsLocations != null ? StarfieldGroupBinaryOverlay<INpcGetter>.StarfieldGroupFactory(_stream, _NpcsLocations, _package) : default;
        public IStarfieldGroupGetter<INpcGetter> Npcs => _Npcs ?? new StarfieldGroup<Npc>(this);
        #endregion
        #region LeveledNpcs
        private List<RangeInt64>? _LeveledNpcsLocations;
        private IStarfieldGroupGetter<ILeveledNpcGetter>? _LeveledNpcs => _LeveledNpcsLocations != null ? StarfieldGroupBinaryOverlay<ILeveledNpcGetter>.StarfieldGroupFactory(_stream, _LeveledNpcsLocations, _package) : default;
        public IStarfieldGroupGetter<ILeveledNpcGetter> LeveledNpcs => _LeveledNpcs ?? new StarfieldGroup<LeveledNpc>(this);
        #endregion
        #region LeveledPackIns
        private List<RangeInt64>? _LeveledPackInsLocations;
        private IStarfieldGroupGetter<ILeveledPackInGetter>? _LeveledPackIns => _LeveledPackInsLocations != null ? StarfieldGroupBinaryOverlay<ILeveledPackInGetter>.StarfieldGroupFactory(_stream, _LeveledPackInsLocations, _package) : default;
        public IStarfieldGroupGetter<ILeveledPackInGetter> LeveledPackIns => _LeveledPackIns ?? new StarfieldGroup<LeveledPackIn>(this);
        #endregion
        #region Keys
        private List<RangeInt64>? _KeysLocations;
        private IStarfieldGroupGetter<IKeyGetter>? _Keys => _KeysLocations != null ? StarfieldGroupBinaryOverlay<IKeyGetter>.StarfieldGroupFactory(_stream, _KeysLocations, _package) : default;
        public IStarfieldGroupGetter<IKeyGetter> Keys => _Keys ?? new StarfieldGroup<Key>(this);
        #endregion
        #region Ingestibles
        private List<RangeInt64>? _IngestiblesLocations;
        private IStarfieldGroupGetter<IIngestibleGetter>? _Ingestibles => _IngestiblesLocations != null ? StarfieldGroupBinaryOverlay<IIngestibleGetter>.StarfieldGroupFactory(_stream, _IngestiblesLocations, _package) : default;
        public IStarfieldGroupGetter<IIngestibleGetter> Ingestibles => _Ingestibles ?? new StarfieldGroup<Ingestible>(this);
        #endregion
        #region IdleMarkers
        private List<RangeInt64>? _IdleMarkersLocations;
        private IStarfieldGroupGetter<IIdleMarkerGetter>? _IdleMarkers => _IdleMarkersLocations != null ? StarfieldGroupBinaryOverlay<IIdleMarkerGetter>.StarfieldGroupFactory(_stream, _IdleMarkersLocations, _package) : default;
        public IStarfieldGroupGetter<IIdleMarkerGetter> IdleMarkers => _IdleMarkers ?? new StarfieldGroup<IdleMarker>(this);
        #endregion
        #region BiomeMarkers
        private List<RangeInt64>? _BiomeMarkersLocations;
        private IStarfieldGroupGetter<IBiomeMarkerGetter>? _BiomeMarkers => _BiomeMarkersLocations != null ? StarfieldGroupBinaryOverlay<IBiomeMarkerGetter>.StarfieldGroupFactory(_stream, _BiomeMarkersLocations, _package) : default;
        public IStarfieldGroupGetter<IBiomeMarkerGetter> BiomeMarkers => _BiomeMarkers ?? new StarfieldGroup<BiomeMarker>(this);
        #endregion
        #region Notes
        private List<RangeInt64>? _NotesLocations;
        private IStarfieldGroupGetter<INoteGetter>? _Notes => _NotesLocations != null ? StarfieldGroupBinaryOverlay<INoteGetter>.StarfieldGroupFactory(_stream, _NotesLocations, _package) : default;
        public IStarfieldGroupGetter<INoteGetter> Notes => _Notes ?? new StarfieldGroup<Note>(this);
        #endregion
        #region Projectiles
        private List<RangeInt64>? _ProjectilesLocations;
        private IStarfieldGroupGetter<IProjectileGetter>? _Projectiles => _ProjectilesLocations != null ? StarfieldGroupBinaryOverlay<IProjectileGetter>.StarfieldGroupFactory(_stream, _ProjectilesLocations, _package) : default;
        public IStarfieldGroupGetter<IProjectileGetter> Projectiles => _Projectiles ?? new StarfieldGroup<Projectile>(this);
        #endregion
        #region Hazards
        private List<RangeInt64>? _HazardsLocations;
        private IStarfieldGroupGetter<IHazardGetter>? _Hazards => _HazardsLocations != null ? StarfieldGroupBinaryOverlay<IHazardGetter>.StarfieldGroupFactory(_stream, _HazardsLocations, _package) : default;
        public IStarfieldGroupGetter<IHazardGetter> Hazards => _Hazards ?? new StarfieldGroup<Hazard>(this);
        #endregion
        #region BendableSplines
        private List<RangeInt64>? _BendableSplinesLocations;
        private IStarfieldGroupGetter<IBendableSplineGetter>? _BendableSplines => _BendableSplinesLocations != null ? StarfieldGroupBinaryOverlay<IBendableSplineGetter>.StarfieldGroupFactory(_stream, _BendableSplinesLocations, _package) : default;
        public IStarfieldGroupGetter<IBendableSplineGetter> BendableSplines => _BendableSplines ?? new StarfieldGroup<BendableSpline>(this);
        #endregion
        #region Terminals
        private List<RangeInt64>? _TerminalsLocations;
        private IStarfieldGroupGetter<ITerminalGetter>? _Terminals => _TerminalsLocations != null ? StarfieldGroupBinaryOverlay<ITerminalGetter>.StarfieldGroupFactory(_stream, _TerminalsLocations, _package) : default;
        public IStarfieldGroupGetter<ITerminalGetter> Terminals => _Terminals ?? new StarfieldGroup<Terminal>(this);
        #endregion
        #region LeveledItems
        private List<RangeInt64>? _LeveledItemsLocations;
        private IStarfieldGroupGetter<ILeveledItemGetter>? _LeveledItems => _LeveledItemsLocations != null ? StarfieldGroupBinaryOverlay<ILeveledItemGetter>.StarfieldGroupFactory(_stream, _LeveledItemsLocations, _package) : default;
        public IStarfieldGroupGetter<ILeveledItemGetter> LeveledItems => _LeveledItems ?? new StarfieldGroup<LeveledItem>(this);
        #endregion
        #region GenericBaseFormTemplates
        private List<RangeInt64>? _GenericBaseFormTemplatesLocations;
        private IStarfieldGroupGetter<IGenericBaseFormTemplateGetter>? _GenericBaseFormTemplates => _GenericBaseFormTemplatesLocations != null ? StarfieldGroupBinaryOverlay<IGenericBaseFormTemplateGetter>.StarfieldGroupFactory(_stream, _GenericBaseFormTemplatesLocations, _package) : default;
        public IStarfieldGroupGetter<IGenericBaseFormTemplateGetter> GenericBaseFormTemplates => _GenericBaseFormTemplates ?? new StarfieldGroup<GenericBaseFormTemplate>(this);
        #endregion
        #region GenericBaseForms
        private List<RangeInt64>? _GenericBaseFormsLocations;
        private IStarfieldGroupGetter<IGenericBaseFormGetter>? _GenericBaseForms => _GenericBaseFormsLocations != null ? StarfieldGroupBinaryOverlay<IGenericBaseFormGetter>.StarfieldGroupFactory(_stream, _GenericBaseFormsLocations, _package) : default;
        public IStarfieldGroupGetter<IGenericBaseFormGetter> GenericBaseForms => _GenericBaseForms ?? new StarfieldGroup<GenericBaseForm>(this);
        #endregion
        #region LeveledBaseForms
        private List<RangeInt64>? _LeveledBaseFormsLocations;
        private IStarfieldGroupGetter<ILeveledBaseFormGetter>? _LeveledBaseForms => _LeveledBaseFormsLocations != null ? StarfieldGroupBinaryOverlay<ILeveledBaseFormGetter>.StarfieldGroupFactory(_stream, _LeveledBaseFormsLocations, _package) : default;
        public IStarfieldGroupGetter<ILeveledBaseFormGetter> LeveledBaseForms => _LeveledBaseForms ?? new StarfieldGroup<LeveledBaseForm>(this);
        #endregion
        #region Weathers
        private List<RangeInt64>? _WeathersLocations;
        private IStarfieldGroupGetter<IWeatherGetter>? _Weathers => _WeathersLocations != null ? StarfieldGroupBinaryOverlay<IWeatherGetter>.StarfieldGroupFactory(_stream, _WeathersLocations, _package) : default;
        public IStarfieldGroupGetter<IWeatherGetter> Weathers => _Weathers ?? new StarfieldGroup<Weather>(this);
        #endregion
        #region WeatherSettings
        private List<RangeInt64>? _WeatherSettingsLocations;
        private IStarfieldGroupGetter<IWeatherSettingGetter>? _WeatherSettings => _WeatherSettingsLocations != null ? StarfieldGroupBinaryOverlay<IWeatherSettingGetter>.StarfieldGroupFactory(_stream, _WeatherSettingsLocations, _package) : default;
        public IStarfieldGroupGetter<IWeatherSettingGetter> WeatherSettings => _WeatherSettings ?? new StarfieldGroup<WeatherSetting>(this);
        #endregion
        #region Climates
        private List<RangeInt64>? _ClimatesLocations;
        private IStarfieldGroupGetter<IClimateGetter>? _Climates => _ClimatesLocations != null ? StarfieldGroupBinaryOverlay<IClimateGetter>.StarfieldGroupFactory(_stream, _ClimatesLocations, _package) : default;
        public IStarfieldGroupGetter<IClimateGetter> Climates => _Climates ?? new StarfieldGroup<Climate>(this);
        #endregion
        #region ShaderParticleGeometries
        private List<RangeInt64>? _ShaderParticleGeometriesLocations;
        private IStarfieldGroupGetter<IShaderParticleGeometryGetter>? _ShaderParticleGeometries => _ShaderParticleGeometriesLocations != null ? StarfieldGroupBinaryOverlay<IShaderParticleGeometryGetter>.StarfieldGroupFactory(_stream, _ShaderParticleGeometriesLocations, _package) : default;
        public IStarfieldGroupGetter<IShaderParticleGeometryGetter> ShaderParticleGeometries => _ShaderParticleGeometries ?? new StarfieldGroup<ShaderParticleGeometry>(this);
        #endregion
        #region Regions
        private List<RangeInt64>? _RegionsLocations;
        private IStarfieldGroupGetter<IRegionGetter>? _Regions => _RegionsLocations != null ? StarfieldGroupBinaryOverlay<IRegionGetter>.StarfieldGroupFactory(_stream, _RegionsLocations, _package) : default;
        public IStarfieldGroupGetter<IRegionGetter> Regions => _Regions ?? new StarfieldGroup<Region>(this);
        #endregion
        #region NavigationMeshInfoMaps
        private List<RangeInt64>? _NavigationMeshInfoMapsLocations;
        private IStarfieldGroupGetter<INavigationMeshInfoMapGetter>? _NavigationMeshInfoMaps => _NavigationMeshInfoMapsLocations != null ? StarfieldGroupBinaryOverlay<INavigationMeshInfoMapGetter>.StarfieldGroupFactory(_stream, _NavigationMeshInfoMapsLocations, _package) : default;
        public IStarfieldGroupGetter<INavigationMeshInfoMapGetter> NavigationMeshInfoMaps => _NavigationMeshInfoMaps ?? new StarfieldGroup<NavigationMeshInfoMap>(this);
        #endregion
        #region Cells
        private RangeInt64? _CellsLocation;
        private IStarfieldListGroupGetter<ICellBlockGetter>? _Cells => _CellsLocation.HasValue ? StarfieldListGroupBinaryOverlay<ICellBlockGetter>.StarfieldListGroupFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _CellsLocation!.Value.Min, _CellsLocation!.Value.Max), _package) : default;
        public IStarfieldListGroupGetter<ICellBlockGetter> Cells => _Cells ?? new StarfieldListGroup<CellBlock>();
        #endregion
        #region Worldspaces
        private List<RangeInt64>? _WorldspacesLocations;
        private IStarfieldGroupGetter<IWorldspaceGetter>? _Worldspaces => _WorldspacesLocations != null ? StarfieldGroupBinaryOverlay<IWorldspaceGetter>.StarfieldGroupFactory(_stream, _WorldspacesLocations, _package) : default;
        public IStarfieldGroupGetter<IWorldspaceGetter> Worldspaces => _Worldspaces ?? new StarfieldGroup<Worldspace>(this);
        #endregion
        #region Quests
        private List<RangeInt64>? _QuestsLocations;
        private IStarfieldGroupGetter<IQuestGetter>? _Quests => _QuestsLocations != null ? StarfieldGroupBinaryOverlay<IQuestGetter>.StarfieldGroupFactory(_stream, _QuestsLocations, _package) : default;
        public IStarfieldGroupGetter<IQuestGetter> Quests => _Quests ?? new StarfieldGroup<Quest>(this);
        #endregion
        #region IdleAnimations
        private List<RangeInt64>? _IdleAnimationsLocations;
        private IStarfieldGroupGetter<IIdleAnimationGetter>? _IdleAnimations => _IdleAnimationsLocations != null ? StarfieldGroupBinaryOverlay<IIdleAnimationGetter>.StarfieldGroupFactory(_stream, _IdleAnimationsLocations, _package) : default;
        public IStarfieldGroupGetter<IIdleAnimationGetter> IdleAnimations => _IdleAnimations ?? new StarfieldGroup<IdleAnimation>(this);
        #endregion
        #region Packages
        private List<RangeInt64>? _PackagesLocations;
        private IStarfieldGroupGetter<IPackageGetter>? _Packages => _PackagesLocations != null ? StarfieldGroupBinaryOverlay<IPackageGetter>.StarfieldGroupFactory(_stream, _PackagesLocations, _package) : default;
        public IStarfieldGroupGetter<IPackageGetter> Packages => _Packages ?? new StarfieldGroup<Package>(this);
        #endregion
        #region CombatStyles
        private List<RangeInt64>? _CombatStylesLocations;
        private IStarfieldGroupGetter<ICombatStyleGetter>? _CombatStyles => _CombatStylesLocations != null ? StarfieldGroupBinaryOverlay<ICombatStyleGetter>.StarfieldGroupFactory(_stream, _CombatStylesLocations, _package) : default;
        public IStarfieldGroupGetter<ICombatStyleGetter> CombatStyles => _CombatStyles ?? new StarfieldGroup<CombatStyle>(this);
        #endregion
        #region LoadScreens
        private List<RangeInt64>? _LoadScreensLocations;
        private IStarfieldGroupGetter<ILoadScreenGetter>? _LoadScreens => _LoadScreensLocations != null ? StarfieldGroupBinaryOverlay<ILoadScreenGetter>.StarfieldGroupFactory(_stream, _LoadScreensLocations, _package) : default;
        public IStarfieldGroupGetter<ILoadScreenGetter> LoadScreens => _LoadScreens ?? new StarfieldGroup<LoadScreen>(this);
        #endregion
        #region AnimatedObjects
        private List<RangeInt64>? _AnimatedObjectsLocations;
        private IStarfieldGroupGetter<IAnimatedObjectGetter>? _AnimatedObjects => _AnimatedObjectsLocations != null ? StarfieldGroupBinaryOverlay<IAnimatedObjectGetter>.StarfieldGroupFactory(_stream, _AnimatedObjectsLocations, _package) : default;
        public IStarfieldGroupGetter<IAnimatedObjectGetter> AnimatedObjects => _AnimatedObjects ?? new StarfieldGroup<AnimatedObject>(this);
        #endregion
        #region Waters
        private List<RangeInt64>? _WatersLocations;
        private IStarfieldGroupGetter<IWaterGetter>? _Waters => _WatersLocations != null ? StarfieldGroupBinaryOverlay<IWaterGetter>.StarfieldGroupFactory(_stream, _WatersLocations, _package) : default;
        public IStarfieldGroupGetter<IWaterGetter> Waters => _Waters ?? new StarfieldGroup<Water>(this);
        #endregion
        #region EffectShaders
        private List<RangeInt64>? _EffectShadersLocations;
        private IStarfieldGroupGetter<IEffectShaderGetter>? _EffectShaders => _EffectShadersLocations != null ? StarfieldGroupBinaryOverlay<IEffectShaderGetter>.StarfieldGroupFactory(_stream, _EffectShadersLocations, _package) : default;
        public IStarfieldGroupGetter<IEffectShaderGetter> EffectShaders => _EffectShaders ?? new StarfieldGroup<EffectShader>(this);
        #endregion
        #region Explosions
        private List<RangeInt64>? _ExplosionsLocations;
        private IStarfieldGroupGetter<IExplosionGetter>? _Explosions => _ExplosionsLocations != null ? StarfieldGroupBinaryOverlay<IExplosionGetter>.StarfieldGroupFactory(_stream, _ExplosionsLocations, _package) : default;
        public IStarfieldGroupGetter<IExplosionGetter> Explosions => _Explosions ?? new StarfieldGroup<Explosion>(this);
        #endregion
        #region Debris
        private List<RangeInt64>? _DebrisLocations;
        private IStarfieldGroupGetter<IDebrisGetter>? _Debris => _DebrisLocations != null ? StarfieldGroupBinaryOverlay<IDebrisGetter>.StarfieldGroupFactory(_stream, _DebrisLocations, _package) : default;
        public IStarfieldGroupGetter<IDebrisGetter> Debris => _Debris ?? new StarfieldGroup<Debris>(this);
        #endregion
        #region ImageSpaces
        private List<RangeInt64>? _ImageSpacesLocations;
        private IStarfieldGroupGetter<IImageSpaceGetter>? _ImageSpaces => _ImageSpacesLocations != null ? StarfieldGroupBinaryOverlay<IImageSpaceGetter>.StarfieldGroupFactory(_stream, _ImageSpacesLocations, _package) : default;
        public IStarfieldGroupGetter<IImageSpaceGetter> ImageSpaces => _ImageSpaces ?? new StarfieldGroup<ImageSpace>(this);
        #endregion
        #region ImageSpaceAdapters
        private List<RangeInt64>? _ImageSpaceAdaptersLocations;
        private IStarfieldGroupGetter<IImageSpaceAdapterGetter>? _ImageSpaceAdapters => _ImageSpaceAdaptersLocations != null ? StarfieldGroupBinaryOverlay<IImageSpaceAdapterGetter>.StarfieldGroupFactory(_stream, _ImageSpaceAdaptersLocations, _package) : default;
        public IStarfieldGroupGetter<IImageSpaceAdapterGetter> ImageSpaceAdapters => _ImageSpaceAdapters ?? new StarfieldGroup<ImageSpaceAdapter>(this);
        #endregion
        #region FormLists
        private List<RangeInt64>? _FormListsLocations;
        private IStarfieldGroupGetter<IFormListGetter>? _FormLists => _FormListsLocations != null ? StarfieldGroupBinaryOverlay<IFormListGetter>.StarfieldGroupFactory(_stream, _FormListsLocations, _package) : default;
        public IStarfieldGroupGetter<IFormListGetter> FormLists => _FormLists ?? new StarfieldGroup<FormList>(this);
        #endregion
        #region Perks
        private List<RangeInt64>? _PerksLocations;
        private IStarfieldGroupGetter<IPerkGetter>? _Perks => _PerksLocations != null ? StarfieldGroupBinaryOverlay<IPerkGetter>.StarfieldGroupFactory(_stream, _PerksLocations, _package) : default;
        public IStarfieldGroupGetter<IPerkGetter> Perks => _Perks ?? new StarfieldGroup<Perk>(this);
        #endregion
        #region BodyParts
        private List<RangeInt64>? _BodyPartsLocations;
        private IStarfieldGroupGetter<IBodyPartDataGetter>? _BodyParts => _BodyPartsLocations != null ? StarfieldGroupBinaryOverlay<IBodyPartDataGetter>.StarfieldGroupFactory(_stream, _BodyPartsLocations, _package) : default;
        public IStarfieldGroupGetter<IBodyPartDataGetter> BodyParts => _BodyParts ?? new StarfieldGroup<BodyPartData>(this);
        #endregion
        #region AddonNodes
        private List<RangeInt64>? _AddonNodesLocations;
        private IStarfieldGroupGetter<IAddonNodeGetter>? _AddonNodes => _AddonNodesLocations != null ? StarfieldGroupBinaryOverlay<IAddonNodeGetter>.StarfieldGroupFactory(_stream, _AddonNodesLocations, _package) : default;
        public IStarfieldGroupGetter<IAddonNodeGetter> AddonNodes => _AddonNodes ?? new StarfieldGroup<AddonNode>(this);
        #endregion
        #region ActorValueInformation
        private List<RangeInt64>? _ActorValueInformationLocations;
        private IStarfieldGroupGetter<IActorValueInformationGetter>? _ActorValueInformation => _ActorValueInformationLocations != null ? StarfieldGroupBinaryOverlay<IActorValueInformationGetter>.StarfieldGroupFactory(_stream, _ActorValueInformationLocations, _package) : default;
        public IStarfieldGroupGetter<IActorValueInformationGetter> ActorValueInformation => _ActorValueInformation ?? new StarfieldGroup<ActorValueInformation>(this);
        #endregion
        #region CameraShots
        private List<RangeInt64>? _CameraShotsLocations;
        private IStarfieldGroupGetter<ICameraShotGetter>? _CameraShots => _CameraShotsLocations != null ? StarfieldGroupBinaryOverlay<ICameraShotGetter>.StarfieldGroupFactory(_stream, _CameraShotsLocations, _package) : default;
        public IStarfieldGroupGetter<ICameraShotGetter> CameraShots => _CameraShots ?? new StarfieldGroup<CameraShot>(this);
        #endregion
        #region CameraPaths
        private List<RangeInt64>? _CameraPathsLocations;
        private IStarfieldGroupGetter<ICameraPathGetter>? _CameraPaths => _CameraPathsLocations != null ? StarfieldGroupBinaryOverlay<ICameraPathGetter>.StarfieldGroupFactory(_stream, _CameraPathsLocations, _package) : default;
        public IStarfieldGroupGetter<ICameraPathGetter> CameraPaths => _CameraPaths ?? new StarfieldGroup<CameraPath>(this);
        #endregion
        #region VoiceTypes
        private List<RangeInt64>? _VoiceTypesLocations;
        private IStarfieldGroupGetter<IVoiceTypeGetter>? _VoiceTypes => _VoiceTypesLocations != null ? StarfieldGroupBinaryOverlay<IVoiceTypeGetter>.StarfieldGroupFactory(_stream, _VoiceTypesLocations, _package) : default;
        public IStarfieldGroupGetter<IVoiceTypeGetter> VoiceTypes => _VoiceTypes ?? new StarfieldGroup<VoiceType>(this);
        #endregion
        #region MaterialTypes
        private List<RangeInt64>? _MaterialTypesLocations;
        private IStarfieldGroupGetter<IMaterialTypeGetter>? _MaterialTypes => _MaterialTypesLocations != null ? StarfieldGroupBinaryOverlay<IMaterialTypeGetter>.StarfieldGroupFactory(_stream, _MaterialTypesLocations, _package) : default;
        public IStarfieldGroupGetter<IMaterialTypeGetter> MaterialTypes => _MaterialTypes ?? new StarfieldGroup<MaterialType>(this);
        #endregion
        #region Impacts
        private List<RangeInt64>? _ImpactsLocations;
        private IStarfieldGroupGetter<IImpactGetter>? _Impacts => _ImpactsLocations != null ? StarfieldGroupBinaryOverlay<IImpactGetter>.StarfieldGroupFactory(_stream, _ImpactsLocations, _package) : default;
        public IStarfieldGroupGetter<IImpactGetter> Impacts => _Impacts ?? new StarfieldGroup<Impact>(this);
        #endregion
        #region ImpactDataSets
        private List<RangeInt64>? _ImpactDataSetsLocations;
        private IStarfieldGroupGetter<IImpactDataSetGetter>? _ImpactDataSets => _ImpactDataSetsLocations != null ? StarfieldGroupBinaryOverlay<IImpactDataSetGetter>.StarfieldGroupFactory(_stream, _ImpactDataSetsLocations, _package) : default;
        public IStarfieldGroupGetter<IImpactDataSetGetter> ImpactDataSets => _ImpactDataSets ?? new StarfieldGroup<ImpactDataSet>(this);
        #endregion
        #region ArmorAddons
        private List<RangeInt64>? _ArmorAddonsLocations;
        private IStarfieldGroupGetter<IArmorAddonGetter>? _ArmorAddons => _ArmorAddonsLocations != null ? StarfieldGroupBinaryOverlay<IArmorAddonGetter>.StarfieldGroupFactory(_stream, _ArmorAddonsLocations, _package) : default;
        public IStarfieldGroupGetter<IArmorAddonGetter> ArmorAddons => _ArmorAddons ?? new StarfieldGroup<ArmorAddon>(this);
        #endregion
        #region Locations
        private List<RangeInt64>? _LocationsLocations;
        private IStarfieldGroupGetter<ILocationGetter>? _Locations => _LocationsLocations != null ? StarfieldGroupBinaryOverlay<ILocationGetter>.StarfieldGroupFactory(_stream, _LocationsLocations, _package) : default;
        public IStarfieldGroupGetter<ILocationGetter> Locations => _Locations ?? new StarfieldGroup<Location>(this);
        #endregion
        #region Messages
        private List<RangeInt64>? _MessagesLocations;
        private IStarfieldGroupGetter<IMessageGetter>? _Messages => _MessagesLocations != null ? StarfieldGroupBinaryOverlay<IMessageGetter>.StarfieldGroupFactory(_stream, _MessagesLocations, _package) : default;
        public IStarfieldGroupGetter<IMessageGetter> Messages => _Messages ?? new StarfieldGroup<Message>(this);
        #endregion
        #region DefaultObjectManagers
        private List<RangeInt64>? _DefaultObjectManagersLocations;
        private IStarfieldGroupGetter<IDefaultObjectManagerGetter>? _DefaultObjectManagers => _DefaultObjectManagersLocations != null ? StarfieldGroupBinaryOverlay<IDefaultObjectManagerGetter>.StarfieldGroupFactory(_stream, _DefaultObjectManagersLocations, _package) : default;
        public IStarfieldGroupGetter<IDefaultObjectManagerGetter> DefaultObjectManagers => _DefaultObjectManagers ?? new StarfieldGroup<DefaultObjectManager>(this);
        #endregion
        #region DefaultObjects
        private List<RangeInt64>? _DefaultObjectsLocations;
        private IStarfieldGroupGetter<IDefaultObjectGetter>? _DefaultObjects => _DefaultObjectsLocations != null ? StarfieldGroupBinaryOverlay<IDefaultObjectGetter>.StarfieldGroupFactory(_stream, _DefaultObjectsLocations, _package) : default;
        public IStarfieldGroupGetter<IDefaultObjectGetter> DefaultObjects => _DefaultObjects ?? new StarfieldGroup<DefaultObject>(this);
        #endregion
        #region LightingTemplates
        private List<RangeInt64>? _LightingTemplatesLocations;
        private IStarfieldGroupGetter<ILightingTemplateGetter>? _LightingTemplates => _LightingTemplatesLocations != null ? StarfieldGroupBinaryOverlay<ILightingTemplateGetter>.StarfieldGroupFactory(_stream, _LightingTemplatesLocations, _package) : default;
        public IStarfieldGroupGetter<ILightingTemplateGetter> LightingTemplates => _LightingTemplates ?? new StarfieldGroup<LightingTemplate>(this);
        #endregion
        #region MusicTypes
        private List<RangeInt64>? _MusicTypesLocations;
        private IStarfieldGroupGetter<IMusicTypeGetter>? _MusicTypes => _MusicTypesLocations != null ? StarfieldGroupBinaryOverlay<IMusicTypeGetter>.StarfieldGroupFactory(_stream, _MusicTypesLocations, _package) : default;
        public IStarfieldGroupGetter<IMusicTypeGetter> MusicTypes => _MusicTypes ?? new StarfieldGroup<MusicType>(this);
        #endregion
        #region Footsteps
        private List<RangeInt64>? _FootstepsLocations;
        private IStarfieldGroupGetter<IFootstepGetter>? _Footsteps => _FootstepsLocations != null ? StarfieldGroupBinaryOverlay<IFootstepGetter>.StarfieldGroupFactory(_stream, _FootstepsLocations, _package) : default;
        public IStarfieldGroupGetter<IFootstepGetter> Footsteps => _Footsteps ?? new StarfieldGroup<Footstep>(this);
        #endregion
        #region FootstepSets
        private List<RangeInt64>? _FootstepSetsLocations;
        private IStarfieldGroupGetter<IFootstepSetGetter>? _FootstepSets => _FootstepSetsLocations != null ? StarfieldGroupBinaryOverlay<IFootstepSetGetter>.StarfieldGroupFactory(_stream, _FootstepSetsLocations, _package) : default;
        public IStarfieldGroupGetter<IFootstepSetGetter> FootstepSets => _FootstepSets ?? new StarfieldGroup<FootstepSet>(this);
        #endregion
        #region StoryManagerBranchNodes
        private List<RangeInt64>? _StoryManagerBranchNodesLocations;
        private IStarfieldGroupGetter<IStoryManagerBranchNodeGetter>? _StoryManagerBranchNodes => _StoryManagerBranchNodesLocations != null ? StarfieldGroupBinaryOverlay<IStoryManagerBranchNodeGetter>.StarfieldGroupFactory(_stream, _StoryManagerBranchNodesLocations, _package) : default;
        public IStarfieldGroupGetter<IStoryManagerBranchNodeGetter> StoryManagerBranchNodes => _StoryManagerBranchNodes ?? new StarfieldGroup<StoryManagerBranchNode>(this);
        #endregion
        #region StoryManagerQuestNodes
        private List<RangeInt64>? _StoryManagerQuestNodesLocations;
        private IStarfieldGroupGetter<IStoryManagerQuestNodeGetter>? _StoryManagerQuestNodes => _StoryManagerQuestNodesLocations != null ? StarfieldGroupBinaryOverlay<IStoryManagerQuestNodeGetter>.StarfieldGroupFactory(_stream, _StoryManagerQuestNodesLocations, _package) : default;
        public IStarfieldGroupGetter<IStoryManagerQuestNodeGetter> StoryManagerQuestNodes => _StoryManagerQuestNodes ?? new StarfieldGroup<StoryManagerQuestNode>(this);
        #endregion
        #region StoryManagerEventNodes
        private List<RangeInt64>? _StoryManagerEventNodesLocations;
        private IStarfieldGroupGetter<IStoryManagerEventNodeGetter>? _StoryManagerEventNodes => _StoryManagerEventNodesLocations != null ? StarfieldGroupBinaryOverlay<IStoryManagerEventNodeGetter>.StarfieldGroupFactory(_stream, _StoryManagerEventNodesLocations, _package) : default;
        public IStarfieldGroupGetter<IStoryManagerEventNodeGetter> StoryManagerEventNodes => _StoryManagerEventNodes ?? new StarfieldGroup<StoryManagerEventNode>(this);
        #endregion
        #region MusicTracks
        private List<RangeInt64>? _MusicTracksLocations;
        private IStarfieldGroupGetter<IMusicTrackGetter>? _MusicTracks => _MusicTracksLocations != null ? StarfieldGroupBinaryOverlay<IMusicTrackGetter>.StarfieldGroupFactory(_stream, _MusicTracksLocations, _package) : default;
        public IStarfieldGroupGetter<IMusicTrackGetter> MusicTracks => _MusicTracks ?? new StarfieldGroup<MusicTrack>(this);
        #endregion
        #region EquipTypes
        private List<RangeInt64>? _EquipTypesLocations;
        private IStarfieldGroupGetter<IEquipTypeGetter>? _EquipTypes => _EquipTypesLocations != null ? StarfieldGroupBinaryOverlay<IEquipTypeGetter>.StarfieldGroupFactory(_stream, _EquipTypesLocations, _package) : default;
        public IStarfieldGroupGetter<IEquipTypeGetter> EquipTypes => _EquipTypes ?? new StarfieldGroup<EquipType>(this);
        #endregion
        #region Outfits
        private List<RangeInt64>? _OutfitsLocations;
        private IStarfieldGroupGetter<IOutfitGetter>? _Outfits => _OutfitsLocations != null ? StarfieldGroupBinaryOverlay<IOutfitGetter>.StarfieldGroupFactory(_stream, _OutfitsLocations, _package) : default;
        public IStarfieldGroupGetter<IOutfitGetter> Outfits => _Outfits ?? new StarfieldGroup<Outfit>(this);
        #endregion
        #region ArtObjects
        private List<RangeInt64>? _ArtObjectsLocations;
        private IStarfieldGroupGetter<IArtObjectGetter>? _ArtObjects => _ArtObjectsLocations != null ? StarfieldGroupBinaryOverlay<IArtObjectGetter>.StarfieldGroupFactory(_stream, _ArtObjectsLocations, _package) : default;
        public IStarfieldGroupGetter<IArtObjectGetter> ArtObjects => _ArtObjects ?? new StarfieldGroup<ArtObject>(this);
        #endregion
        #region MovementTypes
        private List<RangeInt64>? _MovementTypesLocations;
        private IStarfieldGroupGetter<IMovementTypeGetter>? _MovementTypes => _MovementTypesLocations != null ? StarfieldGroupBinaryOverlay<IMovementTypeGetter>.StarfieldGroupFactory(_stream, _MovementTypesLocations, _package) : default;
        public IStarfieldGroupGetter<IMovementTypeGetter> MovementTypes => _MovementTypes ?? new StarfieldGroup<MovementType>(this);
        #endregion
        #region CollisionLayers
        private List<RangeInt64>? _CollisionLayersLocations;
        private IStarfieldGroupGetter<ICollisionLayerGetter>? _CollisionLayers => _CollisionLayersLocations != null ? StarfieldGroupBinaryOverlay<ICollisionLayerGetter>.StarfieldGroupFactory(_stream, _CollisionLayersLocations, _package) : default;
        public IStarfieldGroupGetter<ICollisionLayerGetter> CollisionLayers => _CollisionLayers ?? new StarfieldGroup<CollisionLayer>(this);
        #endregion
        #region Colors
        private List<RangeInt64>? _ColorsLocations;
        private IStarfieldGroupGetter<IColorRecordGetter>? _Colors => _ColorsLocations != null ? StarfieldGroupBinaryOverlay<IColorRecordGetter>.StarfieldGroupFactory(_stream, _ColorsLocations, _package) : default;
        public IStarfieldGroupGetter<IColorRecordGetter> Colors => _Colors ?? new StarfieldGroup<ColorRecord>(this);
        #endregion
        #region ReverbParameters
        private List<RangeInt64>? _ReverbParametersLocations;
        private IStarfieldGroupGetter<IReverbParametersGetter>? _ReverbParameters => _ReverbParametersLocations != null ? StarfieldGroupBinaryOverlay<IReverbParametersGetter>.StarfieldGroupFactory(_stream, _ReverbParametersLocations, _package) : default;
        public IStarfieldGroupGetter<IReverbParametersGetter> ReverbParameters => _ReverbParameters ?? new StarfieldGroup<ReverbParameters>(this);
        #endregion
        #region ReferenceGroups
        private List<RangeInt64>? _ReferenceGroupsLocations;
        private IStarfieldGroupGetter<IReferenceGroupGetter>? _ReferenceGroups => _ReferenceGroupsLocations != null ? StarfieldGroupBinaryOverlay<IReferenceGroupGetter>.StarfieldGroupFactory(_stream, _ReferenceGroupsLocations, _package) : default;
        public IStarfieldGroupGetter<IReferenceGroupGetter> ReferenceGroups => _ReferenceGroups ?? new StarfieldGroup<ReferenceGroup>(this);
        #endregion
        #region AimModels
        private List<RangeInt64>? _AimModelsLocations;
        private IStarfieldGroupGetter<IAimModelGetter>? _AimModels => _AimModelsLocations != null ? StarfieldGroupBinaryOverlay<IAimModelGetter>.StarfieldGroupFactory(_stream, _AimModelsLocations, _package) : default;
        public IStarfieldGroupGetter<IAimModelGetter> AimModels => _AimModels ?? new StarfieldGroup<AimModel>(this);
        #endregion
        #region AimAssistModels
        private List<RangeInt64>? _AimAssistModelsLocations;
        private IStarfieldGroupGetter<IAimAssistModelGetter>? _AimAssistModels => _AimAssistModelsLocations != null ? StarfieldGroupBinaryOverlay<IAimAssistModelGetter>.StarfieldGroupFactory(_stream, _AimAssistModelsLocations, _package) : default;
        public IStarfieldGroupGetter<IAimAssistModelGetter> AimAssistModels => _AimAssistModels ?? new StarfieldGroup<AimAssistModel>(this);
        #endregion
        #region MeleeAimAssistModels
        private List<RangeInt64>? _MeleeAimAssistModelsLocations;
        private IStarfieldGroupGetter<IMeleeAimAssistModelGetter>? _MeleeAimAssistModels => _MeleeAimAssistModelsLocations != null ? StarfieldGroupBinaryOverlay<IMeleeAimAssistModelGetter>.StarfieldGroupFactory(_stream, _MeleeAimAssistModelsLocations, _package) : default;
        public IStarfieldGroupGetter<IMeleeAimAssistModelGetter> MeleeAimAssistModels => _MeleeAimAssistModels ?? new StarfieldGroup<MeleeAimAssistModel>(this);
        #endregion
        #region Layers
        private List<RangeInt64>? _LayersLocations;
        private IStarfieldGroupGetter<ILayerGetter>? _Layers => _LayersLocations != null ? StarfieldGroupBinaryOverlay<ILayerGetter>.StarfieldGroupFactory(_stream, _LayersLocations, _package) : default;
        public IStarfieldGroupGetter<ILayerGetter> Layers => _Layers ?? new StarfieldGroup<Layer>(this);
        #endregion
        #region ConstructibleObjects
        private List<RangeInt64>? _ConstructibleObjectsLocations;
        private IStarfieldGroupGetter<IConstructibleObjectGetter>? _ConstructibleObjects => _ConstructibleObjectsLocations != null ? StarfieldGroupBinaryOverlay<IConstructibleObjectGetter>.StarfieldGroupFactory(_stream, _ConstructibleObjectsLocations, _package) : default;
        public IStarfieldGroupGetter<IConstructibleObjectGetter> ConstructibleObjects => _ConstructibleObjects ?? new StarfieldGroup<ConstructibleObject>(this);
        #endregion
        #region ObjectModifications
        private List<RangeInt64>? _ObjectModificationsLocations;
        private IStarfieldGroupGetter<IAObjectModificationGetter>? _ObjectModifications => _ObjectModificationsLocations != null ? StarfieldGroupBinaryOverlay<IAObjectModificationGetter>.StarfieldGroupFactory(_stream, _ObjectModificationsLocations, _package) : default;
        public IStarfieldGroupGetter<IAObjectModificationGetter> ObjectModifications => _ObjectModifications ?? new StarfieldGroup<AObjectModification>(this);
        #endregion
        #region Zooms
        private List<RangeInt64>? _ZoomsLocations;
        private IStarfieldGroupGetter<IZoomGetter>? _Zooms => _ZoomsLocations != null ? StarfieldGroupBinaryOverlay<IZoomGetter>.StarfieldGroupFactory(_stream, _ZoomsLocations, _package) : default;
        public IStarfieldGroupGetter<IZoomGetter> Zooms => _Zooms ?? new StarfieldGroup<Zoom>(this);
        #endregion
        #region InstanceNamingRules
        private List<RangeInt64>? _InstanceNamingRulesLocations;
        private IStarfieldGroupGetter<IInstanceNamingRulesGetter>? _InstanceNamingRules => _InstanceNamingRulesLocations != null ? StarfieldGroupBinaryOverlay<IInstanceNamingRulesGetter>.StarfieldGroupFactory(_stream, _InstanceNamingRulesLocations, _package) : default;
        public IStarfieldGroupGetter<IInstanceNamingRulesGetter> InstanceNamingRules => _InstanceNamingRules ?? new StarfieldGroup<InstanceNamingRules>(this);
        #endregion
        #region SoundKeywordMappings
        private List<RangeInt64>? _SoundKeywordMappingsLocations;
        private IStarfieldGroupGetter<ISoundKeywordMappingGetter>? _SoundKeywordMappings => _SoundKeywordMappingsLocations != null ? StarfieldGroupBinaryOverlay<ISoundKeywordMappingGetter>.StarfieldGroupFactory(_stream, _SoundKeywordMappingsLocations, _package) : default;
        public IStarfieldGroupGetter<ISoundKeywordMappingGetter> SoundKeywordMappings => _SoundKeywordMappings ?? new StarfieldGroup<SoundKeywordMapping>(this);
        #endregion
        #region AttractionRules
        private List<RangeInt64>? _AttractionRulesLocations;
        private IStarfieldGroupGetter<IAttractionRuleGetter>? _AttractionRules => _AttractionRulesLocations != null ? StarfieldGroupBinaryOverlay<IAttractionRuleGetter>.StarfieldGroupFactory(_stream, _AttractionRulesLocations, _package) : default;
        public IStarfieldGroupGetter<IAttractionRuleGetter> AttractionRules => _AttractionRules ?? new StarfieldGroup<AttractionRule>(this);
        #endregion
        #region SceneCollections
        private List<RangeInt64>? _SceneCollectionsLocations;
        private IStarfieldGroupGetter<ISceneCollectionGetter>? _SceneCollections => _SceneCollectionsLocations != null ? StarfieldGroupBinaryOverlay<ISceneCollectionGetter>.StarfieldGroupFactory(_stream, _SceneCollectionsLocations, _package) : default;
        public IStarfieldGroupGetter<ISceneCollectionGetter> SceneCollections => _SceneCollections ?? new StarfieldGroup<SceneCollection>(this);
        #endregion
        #region AnimationSoundTagSets
        private List<RangeInt64>? _AnimationSoundTagSetsLocations;
        private IStarfieldGroupGetter<IAnimationSoundTagSetGetter>? _AnimationSoundTagSets => _AnimationSoundTagSetsLocations != null ? StarfieldGroupBinaryOverlay<IAnimationSoundTagSetGetter>.StarfieldGroupFactory(_stream, _AnimationSoundTagSetsLocations, _package) : default;
        public IStarfieldGroupGetter<IAnimationSoundTagSetGetter> AnimationSoundTagSets => _AnimationSoundTagSets ?? new StarfieldGroup<AnimationSoundTagSet>(this);
        #endregion
        #region Resources
        private List<RangeInt64>? _ResourcesLocations;
        private IStarfieldGroupGetter<IResourceGetter>? _Resources => _ResourcesLocations != null ? StarfieldGroupBinaryOverlay<IResourceGetter>.StarfieldGroupFactory(_stream, _ResourcesLocations, _package) : default;
        public IStarfieldGroupGetter<IResourceGetter> Resources => _Resources ?? new StarfieldGroup<Resource>(this);
        #endregion
        #region Biomes
        private List<RangeInt64>? _BiomesLocations;
        private IStarfieldGroupGetter<IBiomeGetter>? _Biomes => _BiomesLocations != null ? StarfieldGroupBinaryOverlay<IBiomeGetter>.StarfieldGroupFactory(_stream, _BiomesLocations, _package) : default;
        public IStarfieldGroupGetter<IBiomeGetter> Biomes => _Biomes ?? new StarfieldGroup<Biome>(this);
        #endregion
        #region NavigationMeshObstacleCoverManagers
        private List<RangeInt64>? _NavigationMeshObstacleCoverManagersLocations;
        private IStarfieldGroupGetter<INavigationMeshObstacleCoverManagerGetter>? _NavigationMeshObstacleCoverManagers => _NavigationMeshObstacleCoverManagersLocations != null ? StarfieldGroupBinaryOverlay<INavigationMeshObstacleCoverManagerGetter>.StarfieldGroupFactory(_stream, _NavigationMeshObstacleCoverManagersLocations, _package) : default;
        public IStarfieldGroupGetter<INavigationMeshObstacleCoverManagerGetter> NavigationMeshObstacleCoverManagers => _NavigationMeshObstacleCoverManagers ?? new StarfieldGroup<NavigationMeshObstacleCoverManager>(this);
        #endregion
        #region LensFlares
        private List<RangeInt64>? _LensFlaresLocations;
        private IStarfieldGroupGetter<ILensFlareGetter>? _LensFlares => _LensFlaresLocations != null ? StarfieldGroupBinaryOverlay<ILensFlareGetter>.StarfieldGroupFactory(_stream, _LensFlaresLocations, _package) : default;
        public IStarfieldGroupGetter<ILensFlareGetter> LensFlares => _LensFlares ?? new StarfieldGroup<LensFlare>(this);
        #endregion
        #region ObjectVisibilityManagers
        private List<RangeInt64>? _ObjectVisibilityManagersLocations;
        private IStarfieldGroupGetter<IObjectVisibilityManagerGetter>? _ObjectVisibilityManagers => _ObjectVisibilityManagersLocations != null ? StarfieldGroupBinaryOverlay<IObjectVisibilityManagerGetter>.StarfieldGroupFactory(_stream, _ObjectVisibilityManagersLocations, _package) : default;
        public IStarfieldGroupGetter<IObjectVisibilityManagerGetter> ObjectVisibilityManagers => _ObjectVisibilityManagers ?? new StarfieldGroup<ObjectVisibilityManager>(this);
        #endregion
        #region SnapTemplateNodes
        private List<RangeInt64>? _SnapTemplateNodesLocations;
        private IStarfieldGroupGetter<ISnapTemplateNodeGetter>? _SnapTemplateNodes => _SnapTemplateNodesLocations != null ? StarfieldGroupBinaryOverlay<ISnapTemplateNodeGetter>.StarfieldGroupFactory(_stream, _SnapTemplateNodesLocations, _package) : default;
        public IStarfieldGroupGetter<ISnapTemplateNodeGetter> SnapTemplateNodes => _SnapTemplateNodes ?? new StarfieldGroup<SnapTemplateNode>(this);
        #endregion
        #region SnapTemplates
        private List<RangeInt64>? _SnapTemplatesLocations;
        private IStarfieldGroupGetter<ISnapTemplateGetter>? _SnapTemplates => _SnapTemplatesLocations != null ? StarfieldGroupBinaryOverlay<ISnapTemplateGetter>.StarfieldGroupFactory(_stream, _SnapTemplatesLocations, _package) : default;
        public IStarfieldGroupGetter<ISnapTemplateGetter> SnapTemplates => _SnapTemplates ?? new StarfieldGroup<SnapTemplate>(this);
        #endregion
        #region GroundCovers
        private List<RangeInt64>? _GroundCoversLocations;
        private IStarfieldGroupGetter<IGroundCoverGetter>? _GroundCovers => _GroundCoversLocations != null ? StarfieldGroupBinaryOverlay<IGroundCoverGetter>.StarfieldGroupFactory(_stream, _GroundCoversLocations, _package) : default;
        public IStarfieldGroupGetter<IGroundCoverGetter> GroundCovers => _GroundCovers ?? new StarfieldGroup<GroundCover>(this);
        #endregion
        #region MorphableObjects
        private List<RangeInt64>? _MorphableObjectsLocations;
        private IStarfieldGroupGetter<IMorphableObjectGetter>? _MorphableObjects => _MorphableObjectsLocations != null ? StarfieldGroupBinaryOverlay<IMorphableObjectGetter>.StarfieldGroupFactory(_stream, _MorphableObjectsLocations, _package) : default;
        public IStarfieldGroupGetter<IMorphableObjectGetter> MorphableObjects => _MorphableObjects ?? new StarfieldGroup<MorphableObject>(this);
        #endregion
        #region Traversals
        private List<RangeInt64>? _TraversalsLocations;
        private IStarfieldGroupGetter<ITraversalGetter>? _Traversals => _TraversalsLocations != null ? StarfieldGroupBinaryOverlay<ITraversalGetter>.StarfieldGroupFactory(_stream, _TraversalsLocations, _package) : default;
        public IStarfieldGroupGetter<ITraversalGetter> Traversals => _Traversals ?? new StarfieldGroup<Traversal>(this);
        #endregion
        #region ResourceGenerationData
        private List<RangeInt64>? _ResourceGenerationDataLocations;
        private IStarfieldGroupGetter<IResourceGenerationDataGetter>? _ResourceGenerationData => _ResourceGenerationDataLocations != null ? StarfieldGroupBinaryOverlay<IResourceGenerationDataGetter>.StarfieldGroupFactory(_stream, _ResourceGenerationDataLocations, _package) : default;
        public IStarfieldGroupGetter<IResourceGenerationDataGetter> ResourceGenerationData => _ResourceGenerationData ?? new StarfieldGroup<ResourceGenerationData>(this);
        #endregion
        #region BiomeSwaps
        private List<RangeInt64>? _BiomeSwapsLocations;
        private IStarfieldGroupGetter<IBiomeSwapGetter>? _BiomeSwaps => _BiomeSwapsLocations != null ? StarfieldGroupBinaryOverlay<IBiomeSwapGetter>.StarfieldGroupFactory(_stream, _BiomeSwapsLocations, _package) : default;
        public IStarfieldGroupGetter<IBiomeSwapGetter> BiomeSwaps => _BiomeSwaps ?? new StarfieldGroup<BiomeSwap>(this);
        #endregion
        #region Atmospheres
        private List<RangeInt64>? _AtmospheresLocations;
        private IStarfieldGroupGetter<IAtmosphereGetter>? _Atmospheres => _AtmospheresLocations != null ? StarfieldGroupBinaryOverlay<IAtmosphereGetter>.StarfieldGroupFactory(_stream, _AtmospheresLocations, _package) : default;
        public IStarfieldGroupGetter<IAtmosphereGetter> Atmospheres => _Atmospheres ?? new StarfieldGroup<Atmosphere>(this);
        #endregion
        #region LeveledSpaceCells
        private List<RangeInt64>? _LeveledSpaceCellsLocations;
        private IStarfieldGroupGetter<ILeveledSpaceCellGetter>? _LeveledSpaceCells => _LeveledSpaceCellsLocations != null ? StarfieldGroupBinaryOverlay<ILeveledSpaceCellGetter>.StarfieldGroupFactory(_stream, _LeveledSpaceCellsLocations, _package) : default;
        public IStarfieldGroupGetter<ILeveledSpaceCellGetter> LeveledSpaceCells => _LeveledSpaceCells ?? new StarfieldGroup<LeveledSpaceCell>(this);
        #endregion
        #region SpeechChallenges
        private List<RangeInt64>? _SpeechChallengesLocations;
        private IStarfieldGroupGetter<ISpeechChallengeGetter>? _SpeechChallenges => _SpeechChallengesLocations != null ? StarfieldGroupBinaryOverlay<ISpeechChallengeGetter>.StarfieldGroupFactory(_stream, _SpeechChallengesLocations, _package) : default;
        public IStarfieldGroupGetter<ISpeechChallengeGetter> SpeechChallenges => _SpeechChallenges ?? new StarfieldGroup<SpeechChallenge>(this);
        #endregion
        #region AimAssistPoses
        private List<RangeInt64>? _AimAssistPosesLocations;
        private IStarfieldGroupGetter<IAimAssistPoseGetter>? _AimAssistPoses => _AimAssistPosesLocations != null ? StarfieldGroupBinaryOverlay<IAimAssistPoseGetter>.StarfieldGroupFactory(_stream, _AimAssistPosesLocations, _package) : default;
        public IStarfieldGroupGetter<IAimAssistPoseGetter> AimAssistPoses => _AimAssistPoses ?? new StarfieldGroup<AimAssistPose>(this);
        #endregion
        #region VolumetricLightings
        private List<RangeInt64>? _VolumetricLightingsLocations;
        private IStarfieldGroupGetter<IVolumetricLightingGetter>? _VolumetricLightings => _VolumetricLightingsLocations != null ? StarfieldGroupBinaryOverlay<IVolumetricLightingGetter>.StarfieldGroupFactory(_stream, _VolumetricLightingsLocations, _package) : default;
        public IStarfieldGroupGetter<IVolumetricLightingGetter> VolumetricLightings => _VolumetricLightings ?? new StarfieldGroup<VolumetricLighting>(this);
        #endregion
        #region SurfaceBlocks
        private List<RangeInt64>? _SurfaceBlocksLocations;
        private IStarfieldGroupGetter<ISurfaceBlockGetter>? _SurfaceBlocks => _SurfaceBlocksLocations != null ? StarfieldGroupBinaryOverlay<ISurfaceBlockGetter>.StarfieldGroupFactory(_stream, _SurfaceBlocksLocations, _package) : default;
        public IStarfieldGroupGetter<ISurfaceBlockGetter> SurfaceBlocks => _SurfaceBlocks ?? new StarfieldGroup<SurfaceBlock>(this);
        #endregion
        #region SurfacePatternConfigs
        private List<RangeInt64>? _SurfacePatternConfigsLocations;
        private IStarfieldGroupGetter<ISurfacePatternConfigGetter>? _SurfacePatternConfigs => _SurfacePatternConfigsLocations != null ? StarfieldGroupBinaryOverlay<ISurfacePatternConfigGetter>.StarfieldGroupFactory(_stream, _SurfacePatternConfigsLocations, _package) : default;
        public IStarfieldGroupGetter<ISurfacePatternConfigGetter> SurfacePatternConfigs => _SurfacePatternConfigs ?? new StarfieldGroup<SurfacePatternConfig>(this);
        #endregion
        #region SurfacePatterns
        private List<RangeInt64>? _SurfacePatternsLocations;
        private IStarfieldGroupGetter<ISurfacePatternGetter>? _SurfacePatterns => _SurfacePatternsLocations != null ? StarfieldGroupBinaryOverlay<ISurfacePatternGetter>.StarfieldGroupFactory(_stream, _SurfacePatternsLocations, _package) : default;
        public IStarfieldGroupGetter<ISurfacePatternGetter> SurfacePatterns => _SurfacePatterns ?? new StarfieldGroup<SurfacePattern>(this);
        #endregion
        #region SurfaceTrees
        private List<RangeInt64>? _SurfaceTreesLocations;
        private IStarfieldGroupGetter<ISurfaceTreeGetter>? _SurfaceTrees => _SurfaceTreesLocations != null ? StarfieldGroupBinaryOverlay<ISurfaceTreeGetter>.StarfieldGroupFactory(_stream, _SurfaceTreesLocations, _package) : default;
        public IStarfieldGroupGetter<ISurfaceTreeGetter> SurfaceTrees => _SurfaceTrees ?? new StarfieldGroup<SurfaceTree>(this);
        #endregion
        #region PlanetContentManagerTrees
        private List<RangeInt64>? _PlanetContentManagerTreesLocations;
        private IStarfieldGroupGetter<IPlanetContentManagerTreeGetter>? _PlanetContentManagerTrees => _PlanetContentManagerTreesLocations != null ? StarfieldGroupBinaryOverlay<IPlanetContentManagerTreeGetter>.StarfieldGroupFactory(_stream, _PlanetContentManagerTreesLocations, _package) : default;
        public IStarfieldGroupGetter<IPlanetContentManagerTreeGetter> PlanetContentManagerTrees => _PlanetContentManagerTrees ?? new StarfieldGroup<PlanetContentManagerTree>(this);
        #endregion
        #region BoneModifiers
        private List<RangeInt64>? _BoneModifiersLocations;
        private IStarfieldGroupGetter<IBoneModifierGetter>? _BoneModifiers => _BoneModifiersLocations != null ? StarfieldGroupBinaryOverlay<IBoneModifierGetter>.StarfieldGroupFactory(_stream, _BoneModifiersLocations, _package) : default;
        public IStarfieldGroupGetter<IBoneModifierGetter> BoneModifiers => _BoneModifiers ?? new StarfieldGroup<BoneModifier>(this);
        #endregion
        #region SnapTemplateBehaviors
        private List<RangeInt64>? _SnapTemplateBehaviorsLocations;
        private IStarfieldGroupGetter<ISnapTemplateBehaviorGetter>? _SnapTemplateBehaviors => _SnapTemplateBehaviorsLocations != null ? StarfieldGroupBinaryOverlay<ISnapTemplateBehaviorGetter>.StarfieldGroupFactory(_stream, _SnapTemplateBehaviorsLocations, _package) : default;
        public IStarfieldGroupGetter<ISnapTemplateBehaviorGetter> SnapTemplateBehaviors => _SnapTemplateBehaviors ?? new StarfieldGroup<SnapTemplateBehavior>(this);
        #endregion
        #region Planets
        private List<RangeInt64>? _PlanetsLocations;
        private IStarfieldGroupGetter<IPlanetGetter>? _Planets => _PlanetsLocations != null ? StarfieldGroupBinaryOverlay<IPlanetGetter>.StarfieldGroupFactory(_stream, _PlanetsLocations, _package) : default;
        public IStarfieldGroupGetter<IPlanetGetter> Planets => _Planets ?? new StarfieldGroup<Planet>(this);
        #endregion
        #region ConditionRecords
        private List<RangeInt64>? _ConditionRecordsLocations;
        private IStarfieldGroupGetter<IConditionRecordGetter>? _ConditionRecords => _ConditionRecordsLocations != null ? StarfieldGroupBinaryOverlay<IConditionRecordGetter>.StarfieldGroupFactory(_stream, _ConditionRecordsLocations, _package) : default;
        public IStarfieldGroupGetter<IConditionRecordGetter> ConditionRecords => _ConditionRecords ?? new StarfieldGroup<ConditionRecord>(this);
        #endregion
        #region PlanetContentManagerBranchNodes
        private List<RangeInt64>? _PlanetContentManagerBranchNodesLocations;
        private IStarfieldGroupGetter<IPlanetContentManagerBranchNodeGetter>? _PlanetContentManagerBranchNodes => _PlanetContentManagerBranchNodesLocations != null ? StarfieldGroupBinaryOverlay<IPlanetContentManagerBranchNodeGetter>.StarfieldGroupFactory(_stream, _PlanetContentManagerBranchNodesLocations, _package) : default;
        public IStarfieldGroupGetter<IPlanetContentManagerBranchNodeGetter> PlanetContentManagerBranchNodes => _PlanetContentManagerBranchNodes ?? new StarfieldGroup<PlanetContentManagerBranchNode>(this);
        #endregion
        #region PlanetContentManagerContentNodes
        private List<RangeInt64>? _PlanetContentManagerContentNodesLocations;
        private IStarfieldGroupGetter<IPlanetContentManagerContentNodeGetter>? _PlanetContentManagerContentNodes => _PlanetContentManagerContentNodesLocations != null ? StarfieldGroupBinaryOverlay<IPlanetContentManagerContentNodeGetter>.StarfieldGroupFactory(_stream, _PlanetContentManagerContentNodesLocations, _package) : default;
        public IStarfieldGroupGetter<IPlanetContentManagerContentNodeGetter> PlanetContentManagerContentNodes => _PlanetContentManagerContentNodes ?? new StarfieldGroup<PlanetContentManagerContentNode>(this);
        #endregion
        #region Stars
        private List<RangeInt64>? _StarsLocations;
        private IStarfieldGroupGetter<IStarGetter>? _Stars => _StarsLocations != null ? StarfieldGroupBinaryOverlay<IStarGetter>.StarfieldGroupFactory(_stream, _StarsLocations, _package) : default;
        public IStarfieldGroupGetter<IStarGetter> Stars => _Stars ?? new StarfieldGroup<Star>(this);
        #endregion
        #region WWiseEventDatas
        private List<RangeInt64>? _WWiseEventDatasLocations;
        private IStarfieldGroupGetter<IWWiseEventDataGetter>? _WWiseEventDatas => _WWiseEventDatasLocations != null ? StarfieldGroupBinaryOverlay<IWWiseEventDataGetter>.StarfieldGroupFactory(_stream, _WWiseEventDatasLocations, _package) : default;
        public IStarfieldGroupGetter<IWWiseEventDataGetter> WWiseEventDatas => _WWiseEventDatas ?? new StarfieldGroup<WWiseEventData>(this);
        #endregion
        #region ResearchProjects
        private List<RangeInt64>? _ResearchProjectsLocations;
        private IStarfieldGroupGetter<IResearchProjectGetter>? _ResearchProjects => _ResearchProjectsLocations != null ? StarfieldGroupBinaryOverlay<IResearchProjectGetter>.StarfieldGroupFactory(_stream, _ResearchProjectsLocations, _package) : default;
        public IStarfieldGroupGetter<IResearchProjectGetter> ResearchProjects => _ResearchProjects ?? new StarfieldGroup<ResearchProject>(this);
        #endregion
        #region AimOpticalSightMarkers
        private List<RangeInt64>? _AimOpticalSightMarkersLocations;
        private IStarfieldGroupGetter<IAimOpticalSightMarkerGetter>? _AimOpticalSightMarkers => _AimOpticalSightMarkersLocations != null ? StarfieldGroupBinaryOverlay<IAimOpticalSightMarkerGetter>.StarfieldGroupFactory(_stream, _AimOpticalSightMarkersLocations, _package) : default;
        public IStarfieldGroupGetter<IAimOpticalSightMarkerGetter> AimOpticalSightMarkers => _AimOpticalSightMarkers ?? new StarfieldGroup<AimOpticalSightMarker>(this);
        #endregion
        #region AmbienceSets
        private List<RangeInt64>? _AmbienceSetsLocations;
        private IStarfieldGroupGetter<IAmbienceSetGetter>? _AmbienceSets => _AmbienceSetsLocations != null ? StarfieldGroupBinaryOverlay<IAmbienceSetGetter>.StarfieldGroupFactory(_stream, _AmbienceSetsLocations, _package) : default;
        public IStarfieldGroupGetter<IAmbienceSetGetter> AmbienceSets => _AmbienceSets ?? new StarfieldGroup<AmbienceSet>(this);
        #endregion
        #region WeaponBarrelModels
        private List<RangeInt64>? _WeaponBarrelModelsLocations;
        private IStarfieldGroupGetter<IWeaponBarrelModelGetter>? _WeaponBarrelModels => _WeaponBarrelModelsLocations != null ? StarfieldGroupBinaryOverlay<IWeaponBarrelModelGetter>.StarfieldGroupFactory(_stream, _WeaponBarrelModelsLocations, _package) : default;
        public IStarfieldGroupGetter<IWeaponBarrelModelGetter> WeaponBarrelModels => _WeaponBarrelModels ?? new StarfieldGroup<WeaponBarrelModel>(this);
        #endregion
        #region SurfacePatternStyles
        private List<RangeInt64>? _SurfacePatternStylesLocations;
        private IStarfieldGroupGetter<ISurfacePatternStyleGetter>? _SurfacePatternStyles => _SurfacePatternStylesLocations != null ? StarfieldGroupBinaryOverlay<ISurfacePatternStyleGetter>.StarfieldGroupFactory(_stream, _SurfacePatternStylesLocations, _package) : default;
        public IStarfieldGroupGetter<ISurfacePatternStyleGetter> SurfacePatternStyles => _SurfacePatternStyles ?? new StarfieldGroup<SurfacePatternStyle>(this);
        #endregion
        #region LayeredMaterialSwaps
        private List<RangeInt64>? _LayeredMaterialSwapsLocations;
        private IStarfieldGroupGetter<ILayeredMaterialSwapGetter>? _LayeredMaterialSwaps => _LayeredMaterialSwapsLocations != null ? StarfieldGroupBinaryOverlay<ILayeredMaterialSwapGetter>.StarfieldGroupFactory(_stream, _LayeredMaterialSwapsLocations, _package) : default;
        public IStarfieldGroupGetter<ILayeredMaterialSwapGetter> LayeredMaterialSwaps => _LayeredMaterialSwaps ?? new StarfieldGroup<LayeredMaterialSwap>(this);
        #endregion
        #region ForceDatas
        private List<RangeInt64>? _ForceDatasLocations;
        private IStarfieldGroupGetter<IForceDataGetter>? _ForceDatas => _ForceDatasLocations != null ? StarfieldGroupBinaryOverlay<IForceDataGetter>.StarfieldGroupFactory(_stream, _ForceDatasLocations, _package) : default;
        public IStarfieldGroupGetter<IForceDataGetter> ForceDatas => _ForceDatas ?? new StarfieldGroup<ForceData>(this);
        #endregion
        #region TerminalMenus
        private List<RangeInt64>? _TerminalMenusLocations;
        private IStarfieldGroupGetter<ITerminalMenuGetter>? _TerminalMenus => _TerminalMenusLocations != null ? StarfieldGroupBinaryOverlay<ITerminalMenuGetter>.StarfieldGroupFactory(_stream, _TerminalMenusLocations, _package) : default;
        public IStarfieldGroupGetter<ITerminalMenuGetter> TerminalMenus => _TerminalMenus ?? new StarfieldGroup<TerminalMenu>(this);
        #endregion
        #region EffectSequences
        private List<RangeInt64>? _EffectSequencesLocations;
        private IStarfieldGroupGetter<IEffectSequenceGetter>? _EffectSequences => _EffectSequencesLocations != null ? StarfieldGroupBinaryOverlay<IEffectSequenceGetter>.StarfieldGroupFactory(_stream, _EffectSequencesLocations, _package) : default;
        public IStarfieldGroupGetter<IEffectSequenceGetter> EffectSequences => _EffectSequences ?? new StarfieldGroup<EffectSequence>(this);
        #endregion
        #region SecondaryDamageLists
        private List<RangeInt64>? _SecondaryDamageListsLocations;
        private IStarfieldGroupGetter<ISecondaryDamageListGetter>? _SecondaryDamageLists => _SecondaryDamageListsLocations != null ? StarfieldGroupBinaryOverlay<ISecondaryDamageListGetter>.StarfieldGroupFactory(_stream, _SecondaryDamageListsLocations, _package) : default;
        public IStarfieldGroupGetter<ISecondaryDamageListGetter> SecondaryDamageLists => _SecondaryDamageLists ?? new StarfieldGroup<SecondaryDamageList>(this);
        #endregion
        #region MaterialPaths
        private List<RangeInt64>? _MaterialPathsLocations;
        private IStarfieldGroupGetter<IMaterialPathGetter>? _MaterialPaths => _MaterialPathsLocations != null ? StarfieldGroupBinaryOverlay<IMaterialPathGetter>.StarfieldGroupFactory(_stream, _MaterialPathsLocations, _package) : default;
        public IStarfieldGroupGetter<IMaterialPathGetter> MaterialPaths => _MaterialPaths ?? new StarfieldGroup<MaterialPath>(this);
        #endregion
        #region Clouds
        private List<RangeInt64>? _CloudsLocations;
        private IStarfieldGroupGetter<ICloudsGetter>? _Clouds => _CloudsLocations != null ? StarfieldGroupBinaryOverlay<ICloudsGetter>.StarfieldGroupFactory(_stream, _CloudsLocations, _package) : default;
        public IStarfieldGroupGetter<ICloudsGetter> Clouds => _Clouds ?? new StarfieldGroup<Clouds>(this);
        #endregion
        #region FogVolumes
        private List<RangeInt64>? _FogVolumesLocations;
        private IStarfieldGroupGetter<IFogVolumeGetter>? _FogVolumes => _FogVolumesLocations != null ? StarfieldGroupBinaryOverlay<IFogVolumeGetter>.StarfieldGroupFactory(_stream, _FogVolumesLocations, _package) : default;
        public IStarfieldGroupGetter<IFogVolumeGetter> FogVolumes => _FogVolumes ?? new StarfieldGroup<FogVolume>(this);
        #endregion
        #region WWiseKeywordMappings
        private List<RangeInt64>? _WWiseKeywordMappingsLocations;
        private IStarfieldGroupGetter<IWWiseKeywordMappingGetter>? _WWiseKeywordMappings => _WWiseKeywordMappingsLocations != null ? StarfieldGroupBinaryOverlay<IWWiseKeywordMappingGetter>.StarfieldGroupFactory(_stream, _WWiseKeywordMappingsLocations, _package) : default;
        public IStarfieldGroupGetter<IWWiseKeywordMappingGetter> WWiseKeywordMappings => _WWiseKeywordMappings ?? new StarfieldGroup<WWiseKeywordMapping>(this);
        #endregion
        #region LegendaryItems
        private List<RangeInt64>? _LegendaryItemsLocations;
        private IStarfieldGroupGetter<ILegendaryItemGetter>? _LegendaryItems => _LegendaryItemsLocations != null ? StarfieldGroupBinaryOverlay<ILegendaryItemGetter>.StarfieldGroupFactory(_stream, _LegendaryItemsLocations, _package) : default;
        public IStarfieldGroupGetter<ILegendaryItemGetter> LegendaryItems => _LegendaryItems ?? new StarfieldGroup<LegendaryItem>(this);
        #endregion
        #region ParticleSystemDefineCollisions
        private List<RangeInt64>? _ParticleSystemDefineCollisionsLocations;
        private IStarfieldGroupGetter<IParticleSystemDefineCollisionGetter>? _ParticleSystemDefineCollisions => _ParticleSystemDefineCollisionsLocations != null ? StarfieldGroupBinaryOverlay<IParticleSystemDefineCollisionGetter>.StarfieldGroupFactory(_stream, _ParticleSystemDefineCollisionsLocations, _package) : default;
        public IStarfieldGroupGetter<IParticleSystemDefineCollisionGetter> ParticleSystemDefineCollisions => _ParticleSystemDefineCollisions ?? new StarfieldGroup<ParticleSystemDefineCollision>(this);
        #endregion
        #region SunPresets
        private List<RangeInt64>? _SunPresetsLocations;
        private IStarfieldGroupGetter<ISunPresetGetter>? _SunPresets => _SunPresetsLocations != null ? StarfieldGroupBinaryOverlay<ISunPresetGetter>.StarfieldGroupFactory(_stream, _SunPresetsLocations, _package) : default;
        public IStarfieldGroupGetter<ISunPresetGetter> SunPresets => _SunPresets ?? new StarfieldGroup<SunPreset>(this);
        #endregion
        #region PhotoModeFeatures
        private List<RangeInt64>? _PhotoModeFeaturesLocations;
        private IStarfieldGroupGetter<IPhotoModeFeatureGetter>? _PhotoModeFeatures => _PhotoModeFeaturesLocations != null ? StarfieldGroupBinaryOverlay<IPhotoModeFeatureGetter>.StarfieldGroupFactory(_stream, _PhotoModeFeaturesLocations, _package) : default;
        public IStarfieldGroupGetter<IPhotoModeFeatureGetter> PhotoModeFeatures => _PhotoModeFeatures ?? new StarfieldGroup<PhotoModeFeature>(this);
        #endregion
        #region GameplayOptions
        private List<RangeInt64>? _GameplayOptionsLocations;
        private IStarfieldGroupGetter<IGameplayOptionsGetter>? _GameplayOptions => _GameplayOptionsLocations != null ? StarfieldGroupBinaryOverlay<IGameplayOptionsGetter>.StarfieldGroupFactory(_stream, _GameplayOptionsLocations, _package) : default;
        public IStarfieldGroupGetter<IGameplayOptionsGetter> GameplayOptions => _GameplayOptions ?? new StarfieldGroup<GameplayOptions>(this);
        #endregion
        #region GameplayOptionsGroups
        private List<RangeInt64>? _GameplayOptionsGroupsLocations;
        private IStarfieldGroupGetter<IGameplayOptionsGroupGetter>? _GameplayOptionsGroups => _GameplayOptionsGroupsLocations != null ? StarfieldGroupBinaryOverlay<IGameplayOptionsGroupGetter>.StarfieldGroupFactory(_stream, _GameplayOptionsGroupsLocations, _package) : default;
        public IStarfieldGroupGetter<IGameplayOptionsGroupGetter> GameplayOptionsGroups => _GameplayOptionsGroups ?? new StarfieldGroup<GameplayOptionsGroup>(this);
        #endregion
        #region TimeOfDays
        private List<RangeInt64>? _TimeOfDaysLocations;
        private IStarfieldGroupGetter<ITimeOfDayRecordGetter>? _TimeOfDays => _TimeOfDaysLocations != null ? StarfieldGroupBinaryOverlay<ITimeOfDayRecordGetter>.StarfieldGroupFactory(_stream, _TimeOfDaysLocations, _package) : default;
        public IStarfieldGroupGetter<ITimeOfDayRecordGetter> TimeOfDays => _TimeOfDays ?? new StarfieldGroup<TimeOfDayRecord>(this);
        #endregion
        #region ActorValueModulations
        private List<RangeInt64>? _ActorValueModulationsLocations;
        private IStarfieldGroupGetter<IActorValueModulationGetter>? _ActorValueModulations => _ActorValueModulationsLocations != null ? StarfieldGroupBinaryOverlay<IActorValueModulationGetter>.StarfieldGroupFactory(_stream, _ActorValueModulationsLocations, _package) : default;
        public IStarfieldGroupGetter<IActorValueModulationGetter> ActorValueModulations => _ActorValueModulations ?? new StarfieldGroup<ActorValueModulation>(this);
        #endregion
        #region Challenges
        private List<RangeInt64>? _ChallengesLocations;
        private IStarfieldGroupGetter<IChallengeGetter>? _Challenges => _ChallengesLocations != null ? StarfieldGroupBinaryOverlay<IChallengeGetter>.StarfieldGroupFactory(_stream, _ChallengesLocations, _package) : default;
        public IStarfieldGroupGetter<IChallengeGetter> Challenges => _Challenges ?? new StarfieldGroup<Challenge>(this);
        #endregion
        #region FacialExpressions
        private List<RangeInt64>? _FacialExpressionsLocations;
        private IStarfieldGroupGetter<IFacialExpressionGetter>? _FacialExpressions => _FacialExpressionsLocations != null ? StarfieldGroupBinaryOverlay<IFacialExpressionGetter>.StarfieldGroupFactory(_stream, _FacialExpressionsLocations, _package) : default;
        public IStarfieldGroupGetter<IFacialExpressionGetter> FacialExpressions => _FacialExpressions ?? new StarfieldGroup<FacialExpression>(this);
        #endregion
        #region PERS
        private List<RangeInt64>? _PERSLocations;
        private IStarfieldGroupGetter<IPERSGetter>? _PERS => _PERSLocations != null ? StarfieldGroupBinaryOverlay<IPERSGetter>.StarfieldGroupFactory(_stream, _PERSLocations, _package) : default;
        public IStarfieldGroupGetter<IPERSGetter> PERS => _PERS ?? new StarfieldGroup<PERS>(this);
        #endregion
        protected StarfieldModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose,
            StarfieldRelease release)
        {
            this.ModKey = modKey;
            this.StarfieldRelease = release;
            this._stream = stream;
            this._package = new BinaryOverlayFactoryPackage(stream.MetaData);
            this._shouldDispose = shouldDispose;
        }

        public static StarfieldModBinaryOverlay StarfieldModFactory(
            ModPath path,
            StarfieldRelease release,
            BinaryReadParameters? param)
        {
            param ??= BinaryReadParameters.Default;
            var meta = ParsingMeta.Factory(param, release.ToGameRelease(), path);
            meta.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
            var stream = new MutagenBinaryReadStream(
                path: path.Path,
                metaData: meta);
            try
            {
                if (stream.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = stream.GetInt32(offset: 8);
                if (Enums.HasFlag(flags, (int)StarfieldModHeader.HeaderFlag.Localized))
                {
                    meta.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(release.ToGameRelease(), path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam, fileSystem: param.FileSystem);
                }
                return StarfieldModFactory(
                    stream: stream,
                    path.ModKey,
                    release: release,
                    shouldDispose: true);
            }
            catch (Exception)
            {
                stream.Dispose();
                throw;
            }
        }

        public static StarfieldModBinaryOverlay StarfieldModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            StarfieldRelease release,
            bool shouldDispose)
        {
            var ret = new StarfieldModBinaryOverlay(
                stream: stream,
                release: release,
                modKey: modKey,
                shouldDispose: shouldDispose);
            PluginBinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public ParseResult FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    return (int)StarfieldMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    _GameSettingsLocations ??= new();
                    _GameSettingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    _KeywordsLocations ??= new();
                    _KeywordsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Keywords;
                }
                case RecordTypeInts.FFKW:
                {
                    _FFKWLocations ??= new();
                    _FFKWLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.FFKW;
                }
                case RecordTypeInts.LCRT:
                {
                    _LocationReferenceTypesLocations ??= new();
                    _LocationReferenceTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    _ActionsLocations ??= new();
                    _ActionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Actions;
                }
                case RecordTypeInts.TRNS:
                {
                    _TransformsLocations ??= new();
                    _TransformsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Transforms;
                }
                case RecordTypeInts.TXST:
                {
                    _TextureSetsLocations ??= new();
                    _TextureSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    _GlobalsLocations ??= new();
                    _GlobalsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Globals;
                }
                case RecordTypeInts.DMGT:
                {
                    _DamageTypesLocations ??= new();
                    _DamageTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.DamageTypes;
                }
                case RecordTypeInts.CLAS:
                {
                    _ClassesLocations ??= new();
                    _ClassesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    _FactionsLocations ??= new();
                    _FactionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Factions;
                }
                case RecordTypeInts.AFFE:
                {
                    _AffinityEventsLocations ??= new();
                    _AffinityEventsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AffinityEvents;
                }
                case RecordTypeInts.HDPT:
                {
                    _HeadPartsLocations ??= new();
                    _HeadPartsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.RACE:
                {
                    _RacesLocations ??= new();
                    _RacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    _SoundMarkersLocations ??= new();
                    _SoundMarkersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SoundMarkers;
                }
                case RecordTypeInts.SECH:
                {
                    _SoundEchoMarkersLocations ??= new();
                    _SoundEchoMarkersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SoundEchoMarkers;
                }
                case RecordTypeInts.ASPC:
                {
                    _AcousticSpacesLocations ??= new();
                    _AcousticSpacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AcousticSpaces;
                }
                case RecordTypeInts.AOPF:
                {
                    _AudioOcclusionPrimitivesLocations ??= new();
                    _AudioOcclusionPrimitivesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AudioOcclusionPrimitives;
                }
                case RecordTypeInts.MGEF:
                {
                    _MagicEffectsLocations ??= new();
                    _MagicEffectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.LTEX:
                {
                    _LandscapeTexturesLocations ??= new();
                    _LandscapeTexturesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LandscapeTextures;
                }
                case RecordTypeInts.PDCL:
                {
                    _ProjectedDecalsLocations ??= new();
                    _ProjectedDecalsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ProjectedDecals;
                }
                case RecordTypeInts.ENCH:
                {
                    _ObjectEffectsLocations ??= new();
                    _ObjectEffectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ObjectEffects;
                }
                case RecordTypeInts.SPEL:
                {
                    _SpellsLocations ??= new();
                    _SpellsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Spells;
                }
                case RecordTypeInts.ACTI:
                {
                    _ActivatorsLocations ??= new();
                    _ActivatorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Activators;
                }
                case RecordTypeInts.CURV:
                {
                    _CurveTablesLocations ??= new();
                    _CurveTablesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.CurveTables;
                }
                case RecordTypeInts.CUR3:
                {
                    _Curve3DsLocations ??= new();
                    _Curve3DsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Curve3Ds;
                }
                case RecordTypeInts.ARMO:
                {
                    _ArmorsLocations ??= new();
                    _ArmorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    _BooksLocations ??= new();
                    _BooksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Books;
                }
                case RecordTypeInts.CONT:
                {
                    _ContainersLocations ??= new();
                    _ContainersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    _DoorsLocations ??= new();
                    _DoorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Doors;
                }
                case RecordTypeInts.LIGH:
                {
                    _LightsLocations ??= new();
                    _LightsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    _MiscItemsLocations ??= new();
                    _MiscItemsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.MiscItems;
                }
                case RecordTypeInts.STAT:
                {
                    _StaticsLocations ??= new();
                    _StaticsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Statics;
                }
                case RecordTypeInts.SCOL:
                {
                    _StaticCollectionsLocations ??= new();
                    _StaticCollectionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.StaticCollections;
                }
                case RecordTypeInts.PKIN:
                {
                    _PackInsLocations ??= new();
                    _PackInsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.PackIns;
                }
                case RecordTypeInts.MSTT:
                {
                    _MoveableStaticsLocations ??= new();
                    _MoveableStaticsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.MoveableStatics;
                }
                case RecordTypeInts.GRAS:
                {
                    _GrassesLocations ??= new();
                    _GrassesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Grasses;
                }
                case RecordTypeInts.FLOR:
                {
                    _FloraeLocations ??= new();
                    _FloraeLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Florae;
                }
                case RecordTypeInts.FURN:
                {
                    _FurnitureLocations ??= new();
                    _FurnitureLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    _WeaponsLocations ??= new();
                    _WeaponsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    _AmmunitionsLocations ??= new();
                    _AmmunitionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    _NpcsLocations ??= new();
                    _NpcsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.LVLN:
                {
                    _LeveledNpcsLocations ??= new();
                    _LeveledNpcsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LeveledNpcs;
                }
                case RecordTypeInts.LVLP:
                {
                    _LeveledPackInsLocations ??= new();
                    _LeveledPackInsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LeveledPackIns;
                }
                case RecordTypeInts.KEYM:
                {
                    _KeysLocations ??= new();
                    _KeysLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    _IngestiblesLocations ??= new();
                    _IngestiblesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Ingestibles;
                }
                case RecordTypeInts.IDLM:
                {
                    _IdleMarkersLocations ??= new();
                    _IdleMarkersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.IdleMarkers;
                }
                case RecordTypeInts.BMMO:
                {
                    _BiomeMarkersLocations ??= new();
                    _BiomeMarkersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.BiomeMarkers;
                }
                case RecordTypeInts.NOTE:
                {
                    _NotesLocations ??= new();
                    _NotesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Notes;
                }
                case RecordTypeInts.PROJ:
                {
                    _ProjectilesLocations ??= new();
                    _ProjectilesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Projectiles;
                }
                case RecordTypeInts.HAZD:
                {
                    _HazardsLocations ??= new();
                    _HazardsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Hazards;
                }
                case RecordTypeInts.BNDS:
                {
                    _BendableSplinesLocations ??= new();
                    _BendableSplinesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.BendableSplines;
                }
                case RecordTypeInts.TERM:
                {
                    _TerminalsLocations ??= new();
                    _TerminalsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Terminals;
                }
                case RecordTypeInts.LVLI:
                {
                    _LeveledItemsLocations ??= new();
                    _LeveledItemsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.GBFT:
                {
                    _GenericBaseFormTemplatesLocations ??= new();
                    _GenericBaseFormTemplatesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.GenericBaseFormTemplates;
                }
                case RecordTypeInts.GBFM:
                {
                    _GenericBaseFormsLocations ??= new();
                    _GenericBaseFormsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.GenericBaseForms;
                }
                case RecordTypeInts.LVLB:
                {
                    _LeveledBaseFormsLocations ??= new();
                    _LeveledBaseFormsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LeveledBaseForms;
                }
                case RecordTypeInts.WTHR:
                {
                    _WeathersLocations ??= new();
                    _WeathersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Weathers;
                }
                case RecordTypeInts.WTHS:
                {
                    _WeatherSettingsLocations ??= new();
                    _WeatherSettingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.WeatherSettings;
                }
                case RecordTypeInts.CLMT:
                {
                    _ClimatesLocations ??= new();
                    _ClimatesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Climates;
                }
                case RecordTypeInts.SPGD:
                {
                    _ShaderParticleGeometriesLocations ??= new();
                    _ShaderParticleGeometriesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ShaderParticleGeometries;
                }
                case RecordTypeInts.REGN:
                {
                    _RegionsLocations ??= new();
                    _RegionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Regions;
                }
                case RecordTypeInts.NAVI:
                {
                    _NavigationMeshInfoMapsLocations ??= new();
                    _NavigationMeshInfoMapsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.NavigationMeshInfoMaps;
                }
                case RecordTypeInts.CELL:
                {
                    _CellsLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    return (int)StarfieldMod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    _WorldspacesLocations ??= new();
                    _WorldspacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.QUST:
                {
                    _QuestsLocations ??= new();
                    _QuestsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    _IdleAnimationsLocations ??= new();
                    _IdleAnimationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    _PackagesLocations ??= new();
                    _PackagesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Packages;
                }
                case RecordTypeInts.CSTY:
                {
                    _CombatStylesLocations ??= new();
                    _CombatStylesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    _LoadScreensLocations ??= new();
                    _LoadScreensLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.ANIO:
                {
                    _AnimatedObjectsLocations ??= new();
                    _AnimatedObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    _WatersLocations ??= new();
                    _WatersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    _EffectShadersLocations ??= new();
                    _EffectShadersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.EffectShaders;
                }
                case RecordTypeInts.EXPL:
                {
                    _ExplosionsLocations ??= new();
                    _ExplosionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Explosions;
                }
                case RecordTypeInts.DEBR:
                {
                    _DebrisLocations ??= new();
                    _DebrisLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Debris;
                }
                case RecordTypeInts.IMGS:
                {
                    _ImageSpacesLocations ??= new();
                    _ImageSpacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.IMAD:
                {
                    _ImageSpaceAdaptersLocations ??= new();
                    _ImageSpaceAdaptersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ImageSpaceAdapters;
                }
                case RecordTypeInts.FLST:
                {
                    _FormListsLocations ??= new();
                    _FormListsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.FormLists;
                }
                case RecordTypeInts.PERK:
                {
                    _PerksLocations ??= new();
                    _PerksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Perks;
                }
                case RecordTypeInts.BPTD:
                {
                    _BodyPartsLocations ??= new();
                    _BodyPartsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.BodyParts;
                }
                case RecordTypeInts.ADDN:
                {
                    _AddonNodesLocations ??= new();
                    _AddonNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AddonNodes;
                }
                case RecordTypeInts.AVIF:
                {
                    _ActorValueInformationLocations ??= new();
                    _ActorValueInformationLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ActorValueInformation;
                }
                case RecordTypeInts.CAMS:
                {
                    _CameraShotsLocations ??= new();
                    _CameraShotsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.CameraShots;
                }
                case RecordTypeInts.CPTH:
                {
                    _CameraPathsLocations ??= new();
                    _CameraPathsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.CameraPaths;
                }
                case RecordTypeInts.VTYP:
                {
                    _VoiceTypesLocations ??= new();
                    _VoiceTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.MATT:
                {
                    _MaterialTypesLocations ??= new();
                    _MaterialTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.MaterialTypes;
                }
                case RecordTypeInts.IPCT:
                {
                    _ImpactsLocations ??= new();
                    _ImpactsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Impacts;
                }
                case RecordTypeInts.IPDS:
                {
                    _ImpactDataSetsLocations ??= new();
                    _ImpactDataSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ImpactDataSets;
                }
                case RecordTypeInts.ARMA:
                {
                    _ArmorAddonsLocations ??= new();
                    _ArmorAddonsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ArmorAddons;
                }
                case RecordTypeInts.LCTN:
                {
                    _LocationsLocations ??= new();
                    _LocationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Locations;
                }
                case RecordTypeInts.MESG:
                {
                    _MessagesLocations ??= new();
                    _MessagesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Messages;
                }
                case RecordTypeInts.DOBJ:
                {
                    _DefaultObjectManagersLocations ??= new();
                    _DefaultObjectManagersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.DefaultObjectManagers;
                }
                case RecordTypeInts.DFOB:
                {
                    _DefaultObjectsLocations ??= new();
                    _DefaultObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.DefaultObjects;
                }
                case RecordTypeInts.LGTM:
                {
                    _LightingTemplatesLocations ??= new();
                    _LightingTemplatesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LightingTemplates;
                }
                case RecordTypeInts.MUSC:
                {
                    _MusicTypesLocations ??= new();
                    _MusicTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.MusicTypes;
                }
                case RecordTypeInts.FSTP:
                {
                    _FootstepsLocations ??= new();
                    _FootstepsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Footsteps;
                }
                case RecordTypeInts.FSTS:
                {
                    _FootstepSetsLocations ??= new();
                    _FootstepSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.FootstepSets;
                }
                case RecordTypeInts.SMBN:
                {
                    _StoryManagerBranchNodesLocations ??= new();
                    _StoryManagerBranchNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.StoryManagerBranchNodes;
                }
                case RecordTypeInts.SMQN:
                {
                    _StoryManagerQuestNodesLocations ??= new();
                    _StoryManagerQuestNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.StoryManagerQuestNodes;
                }
                case RecordTypeInts.SMEN:
                {
                    _StoryManagerEventNodesLocations ??= new();
                    _StoryManagerEventNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.StoryManagerEventNodes;
                }
                case RecordTypeInts.MUST:
                {
                    _MusicTracksLocations ??= new();
                    _MusicTracksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.MusicTracks;
                }
                case RecordTypeInts.EQUP:
                {
                    _EquipTypesLocations ??= new();
                    _EquipTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.EquipTypes;
                }
                case RecordTypeInts.OTFT:
                {
                    _OutfitsLocations ??= new();
                    _OutfitsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Outfits;
                }
                case RecordTypeInts.ARTO:
                {
                    _ArtObjectsLocations ??= new();
                    _ArtObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ArtObjects;
                }
                case RecordTypeInts.MOVT:
                {
                    _MovementTypesLocations ??= new();
                    _MovementTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.COLL:
                {
                    _CollisionLayersLocations ??= new();
                    _CollisionLayersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.CollisionLayers;
                }
                case RecordTypeInts.CLFM:
                {
                    _ColorsLocations ??= new();
                    _ColorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Colors;
                }
                case RecordTypeInts.REVB:
                {
                    _ReverbParametersLocations ??= new();
                    _ReverbParametersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ReverbParameters;
                }
                case RecordTypeInts.RFGP:
                {
                    _ReferenceGroupsLocations ??= new();
                    _ReferenceGroupsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ReferenceGroups;
                }
                case RecordTypeInts.AMDL:
                {
                    _AimModelsLocations ??= new();
                    _AimModelsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AimModels;
                }
                case RecordTypeInts.AAMD:
                {
                    _AimAssistModelsLocations ??= new();
                    _AimAssistModelsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AimAssistModels;
                }
                case RecordTypeInts.MAAM:
                {
                    _MeleeAimAssistModelsLocations ??= new();
                    _MeleeAimAssistModelsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.MeleeAimAssistModels;
                }
                case RecordTypeInts.LAYR:
                {
                    _LayersLocations ??= new();
                    _LayersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Layers;
                }
                case RecordTypeInts.COBJ:
                {
                    _ConstructibleObjectsLocations ??= new();
                    _ConstructibleObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ConstructibleObjects;
                }
                case RecordTypeInts.OMOD:
                {
                    _ObjectModificationsLocations ??= new();
                    _ObjectModificationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ObjectModifications;
                }
                case RecordTypeInts.ZOOM:
                {
                    _ZoomsLocations ??= new();
                    _ZoomsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Zooms;
                }
                case RecordTypeInts.INNR:
                {
                    _InstanceNamingRulesLocations ??= new();
                    _InstanceNamingRulesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.InstanceNamingRules;
                }
                case RecordTypeInts.KSSM:
                {
                    _SoundKeywordMappingsLocations ??= new();
                    _SoundKeywordMappingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SoundKeywordMappings;
                }
                case RecordTypeInts.AORU:
                {
                    _AttractionRulesLocations ??= new();
                    _AttractionRulesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AttractionRules;
                }
                case RecordTypeInts.SCCO:
                {
                    _SceneCollectionsLocations ??= new();
                    _SceneCollectionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SceneCollections;
                }
                case RecordTypeInts.STAG:
                {
                    _AnimationSoundTagSetsLocations ??= new();
                    _AnimationSoundTagSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AnimationSoundTagSets;
                }
                case RecordTypeInts.IRES:
                {
                    _ResourcesLocations ??= new();
                    _ResourcesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Resources;
                }
                case RecordTypeInts.BIOM:
                {
                    _BiomesLocations ??= new();
                    _BiomesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Biomes;
                }
                case RecordTypeInts.NOCM:
                {
                    _NavigationMeshObstacleCoverManagersLocations ??= new();
                    _NavigationMeshObstacleCoverManagersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.NavigationMeshObstacleCoverManagers;
                }
                case RecordTypeInts.LENS:
                {
                    _LensFlaresLocations ??= new();
                    _LensFlaresLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LensFlares;
                }
                case RecordTypeInts.OVIS:
                {
                    _ObjectVisibilityManagersLocations ??= new();
                    _ObjectVisibilityManagersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ObjectVisibilityManagers;
                }
                case RecordTypeInts.STND:
                {
                    _SnapTemplateNodesLocations ??= new();
                    _SnapTemplateNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SnapTemplateNodes;
                }
                case RecordTypeInts.STMP:
                {
                    _SnapTemplatesLocations ??= new();
                    _SnapTemplatesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SnapTemplates;
                }
                case RecordTypeInts.GCVR:
                {
                    _GroundCoversLocations ??= new();
                    _GroundCoversLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.GroundCovers;
                }
                case RecordTypeInts.MRPH:
                {
                    _MorphableObjectsLocations ??= new();
                    _MorphableObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.MorphableObjects;
                }
                case RecordTypeInts.TRAV:
                {
                    _TraversalsLocations ??= new();
                    _TraversalsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Traversals;
                }
                case RecordTypeInts.RSGD:
                {
                    _ResourceGenerationDataLocations ??= new();
                    _ResourceGenerationDataLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ResourceGenerationData;
                }
                case RecordTypeInts.OSWP:
                {
                    _BiomeSwapsLocations ??= new();
                    _BiomeSwapsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.BiomeSwaps;
                }
                case RecordTypeInts.ATMO:
                {
                    _AtmospheresLocations ??= new();
                    _AtmospheresLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Atmospheres;
                }
                case RecordTypeInts.LVSC:
                {
                    _LeveledSpaceCellsLocations ??= new();
                    _LeveledSpaceCellsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LeveledSpaceCells;
                }
                case RecordTypeInts.SPCH:
                {
                    _SpeechChallengesLocations ??= new();
                    _SpeechChallengesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SpeechChallenges;
                }
                case RecordTypeInts.AAPD:
                {
                    _AimAssistPosesLocations ??= new();
                    _AimAssistPosesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AimAssistPoses;
                }
                case RecordTypeInts.VOLI:
                {
                    _VolumetricLightingsLocations ??= new();
                    _VolumetricLightingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.VolumetricLightings;
                }
                case RecordTypeInts.SFBK:
                {
                    _SurfaceBlocksLocations ??= new();
                    _SurfaceBlocksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SurfaceBlocks;
                }
                case RecordTypeInts.SFPC:
                {
                    _SurfacePatternConfigsLocations ??= new();
                    _SurfacePatternConfigsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SurfacePatternConfigs;
                }
                case RecordTypeInts.SFPT:
                {
                    _SurfacePatternsLocations ??= new();
                    _SurfacePatternsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SurfacePatterns;
                }
                case RecordTypeInts.SFTR:
                {
                    _SurfaceTreesLocations ??= new();
                    _SurfaceTreesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SurfaceTrees;
                }
                case RecordTypeInts.PCMT:
                {
                    _PlanetContentManagerTreesLocations ??= new();
                    _PlanetContentManagerTreesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.PlanetContentManagerTrees;
                }
                case RecordTypeInts.BMOD:
                {
                    _BoneModifiersLocations ??= new();
                    _BoneModifiersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.BoneModifiers;
                }
                case RecordTypeInts.STBH:
                {
                    _SnapTemplateBehaviorsLocations ??= new();
                    _SnapTemplateBehaviorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SnapTemplateBehaviors;
                }
                case RecordTypeInts.PNDT:
                {
                    _PlanetsLocations ??= new();
                    _PlanetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Planets;
                }
                case RecordTypeInts.CNDF:
                {
                    _ConditionRecordsLocations ??= new();
                    _ConditionRecordsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ConditionRecords;
                }
                case RecordTypeInts.PCBN:
                {
                    _PlanetContentManagerBranchNodesLocations ??= new();
                    _PlanetContentManagerBranchNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.PlanetContentManagerBranchNodes;
                }
                case RecordTypeInts.PCCN:
                {
                    _PlanetContentManagerContentNodesLocations ??= new();
                    _PlanetContentManagerContentNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.PlanetContentManagerContentNodes;
                }
                case RecordTypeInts.STDT:
                {
                    _StarsLocations ??= new();
                    _StarsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Stars;
                }
                case RecordTypeInts.WWED:
                {
                    _WWiseEventDatasLocations ??= new();
                    _WWiseEventDatasLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.WWiseEventDatas;
                }
                case RecordTypeInts.RSPJ:
                {
                    _ResearchProjectsLocations ??= new();
                    _ResearchProjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ResearchProjects;
                }
                case RecordTypeInts.AOPS:
                {
                    _AimOpticalSightMarkersLocations ??= new();
                    _AimOpticalSightMarkersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AimOpticalSightMarkers;
                }
                case RecordTypeInts.AMBS:
                {
                    _AmbienceSetsLocations ??= new();
                    _AmbienceSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.AmbienceSets;
                }
                case RecordTypeInts.WBAR:
                {
                    _WeaponBarrelModelsLocations ??= new();
                    _WeaponBarrelModelsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.WeaponBarrelModels;
                }
                case RecordTypeInts.PTST:
                {
                    _SurfacePatternStylesLocations ??= new();
                    _SurfacePatternStylesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SurfacePatternStyles;
                }
                case RecordTypeInts.LMSW:
                {
                    _LayeredMaterialSwapsLocations ??= new();
                    _LayeredMaterialSwapsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LayeredMaterialSwaps;
                }
                case RecordTypeInts.FORC:
                {
                    _ForceDatasLocations ??= new();
                    _ForceDatasLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ForceDatas;
                }
                case RecordTypeInts.TMLM:
                {
                    _TerminalMenusLocations ??= new();
                    _TerminalMenusLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.TerminalMenus;
                }
                case RecordTypeInts.EFSQ:
                {
                    _EffectSequencesLocations ??= new();
                    _EffectSequencesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.EffectSequences;
                }
                case RecordTypeInts.SDLT:
                {
                    _SecondaryDamageListsLocations ??= new();
                    _SecondaryDamageListsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SecondaryDamageLists;
                }
                case RecordTypeInts.MTPT:
                {
                    _MaterialPathsLocations ??= new();
                    _MaterialPathsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.MaterialPaths;
                }
                case RecordTypeInts.CLDF:
                {
                    _CloudsLocations ??= new();
                    _CloudsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Clouds;
                }
                case RecordTypeInts.FOGV:
                {
                    _FogVolumesLocations ??= new();
                    _FogVolumesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.FogVolumes;
                }
                case RecordTypeInts.WKMF:
                {
                    _WWiseKeywordMappingsLocations ??= new();
                    _WWiseKeywordMappingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.WWiseKeywordMappings;
                }
                case RecordTypeInts.LGDI:
                {
                    _LegendaryItemsLocations ??= new();
                    _LegendaryItemsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.LegendaryItems;
                }
                case RecordTypeInts.PSDC:
                {
                    _ParticleSystemDefineCollisionsLocations ??= new();
                    _ParticleSystemDefineCollisionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ParticleSystemDefineCollisions;
                }
                case RecordTypeInts.SUNP:
                {
                    _SunPresetsLocations ??= new();
                    _SunPresetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.SunPresets;
                }
                case RecordTypeInts.PMFT:
                {
                    _PhotoModeFeaturesLocations ??= new();
                    _PhotoModeFeaturesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.PhotoModeFeatures;
                }
                case RecordTypeInts.GPOF:
                {
                    _GameplayOptionsLocations ??= new();
                    _GameplayOptionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.GameplayOptions;
                }
                case RecordTypeInts.GPOG:
                {
                    _GameplayOptionsGroupsLocations ??= new();
                    _GameplayOptionsGroupsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.GameplayOptionsGroups;
                }
                case RecordTypeInts.TODD:
                {
                    _TimeOfDaysLocations ??= new();
                    _TimeOfDaysLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.TimeOfDays;
                }
                case RecordTypeInts.AVMD:
                {
                    _ActorValueModulationsLocations ??= new();
                    _ActorValueModulationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.ActorValueModulations;
                }
                case RecordTypeInts.CHAL:
                {
                    _ChallengesLocations ??= new();
                    _ChallengesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.Challenges;
                }
                case RecordTypeInts.FXPD:
                {
                    _FacialExpressionsLocations ??= new();
                    _FacialExpressionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.FacialExpressions;
                }
                case RecordTypeInts.PERS:
                {
                    _PERSLocations ??= new();
                    _PERSLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)StarfieldMod_FieldIndex.PERS;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarfieldModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStarfieldModGetter rhs) return false;
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarfieldModGetter? obj)
        {
            return ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarfieldModCommon)((IStarfieldModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => StarfieldModMixIn.GetEqualsMask(this, (IStarfieldModGetter)rhs, include);
    }

}
#endregion

#endregion

