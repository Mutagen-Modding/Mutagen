/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class StarfieldModHeader :
        IEquatable<IStarfieldModHeaderGetter>,
        ILoquiObjectSetter<StarfieldModHeader>,
        IStarfieldModHeader
    {
        #region Ctor
        public StarfieldModHeader()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public StarfieldModHeader.HeaderFlag Flags { get; set; } = default(StarfieldModHeader.HeaderFlag);
        #endregion
        #region FormID
        public UInt32 FormID { get; set; } = default(UInt32);
        #endregion
        #region Version
        public Int32 Version { get; set; } = default(Int32);
        #endregion
        #region FormVersion
        public UInt16 FormVersion { get; set; } = default(UInt16);
        #endregion
        #region Version2
        public UInt16 Version2 { get; set; } = default(UInt16);
        #endregion
        #region Stats
        public ModStats Stats { get; set; } = new ModStats();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModStatsGetter IStarfieldModHeaderGetter.Stats => Stats;
        #endregion
        #region TypeOffsets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TypeOffsets;
        public MemorySlice<Byte>? TypeOffsets
        {
            get => this._TypeOffsets;
            set => this._TypeOffsets = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IStarfieldModHeaderGetter.TypeOffsets => this.TypeOffsets;
        #endregion
        #region Deleted
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Deleted;
        public MemorySlice<Byte>? Deleted
        {
            get => this._Deleted;
            set => this._Deleted = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IStarfieldModHeaderGetter.Deleted => this.Deleted;
        #endregion
        #region Author
        public String? Author { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IStarfieldModHeaderGetter.Author => this.Author;
        #endregion
        #region Description
        public String? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IStarfieldModHeaderGetter.Description => this.Description;
        #endregion
        #region MasterReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MasterReference> _MasterReferences = new ExtendedList<MasterReference>();
        public ExtendedList<MasterReference> MasterReferences
        {
            get => this._MasterReferences;
            init => this._MasterReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IStarfieldModHeaderGetter.MasterReferences => _MasterReferences;
        #endregion

        #endregion
        #region OverriddenForms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IStarfieldMajorRecordGetter>>? _OverriddenForms;
        public ExtendedList<IFormLinkGetter<IStarfieldMajorRecordGetter>>? OverriddenForms
        {
            get => this._OverriddenForms;
            set => this._OverriddenForms = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IStarfieldMajorRecordGetter>>? IStarfieldModHeaderGetter.OverriddenForms => _OverriddenForms;
        #endregion

        #endregion
        #region Screenshot
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Screenshot;
        public MemorySlice<Byte>? Screenshot
        {
            get => this._Screenshot;
            set => this._Screenshot = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IStarfieldModHeaderGetter.Screenshot => this.Screenshot;
        #endregion
        #region TransientTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TransientType> _TransientTypes = new ExtendedList<TransientType>();
        public ExtendedList<TransientType> TransientTypes
        {
            get => this._TransientTypes;
            init => this._TransientTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITransientTypeGetter> IStarfieldModHeaderGetter.TransientTypes => _TransientTypes;
        #endregion

        #endregion
        #region Branch
        public String? Branch { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IStarfieldModHeaderGetter.Branch => this.Branch;
        #endregion
        #region INTV
        public Int32? INTV { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IStarfieldModHeaderGetter.INTV => this.INTV;
        #endregion
        #region InteriorCellCount
        public Int32? InteriorCellCount { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IStarfieldModHeaderGetter.InteriorCellCount => this.InteriorCellCount;
        #endregion
        #region CHGL
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _CHGL;
        public MemorySlice<Byte>? CHGL
        {
            get => this._CHGL;
            set => this._CHGL = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IStarfieldModHeaderGetter.CHGL => this.CHGL;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarfieldModHeaderMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStarfieldModHeaderGetter rhs) return false;
            return ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarfieldModHeaderGetter? obj)
        {
            return ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.FormID = initialValue;
                this.Version = initialValue;
                this.FormVersion = initialValue;
                this.Version2 = initialValue;
                this.Stats = new MaskItem<TItem, ModStats.Mask<TItem>?>(initialValue, new ModStats.Mask<TItem>(initialValue));
                this.TypeOffsets = initialValue;
                this.Deleted = initialValue;
                this.Author = initialValue;
                this.Description = initialValue;
                this.MasterReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>());
                this.OverriddenForms = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Screenshot = initialValue;
                this.TransientTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TransientType.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TransientType.Mask<TItem>?>>());
                this.Branch = initialValue;
                this.INTV = initialValue;
                this.InteriorCellCount = initialValue;
                this.CHGL = initialValue;
            }

            public Mask(
                TItem Flags,
                TItem FormID,
                TItem Version,
                TItem FormVersion,
                TItem Version2,
                TItem Stats,
                TItem TypeOffsets,
                TItem Deleted,
                TItem Author,
                TItem Description,
                TItem MasterReferences,
                TItem OverriddenForms,
                TItem Screenshot,
                TItem TransientTypes,
                TItem Branch,
                TItem INTV,
                TItem InteriorCellCount,
                TItem CHGL)
            {
                this.Flags = Flags;
                this.FormID = FormID;
                this.Version = Version;
                this.FormVersion = FormVersion;
                this.Version2 = Version2;
                this.Stats = new MaskItem<TItem, ModStats.Mask<TItem>?>(Stats, new ModStats.Mask<TItem>(Stats));
                this.TypeOffsets = TypeOffsets;
                this.Deleted = Deleted;
                this.Author = Author;
                this.Description = Description;
                this.MasterReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>?>(MasterReferences, Enumerable.Empty<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>());
                this.OverriddenForms = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(OverriddenForms, Enumerable.Empty<(int Index, TItem Value)>());
                this.Screenshot = Screenshot;
                this.TransientTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TransientType.Mask<TItem>?>>?>(TransientTypes, Enumerable.Empty<MaskItemIndexed<TItem, TransientType.Mask<TItem>?>>());
                this.Branch = Branch;
                this.INTV = INTV;
                this.InteriorCellCount = InteriorCellCount;
                this.CHGL = CHGL;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem FormID;
            public TItem Version;
            public TItem FormVersion;
            public TItem Version2;
            public MaskItem<TItem, ModStats.Mask<TItem>?>? Stats { get; set; }
            public TItem TypeOffsets;
            public TItem Deleted;
            public TItem Author;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>?>? MasterReferences;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? OverriddenForms;
            public TItem Screenshot;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TransientType.Mask<TItem>?>>?>? TransientTypes;
            public TItem Branch;
            public TItem INTV;
            public TItem InteriorCellCount;
            public TItem CHGL;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FormID, rhs.FormID)) return false;
                if (!object.Equals(this.Version, rhs.Version)) return false;
                if (!object.Equals(this.FormVersion, rhs.FormVersion)) return false;
                if (!object.Equals(this.Version2, rhs.Version2)) return false;
                if (!object.Equals(this.Stats, rhs.Stats)) return false;
                if (!object.Equals(this.TypeOffsets, rhs.TypeOffsets)) return false;
                if (!object.Equals(this.Deleted, rhs.Deleted)) return false;
                if (!object.Equals(this.Author, rhs.Author)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.MasterReferences, rhs.MasterReferences)) return false;
                if (!object.Equals(this.OverriddenForms, rhs.OverriddenForms)) return false;
                if (!object.Equals(this.Screenshot, rhs.Screenshot)) return false;
                if (!object.Equals(this.TransientTypes, rhs.TransientTypes)) return false;
                if (!object.Equals(this.Branch, rhs.Branch)) return false;
                if (!object.Equals(this.INTV, rhs.INTV)) return false;
                if (!object.Equals(this.InteriorCellCount, rhs.InteriorCellCount)) return false;
                if (!object.Equals(this.CHGL, rhs.CHGL)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.FormID);
                hash.Add(this.Version);
                hash.Add(this.FormVersion);
                hash.Add(this.Version2);
                hash.Add(this.Stats);
                hash.Add(this.TypeOffsets);
                hash.Add(this.Deleted);
                hash.Add(this.Author);
                hash.Add(this.Description);
                hash.Add(this.MasterReferences);
                hash.Add(this.OverriddenForms);
                hash.Add(this.Screenshot);
                hash.Add(this.TransientTypes);
                hash.Add(this.Branch);
                hash.Add(this.INTV);
                hash.Add(this.InteriorCellCount);
                hash.Add(this.CHGL);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (!eval(this.FormID)) return false;
                if (!eval(this.Version)) return false;
                if (!eval(this.FormVersion)) return false;
                if (!eval(this.Version2)) return false;
                if (Stats != null)
                {
                    if (!eval(this.Stats.Overall)) return false;
                    if (this.Stats.Specific != null && !this.Stats.Specific.All(eval)) return false;
                }
                if (!eval(this.TypeOffsets)) return false;
                if (!eval(this.Deleted)) return false;
                if (!eval(this.Author)) return false;
                if (!eval(this.Description)) return false;
                if (this.MasterReferences != null)
                {
                    if (!eval(this.MasterReferences.Overall)) return false;
                    if (this.MasterReferences.Specific != null)
                    {
                        foreach (var item in this.MasterReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.OverriddenForms != null)
                {
                    if (!eval(this.OverriddenForms.Overall)) return false;
                    if (this.OverriddenForms.Specific != null)
                    {
                        foreach (var item in this.OverriddenForms.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Screenshot)) return false;
                if (this.TransientTypes != null)
                {
                    if (!eval(this.TransientTypes.Overall)) return false;
                    if (this.TransientTypes.Specific != null)
                    {
                        foreach (var item in this.TransientTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Branch)) return false;
                if (!eval(this.INTV)) return false;
                if (!eval(this.InteriorCellCount)) return false;
                if (!eval(this.CHGL)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (eval(this.FormID)) return true;
                if (eval(this.Version)) return true;
                if (eval(this.FormVersion)) return true;
                if (eval(this.Version2)) return true;
                if (Stats != null)
                {
                    if (eval(this.Stats.Overall)) return true;
                    if (this.Stats.Specific != null && this.Stats.Specific.Any(eval)) return true;
                }
                if (eval(this.TypeOffsets)) return true;
                if (eval(this.Deleted)) return true;
                if (eval(this.Author)) return true;
                if (eval(this.Description)) return true;
                if (this.MasterReferences != null)
                {
                    if (eval(this.MasterReferences.Overall)) return true;
                    if (this.MasterReferences.Specific != null)
                    {
                        foreach (var item in this.MasterReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.OverriddenForms != null)
                {
                    if (eval(this.OverriddenForms.Overall)) return true;
                    if (this.OverriddenForms.Specific != null)
                    {
                        foreach (var item in this.OverriddenForms.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Screenshot)) return true;
                if (this.TransientTypes != null)
                {
                    if (eval(this.TransientTypes.Overall)) return true;
                    if (this.TransientTypes.Specific != null)
                    {
                        foreach (var item in this.TransientTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Branch)) return true;
                if (eval(this.INTV)) return true;
                if (eval(this.InteriorCellCount)) return true;
                if (eval(this.CHGL)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new StarfieldModHeader.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                obj.FormID = eval(this.FormID);
                obj.Version = eval(this.Version);
                obj.FormVersion = eval(this.FormVersion);
                obj.Version2 = eval(this.Version2);
                obj.Stats = this.Stats == null ? null : new MaskItem<R, ModStats.Mask<R>?>(eval(this.Stats.Overall), this.Stats.Specific?.Translate(eval));
                obj.TypeOffsets = eval(this.TypeOffsets);
                obj.Deleted = eval(this.Deleted);
                obj.Author = eval(this.Author);
                obj.Description = eval(this.Description);
                if (MasterReferences != null)
                {
                    obj.MasterReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MasterReference.Mask<R>?>>?>(eval(this.MasterReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, MasterReference.Mask<R>?>>());
                    if (MasterReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MasterReference.Mask<R>?>>();
                        obj.MasterReferences.Specific = l;
                        foreach (var item in MasterReferences.Specific)
                        {
                            MaskItemIndexed<R, MasterReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MasterReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (OverriddenForms != null)
                {
                    obj.OverriddenForms = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.OverriddenForms.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (OverriddenForms.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.OverriddenForms.Specific = l;
                        foreach (var item in OverriddenForms.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Screenshot = eval(this.Screenshot);
                if (TransientTypes != null)
                {
                    obj.TransientTypes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TransientType.Mask<R>?>>?>(eval(this.TransientTypes.Overall), Enumerable.Empty<MaskItemIndexed<R, TransientType.Mask<R>?>>());
                    if (TransientTypes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TransientType.Mask<R>?>>();
                        obj.TransientTypes.Specific = l;
                        foreach (var item in TransientTypes.Specific)
                        {
                            MaskItemIndexed<R, TransientType.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TransientType.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Branch = eval(this.Branch);
                obj.INTV = eval(this.INTV);
                obj.InteriorCellCount = eval(this.InteriorCellCount);
                obj.CHGL = eval(this.CHGL);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(StarfieldModHeader.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, StarfieldModHeader.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(StarfieldModHeader.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FormID ?? true)
                    {
                        sb.AppendItem(FormID, "FormID");
                    }
                    if (printMask?.Version ?? true)
                    {
                        sb.AppendItem(Version, "Version");
                    }
                    if (printMask?.FormVersion ?? true)
                    {
                        sb.AppendItem(FormVersion, "FormVersion");
                    }
                    if (printMask?.Version2 ?? true)
                    {
                        sb.AppendItem(Version2, "Version2");
                    }
                    if (printMask?.Stats?.Overall ?? true)
                    {
                        Stats?.Print(sb);
                    }
                    if (printMask?.TypeOffsets ?? true)
                    {
                        sb.AppendItem(TypeOffsets, "TypeOffsets");
                    }
                    if (printMask?.Deleted ?? true)
                    {
                        sb.AppendItem(Deleted, "Deleted");
                    }
                    if (printMask?.Author ?? true)
                    {
                        sb.AppendItem(Author, "Author");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.MasterReferences?.Overall ?? true)
                        && MasterReferences is {} MasterReferencesItem)
                    {
                        sb.AppendLine("MasterReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MasterReferencesItem.Overall);
                            if (MasterReferencesItem.Specific != null)
                            {
                                foreach (var subItem in MasterReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.OverriddenForms?.Overall ?? true)
                        && OverriddenForms is {} OverriddenFormsItem)
                    {
                        sb.AppendLine("OverriddenForms =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(OverriddenFormsItem.Overall);
                            if (OverriddenFormsItem.Specific != null)
                            {
                                foreach (var subItem in OverriddenFormsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Screenshot ?? true)
                    {
                        sb.AppendItem(Screenshot, "Screenshot");
                    }
                    if ((printMask?.TransientTypes?.Overall ?? true)
                        && TransientTypes is {} TransientTypesItem)
                    {
                        sb.AppendLine("TransientTypes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TransientTypesItem.Overall);
                            if (TransientTypesItem.Specific != null)
                            {
                                foreach (var subItem in TransientTypesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Branch ?? true)
                    {
                        sb.AppendItem(Branch, "Branch");
                    }
                    if (printMask?.INTV ?? true)
                    {
                        sb.AppendItem(INTV, "INTV");
                    }
                    if (printMask?.InteriorCellCount ?? true)
                    {
                        sb.AppendItem(InteriorCellCount, "InteriorCellCount");
                    }
                    if (printMask?.CHGL ?? true)
                    {
                        sb.AppendItem(CHGL, "CHGL");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public Exception? FormID;
            public Exception? Version;
            public Exception? FormVersion;
            public Exception? Version2;
            public MaskItem<Exception?, ModStats.ErrorMask?>? Stats;
            public Exception? TypeOffsets;
            public Exception? Deleted;
            public Exception? Author;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>? MasterReferences;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? OverriddenForms;
            public Exception? Screenshot;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TransientType.ErrorMask?>>?>? TransientTypes;
            public Exception? Branch;
            public Exception? INTV;
            public Exception? InteriorCellCount;
            public Exception? CHGL;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                StarfieldModHeader_FieldIndex enu = (StarfieldModHeader_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldModHeader_FieldIndex.Flags:
                        return Flags;
                    case StarfieldModHeader_FieldIndex.FormID:
                        return FormID;
                    case StarfieldModHeader_FieldIndex.Version:
                        return Version;
                    case StarfieldModHeader_FieldIndex.FormVersion:
                        return FormVersion;
                    case StarfieldModHeader_FieldIndex.Version2:
                        return Version2;
                    case StarfieldModHeader_FieldIndex.Stats:
                        return Stats;
                    case StarfieldModHeader_FieldIndex.TypeOffsets:
                        return TypeOffsets;
                    case StarfieldModHeader_FieldIndex.Deleted:
                        return Deleted;
                    case StarfieldModHeader_FieldIndex.Author:
                        return Author;
                    case StarfieldModHeader_FieldIndex.Description:
                        return Description;
                    case StarfieldModHeader_FieldIndex.MasterReferences:
                        return MasterReferences;
                    case StarfieldModHeader_FieldIndex.OverriddenForms:
                        return OverriddenForms;
                    case StarfieldModHeader_FieldIndex.Screenshot:
                        return Screenshot;
                    case StarfieldModHeader_FieldIndex.TransientTypes:
                        return TransientTypes;
                    case StarfieldModHeader_FieldIndex.Branch:
                        return Branch;
                    case StarfieldModHeader_FieldIndex.INTV:
                        return INTV;
                    case StarfieldModHeader_FieldIndex.InteriorCellCount:
                        return InteriorCellCount;
                    case StarfieldModHeader_FieldIndex.CHGL:
                        return CHGL;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                StarfieldModHeader_FieldIndex enu = (StarfieldModHeader_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldModHeader_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.FormID:
                        this.FormID = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.Version:
                        this.Version = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.FormVersion:
                        this.FormVersion = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.Version2:
                        this.Version2 = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.Stats:
                        this.Stats = new MaskItem<Exception?, ModStats.ErrorMask?>(ex, null);
                        break;
                    case StarfieldModHeader_FieldIndex.TypeOffsets:
                        this.TypeOffsets = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.Deleted:
                        this.Deleted = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.Author:
                        this.Author = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.MasterReferences:
                        this.MasterReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>(ex, null);
                        break;
                    case StarfieldModHeader_FieldIndex.OverriddenForms:
                        this.OverriddenForms = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case StarfieldModHeader_FieldIndex.Screenshot:
                        this.Screenshot = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.TransientTypes:
                        this.TransientTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TransientType.ErrorMask?>>?>(ex, null);
                        break;
                    case StarfieldModHeader_FieldIndex.Branch:
                        this.Branch = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.INTV:
                        this.INTV = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.InteriorCellCount:
                        this.InteriorCellCount = ex;
                        break;
                    case StarfieldModHeader_FieldIndex.CHGL:
                        this.CHGL = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                StarfieldModHeader_FieldIndex enu = (StarfieldModHeader_FieldIndex)index;
                switch (enu)
                {
                    case StarfieldModHeader_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.FormID:
                        this.FormID = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.Version:
                        this.Version = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.FormVersion:
                        this.FormVersion = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.Version2:
                        this.Version2 = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.Stats:
                        this.Stats = (MaskItem<Exception?, ModStats.ErrorMask?>?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.TypeOffsets:
                        this.TypeOffsets = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.Deleted:
                        this.Deleted = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.Author:
                        this.Author = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.MasterReferences:
                        this.MasterReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.OverriddenForms:
                        this.OverriddenForms = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.Screenshot:
                        this.Screenshot = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.TransientTypes:
                        this.TransientTypes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TransientType.ErrorMask?>>?>)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.Branch:
                        this.Branch = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.INTV:
                        this.INTV = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.InteriorCellCount:
                        this.InteriorCellCount = (Exception?)obj;
                        break;
                    case StarfieldModHeader_FieldIndex.CHGL:
                        this.CHGL = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (FormID != null) return true;
                if (Version != null) return true;
                if (FormVersion != null) return true;
                if (Version2 != null) return true;
                if (Stats != null) return true;
                if (TypeOffsets != null) return true;
                if (Deleted != null) return true;
                if (Author != null) return true;
                if (Description != null) return true;
                if (MasterReferences != null) return true;
                if (OverriddenForms != null) return true;
                if (Screenshot != null) return true;
                if (TransientTypes != null) return true;
                if (Branch != null) return true;
                if (INTV != null) return true;
                if (InteriorCellCount != null) return true;
                if (CHGL != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(FormID, "FormID");
                }
                {
                    sb.AppendItem(Version, "Version");
                }
                {
                    sb.AppendItem(FormVersion, "FormVersion");
                }
                {
                    sb.AppendItem(Version2, "Version2");
                }
                Stats?.Print(sb);
                {
                    sb.AppendItem(TypeOffsets, "TypeOffsets");
                }
                {
                    sb.AppendItem(Deleted, "Deleted");
                }
                {
                    sb.AppendItem(Author, "Author");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (MasterReferences is {} MasterReferencesItem)
                {
                    sb.AppendLine("MasterReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MasterReferencesItem.Overall);
                        if (MasterReferencesItem.Specific != null)
                        {
                            foreach (var subItem in MasterReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (OverriddenForms is {} OverriddenFormsItem)
                {
                    sb.AppendLine("OverriddenForms =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(OverriddenFormsItem.Overall);
                        if (OverriddenFormsItem.Specific != null)
                        {
                            foreach (var subItem in OverriddenFormsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Screenshot, "Screenshot");
                }
                if (TransientTypes is {} TransientTypesItem)
                {
                    sb.AppendLine("TransientTypes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TransientTypesItem.Overall);
                        if (TransientTypesItem.Specific != null)
                        {
                            foreach (var subItem in TransientTypesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Branch, "Branch");
                }
                {
                    sb.AppendItem(INTV, "INTV");
                }
                {
                    sb.AppendItem(InteriorCellCount, "InteriorCellCount");
                }
                {
                    sb.AppendItem(CHGL, "CHGL");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FormID = this.FormID.Combine(rhs.FormID);
                ret.Version = this.Version.Combine(rhs.Version);
                ret.FormVersion = this.FormVersion.Combine(rhs.FormVersion);
                ret.Version2 = this.Version2.Combine(rhs.Version2);
                ret.Stats = this.Stats.Combine(rhs.Stats, (l, r) => l.Combine(r));
                ret.TypeOffsets = this.TypeOffsets.Combine(rhs.TypeOffsets);
                ret.Deleted = this.Deleted.Combine(rhs.Deleted);
                ret.Author = this.Author.Combine(rhs.Author);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.MasterReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MasterReferences?.Overall, rhs.MasterReferences?.Overall), Noggog.ExceptionExt.Combine(this.MasterReferences?.Specific, rhs.MasterReferences?.Specific));
                ret.OverriddenForms = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.OverriddenForms?.Overall, rhs.OverriddenForms?.Overall), Noggog.ExceptionExt.Combine(this.OverriddenForms?.Specific, rhs.OverriddenForms?.Specific));
                ret.Screenshot = this.Screenshot.Combine(rhs.Screenshot);
                ret.TransientTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TransientType.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.TransientTypes?.Overall, rhs.TransientTypes?.Overall), Noggog.ExceptionExt.Combine(this.TransientTypes?.Specific, rhs.TransientTypes?.Specific));
                ret.Branch = this.Branch.Combine(rhs.Branch);
                ret.INTV = this.INTV.Combine(rhs.INTV);
                ret.InteriorCellCount = this.InteriorCellCount.Combine(rhs.InteriorCellCount);
                ret.CHGL = this.CHGL.Combine(rhs.CHGL);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Flags;
            public bool FormID;
            public bool Version;
            public bool FormVersion;
            public bool Version2;
            public ModStats.TranslationMask? Stats;
            public bool TypeOffsets;
            public bool Deleted;
            public bool Author;
            public bool Description;
            public MasterReference.TranslationMask? MasterReferences;
            public bool OverriddenForms;
            public bool Screenshot;
            public TransientType.TranslationMask? TransientTypes;
            public bool Branch;
            public bool INTV;
            public bool InteriorCellCount;
            public bool CHGL;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Flags = defaultOn;
                this.FormID = defaultOn;
                this.Version = defaultOn;
                this.FormVersion = defaultOn;
                this.Version2 = defaultOn;
                this.TypeOffsets = defaultOn;
                this.Deleted = defaultOn;
                this.Author = defaultOn;
                this.Description = defaultOn;
                this.OverriddenForms = defaultOn;
                this.Screenshot = defaultOn;
                this.Branch = defaultOn;
                this.INTV = defaultOn;
                this.InteriorCellCount = defaultOn;
                this.CHGL = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((FormID, null));
                ret.Add((Version, null));
                ret.Add((FormVersion, null));
                ret.Add((Version2, null));
                ret.Add((Stats != null ? Stats.OnOverall : DefaultOn, Stats?.GetCrystal()));
                ret.Add((TypeOffsets, null));
                ret.Add((Deleted, null));
                ret.Add((Author, null));
                ret.Add((Description, null));
                ret.Add((MasterReferences == null ? DefaultOn : !MasterReferences.GetCrystal().CopyNothing, MasterReferences?.GetCrystal()));
                ret.Add((OverriddenForms, null));
                ret.Add((Screenshot, null));
                ret.Add((TransientTypes == null ? DefaultOn : !TransientTypes.GetCrystal().CopyNothing, TransientTypes?.GetCrystal()));
                ret.Add((Branch, null));
                ret.Add((INTV, null));
                ret.Add((InteriorCellCount, null));
                ret.Add((CHGL, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = StarfieldModHeader_Registration.TriggeringRecordType;
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StarfieldModHeaderCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => StarfieldModHeaderSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => StarfieldModHeaderBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StarfieldModHeaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static StarfieldModHeader CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new StarfieldModHeader();
            ((StarfieldModHeaderSetterCommon)((IStarfieldModHeaderGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out StarfieldModHeader item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((StarfieldModHeaderSetterCommon)((IStarfieldModHeaderGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static StarfieldModHeader GetNew()
        {
            return new StarfieldModHeader();
        }

    }
    #endregion

    #region Interface
    public partial interface IStarfieldModHeader :
        IFormLinkContainer,
        ILoquiObjectSetter<IStarfieldModHeader>,
        IStarfieldModHeaderGetter
    {
        new StarfieldModHeader.HeaderFlag Flags { get; set; }
        new UInt32 FormID { get; set; }
        new Int32 Version { get; set; }
        new UInt16 FormVersion { get; set; }
        new UInt16 Version2 { get; set; }
        new ModStats Stats { get; set; }
        new MemorySlice<Byte>? TypeOffsets { get; set; }
        new MemorySlice<Byte>? Deleted { get; set; }
        new String? Author { get; set; }
        new String? Description { get; set; }
        new ExtendedList<MasterReference> MasterReferences { get; }
        new ExtendedList<IFormLinkGetter<IStarfieldMajorRecordGetter>>? OverriddenForms { get; set; }
        new MemorySlice<Byte>? Screenshot { get; set; }
        new ExtendedList<TransientType> TransientTypes { get; }
        new String? Branch { get; set; }
        new Int32? INTV { get; set; }
        new Int32? InteriorCellCount { get; set; }
        new MemorySlice<Byte>? CHGL { get; set; }
    }

    public partial interface IStarfieldModHeaderGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IStarfieldModHeaderGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => StarfieldModHeader_Registration.Instance;
        StarfieldModHeader.HeaderFlag Flags { get; }
        UInt32 FormID { get; }
        Int32 Version { get; }
        UInt16 FormVersion { get; }
        UInt16 Version2 { get; }
        IModStatsGetter Stats { get; }
        ReadOnlyMemorySlice<Byte>? TypeOffsets { get; }
        ReadOnlyMemorySlice<Byte>? Deleted { get; }
        String? Author { get; }
        String? Description { get; }
        IReadOnlyList<IMasterReferenceGetter> MasterReferences { get; }
        IReadOnlyList<IFormLinkGetter<IStarfieldMajorRecordGetter>>? OverriddenForms { get; }
        ReadOnlyMemorySlice<Byte>? Screenshot { get; }
        IReadOnlyList<ITransientTypeGetter> TransientTypes { get; }
        String? Branch { get; }
        Int32? INTV { get; }
        Int32? InteriorCellCount { get; }
        ReadOnlyMemorySlice<Byte>? CHGL { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class StarfieldModHeaderMixIn
    {
        public static void Clear(this IStarfieldModHeader item)
        {
            ((StarfieldModHeaderSetterCommon)((IStarfieldModHeaderGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static StarfieldModHeader.Mask<bool> GetEqualsMask(
            this IStarfieldModHeaderGetter item,
            IStarfieldModHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IStarfieldModHeaderGetter item,
            string? name = null,
            StarfieldModHeader.Mask<bool>? printMask = null)
        {
            return ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IStarfieldModHeaderGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StarfieldModHeader.Mask<bool>? printMask = null)
        {
            ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IStarfieldModHeaderGetter item,
            IStarfieldModHeaderGetter rhs,
            StarfieldModHeader.TranslationMask? equalsMask = null)
        {
            return ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IStarfieldModHeader lhs,
            IStarfieldModHeaderGetter rhs)
        {
            ((StarfieldModHeaderSetterTranslationCommon)((IStarfieldModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStarfieldModHeader lhs,
            IStarfieldModHeaderGetter rhs,
            StarfieldModHeader.TranslationMask? copyMask = null)
        {
            ((StarfieldModHeaderSetterTranslationCommon)((IStarfieldModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IStarfieldModHeader lhs,
            IStarfieldModHeaderGetter rhs,
            out StarfieldModHeader.ErrorMask errorMask,
            StarfieldModHeader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((StarfieldModHeaderSetterTranslationCommon)((IStarfieldModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = StarfieldModHeader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IStarfieldModHeader lhs,
            IStarfieldModHeaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((StarfieldModHeaderSetterTranslationCommon)((IStarfieldModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static StarfieldModHeader DeepCopy(
            this IStarfieldModHeaderGetter item,
            StarfieldModHeader.TranslationMask? copyMask = null)
        {
            return ((StarfieldModHeaderSetterTranslationCommon)((IStarfieldModHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static StarfieldModHeader DeepCopy(
            this IStarfieldModHeaderGetter item,
            out StarfieldModHeader.ErrorMask errorMask,
            StarfieldModHeader.TranslationMask? copyMask = null)
        {
            return ((StarfieldModHeaderSetterTranslationCommon)((IStarfieldModHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static StarfieldModHeader DeepCopy(
            this IStarfieldModHeaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((StarfieldModHeaderSetterTranslationCommon)((IStarfieldModHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IStarfieldModHeader item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((StarfieldModHeaderSetterCommon)((IStarfieldModHeaderGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum StarfieldModHeader_FieldIndex
    {
        Flags = 0,
        FormID = 1,
        Version = 2,
        FormVersion = 3,
        Version2 = 4,
        Stats = 5,
        TypeOffsets = 6,
        Deleted = 7,
        Author = 8,
        Description = 9,
        MasterReferences = 10,
        OverriddenForms = 11,
        Screenshot = 12,
        TransientTypes = 13,
        Branch = 14,
        INTV = 15,
        InteriorCellCount = 16,
        CHGL = 17,
    }
    #endregion

    #region Registration
    internal partial class StarfieldModHeader_Registration : ILoquiRegistration
    {
        public static readonly StarfieldModHeader_Registration Instance = new StarfieldModHeader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 18;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(StarfieldModHeader.Mask<>);

        public static readonly Type ErrorMaskType = typeof(StarfieldModHeader.ErrorMask);

        public static readonly Type ClassType = typeof(StarfieldModHeader);

        public static readonly Type GetterType = typeof(IStarfieldModHeaderGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IStarfieldModHeader);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.StarfieldModHeader";

        public const string Name = "StarfieldModHeader";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TES4);
            var all = RecordCollection.Factory(
                RecordTypes.TES4,
                RecordTypes.HEDR,
                RecordTypes.OFST,
                RecordTypes.DELE,
                RecordTypes.CNAM,
                RecordTypes.SNAM,
                RecordTypes.MAST,
                RecordTypes.DATA,
                RecordTypes.ONAM,
                RecordTypes.XXXX,
                RecordTypes.SCRN,
                RecordTypes.TNAM,
                RecordTypes.BNAM,
                RecordTypes.INTV,
                RecordTypes.INCC,
                RecordTypes.CHGL);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(StarfieldModHeaderBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class StarfieldModHeaderSetterCommon
    {
        public static readonly StarfieldModHeaderSetterCommon Instance = new StarfieldModHeaderSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IStarfieldModHeader item)
        {
            ClearPartial();
            item.Flags = default(StarfieldModHeader.HeaderFlag);
            item.FormID = default(UInt32);
            item.Version = default(Int32);
            item.FormVersion = default(UInt16);
            item.Version2 = default(UInt16);
            item.Stats.Clear();
            item.TypeOffsets = default;
            item.Deleted = default;
            item.Author = default;
            item.Description = default;
            item.MasterReferences.Clear();
            item.OverriddenForms = null;
            item.Screenshot = default;
            item.TransientTypes.Clear();
            item.Branch = default;
            item.INTV = default;
            item.InteriorCellCount = default;
            item.CHGL = default;
        }
        
        #region Mutagen
        public void RemapLinks(IStarfieldModHeader obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.OverriddenForms?.RemapLinks(mapping);
            obj.TransientTypes.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IStarfieldModHeader item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseRecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.TES4)));
            PluginUtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: StarfieldModHeaderBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: StarfieldModHeaderBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class StarfieldModHeaderCommon
    {
        public static readonly StarfieldModHeaderCommon Instance = new StarfieldModHeaderCommon();

        public StarfieldModHeader.Mask<bool> GetEqualsMask(
            IStarfieldModHeaderGetter item,
            IStarfieldModHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new StarfieldModHeader.Mask<bool>(false);
            ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IStarfieldModHeaderGetter item,
            IStarfieldModHeaderGetter rhs,
            StarfieldModHeader.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Flags = item.Flags == rhs.Flags;
            ret.FormID = item.FormID == rhs.FormID;
            ret.Version = item.Version == rhs.Version;
            ret.FormVersion = item.FormVersion == rhs.FormVersion;
            ret.Version2 = item.Version2 == rhs.Version2;
            ret.Stats = MaskItemExt.Factory(item.Stats.GetEqualsMask(rhs.Stats, include), include);
            ret.TypeOffsets = MemorySliceExt.SequenceEqual(item.TypeOffsets, rhs.TypeOffsets);
            ret.Deleted = MemorySliceExt.SequenceEqual(item.Deleted, rhs.Deleted);
            ret.Author = string.Equals(item.Author, rhs.Author);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.MasterReferences = item.MasterReferences.CollectionEqualsHelper(
                rhs.MasterReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.OverriddenForms = item.OverriddenForms.CollectionEqualsHelper(
                rhs.OverriddenForms,
                (l, r) => object.Equals(l, r),
                include);
            ret.Screenshot = MemorySliceExt.SequenceEqual(item.Screenshot, rhs.Screenshot);
            ret.TransientTypes = item.TransientTypes.CollectionEqualsHelper(
                rhs.TransientTypes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Branch = string.Equals(item.Branch, rhs.Branch);
            ret.INTV = item.INTV == rhs.INTV;
            ret.InteriorCellCount = item.InteriorCellCount == rhs.InteriorCellCount;
            ret.CHGL = MemorySliceExt.SequenceEqual(item.CHGL, rhs.CHGL);
        }
        
        public string Print(
            IStarfieldModHeaderGetter item,
            string? name = null,
            StarfieldModHeader.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IStarfieldModHeaderGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            StarfieldModHeader.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"StarfieldModHeader =>");
            }
            else
            {
                sb.AppendLine($"{name} (StarfieldModHeader) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IStarfieldModHeaderGetter item,
            StructuredStringBuilder sb,
            StarfieldModHeader.Mask<bool>? printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.FormID ?? true)
            {
                sb.AppendItem(item.FormID, "FormID");
            }
            if (printMask?.Version ?? true)
            {
                sb.AppendItem(item.Version, "Version");
            }
            if (printMask?.FormVersion ?? true)
            {
                sb.AppendItem(item.FormVersion, "FormVersion");
            }
            if (printMask?.Version2 ?? true)
            {
                sb.AppendItem(item.Version2, "Version2");
            }
            if (printMask?.Stats?.Overall ?? true)
            {
                item.Stats?.Print(sb, "Stats");
            }
            if ((printMask?.TypeOffsets ?? true)
                && item.TypeOffsets is {} TypeOffsetsItem)
            {
                sb.AppendLine($"TypeOffsets => {SpanExt.ToHexString(TypeOffsetsItem)}");
            }
            if ((printMask?.Deleted ?? true)
                && item.Deleted is {} DeletedItem)
            {
                sb.AppendLine($"Deleted => {SpanExt.ToHexString(DeletedItem)}");
            }
            if ((printMask?.Author ?? true)
                && item.Author is {} AuthorItem)
            {
                sb.AppendItem(AuthorItem, "Author");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.MasterReferences?.Overall ?? true)
            {
                sb.AppendLine("MasterReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MasterReferences)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.OverriddenForms?.Overall ?? true)
                && item.OverriddenForms is {} OverriddenFormsItem)
            {
                sb.AppendLine("OverriddenForms =>");
                using (sb.Brace())
                {
                    foreach (var subItem in OverriddenFormsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Screenshot ?? true)
                && item.Screenshot is {} ScreenshotItem)
            {
                sb.AppendLine($"Screenshot => {SpanExt.ToHexString(ScreenshotItem)}");
            }
            if (printMask?.TransientTypes?.Overall ?? true)
            {
                sb.AppendLine("TransientTypes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TransientTypes)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Branch ?? true)
                && item.Branch is {} BranchItem)
            {
                sb.AppendItem(BranchItem, "Branch");
            }
            if ((printMask?.INTV ?? true)
                && item.INTV is {} INTVItem)
            {
                sb.AppendItem(INTVItem, "INTV");
            }
            if ((printMask?.InteriorCellCount ?? true)
                && item.InteriorCellCount is {} InteriorCellCountItem)
            {
                sb.AppendItem(InteriorCellCountItem, "InteriorCellCount");
            }
            if ((printMask?.CHGL ?? true)
                && item.CHGL is {} CHGLItem)
            {
                sb.AppendLine($"CHGL => {SpanExt.ToHexString(CHGLItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IStarfieldModHeaderGetter? lhs,
            IStarfieldModHeaderGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.FormID) ?? true))
            {
                if (lhs.FormID != rhs.FormID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Version) ?? true))
            {
                if (lhs.Version != rhs.Version) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.FormVersion) ?? true))
            {
                if (lhs.FormVersion != rhs.FormVersion) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Version2) ?? true))
            {
                if (lhs.Version2 != rhs.Version2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Stats) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Stats, rhs.Stats, out var lhsStats, out var rhsStats, out var isStatsEqual))
                {
                    if (!((ModStatsCommon)((IModStatsGetter)lhsStats).CommonInstance()!).Equals(lhsStats, rhsStats, equalsMask?.GetSubCrystal((int)StarfieldModHeader_FieldIndex.Stats))) return false;
                }
                else if (!isStatsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.TypeOffsets) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TypeOffsets, rhs.TypeOffsets)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Deleted) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.Deleted, rhs.Deleted)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Author) ?? true))
            {
                if (!string.Equals(lhs.Author, rhs.Author)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Description) ?? true))
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.MasterReferences) ?? true))
            {
                if (!lhs.MasterReferences.SequenceEqual(rhs.MasterReferences, (l, r) => ((MasterReferenceCommon)((IMasterReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)StarfieldModHeader_FieldIndex.MasterReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.OverriddenForms) ?? true))
            {
                if (!lhs.OverriddenForms.SequenceEqualNullable(rhs.OverriddenForms)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Screenshot) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.Screenshot, rhs.Screenshot)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.TransientTypes) ?? true))
            {
                if (!lhs.TransientTypes.SequenceEqual(rhs.TransientTypes, (l, r) => ((TransientTypeCommon)((ITransientTypeGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)StarfieldModHeader_FieldIndex.TransientTypes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Branch) ?? true))
            {
                if (!string.Equals(lhs.Branch, rhs.Branch)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.INTV) ?? true))
            {
                if (lhs.INTV != rhs.INTV) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.InteriorCellCount) ?? true))
            {
                if (lhs.InteriorCellCount != rhs.InteriorCellCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.CHGL) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.CHGL, rhs.CHGL)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IStarfieldModHeaderGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Flags);
            hash.Add(item.FormID);
            hash.Add(item.Version);
            hash.Add(item.FormVersion);
            hash.Add(item.Version2);
            hash.Add(item.Stats);
            if (item.TypeOffsets is {} TypeOffsetsItem)
            {
                hash.Add(TypeOffsetsItem);
            }
            if (item.Deleted is {} DeletedItem)
            {
                hash.Add(DeletedItem);
            }
            if (item.Author is {} Authoritem)
            {
                hash.Add(Authoritem);
            }
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.MasterReferences);
            hash.Add(item.OverriddenForms);
            if (item.Screenshot is {} ScreenshotItem)
            {
                hash.Add(ScreenshotItem);
            }
            hash.Add(item.TransientTypes);
            if (item.Branch is {} Branchitem)
            {
                hash.Add(Branchitem);
            }
            if (item.INTV is {} INTVitem)
            {
                hash.Add(INTVitem);
            }
            if (item.InteriorCellCount is {} InteriorCellCountitem)
            {
                hash.Add(InteriorCellCountitem);
            }
            if (item.CHGL is {} CHGLItem)
            {
                hash.Add(CHGLItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return StarfieldModHeader.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IStarfieldModHeaderGetter obj)
        {
            if (obj.OverriddenForms is {} OverriddenFormsItem)
            {
                foreach (var item in OverriddenFormsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.TransientTypes.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class StarfieldModHeaderSetterTranslationCommon
    {
        public static readonly StarfieldModHeaderSetterTranslationCommon Instance = new StarfieldModHeaderSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IStarfieldModHeader item,
            IStarfieldModHeaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.FormID) ?? true))
            {
                item.FormID = rhs.FormID;
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Version) ?? true))
            {
                item.Version = rhs.Version;
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.FormVersion) ?? true))
            {
                item.FormVersion = rhs.FormVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Version2) ?? true))
            {
                item.Version2 = rhs.Version2;
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Stats) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldModHeader_FieldIndex.Stats);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Stats) ?? true))
                    {
                        item.Stats = rhs.Stats.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)StarfieldModHeader_FieldIndex.Stats),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.TypeOffsets) ?? true))
            {
                if(rhs.TypeOffsets is {} TypeOffsetsrhs)
                {
                    item.TypeOffsets = TypeOffsetsrhs.ToArray();
                }
                else
                {
                    item.TypeOffsets = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Deleted) ?? true))
            {
                if(rhs.Deleted is {} Deletedrhs)
                {
                    item.Deleted = Deletedrhs.ToArray();
                }
                else
                {
                    item.Deleted = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Author) ?? true))
            {
                item.Author = rhs.Author;
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.MasterReferences) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldModHeader_FieldIndex.MasterReferences);
                try
                {
                    item.MasterReferences.SetTo(
                        rhs.MasterReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.OverriddenForms) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldModHeader_FieldIndex.OverriddenForms);
                try
                {
                    if ((rhs.OverriddenForms != null))
                    {
                        item.OverriddenForms = 
                            rhs.OverriddenForms
                                .Select(b => (IFormLinkGetter<IStarfieldMajorRecordGetter>)new FormLink<IStarfieldMajorRecordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IStarfieldMajorRecordGetter>>();
                    }
                    else
                    {
                        item.OverriddenForms = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Screenshot) ?? true))
            {
                if(rhs.Screenshot is {} Screenshotrhs)
                {
                    item.Screenshot = Screenshotrhs.ToArray();
                }
                else
                {
                    item.Screenshot = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.TransientTypes) ?? true))
            {
                errorMask?.PushIndex((int)StarfieldModHeader_FieldIndex.TransientTypes);
                try
                {
                    item.TransientTypes.SetTo(
                        rhs.TransientTypes
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.Branch) ?? true))
            {
                item.Branch = rhs.Branch;
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.INTV) ?? true))
            {
                item.INTV = rhs.INTV;
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.InteriorCellCount) ?? true))
            {
                item.InteriorCellCount = rhs.InteriorCellCount;
            }
            if ((copyMask?.GetShouldTranslate((int)StarfieldModHeader_FieldIndex.CHGL) ?? true))
            {
                if(rhs.CHGL is {} CHGLrhs)
                {
                    item.CHGL = CHGLrhs.ToArray();
                }
                else
                {
                    item.CHGL = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IStarfieldModHeader item,
            IStarfieldModHeaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public StarfieldModHeader DeepCopy(
            IStarfieldModHeaderGetter item,
            StarfieldModHeader.TranslationMask? copyMask = null)
        {
            StarfieldModHeader ret = (StarfieldModHeader)((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)item).CommonInstance()!).GetNew();
            ((StarfieldModHeaderSetterTranslationCommon)((IStarfieldModHeaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public StarfieldModHeader DeepCopy(
            IStarfieldModHeaderGetter item,
            out StarfieldModHeader.ErrorMask errorMask,
            StarfieldModHeader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            StarfieldModHeader ret = (StarfieldModHeader)((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)item).CommonInstance()!).GetNew();
            ((StarfieldModHeaderSetterTranslationCommon)((IStarfieldModHeaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = StarfieldModHeader.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public StarfieldModHeader DeepCopy(
            IStarfieldModHeaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            StarfieldModHeader ret = (StarfieldModHeader)((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)item).CommonInstance()!).GetNew();
            ((StarfieldModHeaderSetterTranslationCommon)((IStarfieldModHeaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class StarfieldModHeader
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StarfieldModHeader_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StarfieldModHeader_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StarfieldModHeaderCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return StarfieldModHeaderSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StarfieldModHeaderSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStarfieldModHeaderGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IStarfieldModHeaderGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IStarfieldModHeaderGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class StarfieldModHeaderBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly StarfieldModHeaderBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IStarfieldModHeaderGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<StarfieldModHeader.HeaderFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            writer.Write(item.FormID);
            writer.Write(item.Version);
            writer.Write(item.FormVersion);
            writer.Write(item.Version2);
        }

        public static void WriteRecordTypes(
            IStarfieldModHeaderGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            var StatsItem = item.Stats;
            ((ModStatsBinaryWriteTranslation)((IBinaryItem)StatsItem).BinaryWriteTranslator).Write(
                item: StatsItem,
                writer: writer,
                translationParams: translationParams);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TypeOffsets,
                header: translationParams.ConvertToCustom(RecordTypes.OFST));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Deleted,
                header: translationParams.ConvertToCustom(RecordTypes.DELE));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Author,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM),
                binaryType: StringBinaryType.NullTerminate);
            StarfieldModHeaderBinaryWriteTranslation.WriteBinaryMasterReferences(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IStarfieldMajorRecordGetter>>.Instance.Write(
                writer: writer,
                items: item.OverriddenForms,
                recordType: translationParams.ConvertToCustom(RecordTypes.ONAM),
                overflowRecord: RecordTypes.XXXX,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IStarfieldMajorRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Screenshot,
                header: translationParams.ConvertToCustom(RecordTypes.SCRN));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ITransientTypeGetter>.Instance.Write(
                writer: writer,
                items: item.TransientTypes,
                transl: (MutagenWriter subWriter, ITransientTypeGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((TransientTypeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Branch,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM),
                binaryType: StringBinaryType.NullTerminate);
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.INTV,
                header: translationParams.ConvertToCustom(RecordTypes.INTV));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.InteriorCellCount,
                header: translationParams.ConvertToCustom(RecordTypes.INCC));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CHGL,
                header: translationParams.ConvertToCustom(RecordTypes.CHGL));
        }

        public static partial void WriteBinaryMasterReferencesCustom(
            MutagenWriter writer,
            IStarfieldModHeaderGetter item);

        public static void WriteBinaryMasterReferences(
            MutagenWriter writer,
            IStarfieldModHeaderGetter item)
        {
            WriteBinaryMasterReferencesCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IStarfieldModHeaderGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.TES4)))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IStarfieldModHeaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class StarfieldModHeaderBinaryCreateTranslation
    {
        public static readonly StarfieldModHeaderBinaryCreateTranslation Instance = new StarfieldModHeaderBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IStarfieldModHeader item,
            MutagenFrame frame)
        {
            item.Flags = EnumBinaryTranslation<StarfieldModHeader.HeaderFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.FormID = frame.ReadUInt32();
            item.Version = frame.ReadInt32();
            item.FormVersion = frame.ReadUInt16();
            item.Version2 = frame.ReadUInt16();
        }

        public static ParseResult FillBinaryRecordTypes(
            IStarfieldModHeader item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.HEDR:
                {
                    item.Stats = Mutagen.Bethesda.Starfield.ModStats.CreateFromBinary(frame: frame);
                    return (int)StarfieldModHeader_FieldIndex.Stats;
                }
                case RecordTypeInts.OFST:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TypeOffsets = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)StarfieldModHeader_FieldIndex.TypeOffsets;
                }
                case RecordTypeInts.DELE:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Deleted = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)StarfieldModHeader_FieldIndex.Deleted;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Author = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)StarfieldModHeader_FieldIndex.Author;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)StarfieldModHeader_FieldIndex.Description;
                }
                case RecordTypeInts.MAST:
                {
                    StarfieldModHeaderBinaryCreateTranslation.FillBinaryMasterReferencesCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)StarfieldModHeader_FieldIndex.MasterReferences;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OverriddenForms = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IStarfieldMajorRecordGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IStarfieldMajorRecordGetter>>();
                    return (int)StarfieldModHeader_FieldIndex.OverriddenForms;
                }
                case RecordTypeInts.SCRN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Screenshot = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)StarfieldModHeader_FieldIndex.Screenshot;
                }
                case RecordTypeInts.TNAM:
                {
                    item.TransientTypes.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<TransientType>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: TransientType_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: TransientType.TryCreateFromBinary));
                    return (int)StarfieldModHeader_FieldIndex.TransientTypes;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Branch = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)StarfieldModHeader_FieldIndex.Branch;
                }
                case RecordTypeInts.INTV:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.INTV = frame.ReadInt32();
                    return (int)StarfieldModHeader_FieldIndex.INTV;
                }
                case RecordTypeInts.INCC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InteriorCellCount = frame.ReadInt32();
                    return (int)StarfieldModHeader_FieldIndex.InteriorCellCount;
                }
                case RecordTypeInts.CHGL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CHGL = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)StarfieldModHeader_FieldIndex.CHGL;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    frame.Position += contentLength + frame.MetaData.Constants.SubConstants.HeaderLength;
                    return default(int?);
            }
        }

        public static partial void FillBinaryMasterReferencesCustom(
            MutagenFrame frame,
            IStarfieldModHeader item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class StarfieldModHeaderBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IStarfieldModHeaderGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StarfieldModHeaderBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class StarfieldModHeaderBinaryOverlay :
        PluginBinaryOverlay,
        IStarfieldModHeaderGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => StarfieldModHeader_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => StarfieldModHeader_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => StarfieldModHeaderCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => StarfieldModHeaderSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IStarfieldModHeaderGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IStarfieldModHeaderGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IStarfieldModHeaderGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => StarfieldModHeaderCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => StarfieldModHeaderBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((StarfieldModHeaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public StarfieldModHeader.HeaderFlag Flags => (StarfieldModHeader.HeaderFlag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x0, 0x4));
        public UInt32 FormID => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x4, 0x4));
        public Int32 Version => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x8, 0x4));
        public UInt16 FormVersion => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0xC, 0x2));
        public UInt16 Version2 => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0xE, 0x2));
        #region Stats
        private RangeInt32? _StatsLocation;
        private IModStatsGetter? _Stats => _StatsLocation.HasValue ? ModStatsBinaryOverlay.ModStatsFactory(_recordData.Slice(_StatsLocation!.Value.Min), _package) : default;
        public IModStatsGetter Stats => _Stats ?? new ModStats();
        #endregion
        #region TypeOffsets
        private int? _TypeOffsetsLocation;
        public ReadOnlyMemorySlice<Byte>? TypeOffsets => _TypeOffsetsLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TypeOffsetsLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Deleted
        private int? _DeletedLocation;
        public ReadOnlyMemorySlice<Byte>? Deleted => _DeletedLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DeletedLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Author
        private int? _AuthorLocation;
        public String? Author => _AuthorLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AuthorLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IMasterReferenceGetter> MasterReferences { get; private set; } = [];
        public IReadOnlyList<IFormLinkGetter<IStarfieldMajorRecordGetter>>? OverriddenForms { get; private set; }
        #region Screenshot
        private int? _ScreenshotLocation;
        public ReadOnlyMemorySlice<Byte>? Screenshot => _ScreenshotLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScreenshotLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<ITransientTypeGetter> TransientTypes { get; private set; } = [];
        #region Branch
        private int? _BranchLocation;
        public String? Branch => _BranchLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BranchLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region INTV
        private int? _INTVLocation;
        public Int32? INTV => _INTVLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _INTVLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region InteriorCellCount
        private int? _InteriorCellCountLocation;
        public Int32? InteriorCellCount => _InteriorCellCountLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _InteriorCellCountLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region CHGL
        private int? _CHGLLocation;
        public ReadOnlyMemorySlice<Byte>? CHGL => _CHGLLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CHGLLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected StarfieldModHeaderBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IStarfieldModHeaderGetter StarfieldModHeaderFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new StarfieldModHeaderBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IStarfieldModHeaderGetter StarfieldModHeaderFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return StarfieldModHeaderFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.HEDR:
                {
                    _StatsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)StarfieldModHeader_FieldIndex.Stats;
                }
                case RecordTypeInts.OFST:
                {
                    _TypeOffsetsLocation = (stream.Position - offset);
                    return (int)StarfieldModHeader_FieldIndex.TypeOffsets;
                }
                case RecordTypeInts.DELE:
                {
                    _DeletedLocation = (stream.Position - offset);
                    return (int)StarfieldModHeader_FieldIndex.Deleted;
                }
                case RecordTypeInts.CNAM:
                {
                    _AuthorLocation = (stream.Position - offset);
                    return (int)StarfieldModHeader_FieldIndex.Author;
                }
                case RecordTypeInts.SNAM:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)StarfieldModHeader_FieldIndex.Description;
                }
                case RecordTypeInts.MAST:
                {
                    this.MasterReferences = this.ParseRepeatedTypelessSubrecord<IMasterReferenceGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: MasterReference_Registration.TriggerSpecs,
                        factory: MasterReferenceBinaryOverlay.MasterReferenceFactory);
                    return (int)StarfieldModHeader_FieldIndex.MasterReferences;
                }
                case RecordTypeInts.ONAM:
                {
                    this.OverriddenForms = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IStarfieldMajorRecordGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IStarfieldMajorRecordGetter>(p, s));
                    return (int)StarfieldModHeader_FieldIndex.OverriddenForms;
                }
                case RecordTypeInts.SCRN:
                {
                    _ScreenshotLocation = (stream.Position - offset);
                    return (int)StarfieldModHeader_FieldIndex.Screenshot;
                }
                case RecordTypeInts.TNAM:
                {
                    this.TransientTypes = BinaryOverlayList.FactoryByArray<ITransientTypeGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => TransientTypeBinaryOverlay.TransientTypeFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: TransientType_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)StarfieldModHeader_FieldIndex.TransientTypes;
                }
                case RecordTypeInts.BNAM:
                {
                    _BranchLocation = (stream.Position - offset);
                    return (int)StarfieldModHeader_FieldIndex.Branch;
                }
                case RecordTypeInts.INTV:
                {
                    _INTVLocation = (stream.Position - offset);
                    return (int)StarfieldModHeader_FieldIndex.INTV;
                }
                case RecordTypeInts.INCC:
                {
                    _InteriorCellCountLocation = (stream.Position - offset);
                    return (int)StarfieldModHeader_FieldIndex.InteriorCellCount;
                }
                case RecordTypeInts.CHGL:
                {
                    _CHGLLocation = (stream.Position - offset);
                    return (int)StarfieldModHeader_FieldIndex.CHGL;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            StarfieldModHeaderMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IStarfieldModHeaderGetter rhs) return false;
            return ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IStarfieldModHeaderGetter? obj)
        {
            return ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((StarfieldModHeaderCommon)((IStarfieldModHeaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

