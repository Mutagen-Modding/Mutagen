/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Starfield.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Starfield.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Starfield.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Starfield
{
    #region Class
    public partial class GameplayOptionDataRange :
        IEquatable<IGameplayOptionDataRangeGetter>,
        IGameplayOptionDataRange,
        ILoquiObjectSetter<GameplayOptionDataRange>
    {
        #region Ctor
        public GameplayOptionDataRange()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Min
        public Single Min { get; set; } = default(Single);
        #endregion
        #region Max
        public Single Max { get; set; } = default(Single);
        #endregion
        #region Step
        public Single Step { get; set; } = default(Single);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GameplayOptionDataRangeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGameplayOptionDataRangeGetter rhs) return false;
            return ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGameplayOptionDataRangeGetter? obj)
        {
            return ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Min = initialValue;
                this.Max = initialValue;
                this.Step = initialValue;
            }

            public Mask(
                TItem Min,
                TItem Max,
                TItem Step)
            {
                this.Min = Min;
                this.Max = Max;
                this.Step = Step;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Min;
            public TItem Max;
            public TItem Step;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Min, rhs.Min)) return false;
                if (!object.Equals(this.Max, rhs.Max)) return false;
                if (!object.Equals(this.Step, rhs.Step)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Min);
                hash.Add(this.Max);
                hash.Add(this.Step);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Min)) return false;
                if (!eval(this.Max)) return false;
                if (!eval(this.Step)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Min)) return true;
                if (eval(this.Max)) return true;
                if (eval(this.Step)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new GameplayOptionDataRange.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Min = eval(this.Min);
                obj.Max = eval(this.Max);
                obj.Step = eval(this.Step);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(GameplayOptionDataRange.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, GameplayOptionDataRange.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(GameplayOptionDataRange.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Min ?? true)
                    {
                        sb.AppendItem(Min, "Min");
                    }
                    if (printMask?.Max ?? true)
                    {
                        sb.AppendItem(Max, "Max");
                    }
                    if (printMask?.Step ?? true)
                    {
                        sb.AppendItem(Step, "Step");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Min;
            public Exception? Max;
            public Exception? Step;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                GameplayOptionDataRange_FieldIndex enu = (GameplayOptionDataRange_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptionDataRange_FieldIndex.Min:
                        return Min;
                    case GameplayOptionDataRange_FieldIndex.Max:
                        return Max;
                    case GameplayOptionDataRange_FieldIndex.Step:
                        return Step;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                GameplayOptionDataRange_FieldIndex enu = (GameplayOptionDataRange_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptionDataRange_FieldIndex.Min:
                        this.Min = ex;
                        break;
                    case GameplayOptionDataRange_FieldIndex.Max:
                        this.Max = ex;
                        break;
                    case GameplayOptionDataRange_FieldIndex.Step:
                        this.Step = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                GameplayOptionDataRange_FieldIndex enu = (GameplayOptionDataRange_FieldIndex)index;
                switch (enu)
                {
                    case GameplayOptionDataRange_FieldIndex.Min:
                        this.Min = (Exception?)obj;
                        break;
                    case GameplayOptionDataRange_FieldIndex.Max:
                        this.Max = (Exception?)obj;
                        break;
                    case GameplayOptionDataRange_FieldIndex.Step:
                        this.Step = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Min != null) return true;
                if (Max != null) return true;
                if (Step != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Min, "Min");
                }
                {
                    sb.AppendItem(Max, "Max");
                }
                {
                    sb.AppendItem(Step, "Step");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Min = this.Min.Combine(rhs.Min);
                ret.Max = this.Max.Combine(rhs.Max);
                ret.Step = this.Step.Combine(rhs.Step);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Min;
            public bool Max;
            public bool Step;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Min = defaultOn;
                this.Max = defaultOn;
                this.Step = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Min, null));
                ret.Add((Max, null));
                ret.Add((Step, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GameplayOptionDataRangeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GameplayOptionDataRangeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static GameplayOptionDataRange CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new GameplayOptionDataRange();
            ((GameplayOptionDataRangeSetterCommon)((IGameplayOptionDataRangeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out GameplayOptionDataRange item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((GameplayOptionDataRangeSetterCommon)((IGameplayOptionDataRangeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static GameplayOptionDataRange GetNew()
        {
            return new GameplayOptionDataRange();
        }

    }
    #endregion

    #region Interface
    public partial interface IGameplayOptionDataRange :
        IGameplayOptionDataRangeGetter,
        ILoquiObjectSetter<IGameplayOptionDataRange>
    {
        new Single Min { get; set; }
        new Single Max { get; set; }
        new Single Step { get; set; }
    }

    public partial interface IGameplayOptionDataRangeGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IGameplayOptionDataRangeGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => GameplayOptionDataRange_Registration.Instance;
        Single Min { get; }
        Single Max { get; }
        Single Step { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class GameplayOptionDataRangeMixIn
    {
        public static void Clear(this IGameplayOptionDataRange item)
        {
            ((GameplayOptionDataRangeSetterCommon)((IGameplayOptionDataRangeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static GameplayOptionDataRange.Mask<bool> GetEqualsMask(
            this IGameplayOptionDataRangeGetter item,
            IGameplayOptionDataRangeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IGameplayOptionDataRangeGetter item,
            string? name = null,
            GameplayOptionDataRange.Mask<bool>? printMask = null)
        {
            return ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IGameplayOptionDataRangeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GameplayOptionDataRange.Mask<bool>? printMask = null)
        {
            ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IGameplayOptionDataRangeGetter item,
            IGameplayOptionDataRangeGetter rhs,
            GameplayOptionDataRange.TranslationMask? equalsMask = null)
        {
            return ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IGameplayOptionDataRange lhs,
            IGameplayOptionDataRangeGetter rhs)
        {
            ((GameplayOptionDataRangeSetterTranslationCommon)((IGameplayOptionDataRangeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IGameplayOptionDataRange lhs,
            IGameplayOptionDataRangeGetter rhs,
            GameplayOptionDataRange.TranslationMask? copyMask = null)
        {
            ((GameplayOptionDataRangeSetterTranslationCommon)((IGameplayOptionDataRangeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IGameplayOptionDataRange lhs,
            IGameplayOptionDataRangeGetter rhs,
            out GameplayOptionDataRange.ErrorMask errorMask,
            GameplayOptionDataRange.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((GameplayOptionDataRangeSetterTranslationCommon)((IGameplayOptionDataRangeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = GameplayOptionDataRange.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IGameplayOptionDataRange lhs,
            IGameplayOptionDataRangeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((GameplayOptionDataRangeSetterTranslationCommon)((IGameplayOptionDataRangeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static GameplayOptionDataRange DeepCopy(
            this IGameplayOptionDataRangeGetter item,
            GameplayOptionDataRange.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionDataRangeSetterTranslationCommon)((IGameplayOptionDataRangeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static GameplayOptionDataRange DeepCopy(
            this IGameplayOptionDataRangeGetter item,
            out GameplayOptionDataRange.ErrorMask errorMask,
            GameplayOptionDataRange.TranslationMask? copyMask = null)
        {
            return ((GameplayOptionDataRangeSetterTranslationCommon)((IGameplayOptionDataRangeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static GameplayOptionDataRange DeepCopy(
            this IGameplayOptionDataRangeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((GameplayOptionDataRangeSetterTranslationCommon)((IGameplayOptionDataRangeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IGameplayOptionDataRange item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((GameplayOptionDataRangeSetterCommon)((IGameplayOptionDataRangeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    #region Field Index
    internal enum GameplayOptionDataRange_FieldIndex
    {
        Min = 0,
        Max = 1,
        Step = 2,
    }
    #endregion

    #region Registration
    internal partial class GameplayOptionDataRange_Registration : ILoquiRegistration
    {
        public static readonly GameplayOptionDataRange_Registration Instance = new GameplayOptionDataRange_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Starfield.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 3;

        public static readonly Type MaskType = typeof(GameplayOptionDataRange.Mask<>);

        public static readonly Type ErrorMaskType = typeof(GameplayOptionDataRange.ErrorMask);

        public static readonly Type ClassType = typeof(GameplayOptionDataRange);

        public static readonly Type GetterType = typeof(IGameplayOptionDataRangeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IGameplayOptionDataRange);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Starfield.GameplayOptionDataRange";

        public const string Name = "GameplayOptionDataRange";

        public const string Namespace = "Mutagen.Bethesda.Starfield";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.GPOD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.GPOD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(GameplayOptionDataRangeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class GameplayOptionDataRangeSetterCommon
    {
        public static readonly GameplayOptionDataRangeSetterCommon Instance = new GameplayOptionDataRangeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IGameplayOptionDataRange item)
        {
            ClearPartial();
            item.Min = default(Single);
            item.Max = default(Single);
            item.Step = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(IGameplayOptionDataRange obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IGameplayOptionDataRange item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.GPOD),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: GameplayOptionDataRangeBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class GameplayOptionDataRangeCommon
    {
        public static readonly GameplayOptionDataRangeCommon Instance = new GameplayOptionDataRangeCommon();

        public GameplayOptionDataRange.Mask<bool> GetEqualsMask(
            IGameplayOptionDataRangeGetter item,
            IGameplayOptionDataRangeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new GameplayOptionDataRange.Mask<bool>(false);
            ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IGameplayOptionDataRangeGetter item,
            IGameplayOptionDataRangeGetter rhs,
            GameplayOptionDataRange.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Min = item.Min.EqualsWithin(rhs.Min);
            ret.Max = item.Max.EqualsWithin(rhs.Max);
            ret.Step = item.Step.EqualsWithin(rhs.Step);
        }
        
        public string Print(
            IGameplayOptionDataRangeGetter item,
            string? name = null,
            GameplayOptionDataRange.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IGameplayOptionDataRangeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            GameplayOptionDataRange.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"GameplayOptionDataRange =>");
            }
            else
            {
                sb.AppendLine($"{name} (GameplayOptionDataRange) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IGameplayOptionDataRangeGetter item,
            StructuredStringBuilder sb,
            GameplayOptionDataRange.Mask<bool>? printMask = null)
        {
            if (printMask?.Min ?? true)
            {
                sb.AppendItem(item.Min, "Min");
            }
            if (printMask?.Max ?? true)
            {
                sb.AppendItem(item.Max, "Max");
            }
            if (printMask?.Step ?? true)
            {
                sb.AppendItem(item.Step, "Step");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IGameplayOptionDataRangeGetter? lhs,
            IGameplayOptionDataRangeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptionDataRange_FieldIndex.Min) ?? true))
            {
                if (!lhs.Min.EqualsWithin(rhs.Min)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptionDataRange_FieldIndex.Max) ?? true))
            {
                if (!lhs.Max.EqualsWithin(rhs.Max)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)GameplayOptionDataRange_FieldIndex.Step) ?? true))
            {
                if (!lhs.Step.EqualsWithin(rhs.Step)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IGameplayOptionDataRangeGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Min);
            hash.Add(item.Max);
            hash.Add(item.Step);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return GameplayOptionDataRange.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IGameplayOptionDataRangeGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class GameplayOptionDataRangeSetterTranslationCommon
    {
        public static readonly GameplayOptionDataRangeSetterTranslationCommon Instance = new GameplayOptionDataRangeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IGameplayOptionDataRange item,
            IGameplayOptionDataRangeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)GameplayOptionDataRange_FieldIndex.Min) ?? true))
            {
                item.Min = rhs.Min;
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptionDataRange_FieldIndex.Max) ?? true))
            {
                item.Max = rhs.Max;
            }
            if ((copyMask?.GetShouldTranslate((int)GameplayOptionDataRange_FieldIndex.Step) ?? true))
            {
                item.Step = rhs.Step;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IGameplayOptionDataRange item,
            IGameplayOptionDataRangeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public GameplayOptionDataRange DeepCopy(
            IGameplayOptionDataRangeGetter item,
            GameplayOptionDataRange.TranslationMask? copyMask = null)
        {
            GameplayOptionDataRange ret = (GameplayOptionDataRange)((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionDataRangeSetterTranslationCommon)((IGameplayOptionDataRangeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public GameplayOptionDataRange DeepCopy(
            IGameplayOptionDataRangeGetter item,
            out GameplayOptionDataRange.ErrorMask errorMask,
            GameplayOptionDataRange.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            GameplayOptionDataRange ret = (GameplayOptionDataRange)((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionDataRangeSetterTranslationCommon)((IGameplayOptionDataRangeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = GameplayOptionDataRange.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public GameplayOptionDataRange DeepCopy(
            IGameplayOptionDataRangeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            GameplayOptionDataRange ret = (GameplayOptionDataRange)((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)item).CommonInstance()!).GetNew();
            ((GameplayOptionDataRangeSetterTranslationCommon)((IGameplayOptionDataRangeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Starfield
{
    public partial class GameplayOptionDataRange
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameplayOptionDataRange_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => GameplayOptionDataRange_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GameplayOptionDataRangeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return GameplayOptionDataRangeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GameplayOptionDataRangeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGameplayOptionDataRangeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IGameplayOptionDataRangeGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IGameplayOptionDataRangeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Starfield
{
    public partial class GameplayOptionDataRangeBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly GameplayOptionDataRangeBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IGameplayOptionDataRangeGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Min);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Max);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Step);
        }

        public void Write(
            MutagenWriter writer,
            IGameplayOptionDataRangeGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.GPOD),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IGameplayOptionDataRangeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class GameplayOptionDataRangeBinaryCreateTranslation
    {
        public static readonly GameplayOptionDataRangeBinaryCreateTranslation Instance = new GameplayOptionDataRangeBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IGameplayOptionDataRange item,
            MutagenFrame frame)
        {
            item.Min = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Max = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Step = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
        }

    }

}
namespace Mutagen.Bethesda.Starfield
{
    #region Binary Write Mixins
    public static class GameplayOptionDataRangeBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IGameplayOptionDataRangeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GameplayOptionDataRangeBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Starfield
{
    internal partial class GameplayOptionDataRangeBinaryOverlay :
        PluginBinaryOverlay,
        IGameplayOptionDataRangeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => GameplayOptionDataRange_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => GameplayOptionDataRange_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => GameplayOptionDataRangeCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => GameplayOptionDataRangeSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IGameplayOptionDataRangeGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IGameplayOptionDataRangeGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IGameplayOptionDataRangeGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => GameplayOptionDataRangeBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((GameplayOptionDataRangeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single Min => _structData.Slice(0x0, 0x4).Float();
        public Single Max => _structData.Slice(0x4, 0x4).Float();
        public Single Step => _structData.Slice(0x8, 0x4).Float();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected GameplayOptionDataRangeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IGameplayOptionDataRangeGetter GameplayOptionDataRangeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0xC,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new GameplayOptionDataRangeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0xC + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IGameplayOptionDataRangeGetter GameplayOptionDataRangeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return GameplayOptionDataRangeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            GameplayOptionDataRangeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IGameplayOptionDataRangeGetter rhs) return false;
            return ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IGameplayOptionDataRangeGetter? obj)
        {
            return ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((GameplayOptionDataRangeCommon)((IGameplayOptionDataRangeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

