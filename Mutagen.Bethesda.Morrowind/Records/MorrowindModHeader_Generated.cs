/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Morrowind;
using Mutagen.Bethesda.Morrowind.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Morrowind.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Morrowind.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Morrowind
{
    #region Class
    public partial class MorrowindModHeader :
        IEquatable<IMorrowindModHeaderGetter>,
        ILoquiObjectSetter<MorrowindModHeader>,
        IMorrowindModHeader
    {
        #region Ctor
        public MorrowindModHeader()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public MorrowindModHeader.HeaderFlag Flags { get; set; } = default(MorrowindModHeader.HeaderFlag);
        #endregion
        #region FormID
        public UInt32 FormID { get; set; } = default(UInt32);
        #endregion
        #region Version
        public Int32 Version { get; set; } = default(Int32);
        #endregion
        #region Stats
        public ModStats Stats { get; set; } = new ModStats();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModStatsGetter IMorrowindModHeaderGetter.Stats => Stats;
        #endregion
        #region TypeOffsets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TypeOffsets;
        public MemorySlice<Byte>? TypeOffsets
        {
            get => this._TypeOffsets;
            set => this._TypeOffsets = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IMorrowindModHeaderGetter.TypeOffsets => this.TypeOffsets;
        #endregion
        #region Deleted
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _Deleted;
        public MemorySlice<Byte>? Deleted
        {
            get => this._Deleted;
            set => this._Deleted = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IMorrowindModHeaderGetter.Deleted => this.Deleted;
        #endregion
        #region Author
        public String? Author { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMorrowindModHeaderGetter.Author => this.Author;
        #endregion
        #region Description
        public String? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IMorrowindModHeaderGetter.Description => this.Description;
        #endregion
        #region MasterReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<MasterReference> _MasterReferences = new ExtendedList<MasterReference>();
        public ExtendedList<MasterReference> MasterReferences
        {
            get => this._MasterReferences;
            init => this._MasterReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IMorrowindModHeaderGetter.MasterReferences => _MasterReferences;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MorrowindModHeaderMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMorrowindModHeaderGetter rhs) return false;
            return ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMorrowindModHeaderGetter? obj)
        {
            return ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Flags = initialValue;
                this.FormID = initialValue;
                this.Version = initialValue;
                this.Stats = new MaskItem<TItem, ModStats.Mask<TItem>?>(initialValue, new ModStats.Mask<TItem>(initialValue));
                this.TypeOffsets = initialValue;
                this.Deleted = initialValue;
                this.Author = initialValue;
                this.Description = initialValue;
                this.MasterReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>());
            }

            public Mask(
                TItem Flags,
                TItem FormID,
                TItem Version,
                TItem Stats,
                TItem TypeOffsets,
                TItem Deleted,
                TItem Author,
                TItem Description,
                TItem MasterReferences)
            {
                this.Flags = Flags;
                this.FormID = FormID;
                this.Version = Version;
                this.Stats = new MaskItem<TItem, ModStats.Mask<TItem>?>(Stats, new ModStats.Mask<TItem>(Stats));
                this.TypeOffsets = TypeOffsets;
                this.Deleted = Deleted;
                this.Author = Author;
                this.Description = Description;
                this.MasterReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>?>(MasterReferences, Enumerable.Empty<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public TItem FormID;
            public TItem Version;
            public MaskItem<TItem, ModStats.Mask<TItem>?>? Stats { get; set; }
            public TItem TypeOffsets;
            public TItem Deleted;
            public TItem Author;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, MasterReference.Mask<TItem>?>>?>? MasterReferences;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FormID, rhs.FormID)) return false;
                if (!object.Equals(this.Version, rhs.Version)) return false;
                if (!object.Equals(this.Stats, rhs.Stats)) return false;
                if (!object.Equals(this.TypeOffsets, rhs.TypeOffsets)) return false;
                if (!object.Equals(this.Deleted, rhs.Deleted)) return false;
                if (!object.Equals(this.Author, rhs.Author)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.MasterReferences, rhs.MasterReferences)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.FormID);
                hash.Add(this.Version);
                hash.Add(this.Stats);
                hash.Add(this.TypeOffsets);
                hash.Add(this.Deleted);
                hash.Add(this.Author);
                hash.Add(this.Description);
                hash.Add(this.MasterReferences);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Flags)) return false;
                if (!eval(this.FormID)) return false;
                if (!eval(this.Version)) return false;
                if (Stats != null)
                {
                    if (!eval(this.Stats.Overall)) return false;
                    if (this.Stats.Specific != null && !this.Stats.Specific.All(eval)) return false;
                }
                if (!eval(this.TypeOffsets)) return false;
                if (!eval(this.Deleted)) return false;
                if (!eval(this.Author)) return false;
                if (!eval(this.Description)) return false;
                if (this.MasterReferences != null)
                {
                    if (!eval(this.MasterReferences.Overall)) return false;
                    if (this.MasterReferences.Specific != null)
                    {
                        foreach (var item in this.MasterReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Flags)) return true;
                if (eval(this.FormID)) return true;
                if (eval(this.Version)) return true;
                if (Stats != null)
                {
                    if (eval(this.Stats.Overall)) return true;
                    if (this.Stats.Specific != null && this.Stats.Specific.Any(eval)) return true;
                }
                if (eval(this.TypeOffsets)) return true;
                if (eval(this.Deleted)) return true;
                if (eval(this.Author)) return true;
                if (eval(this.Description)) return true;
                if (this.MasterReferences != null)
                {
                    if (eval(this.MasterReferences.Overall)) return true;
                    if (this.MasterReferences.Specific != null)
                    {
                        foreach (var item in this.MasterReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MorrowindModHeader.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Flags = eval(this.Flags);
                obj.FormID = eval(this.FormID);
                obj.Version = eval(this.Version);
                obj.Stats = this.Stats == null ? null : new MaskItem<R, ModStats.Mask<R>?>(eval(this.Stats.Overall), this.Stats.Specific?.Translate(eval));
                obj.TypeOffsets = eval(this.TypeOffsets);
                obj.Deleted = eval(this.Deleted);
                obj.Author = eval(this.Author);
                obj.Description = eval(this.Description);
                if (MasterReferences != null)
                {
                    obj.MasterReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, MasterReference.Mask<R>?>>?>(eval(this.MasterReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, MasterReference.Mask<R>?>>());
                    if (MasterReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, MasterReference.Mask<R>?>>();
                        obj.MasterReferences.Specific = l;
                        foreach (var item in MasterReferences.Specific)
                        {
                            MaskItemIndexed<R, MasterReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, MasterReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MorrowindModHeader.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MorrowindModHeader.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MorrowindModHeader.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FormID ?? true)
                    {
                        sb.AppendItem(FormID, "FormID");
                    }
                    if (printMask?.Version ?? true)
                    {
                        sb.AppendItem(Version, "Version");
                    }
                    if (printMask?.Stats?.Overall ?? true)
                    {
                        Stats?.Print(sb);
                    }
                    if (printMask?.TypeOffsets ?? true)
                    {
                        sb.AppendItem(TypeOffsets, "TypeOffsets");
                    }
                    if (printMask?.Deleted ?? true)
                    {
                        sb.AppendItem(Deleted, "Deleted");
                    }
                    if (printMask?.Author ?? true)
                    {
                        sb.AppendItem(Author, "Author");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.MasterReferences?.Overall ?? true)
                        && MasterReferences is {} MasterReferencesItem)
                    {
                        sb.AppendLine("MasterReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(MasterReferencesItem.Overall);
                            if (MasterReferencesItem.Specific != null)
                            {
                                foreach (var subItem in MasterReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Flags;
            public Exception? FormID;
            public Exception? Version;
            public MaskItem<Exception?, ModStats.ErrorMask?>? Stats;
            public Exception? TypeOffsets;
            public Exception? Deleted;
            public Exception? Author;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>? MasterReferences;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                MorrowindModHeader_FieldIndex enu = (MorrowindModHeader_FieldIndex)index;
                switch (enu)
                {
                    case MorrowindModHeader_FieldIndex.Flags:
                        return Flags;
                    case MorrowindModHeader_FieldIndex.FormID:
                        return FormID;
                    case MorrowindModHeader_FieldIndex.Version:
                        return Version;
                    case MorrowindModHeader_FieldIndex.Stats:
                        return Stats;
                    case MorrowindModHeader_FieldIndex.TypeOffsets:
                        return TypeOffsets;
                    case MorrowindModHeader_FieldIndex.Deleted:
                        return Deleted;
                    case MorrowindModHeader_FieldIndex.Author:
                        return Author;
                    case MorrowindModHeader_FieldIndex.Description:
                        return Description;
                    case MorrowindModHeader_FieldIndex.MasterReferences:
                        return MasterReferences;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                MorrowindModHeader_FieldIndex enu = (MorrowindModHeader_FieldIndex)index;
                switch (enu)
                {
                    case MorrowindModHeader_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case MorrowindModHeader_FieldIndex.FormID:
                        this.FormID = ex;
                        break;
                    case MorrowindModHeader_FieldIndex.Version:
                        this.Version = ex;
                        break;
                    case MorrowindModHeader_FieldIndex.Stats:
                        this.Stats = new MaskItem<Exception?, ModStats.ErrorMask?>(ex, null);
                        break;
                    case MorrowindModHeader_FieldIndex.TypeOffsets:
                        this.TypeOffsets = ex;
                        break;
                    case MorrowindModHeader_FieldIndex.Deleted:
                        this.Deleted = ex;
                        break;
                    case MorrowindModHeader_FieldIndex.Author:
                        this.Author = ex;
                        break;
                    case MorrowindModHeader_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case MorrowindModHeader_FieldIndex.MasterReferences:
                        this.MasterReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                MorrowindModHeader_FieldIndex enu = (MorrowindModHeader_FieldIndex)index;
                switch (enu)
                {
                    case MorrowindModHeader_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case MorrowindModHeader_FieldIndex.FormID:
                        this.FormID = (Exception?)obj;
                        break;
                    case MorrowindModHeader_FieldIndex.Version:
                        this.Version = (Exception?)obj;
                        break;
                    case MorrowindModHeader_FieldIndex.Stats:
                        this.Stats = (MaskItem<Exception?, ModStats.ErrorMask?>?)obj;
                        break;
                    case MorrowindModHeader_FieldIndex.TypeOffsets:
                        this.TypeOffsets = (Exception?)obj;
                        break;
                    case MorrowindModHeader_FieldIndex.Deleted:
                        this.Deleted = (Exception?)obj;
                        break;
                    case MorrowindModHeader_FieldIndex.Author:
                        this.Author = (Exception?)obj;
                        break;
                    case MorrowindModHeader_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case MorrowindModHeader_FieldIndex.MasterReferences:
                        this.MasterReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (FormID != null) return true;
                if (Version != null) return true;
                if (Stats != null) return true;
                if (TypeOffsets != null) return true;
                if (Deleted != null) return true;
                if (Author != null) return true;
                if (Description != null) return true;
                if (MasterReferences != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(FormID, "FormID");
                }
                {
                    sb.AppendItem(Version, "Version");
                }
                Stats?.Print(sb);
                {
                    sb.AppendItem(TypeOffsets, "TypeOffsets");
                }
                {
                    sb.AppendItem(Deleted, "Deleted");
                }
                {
                    sb.AppendItem(Author, "Author");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (MasterReferences is {} MasterReferencesItem)
                {
                    sb.AppendLine("MasterReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(MasterReferencesItem.Overall);
                        if (MasterReferencesItem.Specific != null)
                        {
                            foreach (var subItem in MasterReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FormID = this.FormID.Combine(rhs.FormID);
                ret.Version = this.Version.Combine(rhs.Version);
                ret.Stats = this.Stats.Combine(rhs.Stats, (l, r) => l.Combine(r));
                ret.TypeOffsets = this.TypeOffsets.Combine(rhs.TypeOffsets);
                ret.Deleted = this.Deleted.Combine(rhs.Deleted);
                ret.Author = this.Author.Combine(rhs.Author);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.MasterReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, MasterReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.MasterReferences?.Overall, rhs.MasterReferences?.Overall), Noggog.ExceptionExt.Combine(this.MasterReferences?.Specific, rhs.MasterReferences?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Flags;
            public bool FormID;
            public bool Version;
            public ModStats.TranslationMask? Stats;
            public bool TypeOffsets;
            public bool Deleted;
            public bool Author;
            public bool Description;
            public MasterReference.TranslationMask? MasterReferences;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Flags = defaultOn;
                this.FormID = defaultOn;
                this.Version = defaultOn;
                this.TypeOffsets = defaultOn;
                this.Deleted = defaultOn;
                this.Author = defaultOn;
                this.Description = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Flags, null));
                ret.Add((FormID, null));
                ret.Add((Version, null));
                ret.Add((Stats != null ? Stats.OnOverall : DefaultOn, Stats?.GetCrystal()));
                ret.Add((TypeOffsets, null));
                ret.Add((Deleted, null));
                ret.Add((Author, null));
                ret.Add((Description, null));
                ret.Add((MasterReferences == null ? DefaultOn : !MasterReferences.GetCrystal().CopyNothing, MasterReferences?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = MorrowindModHeader_Registration.TriggeringRecordType;
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MorrowindModHeaderBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MorrowindModHeaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static MorrowindModHeader CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new MorrowindModHeader();
            ((MorrowindModHeaderSetterCommon)((IMorrowindModHeaderGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out MorrowindModHeader item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MorrowindModHeaderSetterCommon)((IMorrowindModHeaderGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static MorrowindModHeader GetNew()
        {
            return new MorrowindModHeader();
        }

    }
    #endregion

    #region Interface
    public partial interface IMorrowindModHeader :
        ILoquiObjectSetter<IMorrowindModHeader>,
        IMorrowindModHeaderGetter
    {
        new MorrowindModHeader.HeaderFlag Flags { get; set; }
        new UInt32 FormID { get; set; }
        new Int32 Version { get; set; }
        new ModStats Stats { get; set; }
        new MemorySlice<Byte>? TypeOffsets { get; set; }
        new MemorySlice<Byte>? Deleted { get; set; }
        new String? Author { get; set; }
        new String? Description { get; set; }
        new ExtendedList<MasterReference> MasterReferences { get; }
    }

    public partial interface IMorrowindModHeaderGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IMorrowindModHeaderGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => MorrowindModHeader_Registration.Instance;
        MorrowindModHeader.HeaderFlag Flags { get; }
        UInt32 FormID { get; }
        Int32 Version { get; }
        IModStatsGetter Stats { get; }
        ReadOnlyMemorySlice<Byte>? TypeOffsets { get; }
        ReadOnlyMemorySlice<Byte>? Deleted { get; }
        String? Author { get; }
        String? Description { get; }
        IReadOnlyList<IMasterReferenceGetter> MasterReferences { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MorrowindModHeaderMixIn
    {
        public static void Clear(this IMorrowindModHeader item)
        {
            ((MorrowindModHeaderSetterCommon)((IMorrowindModHeaderGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MorrowindModHeader.Mask<bool> GetEqualsMask(
            this IMorrowindModHeaderGetter item,
            IMorrowindModHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMorrowindModHeaderGetter item,
            string? name = null,
            MorrowindModHeader.Mask<bool>? printMask = null)
        {
            return ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMorrowindModHeaderGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MorrowindModHeader.Mask<bool>? printMask = null)
        {
            ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMorrowindModHeaderGetter item,
            IMorrowindModHeaderGetter rhs,
            MorrowindModHeader.TranslationMask? equalsMask = null)
        {
            return ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMorrowindModHeader lhs,
            IMorrowindModHeaderGetter rhs)
        {
            ((MorrowindModHeaderSetterTranslationCommon)((IMorrowindModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMorrowindModHeader lhs,
            IMorrowindModHeaderGetter rhs,
            MorrowindModHeader.TranslationMask? copyMask = null)
        {
            ((MorrowindModHeaderSetterTranslationCommon)((IMorrowindModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IMorrowindModHeader lhs,
            IMorrowindModHeaderGetter rhs,
            out MorrowindModHeader.ErrorMask errorMask,
            MorrowindModHeader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MorrowindModHeaderSetterTranslationCommon)((IMorrowindModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MorrowindModHeader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMorrowindModHeader lhs,
            IMorrowindModHeaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MorrowindModHeaderSetterTranslationCommon)((IMorrowindModHeaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MorrowindModHeader DeepCopy(
            this IMorrowindModHeaderGetter item,
            MorrowindModHeader.TranslationMask? copyMask = null)
        {
            return ((MorrowindModHeaderSetterTranslationCommon)((IMorrowindModHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MorrowindModHeader DeepCopy(
            this IMorrowindModHeaderGetter item,
            out MorrowindModHeader.ErrorMask errorMask,
            MorrowindModHeader.TranslationMask? copyMask = null)
        {
            return ((MorrowindModHeaderSetterTranslationCommon)((IMorrowindModHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MorrowindModHeader DeepCopy(
            this IMorrowindModHeaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MorrowindModHeaderSetterTranslationCommon)((IMorrowindModHeaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMorrowindModHeader item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MorrowindModHeaderSetterCommon)((IMorrowindModHeaderGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Morrowind
{
    #region Field Index
    internal enum MorrowindModHeader_FieldIndex
    {
        Flags = 0,
        FormID = 1,
        Version = 2,
        Stats = 3,
        TypeOffsets = 4,
        Deleted = 5,
        Author = 6,
        Description = 7,
        MasterReferences = 8,
    }
    #endregion

    #region Registration
    internal partial class MorrowindModHeader_Registration : ILoquiRegistration
    {
        public static readonly MorrowindModHeader_Registration Instance = new MorrowindModHeader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Morrowind.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 9;

        public static readonly Type MaskType = typeof(MorrowindModHeader.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MorrowindModHeader.ErrorMask);

        public static readonly Type ClassType = typeof(MorrowindModHeader);

        public static readonly Type GetterType = typeof(IMorrowindModHeaderGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMorrowindModHeader);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Morrowind.MorrowindModHeader";

        public const string Name = "MorrowindModHeader";

        public const string Namespace = "Mutagen.Bethesda.Morrowind";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES3;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TES3);
            var all = RecordCollection.Factory(
                RecordTypes.TES3,
                RecordTypes.HEDR,
                RecordTypes.OFST,
                RecordTypes.DELE,
                RecordTypes.CNAM,
                RecordTypes.SNAM,
                RecordTypes.MAST,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(MorrowindModHeaderBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MorrowindModHeaderSetterCommon
    {
        public static readonly MorrowindModHeaderSetterCommon Instance = new MorrowindModHeaderSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IMorrowindModHeader item)
        {
            ClearPartial();
            item.Flags = default(MorrowindModHeader.HeaderFlag);
            item.FormID = default(UInt32);
            item.Version = default(Int32);
            item.Stats.Clear();
            item.TypeOffsets = default;
            item.Deleted = default;
            item.Author = default;
            item.Description = default;
            item.MasterReferences.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IMorrowindModHeader obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMorrowindModHeader item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseRecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.TES3)));
            PluginUtilityTranslation.RecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MorrowindModHeaderBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MorrowindModHeaderBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class MorrowindModHeaderCommon
    {
        public static readonly MorrowindModHeaderCommon Instance = new MorrowindModHeaderCommon();

        public MorrowindModHeader.Mask<bool> GetEqualsMask(
            IMorrowindModHeaderGetter item,
            IMorrowindModHeaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MorrowindModHeader.Mask<bool>(false);
            ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMorrowindModHeaderGetter item,
            IMorrowindModHeaderGetter rhs,
            MorrowindModHeader.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Flags = item.Flags == rhs.Flags;
            ret.FormID = item.FormID == rhs.FormID;
            ret.Version = item.Version == rhs.Version;
            ret.Stats = MaskItemExt.Factory(item.Stats.GetEqualsMask(rhs.Stats, include), include);
            ret.TypeOffsets = MemorySliceExt.SequenceEqual(item.TypeOffsets, rhs.TypeOffsets);
            ret.Deleted = MemorySliceExt.SequenceEqual(item.Deleted, rhs.Deleted);
            ret.Author = string.Equals(item.Author, rhs.Author);
            ret.Description = string.Equals(item.Description, rhs.Description);
            ret.MasterReferences = item.MasterReferences.CollectionEqualsHelper(
                rhs.MasterReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            IMorrowindModHeaderGetter item,
            string? name = null,
            MorrowindModHeader.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMorrowindModHeaderGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MorrowindModHeader.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MorrowindModHeader =>");
            }
            else
            {
                sb.AppendLine($"{name} (MorrowindModHeader) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMorrowindModHeaderGetter item,
            StructuredStringBuilder sb,
            MorrowindModHeader.Mask<bool>? printMask = null)
        {
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.FormID ?? true)
            {
                sb.AppendItem(item.FormID, "FormID");
            }
            if (printMask?.Version ?? true)
            {
                sb.AppendItem(item.Version, "Version");
            }
            if (printMask?.Stats?.Overall ?? true)
            {
                item.Stats?.Print(sb, "Stats");
            }
            if ((printMask?.TypeOffsets ?? true)
                && item.TypeOffsets is {} TypeOffsetsItem)
            {
                sb.AppendLine($"TypeOffsets => {SpanExt.ToHexString(TypeOffsetsItem)}");
            }
            if ((printMask?.Deleted ?? true)
                && item.Deleted is {} DeletedItem)
            {
                sb.AppendLine($"Deleted => {SpanExt.ToHexString(DeletedItem)}");
            }
            if ((printMask?.Author ?? true)
                && item.Author is {} AuthorItem)
            {
                sb.AppendItem(AuthorItem, "Author");
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.MasterReferences?.Overall ?? true)
            {
                sb.AppendLine("MasterReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.MasterReferences)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMorrowindModHeaderGetter? lhs,
            IMorrowindModHeaderGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.FormID) ?? true))
            {
                if (lhs.FormID != rhs.FormID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Version) ?? true))
            {
                if (lhs.Version != rhs.Version) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Stats) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Stats, rhs.Stats, out var lhsStats, out var rhsStats, out var isStatsEqual))
                {
                    if (!((ModStatsCommon)((IModStatsGetter)lhsStats).CommonInstance()!).Equals(lhsStats, rhsStats, equalsMask?.GetSubCrystal((int)MorrowindModHeader_FieldIndex.Stats))) return false;
                }
                else if (!isStatsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.TypeOffsets) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TypeOffsets, rhs.TypeOffsets)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Deleted) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.Deleted, rhs.Deleted)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Author) ?? true))
            {
                if (!string.Equals(lhs.Author, rhs.Author)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Description) ?? true))
            {
                if (!string.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.MasterReferences) ?? true))
            {
                if (!lhs.MasterReferences.SequenceEqual(rhs.MasterReferences, (l, r) => ((MasterReferenceCommon)((IMasterReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)MorrowindModHeader_FieldIndex.MasterReferences)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IMorrowindModHeaderGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Flags);
            hash.Add(item.FormID);
            hash.Add(item.Version);
            hash.Add(item.Stats);
            if (item.TypeOffsets is {} TypeOffsetsItem)
            {
                hash.Add(TypeOffsetsItem);
            }
            if (item.Deleted is {} DeletedItem)
            {
                hash.Add(DeletedItem);
            }
            if (item.Author is {} Authoritem)
            {
                hash.Add(Authoritem);
            }
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.MasterReferences);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return MorrowindModHeader.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMorrowindModHeaderGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class MorrowindModHeaderSetterTranslationCommon
    {
        public static readonly MorrowindModHeaderSetterTranslationCommon Instance = new MorrowindModHeaderSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IMorrowindModHeader item,
            IMorrowindModHeaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.FormID) ?? true))
            {
                item.FormID = rhs.FormID;
            }
            if ((copyMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Version) ?? true))
            {
                item.Version = rhs.Version;
            }
            if ((copyMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Stats) ?? true))
            {
                errorMask?.PushIndex((int)MorrowindModHeader_FieldIndex.Stats);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Stats) ?? true))
                    {
                        item.Stats = rhs.Stats.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)MorrowindModHeader_FieldIndex.Stats),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.TypeOffsets) ?? true))
            {
                if(rhs.TypeOffsets is {} TypeOffsetsrhs)
                {
                    item.TypeOffsets = TypeOffsetsrhs.ToArray();
                }
                else
                {
                    item.TypeOffsets = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Deleted) ?? true))
            {
                if(rhs.Deleted is {} Deletedrhs)
                {
                    item.Deleted = Deletedrhs.ToArray();
                }
                else
                {
                    item.Deleted = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Author) ?? true))
            {
                item.Author = rhs.Author;
            }
            if ((copyMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description;
            }
            if ((copyMask?.GetShouldTranslate((int)MorrowindModHeader_FieldIndex.MasterReferences) ?? true))
            {
                errorMask?.PushIndex((int)MorrowindModHeader_FieldIndex.MasterReferences);
                try
                {
                    item.MasterReferences.SetTo(
                        rhs.MasterReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IMorrowindModHeader item,
            IMorrowindModHeaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public MorrowindModHeader DeepCopy(
            IMorrowindModHeaderGetter item,
            MorrowindModHeader.TranslationMask? copyMask = null)
        {
            MorrowindModHeader ret = (MorrowindModHeader)((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)item).CommonInstance()!).GetNew();
            ((MorrowindModHeaderSetterTranslationCommon)((IMorrowindModHeaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MorrowindModHeader DeepCopy(
            IMorrowindModHeaderGetter item,
            out MorrowindModHeader.ErrorMask errorMask,
            MorrowindModHeader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MorrowindModHeader ret = (MorrowindModHeader)((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)item).CommonInstance()!).GetNew();
            ((MorrowindModHeaderSetterTranslationCommon)((IMorrowindModHeaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MorrowindModHeader.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MorrowindModHeader DeepCopy(
            IMorrowindModHeaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MorrowindModHeader ret = (MorrowindModHeader)((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)item).CommonInstance()!).GetNew();
            ((MorrowindModHeaderSetterTranslationCommon)((IMorrowindModHeaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Morrowind
{
    public partial class MorrowindModHeader
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MorrowindModHeader_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MorrowindModHeader_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MorrowindModHeaderCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return MorrowindModHeaderSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MorrowindModHeaderSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMorrowindModHeaderGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IMorrowindModHeaderGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IMorrowindModHeaderGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Morrowind
{
    public partial class MorrowindModHeaderBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly MorrowindModHeaderBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IMorrowindModHeaderGetter item,
            MutagenWriter writer)
        {
            EnumBinaryTranslation<MorrowindModHeader.HeaderFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            writer.Write(item.FormID);
            writer.Write(item.Version);
        }

        public static void WriteRecordTypes(
            IMorrowindModHeaderGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            var StatsItem = item.Stats;
            ((ModStatsBinaryWriteTranslation)((IBinaryItem)StatsItem).BinaryWriteTranslator).Write(
                item: StatsItem,
                writer: writer,
                translationParams: translationParams);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TypeOffsets,
                header: translationParams.ConvertToCustom(RecordTypes.OFST));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Deleted,
                header: translationParams.ConvertToCustom(RecordTypes.DELE));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Author,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM),
                binaryType: StringBinaryType.NullTerminate);
            MorrowindModHeaderBinaryWriteTranslation.WriteBinaryMasterReferences(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryMasterReferencesCustom(
            MutagenWriter writer,
            IMorrowindModHeaderGetter item);

        public static void WriteBinaryMasterReferences(
            MutagenWriter writer,
            IMorrowindModHeaderGetter item)
        {
            WriteBinaryMasterReferencesCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IMorrowindModHeaderGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Record(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.TES3)))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMorrowindModHeaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MorrowindModHeaderBinaryCreateTranslation
    {
        public static readonly MorrowindModHeaderBinaryCreateTranslation Instance = new MorrowindModHeaderBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IMorrowindModHeader item,
            MutagenFrame frame)
        {
            item.Flags = EnumBinaryTranslation<MorrowindModHeader.HeaderFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.FormID = frame.ReadUInt32();
            item.Version = frame.ReadInt32();
        }

        public static ParseResult FillBinaryRecordTypes(
            IMorrowindModHeader item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.HEDR:
                {
                    item.Stats = Mutagen.Bethesda.Morrowind.ModStats.CreateFromBinary(frame: frame);
                    return (int)MorrowindModHeader_FieldIndex.Stats;
                }
                case RecordTypeInts.OFST:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TypeOffsets = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MorrowindModHeader_FieldIndex.TypeOffsets;
                }
                case RecordTypeInts.DELE:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Deleted = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)MorrowindModHeader_FieldIndex.Deleted;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Author = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)MorrowindModHeader_FieldIndex.Author;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)MorrowindModHeader_FieldIndex.Description;
                }
                case RecordTypeInts.MAST:
                {
                    MorrowindModHeaderBinaryCreateTranslation.FillBinaryMasterReferencesCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)MorrowindModHeader_FieldIndex.MasterReferences;
                }
                default:
                    frame.Position += contentLength + frame.MetaData.Constants.SubConstants.HeaderLength;
                    return default(int?);
            }
        }

        public static partial void FillBinaryMasterReferencesCustom(
            MutagenFrame frame,
            IMorrowindModHeader item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Morrowind
{
    #region Binary Write Mixins
    public static class MorrowindModHeaderBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IMorrowindModHeaderGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MorrowindModHeaderBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Morrowind
{
    internal partial class MorrowindModHeaderBinaryOverlay :
        PluginBinaryOverlay,
        IMorrowindModHeaderGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MorrowindModHeader_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => MorrowindModHeader_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => MorrowindModHeaderCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => MorrowindModHeaderSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IMorrowindModHeaderGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IMorrowindModHeaderGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IMorrowindModHeaderGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => MorrowindModHeaderBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MorrowindModHeaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public MorrowindModHeader.HeaderFlag Flags => (MorrowindModHeader.HeaderFlag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x0, 0x4));
        public UInt32 FormID => BinaryPrimitives.ReadUInt32LittleEndian(_structData.Slice(0x4, 0x4));
        public Int32 Version => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x8, 0x4));
        #region Stats
        private RangeInt32? _StatsLocation;
        private IModStatsGetter? _Stats => _StatsLocation.HasValue ? ModStatsBinaryOverlay.ModStatsFactory(_recordData.Slice(_StatsLocation!.Value.Min), _package) : default;
        public IModStatsGetter Stats => _Stats ?? new ModStats();
        #endregion
        #region TypeOffsets
        private int? _TypeOffsetsLocation;
        public ReadOnlyMemorySlice<Byte>? TypeOffsets => _TypeOffsetsLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TypeOffsetsLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Deleted
        private int? _DeletedLocation;
        public ReadOnlyMemorySlice<Byte>? Deleted => _DeletedLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DeletedLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Author
        private int? _AuthorLocation;
        public String? Author => _AuthorLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AuthorLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public String? Description => _DescriptionLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IMasterReferenceGetter> MasterReferences { get; private set; } = Array.Empty<IMasterReferenceGetter>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MorrowindModHeaderBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IMorrowindModHeaderGetter MorrowindModHeaderFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new MorrowindModHeaderBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IMorrowindModHeaderGetter MorrowindModHeaderFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return MorrowindModHeaderFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.HEDR:
                {
                    _StatsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)MorrowindModHeader_FieldIndex.Stats;
                }
                case RecordTypeInts.OFST:
                {
                    _TypeOffsetsLocation = (stream.Position - offset);
                    return (int)MorrowindModHeader_FieldIndex.TypeOffsets;
                }
                case RecordTypeInts.DELE:
                {
                    _DeletedLocation = (stream.Position - offset);
                    return (int)MorrowindModHeader_FieldIndex.Deleted;
                }
                case RecordTypeInts.CNAM:
                {
                    _AuthorLocation = (stream.Position - offset);
                    return (int)MorrowindModHeader_FieldIndex.Author;
                }
                case RecordTypeInts.SNAM:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)MorrowindModHeader_FieldIndex.Description;
                }
                case RecordTypeInts.MAST:
                {
                    this.MasterReferences = this.ParseRepeatedTypelessSubrecord<IMasterReferenceGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: MasterReference_Registration.TriggerSpecs,
                        factory: MasterReferenceBinaryOverlay.MasterReferenceFactory);
                    return (int)MorrowindModHeader_FieldIndex.MasterReferences;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MorrowindModHeaderMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IMorrowindModHeaderGetter rhs) return false;
            return ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMorrowindModHeaderGetter? obj)
        {
            return ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MorrowindModHeaderCommon)((IMorrowindModHeaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

