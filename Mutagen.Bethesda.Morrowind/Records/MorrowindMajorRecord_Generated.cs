/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Morrowind.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Morrowind.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Morrowind.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Morrowind
{
    #region Class
    /// <summary>
    /// Implemented by: [Cell, GameSetting]
    /// </summary>
    public abstract partial class MorrowindMajorRecord :
        MajorRecord,
        IEquatable<IMorrowindMajorRecordGetter>,
        ILoquiObjectSetter<MorrowindMajorRecord>,
        IMorrowindMajorRecordInternal
    {
        #region Ctor
        protected MorrowindMajorRecord()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FormVersion
        public UInt16 FormVersion { get; set; } = default(UInt16);
        #endregion
        #region Version2
        public UInt16 Version2 { get; set; } = default(UInt16);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MorrowindMajorRecordMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.FormVersion = initialValue;
                this.Version2 = initialValue;
                this.MorrowindMajorRecordFlags = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem MorrowindMajorRecordFlags)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID)
            {
                this.FormVersion = FormVersion;
                this.Version2 = Version2;
                this.MorrowindMajorRecordFlags = MorrowindMajorRecordFlags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FormVersion;
            public TItem Version2;
            public TItem MorrowindMajorRecordFlags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.FormVersion, rhs.FormVersion)) return false;
                if (!object.Equals(this.Version2, rhs.Version2)) return false;
                if (!object.Equals(this.MorrowindMajorRecordFlags, rhs.MorrowindMajorRecordFlags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FormVersion);
                hash.Add(this.Version2);
                hash.Add(this.MorrowindMajorRecordFlags);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.FormVersion)) return false;
                if (!eval(this.Version2)) return false;
                if (!eval(this.MorrowindMajorRecordFlags)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.FormVersion)) return true;
                if (eval(this.Version2)) return true;
                if (eval(this.MorrowindMajorRecordFlags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new MorrowindMajorRecord.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.FormVersion = eval(this.FormVersion);
                obj.Version2 = eval(this.Version2);
                obj.MorrowindMajorRecordFlags = eval(this.MorrowindMajorRecordFlags);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(MorrowindMajorRecord.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, MorrowindMajorRecord.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(MorrowindMajorRecord.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.FormVersion ?? true)
                    {
                        sb.AppendItem(FormVersion, "FormVersion");
                    }
                    if (printMask?.Version2 ?? true)
                    {
                        sb.AppendItem(Version2, "Version2");
                    }
                    if (printMask?.MorrowindMajorRecordFlags ?? true)
                    {
                        sb.AppendItem(MorrowindMajorRecordFlags, "MorrowindMajorRecordFlags");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? FormVersion;
            public Exception? Version2;
            public Exception? MorrowindMajorRecordFlags;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                MorrowindMajorRecord_FieldIndex enu = (MorrowindMajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case MorrowindMajorRecord_FieldIndex.FormVersion:
                        return FormVersion;
                    case MorrowindMajorRecord_FieldIndex.Version2:
                        return Version2;
                    case MorrowindMajorRecord_FieldIndex.MorrowindMajorRecordFlags:
                        return MorrowindMajorRecordFlags;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                MorrowindMajorRecord_FieldIndex enu = (MorrowindMajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case MorrowindMajorRecord_FieldIndex.FormVersion:
                        this.FormVersion = ex;
                        break;
                    case MorrowindMajorRecord_FieldIndex.Version2:
                        this.Version2 = ex;
                        break;
                    case MorrowindMajorRecord_FieldIndex.MorrowindMajorRecordFlags:
                        this.MorrowindMajorRecordFlags = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                MorrowindMajorRecord_FieldIndex enu = (MorrowindMajorRecord_FieldIndex)index;
                switch (enu)
                {
                    case MorrowindMajorRecord_FieldIndex.FormVersion:
                        this.FormVersion = (Exception?)obj;
                        break;
                    case MorrowindMajorRecord_FieldIndex.Version2:
                        this.Version2 = (Exception?)obj;
                        break;
                    case MorrowindMajorRecord_FieldIndex.MorrowindMajorRecordFlags:
                        this.MorrowindMajorRecordFlags = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (FormVersion != null) return true;
                if (Version2 != null) return true;
                if (MorrowindMajorRecordFlags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(FormVersion, "FormVersion");
                }
                {
                    sb.AppendItem(Version2, "Version2");
                }
                {
                    sb.AppendItem(MorrowindMajorRecordFlags, "MorrowindMajorRecordFlags");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FormVersion = this.FormVersion.Combine(rhs.FormVersion);
                ret.Version2 = this.Version2.Combine(rhs.Version2);
                ret.MorrowindMajorRecordFlags = this.MorrowindMajorRecordFlags.Combine(rhs.MorrowindMajorRecordFlags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool FormVersion;
            public bool Version2;
            public bool MorrowindMajorRecordFlags;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.FormVersion = defaultOn;
                this.Version2 = defaultOn;
                this.MorrowindMajorRecordFlags = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((FormVersion, null));
                ret.Add((Version2, null));
                ret.Add((MorrowindMajorRecordFlags, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public MorrowindMajorRecord(FormKey formKey)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Morrowind.DefaultFormVersion!.Value;
            CustomCtor();
        }

        private MorrowindMajorRecord(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public MorrowindMajorRecord(IMorrowindMod mod)
            : this(mod.GetNextFormKey())
        {
        }

        public MorrowindMajorRecord(IMorrowindMod mod, string editorID)
            : this(mod.GetNextFormKey(editorID))
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<MorrowindMajorRecord>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMorrowindMajorRecordGetter rhs) return false;
            return ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMorrowindMajorRecordGetter? obj)
        {
            return ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MorrowindMajorRecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MorrowindMajorRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((MorrowindMajorRecordSetterCommon)((IMorrowindMajorRecordGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new MorrowindMajorRecord GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [Cell, GameSetting]
    /// </summary>
    public partial interface IMorrowindMajorRecord :
        ILoquiObjectSetter<IMorrowindMajorRecordInternal>,
        IMajorRecordInternal,
        IMorrowindMajorRecordGetter
    {
        new UInt16 FormVersion { get; set; }
        new UInt16 Version2 { get; set; }
        new MorrowindMajorRecord.MorrowindMajorRecordFlag MorrowindMajorRecordFlags { get; set; }
    }

    public partial interface IMorrowindMajorRecordInternal :
        IMajorRecordInternal,
        IMorrowindMajorRecord,
        IMorrowindMajorRecordGetter
    {
    }

    /// <summary>
    /// Implemented by: [Cell, GameSetting]
    /// </summary>
    public partial interface IMorrowindMajorRecordGetter :
        IMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IMorrowindMajorRecordGetter>
    {
        static new ILoquiRegistration StaticRegistration => MorrowindMajorRecord_Registration.Instance;
        UInt16 FormVersion { get; }
        UInt16 Version2 { get; }
        MorrowindMajorRecord.MorrowindMajorRecordFlag MorrowindMajorRecordFlags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class MorrowindMajorRecordMixIn
    {
        public static void Clear(this IMorrowindMajorRecordInternal item)
        {
            ((MorrowindMajorRecordSetterCommon)((IMorrowindMajorRecordGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static MorrowindMajorRecord.Mask<bool> GetEqualsMask(
            this IMorrowindMajorRecordGetter item,
            IMorrowindMajorRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IMorrowindMajorRecordGetter item,
            string? name = null,
            MorrowindMajorRecord.Mask<bool>? printMask = null)
        {
            return ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IMorrowindMajorRecordGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MorrowindMajorRecord.Mask<bool>? printMask = null)
        {
            ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IMorrowindMajorRecordGetter item,
            IMorrowindMajorRecordGetter rhs,
            MorrowindMajorRecord.TranslationMask? equalsMask = null)
        {
            return ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IMorrowindMajorRecordInternal lhs,
            IMorrowindMajorRecordGetter rhs,
            out MorrowindMajorRecord.ErrorMask errorMask,
            MorrowindMajorRecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((MorrowindMajorRecordSetterTranslationCommon)((IMorrowindMajorRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = MorrowindMajorRecord.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IMorrowindMajorRecordInternal lhs,
            IMorrowindMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((MorrowindMajorRecordSetterTranslationCommon)((IMorrowindMajorRecordGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static MorrowindMajorRecord DeepCopy(
            this IMorrowindMajorRecordGetter item,
            MorrowindMajorRecord.TranslationMask? copyMask = null)
        {
            return ((MorrowindMajorRecordSetterTranslationCommon)((IMorrowindMajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static MorrowindMajorRecord DeepCopy(
            this IMorrowindMajorRecordGetter item,
            out MorrowindMajorRecord.ErrorMask errorMask,
            MorrowindMajorRecord.TranslationMask? copyMask = null)
        {
            return ((MorrowindMajorRecordSetterTranslationCommon)((IMorrowindMajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static MorrowindMajorRecord DeepCopy(
            this IMorrowindMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((MorrowindMajorRecordSetterTranslationCommon)((IMorrowindMajorRecordGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static MorrowindMajorRecord Duplicate(
            this IMorrowindMajorRecordGetter item,
            FormKey formKey,
            MorrowindMajorRecord.TranslationMask? copyMask = null)
        {
            return ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static MorrowindMajorRecord Duplicate(
            this IMorrowindMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IMorrowindMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((MorrowindMajorRecordSetterCommon)((IMorrowindMajorRecordGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Morrowind
{
    #region Field Index
    internal enum MorrowindMajorRecord_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        MorrowindMajorRecordFlags = 6,
    }
    #endregion

    #region Registration
    internal partial class MorrowindMajorRecord_Registration : ILoquiRegistration
    {
        public static readonly MorrowindMajorRecord_Registration Instance = new MorrowindMajorRecord_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Morrowind.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 7;

        public static readonly Type MaskType = typeof(MorrowindMajorRecord.Mask<>);

        public static readonly Type ErrorMaskType = typeof(MorrowindMajorRecord.ErrorMask);

        public static readonly Type ClassType = typeof(MorrowindMajorRecord);

        public static readonly Type GetterType = typeof(IMorrowindMajorRecordGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IMorrowindMajorRecord);

        public static readonly Type? InternalSetterType = typeof(IMorrowindMajorRecordInternal);

        public const string FullName = "Mutagen.Bethesda.Morrowind.MorrowindMajorRecord";

        public const string Name = "MorrowindMajorRecord";

        public const string Namespace = "Mutagen.Bethesda.Morrowind";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(MorrowindMajorRecordBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class MorrowindMajorRecordSetterCommon : MajorRecordSetterCommon
    {
        public new static readonly MorrowindMajorRecordSetterCommon Instance = new MorrowindMajorRecordSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IMorrowindMajorRecordInternal item)
        {
            ClearPartial();
            item.FormVersion = default(UInt16);
            item.Version2 = default(UInt16);
            item.MorrowindMajorRecordFlags = default(MorrowindMajorRecord.MorrowindMajorRecordFlag);
            base.Clear(item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IMorrowindMajorRecordInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IMorrowindMajorRecord obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IMorrowindMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IMorrowindMajorRecordInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: MorrowindMajorRecordBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: MorrowindMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (MorrowindMajorRecord)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class MorrowindMajorRecordCommon : MajorRecordCommon
    {
        public new static readonly MorrowindMajorRecordCommon Instance = new MorrowindMajorRecordCommon();

        public MorrowindMajorRecord.Mask<bool> GetEqualsMask(
            IMorrowindMajorRecordGetter item,
            IMorrowindMajorRecordGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new MorrowindMajorRecord.Mask<bool>(false);
            ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IMorrowindMajorRecordGetter item,
            IMorrowindMajorRecordGetter rhs,
            MorrowindMajorRecord.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.FormVersion = item.FormVersion == rhs.FormVersion;
            ret.Version2 = item.Version2 == rhs.Version2;
            ret.MorrowindMajorRecordFlags = item.MorrowindMajorRecordFlags == rhs.MorrowindMajorRecordFlags;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IMorrowindMajorRecordGetter item,
            string? name = null,
            MorrowindMajorRecord.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IMorrowindMajorRecordGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            MorrowindMajorRecord.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"MorrowindMajorRecord =>");
            }
            else
            {
                sb.AppendLine($"{name} (MorrowindMajorRecord) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IMorrowindMajorRecordGetter item,
            StructuredStringBuilder sb,
            MorrowindMajorRecord.Mask<bool>? printMask = null)
        {
            MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.FormVersion ?? true)
            {
                sb.AppendItem(item.FormVersion, "FormVersion");
            }
            if (printMask?.Version2 ?? true)
            {
                sb.AppendItem(item.Version2, "Version2");
            }
            if (printMask?.MorrowindMajorRecordFlags ?? true)
            {
                sb.AppendItem(item.MorrowindMajorRecordFlags, "MorrowindMajorRecordFlags");
            }
        }
        
        public static MorrowindMajorRecord_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (MorrowindMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (MorrowindMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (MorrowindMajorRecord_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (MorrowindMajorRecord_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IMorrowindMajorRecordGetter? lhs,
            IMorrowindMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IMajorRecordGetter)lhs, (IMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)MorrowindMajorRecord_FieldIndex.FormVersion) ?? true))
            {
                if (lhs.FormVersion != rhs.FormVersion) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorrowindMajorRecord_FieldIndex.Version2) ?? true))
            {
                if (lhs.Version2 != rhs.Version2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)MorrowindMajorRecord_FieldIndex.MorrowindMajorRecordFlags) ?? true))
            {
                if (lhs.MorrowindMajorRecordFlags != rhs.MorrowindMajorRecordFlags) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IMorrowindMajorRecordGetter?)lhs,
                rhs: rhs as IMorrowindMajorRecordGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IMorrowindMajorRecordGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.FormVersion);
            hash.Add(item.Version2);
            hash.Add(item.MorrowindMajorRecordFlags);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IMorrowindMajorRecordGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return MorrowindMajorRecord.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IMorrowindMajorRecordGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public virtual MorrowindMajorRecord Duplicate(
            IMorrowindMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            throw new NotImplementedException();
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IMorrowindMajorRecordGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class MorrowindMajorRecordSetterTranslationCommon : MajorRecordSetterTranslationCommon
    {
        public new static readonly MorrowindMajorRecordSetterTranslationCommon Instance = new MorrowindMajorRecordSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IMorrowindMajorRecordInternal item,
            IMorrowindMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public virtual void DeepCopyIn(
            IMorrowindMajorRecord item,
            IMorrowindMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IMajorRecord)item,
                (IMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)MorrowindMajorRecord_FieldIndex.FormVersion) ?? true))
            {
                item.FormVersion = rhs.FormVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)MorrowindMajorRecord_FieldIndex.Version2) ?? true))
            {
                item.Version2 = rhs.Version2;
            }
            if ((copyMask?.GetShouldTranslate((int)MorrowindMajorRecord_FieldIndex.MorrowindMajorRecordFlags) ?? true))
            {
                item.MorrowindMajorRecordFlags = rhs.MorrowindMajorRecordFlags;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IMorrowindMajorRecord item,
            IMorrowindMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMorrowindMajorRecordInternal)item,
                rhs: (IMorrowindMajorRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IMorrowindMajorRecord)item,
                rhs: (IMorrowindMajorRecordGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public MorrowindMajorRecord DeepCopy(
            IMorrowindMajorRecordGetter item,
            MorrowindMajorRecord.TranslationMask? copyMask = null)
        {
            MorrowindMajorRecord ret = (MorrowindMajorRecord)((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)item).CommonInstance()!).GetNew();
            ((MorrowindMajorRecordSetterTranslationCommon)((IMorrowindMajorRecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public MorrowindMajorRecord DeepCopy(
            IMorrowindMajorRecordGetter item,
            out MorrowindMajorRecord.ErrorMask errorMask,
            MorrowindMajorRecord.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            MorrowindMajorRecord ret = (MorrowindMajorRecord)((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)item).CommonInstance()!).GetNew();
            ((MorrowindMajorRecordSetterTranslationCommon)((IMorrowindMajorRecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = MorrowindMajorRecord.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public MorrowindMajorRecord DeepCopy(
            IMorrowindMajorRecordGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            MorrowindMajorRecord ret = (MorrowindMajorRecord)((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)item).CommonInstance()!).GetNew();
            ((MorrowindMajorRecordSetterTranslationCommon)((IMorrowindMajorRecordGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Morrowind
{
    public partial class MorrowindMajorRecord
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MorrowindMajorRecord_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MorrowindMajorRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MorrowindMajorRecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return MorrowindMajorRecordSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MorrowindMajorRecordSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Morrowind
{
    public partial class MorrowindMajorRecordBinaryWriteTranslation :
        MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly MorrowindMajorRecordBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IMorrowindMajorRecordGetter item,
            MutagenWriter writer)
        {
            MajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            writer.Write(item.FormVersion);
            writer.Write(item.Version2);
        }

        public virtual void Write(
            MutagenWriter writer,
            IMorrowindMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            throw new NotImplementedException();
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IMorrowindMajorRecordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IMorrowindMajorRecordGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class MorrowindMajorRecordBinaryCreateTranslation : MajorRecordBinaryCreateTranslation
    {
        public new static readonly MorrowindMajorRecordBinaryCreateTranslation Instance = new MorrowindMajorRecordBinaryCreateTranslation();

        public override RecordType RecordType => throw new ArgumentException();
        public static void FillBinaryStructs(
            IMorrowindMajorRecordInternal item,
            MutagenFrame frame)
        {
            MajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.FormVersion = frame.ReadUInt16();
            item.Version2 = frame.ReadUInt16();
        }

    }

}
namespace Mutagen.Bethesda.Morrowind
{
    #region Binary Write Mixins
    public static class MorrowindMajorRecordBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Morrowind
{
    internal abstract partial class MorrowindMajorRecordBinaryOverlay :
        MajorRecordBinaryOverlay,
        IMorrowindMajorRecordGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => MorrowindMajorRecord_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => MorrowindMajorRecord_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => MorrowindMajorRecordCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => MorrowindMajorRecordSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => MorrowindMajorRecordBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((MorrowindMajorRecordBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt16 FormVersion => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0xC, 0x2));
        public UInt16 Version2 => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0xE, 0x2));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected MorrowindMajorRecordBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }


        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            MorrowindMajorRecordMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<MorrowindMajorRecord>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IMorrowindMajorRecordGetter rhs) return false;
            return ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IMorrowindMajorRecordGetter? obj)
        {
            return ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((MorrowindMajorRecordCommon)((IMorrowindMajorRecordGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

