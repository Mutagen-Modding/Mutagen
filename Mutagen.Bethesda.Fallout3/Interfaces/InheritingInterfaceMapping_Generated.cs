/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections.Generic;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Loqui;

namespace Mutagen.Bethesda.Fallout3;

internal class Fallout3InheritingInterfaceMapping : IInterfaceMapping
{
    public IReadOnlyDictionary<Type, InterfaceMappingResult> InterfaceToObjectTypes { get; }

    public GameCategory GameCategory => GameCategory.Fallout3;

    public Fallout3InheritingInterfaceMapping()
    {
        var dict = new Dictionary<Type, InterfaceMappingResult>();
        dict[typeof(IGlobalFloat)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Global_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IGlobalFloat),
                Getter: typeof(IGlobalFloatGetter)));
        dict[typeof(IGlobalFloatGetter)] = dict[typeof(IGlobalFloat)] with { Setter = false };
        dict[typeof(IGlobalInt)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Global_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IGlobalInt),
                Getter: typeof(IGlobalIntGetter)));
        dict[typeof(IGlobalIntGetter)] = dict[typeof(IGlobalInt)] with { Setter = false };
        dict[typeof(IGlobalShort)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Global_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IGlobalShort),
                Getter: typeof(IGlobalShortGetter)));
        dict[typeof(IGlobalShortGetter)] = dict[typeof(IGlobalShort)] with { Setter = false };
        dict[typeof(IGlobalUnknown)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Global_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IGlobalUnknown),
                Getter: typeof(IGlobalUnknownGetter)));
        dict[typeof(IGlobalUnknownGetter)] = dict[typeof(IGlobalUnknown)] with { Setter = false };
        InterfaceToObjectTypes = dict;
    }
}

