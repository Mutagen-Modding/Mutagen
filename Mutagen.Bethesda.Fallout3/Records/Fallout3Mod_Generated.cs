/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout3;
using Mutagen.Bethesda.Fallout3.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Parameters;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Cache.Internals;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Masters;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Loqui;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Strings.DI;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout3.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout3.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.IO.Abstractions;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Threading.Tasks;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout3
{
    #region Class
    public partial class Fallout3Mod :
        IEquatable<IFallout3ModGetter>,
        IFallout3Mod,
        ILoquiObjectSetter<Fallout3Mod>
    {
        #region Ctor
        public Fallout3Mod()
        {
            _GameSettings_Object = new Fallout3Group<GameSetting>(this);
            _TextureSets_Object = new Fallout3Group<TextureSet>(this);
            _MenuIcons_Object = new Fallout3Group<MenuIcon>(this);
            _Globals_Object = new Fallout3Group<Global>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly Fallout3ModHeader _ModHeader_Object = new Fallout3ModHeader();
        public Fallout3ModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout3ModHeaderGetter IFallout3ModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout3Group<GameSetting> _GameSettings_Object;
        public Fallout3Group<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout3GroupGetter<IGameSettingGetter> IFallout3ModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region TextureSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout3Group<TextureSet> _TextureSets_Object;
        public Fallout3Group<TextureSet> TextureSets => _TextureSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout3GroupGetter<ITextureSetGetter> IFallout3ModGetter.TextureSets => _TextureSets_Object;
        #endregion
        #region MenuIcons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout3Group<MenuIcon> _MenuIcons_Object;
        public Fallout3Group<MenuIcon> MenuIcons => _MenuIcons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout3GroupGetter<IMenuIconGetter> IFallout3ModGetter.MenuIcons => _MenuIcons_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Fallout3Group<Global> _Globals_Object;
        public Fallout3Group<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFallout3GroupGetter<IGlobalGetter> IFallout3ModGetter.Globals => _Globals_Object;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            Fallout3ModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFallout3ModGetter rhs) return false;
            return ((Fallout3ModCommon)((IFallout3ModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFallout3ModGetter? obj)
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((Fallout3ModCommon)((IFallout3ModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, Fallout3ModHeader.Mask<TItem>?>(initialValue, new Fallout3ModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, Fallout3Group.Mask<TItem>?>(initialValue, new Fallout3Group.Mask<TItem>(initialValue));
                this.TextureSets = new MaskItem<TItem, Fallout3Group.Mask<TItem>?>(initialValue, new Fallout3Group.Mask<TItem>(initialValue));
                this.MenuIcons = new MaskItem<TItem, Fallout3Group.Mask<TItem>?>(initialValue, new Fallout3Group.Mask<TItem>(initialValue));
                this.Globals = new MaskItem<TItem, Fallout3Group.Mask<TItem>?>(initialValue, new Fallout3Group.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem TextureSets,
                TItem MenuIcons,
                TItem Globals)
            {
                this.ModHeader = new MaskItem<TItem, Fallout3ModHeader.Mask<TItem>?>(ModHeader, new Fallout3ModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, Fallout3Group.Mask<TItem>?>(GameSettings, new Fallout3Group.Mask<TItem>(GameSettings));
                this.TextureSets = new MaskItem<TItem, Fallout3Group.Mask<TItem>?>(TextureSets, new Fallout3Group.Mask<TItem>(TextureSets));
                this.MenuIcons = new MaskItem<TItem, Fallout3Group.Mask<TItem>?>(MenuIcons, new Fallout3Group.Mask<TItem>(MenuIcons));
                this.Globals = new MaskItem<TItem, Fallout3Group.Mask<TItem>?>(Globals, new Fallout3Group.Mask<TItem>(Globals));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Fallout3ModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, Fallout3Group.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, Fallout3Group.Mask<TItem>?>? TextureSets { get; set; }
            public MaskItem<TItem, Fallout3Group.Mask<TItem>?>? MenuIcons { get; set; }
            public MaskItem<TItem, Fallout3Group.Mask<TItem>?>? Globals { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.TextureSets, rhs.TextureSets)) return false;
                if (!object.Equals(this.MenuIcons, rhs.MenuIcons)) return false;
                if (!object.Equals(this.Globals, rhs.Globals)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.TextureSets);
                hash.Add(this.MenuIcons);
                hash.Add(this.Globals);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (TextureSets != null)
                {
                    if (!eval(this.TextureSets.Overall)) return false;
                    if (this.TextureSets.Specific != null && !this.TextureSets.Specific.All(eval)) return false;
                }
                if (MenuIcons != null)
                {
                    if (!eval(this.MenuIcons.Overall)) return false;
                    if (this.MenuIcons.Specific != null && !this.MenuIcons.Specific.All(eval)) return false;
                }
                if (Globals != null)
                {
                    if (!eval(this.Globals.Overall)) return false;
                    if (this.Globals.Specific != null && !this.Globals.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (TextureSets != null)
                {
                    if (eval(this.TextureSets.Overall)) return true;
                    if (this.TextureSets.Specific != null && this.TextureSets.Specific.Any(eval)) return true;
                }
                if (MenuIcons != null)
                {
                    if (eval(this.MenuIcons.Overall)) return true;
                    if (this.MenuIcons.Specific != null && this.MenuIcons.Specific.Any(eval)) return true;
                }
                if (Globals != null)
                {
                    if (eval(this.Globals.Overall)) return true;
                    if (this.Globals.Specific != null && this.Globals.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Fallout3Mod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, Fallout3ModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, Fallout3Group.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.TextureSets = this.TextureSets == null ? null : new MaskItem<R, Fallout3Group.Mask<R>?>(eval(this.TextureSets.Overall), this.TextureSets.Specific?.Translate(eval));
                obj.MenuIcons = this.MenuIcons == null ? null : new MaskItem<R, Fallout3Group.Mask<R>?>(eval(this.MenuIcons.Overall), this.MenuIcons.Specific?.Translate(eval));
                obj.Globals = this.Globals == null ? null : new MaskItem<R, Fallout3Group.Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Fallout3Mod.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Fallout3Mod.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Fallout3Mod.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.Print(sb);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.Print(sb);
                    }
                    if (printMask?.TextureSets?.Overall ?? true)
                    {
                        TextureSets?.Print(sb);
                    }
                    if (printMask?.MenuIcons?.Overall ?? true)
                    {
                        MenuIcons?.Print(sb);
                    }
                    if (printMask?.Globals?.Overall ?? true)
                    {
                        Globals?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, Fallout3ModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, Fallout3Group.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, Fallout3Group.ErrorMask<TextureSet.ErrorMask>?>? TextureSets;
            public MaskItem<Exception?, Fallout3Group.ErrorMask<MenuIcon.ErrorMask>?>? MenuIcons;
            public MaskItem<Exception?, Fallout3Group.ErrorMask<Global.ErrorMask>?>? Globals;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Fallout3Mod_FieldIndex enu = (Fallout3Mod_FieldIndex)index;
                switch (enu)
                {
                    case Fallout3Mod_FieldIndex.ModHeader:
                        return ModHeader;
                    case Fallout3Mod_FieldIndex.GameSettings:
                        return GameSettings;
                    case Fallout3Mod_FieldIndex.TextureSets:
                        return TextureSets;
                    case Fallout3Mod_FieldIndex.MenuIcons:
                        return MenuIcons;
                    case Fallout3Mod_FieldIndex.Globals:
                        return Globals;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Fallout3Mod_FieldIndex enu = (Fallout3Mod_FieldIndex)index;
                switch (enu)
                {
                    case Fallout3Mod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, Fallout3ModHeader.ErrorMask?>(ex, null);
                        break;
                    case Fallout3Mod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, Fallout3Group.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case Fallout3Mod_FieldIndex.TextureSets:
                        this.TextureSets = new MaskItem<Exception?, Fallout3Group.ErrorMask<TextureSet.ErrorMask>?>(ex, null);
                        break;
                    case Fallout3Mod_FieldIndex.MenuIcons:
                        this.MenuIcons = new MaskItem<Exception?, Fallout3Group.ErrorMask<MenuIcon.ErrorMask>?>(ex, null);
                        break;
                    case Fallout3Mod_FieldIndex.Globals:
                        this.Globals = new MaskItem<Exception?, Fallout3Group.ErrorMask<Global.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Fallout3Mod_FieldIndex enu = (Fallout3Mod_FieldIndex)index;
                switch (enu)
                {
                    case Fallout3Mod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, Fallout3ModHeader.ErrorMask?>?)obj;
                        break;
                    case Fallout3Mod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, Fallout3Group.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case Fallout3Mod_FieldIndex.TextureSets:
                        this.TextureSets = (MaskItem<Exception?, Fallout3Group.ErrorMask<TextureSet.ErrorMask>?>?)obj;
                        break;
                    case Fallout3Mod_FieldIndex.MenuIcons:
                        this.MenuIcons = (MaskItem<Exception?, Fallout3Group.ErrorMask<MenuIcon.ErrorMask>?>?)obj;
                        break;
                    case Fallout3Mod_FieldIndex.Globals:
                        this.Globals = (MaskItem<Exception?, Fallout3Group.ErrorMask<Global.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (TextureSets != null) return true;
                if (MenuIcons != null) return true;
                if (Globals != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                ModHeader?.Print(sb);
                GameSettings?.Print(sb);
                TextureSets?.Print(sb);
                MenuIcons?.Print(sb);
                Globals?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.TextureSets = this.TextureSets.Combine(rhs.TextureSets, (l, r) => l.Combine(r));
                ret.MenuIcons = this.MenuIcons.Combine(rhs.MenuIcons, (l, r) => l.Combine(r));
                ret.Globals = this.Globals.Combine(rhs.Globals, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public Fallout3ModHeader.TranslationMask? ModHeader;
            public Fallout3Group.TranslationMask<GameSetting.TranslationMask>? GameSettings;
            public Fallout3Group.TranslationMask<TextureSet.TranslationMask>? TextureSets;
            public Fallout3Group.TranslationMask<MenuIcon.TranslationMask>? MenuIcons;
            public Fallout3Group.TranslationMask<Global.TranslationMask>? Globals;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader != null ? ModHeader.OnOverall : DefaultOn, ModHeader?.GetCrystal()));
                ret.Add((GameSettings != null ? GameSettings.OnOverall : DefaultOn, GameSettings?.GetCrystal()));
                ret.Add((TextureSets != null ? TextureSets.OnOverall : DefaultOn, TextureSets?.GetCrystal()));
                ret.Add((MenuIcons != null ? MenuIcons.OnOverall : DefaultOn, MenuIcons?.GetCrystal()));
                ret.Add((Globals != null ? Globals.OnOverall : DefaultOn, Globals?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public Fallout3Release Fallout3Release { get; }
        public override GameRelease GameRelease => Fallout3Release.ToGameRelease();
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        IGroup<T>? IMod.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroup? IMod.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        uint IModGetter.GetRecordCount() => this.GetRecordCount();
        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => Fallout3ModMixIn.GetEqualsMask(this, (IFallout3ModGetter)rhs, include);
        public override bool CanUseLocalization => false;
        public override bool UsingLocalization
        {
            get => false;
            set => throw new ArgumentException("Tried to set localization flag on unsupported mod type");
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<MasterReference> IMod.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IMod.NextFormID
        {
            get => this.ModHeader.Stats.NextFormID;
            set => this.ModHeader.Stats.NextFormID = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IModGetter.NextFormID => this.ModHeader.Stats.NextFormID;
        /// <param name="modKey">ModKey to assign to the mod</param>
        /// <param name="release">Release to assign to the mod</param>
        /// <param name="headerVersion">Header version to assign to the mod.  Default value is latest header version the game supports</param>
        /// <param name="forceUseLowerFormIDRanges">Default value of false, which will not use lower FormID ranges from 1-X.  A null value will refer to header version + game release to determine if it should be allowed.  True will force it to always use FormIDs 1-X</param>
        public Fallout3Mod(
            ModKey modKey,
            Fallout3Release release,
            float? headerVersion = null,
            bool? forceUseLowerFormIDRanges = false)
            : base(modKey)
        {
            if (headerVersion != null)
            {
                this.ModHeader.Stats.Version = headerVersion.Value;
            }
            this.Fallout3Release = release;
            this.ModHeader.Stats.NextFormID = GetDefaultInitialNextFormID(forceUseLowerFormIDRanges: forceUseLowerFormIDRanges);
            _GameSettings_Object = new Fallout3Group<GameSetting>(this);
            _TextureSets_Object = new Fallout3Group<TextureSet>(this);
            _MenuIcons_Object = new Fallout3Group<MenuIcon>(this);
            _Globals_Object = new Fallout3Group<Global>(this);
            CustomCtor();
        }
        public void AddRecords(
            Fallout3Mod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(rhsMod.TextureSets.RecordCache.Items);
            }
            if (mask?.MenuIcons ?? true)
            {
                this.MenuIcons.RecordCache.Set(rhsMod.MenuIcons.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = this.GetRecordCount();
        }

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => Fallout3ModCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => Fallout3ModSetterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout3Mod, IFallout3ModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IFallout3Mod, IFallout3ModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout3Mod, IFallout3ModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IFallout3Mod, IFallout3ModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => Fallout3ModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks() => Fallout3ModSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => Fallout3ModSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => Fallout3ModSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        #region Binary Create
        public static Fallout3Mod CreateFromBinary(
            ModPath path,
            Fallout3Release release,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static Fallout3Mod CreateFromBinary(
            ModPath path,
            Fallout3Release release,
            ErrorMaskBuilder? errorMask,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static Fallout3Mod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            Fallout3Release release,
            RecordTypeInfoCacheReader infoCache,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        public static Fallout3Mod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            Fallout3Release release,
            RecordTypeInfoCacheReader infoCache,
            ErrorMaskBuilder? errorMask,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        #endregion

        public static IFallout3ModDisposableGetter CreateFromBinaryOverlay(
            ModPath path,
            Fallout3Release release,
            BinaryReadParameters? param = null)
        {
            return Fallout3ModBinaryOverlay.Fallout3ModFactory(
                path: path,
                release: release,
                param: param);
        }

        public static IFallout3ModDisposableGetter CreateFromBinaryOverlay(
            Stream stream,
            Fallout3Release release,
            ModKey modKey,
            BinaryReadParameters? param = null)
        {
            param ??= BinaryReadParameters.Default;
            var meta = ParsingMeta.Factory(param, release.ToGameRelease(), modKey, stream);
            return Fallout3ModBinaryOverlay.Fallout3ModFactory(
                stream: new MutagenBinaryReadStream(stream, meta),
                modKey: modKey,
                release: release,
                shouldDispose: false);
        }

        public static Fallout3Mod CreateFromBinary(
            MutagenFrame frame,
            Fallout3Release release,
            GroupMask? importMask = null)
        {
            try
            {
                var ret = new Fallout3Mod(
                    modKey: frame.MetaData.ModKey,
                    release: release);
                ((Fallout3ModSetterCommon)((IFallout3ModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                    item: ret,
                    frame: frame,
                    release: release,
                    importMask: importMask);
                return ret;
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, frame.MetaData.ModKey);
                throw;
            }
        }

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Fallout3Mod GetNew()
        {
            return new Fallout3Mod();
        }

    }
    #endregion

    #region Interface
    public partial interface IFallout3Mod :
        IAssetLinkContainer,
        IContextMod<IFallout3Mod, IFallout3ModGetter>,
        IFallout3ModGetter,
        ILoquiObjectSetter<IFallout3Mod>,
        IMajorRecordEnumerable,
        IMod
    {
        new Fallout3ModHeader ModHeader { get; }
        new Fallout3Group<GameSetting> GameSettings { get; }
        new Fallout3Group<TextureSet> TextureSets { get; }
        new Fallout3Group<MenuIcon> MenuIcons { get; }
        new Fallout3Group<Global> Globals { get; }
    }

    public partial interface IFallout3ModGetter :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IContextGetterMod<IFallout3Mod, IFallout3ModGetter>,
        ILoquiObject<IFallout3ModGetter>,
        IMajorRecordContextEnumerable<IFallout3Mod, IFallout3ModGetter>,
        IMajorRecordGetterEnumerable,
        IModGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Fallout3Mod_Registration.Instance;
        IFallout3ModHeaderGetter ModHeader { get; }
        IFallout3GroupGetter<IGameSettingGetter> GameSettings { get; }
        IFallout3GroupGetter<ITextureSetGetter> TextureSets { get; }
        IFallout3GroupGetter<IMenuIconGetter> MenuIcons { get; }
        IFallout3GroupGetter<IGlobalGetter> Globals { get; }

        #region Mutagen
        Fallout3Release Fallout3Release { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class Fallout3ModMixIn
    {
        public static void Clear(this IFallout3Mod item)
        {
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Fallout3Mod.Mask<bool> GetEqualsMask(
            this IFallout3ModGetter item,
            IFallout3ModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFallout3ModGetter item,
            string? name = null,
            Fallout3Mod.Mask<bool>? printMask = null)
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFallout3ModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Fallout3Mod.Mask<bool>? printMask = null)
        {
            ((Fallout3ModCommon)((IFallout3ModGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFallout3ModGetter item,
            IFallout3ModGetter rhs,
            Fallout3Mod.TranslationMask? equalsMask = null)
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFallout3Mod lhs,
            IFallout3ModGetter rhs)
        {
            ((Fallout3ModSetterTranslationCommon)((IFallout3ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFallout3Mod lhs,
            IFallout3ModGetter rhs,
            Fallout3Mod.TranslationMask? copyMask = null)
        {
            ((Fallout3ModSetterTranslationCommon)((IFallout3ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFallout3Mod lhs,
            IFallout3ModGetter rhs,
            out Fallout3Mod.ErrorMask errorMask,
            Fallout3Mod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((Fallout3ModSetterTranslationCommon)((IFallout3ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Fallout3Mod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFallout3Mod lhs,
            IFallout3ModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((Fallout3ModSetterTranslationCommon)((IFallout3ModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Fallout3Mod DeepCopy(
            this IFallout3ModGetter item,
            Fallout3Mod.TranslationMask? copyMask = null)
        {
            return ((Fallout3ModSetterTranslationCommon)((IFallout3ModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Fallout3Mod DeepCopy(
            this IFallout3ModGetter item,
            out Fallout3Mod.ErrorMask errorMask,
            Fallout3Mod.TranslationMask? copyMask = null)
        {
            return ((Fallout3ModSetterTranslationCommon)((IFallout3ModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Fallout3Mod DeepCopy(
            this IFallout3ModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((Fallout3ModSetterTranslationCommon)((IFallout3ModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IGroupGetter<T>? TryGetTopLevelGroup<T>(this IFallout3ModGetter obj)
            where T : IMajorRecordGetter
        {
            return (IGroupGetter<T>?)((Fallout3ModCommon)((IFallout3ModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroupGetter? TryGetTopLevelGroup(
            this IFallout3ModGetter obj,
            Type type)
        {
            return (IGroupGetter?)((Fallout3ModCommon)((IFallout3ModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static IGroup<T>? TryGetTopLevelGroup<T>(this IFallout3Mod obj)
            where T : IMajorRecord
        {
            return (IGroup<T>?)((Fallout3ModCommon)((IFallout3ModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroup? TryGetTopLevelGroup(
            this IFallout3Mod obj,
            Type type)
        {
            return (IGroup?)((Fallout3ModCommon)((IFallout3ModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static uint GetRecordCount(this IFallout3ModGetter item)
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)item).CommonInstance()!).GetRecordCount(item: item);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this IFallout3ModGetter obj)
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this IFallout3ModGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this IFallout3ModGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this IFallout3Mod obj)
        {
            return ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this IFallout3Mod obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this IFallout3Mod obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout3Mod obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout3Mod obj,
            IEnumerable<FormKey> keys)
        {
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout3Mod obj,
            IEnumerable<IFormLinkIdentifier> keys)
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout3Mod obj,
            HashSet<FormKey> keys)
        {
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout3Mod obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout3Mod obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this IFallout3Mod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout3Mod obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout3Mod obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout3Mod obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout3Mod obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this IFallout3Mod obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IFallout3Mod, IFallout3ModGetter, TSetter, TGetter>> EnumerateMajorRecordContexts<TSetter, TGetter>(
            this IFallout3ModGetter obj,
            ILinkCache linkCache,
            bool throwIfUnknown = true)
            where TSetter : class, IMajorRecordQueryable, TGetter
            where TGetter : class, IMajorRecordQueryableGetter
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: typeof(TGetter),
                throwIfUnknown: throwIfUnknown)
                .Select(m => m.AsType<IFallout3Mod, IFallout3ModGetter, IMajorRecordQueryable, IMajorRecordQueryableGetter, TSetter, TGetter>())
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IMajorRecordGetter>> EnumerateMajorRecordContexts(this IFallout3ModGetter obj)
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: null!)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IFallout3Mod, IFallout3ModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            this IFallout3ModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFallout3Mod item,
            MutagenFrame frame,
            Fallout3Release release,
            GroupMask? importMask = null)
        {
            ((Fallout3ModSetterCommon)((IFallout3ModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                release: release,
                importMask: importMask);
        }

        public static void CopyInFromBinary(
            this IFallout3Mod item,
            ModPath path,
            Fallout3Release release,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    CopyInFromBinary(
                        item: item,
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static void CopyInFromBinary(
            this IFallout3Mod item,
            Stream stream,
            ModKey modKey,
            Fallout3Release release,
            RecordTypeInfoCacheReader infoCache,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    CopyInFromBinary(
                        item: item,
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    #region Field Index
    internal enum Fallout3Mod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        TextureSets = 2,
        MenuIcons = 3,
        Globals = 4,
    }
    #endregion

    #region Registration
    internal partial class Fallout3Mod_Registration : ILoquiRegistration
    {
        public static readonly Fallout3Mod_Registration Instance = new Fallout3Mod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout3.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(Fallout3Mod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Fallout3Mod.ErrorMask);

        public static readonly Type ClassType = typeof(Fallout3Mod);

        public static readonly Type GetterType = typeof(IFallout3ModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFallout3Mod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout3.Fallout3Mod";

        public const string Name = "Fallout3Mod";

        public const string Namespace = "Mutagen.Bethesda.Fallout3";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static readonly Type BinaryWriteTranslation = typeof(Fallout3ModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class Fallout3ModSetterCommon
    {
        public static readonly Fallout3ModSetterCommon Instance = new Fallout3ModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFallout3Mod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.TextureSets.Clear();
            item.MenuIcons.Clear();
            item.Globals.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IFallout3Mod obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(IFallout3Mod obj)
        {
            foreach (var item in Fallout3ModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IFallout3Mod obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IFallout3Mod obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in Fallout3ModCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            IFallout3Mod obj,
            HashSet<FormKey> keys)
        {
            obj.GameSettings.Remove(keys);
            obj.TextureSets.Remove(keys);
            obj.MenuIcons.Remove(keys);
            obj.Globals.Remove(keys);
        }
        
        public void Remove(
            IFallout3Mod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout3MajorRecord":
                case "Fallout3MajorRecord":
                case "IMajorRecordGetter":
                case "IFallout3MajorRecordGetter":
                    if (!Fallout3Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                case "GameSettingInt":
                case "IGameSettingIntGetter":
                case "IGameSettingInt":
                case "IGameSettingIntInternal":
                case "GameSettingFloat":
                case "IGameSettingFloatGetter":
                case "IGameSettingFloat":
                case "IGameSettingFloatInternal":
                case "GameSettingString":
                case "IGameSettingStringGetter":
                case "IGameSettingString":
                case "IGameSettingStringInternal":
                    obj.GameSettings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    obj.TextureSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MenuIcon":
                case "IMenuIconGetter":
                case "IMenuIcon":
                case "IMenuIconInternal":
                    obj.MenuIcons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                case "GlobalInt":
                case "IGlobalIntGetter":
                case "IGlobalInt":
                case "IGlobalIntInternal":
                case "GlobalShort":
                case "IGlobalShortGetter":
                case "IGlobalShort":
                case "IGlobalShortInternal":
                case "GlobalFloat":
                case "IGlobalFloatGetter":
                case "IGlobalFloat":
                case "IGlobalFloatInternal":
                case "GlobalUnknown":
                case "IGlobalUnknownGetter":
                case "IGlobalUnknown":
                case "IGlobalUnknownInternal":
                    obj.Globals.Remove(
                        type: type,
                        keys: keys);
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IFallout3Mod obj)
        {
            {
                foreach (var item in obj.TextureSets.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.MenuIcons.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IFallout3Mod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            obj.TextureSets.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.MenuIcons.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFallout3Mod item,
            MutagenFrame frame,
            Fallout3Release release,
            GroupMask? importMask = null)
        {
            PluginUtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                fillTyped: Fallout3ModBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class Fallout3ModCommon
    {
        public static readonly Fallout3ModCommon Instance = new Fallout3ModCommon();

        public Fallout3Mod.Mask<bool> GetEqualsMask(
            IFallout3ModGetter item,
            IFallout3ModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Fallout3Mod.Mask<bool>(false);
            ((Fallout3ModCommon)((IFallout3ModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFallout3ModGetter item,
            IFallout3ModGetter rhs,
            Fallout3Mod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.TextureSets = MaskItemExt.Factory(item.TextureSets.GetEqualsMask(rhs.TextureSets, include), include);
            ret.MenuIcons = MaskItemExt.Factory(item.MenuIcons.GetEqualsMask(rhs.MenuIcons, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
        }
        
        public string Print(
            IFallout3ModGetter item,
            string? name = null,
            Fallout3Mod.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFallout3ModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Fallout3Mod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Fallout3Mod =>");
            }
            else
            {
                sb.AppendLine($"{name} (Fallout3Mod) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFallout3ModGetter item,
            StructuredStringBuilder sb,
            Fallout3Mod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.Print(sb, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.Print(sb, "GameSettings");
            }
            if (printMask?.TextureSets?.Overall ?? true)
            {
                item.TextureSets?.Print(sb, "TextureSets");
            }
            if (printMask?.MenuIcons?.Overall ?? true)
            {
                item.MenuIcons?.Print(sb, "MenuIcons");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.Print(sb, "Globals");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFallout3ModGetter? lhs,
            IFallout3ModGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Fallout3Mod_FieldIndex.ModHeader) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ModHeader, rhs.ModHeader, out var lhsModHeader, out var rhsModHeader, out var isModHeaderEqual))
                {
                    if (!((Fallout3ModHeaderCommon)((IFallout3ModHeaderGetter)lhsModHeader).CommonInstance()!).Equals(lhsModHeader, rhsModHeader, equalsMask?.GetSubCrystal((int)Fallout3Mod_FieldIndex.ModHeader))) return false;
                }
                else if (!isModHeaderEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout3Mod_FieldIndex.GameSettings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GameSettings, rhs.GameSettings, out var lhsGameSettings, out var rhsGameSettings, out var isGameSettingsEqual))
                {
                    if (!object.Equals(lhsGameSettings, rhsGameSettings)) return false;
                }
                else if (!isGameSettingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout3Mod_FieldIndex.TextureSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TextureSets, rhs.TextureSets, out var lhsTextureSets, out var rhsTextureSets, out var isTextureSetsEqual))
                {
                    if (!object.Equals(lhsTextureSets, rhsTextureSets)) return false;
                }
                else if (!isTextureSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout3Mod_FieldIndex.MenuIcons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MenuIcons, rhs.MenuIcons, out var lhsMenuIcons, out var rhsMenuIcons, out var isMenuIconsEqual))
                {
                    if (!object.Equals(lhsMenuIcons, rhsMenuIcons)) return false;
                }
                else if (!isMenuIconsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Fallout3Mod_FieldIndex.Globals) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Globals, rhs.Globals, out var lhsGlobals, out var rhsGlobals, out var isGlobalsEqual))
                {
                    if (!object.Equals(lhsGlobals, rhsGlobals)) return false;
                }
                else if (!isGlobalsEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IFallout3ModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.TextureSets);
            hash.Add(item.MenuIcons);
            hash.Add(item.Globals);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Fallout3Mod.GetNew();
        }
        
        #region Mutagen
        public object? GetGroup(
            IFallout3ModGetter obj,
            Type type)
        {
            switch (type.Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    return obj.TextureSets;
                case "MenuIcon":
                case "IMenuIconGetter":
                case "IMenuIcon":
                case "IMenuIconInternal":
                    return obj.MenuIcons;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals;
                default:
                    return null;
            }
        }
        
        public static void WriteParallel(
            IFallout3ModGetter item,
            MutagenWriter writer,
            BinaryWriteParameters param,
            ModKey modKey)
        {
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            Stream[] outputStreams = new Stream[4];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, 0, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.TextureSets, 1, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MenuIcons, 2, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Globals, 3, outputStreams, writer.MetaData, param.Parallel));
            Parallel.Invoke(param.Parallel.ParallelOptions, toDo.ToArray());
            PluginUtilityTranslation.CompileStreamsInto(
                outputStreams.WhereNotNull(),
                writer.BaseStream);
        }
        
        public static void WriteGroupParallel<T>(
            IFallout3GroupGetter<T> group,
            int targetIndex,
            Stream[] streamDepositArray,
            WritingBundle bundle,
            ParallelWriteParameters parallelParam)
            where T : class, IFallout3MajorRecordGetter, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Cut(parallelParam.CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[bundle.Constants.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), RecordTypes.GRUP.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, bundle.Constants, dispose: false))
            {
                stream.Position += 8;
                Fallout3GroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, parallelParam.ParallelOptions, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, bundle with {}, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            PluginUtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public uint GetRecordCount(IFallout3ModGetter item)
        {
            uint count = (uint)item.EnumerateMajorRecords().Count();
            count += item.GameSettings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.TextureSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MenuIcons.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Globals.RecordCache.Count > 0 ? 1 : default(uint);
            GetCustomRecordCount(item, (customCount) => count += customCount);
            return count;
        }
        
        partial void GetCustomRecordCount(IFallout3ModGetter item, Action<uint> setter);
        
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFallout3ModGetter obj)
        {
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(IFallout3ModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TextureSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MenuIcons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            IFallout3ModGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            IFallout3ModGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout3MajorRecord":
                case "Fallout3MajorRecord":
                    if (!Fallout3Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IFallout3MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in obj.TextureSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MenuIcon":
                case "IMenuIconGetter":
                case "IMenuIcon":
                case "IMenuIconInternal":
                    foreach (var item in obj.MenuIcons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Fallout3, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<IFallout3Mod, IFallout3ModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IFallout3ModGetter obj,
            ILinkCache linkCache)
        {
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout3Mod, IFallout3ModGetter, GameSetting, IGameSettingGetter>(
                srcGroup: obj.GameSettings,
                type: typeof(IGameSettingGetter),
                modKey: obj.ModKey,
                group: (m) => m.GameSettings,
                groupGetter: (m) => m.GameSettings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout3Mod, IFallout3ModGetter, TextureSet, ITextureSetGetter>(
                srcGroup: obj.TextureSets,
                type: typeof(ITextureSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.TextureSets,
                groupGetter: (m) => m.TextureSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout3Mod, IFallout3ModGetter, MenuIcon, IMenuIconGetter>(
                srcGroup: obj.MenuIcons,
                type: typeof(IMenuIconGetter),
                modKey: obj.ModKey,
                group: (m) => m.MenuIcons,
                groupGetter: (m) => m.MenuIcons))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout3Mod, IFallout3ModGetter, Global, IGlobalGetter>(
                srcGroup: obj.Globals,
                type: typeof(IGlobalGetter),
                modKey: obj.ModKey,
                group: (m) => m.Globals,
                groupGetter: (m) => m.Globals))
            {
                yield return item;
            }
        }
        
        public IEnumerable<IModContext<IFallout3Mod, IFallout3ModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            IFallout3ModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "IFallout3MajorRecord":
                case "Fallout3MajorRecord":
                    if (!Fallout3Mod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "IFallout3MajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout3Mod, IFallout3ModGetter, GameSetting, IGameSettingGetter>(
                        srcGroup: obj.GameSettings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GameSettings,
                        groupGetter: (m) => m.GameSettings))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout3Mod, IFallout3ModGetter, TextureSet, ITextureSetGetter>(
                        srcGroup: obj.TextureSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.TextureSets,
                        groupGetter: (m) => m.TextureSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "MenuIcon":
                case "IMenuIconGetter":
                case "IMenuIcon":
                case "IMenuIconInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout3Mod, IFallout3ModGetter, MenuIcon, IMenuIconGetter>(
                        srcGroup: obj.MenuIcons,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MenuIcons,
                        groupGetter: (m) => m.MenuIcons))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<IFallout3Mod, IFallout3ModGetter, Global, IGlobalGetter>(
                        srcGroup: obj.Globals,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Globals,
                        groupGetter: (m) => m.Globals))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<IFallout3ModGetter, IFallout3Mod, IFallout3ModGetter>(
                        GameCategory.Fallout3,
                        obj,
                        type,
                        linkCache,
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IFallout3ModGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in obj.TextureSets.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.MenuIcons.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class Fallout3ModSetterTranslationCommon
    {
        public static readonly Fallout3ModSetterTranslationCommon Instance = new Fallout3ModSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFallout3Mod item,
            IFallout3ModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Fallout3Mod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)Fallout3Mod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout3Mod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout3Mod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)Fallout3Mod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout3Mod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout3Mod_FieldIndex.TextureSets) ?? true))
            {
                errorMask?.PushIndex((int)Fallout3Mod_FieldIndex.TextureSets);
                try
                {
                    item.TextureSets.DeepCopyIn(
                        rhs: rhs.TextureSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout3Mod_FieldIndex.TextureSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout3Mod_FieldIndex.MenuIcons) ?? true))
            {
                errorMask?.PushIndex((int)Fallout3Mod_FieldIndex.MenuIcons);
                try
                {
                    item.MenuIcons.DeepCopyIn(
                        rhs: rhs.MenuIcons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout3Mod_FieldIndex.MenuIcons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Fallout3Mod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)Fallout3Mod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)Fallout3Mod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFallout3Mod item,
            IFallout3ModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public partial Fallout3Mod DeepCopyGetNew(IFallout3ModGetter item);
        public Fallout3Mod DeepCopy(
            IFallout3ModGetter item,
            Fallout3Mod.TranslationMask? copyMask = null)
        {
            var ret = DeepCopyGetNew(item);
            ((Fallout3ModSetterTranslationCommon)((IFallout3ModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Fallout3Mod DeepCopy(
            IFallout3ModGetter item,
            out Fallout3Mod.ErrorMask errorMask,
            Fallout3Mod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            var ret = DeepCopyGetNew(item);
            ((Fallout3ModSetterTranslationCommon)((IFallout3ModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Fallout3Mod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Fallout3Mod DeepCopy(
            IFallout3ModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            var ret = DeepCopyGetNew(item);
            ((Fallout3ModSetterTranslationCommon)((IFallout3ModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    public partial class Fallout3Mod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Fallout3Mod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Fallout3Mod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => Fallout3ModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return Fallout3ModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => Fallout3ModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFallout3ModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFallout3ModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFallout3ModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Mutagen
namespace Mutagen.Bethesda.Fallout3
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool TextureSets;
        public bool MenuIcons;
        public bool Globals;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            TextureSets = defaultValue;
            MenuIcons = defaultValue;
            Globals = defaultValue;
        }
    }

    public interface IFallout3ModDisposableGetter : IFallout3ModGetter, IModDisposeGetter
    {
    }

    /// <summary>
    /// Different game release versions a Fallout3 mod can have
    /// </summary>
    public enum Fallout3Release
    {
        Fallout3 = 11,
        FalloutNV = 12
    }

    public static class Fallout3ReleaseExt
    {
        public static GameRelease ToGameRelease(this Fallout3Release release)
        {
            return release switch
            {
                Fallout3Release.Fallout3 => GameRelease.Fallout3,
                Fallout3Release.FalloutNV => GameRelease.FalloutNV,
                _ => throw new ArgumentException()
            };
        }

        public static Fallout3Release ToFallout3Release(this GameRelease release)
        {
            return release switch
            {
                GameRelease.Fallout3 => Fallout3Release.Fallout3,
                GameRelease.FalloutNV => Fallout3Release.FalloutNV,
                _ => throw new ArgumentException()
            };
        }
    }
}
namespace Mutagen.Bethesda.Fallout3
{
    internal partial class Fallout3Mod_Registration : IModRegistration
    {
        public GameCategory GameCategory => GameCategory.Fallout3;
    }

}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Fallout3
{
    public partial class Fallout3ModBinaryWriteTranslation
    {
        public static readonly Fallout3ModBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IFallout3ModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            TypedWriteParams translationParams = default)
        {
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((Fallout3GroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.TextureSets ?? true)
            {
                var TextureSetsItem = item.TextureSets;
                if (TextureSetsItem.RecordCache.Count > 0)
                {
                    ((Fallout3GroupBinaryWriteTranslation)((IBinaryItem)TextureSetsItem).BinaryWriteTranslator).Write<ITextureSetGetter>(
                        item: TextureSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MenuIcons ?? true)
            {
                var MenuIconsItem = item.MenuIcons;
                if (MenuIconsItem.RecordCache.Count > 0)
                {
                    ((Fallout3GroupBinaryWriteTranslation)((IBinaryItem)MenuIconsItem).BinaryWriteTranslator).Write<IMenuIconGetter>(
                        item: MenuIconsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Globals ?? true)
            {
                var GlobalsItem = item.Globals;
                if (GlobalsItem.RecordCache.Count > 0)
                {
                    ((Fallout3GroupBinaryWriteTranslation)((IBinaryItem)GlobalsItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: GlobalsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IFallout3ModGetter item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            param ??= BinaryWriteParameters.Default;
            if (param.Parallel.MaxDegreeOfParallelism != 1)
            {
                Fallout3ModCommon.WriteParallel(
                    item: item,
                    writer: writer,
                    param: param,
                    modKey: modKey);
                return;
            }
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            Write(
                item: (IFallout3ModGetter)item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

    }

    internal partial class Fallout3ModBinaryCreateTranslation
    {
        public static readonly Fallout3ModBinaryCreateTranslation Instance = new Fallout3ModBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IFallout3Mod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        translationParams: null);
                    return (int)Fallout3Mod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout3Mod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.TXST:
                {
                    if (importMask?.TextureSets ?? true)
                    {
                        item.TextureSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout3Mod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.MICN:
                {
                    if (importMask?.MenuIcons ?? true)
                    {
                        item.MenuIcons.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout3Mod_FieldIndex.MenuIcons;
                }
                case RecordTypeInts.GLOB:
                {
                    if (importMask?.Globals ?? true)
                    {
                        item.Globals.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)Fallout3Mod_FieldIndex.Globals;
                }
                default:
                    frame.Position += contentLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout3
{
    #region Binary Write Mixins
    public static class Fallout3ModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFallout3ModGetter item,
            MutagenWriter writer,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            var modKey = item.ModKey;
            Fallout3ModBinaryWriteTranslation.Instance.Write(
                item: item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

        public static void WriteToBinary(
            this IFallout3ModGetter item,
            FilePath path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            var bundle = new WritingBundle(item.Fallout3Release.ToGameRelease())
            {
                CleanNulls = param.CleanNulls,
                TargetLanguageOverride = param.TargetLanguageOverride,
                Header = item
            };
            if (param.Encodings != null)
            {
                bundle.Encodings = param.Encodings;
            }
            using var memStream = new MemoryTributary();
            using (var writer = new MutagenWriter(
                memStream,
                bundle,
                dispose: false))
            {
                Fallout3ModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
            using (var fs = param.FileSystem.GetOrDefault().FileStream.New(path, FileMode.Create, FileAccess.Write))
            {
                memStream.Position = 0;
                memStream.CopyTo(fs);
            }
            param.StringsWriter?.Dispose();
        }

        public static void WriteToBinary(
            this IFallout3ModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(
                stream: stream,
                new WritingBundle(item.Fallout3Release.ToGameRelease()),
                dispose: false))
            {
                Fallout3ModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout3
{
    [DebuggerDisplay("{GameRelease} {ModKey.ToString()}")]
    internal partial class Fallout3ModBinaryOverlay : IFallout3ModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Fallout3Mod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Fallout3Mod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => Fallout3ModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => Fallout3ModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFallout3ModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFallout3ModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFallout3ModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public Fallout3Release Fallout3Release { get; }
        public GameRelease GameRelease => Fallout3Release.ToGameRelease();
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        uint IModGetter.GetRecordCount() => this.GetRecordCount();
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public bool CanUseLocalization => false;
        public bool UsingLocalization => false;
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => Fallout3ModCommon.Instance.EnumerateFormLinks(this);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => Fallout3ModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout3Mod, IFallout3ModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<IFallout3Mod, IFallout3ModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IFallout3Mod, IFallout3ModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<IFallout3Mod, IFallout3ModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        uint IModGetter.NextFormID => ModHeader.Stats.NextFormID;
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _stream;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _stream.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private IFallout3ModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? Fallout3ModHeaderBinaryOverlay.Fallout3ModHeaderFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max), _package) : default;
        public IFallout3ModHeaderGetter ModHeader => _ModHeader ?? new Fallout3ModHeader();
        #endregion
        #region GameSettings
        private List<RangeInt64>? _GameSettingsLocations;
        private IFallout3GroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocations != null ? Fallout3GroupBinaryOverlay<IGameSettingGetter>.Fallout3GroupFactory(_stream, _GameSettingsLocations, _package) : default;
        public IFallout3GroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new Fallout3Group<GameSetting>(this);
        #endregion
        #region TextureSets
        private List<RangeInt64>? _TextureSetsLocations;
        private IFallout3GroupGetter<ITextureSetGetter>? _TextureSets => _TextureSetsLocations != null ? Fallout3GroupBinaryOverlay<ITextureSetGetter>.Fallout3GroupFactory(_stream, _TextureSetsLocations, _package) : default;
        public IFallout3GroupGetter<ITextureSetGetter> TextureSets => _TextureSets ?? new Fallout3Group<TextureSet>(this);
        #endregion
        #region MenuIcons
        private List<RangeInt64>? _MenuIconsLocations;
        private IFallout3GroupGetter<IMenuIconGetter>? _MenuIcons => _MenuIconsLocations != null ? Fallout3GroupBinaryOverlay<IMenuIconGetter>.Fallout3GroupFactory(_stream, _MenuIconsLocations, _package) : default;
        public IFallout3GroupGetter<IMenuIconGetter> MenuIcons => _MenuIcons ?? new Fallout3Group<MenuIcon>(this);
        #endregion
        #region Globals
        private List<RangeInt64>? _GlobalsLocations;
        private IFallout3GroupGetter<IGlobalGetter>? _Globals => _GlobalsLocations != null ? Fallout3GroupBinaryOverlay<IGlobalGetter>.Fallout3GroupFactory(_stream, _GlobalsLocations, _package) : default;
        public IFallout3GroupGetter<IGlobalGetter> Globals => _Globals ?? new Fallout3Group<Global>(this);
        #endregion
        protected Fallout3ModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose,
            Fallout3Release release)
        {
            this.ModKey = modKey;
            this.Fallout3Release = release;
            this._stream = stream;
            this._package = new BinaryOverlayFactoryPackage(stream.MetaData);
            this._shouldDispose = shouldDispose;
        }

        public static Fallout3ModBinaryOverlay Fallout3ModFactory(
            ModPath path,
            Fallout3Release release,
            BinaryReadParameters? param)
        {
            param ??= BinaryReadParameters.Default;
            var meta = ParsingMeta.Factory(param, release.ToGameRelease(), path);
            meta.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
            var stream = new MutagenBinaryReadStream(
                path: path.Path,
                metaData: meta);
            try
            {
                return Fallout3ModFactory(
                    stream: stream,
                    path.ModKey,
                    release: release,
                    shouldDispose: true);
            }
            catch (Exception)
            {
                stream.Dispose();
                throw;
            }
        }

        public static Fallout3ModBinaryOverlay Fallout3ModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            Fallout3Release release,
            bool shouldDispose)
        {
            var ret = new Fallout3ModBinaryOverlay(
                stream: stream,
                release: release,
                modKey: modKey,
                shouldDispose: shouldDispose);
            PluginBinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public ParseResult FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    return (int)Fallout3Mod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    _GameSettingsLocations ??= new();
                    _GameSettingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout3Mod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.TXST:
                {
                    _TextureSetsLocations ??= new();
                    _TextureSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout3Mod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.MICN:
                {
                    _MenuIconsLocations ??= new();
                    _MenuIconsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout3Mod_FieldIndex.MenuIcons;
                }
                case RecordTypeInts.GLOB:
                {
                    _GlobalsLocations ??= new();
                    _GlobalsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)Fallout3Mod_FieldIndex.Globals;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            Fallout3ModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFallout3ModGetter rhs) return false;
            return ((Fallout3ModCommon)((IFallout3ModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFallout3ModGetter? obj)
        {
            return ((Fallout3ModCommon)((IFallout3ModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((Fallout3ModCommon)((IFallout3ModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => Fallout3ModMixIn.GetEqualsMask(this, (IFallout3ModGetter)rhs, include);
    }

}
#endregion

#endregion

