/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout3.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout3.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout3.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout3
{
    #region Class
    public partial class Decal :
        IDecal,
        IEquatable<IDecalGetter>,
        ILoquiObjectSetter<Decal>
    {
        #region Ctor
        public Decal()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region MinWidth
        public Single MinWidth { get; set; } = default(Single);
        #endregion
        #region MaxWidth
        public Single MaxWidth { get; set; } = default(Single);
        #endregion
        #region MinHeight
        public Single MinHeight { get; set; } = default(Single);
        #endregion
        #region MaxHeight
        public Single MaxHeight { get; set; } = default(Single);
        #endregion
        #region Depth
        public Single Depth { get; set; } = default(Single);
        #endregion
        #region Shininess
        public Single Shininess { get; set; } = default(Single);
        #endregion
        #region ParallaxScale
        public Single ParallaxScale { get; set; } = default(Single);
        #endregion
        #region ParallaxPasses
        public Byte ParallaxPasses { get; set; } = default(Byte);
        #endregion
        #region Flags
        public Decal.Flag Flags { get; set; } = default(Decal.Flag);
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; } = default(UInt16);
        #endregion
        #region Color
        public Color Color { get; set; } = default(Color);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DecalMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDecalGetter rhs) return false;
            return ((DecalCommon)((IDecalGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDecalGetter? obj)
        {
            return ((DecalCommon)((IDecalGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DecalCommon)((IDecalGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MinWidth = initialValue;
                this.MaxWidth = initialValue;
                this.MinHeight = initialValue;
                this.MaxHeight = initialValue;
                this.Depth = initialValue;
                this.Shininess = initialValue;
                this.ParallaxScale = initialValue;
                this.ParallaxPasses = initialValue;
                this.Flags = initialValue;
                this.Unknown = initialValue;
                this.Color = initialValue;
            }

            public Mask(
                TItem MinWidth,
                TItem MaxWidth,
                TItem MinHeight,
                TItem MaxHeight,
                TItem Depth,
                TItem Shininess,
                TItem ParallaxScale,
                TItem ParallaxPasses,
                TItem Flags,
                TItem Unknown,
                TItem Color)
            {
                this.MinWidth = MinWidth;
                this.MaxWidth = MaxWidth;
                this.MinHeight = MinHeight;
                this.MaxHeight = MaxHeight;
                this.Depth = Depth;
                this.Shininess = Shininess;
                this.ParallaxScale = ParallaxScale;
                this.ParallaxPasses = ParallaxPasses;
                this.Flags = Flags;
                this.Unknown = Unknown;
                this.Color = Color;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MinWidth;
            public TItem MaxWidth;
            public TItem MinHeight;
            public TItem MaxHeight;
            public TItem Depth;
            public TItem Shininess;
            public TItem ParallaxScale;
            public TItem ParallaxPasses;
            public TItem Flags;
            public TItem Unknown;
            public TItem Color;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MinWidth, rhs.MinWidth)) return false;
                if (!object.Equals(this.MaxWidth, rhs.MaxWidth)) return false;
                if (!object.Equals(this.MinHeight, rhs.MinHeight)) return false;
                if (!object.Equals(this.MaxHeight, rhs.MaxHeight)) return false;
                if (!object.Equals(this.Depth, rhs.Depth)) return false;
                if (!object.Equals(this.Shininess, rhs.Shininess)) return false;
                if (!object.Equals(this.ParallaxScale, rhs.ParallaxScale)) return false;
                if (!object.Equals(this.ParallaxPasses, rhs.ParallaxPasses)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MinWidth);
                hash.Add(this.MaxWidth);
                hash.Add(this.MinHeight);
                hash.Add(this.MaxHeight);
                hash.Add(this.Depth);
                hash.Add(this.Shininess);
                hash.Add(this.ParallaxScale);
                hash.Add(this.ParallaxPasses);
                hash.Add(this.Flags);
                hash.Add(this.Unknown);
                hash.Add(this.Color);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.MinWidth)) return false;
                if (!eval(this.MaxWidth)) return false;
                if (!eval(this.MinHeight)) return false;
                if (!eval(this.MaxHeight)) return false;
                if (!eval(this.Depth)) return false;
                if (!eval(this.Shininess)) return false;
                if (!eval(this.ParallaxScale)) return false;
                if (!eval(this.ParallaxPasses)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Color)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.MinWidth)) return true;
                if (eval(this.MaxWidth)) return true;
                if (eval(this.MinHeight)) return true;
                if (eval(this.MaxHeight)) return true;
                if (eval(this.Depth)) return true;
                if (eval(this.Shininess)) return true;
                if (eval(this.ParallaxScale)) return true;
                if (eval(this.ParallaxPasses)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Color)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Decal.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MinWidth = eval(this.MinWidth);
                obj.MaxWidth = eval(this.MaxWidth);
                obj.MinHeight = eval(this.MinHeight);
                obj.MaxHeight = eval(this.MaxHeight);
                obj.Depth = eval(this.Depth);
                obj.Shininess = eval(this.Shininess);
                obj.ParallaxScale = eval(this.ParallaxScale);
                obj.ParallaxPasses = eval(this.ParallaxPasses);
                obj.Flags = eval(this.Flags);
                obj.Unknown = eval(this.Unknown);
                obj.Color = eval(this.Color);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Decal.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Decal.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Decal.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.MinWidth ?? true)
                    {
                        sb.AppendItem(MinWidth, "MinWidth");
                    }
                    if (printMask?.MaxWidth ?? true)
                    {
                        sb.AppendItem(MaxWidth, "MaxWidth");
                    }
                    if (printMask?.MinHeight ?? true)
                    {
                        sb.AppendItem(MinHeight, "MinHeight");
                    }
                    if (printMask?.MaxHeight ?? true)
                    {
                        sb.AppendItem(MaxHeight, "MaxHeight");
                    }
                    if (printMask?.Depth ?? true)
                    {
                        sb.AppendItem(Depth, "Depth");
                    }
                    if (printMask?.Shininess ?? true)
                    {
                        sb.AppendItem(Shininess, "Shininess");
                    }
                    if (printMask?.ParallaxScale ?? true)
                    {
                        sb.AppendItem(ParallaxScale, "ParallaxScale");
                    }
                    if (printMask?.ParallaxPasses ?? true)
                    {
                        sb.AppendItem(ParallaxPasses, "ParallaxPasses");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Color ?? true)
                    {
                        sb.AppendItem(Color, "Color");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? MinWidth;
            public Exception? MaxWidth;
            public Exception? MinHeight;
            public Exception? MaxHeight;
            public Exception? Depth;
            public Exception? Shininess;
            public Exception? ParallaxScale;
            public Exception? ParallaxPasses;
            public Exception? Flags;
            public Exception? Unknown;
            public Exception? Color;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                Decal_FieldIndex enu = (Decal_FieldIndex)index;
                switch (enu)
                {
                    case Decal_FieldIndex.MinWidth:
                        return MinWidth;
                    case Decal_FieldIndex.MaxWidth:
                        return MaxWidth;
                    case Decal_FieldIndex.MinHeight:
                        return MinHeight;
                    case Decal_FieldIndex.MaxHeight:
                        return MaxHeight;
                    case Decal_FieldIndex.Depth:
                        return Depth;
                    case Decal_FieldIndex.Shininess:
                        return Shininess;
                    case Decal_FieldIndex.ParallaxScale:
                        return ParallaxScale;
                    case Decal_FieldIndex.ParallaxPasses:
                        return ParallaxPasses;
                    case Decal_FieldIndex.Flags:
                        return Flags;
                    case Decal_FieldIndex.Unknown:
                        return Unknown;
                    case Decal_FieldIndex.Color:
                        return Color;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                Decal_FieldIndex enu = (Decal_FieldIndex)index;
                switch (enu)
                {
                    case Decal_FieldIndex.MinWidth:
                        this.MinWidth = ex;
                        break;
                    case Decal_FieldIndex.MaxWidth:
                        this.MaxWidth = ex;
                        break;
                    case Decal_FieldIndex.MinHeight:
                        this.MinHeight = ex;
                        break;
                    case Decal_FieldIndex.MaxHeight:
                        this.MaxHeight = ex;
                        break;
                    case Decal_FieldIndex.Depth:
                        this.Depth = ex;
                        break;
                    case Decal_FieldIndex.Shininess:
                        this.Shininess = ex;
                        break;
                    case Decal_FieldIndex.ParallaxScale:
                        this.ParallaxScale = ex;
                        break;
                    case Decal_FieldIndex.ParallaxPasses:
                        this.ParallaxPasses = ex;
                        break;
                    case Decal_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Decal_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Decal_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                Decal_FieldIndex enu = (Decal_FieldIndex)index;
                switch (enu)
                {
                    case Decal_FieldIndex.MinWidth:
                        this.MinWidth = (Exception?)obj;
                        break;
                    case Decal_FieldIndex.MaxWidth:
                        this.MaxWidth = (Exception?)obj;
                        break;
                    case Decal_FieldIndex.MinHeight:
                        this.MinHeight = (Exception?)obj;
                        break;
                    case Decal_FieldIndex.MaxHeight:
                        this.MaxHeight = (Exception?)obj;
                        break;
                    case Decal_FieldIndex.Depth:
                        this.Depth = (Exception?)obj;
                        break;
                    case Decal_FieldIndex.Shininess:
                        this.Shininess = (Exception?)obj;
                        break;
                    case Decal_FieldIndex.ParallaxScale:
                        this.ParallaxScale = (Exception?)obj;
                        break;
                    case Decal_FieldIndex.ParallaxPasses:
                        this.ParallaxPasses = (Exception?)obj;
                        break;
                    case Decal_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Decal_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Decal_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (MinWidth != null) return true;
                if (MaxWidth != null) return true;
                if (MinHeight != null) return true;
                if (MaxHeight != null) return true;
                if (Depth != null) return true;
                if (Shininess != null) return true;
                if (ParallaxScale != null) return true;
                if (ParallaxPasses != null) return true;
                if (Flags != null) return true;
                if (Unknown != null) return true;
                if (Color != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(MinWidth, "MinWidth");
                }
                {
                    sb.AppendItem(MaxWidth, "MaxWidth");
                }
                {
                    sb.AppendItem(MinHeight, "MinHeight");
                }
                {
                    sb.AppendItem(MaxHeight, "MaxHeight");
                }
                {
                    sb.AppendItem(Depth, "Depth");
                }
                {
                    sb.AppendItem(Shininess, "Shininess");
                }
                {
                    sb.AppendItem(ParallaxScale, "ParallaxScale");
                }
                {
                    sb.AppendItem(ParallaxPasses, "ParallaxPasses");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(Color, "Color");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MinWidth = this.MinWidth.Combine(rhs.MinWidth);
                ret.MaxWidth = this.MaxWidth.Combine(rhs.MaxWidth);
                ret.MinHeight = this.MinHeight.Combine(rhs.MinHeight);
                ret.MaxHeight = this.MaxHeight.Combine(rhs.MaxHeight);
                ret.Depth = this.Depth.Combine(rhs.Depth);
                ret.Shininess = this.Shininess.Combine(rhs.Shininess);
                ret.ParallaxScale = this.ParallaxScale.Combine(rhs.ParallaxScale);
                ret.ParallaxPasses = this.ParallaxPasses.Combine(rhs.ParallaxPasses);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Color = this.Color.Combine(rhs.Color);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool MinWidth;
            public bool MaxWidth;
            public bool MinHeight;
            public bool MaxHeight;
            public bool Depth;
            public bool Shininess;
            public bool ParallaxScale;
            public bool ParallaxPasses;
            public bool Flags;
            public bool Unknown;
            public bool Color;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.MinWidth = defaultOn;
                this.MaxWidth = defaultOn;
                this.MinHeight = defaultOn;
                this.MaxHeight = defaultOn;
                this.Depth = defaultOn;
                this.Shininess = defaultOn;
                this.ParallaxScale = defaultOn;
                this.ParallaxPasses = defaultOn;
                this.Flags = defaultOn;
                this.Unknown = defaultOn;
                this.Color = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MinWidth, null));
                ret.Add((MaxWidth, null));
                ret.Add((MinHeight, null));
                ret.Add((MaxHeight, null));
                ret.Add((Depth, null));
                ret.Add((Shininess, null));
                ret.Add((ParallaxScale, null));
                ret.Add((ParallaxPasses, null));
                ret.Add((Flags, null));
                ret.Add((Unknown, null));
                ret.Add((Color, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DecalBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DecalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static Decal CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Decal();
            ((DecalSetterCommon)((IDecalGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Decal item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DecalSetterCommon)((IDecalGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static Decal GetNew()
        {
            return new Decal();
        }

    }
    #endregion

    #region Interface
    public partial interface IDecal :
        IDecalGetter,
        ILoquiObjectSetter<IDecal>
    {
        new Single MinWidth { get; set; }
        new Single MaxWidth { get; set; }
        new Single MinHeight { get; set; }
        new Single MaxHeight { get; set; }
        new Single Depth { get; set; }
        new Single Shininess { get; set; }
        new Single ParallaxScale { get; set; }
        new Byte ParallaxPasses { get; set; }
        new Decal.Flag Flags { get; set; }
        new UInt16 Unknown { get; set; }
        new Color Color { get; set; }
    }

    public partial interface IDecalGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IDecalGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => Decal_Registration.Instance;
        Single MinWidth { get; }
        Single MaxWidth { get; }
        Single MinHeight { get; }
        Single MaxHeight { get; }
        Single Depth { get; }
        Single Shininess { get; }
        Single ParallaxScale { get; }
        Byte ParallaxPasses { get; }
        Decal.Flag Flags { get; }
        UInt16 Unknown { get; }
        Color Color { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DecalMixIn
    {
        public static void Clear(this IDecal item)
        {
            ((DecalSetterCommon)((IDecalGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Decal.Mask<bool> GetEqualsMask(
            this IDecalGetter item,
            IDecalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DecalCommon)((IDecalGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDecalGetter item,
            string? name = null,
            Decal.Mask<bool>? printMask = null)
        {
            return ((DecalCommon)((IDecalGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDecalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Decal.Mask<bool>? printMask = null)
        {
            ((DecalCommon)((IDecalGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDecalGetter item,
            IDecalGetter rhs,
            Decal.TranslationMask? equalsMask = null)
        {
            return ((DecalCommon)((IDecalGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDecal lhs,
            IDecalGetter rhs)
        {
            ((DecalSetterTranslationCommon)((IDecalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDecal lhs,
            IDecalGetter rhs,
            Decal.TranslationMask? copyMask = null)
        {
            ((DecalSetterTranslationCommon)((IDecalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IDecal lhs,
            IDecalGetter rhs,
            out Decal.ErrorMask errorMask,
            Decal.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DecalSetterTranslationCommon)((IDecalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Decal.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDecal lhs,
            IDecalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DecalSetterTranslationCommon)((IDecalGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Decal DeepCopy(
            this IDecalGetter item,
            Decal.TranslationMask? copyMask = null)
        {
            return ((DecalSetterTranslationCommon)((IDecalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Decal DeepCopy(
            this IDecalGetter item,
            out Decal.ErrorMask errorMask,
            Decal.TranslationMask? copyMask = null)
        {
            return ((DecalSetterTranslationCommon)((IDecalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Decal DeepCopy(
            this IDecalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DecalSetterTranslationCommon)((IDecalGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDecal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DecalSetterCommon)((IDecalGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    #region Field Index
    internal enum Decal_FieldIndex
    {
        MinWidth = 0,
        MaxWidth = 1,
        MinHeight = 2,
        MaxHeight = 3,
        Depth = 4,
        Shininess = 5,
        ParallaxScale = 6,
        ParallaxPasses = 7,
        Flags = 8,
        Unknown = 9,
        Color = 10,
    }
    #endregion

    #region Registration
    internal partial class Decal_Registration : ILoquiRegistration
    {
        public static readonly Decal_Registration Instance = new Decal_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout3.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(Decal.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Decal.ErrorMask);

        public static readonly Type ClassType = typeof(Decal);

        public static readonly Type GetterType = typeof(IDecalGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDecal);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout3.Decal";

        public const string Name = "Decal";

        public const string Namespace = "Mutagen.Bethesda.Fallout3";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DODT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.DODT);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DecalBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DecalSetterCommon
    {
        public static readonly DecalSetterCommon Instance = new DecalSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDecal item)
        {
            ClearPartial();
            item.MinWidth = default(Single);
            item.MaxWidth = default(Single);
            item.MinHeight = default(Single);
            item.MaxHeight = default(Single);
            item.Depth = default(Single);
            item.Shininess = default(Single);
            item.ParallaxScale = default(Single);
            item.ParallaxPasses = default(Byte);
            item.Flags = default(Decal.Flag);
            item.Unknown = default(UInt16);
            item.Color = default(Color);
        }
        
        #region Mutagen
        public void RemapLinks(IDecal obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDecal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.DODT),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: DecalBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class DecalCommon
    {
        public static readonly DecalCommon Instance = new DecalCommon();

        public Decal.Mask<bool> GetEqualsMask(
            IDecalGetter item,
            IDecalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Decal.Mask<bool>(false);
            ((DecalCommon)((IDecalGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDecalGetter item,
            IDecalGetter rhs,
            Decal.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.MinWidth = item.MinWidth.EqualsWithin(rhs.MinWidth);
            ret.MaxWidth = item.MaxWidth.EqualsWithin(rhs.MaxWidth);
            ret.MinHeight = item.MinHeight.EqualsWithin(rhs.MinHeight);
            ret.MaxHeight = item.MaxHeight.EqualsWithin(rhs.MaxHeight);
            ret.Depth = item.Depth.EqualsWithin(rhs.Depth);
            ret.Shininess = item.Shininess.EqualsWithin(rhs.Shininess);
            ret.ParallaxScale = item.ParallaxScale.EqualsWithin(rhs.ParallaxScale);
            ret.ParallaxPasses = item.ParallaxPasses == rhs.ParallaxPasses;
            ret.Flags = item.Flags == rhs.Flags;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
        }
        
        public string Print(
            IDecalGetter item,
            string? name = null,
            Decal.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDecalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Decal.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Decal =>");
            }
            else
            {
                sb.AppendLine($"{name} (Decal) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDecalGetter item,
            StructuredStringBuilder sb,
            Decal.Mask<bool>? printMask = null)
        {
            if (printMask?.MinWidth ?? true)
            {
                sb.AppendItem(item.MinWidth, "MinWidth");
            }
            if (printMask?.MaxWidth ?? true)
            {
                sb.AppendItem(item.MaxWidth, "MaxWidth");
            }
            if (printMask?.MinHeight ?? true)
            {
                sb.AppendItem(item.MinHeight, "MinHeight");
            }
            if (printMask?.MaxHeight ?? true)
            {
                sb.AppendItem(item.MaxHeight, "MaxHeight");
            }
            if (printMask?.Depth ?? true)
            {
                sb.AppendItem(item.Depth, "Depth");
            }
            if (printMask?.Shininess ?? true)
            {
                sb.AppendItem(item.Shininess, "Shininess");
            }
            if (printMask?.ParallaxScale ?? true)
            {
                sb.AppendItem(item.ParallaxScale, "ParallaxScale");
            }
            if (printMask?.ParallaxPasses ?? true)
            {
                sb.AppendItem(item.ParallaxPasses, "ParallaxPasses");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Color ?? true)
            {
                sb.AppendItem(item.Color, "Color");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDecalGetter? lhs,
            IDecalGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.MinWidth) ?? true))
            {
                if (!lhs.MinWidth.EqualsWithin(rhs.MinWidth)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.MaxWidth) ?? true))
            {
                if (!lhs.MaxWidth.EqualsWithin(rhs.MaxWidth)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.MinHeight) ?? true))
            {
                if (!lhs.MinHeight.EqualsWithin(rhs.MinHeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.MaxHeight) ?? true))
            {
                if (!lhs.MaxHeight.EqualsWithin(rhs.MaxHeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.Depth) ?? true))
            {
                if (!lhs.Depth.EqualsWithin(rhs.Depth)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.Shininess) ?? true))
            {
                if (!lhs.Shininess.EqualsWithin(rhs.Shininess)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.ParallaxScale) ?? true))
            {
                if (!lhs.ParallaxScale.EqualsWithin(rhs.ParallaxScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.ParallaxPasses) ?? true))
            {
                if (lhs.ParallaxPasses != rhs.ParallaxPasses) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Decal_FieldIndex.Color) ?? true))
            {
                if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IDecalGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.MinWidth);
            hash.Add(item.MaxWidth);
            hash.Add(item.MinHeight);
            hash.Add(item.MaxHeight);
            hash.Add(item.Depth);
            hash.Add(item.Shininess);
            hash.Add(item.ParallaxScale);
            hash.Add(item.ParallaxPasses);
            hash.Add(item.Flags);
            hash.Add(item.Unknown);
            hash.Add(item.Color);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return Decal.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDecalGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class DecalSetterTranslationCommon
    {
        public static readonly DecalSetterTranslationCommon Instance = new DecalSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDecal item,
            IDecalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.MinWidth) ?? true))
            {
                item.MinWidth = rhs.MinWidth;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.MaxWidth) ?? true))
            {
                item.MaxWidth = rhs.MaxWidth;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.MinHeight) ?? true))
            {
                item.MinHeight = rhs.MinHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.MaxHeight) ?? true))
            {
                item.MaxHeight = rhs.MaxHeight;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.Depth) ?? true))
            {
                item.Depth = rhs.Depth;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.Shininess) ?? true))
            {
                item.Shininess = rhs.Shininess;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.ParallaxScale) ?? true))
            {
                item.ParallaxScale = rhs.ParallaxScale;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.ParallaxPasses) ?? true))
            {
                item.ParallaxPasses = rhs.ParallaxPasses;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Decal_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDecal item,
            IDecalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public Decal DeepCopy(
            IDecalGetter item,
            Decal.TranslationMask? copyMask = null)
        {
            Decal ret = (Decal)((DecalCommon)((IDecalGetter)item).CommonInstance()!).GetNew();
            ((DecalSetterTranslationCommon)((IDecalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Decal DeepCopy(
            IDecalGetter item,
            out Decal.ErrorMask errorMask,
            Decal.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Decal ret = (Decal)((DecalCommon)((IDecalGetter)item).CommonInstance()!).GetNew();
            ((DecalSetterTranslationCommon)((IDecalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Decal.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Decal DeepCopy(
            IDecalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Decal ret = (Decal)((DecalCommon)((IDecalGetter)item).CommonInstance()!).GetNew();
            ((DecalSetterTranslationCommon)((IDecalGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    public partial class Decal
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Decal_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Decal_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DecalCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return DecalSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DecalSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDecalGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IDecalGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IDecalGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout3
{
    public partial class DecalBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly DecalBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IDecalGetter item,
            MutagenWriter writer)
        {
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MinWidth);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MaxWidth);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MinHeight);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.MaxHeight);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Depth);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Shininess);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ParallaxScale);
            writer.Write(item.ParallaxPasses);
            EnumBinaryTranslation<Decal.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 1);
            writer.Write(item.Unknown);
            ColorBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Color);
        }

        public void Write(
            MutagenWriter writer,
            IDecalGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.DODT),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDecalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DecalBinaryCreateTranslation
    {
        public static readonly DecalBinaryCreateTranslation Instance = new DecalBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IDecal item,
            MutagenFrame frame)
        {
            item.MinWidth = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.MaxWidth = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.MinHeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.MaxHeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Depth = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.Shininess = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ParallaxScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame);
            item.ParallaxPasses = frame.ReadUInt8();
            item.Flags = EnumBinaryTranslation<Decal.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 1);
            item.Unknown = frame.ReadUInt16();
            item.Color = frame.ReadColor(ColorBinaryType.Alpha);
        }

    }

}
namespace Mutagen.Bethesda.Fallout3
{
    #region Binary Write Mixins
    public static class DecalBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IDecalGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DecalBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout3
{
    internal partial class DecalBinaryOverlay :
        PluginBinaryOverlay,
        IDecalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Decal_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => Decal_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => DecalCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => DecalSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IDecalGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IDecalGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IDecalGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => DecalBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DecalBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public Single MinWidth => _structData.Slice(0x0, 0x4).Float();
        public Single MaxWidth => _structData.Slice(0x4, 0x4).Float();
        public Single MinHeight => _structData.Slice(0x8, 0x4).Float();
        public Single MaxHeight => _structData.Slice(0xC, 0x4).Float();
        public Single Depth => _structData.Slice(0x10, 0x4).Float();
        public Single Shininess => _structData.Slice(0x14, 0x4).Float();
        public Single ParallaxScale => _structData.Slice(0x18, 0x4).Float();
        public Byte ParallaxPasses => _structData.Span[0x1C];
        public Decal.Flag Flags => (Decal.Flag)_structData.Span.Slice(0x1D, 0x1)[0];
        public UInt16 Unknown => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x1E, 0x2));
        public Color Color => _structData.Slice(0x20, 0x4).ReadColor(ColorBinaryType.Alpha);
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DecalBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDecalGetter DecalFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x24,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new DecalBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x24 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IDecalGetter DecalFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DecalFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DecalMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IDecalGetter rhs) return false;
            return ((DecalCommon)((IDecalGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDecalGetter? obj)
        {
            return ((DecalCommon)((IDecalGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DecalCommon)((IDecalGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

