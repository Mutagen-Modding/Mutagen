/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout3.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout3.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout3.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout3
{
    #region Class
    public partial class FaceGenData :
        IEquatable<IFaceGenDataGetter>,
        IFaceGenData,
        ILoquiObjectSetter<FaceGenData>
    {
        #region Ctor
        public FaceGenData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region SymmetricGeometry
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SymmetricGeometry;
        public MemorySlice<Byte>? SymmetricGeometry
        {
            get => this._SymmetricGeometry;
            set => this._SymmetricGeometry = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFaceGenDataGetter.SymmetricGeometry => this.SymmetricGeometry;
        #endregion
        #region AsymmetricGeometry
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _AsymmetricGeometry;
        public MemorySlice<Byte>? AsymmetricGeometry
        {
            get => this._AsymmetricGeometry;
            set => this._AsymmetricGeometry = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFaceGenDataGetter.AsymmetricGeometry => this.AsymmetricGeometry;
        #endregion
        #region SymmetricTexture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _SymmetricTexture;
        public MemorySlice<Byte>? SymmetricTexture
        {
            get => this._SymmetricTexture;
            set => this._SymmetricTexture = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFaceGenDataGetter.SymmetricTexture => this.SymmetricTexture;
        #endregion
        #region SNAM
        public Int16 SNAM { get; set; } = default(Int16);
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FaceGenDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFaceGenDataGetter rhs) return false;
            return ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFaceGenDataGetter? obj)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.SymmetricGeometry = initialValue;
                this.AsymmetricGeometry = initialValue;
                this.SymmetricTexture = initialValue;
                this.SNAM = initialValue;
            }

            public Mask(
                TItem SymmetricGeometry,
                TItem AsymmetricGeometry,
                TItem SymmetricTexture,
                TItem SNAM)
            {
                this.SymmetricGeometry = SymmetricGeometry;
                this.AsymmetricGeometry = AsymmetricGeometry;
                this.SymmetricTexture = SymmetricTexture;
                this.SNAM = SNAM;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem SymmetricGeometry;
            public TItem AsymmetricGeometry;
            public TItem SymmetricTexture;
            public TItem SNAM;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.SymmetricGeometry, rhs.SymmetricGeometry)) return false;
                if (!object.Equals(this.AsymmetricGeometry, rhs.AsymmetricGeometry)) return false;
                if (!object.Equals(this.SymmetricTexture, rhs.SymmetricTexture)) return false;
                if (!object.Equals(this.SNAM, rhs.SNAM)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.SymmetricGeometry);
                hash.Add(this.AsymmetricGeometry);
                hash.Add(this.SymmetricTexture);
                hash.Add(this.SNAM);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.SymmetricGeometry)) return false;
                if (!eval(this.AsymmetricGeometry)) return false;
                if (!eval(this.SymmetricTexture)) return false;
                if (!eval(this.SNAM)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.SymmetricGeometry)) return true;
                if (eval(this.AsymmetricGeometry)) return true;
                if (eval(this.SymmetricTexture)) return true;
                if (eval(this.SNAM)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FaceGenData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.SymmetricGeometry = eval(this.SymmetricGeometry);
                obj.AsymmetricGeometry = eval(this.AsymmetricGeometry);
                obj.SymmetricTexture = eval(this.SymmetricTexture);
                obj.SNAM = eval(this.SNAM);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(FaceGenData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, FaceGenData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(FaceGenData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.SymmetricGeometry ?? true)
                    {
                        sb.AppendItem(SymmetricGeometry, "SymmetricGeometry");
                    }
                    if (printMask?.AsymmetricGeometry ?? true)
                    {
                        sb.AppendItem(AsymmetricGeometry, "AsymmetricGeometry");
                    }
                    if (printMask?.SymmetricTexture ?? true)
                    {
                        sb.AppendItem(SymmetricTexture, "SymmetricTexture");
                    }
                    if (printMask?.SNAM ?? true)
                    {
                        sb.AppendItem(SNAM, "SNAM");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? SymmetricGeometry;
            public Exception? AsymmetricGeometry;
            public Exception? SymmetricTexture;
            public Exception? SNAM;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
                switch (enu)
                {
                    case FaceGenData_FieldIndex.SymmetricGeometry:
                        return SymmetricGeometry;
                    case FaceGenData_FieldIndex.AsymmetricGeometry:
                        return AsymmetricGeometry;
                    case FaceGenData_FieldIndex.SymmetricTexture:
                        return SymmetricTexture;
                    case FaceGenData_FieldIndex.SNAM:
                        return SNAM;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
                switch (enu)
                {
                    case FaceGenData_FieldIndex.SymmetricGeometry:
                        this.SymmetricGeometry = ex;
                        break;
                    case FaceGenData_FieldIndex.AsymmetricGeometry:
                        this.AsymmetricGeometry = ex;
                        break;
                    case FaceGenData_FieldIndex.SymmetricTexture:
                        this.SymmetricTexture = ex;
                        break;
                    case FaceGenData_FieldIndex.SNAM:
                        this.SNAM = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                FaceGenData_FieldIndex enu = (FaceGenData_FieldIndex)index;
                switch (enu)
                {
                    case FaceGenData_FieldIndex.SymmetricGeometry:
                        this.SymmetricGeometry = (Exception?)obj;
                        break;
                    case FaceGenData_FieldIndex.AsymmetricGeometry:
                        this.AsymmetricGeometry = (Exception?)obj;
                        break;
                    case FaceGenData_FieldIndex.SymmetricTexture:
                        this.SymmetricTexture = (Exception?)obj;
                        break;
                    case FaceGenData_FieldIndex.SNAM:
                        this.SNAM = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (SymmetricGeometry != null) return true;
                if (AsymmetricGeometry != null) return true;
                if (SymmetricTexture != null) return true;
                if (SNAM != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(SymmetricGeometry, "SymmetricGeometry");
                }
                {
                    sb.AppendItem(AsymmetricGeometry, "AsymmetricGeometry");
                }
                {
                    sb.AppendItem(SymmetricTexture, "SymmetricTexture");
                }
                {
                    sb.AppendItem(SNAM, "SNAM");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.SymmetricGeometry = this.SymmetricGeometry.Combine(rhs.SymmetricGeometry);
                ret.AsymmetricGeometry = this.AsymmetricGeometry.Combine(rhs.AsymmetricGeometry);
                ret.SymmetricTexture = this.SymmetricTexture.Combine(rhs.SymmetricTexture);
                ret.SNAM = this.SNAM.Combine(rhs.SNAM);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool SymmetricGeometry;
            public bool AsymmetricGeometry;
            public bool SymmetricTexture;
            public bool SNAM;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.SymmetricGeometry = defaultOn;
                this.AsymmetricGeometry = defaultOn;
                this.SymmetricTexture = defaultOn;
                this.SNAM = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((SymmetricGeometry, null));
                ret.Add((AsymmetricGeometry, null));
                ret.Add((SymmetricTexture, null));
                ret.Add((SNAM, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FaceGenDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FaceGenDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static FaceGenData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new FaceGenData();
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FaceGenData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static FaceGenData GetNew()
        {
            return new FaceGenData();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaceGenData :
        IFaceGenDataGetter,
        ILoquiObjectSetter<IFaceGenData>
    {
        new MemorySlice<Byte>? SymmetricGeometry { get; set; }
        new MemorySlice<Byte>? AsymmetricGeometry { get; set; }
        new MemorySlice<Byte>? SymmetricTexture { get; set; }
        new Int16 SNAM { get; set; }
    }

    public partial interface IFaceGenDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IFaceGenDataGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => FaceGenData_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? SymmetricGeometry { get; }
        ReadOnlyMemorySlice<Byte>? AsymmetricGeometry { get; }
        ReadOnlyMemorySlice<Byte>? SymmetricTexture { get; }
        Int16 SNAM { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FaceGenDataMixIn
    {
        public static void Clear(this IFaceGenData item)
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FaceGenData.Mask<bool> GetEqualsMask(
            this IFaceGenDataGetter item,
            IFaceGenDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFaceGenDataGetter item,
            string? name = null,
            FaceGenData.Mask<bool>? printMask = null)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFaceGenDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FaceGenData.Mask<bool>? printMask = null)
        {
            ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFaceGenDataGetter item,
            IFaceGenDataGetter rhs,
            FaceGenData.TranslationMask? equalsMask = null)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs)
        {
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs,
            FaceGenData.TranslationMask? copyMask = null)
        {
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FaceGenData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFaceGenData lhs,
            IFaceGenDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FaceGenData DeepCopy(
            this IFaceGenDataGetter item,
            FaceGenData.TranslationMask? copyMask = null)
        {
            return ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FaceGenData DeepCopy(
            this IFaceGenDataGetter item,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? copyMask = null)
        {
            return ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FaceGenData DeepCopy(
            this IFaceGenDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFaceGenData item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FaceGenDataSetterCommon)((IFaceGenDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    #region Field Index
    internal enum FaceGenData_FieldIndex
    {
        SymmetricGeometry = 0,
        AsymmetricGeometry = 1,
        SymmetricTexture = 2,
        SNAM = 3,
    }
    #endregion

    #region Registration
    internal partial class FaceGenData_Registration : ILoquiRegistration
    {
        public static readonly FaceGenData_Registration Instance = new FaceGenData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout3.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(FaceGenData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FaceGenData.ErrorMask);

        public static readonly Type ClassType = typeof(FaceGenData);

        public static readonly Type GetterType = typeof(IFaceGenDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaceGenData);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Fallout3.FaceGenData";

        public const string Name = "FaceGenData";

        public const string Namespace = "Mutagen.Bethesda.Fallout3";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.FGGS,
                RecordTypes.FGGA,
                RecordTypes.FGTS,
                RecordTypes.SNAM);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FaceGenDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FaceGenDataSetterCommon
    {
        public static readonly FaceGenDataSetterCommon Instance = new FaceGenDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFaceGenData item)
        {
            ClearPartial();
            item.SymmetricGeometry = default;
            item.AsymmetricGeometry = default;
            item.SymmetricTexture = default;
            item.SNAM = default(Int16);
        }
        
        #region Mutagen
        public void RemapLinks(IFaceGenData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFaceGenData item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: FaceGenDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class FaceGenDataCommon
    {
        public static readonly FaceGenDataCommon Instance = new FaceGenDataCommon();

        public FaceGenData.Mask<bool> GetEqualsMask(
            IFaceGenDataGetter item,
            IFaceGenDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FaceGenData.Mask<bool>(false);
            ((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFaceGenDataGetter item,
            IFaceGenDataGetter rhs,
            FaceGenData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.SymmetricGeometry = MemorySliceExt.SequenceEqual(item.SymmetricGeometry, rhs.SymmetricGeometry);
            ret.AsymmetricGeometry = MemorySliceExt.SequenceEqual(item.AsymmetricGeometry, rhs.AsymmetricGeometry);
            ret.SymmetricTexture = MemorySliceExt.SequenceEqual(item.SymmetricTexture, rhs.SymmetricTexture);
            ret.SNAM = item.SNAM == rhs.SNAM;
        }
        
        public string Print(
            IFaceGenDataGetter item,
            string? name = null,
            FaceGenData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFaceGenDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FaceGenData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"FaceGenData =>");
            }
            else
            {
                sb.AppendLine($"{name} (FaceGenData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFaceGenDataGetter item,
            StructuredStringBuilder sb,
            FaceGenData.Mask<bool>? printMask = null)
        {
            if ((printMask?.SymmetricGeometry ?? true)
                && item.SymmetricGeometry is {} SymmetricGeometryItem)
            {
                sb.AppendLine($"SymmetricGeometry => {SpanExt.ToHexString(SymmetricGeometryItem)}");
            }
            if ((printMask?.AsymmetricGeometry ?? true)
                && item.AsymmetricGeometry is {} AsymmetricGeometryItem)
            {
                sb.AppendLine($"AsymmetricGeometry => {SpanExt.ToHexString(AsymmetricGeometryItem)}");
            }
            if ((printMask?.SymmetricTexture ?? true)
                && item.SymmetricTexture is {} SymmetricTextureItem)
            {
                sb.AppendLine($"SymmetricTexture => {SpanExt.ToHexString(SymmetricTextureItem)}");
            }
            if (printMask?.SNAM ?? true)
            {
                sb.AppendItem(item.SNAM, "SNAM");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFaceGenDataGetter? lhs,
            IFaceGenDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricGeometry) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.SymmetricGeometry, rhs.SymmetricGeometry)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.AsymmetricGeometry) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.AsymmetricGeometry, rhs.AsymmetricGeometry)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricTexture) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.SymmetricTexture, rhs.SymmetricTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SNAM) ?? true))
            {
                if (lhs.SNAM != rhs.SNAM) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IFaceGenDataGetter item)
        {
            var hash = new HashCode();
            if (item.SymmetricGeometry is {} SymmetricGeometryItem)
            {
                hash.Add(SymmetricGeometryItem);
            }
            if (item.AsymmetricGeometry is {} AsymmetricGeometryItem)
            {
                hash.Add(AsymmetricGeometryItem);
            }
            if (item.SymmetricTexture is {} SymmetricTextureItem)
            {
                hash.Add(SymmetricTextureItem);
            }
            hash.Add(item.SNAM);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return FaceGenData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFaceGenDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class FaceGenDataSetterTranslationCommon
    {
        public static readonly FaceGenDataSetterTranslationCommon Instance = new FaceGenDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFaceGenData item,
            IFaceGenDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricGeometry) ?? true))
            {
                if(rhs.SymmetricGeometry is {} SymmetricGeometryrhs)
                {
                    item.SymmetricGeometry = SymmetricGeometryrhs.ToArray();
                }
                else
                {
                    item.SymmetricGeometry = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.AsymmetricGeometry) ?? true))
            {
                if(rhs.AsymmetricGeometry is {} AsymmetricGeometryrhs)
                {
                    item.AsymmetricGeometry = AsymmetricGeometryrhs.ToArray();
                }
                else
                {
                    item.AsymmetricGeometry = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SymmetricTexture) ?? true))
            {
                if(rhs.SymmetricTexture is {} SymmetricTexturerhs)
                {
                    item.SymmetricTexture = SymmetricTexturerhs.ToArray();
                }
                else
                {
                    item.SymmetricTexture = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FaceGenData_FieldIndex.SNAM) ?? true))
            {
                item.SNAM = rhs.SNAM;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFaceGenData item,
            IFaceGenDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public FaceGenData DeepCopy(
            IFaceGenDataGetter item,
            FaceGenData.TranslationMask? copyMask = null)
        {
            FaceGenData ret = (FaceGenData)((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).GetNew();
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FaceGenData DeepCopy(
            IFaceGenDataGetter item,
            out FaceGenData.ErrorMask errorMask,
            FaceGenData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FaceGenData ret = (FaceGenData)((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).GetNew();
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FaceGenData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FaceGenData DeepCopy(
            IFaceGenDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FaceGenData ret = (FaceGenData)((FaceGenDataCommon)((IFaceGenDataGetter)item).CommonInstance()!).GetNew();
            ((FaceGenDataSetterTranslationCommon)((IFaceGenDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    public partial class FaceGenData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceGenData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => FaceGenData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FaceGenDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return FaceGenDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FaceGenDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFaceGenDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IFaceGenDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IFaceGenDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout3
{
    public partial class FaceGenDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly FaceGenDataBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IFaceGenDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SymmetricGeometry,
                header: translationParams.ConvertToCustom(RecordTypes.FGGS));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.AsymmetricGeometry,
                header: translationParams.ConvertToCustom(RecordTypes.FGGA));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SymmetricTexture,
                header: translationParams.ConvertToCustom(RecordTypes.FGTS));
            Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SNAM,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
        }

        public void Write(
            MutagenWriter writer,
            IFaceGenDataGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFaceGenDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FaceGenDataBinaryCreateTranslation
    {
        public static readonly FaceGenDataBinaryCreateTranslation Instance = new FaceGenDataBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IFaceGenData item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FGGS:
                {
                    if (lastParsed.ShortCircuit((int)FaceGenData_FieldIndex.SymmetricGeometry, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SymmetricGeometry = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)FaceGenData_FieldIndex.SymmetricGeometry;
                }
                case RecordTypeInts.FGGA:
                {
                    if (lastParsed.ShortCircuit((int)FaceGenData_FieldIndex.AsymmetricGeometry, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AsymmetricGeometry = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)FaceGenData_FieldIndex.AsymmetricGeometry;
                }
                case RecordTypeInts.FGTS:
                {
                    if (lastParsed.ShortCircuit((int)FaceGenData_FieldIndex.SymmetricTexture, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SymmetricTexture = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)FaceGenData_FieldIndex.SymmetricTexture;
                }
                case RecordTypeInts.SNAM:
                {
                    if (lastParsed.ShortCircuit((int)FaceGenData_FieldIndex.SNAM, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SNAM = frame.ReadInt16();
                    return (int)FaceGenData_FieldIndex.SNAM;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout3
{
    #region Binary Write Mixins
    public static class FaceGenDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IFaceGenDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FaceGenDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout3
{
    internal partial class FaceGenDataBinaryOverlay :
        PluginBinaryOverlay,
        IFaceGenDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FaceGenData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => FaceGenData_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => FaceGenDataCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => FaceGenDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IFaceGenDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IFaceGenDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IFaceGenDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => FaceGenDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FaceGenDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region SymmetricGeometry
        private int? _SymmetricGeometryLocation;
        public ReadOnlyMemorySlice<Byte>? SymmetricGeometry => _SymmetricGeometryLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SymmetricGeometryLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region AsymmetricGeometry
        private int? _AsymmetricGeometryLocation;
        public ReadOnlyMemorySlice<Byte>? AsymmetricGeometry => _AsymmetricGeometryLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _AsymmetricGeometryLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SymmetricTexture
        private int? _SymmetricTextureLocation;
        public ReadOnlyMemorySlice<Byte>? SymmetricTexture => _SymmetricTextureLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _SymmetricTextureLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SNAM
        private int? _SNAMLocation;
        public Int16 SNAM => _SNAMLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SNAMLocation.Value, _package.MetaData.Constants)) : default(Int16);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FaceGenDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFaceGenDataGetter FaceGenDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FaceGenDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFaceGenDataGetter FaceGenDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FaceGenDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FGGS:
                {
                    if (lastParsed.ShortCircuit((int)FaceGenData_FieldIndex.SymmetricGeometry, translationParams)) return ParseResult.Stop;
                    _SymmetricGeometryLocation = (stream.Position - offset);
                    return (int)FaceGenData_FieldIndex.SymmetricGeometry;
                }
                case RecordTypeInts.FGGA:
                {
                    if (lastParsed.ShortCircuit((int)FaceGenData_FieldIndex.AsymmetricGeometry, translationParams)) return ParseResult.Stop;
                    _AsymmetricGeometryLocation = (stream.Position - offset);
                    return (int)FaceGenData_FieldIndex.AsymmetricGeometry;
                }
                case RecordTypeInts.FGTS:
                {
                    if (lastParsed.ShortCircuit((int)FaceGenData_FieldIndex.SymmetricTexture, translationParams)) return ParseResult.Stop;
                    _SymmetricTextureLocation = (stream.Position - offset);
                    return (int)FaceGenData_FieldIndex.SymmetricTexture;
                }
                case RecordTypeInts.SNAM:
                {
                    if (lastParsed.ShortCircuit((int)FaceGenData_FieldIndex.SNAM, translationParams)) return ParseResult.Stop;
                    _SNAMLocation = (stream.Position - offset);
                    return (int)FaceGenData_FieldIndex.SNAM;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FaceGenDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IFaceGenDataGetter rhs) return false;
            return ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFaceGenDataGetter? obj)
        {
            return ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FaceGenDataCommon)((IFaceGenDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

