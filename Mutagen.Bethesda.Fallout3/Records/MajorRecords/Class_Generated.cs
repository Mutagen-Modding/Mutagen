/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout3;
using Mutagen.Bethesda.Fallout3.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout3.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout3.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout3
{
    #region Class
    public partial class Class :
        Fallout3MajorRecord,
        IClassInternal,
        IEquatable<IClassGetter>,
        ILoquiObjectSetter<Class>
    {
        #region Ctor
        protected Class()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamedRequired, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString Name { get; set; } = string.Empty;
        ITranslatedStringGetter IClassGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter IClassGetter.Description => this.Description;
        #endregion
        #region Icon
        public String? Icon { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IClassGetter.Icon => this.Icon;
        #endregion
        #region TagSkills
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActorValue[] _TagSkills = new ActorValue[4];
        public ActorValue[] TagSkills
        {
            get => this._TagSkills;
            init => this._TagSkills = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<ActorValue> IClassGetter.TagSkills => _TagSkills;
        #endregion

        #endregion
        #region Flags
        public Class.Flag Flags { get; set; } = default(Class.Flag);
        #endregion
        #region Services
        public ClassService Services { get; set; } = default(ClassService);
        #endregion
        #region Teaches
        public Skill? Teaches { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Skill? IClassGetter.Teaches => this.Teaches;
        #endregion
        #region MaxTrainingLevel
        public Byte MaxTrainingLevel { get; set; } = default(Byte);
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; } = default(UInt16);
        #endregion
        #region Attributes
        private readonly Dictionary<Attribute, Byte> _Attributes = new Dictionary<Attribute, Byte>();
        public IDictionary<Attribute, Byte> Attributes => _Attributes;
        #region Interface Members
        IDictionary<Attribute, Byte> IClass.Attributes => _Attributes;
        IReadOnlyDictionary<Attribute, Byte> IClassGetter.Attributes => _Attributes;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ClassMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout3MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Description = initialValue;
                this.Icon = initialValue;
                this.TagSkills = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = initialValue;
                this.Services = initialValue;
                this.Teaches = initialValue;
                this.MaxTrainingLevel = initialValue;
                this.Unknown = initialValue;
                this.Attributes = new MaskItem<TItem, IEnumerable<KeyValuePair<Attribute, TItem>>?>(initialValue, null);
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout3MajorRecordFlags,
                TItem Name,
                TItem Description,
                TItem Icon,
                TItem TagSkills,
                TItem Flags,
                TItem Services,
                TItem Teaches,
                TItem MaxTrainingLevel,
                TItem Unknown,
                TItem Attributes)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout3MajorRecordFlags: Fallout3MajorRecordFlags)
            {
                this.Name = Name;
                this.Description = Description;
                this.Icon = Icon;
                this.TagSkills = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(TagSkills, Enumerable.Empty<(int Index, TItem Value)>());
                this.Flags = Flags;
                this.Services = Services;
                this.Teaches = Teaches;
                this.MaxTrainingLevel = MaxTrainingLevel;
                this.Unknown = Unknown;
                this.Attributes = new MaskItem<TItem, IEnumerable<KeyValuePair<Attribute, TItem>>?>(Attributes, null);
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem Description;
            public TItem Icon;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? TagSkills;
            public TItem Flags;
            public TItem Services;
            public TItem Teaches;
            public TItem MaxTrainingLevel;
            public TItem Unknown;
            public MaskItem<TItem, IEnumerable<KeyValuePair<Attribute, TItem>>?>? Attributes;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Icon, rhs.Icon)) return false;
                if (!object.Equals(this.TagSkills, rhs.TagSkills)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Services, rhs.Services)) return false;
                if (!object.Equals(this.Teaches, rhs.Teaches)) return false;
                if (!object.Equals(this.MaxTrainingLevel, rhs.MaxTrainingLevel)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Attributes, rhs.Attributes)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Description);
                hash.Add(this.Icon);
                hash.Add(this.TagSkills);
                hash.Add(this.Flags);
                hash.Add(this.Services);
                hash.Add(this.Teaches);
                hash.Add(this.MaxTrainingLevel);
                hash.Add(this.Unknown);
                hash.Add(this.Attributes);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Description)) return false;
                if (!eval(this.Icon)) return false;
                if (this.TagSkills != null)
                {
                    if (!eval(this.TagSkills.Overall)) return false;
                    if (this.TagSkills.Specific != null)
                    {
                        foreach (var item in this.TagSkills.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.Services)) return false;
                if (!eval(this.Teaches)) return false;
                if (!eval(this.MaxTrainingLevel)) return false;
                if (!eval(this.Unknown)) return false;
                if (this.Attributes != null)
                {
                    if (!eval(this.Attributes.Overall)) return false;
                    if (this.Attributes.Specific != null)
                    {
                        foreach (var item in this.Attributes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Description)) return true;
                if (eval(this.Icon)) return true;
                if (this.TagSkills != null)
                {
                    if (eval(this.TagSkills.Overall)) return true;
                    if (this.TagSkills.Specific != null)
                    {
                        foreach (var item in this.TagSkills.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.Services)) return true;
                if (eval(this.Teaches)) return true;
                if (eval(this.MaxTrainingLevel)) return true;
                if (eval(this.Unknown)) return true;
                if (this.Attributes != null)
                {
                    if (eval(this.Attributes.Overall)) return true;
                    if (this.Attributes.Specific != null)
                    {
                        foreach (var item in this.Attributes.Specific)
                        {
                            if (eval(item.Value)) return true;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Class.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                obj.Description = eval(this.Description);
                obj.Icon = eval(this.Icon);
                if (TagSkills != null)
                {
                    obj.TagSkills = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.TagSkills.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (TagSkills.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.TagSkills.Specific = l;
                        foreach (var item in TagSkills.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.Services = eval(this.Services);
                obj.Teaches = eval(this.Teaches);
                obj.MaxTrainingLevel = eval(this.MaxTrainingLevel);
                obj.Unknown = eval(this.Unknown);
                if (Attributes != null)
                {
                    obj.Attributes = new MaskItem<R, IEnumerable<KeyValuePair<Attribute, R>>?>(eval(this.Attributes.Overall), default);
                    if (Attributes.Specific != null)
                    {
                        List<KeyValuePair<Attribute, R>> l = new List<KeyValuePair<Attribute, R>>();
                        obj.Attributes.Specific = l;
                        foreach (var item in Attributes.Specific)
                        {
                            throw new NotImplementedException();
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Class.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Class.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Class.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if (printMask?.Icon ?? true)
                    {
                        sb.AppendItem(Icon, "Icon");
                    }
                    if ((printMask?.TagSkills?.Overall ?? true)
                        && TagSkills is {} TagSkillsItem)
                    {
                        sb.AppendLine("TagSkills =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TagSkillsItem.Overall);
                            if (TagSkillsItem.Specific != null)
                            {
                                foreach (var subItem in TagSkillsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Services ?? true)
                    {
                        sb.AppendItem(Services, "Services");
                    }
                    if (printMask?.Teaches ?? true)
                    {
                        sb.AppendItem(Teaches, "Teaches");
                    }
                    if (printMask?.MaxTrainingLevel ?? true)
                    {
                        sb.AppendItem(MaxTrainingLevel, "MaxTrainingLevel");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Attributes?.Overall ?? true)
                    {
                        sb.AppendLine("Attributes =>");
                        using (sb.Brace())
                        {
                            if (Attributes != null)
                            {
                                if (Attributes.Overall != null)
                                {
                                    sb.AppendLine(Attributes.Overall.ToString());
                                }
                                if (Attributes.Specific != null)
                                {
                                    foreach (var subItem in Attributes.Specific)
                                    {
                                        using (sb.Brace())
                                        {
                                            sb.AppendLine("Key => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Key);
                                                }
                                            }
                                            sb.AppendLine("]");
                                            sb.AppendLine("Value => [");
                                            using (sb.IncreaseDepth())
                                            {
                                                {
                                                    sb.AppendItem(subItem.Value);
                                                }
                                            }
                                            sb.AppendLine("]");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout3MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public Exception? Description;
            public Exception? Icon;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? TagSkills;
            public Exception? Flags;
            public Exception? Services;
            public Exception? Teaches;
            public Exception? MaxTrainingLevel;
            public Exception? Unknown;
            public MaskItem<Exception?, IEnumerable<KeyValuePair<Attribute, Exception?>>?>? Attributes;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        return Name;
                    case Class_FieldIndex.Description:
                        return Description;
                    case Class_FieldIndex.Icon:
                        return Icon;
                    case Class_FieldIndex.TagSkills:
                        return TagSkills;
                    case Class_FieldIndex.Flags:
                        return Flags;
                    case Class_FieldIndex.Services:
                        return Services;
                    case Class_FieldIndex.Teaches:
                        return Teaches;
                    case Class_FieldIndex.MaxTrainingLevel:
                        return MaxTrainingLevel;
                    case Class_FieldIndex.Unknown:
                        return Unknown;
                    case Class_FieldIndex.Attributes:
                        return Attributes;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Class_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Class_FieldIndex.Icon:
                        this.Icon = ex;
                        break;
                    case Class_FieldIndex.TagSkills:
                        this.TagSkills = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Class_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Class_FieldIndex.Services:
                        this.Services = ex;
                        break;
                    case Class_FieldIndex.Teaches:
                        this.Teaches = ex;
                        break;
                    case Class_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = ex;
                        break;
                    case Class_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Class_FieldIndex.Attributes:
                        this.Attributes = new MaskItem<Exception?, IEnumerable<KeyValuePair<Attribute, Exception?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Class_FieldIndex enu = (Class_FieldIndex)index;
                switch (enu)
                {
                    case Class_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Icon:
                        this.Icon = (Exception?)obj;
                        break;
                    case Class_FieldIndex.TagSkills:
                        this.TagSkills = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Class_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Services:
                        this.Services = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Teaches:
                        this.Teaches = (Exception?)obj;
                        break;
                    case Class_FieldIndex.MaxTrainingLevel:
                        this.MaxTrainingLevel = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Class_FieldIndex.Attributes:
                        this.Attributes = (MaskItem<Exception?, IEnumerable<KeyValuePair<Attribute, Exception?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Description != null) return true;
                if (Icon != null) return true;
                if (TagSkills != null) return true;
                if (Flags != null) return true;
                if (Services != null) return true;
                if (Teaches != null) return true;
                if (MaxTrainingLevel != null) return true;
                if (Unknown != null) return true;
                if (Attributes != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                {
                    sb.AppendItem(Icon, "Icon");
                }
                if (TagSkills is {} TagSkillsItem)
                {
                    sb.AppendLine("TagSkills =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TagSkillsItem.Overall);
                        if (TagSkillsItem.Specific != null)
                        {
                            foreach (var subItem in TagSkillsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Services, "Services");
                }
                {
                    sb.AppendItem(Teaches, "Teaches");
                }
                {
                    sb.AppendItem(MaxTrainingLevel, "MaxTrainingLevel");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendLine("Attributes =>");
                    using (sb.Brace())
                    {
                        if (Attributes != null)
                        {
                            if (Attributes.Overall != null)
                            {
                                sb.AppendLine(Attributes.Overall.ToString());
                            }
                            if (Attributes.Specific != null)
                            {
                                foreach (var subItem in Attributes.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        sb.AppendLine("Key => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Key);
                                            }
                                        }
                                        sb.AppendLine("]");
                                        sb.AppendLine("Value => [");
                                        using (sb.IncreaseDepth())
                                        {
                                            {
                                                sb.AppendItem(subItem.Value);
                                            }
                                        }
                                        sb.AppendLine("]");
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Icon = this.Icon.Combine(rhs.Icon);
                ret.TagSkills = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.TagSkills?.Overall, rhs.TagSkills?.Overall), Noggog.ExceptionExt.Combine(this.TagSkills?.Specific, rhs.TagSkills?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Services = this.Services.Combine(rhs.Services);
                ret.Teaches = this.Teaches.Combine(rhs.Teaches);
                ret.MaxTrainingLevel = this.MaxTrainingLevel.Combine(rhs.MaxTrainingLevel);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Attributes = new MaskItem<Exception?, IEnumerable<KeyValuePair<Attribute, Exception?>>?>(Noggog.ExceptionExt.Combine(this.Attributes?.Overall, rhs.Attributes?.Overall), Noggog.ExceptionExt.Combine(this.Attributes?.Specific, rhs.Attributes?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout3MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public bool Description;
            public bool Icon;
            public bool TagSkills;
            public bool Flags;
            public bool Services;
            public bool Teaches;
            public bool MaxTrainingLevel;
            public bool Unknown;
            public bool Attributes;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Description = defaultOn;
                this.Icon = defaultOn;
                this.TagSkills = defaultOn;
                this.Flags = defaultOn;
                this.Services = defaultOn;
                this.Teaches = defaultOn;
                this.MaxTrainingLevel = defaultOn;
                this.Unknown = defaultOn;
                this.Attributes = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Description, null));
                ret.Add((Icon, null));
                ret.Add((TagSkills, null));
                ret.Add((Flags, null));
                ret.Add((Services, null));
                ret.Add((Teaches, null));
                ret.Add((MaxTrainingLevel, null));
                ret.Add((Unknown, null));
                ret.Add((Attributes, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Class_Registration.TriggeringRecordType;
        public Class(
            FormKey formKey,
            Fallout3Release gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Class(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Class(IFallout3Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout3Release)
        {
        }

        public Class(IFallout3Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout3Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Class>.ToString(this);
        }

        protected override Type LinkType => typeof(IClass);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IClassGetter rhs) return false;
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IClassGetter? obj)
        {
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ClassCommon)((IClassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Class CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Class();
            ((ClassSetterCommon)((IClassGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Class item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ClassSetterCommon)((IClassGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Class GetNew()
        {
            return new Class();
        }

    }
    #endregion

    #region Interface
    public partial interface IClass :
        IClassGetter,
        IFallout3MajorRecordInternal,
        ILoquiObjectSetter<IClassInternal>,
        INamedRequired,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: INamedRequired, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString Name { get; set; }
        new TranslatedString Description { get; set; }
        new String? Icon { get; set; }
        new ActorValue[] TagSkills { get; }
        new Class.Flag Flags { get; set; }
        new ClassService Services { get; set; }
        new Skill? Teaches { get; set; }
        new Byte MaxTrainingLevel { get; set; }
        new UInt16 Unknown { get; set; }
        new IDictionary<Attribute, Byte> Attributes { get; }
    }

    public partial interface IClassInternal :
        IFallout3MajorRecordInternal,
        IClass,
        IClassGetter
    {
        new IDictionary<Attribute, Byte> Attributes { get; }
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout3.Internals.RecordTypeInts.CLAS)]
    public partial interface IClassGetter :
        IFallout3MajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IClassGetter>,
        IMapsToGetter<IClassGetter>,
        INamedRequiredGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Class_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedRequiredGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter Name { get; }
        #endregion
        ITranslatedStringGetter Description { get; }
        String? Icon { get; }
        ReadOnlyMemorySlice<ActorValue> TagSkills { get; }
        Class.Flag Flags { get; }
        ClassService Services { get; }
        Skill? Teaches { get; }
        Byte MaxTrainingLevel { get; }
        UInt16 Unknown { get; }
        IReadOnlyDictionary<Attribute, Byte> Attributes { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClassMixIn
    {
        public static void Clear(this IClassInternal item)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Class.Mask<bool> GetEqualsMask(
            this IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IClassGetter item,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IClassGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IClassGetter item,
            IClassGetter rhs,
            Class.TranslationMask? equalsMask = null)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IClassInternal lhs,
            IClassGetter rhs,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClassSetterTranslationCommon)((IClassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClassInternal lhs,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClassSetterTranslationCommon)((IClassGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Class DeepCopy(
            this IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClassSetterTranslationCommon)((IClassGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Class Duplicate(
            this IClassGetter item,
            FormKey formKey,
            Class.TranslationMask? copyMask = null)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Class Duplicate(
            this IClassGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ClassCommon)((IClassGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IClassInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ClassSetterCommon)((IClassGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    #region Field Index
    internal enum Class_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout3MajorRecordFlags = 6,
        Name = 7,
        Description = 8,
        Icon = 9,
        TagSkills = 10,
        Flags = 11,
        Services = 12,
        Teaches = 13,
        MaxTrainingLevel = 14,
        Unknown = 15,
        Attributes = 16,
    }
    #endregion

    #region Registration
    internal partial class Class_Registration : ILoquiRegistration
    {
        public static readonly Class_Registration Instance = new Class_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout3.ProtocolKey;

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(Class.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Class.ErrorMask);

        public static readonly Type ClassType = typeof(Class);

        public static readonly Type GetterType = typeof(IClassGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClass);

        public static readonly Type? InternalSetterType = typeof(IClassInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout3.Class";

        public const string Name = "Class";

        public const string Namespace = "Mutagen.Bethesda.Fallout3";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CLAS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CLAS);
            var all = RecordCollection.Factory(
                RecordTypes.CLAS,
                RecordTypes.FULL,
                RecordTypes.DESC,
                RecordTypes.ICON,
                RecordTypes.DATA,
                RecordTypes.ATTR);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ClassBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ClassSetterCommon : Fallout3MajorRecordSetterCommon
    {
        public new static readonly ClassSetterCommon Instance = new ClassSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClassInternal item)
        {
            ClearPartial();
            item.Name.Clear();
            item.Description.Clear();
            item.Icon = default;
            item.TagSkills.Reset();
            item.Flags = default(Class.Flag);
            item.Services = default(ClassService);
            item.Teaches = default;
            item.MaxTrainingLevel = default(Byte);
            item.Unknown = default(UInt16);
            item.Attributes.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout3MajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClassInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IClass obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IClassInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IClassInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ClassBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ClassBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout3MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Class)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Class)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ClassCommon : Fallout3MajorRecordCommon
    {
        public new static readonly ClassCommon Instance = new ClassCommon();

        public Class.Mask<bool> GetEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Class.Mask<bool>(false);
            ((ClassCommon)((IClassGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClassGetter item,
            IClassGetter rhs,
            Class.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Icon = string.Equals(item.Icon, rhs.Icon);
            ret.TagSkills = EqualsMaskHelper.SpanEqualsHelper<ActorValue>(
                item.TagSkills,
                rhs.TagSkills,
                (l, r) => l == r,
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Services = item.Services == rhs.Services;
            ret.Teaches = item.Teaches == rhs.Teaches;
            ret.MaxTrainingLevel = item.MaxTrainingLevel == rhs.MaxTrainingLevel;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Attributes = EqualsMaskHelper.DictEqualsHelper(
                lhs: item.Attributes,
                rhs: rhs.Attributes,
                include: include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IClassGetter item,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IClassGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Class.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Class =>");
            }
            else
            {
                sb.AppendLine($"{name} (Class) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IClassGetter item,
            StructuredStringBuilder sb,
            Class.Mask<bool>? printMask = null)
        {
            Fallout3MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Name ?? true)
            {
                sb.AppendItem(item.Name, "Name");
            }
            if (printMask?.Description ?? true)
            {
                sb.AppendItem(item.Description, "Description");
            }
            if ((printMask?.Icon ?? true)
                && item.Icon is {} IconItem)
            {
                sb.AppendItem(IconItem, "Icon");
            }
            if (printMask?.TagSkills?.Overall ?? true)
            {
                sb.AppendLine("TagSkills =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TagSkills)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Services ?? true)
            {
                sb.AppendItem(item.Services, "Services");
            }
            if ((printMask?.Teaches ?? true)
                && item.Teaches is {} TeachesItem)
            {
                sb.AppendItem(TeachesItem, "Teaches");
            }
            if (printMask?.MaxTrainingLevel ?? true)
            {
                sb.AppendItem(item.MaxTrainingLevel, "MaxTrainingLevel");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Attributes?.Overall ?? true)
            {
                sb.AppendLine("Attributes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Attributes)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value);
                        }
                    }
                }
            }
        }
        
        public static Class_FieldIndex ConvertFieldIndex(Fallout3MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout3MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.VersionControl:
                    return (Class_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.FormVersion:
                    return (Class_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.Version2:
                    return (Class_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.Fallout3MajorRecordFlags:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Class_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Class_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Class_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClassGetter? lhs,
            IClassGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout3MajorRecordGetter)lhs, (IFallout3MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                if (!string.Equals(lhs.Icon, rhs.Icon)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.TagSkills) ?? true))
            {
                if (!lhs.TagSkills.SequenceEqualNullable(rhs.TagSkills)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Services) ?? true))
            {
                if (lhs.Services != rhs.Services) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Teaches) ?? true))
            {
                if (lhs.Teaches != rhs.Teaches) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.MaxTrainingLevel) ?? true))
            {
                if (lhs.MaxTrainingLevel != rhs.MaxTrainingLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Class_FieldIndex.Attributes) ?? true))
            {
                if (!lhs.Attributes.SequenceEqualNullable(rhs.Attributes)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout3MajorRecordGetter? lhs,
            IFallout3MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IClassGetter?)lhs,
                rhs: rhs as IClassGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IClassGetter?)lhs,
                rhs: rhs as IClassGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IClassGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Name);
            hash.Add(item.Description);
            if (item.Icon is {} Iconitem)
            {
                hash.Add(Iconitem);
            }
            hash.Add(item.TagSkills);
            hash.Add(item.Flags);
            hash.Add(item.Services);
            if (item.Teaches is {} Teachesitem)
            {
                hash.Add(Teachesitem);
            }
            hash.Add(item.MaxTrainingLevel);
            hash.Add(item.Unknown);
            hash.Add(item.Attributes);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout3MajorRecordGetter item)
        {
            return GetHashCode(item: (IClassGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClassGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Class.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IClassGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public Class Duplicate(
            IClassGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Class(formKey, default(Fallout3Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout3MajorRecord Duplicate(
            IFallout3MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IClassGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IClassGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ClassSetterTranslationCommon : Fallout3MajorRecordSetterTranslationCommon
    {
        public new static readonly ClassSetterTranslationCommon Instance = new ClassSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IClassInternal item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IClass item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout3MajorRecord)item,
                (IFallout3MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Icon) ?? true))
            {
                item.Icon = rhs.Icon;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.TagSkills) ?? true))
            {
                rhs.TagSkills.Span.CopyTo(item.TagSkills.AsSpan());
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Services) ?? true))
            {
                item.Services = rhs.Services;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Teaches) ?? true))
            {
                item.Teaches = rhs.Teaches;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.MaxTrainingLevel) ?? true))
            {
                item.MaxTrainingLevel = rhs.MaxTrainingLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Class_FieldIndex.Attributes) ?? true))
            {
                item.Attributes.SetTo(rhs.Attributes);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IClass item,
            IClassGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout3MajorRecordInternal item,
            IFallout3MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClassInternal)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout3MajorRecord item,
            IFallout3MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClass)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClassInternal)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClass)item,
                rhs: (IClassGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Class DeepCopy(
            IClassGetter item,
            Class.TranslationMask? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ((ClassSetterTranslationCommon)((IClassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Class DeepCopy(
            IClassGetter item,
            out Class.ErrorMask errorMask,
            Class.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ((ClassSetterTranslationCommon)((IClassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Class.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Class DeepCopy(
            IClassGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Class ret = (Class)((ClassCommon)((IClassGetter)item).CommonInstance()!).GetNew();
            ((ClassSetterTranslationCommon)((IClassGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    public partial class Class
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Class_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClassSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClassSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout3
{
    public partial class ClassBinaryWriteTranslation :
        Fallout3MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ClassBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IClassGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Icon,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ActorValue>.Instance.Write(
                    writer: writer,
                    items: item.TagSkills,
                    transl: (MutagenWriter subWriter, ActorValue subItem) =>
                    {
                        EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.Write(
                            subWriter,
                            subItem,
                            length: 4);
                    });
                EnumBinaryTranslation<Class.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                EnumBinaryTranslation<ClassService, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Services,
                    length: 4);
                EnumBinaryTranslation<Skill, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    ((int?)item.Teaches) ?? -1,
                    length: 1);
                writer.Write(item.MaxTrainingLevel);
                writer.Write(item.Unknown);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ATTR)))
            {
                Mutagen.Bethesda.Plugins.Binary.Translations.DictBinaryTranslation<Byte>.Instance.Write(
                    writer: writer,
                    items: item.Attributes,
                    transl: ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            }
        }

        public void Write(
            MutagenWriter writer,
            IClassGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.CLAS,
                writeEmbedded: Fallout3MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout3MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IClassGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ClassBinaryCreateTranslation : Fallout3MajorRecordBinaryCreateTranslation
    {
        public new static readonly ClassBinaryCreateTranslation Instance = new ClassBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CLAS;
        public static ParseResult FillBinaryRecordTypes(
            IClassInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Class_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Class_FieldIndex.Description;
                }
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Icon = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Class_FieldIndex.Icon;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 16) return null;
                    item.TagSkills.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ActorValue>.Instance.Parse(
                            reader: frame,
                            amount: 4,
                            transl: (MutagenFrame r, [MaybeNullWhen(false)] out ActorValue listSubItem) =>
                            {
                                return EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.Parse(
                                    reader: r.SpawnWithLength(4),
                                    item: out listSubItem);
                            }));
                    if (dataFrame.Remaining < 4) return null;
                    item.Flags = EnumBinaryTranslation<Class.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.Services = EnumBinaryTranslation<ClassService, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 1) return null;
                    item.Teaches = EnumBinaryTranslation<Skill, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.MaxTrainingLevel = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 2) return null;
                    item.Unknown = dataFrame.ReadUInt16();
                    return (int)Class_FieldIndex.Unknown;
                }
                case RecordTypeInts.ATTR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 7) return null;
                    Mutagen.Bethesda.Plugins.Binary.Translations.DictBinaryTranslation<Byte>.Instance.Parse<Attribute>(
                        reader: frame,
                        item: item.Attributes,
                        transl: ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
                    return (int)Class_FieldIndex.Attributes;
                }
                default:
                    return Fallout3MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout3
{
    #region Binary Write Mixins
    public static class ClassBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout3
{
    internal partial class ClassBinaryOverlay :
        Fallout3MajorRecordBinaryOverlay,
        IClassGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Class_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Class_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClassCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClassSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClassBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClassBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IClass);


        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        #endregion
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        #region Icon
        private int? _IconLocation;
        public String? Icon => _IconLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IconLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        private RangeInt32? _DATALocation;
        public ReadOnlyMemorySlice<ActorValue> TagSkills => BinaryOverlayArrayHelper.EnumSliceFromFixedSize<ActorValue>(_recordData.Slice(_DATALocation!.Value.Min), amount: 4, enumLength: 4);
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value.Min + 0x10;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Class.Flag Flags => _Flags_IsSet ? (Class.Flag)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region Services
        private int _ServicesLocation => _DATALocation!.Value.Min + 0x14;
        private bool _Services_IsSet => _DATALocation.HasValue;
        public ClassService Services => _Services_IsSet ? (ClassService)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_ServicesLocation, 0x4)) : default;
        #endregion
        #region Teaches
        private int _TeachesLocation => _DATALocation!.Value.Min + 0x18;
        private bool _Teaches_IsSet => _DATALocation.HasValue;
        public Skill? Teaches
        {
            get
            {
                var val = (Skill)_recordData.Span.Slice(_TeachesLocation, 0x1)[0];
                if (((int)val) == -1) return null;
                return val;
            }
        }
        #endregion
        #region MaxTrainingLevel
        private int _MaxTrainingLevelLocation => _DATALocation!.Value.Min + 0x19;
        private bool _MaxTrainingLevel_IsSet => _DATALocation.HasValue;
        public Byte MaxTrainingLevel => _MaxTrainingLevel_IsSet ? _recordData.Span[_MaxTrainingLevelLocation] : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value.Min + 0x1A;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public UInt16 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_UnknownLocation, 2)) : default(UInt16);
        #endregion
        private RangeInt32? _ATTRLocation;
        #region Attributes
        private int _AttributesLocation => _ATTRLocation!.Value.Min;
        private bool _Attributes_IsSet => _ATTRLocation.HasValue;
        public IReadOnlyDictionary<Attribute, Byte> Attributes => DictBinaryTranslation<Byte>.Instance.Parse<Attribute>(
            new MutagenFrame(new MutagenMemoryReadStream(_recordData.Slice(_AttributesLocation), _package.MetaData)),
            new Dictionary<Attribute, Byte>(),
            ByteBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ClassBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IClassGetter ClassFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ClassBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IClassGetter ClassFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ClassFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Class_FieldIndex.Name;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Class_FieldIndex.Description;
                }
                case RecordTypeInts.ICON:
                {
                    _IconLocation = (stream.Position - offset);
                    return (int)Class_FieldIndex.Icon;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Class_FieldIndex.Unknown;
                }
                case RecordTypeInts.ATTR:
                {
                    _ATTRLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Class_FieldIndex.Attributes;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ClassMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Class>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IClassGetter rhs) return false;
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IClassGetter? obj)
        {
            return ((ClassCommon)((IClassGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ClassCommon)((IClassGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

