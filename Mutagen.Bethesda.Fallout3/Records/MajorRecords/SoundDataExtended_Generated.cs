/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout3;
using Mutagen.Bethesda.Fallout3.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout3.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout3.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout3
{
    #region Class
    public partial class SoundDataExtended :
        SoundData,
        IEquatable<ISoundDataExtendedInternalGetter>,
        ILoquiObjectSetter<SoundDataExtended>,
        ISoundDataExtendedInternal
    {
        #region Ctor
        public SoundDataExtended()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AttenuationCurve
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int16[] _AttenuationCurve = new Int16[5];
        public Int16[] AttenuationCurve
        {
            get => this._AttenuationCurve;
            init => this._AttenuationCurve = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Int16> ISoundDataExtendedGetter.AttenuationCurve => _AttenuationCurve;
        #endregion

        #endregion
        #region ReverbAttenuationControl
        public Int16 ReverbAttenuationControl { get; set; } = default(Int16);
        #endregion
        #region Priority
        public Int32 Priority { get; set; } = default(Int32);
        #endregion
        #region Unknown
        public Int64 Unknown { get; set; } = default(Int64);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundDataExtendedMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundDataExtendedInternalGetter rhs) return false;
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundDataExtendedInternalGetter? obj)
        {
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SoundData.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.AttenuationCurve = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ReverbAttenuationControl = initialValue;
                this.Priority = initialValue;
                this.Unknown = initialValue;
            }

            public Mask(
                TItem MinimumAttenuationDistance,
                TItem MaximumAttenuationDistance,
                TItem FrequencyAdjustment,
                TItem Flags,
                TItem StaticAttenuation,
                TItem StopTime,
                TItem StartTime,
                TItem AttenuationCurve,
                TItem ReverbAttenuationControl,
                TItem Priority,
                TItem Unknown)
            : base(
                MinimumAttenuationDistance: MinimumAttenuationDistance,
                MaximumAttenuationDistance: MaximumAttenuationDistance,
                FrequencyAdjustment: FrequencyAdjustment,
                Flags: Flags,
                StaticAttenuation: StaticAttenuation,
                StopTime: StopTime,
                StartTime: StartTime)
            {
                this.AttenuationCurve = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(AttenuationCurve, Enumerable.Empty<(int Index, TItem Value)>());
                this.ReverbAttenuationControl = ReverbAttenuationControl;
                this.Priority = Priority;
                this.Unknown = Unknown;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? AttenuationCurve;
            public TItem ReverbAttenuationControl;
            public TItem Priority;
            public TItem Unknown;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.AttenuationCurve, rhs.AttenuationCurve)) return false;
                if (!object.Equals(this.ReverbAttenuationControl, rhs.ReverbAttenuationControl)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.AttenuationCurve);
                hash.Add(this.ReverbAttenuationControl);
                hash.Add(this.Priority);
                hash.Add(this.Unknown);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.AttenuationCurve != null)
                {
                    if (!eval(this.AttenuationCurve.Overall)) return false;
                    if (this.AttenuationCurve.Specific != null)
                    {
                        foreach (var item in this.AttenuationCurve.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ReverbAttenuationControl)) return false;
                if (!eval(this.Priority)) return false;
                if (!eval(this.Unknown)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.AttenuationCurve != null)
                {
                    if (eval(this.AttenuationCurve.Overall)) return true;
                    if (this.AttenuationCurve.Specific != null)
                    {
                        foreach (var item in this.AttenuationCurve.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ReverbAttenuationControl)) return true;
                if (eval(this.Priority)) return true;
                if (eval(this.Unknown)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundDataExtended.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (AttenuationCurve != null)
                {
                    obj.AttenuationCurve = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.AttenuationCurve.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (AttenuationCurve.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.AttenuationCurve.Specific = l;
                        foreach (var item in AttenuationCurve.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ReverbAttenuationControl = eval(this.ReverbAttenuationControl);
                obj.Priority = eval(this.Priority);
                obj.Unknown = eval(this.Unknown);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundDataExtended.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundDataExtended.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundDataExtended.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.AttenuationCurve?.Overall ?? true)
                        && AttenuationCurve is {} AttenuationCurveItem)
                    {
                        sb.AppendLine("AttenuationCurve =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AttenuationCurveItem.Overall);
                            if (AttenuationCurveItem.Specific != null)
                            {
                                foreach (var subItem in AttenuationCurveItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ReverbAttenuationControl ?? true)
                    {
                        sb.AppendItem(ReverbAttenuationControl, "ReverbAttenuationControl");
                    }
                    if (printMask?.Priority ?? true)
                    {
                        sb.AppendItem(Priority, "Priority");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SoundData.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? AttenuationCurve;
            public Exception? ReverbAttenuationControl;
            public Exception? Priority;
            public Exception? Unknown;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
                switch (enu)
                {
                    case SoundDataExtended_FieldIndex.AttenuationCurve:
                        return AttenuationCurve;
                    case SoundDataExtended_FieldIndex.ReverbAttenuationControl:
                        return ReverbAttenuationControl;
                    case SoundDataExtended_FieldIndex.Priority:
                        return Priority;
                    case SoundDataExtended_FieldIndex.Unknown:
                        return Unknown;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
                switch (enu)
                {
                    case SoundDataExtended_FieldIndex.AttenuationCurve:
                        this.AttenuationCurve = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SoundDataExtended_FieldIndex.ReverbAttenuationControl:
                        this.ReverbAttenuationControl = ex;
                        break;
                    case SoundDataExtended_FieldIndex.Priority:
                        this.Priority = ex;
                        break;
                    case SoundDataExtended_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoundDataExtended_FieldIndex enu = (SoundDataExtended_FieldIndex)index;
                switch (enu)
                {
                    case SoundDataExtended_FieldIndex.AttenuationCurve:
                        this.AttenuationCurve = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SoundDataExtended_FieldIndex.ReverbAttenuationControl:
                        this.ReverbAttenuationControl = (Exception?)obj;
                        break;
                    case SoundDataExtended_FieldIndex.Priority:
                        this.Priority = (Exception?)obj;
                        break;
                    case SoundDataExtended_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (AttenuationCurve != null) return true;
                if (ReverbAttenuationControl != null) return true;
                if (Priority != null) return true;
                if (Unknown != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (AttenuationCurve is {} AttenuationCurveItem)
                {
                    sb.AppendLine("AttenuationCurve =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AttenuationCurveItem.Overall);
                        if (AttenuationCurveItem.Specific != null)
                        {
                            foreach (var subItem in AttenuationCurveItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ReverbAttenuationControl, "ReverbAttenuationControl");
                }
                {
                    sb.AppendItem(Priority, "Priority");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.AttenuationCurve = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.AttenuationCurve?.Overall, rhs.AttenuationCurve?.Overall), Noggog.ExceptionExt.Combine(this.AttenuationCurve?.Specific, rhs.AttenuationCurve?.Specific));
                ret.ReverbAttenuationControl = this.ReverbAttenuationControl.Combine(rhs.ReverbAttenuationControl);
                ret.Priority = this.Priority.Combine(rhs.Priority);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SoundData.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool AttenuationCurve;
            public bool ReverbAttenuationControl;
            public bool Priority;
            public bool Unknown;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.AttenuationCurve = defaultOn;
                this.ReverbAttenuationControl = defaultOn;
                this.Priority = defaultOn;
                this.Unknown = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((AttenuationCurve, null));
                ret.Add((ReverbAttenuationControl, null));
                ret.Add((Priority, null));
                ret.Add((Unknown, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundDataExtendedBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundDataExtendedBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SoundDataExtended CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundDataExtended();
            ((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundDataExtended item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoundDataExtended GetNew()
        {
            return new SoundDataExtended();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundDataExtended :
        ILoquiObjectSetter<ISoundDataExtendedInternal>,
        ISoundDataExtendedInternalGetter,
        ISoundDataInternal
    {
        new Int16[] AttenuationCurve { get; }
        new Int16 ReverbAttenuationControl { get; set; }
        new Int32 Priority { get; set; }
        new Int64 Unknown { get; set; }
    }

    public partial interface ISoundDataExtendedInternal :
        ISoundDataInternal,
        ISoundDataExtended,
        ISoundDataExtendedInternalGetter
    {
    }

    public partial interface ISoundDataExtendedGetter :
        ISoundDataGetter,
        IBinaryItem,
        ILoquiObject<ISoundDataExtendedInternalGetter>
    {
        static new ILoquiRegistration StaticRegistration => SoundDataExtended_Registration.Instance;
        ReadOnlyMemorySlice<Int16> AttenuationCurve { get; }
        Int16 ReverbAttenuationControl { get; }
        Int32 Priority { get; }
        Int64 Unknown { get; }

    }

    public partial interface ISoundDataExtendedInternalGetter :
        ISoundDataInternalGetter,
        ISoundDataExtendedGetter
    {


    }
    #endregion

    #region Common MixIn
    public static partial class SoundDataExtendedMixIn
    {
        public static void Clear(this ISoundDataExtendedInternal item)
        {
            ((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundDataExtended.Mask<bool> GetEqualsMask(
            this ISoundDataExtendedInternalGetter item,
            ISoundDataExtendedInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundDataExtendedInternalGetter item,
            string? name = null,
            SoundDataExtended.Mask<bool>? printMask = null)
        {
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundDataExtendedInternalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundDataExtended.Mask<bool>? printMask = null)
        {
            ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundDataExtendedInternalGetter item,
            ISoundDataExtendedInternalGetter rhs,
            SoundDataExtended.TranslationMask? equalsMask = null)
        {
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundDataExtendedInternal lhs,
            ISoundDataExtendedInternalGetter rhs,
            out SoundDataExtended.ErrorMask errorMask,
            SoundDataExtended.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundDataExtended.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundDataExtendedInternal lhs,
            ISoundDataExtendedInternalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundDataExtended DeepCopy(
            this ISoundDataExtendedInternalGetter item,
            SoundDataExtended.TranslationMask? copyMask = null)
        {
            return ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundDataExtended DeepCopy(
            this ISoundDataExtendedInternalGetter item,
            out SoundDataExtended.ErrorMask errorMask,
            SoundDataExtended.TranslationMask? copyMask = null)
        {
            return ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundDataExtended DeepCopy(
            this ISoundDataExtendedInternalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundDataExtendedInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundDataExtendedSetterCommon)((ISoundDataExtendedGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    #region Field Index
    internal enum SoundDataExtended_FieldIndex
    {
        MinimumAttenuationDistance = 0,
        MaximumAttenuationDistance = 1,
        FrequencyAdjustment = 2,
        Flags = 3,
        StaticAttenuation = 4,
        StopTime = 5,
        StartTime = 6,
        AttenuationCurve = 7,
        ReverbAttenuationControl = 8,
        Priority = 9,
        Unknown = 10,
    }
    #endregion

    #region Registration
    internal partial class SoundDataExtended_Registration : ILoquiRegistration
    {
        public static readonly SoundDataExtended_Registration Instance = new SoundDataExtended_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout3.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(SoundDataExtended.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundDataExtended.ErrorMask);

        public static readonly Type ClassType = typeof(SoundDataExtended);

        public static readonly Type GetterType = typeof(ISoundDataExtendedGetter);

        public static readonly Type? InternalGetterType = typeof(ISoundDataExtendedInternalGetter);

        public static readonly Type SetterType = typeof(ISoundDataExtended);

        public static readonly Type? InternalSetterType = typeof(ISoundDataExtendedInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout3.SoundDataExtended";

        public const string Name = "SoundDataExtended";

        public const string Namespace = "Mutagen.Bethesda.Fallout3";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SNDD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.SNDD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SoundDataExtendedBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundDataExtendedSetterCommon : SoundDataSetterCommon
    {
        public new static readonly SoundDataExtendedSetterCommon Instance = new SoundDataExtendedSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundDataExtendedInternal item)
        {
            ClearPartial();
            item.AttenuationCurve.Reset();
            item.ReverbAttenuationControl = default(Int16);
            item.Priority = default(Int32);
            item.Unknown = default(Int64);
            base.Clear(item);
        }
        
        public override void Clear(ISoundDataInternal item)
        {
            Clear(item: (ISoundDataExtendedInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundDataExtended obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundDataExtendedInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.SNDD),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SoundDataExtendedBinaryCreateTranslation.FillBinaryStructs);
        }
        
        public override void CopyInFromBinary(
            ISoundDataInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundDataExtended)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SoundDataExtendedCommon : SoundDataCommon
    {
        public new static readonly SoundDataExtendedCommon Instance = new SoundDataExtendedCommon();

        public SoundDataExtended.Mask<bool> GetEqualsMask(
            ISoundDataExtendedInternalGetter item,
            ISoundDataExtendedInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundDataExtended.Mask<bool>(false);
            ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundDataExtendedInternalGetter item,
            ISoundDataExtendedInternalGetter rhs,
            SoundDataExtended.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.AttenuationCurve = EqualsMaskHelper.SpanEqualsHelper<Int16>(
                item.AttenuationCurve,
                rhs.AttenuationCurve,
                (l, r) => l == r,
                include);
            ret.ReverbAttenuationControl = item.ReverbAttenuationControl == rhs.ReverbAttenuationControl;
            ret.Priority = item.Priority == rhs.Priority;
            ret.Unknown = item.Unknown == rhs.Unknown;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISoundDataExtendedInternalGetter item,
            string? name = null,
            SoundDataExtended.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundDataExtendedInternalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundDataExtended.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundDataExtended =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundDataExtended) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundDataExtendedInternalGetter item,
            StructuredStringBuilder sb,
            SoundDataExtended.Mask<bool>? printMask = null)
        {
            SoundDataCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.AttenuationCurve?.Overall ?? true)
            {
                sb.AppendLine("AttenuationCurve =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.AttenuationCurve)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.ReverbAttenuationControl ?? true)
            {
                sb.AppendItem(item.ReverbAttenuationControl, "ReverbAttenuationControl");
            }
            if (printMask?.Priority ?? true)
            {
                sb.AppendItem(item.Priority, "Priority");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
        }
        
        public static SoundDataExtended_FieldIndex ConvertFieldIndex(SoundData_FieldIndex index)
        {
            switch (index)
            {
                case SoundData_FieldIndex.MinimumAttenuationDistance:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.MaximumAttenuationDistance:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.FrequencyAdjustment:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.Flags:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.StaticAttenuation:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.StopTime:
                    return (SoundDataExtended_FieldIndex)((int)index);
                case SoundData_FieldIndex.StartTime:
                    return (SoundDataExtended_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundDataExtendedInternalGetter? lhs,
            ISoundDataExtendedInternalGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISoundDataInternalGetter)lhs, (ISoundDataInternalGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.AttenuationCurve) ?? true))
            {
                if (!MemoryExtensions.SequenceEqual<Int16>(lhs.AttenuationCurve.Span!, rhs.AttenuationCurve.Span!)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.ReverbAttenuationControl) ?? true))
            {
                if (lhs.ReverbAttenuationControl != rhs.ReverbAttenuationControl) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.Priority) ?? true))
            {
                if (lhs.Priority != rhs.Priority) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISoundDataInternalGetter? lhs,
            ISoundDataInternalGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundDataExtendedInternalGetter?)lhs,
                rhs: rhs as ISoundDataExtendedInternalGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISoundDataExtendedInternalGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.AttenuationCurve);
            hash.Add(item.ReverbAttenuationControl);
            hash.Add(item.Priority);
            hash.Add(item.Unknown);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISoundDataInternalGetter item)
        {
            return GetHashCode(item: (ISoundDataExtendedInternalGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoundDataExtended.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundDataExtendedGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SoundDataExtendedSetterTranslationCommon : SoundDataSetterTranslationCommon
    {
        public new static readonly SoundDataExtendedSetterTranslationCommon Instance = new SoundDataExtendedSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundDataExtendedInternal item,
            ISoundDataExtendedInternalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISoundDataExtended item,
            ISoundDataExtendedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISoundData)item,
                (ISoundDataGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.AttenuationCurve) ?? true))
            {
                rhs.AttenuationCurve.Span.CopyTo(item.AttenuationCurve.AsSpan());
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.ReverbAttenuationControl) ?? true))
            {
                item.ReverbAttenuationControl = rhs.ReverbAttenuationControl;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDataExtended_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISoundDataExtended item,
            ISoundDataExtendedGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISoundDataInternal item,
            ISoundDataInternalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDataExtendedInternal)item,
                rhs: (ISoundDataExtendedInternalGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISoundData item,
            ISoundDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDataExtended)item,
                rhs: (ISoundDataExtendedGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SoundDataExtended DeepCopy(
            ISoundDataExtendedInternalGetter item,
            SoundDataExtended.TranslationMask? copyMask = null)
        {
            SoundDataExtended ret = (SoundDataExtended)((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()!).GetNew();
            ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundDataExtended DeepCopy(
            ISoundDataExtendedInternalGetter item,
            out SoundDataExtended.ErrorMask errorMask,
            SoundDataExtended.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundDataExtended ret = (SoundDataExtended)((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()!).GetNew();
            ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundDataExtended.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundDataExtended DeepCopy(
            ISoundDataExtendedInternalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundDataExtended ret = (SoundDataExtended)((SoundDataExtendedCommon)((ISoundDataExtendedGetter)item).CommonInstance()!).GetNew();
            ((SoundDataExtendedSetterTranslationCommon)((ISoundDataExtendedGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    public partial class SoundDataExtended
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDataExtended_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundDataExtended_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundDataExtendedCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoundDataExtendedSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundDataExtendedSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout3
{
    public partial class SoundDataExtendedBinaryWriteTranslation :
        SoundDataBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SoundDataExtendedBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ISoundDataExtendedInternalGetter item,
            MutagenWriter writer)
        {
            SoundDataBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Int16>.Instance.Write(
                writer: writer,
                items: item.AttenuationCurve,
                transl: Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            writer.Write(item.ReverbAttenuationControl);
            writer.Write(item.Priority);
            writer.Write(item.Unknown);
        }

        public void Write(
            MutagenWriter writer,
            ISoundDataExtendedInternalGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.SNDD),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundDataExtendedInternalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISoundDataInternalGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundDataExtendedInternalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundDataExtendedBinaryCreateTranslation : SoundDataBinaryCreateTranslation
    {
        public new static readonly SoundDataExtendedBinaryCreateTranslation Instance = new SoundDataExtendedBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISoundDataExtendedInternal item,
            MutagenFrame frame)
        {
            SoundDataBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
            item.AttenuationCurve.SetTo(
                Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Int16>.Instance.Parse(
                    reader: frame,
                    amount: 5,
                    transl: Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse));
            item.ReverbAttenuationControl = frame.ReadInt16();
            item.Priority = frame.ReadInt32();
            item.Unknown = frame.ReadInt64();
        }

    }

}
namespace Mutagen.Bethesda.Fallout3
{
    #region Binary Write Mixins
    public static class SoundDataExtendedBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout3
{
    internal partial class SoundDataExtendedBinaryOverlay :
        SoundDataBinaryOverlay,
        ISoundDataExtendedInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDataExtended_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundDataExtended_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundDataExtendedCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundDataExtendedSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundDataExtendedBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundDataExtendedBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public ReadOnlyMemorySlice<Int16> AttenuationCurve => BinaryOverlayArrayHelper.Int16SliceFromFixedSize(_structData.Slice(0xC), amount: 5);
        public Int16 ReverbAttenuationControl => BinaryPrimitives.ReadInt16LittleEndian(_structData.Slice(0x16, 0x2));
        public Int32 Priority => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x18, 0x4));
        public Int64 Unknown => BinaryPrimitives.ReadInt64LittleEndian(_structData.Slice(0x1C, 0x8));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundDataExtendedBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundDataExtendedInternalGetter SoundDataExtendedFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0x24,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new SoundDataExtendedBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0x24 + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ISoundDataExtendedInternalGetter SoundDataExtendedFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundDataExtendedFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundDataExtendedMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundDataExtendedInternalGetter rhs) return false;
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundDataExtendedInternalGetter? obj)
        {
            return ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundDataExtendedCommon)((ISoundDataExtendedGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

