/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout3;
using Mutagen.Bethesda.Fallout3.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout3.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout3.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout3
{
    #region Class
    public partial class Faction :
        Fallout3MajorRecord,
        IEquatable<IFactionGetter>,
        IFactionInternal,
        ILoquiObjectSetter<Faction>
    {
        #region Ctor
        protected Faction()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IFactionGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Relations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Relation> _Relations = new ExtendedList<Relation>();
        public ExtendedList<Relation> Relations
        {
            get => this._Relations;
            init => this._Relations = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRelationGetter> IFactionGetter.Relations => _Relations;
        #endregion

        #endregion
        #region Flags
        public Faction.FactionFlag Flags { get; set; } = default(Faction.FactionFlag);
        #endregion
        #region CrimeGoldMultiplier
        public Single? CrimeGoldMultiplier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IFactionGetter.CrimeGoldMultiplier => this.CrimeGoldMultiplier;
        #endregion
        #region Ranks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Rank> _Ranks = new ExtendedList<Rank>();
        public ExtendedList<Rank> Ranks
        {
            get => this._Ranks;
            init => this._Ranks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankGetter> IFactionGetter.Ranks => _Ranks;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FactionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            Fallout3MajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Name = initialValue;
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>());
                this.Flags = initialValue;
                this.CrimeGoldMultiplier = initialValue;
                this.Ranks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem Fallout3MajorRecordFlags,
                TItem Name,
                TItem Relations,
                TItem Flags,
                TItem CrimeGoldMultiplier,
                TItem Ranks)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                Fallout3MajorRecordFlags: Fallout3MajorRecordFlags)
            {
                this.Name = Name;
                this.Relations = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>(Relations, Enumerable.Empty<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>());
                this.Flags = Flags;
                this.CrimeGoldMultiplier = CrimeGoldMultiplier;
                this.Ranks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>?>(Ranks, Enumerable.Empty<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Relation.Mask<TItem>?>>?>? Relations;
            public TItem Flags;
            public TItem CrimeGoldMultiplier;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Rank.Mask<TItem>?>>?>? Ranks;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Relations, rhs.Relations)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.CrimeGoldMultiplier, rhs.CrimeGoldMultiplier)) return false;
                if (!object.Equals(this.Ranks, rhs.Ranks)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.Relations);
                hash.Add(this.Flags);
                hash.Add(this.CrimeGoldMultiplier);
                hash.Add(this.Ranks);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Name)) return false;
                if (this.Relations != null)
                {
                    if (!eval(this.Relations.Overall)) return false;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.CrimeGoldMultiplier)) return false;
                if (this.Ranks != null)
                {
                    if (!eval(this.Ranks.Overall)) return false;
                    if (this.Ranks.Specific != null)
                    {
                        foreach (var item in this.Ranks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Name)) return true;
                if (this.Relations != null)
                {
                    if (eval(this.Relations.Overall)) return true;
                    if (this.Relations.Specific != null)
                    {
                        foreach (var item in this.Relations.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Flags)) return true;
                if (eval(this.CrimeGoldMultiplier)) return true;
                if (this.Ranks != null)
                {
                    if (eval(this.Ranks.Overall)) return true;
                    if (this.Ranks.Specific != null)
                    {
                        foreach (var item in this.Ranks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Faction.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Name = eval(this.Name);
                if (Relations != null)
                {
                    obj.Relations = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Relation.Mask<R>?>>?>(eval(this.Relations.Overall), Enumerable.Empty<MaskItemIndexed<R, Relation.Mask<R>?>>());
                    if (Relations.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Relation.Mask<R>?>>();
                        obj.Relations.Specific = l;
                        foreach (var item in Relations.Specific)
                        {
                            MaskItemIndexed<R, Relation.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Relation.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Flags = eval(this.Flags);
                obj.CrimeGoldMultiplier = eval(this.CrimeGoldMultiplier);
                if (Ranks != null)
                {
                    obj.Ranks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Rank.Mask<R>?>>?>(eval(this.Ranks.Overall), Enumerable.Empty<MaskItemIndexed<R, Rank.Mask<R>?>>());
                    if (Ranks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Rank.Mask<R>?>>();
                        obj.Ranks.Specific = l;
                        foreach (var item in Ranks.Specific)
                        {
                            MaskItemIndexed<R, Rank.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Rank.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Faction.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Faction.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Faction.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Relations?.Overall ?? true)
                        && Relations is {} RelationsItem)
                    {
                        sb.AppendLine("Relations =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RelationsItem.Overall);
                            if (RelationsItem.Specific != null)
                            {
                                foreach (var subItem in RelationsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.CrimeGoldMultiplier ?? true)
                    {
                        sb.AppendItem(CrimeGoldMultiplier, "CrimeGoldMultiplier");
                    }
                    if ((printMask?.Ranks?.Overall ?? true)
                        && Ranks is {} RanksItem)
                    {
                        sb.AppendLine("Ranks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RanksItem.Overall);
                            if (RanksItem.Specific != null)
                            {
                                foreach (var subItem in RanksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            Fallout3MajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>? Relations;
            public Exception? Flags;
            public Exception? CrimeGoldMultiplier;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>? Ranks;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        return Name;
                    case Faction_FieldIndex.Relations:
                        return Relations;
                    case Faction_FieldIndex.Flags:
                        return Flags;
                    case Faction_FieldIndex.CrimeGoldMultiplier:
                        return CrimeGoldMultiplier;
                    case Faction_FieldIndex.Ranks:
                        return Ranks;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Faction_FieldIndex.Relations:
                        this.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>(ex, null);
                        break;
                    case Faction_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Faction_FieldIndex.CrimeGoldMultiplier:
                        this.CrimeGoldMultiplier = ex;
                        break;
                    case Faction_FieldIndex.Ranks:
                        this.Ranks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Faction_FieldIndex enu = (Faction_FieldIndex)index;
                switch (enu)
                {
                    case Faction_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.Relations:
                        this.Relations = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>)obj;
                        break;
                    case Faction_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.CrimeGoldMultiplier:
                        this.CrimeGoldMultiplier = (Exception?)obj;
                        break;
                    case Faction_FieldIndex.Ranks:
                        this.Ranks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (Relations != null) return true;
                if (Flags != null) return true;
                if (CrimeGoldMultiplier != null) return true;
                if (Ranks != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                if (Relations is {} RelationsItem)
                {
                    sb.AppendLine("Relations =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RelationsItem.Overall);
                        if (RelationsItem.Specific != null)
                        {
                            foreach (var subItem in RelationsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(CrimeGoldMultiplier, "CrimeGoldMultiplier");
                }
                if (Ranks is {} RanksItem)
                {
                    sb.AppendLine("Ranks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RanksItem.Overall);
                        if (RanksItem.Specific != null)
                        {
                            foreach (var subItem in RanksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Relations = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Relation.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Relations?.Overall, rhs.Relations?.Overall), Noggog.ExceptionExt.Combine(this.Relations?.Specific, rhs.Relations?.Specific));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.CrimeGoldMultiplier = this.CrimeGoldMultiplier.Combine(rhs.CrimeGoldMultiplier);
                ret.Ranks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Rank.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Ranks?.Overall, rhs.Ranks?.Overall), Noggog.ExceptionExt.Combine(this.Ranks?.Specific, rhs.Ranks?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            Fallout3MajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Name;
            public Relation.TranslationMask? Relations;
            public bool Flags;
            public bool CrimeGoldMultiplier;
            public Rank.TranslationMask? Ranks;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.CrimeGoldMultiplier = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Name, null));
                ret.Add((Relations == null ? DefaultOn : !Relations.GetCrystal().CopyNothing, Relations?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((CrimeGoldMultiplier, null));
                ret.Add((Ranks == null ? DefaultOn : !Ranks.GetCrystal().CopyNothing, Ranks?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Faction_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FactionCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FactionSetterCommon.Instance.RemapLinks(this, mapping);
        public Faction(
            FormKey formKey,
            Fallout3Release gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        private Faction(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            CustomCtor();
        }

        public Faction(IFallout3Mod mod)
            : this(
                mod.GetNextFormKey(),
                mod.Fallout3Release)
        {
        }

        public Faction(IFallout3Mod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.Fallout3Release)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Faction>.ToString(this);
        }

        protected override Type LinkType => typeof(IFaction);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFactionGetter rhs) return false;
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFactionGetter? obj)
        {
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FactionCommon)((IFactionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Faction CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Faction();
            ((FactionSetterCommon)((IFactionGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Faction item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FactionSetterCommon)((IFactionGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Faction GetNew()
        {
            return new Faction();
        }

    }
    #endregion

    #region Interface
    public partial interface IFaction :
        IFactionGetter,
        IFallout3MajorRecordInternal,
        IFormLinkContainer,
        ILoquiObjectSetter<IFactionInternal>,
        INamed,
        INamedRequired,
        IRelatable
    {
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new ExtendedList<Relation> Relations { get; }
        new Faction.FactionFlag Flags { get; set; }
        new Single? CrimeGoldMultiplier { get; set; }
        new ExtendedList<Rank> Ranks { get; }
    }

    public partial interface IFactionInternal :
        IFallout3MajorRecordInternal,
        IFaction,
        IFactionGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Fallout3.Internals.RecordTypeInts.FACT)]
    public partial interface IFactionGetter :
        IFallout3MajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IFactionGetter>,
        IMapsToGetter<IFactionGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IRelatableGetter
    {
        static new ILoquiRegistration StaticRegistration => Faction_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        IReadOnlyList<IRelationGetter> Relations { get; }
        Faction.FactionFlag Flags { get; }
        Single? CrimeGoldMultiplier { get; }
        IReadOnlyList<IRankGetter> Ranks { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FactionMixIn
    {
        public static void Clear(this IFactionInternal item)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Faction.Mask<bool> GetEqualsMask(
            this IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFactionGetter item,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFactionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFactionGetter item,
            IFactionGetter rhs,
            Faction.TranslationMask? equalsMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFactionInternal lhs,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FactionSetterTranslationCommon)((IFactionGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Faction DeepCopy(
            this IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FactionSetterTranslationCommon)((IFactionGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Faction Duplicate(
            this IFactionGetter item,
            FormKey formKey,
            Faction.TranslationMask? copyMask = null)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Faction Duplicate(
            this IFactionGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((FactionCommon)((IFactionGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFactionInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FactionSetterCommon)((IFactionGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    #region Field Index
    internal enum Faction_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        Fallout3MajorRecordFlags = 6,
        Name = 7,
        Relations = 8,
        Flags = 9,
        CrimeGoldMultiplier = 10,
        Ranks = 11,
    }
    #endregion

    #region Registration
    internal partial class Faction_Registration : ILoquiRegistration
    {
        public static readonly Faction_Registration Instance = new Faction_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout3.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(Faction.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Faction.ErrorMask);

        public static readonly Type ClassType = typeof(Faction);

        public static readonly Type GetterType = typeof(IFactionGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFaction);

        public static readonly Type? InternalSetterType = typeof(IFactionInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout3.Faction";

        public const string Name = "Faction";

        public const string Namespace = "Mutagen.Bethesda.Fallout3";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FACT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.FACT);
            var all = RecordCollection.Factory(
                RecordTypes.FACT,
                RecordTypes.FULL,
                RecordTypes.XNAM,
                RecordTypes.DATA,
                RecordTypes.CNAM,
                RecordTypes.RNAM,
                RecordTypes.MNAM,
                RecordTypes.FNAM,
                RecordTypes.INAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FactionBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FactionSetterCommon : Fallout3MajorRecordSetterCommon
    {
        public new static readonly FactionSetterCommon Instance = new FactionSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFactionInternal item)
        {
            ClearPartial();
            item.Name = default;
            item.Relations.Clear();
            item.Flags = default(Faction.FactionFlag);
            item.CrimeGoldMultiplier = default;
            item.Ranks.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IFallout3MajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFactionInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFaction obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Relations.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFactionInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IFactionInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FactionBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FactionBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IFallout3MajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Faction)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Faction)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class FactionCommon : Fallout3MajorRecordCommon
    {
        public new static readonly FactionCommon Instance = new FactionCommon();

        public Faction.Mask<bool> GetEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Faction.Mask<bool>(false);
            ((FactionCommon)((IFactionGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFactionGetter item,
            IFactionGetter rhs,
            Faction.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Relations = item.Relations.CollectionEqualsHelper(
                rhs.Relations,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.CrimeGoldMultiplier = item.CrimeGoldMultiplier.EqualsWithin(rhs.CrimeGoldMultiplier);
            ret.Ranks = item.Ranks.CollectionEqualsHelper(
                rhs.Ranks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFactionGetter item,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFactionGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Faction.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Faction =>");
            }
            else
            {
                sb.AppendLine($"{name} (Faction) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFactionGetter item,
            StructuredStringBuilder sb,
            Faction.Mask<bool>? printMask = null)
        {
            Fallout3MajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Relations?.Overall ?? true)
            {
                sb.AppendLine("Relations =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Relations)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if ((printMask?.CrimeGoldMultiplier ?? true)
                && item.CrimeGoldMultiplier is {} CrimeGoldMultiplierItem)
            {
                sb.AppendItem(CrimeGoldMultiplierItem, "CrimeGoldMultiplier");
            }
            if (printMask?.Ranks?.Overall ?? true)
            {
                sb.AppendLine("Ranks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Ranks)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Faction_FieldIndex ConvertFieldIndex(Fallout3MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case Fallout3MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.VersionControl:
                    return (Faction_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.FormVersion:
                    return (Faction_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.Version2:
                    return (Faction_FieldIndex)((int)index);
                case Fallout3MajorRecord_FieldIndex.Fallout3MajorRecordFlags:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Faction_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Faction_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Faction_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFactionGetter? lhs,
            IFactionGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IFallout3MajorRecordGetter)lhs, (IFallout3MajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                if (!lhs.Relations.SequenceEqual(rhs.Relations, (l, r) => ((RelationCommon)((IRelationGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Faction_FieldIndex.Relations)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeGoldMultiplier) ?? true))
            {
                if (!lhs.CrimeGoldMultiplier.EqualsWithin(rhs.CrimeGoldMultiplier)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Faction_FieldIndex.Ranks) ?? true))
            {
                if (!lhs.Ranks.SequenceEqual(rhs.Ranks, (l, r) => ((RankCommon)((IRankGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Faction_FieldIndex.Ranks)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IFallout3MajorRecordGetter? lhs,
            IFallout3MajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFactionGetter?)lhs,
                rhs: rhs as IFactionGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFactionGetter?)lhs,
                rhs: rhs as IFactionGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFactionGetter item)
        {
            var hash = new HashCode();
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Relations);
            hash.Add(item.Flags);
            if (item.CrimeGoldMultiplier is {} CrimeGoldMultiplieritem)
            {
                hash.Add(CrimeGoldMultiplieritem);
            }
            hash.Add(item.Ranks);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IFallout3MajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFactionGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Faction.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFactionGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Relations.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public Faction Duplicate(
            IFactionGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Faction(formKey, default(Fallout3Release));
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override Fallout3MajorRecord Duplicate(
            IFallout3MajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFactionGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFactionGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class FactionSetterTranslationCommon : Fallout3MajorRecordSetterTranslationCommon
    {
        public new static readonly FactionSetterTranslationCommon Instance = new FactionSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFactionInternal item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IFaction item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IFallout3MajorRecord)item,
                (IFallout3MajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Relations) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Relations);
                try
                {
                    item.Relations.SetTo(
                        rhs.Relations
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.CrimeGoldMultiplier) ?? true))
            {
                item.CrimeGoldMultiplier = rhs.CrimeGoldMultiplier;
            }
            if ((copyMask?.GetShouldTranslate((int)Faction_FieldIndex.Ranks) ?? true))
            {
                errorMask?.PushIndex((int)Faction_FieldIndex.Ranks);
                try
                {
                    item.Ranks.SetTo(
                        rhs.Ranks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFaction item,
            IFactionGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IFallout3MajorRecordInternal item,
            IFallout3MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFactionInternal)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IFallout3MajorRecord item,
            IFallout3MajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFaction)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFactionInternal)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFaction)item,
                rhs: (IFactionGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Faction DeepCopy(
            IFactionGetter item,
            Faction.TranslationMask? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ((FactionSetterTranslationCommon)((IFactionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Faction DeepCopy(
            IFactionGetter item,
            out Faction.ErrorMask errorMask,
            Faction.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ((FactionSetterTranslationCommon)((IFactionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Faction.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Faction DeepCopy(
            IFactionGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Faction ret = (Faction)((FactionCommon)((IFactionGetter)item).CommonInstance()!).GetNew();
            ((FactionSetterTranslationCommon)((IFactionGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    public partial class Faction
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Faction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FactionSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout3
{
    public partial class FactionBinaryWriteTranslation :
        Fallout3MajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly FactionBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IFactionGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRelationGetter>.Instance.Write(
                writer: writer,
                items: item.Relations,
                transl: (MutagenWriter subWriter, IRelationGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((RelationBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            EnumBinaryTranslation<Faction.FactionFlag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.CrimeGoldMultiplier,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRankGetter>.Instance.Write(
                writer: writer,
                items: item.Ranks,
                transl: (MutagenWriter subWriter, IRankGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((RankBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IFactionGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.FACT,
                writeEmbedded: Fallout3MajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IFallout3MajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFactionGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FactionBinaryCreateTranslation : Fallout3MajorRecordBinaryCreateTranslation
    {
        public new static readonly FactionBinaryCreateTranslation Instance = new FactionBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.FACT;
        public static ParseResult FillBinaryRecordTypes(
            IFactionInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Faction_FieldIndex.Name;
                }
                case RecordTypeInts.XNAM:
                {
                    item.Relations.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Relation>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Relation_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Relation.TryCreateFromBinary));
                    return (int)Faction_FieldIndex.Relations;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Faction.FactionFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Faction_FieldIndex.Flags;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CrimeGoldMultiplier = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Faction_FieldIndex.CrimeGoldMultiplier;
                }
                case RecordTypeInts.RNAM:
                case RecordTypeInts.MNAM:
                case RecordTypeInts.FNAM:
                case RecordTypeInts.INAM:
                {
                    item.Ranks.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Rank>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Rank_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Rank.TryCreateFromBinary));
                    return (int)Faction_FieldIndex.Ranks;
                }
                default:
                    return Fallout3MajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Fallout3
{
    #region Binary Write Mixins
    public static class FactionBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout3
{
    internal partial class FactionBinaryOverlay :
        Fallout3MajorRecordBinaryOverlay,
        IFactionGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Faction_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Faction_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FactionCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FactionSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FactionCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FactionBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FactionBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IFaction);


        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        public IReadOnlyList<IRelationGetter> Relations { get; private set; } = Array.Empty<IRelationGetter>();
        #region Flags
        private int? _FlagsLocation;
        public Faction.FactionFlag Flags => _FlagsLocation.HasValue ? (Faction.FactionFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(Faction.FactionFlag);
        #endregion
        #region CrimeGoldMultiplier
        private int? _CrimeGoldMultiplierLocation;
        public Single? CrimeGoldMultiplier => _CrimeGoldMultiplierLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CrimeGoldMultiplierLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public IReadOnlyList<IRankGetter> Ranks { get; private set; } = Array.Empty<IRankGetter>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FactionBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFactionGetter FactionFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FactionBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFactionGetter FactionFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FactionFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.Name;
                }
                case RecordTypeInts.XNAM:
                {
                    this.Relations = BinaryOverlayList.FactoryByArray<IRelationGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => RelationBinaryOverlay.RelationFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Relation_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Faction_FieldIndex.Relations;
                }
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.Flags;
                }
                case RecordTypeInts.CNAM:
                {
                    _CrimeGoldMultiplierLocation = (stream.Position - offset);
                    return (int)Faction_FieldIndex.CrimeGoldMultiplier;
                }
                case RecordTypeInts.RNAM:
                case RecordTypeInts.MNAM:
                case RecordTypeInts.FNAM:
                case RecordTypeInts.INAM:
                {
                    this.Ranks = this.ParseRepeatedTypelessSubrecord<IRankGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Rank_Registration.TriggerSpecs,
                        factory: RankBinaryOverlay.RankFactory);
                    return (int)Faction_FieldIndex.Ranks;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FactionMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Faction>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFactionGetter rhs) return false;
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFactionGetter? obj)
        {
            return ((FactionCommon)((IFactionGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FactionCommon)((IFactionGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

