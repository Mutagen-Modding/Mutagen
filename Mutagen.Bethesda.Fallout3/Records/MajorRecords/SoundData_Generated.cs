/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Fallout3.Internals;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Fallout3.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Fallout3.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Fallout3
{
    #region Class
    /// <summary>
    /// Implemented by: [SoundDataExtended]
    /// </summary>
    public partial class SoundData :
        IEquatable<ISoundDataInternalGetter>,
        ILoquiObjectSetter<SoundData>,
        ISoundDataInternal
    {
        #region Ctor
        public SoundData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FrequencyAdjustment
        public SByte FrequencyAdjustment { get; set; } = default(SByte);
        #endregion
        #region Unknown
        public SByte Unknown { get; set; } = default(SByte);
        #endregion
        #region Flags
        public SoundData.Flag Flags { get; set; } = default(SoundData.Flag);
        #endregion
        #region StaticAttenuation
        public Single StaticAttenuation { get; set; } = default(Single);
        #endregion
        #region StopTime
        public Single StopTime { get; set; } = default(Single);
        public static RangeFloat StopTime_Range = new RangeFloat(0f, 1434.375f);
        #endregion
        #region StartTime
        public Single StartTime { get; set; } = default(Single);
        public static RangeFloat StartTime_Range = new RangeFloat(0f, 1434.375f);
        #endregion

        #region To String

        public virtual void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundDataInternalGetter rhs) return false;
            return ((SoundDataCommon)((ISoundDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundDataInternalGetter? obj)
        {
            return ((SoundDataCommon)((ISoundDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundDataCommon)((ISoundDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.MinimumAttenuationDistance = initialValue;
                this.MaximumAttenuationDistance = initialValue;
                this.FrequencyAdjustment = initialValue;
                this.Unknown = initialValue;
                this.Flags = initialValue;
                this.StaticAttenuation = initialValue;
                this.StopTime = initialValue;
                this.StartTime = initialValue;
            }

            public Mask(
                TItem MinimumAttenuationDistance,
                TItem MaximumAttenuationDistance,
                TItem FrequencyAdjustment,
                TItem Unknown,
                TItem Flags,
                TItem StaticAttenuation,
                TItem StopTime,
                TItem StartTime)
            {
                this.MinimumAttenuationDistance = MinimumAttenuationDistance;
                this.MaximumAttenuationDistance = MaximumAttenuationDistance;
                this.FrequencyAdjustment = FrequencyAdjustment;
                this.Unknown = Unknown;
                this.Flags = Flags;
                this.StaticAttenuation = StaticAttenuation;
                this.StopTime = StopTime;
                this.StartTime = StartTime;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem MinimumAttenuationDistance;
            public TItem MaximumAttenuationDistance;
            public TItem FrequencyAdjustment;
            public TItem Unknown;
            public TItem Flags;
            public TItem StaticAttenuation;
            public TItem StopTime;
            public TItem StartTime;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.MinimumAttenuationDistance, rhs.MinimumAttenuationDistance)) return false;
                if (!object.Equals(this.MaximumAttenuationDistance, rhs.MaximumAttenuationDistance)) return false;
                if (!object.Equals(this.FrequencyAdjustment, rhs.FrequencyAdjustment)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.StaticAttenuation, rhs.StaticAttenuation)) return false;
                if (!object.Equals(this.StopTime, rhs.StopTime)) return false;
                if (!object.Equals(this.StartTime, rhs.StartTime)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.MinimumAttenuationDistance);
                hash.Add(this.MaximumAttenuationDistance);
                hash.Add(this.FrequencyAdjustment);
                hash.Add(this.Unknown);
                hash.Add(this.Flags);
                hash.Add(this.StaticAttenuation);
                hash.Add(this.StopTime);
                hash.Add(this.StartTime);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public virtual bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.MinimumAttenuationDistance)) return false;
                if (!eval(this.MaximumAttenuationDistance)) return false;
                if (!eval(this.FrequencyAdjustment)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.StaticAttenuation)) return false;
                if (!eval(this.StopTime)) return false;
                if (!eval(this.StartTime)) return false;
                return true;
            }
            #endregion

            #region Any
            public virtual bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.MinimumAttenuationDistance)) return true;
                if (eval(this.MaximumAttenuationDistance)) return true;
                if (eval(this.FrequencyAdjustment)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.StaticAttenuation)) return true;
                if (eval(this.StopTime)) return true;
                if (eval(this.StartTime)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.MinimumAttenuationDistance = eval(this.MinimumAttenuationDistance);
                obj.MaximumAttenuationDistance = eval(this.MaximumAttenuationDistance);
                obj.FrequencyAdjustment = eval(this.FrequencyAdjustment);
                obj.Unknown = eval(this.Unknown);
                obj.Flags = eval(this.Flags);
                obj.StaticAttenuation = eval(this.StaticAttenuation);
                obj.StopTime = eval(this.StopTime);
                obj.StartTime = eval(this.StartTime);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.MinimumAttenuationDistance ?? true)
                    {
                        sb.AppendItem(MinimumAttenuationDistance, "MinimumAttenuationDistance");
                    }
                    if (printMask?.MaximumAttenuationDistance ?? true)
                    {
                        sb.AppendItem(MaximumAttenuationDistance, "MaximumAttenuationDistance");
                    }
                    if (printMask?.FrequencyAdjustment ?? true)
                    {
                        sb.AppendItem(FrequencyAdjustment, "FrequencyAdjustment");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.StaticAttenuation ?? true)
                    {
                        sb.AppendItem(StaticAttenuation, "StaticAttenuation");
                    }
                    if (printMask?.StopTime ?? true)
                    {
                        sb.AppendItem(StopTime, "StopTime");
                    }
                    if (printMask?.StartTime ?? true)
                    {
                        sb.AppendItem(StartTime, "StartTime");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? MinimumAttenuationDistance;
            public Exception? MaximumAttenuationDistance;
            public Exception? FrequencyAdjustment;
            public Exception? Unknown;
            public Exception? Flags;
            public Exception? StaticAttenuation;
            public Exception? StopTime;
            public Exception? StartTime;
            #endregion

            #region IErrorMask
            public virtual object? GetNthMask(int index)
            {
                SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
                switch (enu)
                {
                    case SoundData_FieldIndex.MinimumAttenuationDistance:
                        return MinimumAttenuationDistance;
                    case SoundData_FieldIndex.MaximumAttenuationDistance:
                        return MaximumAttenuationDistance;
                    case SoundData_FieldIndex.FrequencyAdjustment:
                        return FrequencyAdjustment;
                    case SoundData_FieldIndex.Unknown:
                        return Unknown;
                    case SoundData_FieldIndex.Flags:
                        return Flags;
                    case SoundData_FieldIndex.StaticAttenuation:
                        return StaticAttenuation;
                    case SoundData_FieldIndex.StopTime:
                        return StopTime;
                    case SoundData_FieldIndex.StartTime:
                        return StartTime;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthException(int index, Exception ex)
            {
                SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
                switch (enu)
                {
                    case SoundData_FieldIndex.MinimumAttenuationDistance:
                        this.MinimumAttenuationDistance = ex;
                        break;
                    case SoundData_FieldIndex.MaximumAttenuationDistance:
                        this.MaximumAttenuationDistance = ex;
                        break;
                    case SoundData_FieldIndex.FrequencyAdjustment:
                        this.FrequencyAdjustment = ex;
                        break;
                    case SoundData_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case SoundData_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case SoundData_FieldIndex.StaticAttenuation:
                        this.StaticAttenuation = ex;
                        break;
                    case SoundData_FieldIndex.StopTime:
                        this.StopTime = ex;
                        break;
                    case SoundData_FieldIndex.StartTime:
                        this.StartTime = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual void SetNthMask(int index, object obj)
            {
                SoundData_FieldIndex enu = (SoundData_FieldIndex)index;
                switch (enu)
                {
                    case SoundData_FieldIndex.MinimumAttenuationDistance:
                        this.MinimumAttenuationDistance = (Exception?)obj;
                        break;
                    case SoundData_FieldIndex.MaximumAttenuationDistance:
                        this.MaximumAttenuationDistance = (Exception?)obj;
                        break;
                    case SoundData_FieldIndex.FrequencyAdjustment:
                        this.FrequencyAdjustment = (Exception?)obj;
                        break;
                    case SoundData_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case SoundData_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case SoundData_FieldIndex.StaticAttenuation:
                        this.StaticAttenuation = (Exception?)obj;
                        break;
                    case SoundData_FieldIndex.StopTime:
                        this.StopTime = (Exception?)obj;
                        break;
                    case SoundData_FieldIndex.StartTime:
                        this.StartTime = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public virtual bool IsInError()
            {
                if (Overall != null) return true;
                if (MinimumAttenuationDistance != null) return true;
                if (MaximumAttenuationDistance != null) return true;
                if (FrequencyAdjustment != null) return true;
                if (Unknown != null) return true;
                if (Flags != null) return true;
                if (StaticAttenuation != null) return true;
                if (StopTime != null) return true;
                if (StartTime != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public virtual void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected virtual void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(MinimumAttenuationDistance, "MinimumAttenuationDistance");
                }
                {
                    sb.AppendItem(MaximumAttenuationDistance, "MaximumAttenuationDistance");
                }
                {
                    sb.AppendItem(FrequencyAdjustment, "FrequencyAdjustment");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(StaticAttenuation, "StaticAttenuation");
                }
                {
                    sb.AppendItem(StopTime, "StopTime");
                }
                {
                    sb.AppendItem(StartTime, "StartTime");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.MinimumAttenuationDistance = this.MinimumAttenuationDistance.Combine(rhs.MinimumAttenuationDistance);
                ret.MaximumAttenuationDistance = this.MaximumAttenuationDistance.Combine(rhs.MaximumAttenuationDistance);
                ret.FrequencyAdjustment = this.FrequencyAdjustment.Combine(rhs.FrequencyAdjustment);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.StaticAttenuation = this.StaticAttenuation.Combine(rhs.StaticAttenuation);
                ret.StopTime = this.StopTime.Combine(rhs.StopTime);
                ret.StartTime = this.StartTime.Combine(rhs.StartTime);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool MinimumAttenuationDistance;
            public bool MaximumAttenuationDistance;
            public bool FrequencyAdjustment;
            public bool Unknown;
            public bool Flags;
            public bool StaticAttenuation;
            public bool StopTime;
            public bool StartTime;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.MinimumAttenuationDistance = defaultOn;
                this.MaximumAttenuationDistance = defaultOn;
                this.FrequencyAdjustment = defaultOn;
                this.Unknown = defaultOn;
                this.Flags = defaultOn;
                this.StaticAttenuation = defaultOn;
                this.StopTime = defaultOn;
                this.StartTime = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected virtual void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((MinimumAttenuationDistance, null));
                ret.Add((MaximumAttenuationDistance, null));
                ret.Add((FrequencyAdjustment, null));
                ret.Add((Unknown, null));
                ret.Add((Flags, null));
                ret.Add((StaticAttenuation, null));
                ret.Add((StopTime, null));
                ret.Add((StartTime, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => SoundDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static SoundData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundData();
            ((SoundDataSetterCommon)((ISoundDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundDataSetterCommon)((ISoundDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SoundData GetNew()
        {
            return new SoundData();
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [SoundDataExtended]
    /// </summary>
    public partial interface ISoundData :
        ILoquiObjectSetter<ISoundDataInternal>,
        ISoundDataInternalGetter
    {
        new UInt16 MinimumAttenuationDistance { get; set; }
        new UInt16 MaximumAttenuationDistance { get; set; }
        new SByte FrequencyAdjustment { get; set; }
        new SByte Unknown { get; set; }
        new SoundData.Flag Flags { get; set; }
        new Single StaticAttenuation { get; set; }
        new Single StopTime { get; set; }
        new Single StartTime { get; set; }
    }

    public partial interface ISoundDataInternal :
        ISoundData,
        ISoundDataInternalGetter
    {
    }

    /// <summary>
    /// Implemented by: [SoundDataExtended]
    /// </summary>
    public partial interface ISoundDataGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<ISoundDataInternalGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => SoundData_Registration.Instance;
        UInt16 MinimumAttenuationDistance { get; }
        UInt16 MaximumAttenuationDistance { get; }
        SByte FrequencyAdjustment { get; }
        SByte Unknown { get; }
        SoundData.Flag Flags { get; }
        Single StaticAttenuation { get; }
        Single StopTime { get; }
        Single StartTime { get; }

    }

    public partial interface ISoundDataInternalGetter : ISoundDataGetter
    {


    }
    #endregion

    #region Common MixIn
    public static partial class SoundDataMixIn
    {
        public static void Clear(this ISoundDataInternal item)
        {
            ((SoundDataSetterCommon)((ISoundDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundData.Mask<bool> GetEqualsMask(
            this ISoundDataInternalGetter item,
            ISoundDataInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundDataInternalGetter item,
            string? name = null,
            SoundData.Mask<bool>? printMask = null)
        {
            return ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundDataInternalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundData.Mask<bool>? printMask = null)
        {
            ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundDataInternalGetter item,
            ISoundDataInternalGetter rhs,
            SoundData.TranslationMask? equalsMask = null)
        {
            return ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundDataInternal lhs,
            ISoundDataInternalGetter rhs)
        {
            ((SoundDataSetterTranslationCommon)((ISoundDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundDataInternal lhs,
            ISoundDataInternalGetter rhs,
            SoundData.TranslationMask? copyMask = null)
        {
            ((SoundDataSetterTranslationCommon)((ISoundDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISoundDataInternal lhs,
            ISoundDataInternalGetter rhs,
            out SoundData.ErrorMask errorMask,
            SoundData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundDataSetterTranslationCommon)((ISoundDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundDataInternal lhs,
            ISoundDataInternalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundDataSetterTranslationCommon)((ISoundDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundData DeepCopy(
            this ISoundDataInternalGetter item,
            SoundData.TranslationMask? copyMask = null)
        {
            return ((SoundDataSetterTranslationCommon)((ISoundDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundData DeepCopy(
            this ISoundDataInternalGetter item,
            out SoundData.ErrorMask errorMask,
            SoundData.TranslationMask? copyMask = null)
        {
            return ((SoundDataSetterTranslationCommon)((ISoundDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundData DeepCopy(
            this ISoundDataInternalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundDataSetterTranslationCommon)((ISoundDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundDataInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundDataSetterCommon)((ISoundDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    #region Field Index
    internal enum SoundData_FieldIndex
    {
        MinimumAttenuationDistance = 0,
        MaximumAttenuationDistance = 1,
        FrequencyAdjustment = 2,
        Unknown = 3,
        Flags = 4,
        StaticAttenuation = 5,
        StopTime = 6,
        StartTime = 7,
    }
    #endregion

    #region Registration
    internal partial class SoundData_Registration : ILoquiRegistration
    {
        public static readonly SoundData_Registration Instance = new SoundData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Fallout3.ProtocolKey;

        public const ushort AdditionalFieldCount = 8;

        public const ushort FieldCount = 8;

        public static readonly Type MaskType = typeof(SoundData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundData.ErrorMask);

        public static readonly Type ClassType = typeof(SoundData);

        public static readonly Type GetterType = typeof(ISoundDataGetter);

        public static readonly Type? InternalGetterType = typeof(ISoundDataInternalGetter);

        public static readonly Type SetterType = typeof(ISoundData);

        public static readonly Type? InternalSetterType = typeof(ISoundDataInternal);

        public const string FullName = "Mutagen.Bethesda.Fallout3.SoundData";

        public const string Name = "SoundData";

        public const string Namespace = "Mutagen.Bethesda.Fallout3";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.SNDX,
                RecordTypes.SNDD);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SoundDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundDataSetterCommon
    {
        public static readonly SoundDataSetterCommon Instance = new SoundDataSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(ISoundDataInternal item)
        {
            ClearPartial();
            item.MinimumAttenuationDistance = default(UInt16);
            item.MaximumAttenuationDistance = default(UInt16);
            item.FrequencyAdjustment = default(SByte);
            item.Unknown = default(SByte);
            item.Flags = default(SoundData.Flag);
            item.StaticAttenuation = default(Single);
            item.StopTime = default(Single);
            item.StartTime = default(Single);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundDataInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            frame = frame.SpawnWithFinalPosition(HeaderTranslation.ParseSubrecord(
                frame.Reader,
                translationParams.ConvertToCustom(RecordTypes.SNDX),
                translationParams.LengthOverride));
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SoundDataBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class SoundDataCommon
    {
        public static readonly SoundDataCommon Instance = new SoundDataCommon();

        public SoundData.Mask<bool> GetEqualsMask(
            ISoundDataInternalGetter item,
            ISoundDataInternalGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundData.Mask<bool>(false);
            ((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundDataInternalGetter item,
            ISoundDataInternalGetter rhs,
            SoundData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.MinimumAttenuationDistance = item.MinimumAttenuationDistance == rhs.MinimumAttenuationDistance;
            ret.MaximumAttenuationDistance = item.MaximumAttenuationDistance == rhs.MaximumAttenuationDistance;
            ret.FrequencyAdjustment = item.FrequencyAdjustment == rhs.FrequencyAdjustment;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Flags = item.Flags == rhs.Flags;
            ret.StaticAttenuation = item.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation);
            ret.StopTime = item.StopTime.EqualsWithin(rhs.StopTime);
            ret.StartTime = item.StartTime.EqualsWithin(rhs.StartTime);
        }
        
        public string Print(
            ISoundDataInternalGetter item,
            string? name = null,
            SoundData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundDataInternalGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundData =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundDataInternalGetter item,
            StructuredStringBuilder sb,
            SoundData.Mask<bool>? printMask = null)
        {
            if (printMask?.MinimumAttenuationDistance ?? true)
            {
                sb.AppendItem(item.MinimumAttenuationDistance, "MinimumAttenuationDistance");
            }
            if (printMask?.MaximumAttenuationDistance ?? true)
            {
                sb.AppendItem(item.MaximumAttenuationDistance, "MaximumAttenuationDistance");
            }
            if (printMask?.FrequencyAdjustment ?? true)
            {
                sb.AppendItem(item.FrequencyAdjustment, "FrequencyAdjustment");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.StaticAttenuation ?? true)
            {
                sb.AppendItem(item.StaticAttenuation, "StaticAttenuation");
            }
            if (printMask?.StopTime ?? true)
            {
                sb.AppendItem(item.StopTime, "StopTime");
            }
            if (printMask?.StartTime ?? true)
            {
                sb.AppendItem(item.StartTime, "StartTime");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundDataInternalGetter? lhs,
            ISoundDataInternalGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)SoundData_FieldIndex.MinimumAttenuationDistance) ?? true))
            {
                if (lhs.MinimumAttenuationDistance != rhs.MinimumAttenuationDistance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundData_FieldIndex.MaximumAttenuationDistance) ?? true))
            {
                if (lhs.MaximumAttenuationDistance != rhs.MaximumAttenuationDistance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundData_FieldIndex.FrequencyAdjustment) ?? true))
            {
                if (lhs.FrequencyAdjustment != rhs.FrequencyAdjustment) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundData_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundData_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundData_FieldIndex.StaticAttenuation) ?? true))
            {
                if (!lhs.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundData_FieldIndex.StopTime) ?? true))
            {
                if (!lhs.StopTime.EqualsWithin(rhs.StopTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundData_FieldIndex.StartTime) ?? true))
            {
                if (!lhs.StartTime.EqualsWithin(rhs.StartTime)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISoundDataInternalGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.MinimumAttenuationDistance);
            hash.Add(item.MaximumAttenuationDistance);
            hash.Add(item.FrequencyAdjustment);
            hash.Add(item.Unknown);
            hash.Add(item.Flags);
            hash.Add(item.StaticAttenuation);
            hash.Add(item.StopTime);
            hash.Add(item.StartTime);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public virtual object GetNew()
        {
            return SoundData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundDataGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SoundDataSetterTranslationCommon
    {
        public static readonly SoundDataSetterTranslationCommon Instance = new SoundDataSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            ISoundDataInternal item,
            ISoundDataInternalGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            DeepCopyIn(
                (ISoundData)item,
                (ISoundDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public virtual void DeepCopyIn(
            ISoundData item,
            ISoundDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.MinimumAttenuationDistance) ?? true))
            {
                item.MinimumAttenuationDistance = rhs.MinimumAttenuationDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.MaximumAttenuationDistance) ?? true))
            {
                item.MaximumAttenuationDistance = rhs.MaximumAttenuationDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.FrequencyAdjustment) ?? true))
            {
                item.FrequencyAdjustment = rhs.FrequencyAdjustment;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.StaticAttenuation) ?? true))
            {
                item.StaticAttenuation = rhs.StaticAttenuation;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.StopTime) ?? true))
            {
                item.StopTime = rhs.StopTime;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundData_FieldIndex.StartTime) ?? true))
            {
                item.StartTime = rhs.StartTime;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISoundData item,
            ISoundDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public SoundData DeepCopy(
            ISoundDataInternalGetter item,
            SoundData.TranslationMask? copyMask = null)
        {
            SoundData ret = (SoundData)((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()!).GetNew();
            ((SoundDataSetterTranslationCommon)((ISoundDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundData DeepCopy(
            ISoundDataInternalGetter item,
            out SoundData.ErrorMask errorMask,
            SoundData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundData ret = (SoundData)((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()!).GetNew();
            ((SoundDataSetterTranslationCommon)((ISoundDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundData DeepCopy(
            ISoundDataInternalGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundData ret = (SoundData)((SoundDataCommon)((ISoundDataGetter)item).CommonInstance()!).GetNew();
            ((SoundDataSetterTranslationCommon)((ISoundDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Fallout3
{
    public partial class SoundData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SoundData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => SoundDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterInstance()
        {
            return SoundDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => SoundDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Fallout3
{
    public partial class SoundDataBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly SoundDataBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ISoundDataInternalGetter item,
            MutagenWriter writer)
        {
            SoundDataBinaryWriteTranslation.WriteBinaryMinimumAttenuationDistance(
                writer: writer,
                item: item);
            SoundDataBinaryWriteTranslation.WriteBinaryMaximumAttenuationDistance(
                writer: writer,
                item: item);
            writer.Write(item.FrequencyAdjustment);
            writer.Write(item.Unknown);
            EnumBinaryTranslation<SoundData.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Flags,
                length: 4);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.StaticAttenuation,
                integerType: FloatIntegerType.UShort,
                multiplier: 100f,
                divisor: null);
            SoundDataBinaryWriteTranslation.WriteBinaryStopTime(
                writer: writer,
                item: item);
            SoundDataBinaryWriteTranslation.WriteBinaryStartTime(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryMinimumAttenuationDistanceCustom(
            MutagenWriter writer,
            ISoundDataInternalGetter item);

        public static void WriteBinaryMinimumAttenuationDistance(
            MutagenWriter writer,
            ISoundDataInternalGetter item)
        {
            WriteBinaryMinimumAttenuationDistanceCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryMaximumAttenuationDistanceCustom(
            MutagenWriter writer,
            ISoundDataInternalGetter item);

        public static void WriteBinaryMaximumAttenuationDistance(
            MutagenWriter writer,
            ISoundDataInternalGetter item)
        {
            WriteBinaryMaximumAttenuationDistanceCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryStopTimeCustom(
            MutagenWriter writer,
            ISoundDataInternalGetter item);

        public static void WriteBinaryStopTime(
            MutagenWriter writer,
            ISoundDataInternalGetter item)
        {
            WriteBinaryStopTimeCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryStartTimeCustom(
            MutagenWriter writer,
            ISoundDataInternalGetter item);

        public static void WriteBinaryStartTime(
            MutagenWriter writer,
            ISoundDataInternalGetter item)
        {
            WriteBinaryStartTimeCustom(
                writer: writer,
                item: item);
        }

        public virtual void Write(
            MutagenWriter writer,
            ISoundDataInternalGetter item,
            TypedWriteParams translationParams)
        {
            using (HeaderExport.Subrecord(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.SNDX),
                overflowRecord: translationParams.OverflowRecordType,
                out var writerToUse))
            {
                WriteEmbedded(
                    item: item,
                    writer: writerToUse);
            }
        }

        public virtual void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundDataInternalGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundDataBinaryCreateTranslation
    {
        public static readonly SoundDataBinaryCreateTranslation Instance = new SoundDataBinaryCreateTranslation();

        public static void FillBinaryStructs(
            ISoundDataInternal item,
            MutagenFrame frame)
        {
            SoundDataBinaryCreateTranslation.FillBinaryMinimumAttenuationDistanceCustom(
                frame: frame,
                item: item);
            SoundDataBinaryCreateTranslation.FillBinaryMaximumAttenuationDistanceCustom(
                frame: frame,
                item: item);
            item.FrequencyAdjustment = frame.ReadInt8();
            item.Unknown = frame.ReadInt8();
            item.Flags = EnumBinaryTranslation<SoundData.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.StaticAttenuation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                integerType: FloatIntegerType.UShort,
                multiplier: null,
                divisor: 100f);
            SoundDataBinaryCreateTranslation.FillBinaryStopTimeCustom(
                frame: frame,
                item: item);
            SoundDataBinaryCreateTranslation.FillBinaryStartTimeCustom(
                frame: frame,
                item: item);
        }

        public static partial void FillBinaryMinimumAttenuationDistanceCustom(
            MutagenFrame frame,
            ISoundDataInternal item);

        public static partial void FillBinaryMaximumAttenuationDistanceCustom(
            MutagenFrame frame,
            ISoundDataInternal item);

        public static partial void FillBinaryStopTimeCustom(
            MutagenFrame frame,
            ISoundDataInternal item);

        public static partial void FillBinaryStartTimeCustom(
            MutagenFrame frame,
            ISoundDataInternal item);

    }

}
namespace Mutagen.Bethesda.Fallout3
{
    #region Binary Write Mixins
    public static class SoundDataBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISoundDataInternalGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundDataBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Fallout3
{
    internal partial class SoundDataBinaryOverlay :
        PluginBinaryOverlay,
        ISoundDataInternalGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundData_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SoundData_Registration.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonInstance() => SoundDataCommon.Instance;
        [DebuggerStepThrough]
        protected virtual object CommonSetterTranslationInstance() => SoundDataSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISoundDataGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISoundDataGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected virtual object BinaryWriteTranslator => SoundDataBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public SByte FrequencyAdjustment => (sbyte)_structData.Slice(0x2, 0x1)[0];
        public SByte Unknown => (sbyte)_structData.Slice(0x3, 0x1)[0];
        public SoundData.Flag Flags => (SoundData.Flag)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x4, 0x4));
        public Single StaticAttenuation => FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(_structData.Slice(0x8, 0x2), FloatIntegerType.UShort, multiplier: null, divisor: 100f);
        #region StopTime
        public partial Single GetStopTimeCustom(int location);
        public Single StopTime => GetStopTimeCustom(location: 0xA);
        #endregion
        #region StartTime
        public partial Single GetStartTimeCustom(int location);
        public Single StartTime => GetStartTimeCustom(location: 0xB);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundDataInternalGetter SoundDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                length: 0xC,
                memoryPair: out var memoryPair,
                offset: out var offset);
            var ret = new SoundDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            stream.Position += 0xC + package.MetaData.Constants.SubConstants.HeaderLength;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static ISoundDataInternalGetter SoundDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public virtual void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISoundDataInternalGetter rhs) return false;
            return ((SoundDataCommon)((ISoundDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundDataInternalGetter? obj)
        {
            return ((SoundDataCommon)((ISoundDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundDataCommon)((ISoundDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

