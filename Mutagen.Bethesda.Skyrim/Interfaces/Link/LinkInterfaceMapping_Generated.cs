/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
using System;
using System.Collections.Generic;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Loqui;

namespace Mutagen.Bethesda.Skyrim;

internal class SkyrimLinkInterfaceMapping : IInterfaceMapping
{
    public IReadOnlyDictionary<Type, InterfaceMappingResult> InterfaceToObjectTypes { get; }

    public GameCategory GameCategory => GameCategory.Skyrim;

    public SkyrimLinkInterfaceMapping()
    {
        var dict = new Dictionary<Type, InterfaceMappingResult>();
        dict[typeof(IPlaceableObject)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                AcousticSpace_Registration.Instance,
                Activator_Registration.Instance,
                AddonNode_Registration.Instance,
                AlchemicalApparatus_Registration.Instance,
                Ammunition_Registration.Instance,
                Armor_Registration.Instance,
                ArtObject_Registration.Instance,
                Book_Registration.Instance,
                Container_Registration.Instance,
                Door_Registration.Instance,
                Flora_Registration.Instance,
                Furniture_Registration.Instance,
                IdleMarker_Registration.Instance,
                Ingestible_Registration.Instance,
                Ingredient_Registration.Instance,
                Key_Registration.Instance,
                Light_Registration.Instance,
                MiscItem_Registration.Instance,
                MoveableStatic_Registration.Instance,
                Scroll_Registration.Instance,
                SoulGem_Registration.Instance,
                SoundMarker_Registration.Instance,
                Spell_Registration.Instance,
                Static_Registration.Instance,
                TalkingActivator_Registration.Instance,
                TextureSet_Registration.Instance,
                Tree_Registration.Instance,
                Weapon_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IPlaceableObject),
                Getter: typeof(IPlaceableObjectGetter)));
        dict[typeof(IPlaceableObjectGetter)] = dict[typeof(IPlaceableObject)] with { Setter = false };
        dict[typeof(IReferenceableObject)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                AcousticSpace_Registration.Instance,
                Activator_Registration.Instance,
                AlchemicalApparatus_Registration.Instance,
                Ammunition_Registration.Instance,
                Armor_Registration.Instance,
                Book_Registration.Instance,
                Container_Registration.Instance,
                Door_Registration.Instance,
                Flora_Registration.Instance,
                Furniture_Registration.Instance,
                Hazard_Registration.Instance,
                IdleMarker_Registration.Instance,
                Ingestible_Registration.Instance,
                Ingredient_Registration.Instance,
                Key_Registration.Instance,
                Light_Registration.Instance,
                MiscItem_Registration.Instance,
                MoveableStatic_Registration.Instance,
                Npc_Registration.Instance,
                Scroll_Registration.Instance,
                SoulGem_Registration.Instance,
                SoundMarker_Registration.Instance,
                Spell_Registration.Instance,
                Static_Registration.Instance,
                TalkingActivator_Registration.Instance,
                TextureSet_Registration.Instance,
                Tree_Registration.Instance,
                Weapon_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IReferenceableObject),
                Getter: typeof(IReferenceableObjectGetter)));
        dict[typeof(IReferenceableObjectGetter)] = dict[typeof(IReferenceableObject)] with { Setter = false };
        dict[typeof(IExplodeSpawn)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                AcousticSpace_Registration.Instance,
                Activator_Registration.Instance,
                AddonNode_Registration.Instance,
                AlchemicalApparatus_Registration.Instance,
                Ammunition_Registration.Instance,
                Armor_Registration.Instance,
                ArmorAddon_Registration.Instance,
                ArtObject_Registration.Instance,
                Book_Registration.Instance,
                Container_Registration.Instance,
                Door_Registration.Instance,
                DualCastData_Registration.Instance,
                Explosion_Registration.Instance,
                Flora_Registration.Instance,
                Furniture_Registration.Instance,
                Grass_Registration.Instance,
                Hazard_Registration.Instance,
                IdleMarker_Registration.Instance,
                Ingestible_Registration.Instance,
                Ingredient_Registration.Instance,
                Key_Registration.Instance,
                LeveledItem_Registration.Instance,
                LeveledNpc_Registration.Instance,
                LeveledSpell_Registration.Instance,
                Light_Registration.Instance,
                MoveableStatic_Registration.Instance,
                Npc_Registration.Instance,
                ObjectEffect_Registration.Instance,
                Projectile_Registration.Instance,
                Scroll_Registration.Instance,
                SoulGem_Registration.Instance,
                SoundMarker_Registration.Instance,
                Spell_Registration.Instance,
                Static_Registration.Instance,
                TalkingActivator_Registration.Instance,
                TextureSet_Registration.Instance,
                Tree_Registration.Instance,
                Weapon_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IExplodeSpawn),
                Getter: typeof(IExplodeSpawnGetter)));
        dict[typeof(IExplodeSpawnGetter)] = dict[typeof(IExplodeSpawn)] with { Setter = false };
        dict[typeof(IIdleRelation)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                ActionRecord_Registration.Instance,
                IdleAnimation_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IIdleRelation),
                Getter: typeof(IIdleRelationGetter)));
        dict[typeof(IIdleRelationGetter)] = dict[typeof(IIdleRelation)] with { Setter = false };
        dict[typeof(IObjectId)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Activator_Registration.Instance,
                Ammunition_Registration.Instance,
                Armor_Registration.Instance,
                Book_Registration.Instance,
                Container_Registration.Instance,
                Door_Registration.Instance,
                Faction_Registration.Instance,
                FormList_Registration.Instance,
                Furniture_Registration.Instance,
                IdleMarker_Registration.Instance,
                Ingestible_Registration.Instance,
                Key_Registration.Instance,
                Light_Registration.Instance,
                MiscItem_Registration.Instance,
                MoveableStatic_Registration.Instance,
                Npc_Registration.Instance,
                Projectile_Registration.Instance,
                Scroll_Registration.Instance,
                Shout_Registration.Instance,
                SoundMarker_Registration.Instance,
                Spell_Registration.Instance,
                Static_Registration.Instance,
                TextureSet_Registration.Instance,
                Weapon_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IObjectId),
                Getter: typeof(IObjectIdGetter)));
        dict[typeof(IObjectIdGetter)] = dict[typeof(IObjectId)] with { Setter = false };
        dict[typeof(IItem)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                AlchemicalApparatus_Registration.Instance,
                Ammunition_Registration.Instance,
                Armor_Registration.Instance,
                Book_Registration.Instance,
                Ingestible_Registration.Instance,
                Ingredient_Registration.Instance,
                Key_Registration.Instance,
                LeveledItem_Registration.Instance,
                Light_Registration.Instance,
                MiscItem_Registration.Instance,
                Scroll_Registration.Instance,
                SoulGem_Registration.Instance,
                Weapon_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IItem),
                Getter: typeof(IItemGetter)));
        dict[typeof(IItemGetter)] = dict[typeof(IItem)] with { Setter = false };
        dict[typeof(IItemOrList)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                AlchemicalApparatus_Registration.Instance,
                Ammunition_Registration.Instance,
                Armor_Registration.Instance,
                Book_Registration.Instance,
                FormList_Registration.Instance,
                Ingestible_Registration.Instance,
                Ingredient_Registration.Instance,
                Key_Registration.Instance,
                LeveledItem_Registration.Instance,
                Light_Registration.Instance,
                MiscItem_Registration.Instance,
                Scroll_Registration.Instance,
                SoulGem_Registration.Instance,
                Weapon_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IItemOrList),
                Getter: typeof(IItemOrListGetter)));
        dict[typeof(IItemOrListGetter)] = dict[typeof(IItemOrList)] with { Setter = false };
        dict[typeof(IConstructible)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                AlchemicalApparatus_Registration.Instance,
                Ammunition_Registration.Instance,
                Armor_Registration.Instance,
                Book_Registration.Instance,
                Ingestible_Registration.Instance,
                Ingredient_Registration.Instance,
                Key_Registration.Instance,
                Light_Registration.Instance,
                MiscItem_Registration.Instance,
                Scroll_Registration.Instance,
                SoulGem_Registration.Instance,
                Weapon_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IConstructible),
                Getter: typeof(IConstructibleGetter)));
        dict[typeof(IConstructibleGetter)] = dict[typeof(IConstructible)] with { Setter = false };
        dict[typeof(IOutfitTarget)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Armor_Registration.Instance,
                LeveledItem_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IOutfitTarget),
                Getter: typeof(IOutfitTargetGetter)));
        dict[typeof(IOutfitTargetGetter)] = dict[typeof(IOutfitTarget)] with { Setter = false };
        dict[typeof(IBindableEquipment)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Armor_Registration.Instance,
                Weapon_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IBindableEquipment),
                Getter: typeof(IBindableEquipmentGetter)));
        dict[typeof(IBindableEquipmentGetter)] = dict[typeof(IBindableEquipment)] with { Setter = false };
        dict[typeof(IComplexLocation)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Cell_Registration.Instance,
                Worldspace_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IComplexLocation),
                Getter: typeof(IComplexLocationGetter)));
        dict[typeof(IComplexLocationGetter)] = dict[typeof(IComplexLocation)] with { Setter = false };
        dict[typeof(IOwner)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Faction_Registration.Instance,
                Npc_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IOwner),
                Getter: typeof(IOwnerGetter)));
        dict[typeof(IOwnerGetter)] = dict[typeof(IOwner)] with { Setter = false };
        dict[typeof(IRelatable)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Faction_Registration.Instance,
                Race_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IRelatable),
                Getter: typeof(IRelatableGetter)));
        dict[typeof(IRelatableGetter)] = dict[typeof(IRelatable)] with { Setter = false };
        dict[typeof(IRegionTarget)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Flora_Registration.Instance,
                LandscapeTexture_Registration.Instance,
                MoveableStatic_Registration.Instance,
                Static_Registration.Instance,
                Tree_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IRegionTarget),
                Getter: typeof(IRegionTargetGetter)));
        dict[typeof(IRegionTargetGetter)] = dict[typeof(IRegionTarget)] with { Setter = false };
        dict[typeof(IAliasVoiceType)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                FormList_Registration.Instance,
                Npc_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IAliasVoiceType),
                Getter: typeof(IAliasVoiceTypeGetter)));
        dict[typeof(IAliasVoiceTypeGetter)] = dict[typeof(IAliasVoiceType)] with { Setter = false };
        dict[typeof(ILockList)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                FormList_Registration.Instance,
                Npc_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(ILockList),
                Getter: typeof(ILockListGetter)));
        dict[typeof(ILockListGetter)] = dict[typeof(ILockList)] with { Setter = false };
        dict[typeof(IWorldspaceOrList)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                FormList_Registration.Instance,
                Worldspace_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IWorldspaceOrList),
                Getter: typeof(IWorldspaceOrListGetter)));
        dict[typeof(IWorldspaceOrListGetter)] = dict[typeof(IWorldspaceOrList)] with { Setter = false };
        dict[typeof(IVoiceTypeOrList)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                FormList_Registration.Instance,
                VoiceType_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IVoiceTypeOrList),
                Getter: typeof(IVoiceTypeOrListGetter)));
        dict[typeof(IVoiceTypeOrListGetter)] = dict[typeof(IVoiceTypeOrList)] with { Setter = false };
        dict[typeof(INpcOrList)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                FormList_Registration.Instance,
                Npc_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(INpcOrList),
                Getter: typeof(INpcOrListGetter)));
        dict[typeof(INpcOrListGetter)] = dict[typeof(INpcOrList)] with { Setter = false };
        dict[typeof(IWeaponOrList)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                FormList_Registration.Instance,
                Weapon_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IWeaponOrList),
                Getter: typeof(IWeaponOrListGetter)));
        dict[typeof(IWeaponOrListGetter)] = dict[typeof(IWeaponOrList)] with { Setter = false };
        dict[typeof(ISpellOrList)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                FormList_Registration.Instance,
                Spell_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(ISpellOrList),
                Getter: typeof(ISpellOrListGetter)));
        dict[typeof(ISpellOrListGetter)] = dict[typeof(ISpellOrList)] with { Setter = false };
        dict[typeof(IPlacedTrapTarget)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Hazard_Registration.Instance,
                Projectile_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IPlacedTrapTarget),
                Getter: typeof(IPlacedTrapTargetGetter)));
        dict[typeof(IPlacedTrapTargetGetter)] = dict[typeof(IPlacedTrapTarget)] with { Setter = false };
        dict[typeof(IHarvestTarget)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Ingestible_Registration.Instance,
                Ingredient_Registration.Instance,
                LeveledItem_Registration.Instance,
                MiscItem_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IHarvestTarget),
                Getter: typeof(IHarvestTargetGetter)));
        dict[typeof(IHarvestTargetGetter)] = dict[typeof(IHarvestTarget)] with { Setter = false };
        dict[typeof(IMagicItem)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Ingestible_Registration.Instance,
                Ingredient_Registration.Instance,
                ObjectEffect_Registration.Instance,
                Scroll_Registration.Instance,
                Spell_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IMagicItem),
                Getter: typeof(IMagicItemGetter)));
        dict[typeof(IMagicItemGetter)] = dict[typeof(IMagicItem)] with { Setter = false };
        dict[typeof(IKeywordLinkedReference)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Keyword_Registration.Instance,
                PlacedNpc_Registration.Instance,
                PlacedObject_Registration.Instance,
                APlacedTrap_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IKeywordLinkedReference),
                Getter: typeof(IKeywordLinkedReferenceGetter)));
        dict[typeof(IKeywordLinkedReferenceGetter)] = dict[typeof(IKeywordLinkedReference)] with { Setter = false };
        dict[typeof(INpcSpawn)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                LeveledNpc_Registration.Instance,
                Npc_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(INpcSpawn),
                Getter: typeof(INpcSpawnGetter)));
        dict[typeof(INpcSpawnGetter)] = dict[typeof(INpcSpawn)] with { Setter = false };
        dict[typeof(ISpellRecord)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                LeveledSpell_Registration.Instance,
                Shout_Registration.Instance,
                Spell_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(ISpellRecord),
                Getter: typeof(ISpellRecordGetter)));
        dict[typeof(ISpellRecordGetter)] = dict[typeof(ISpellRecord)] with { Setter = false };
        dict[typeof(IEmittance)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                Light_Registration.Instance,
                Region_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IEmittance),
                Getter: typeof(IEmittanceGetter)));
        dict[typeof(IEmittanceGetter)] = dict[typeof(IEmittance)] with { Setter = false };
        dict[typeof(IKnowable)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                MagicEffect_Registration.Instance,
                ObjectEffect_Registration.Instance,
                WordOfPower_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IKnowable),
                Getter: typeof(IKnowableGetter)));
        dict[typeof(IKnowableGetter)] = dict[typeof(IKnowable)] with { Setter = false };
        dict[typeof(IEffectRecord)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                ObjectEffect_Registration.Instance,
                Spell_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IEffectRecord),
                Getter: typeof(IEffectRecordGetter)));
        dict[typeof(IEffectRecordGetter)] = dict[typeof(IEffectRecord)] with { Setter = false };
        dict[typeof(IPlaced)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                PlacedNpc_Registration.Instance,
                PlacedObject_Registration.Instance,
                APlacedTrap_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IPlaced),
                Getter: typeof(IPlacedGetter)));
        dict[typeof(IPlacedGetter)] = dict[typeof(IPlaced)] with { Setter = false };
        dict[typeof(IPlacedSimple)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                PlacedNpc_Registration.Instance,
                PlacedObject_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IPlacedSimple),
                Getter: typeof(IPlacedSimpleGetter)));
        dict[typeof(IPlacedSimpleGetter)] = dict[typeof(IPlacedSimple)] with { Setter = false };
        dict[typeof(IPlacedThing)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                PlacedObject_Registration.Instance,
                APlacedTrap_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(IPlacedThing),
                Getter: typeof(IPlacedThingGetter)));
        dict[typeof(IPlacedThingGetter)] = dict[typeof(IPlacedThing)] with { Setter = false };
        dict[typeof(ISound)] = new InterfaceMappingResult(
            true,
            new ILoquiRegistration[]
            {
                SoundDescriptor_Registration.Instance,
                SoundMarker_Registration.Instance,
            },
            new InterfaceMappingTypes(
                Setter: typeof(ISound),
                Getter: typeof(ISoundGetter)));
        dict[typeof(ISoundGetter)] = dict[typeof(ISound)] with { Setter = false };
        InterfaceToObjectTypes = dict;
    }
}

