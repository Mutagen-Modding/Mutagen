/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SkyrimListGroup<T> :
        IEquatable<ISkyrimListGroupGetter<T>>,
        ILoquiObjectSetter<SkyrimListGroup<T>>,
        ISkyrimListGroup<T>
        where T : class, ICellBlock, IBinaryItem
    {
        #region Ctor
        public SkyrimListGroup()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        static SkyrimListGroup()
        {
            T_RecordType = PluginUtilityTranslation.GetRecordType<T>();
        }

        #region Type
        public GroupTypeEnum Type { get; set; } = default(GroupTypeEnum);
        #endregion
        #region LastModified
        public Int32 LastModified { get; set; } = default(Int32);
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default(Int32);
        #endregion
        #region Records
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<T> _Records = new ExtendedList<T>();
        public ExtendedList<T> Records
        {
            get => this._Records;
            init => this._Records = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<T> ISkyrimListGroupGetter<T>.Records => _Records;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SkyrimListGroupMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISkyrimListGroupGetter<T> rhs) return false;
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISkyrimListGroupGetter<T>? obj)
        {
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)this).CommonInstance(typeof(T))!).GetHashCode(this);

        #endregion

        #region Mutagen
        public static readonly RecordType T_RecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SkyrimListGroupCommon<T>.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SkyrimListGroupSetterCommon<T>.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<T, TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<T, TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<T, TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<T, TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<T, TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<T, TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<T, TMajor>(records, throwIfUnknown);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SkyrimListGroupCommon<T>.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => SkyrimListGroupSetterCommon<T>.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => SkyrimListGroupSetterCommon<T>.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => SkyrimListGroupSetterCommon<T>.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SkyrimListGroupBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SkyrimListGroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static SkyrimListGroup<T> CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SkyrimListGroup<T>();
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)ret).CommonSetterInstance(typeof(T))!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SkyrimListGroup<T> item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)this).CommonSetterInstance(typeof(T))!).Clear(this);
        }

        internal static SkyrimListGroup<T> GetNew()
        {
            return new SkyrimListGroup<T>();
        }

    }
    #endregion

    #region Interface
    public partial interface ISkyrimListGroup<T> :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<ISkyrimListGroup<T>>,
        IMajorRecordEnumerable,
        ISkyrimListGroupGetter<T>
        where T : class, ICellBlock, IBinaryItem
    {
        new GroupTypeEnum Type { get; set; }
        new Int32 LastModified { get; set; }
        new Int32 Unknown { get; set; }
        new ExtendedList<T> Records { get; }
    }

    public partial interface ISkyrimListGroupGetter<out T> :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISkyrimListGroupGetter<T>>,
        IMajorRecordGetterEnumerable
        where T : class, ICellBlockGetter, IBinaryItem
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance(Type type0);
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance(Type type0);
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => SkyrimListGroup_Registration.Instance;
        GroupTypeEnum Type { get; }
        Int32 LastModified { get; }
        Int32 Unknown { get; }
        IReadOnlyList<T> Records { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SkyrimListGroupMixIn
    {
        public static void Clear<T>(this ISkyrimListGroup<T> item)
            where T : class, ICellBlock, IBinaryItem
        {
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)item).CommonSetterInstance(typeof(T))!).Clear(item: item);
        }

        public static SkyrimListGroup.Mask<bool> GetEqualsMask<T>(
            this ISkyrimListGroupGetter<T> item,
            ISkyrimListGroupGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
            where T : class, ICellBlockGetter, IBinaryItem
        {
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)item).CommonInstance(typeof(T))!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print<T>(
            this ISkyrimListGroupGetter<T> item,
            string? name = null,
            SkyrimListGroup.Mask<bool>? printMask = null)
            where T : class, ICellBlockGetter, IBinaryItem
        {
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)item).CommonInstance(typeof(T))!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print<T>(
            this ISkyrimListGroupGetter<T> item,
            StructuredStringBuilder sb,
            string? name = null,
            SkyrimListGroup.Mask<bool>? printMask = null)
            where T : class, ICellBlockGetter, IBinaryItem
        {
            ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)item).CommonInstance(typeof(T))!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals<T>(
            this ISkyrimListGroupGetter<T> item,
            ISkyrimListGroupGetter<T> rhs)
            where T : class, ICellBlockGetter, IBinaryItem
        {
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)item).CommonInstance(typeof(T))!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: null);
        }

        public static bool Equals<T, T_TranslMask>(
            this ISkyrimListGroupGetter<T> item,
            ISkyrimListGroupGetter<T> rhs,
            SkyrimListGroup.TranslationMask<T_TranslMask> equalsMask)
            where T : class, ICellBlockGetter, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)item).CommonInstance(typeof(T))!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask.GetCrystal());
        }

        public static void DeepCopyIn<T, TGetter>(
            this ISkyrimListGroup<T> lhs,
            ISkyrimListGroupGetter<TGetter> rhs)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
        {
            ((SkyrimListGroupSetterTranslationCommon)((ISkyrimListGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn<T, TGetter, T_TranslMask>(
            this ISkyrimListGroup<T> lhs,
            ISkyrimListGroupGetter<TGetter> rhs,
            SkyrimListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            ((SkyrimListGroupSetterTranslationCommon)((ISkyrimListGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn<T, TGetter, T_ErrMask, T_TranslMask>(
            this ISkyrimListGroup<T> lhs,
            ISkyrimListGroupGetter<TGetter> rhs,
            out SkyrimListGroup.ErrorMask<T_ErrMask> errorMask,
            SkyrimListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SkyrimListGroupSetterTranslationCommon)((ISkyrimListGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SkyrimListGroup.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn<T, TGetter>(
            this ISkyrimListGroup<T> lhs,
            ISkyrimListGroupGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
        {
            ((SkyrimListGroupSetterTranslationCommon)((ISkyrimListGroupGetter<T>)lhs).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SkyrimListGroup<T> DeepCopy<T, TGetter, T_TranslMask>(
            this ISkyrimListGroupGetter<TGetter> item,
            SkyrimListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            return ((SkyrimListGroupSetterTranslationCommon)((ISkyrimListGroupGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter, T_TranslMask>(
                item: item,
                copyMask: copyMask);
        }

        public static SkyrimListGroup<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            this ISkyrimListGroupGetter<TGetter> item,
            out SkyrimListGroup.ErrorMask<T_ErrMask> errorMask,
            SkyrimListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            return ((SkyrimListGroupSetterTranslationCommon)((ISkyrimListGroupGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SkyrimListGroup<T> DeepCopy<T, TGetter>(
            this ISkyrimListGroupGetter<TGetter> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
        {
            return ((SkyrimListGroupSetterTranslationCommon)((ISkyrimListGroupGetter<TGetter>)item).CommonSetterTranslationInstance()!).DeepCopy<T, TGetter>(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords<T>(this ISkyrimListGroupGetter<T> obj)
            where T : class, ICellBlockGetter, IBinaryItem
        {
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonInstance(typeof(T))!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<T, TMajor>(
            this ISkyrimListGroupGetter<T> obj,
            bool throwIfUnknown = true)
            where T : class, ICellBlockGetter, IBinaryItem
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonInstance(typeof(T))!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords<T>(
            this ISkyrimListGroupGetter<T> obj,
            Type type,
            bool throwIfUnknown = true)
            where T : class, ICellBlockGetter, IBinaryItem
        {
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonInstance(typeof(T))!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords<T>(this ISkyrimListGroup<T> obj)
            where T : class, ICellBlock, IBinaryItem
        {
            return ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).EnumerateMajorRecords(obj: obj);
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<T, TMajor>(this ISkyrimListGroup<T> obj)
            where T : class, ICellBlock, IBinaryItem
            where TMajor : class, IMajorRecordQueryable
        {
            return ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords<T>(
            this ISkyrimListGroup<T> obj,
            Type? type,
            bool throwIfUnknown = true)
            where T : class, ICellBlock, IBinaryItem
        {
            return ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m);
        }

        [DebuggerStepThrough]
        public static void Remove<T>(
            this ISkyrimListGroup<T> obj,
            FormKey key)
            where T : class, ICellBlock, IBinaryItem
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove<T>(
            this ISkyrimListGroup<T> obj,
            IEnumerable<FormKey> keys)
            where T : class, ICellBlock, IBinaryItem
        {
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove<T>(
            this ISkyrimListGroup<T> obj,
            IEnumerable<IFormLinkIdentifier> keys)
            where T : class, ICellBlock, IBinaryItem
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove<T>(
            this ISkyrimListGroup<T> obj,
            HashSet<FormKey> keys)
            where T : class, ICellBlock, IBinaryItem
        {
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove<T>(
            this ISkyrimListGroup<T> obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
            where T : class, ICellBlock, IBinaryItem
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<T>(
            this ISkyrimListGroup<T> obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
            where T : class, ICellBlock, IBinaryItem
        {
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<T>(
            this ISkyrimListGroup<T> obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
            where T : class, ICellBlock, IBinaryItem
        {
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<T, TMajor>(
            this ISkyrimListGroup<T> obj,
            TMajor record,
            bool throwIfUnknown = true)
            where T : class, ICellBlock, IBinaryItem
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<T, TMajor>(
            this ISkyrimListGroup<T> obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where T : class, ICellBlock, IBinaryItem
            where TMajor : IMajorRecordGetter
        {
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<T, TMajor>(
            this ISkyrimListGroup<T> obj,
            FormKey key,
            bool throwIfUnknown = true)
            where T : class, ICellBlock, IBinaryItem
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<T, TMajor>(
            this ISkyrimListGroup<T> obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where T : class, ICellBlock, IBinaryItem
            where TMajor : IMajorRecordGetter
        {
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<T, TMajor>(
            this ISkyrimListGroup<T> obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where T : class, ICellBlock, IBinaryItem
            where TMajor : IMajorRecordGetter
        {
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)obj).CommonSetterInstance(typeof(T))!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary<T>(
            this ISkyrimListGroup<T> item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
            where T : class, ICellBlock, IBinaryItem
        {
            ((SkyrimListGroupSetterCommon<T>)((ISkyrimListGroupGetter<T>)item).CommonSetterInstance(typeof(T))!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum SkyrimListGroup_FieldIndex
    {
        Type = 0,
        LastModified = 1,
        Unknown = 2,
        Records = 3,
    }
    #endregion

    #region Registration
    internal partial class SkyrimListGroup_Registration : ILoquiRegistration
    {
        public static readonly SkyrimListGroup_Registration Instance = new SkyrimListGroup_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 4;

        public static readonly Type MaskType = typeof(SkyrimListGroup.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkyrimListGroup.ErrorMask<>);

        public static readonly Type ClassType = typeof(SkyrimListGroup<>);

        public static readonly Type GetterType = typeof(ISkyrimListGroupGetter<>);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkyrimListGroup<>);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.SkyrimListGroup";

        public const string Name = "SkyrimListGroup";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 1;

        public static readonly Type? GenericRegistrationType = typeof(SkyrimListGroup_Registration<>);

        public static readonly RecordType TriggeringRecordType = RecordTypes.GRUP;
        public static readonly Type BinaryWriteTranslation = typeof(SkyrimListGroupBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }

    internal class SkyrimListGroup_Registration<T> : SkyrimListGroup_Registration
        where T : CellBlock, IBinaryItem
    {
        public static readonly SkyrimListGroup_Registration<T> GenericInstance = new SkyrimListGroup_Registration<T>();

    }
    #endregion

    #region Common
    internal partial class SkyrimListGroupSetterCommon<T>
        where T : class, ICellBlock, IBinaryItem
    {
        public static readonly SkyrimListGroupSetterCommon<T> Instance = new SkyrimListGroupSetterCommon<T>();

        partial void ClearPartial();
        
        public void Clear(ISkyrimListGroup<T> item)
        {
            ClearPartial();
            item.Type = default(GroupTypeEnum);
            item.LastModified = default(Int32);
            item.Unknown = default(Int32);
            item.Records.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ISkyrimListGroup<T> obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.Records.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(ISkyrimListGroup<T> obj)
        {
            return EnumerateMajorRecordsLoopLogic(obj: obj);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecordsLoopLogic(ISkyrimListGroup<T> obj)
        {
            foreach (var item in SkyrimListGroupCommon<T>.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            ISkyrimListGroup<T> obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return SkyrimListGroupCommon<T>.Instance.EnumerateMajorRecords(obj);
            return SkyrimListGroupCommon<T>.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            ISkyrimListGroup<T> obj,
            Type type,
            bool throwIfUnknown)
        {
            return EnumerateMajorRecordsLoopLogic(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecordsLoopLogic(
            ISkyrimListGroup<T> obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in SkyrimListGroupCommon<T>.Instance.EnumerateMajorRecordsLoopLogic(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            ISkyrimListGroup<T> obj,
            HashSet<FormKey> keys)
        {
            obj.Records.ForEach(i => i.Remove(keys));
            obj.Records.RemoveWhere(i => i.SubBlocks.Count == 0);
        }
        
        public void Remove(
            ISkyrimListGroup<T> obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "ISkyrimMajorRecord":
                case "SkyrimMajorRecord":
                case "IMajorRecordGetter":
                case "ISkyrimMajorRecordGetter":
                    if (!SkyrimListGroup_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                default:
                    foreach (var item in obj.Records)
                    {
                        item.Remove(keys, type, throwIfUnknown: false);
                    }
                    obj.Records.RemoveWhere(i => i.SubBlocks.Count == 0);
                    break;
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ISkyrimListGroup<T> obj)
        {
            foreach (var item in obj.Records.WhereCastable<T, IAssetLinkContainer>()
                .SelectMany((f) => f.EnumerateListedAssetLinks()))
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ISkyrimListGroup<T> obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            obj.Records.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISkyrimListGroup<T> item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.GroupParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SkyrimListGroupBinaryCreateTranslation<T>.FillBinaryStructs,
                fillTyped: SkyrimListGroupBinaryCreateTranslation<T>.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class SkyrimListGroupCommon<T>
        where T : class, ICellBlockGetter, IBinaryItem
    {
        public static readonly SkyrimListGroupCommon<T> Instance = new SkyrimListGroupCommon<T>();

        public SkyrimListGroup.Mask<bool> GetEqualsMask(
            ISkyrimListGroupGetter<T> item,
            ISkyrimListGroupGetter<T> rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkyrimListGroup.Mask<bool>(false);
            ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)item).CommonInstance(typeof(T))!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISkyrimListGroupGetter<T> item,
            ISkyrimListGroupGetter<T> rhs,
            SkyrimListGroup.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Type = item.Type == rhs.Type;
            ret.LastModified = item.LastModified == rhs.LastModified;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Records = item.Records.CollectionEqualsHelper(
                rhs.Records,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            ISkyrimListGroupGetter<T> item,
            string? name = null,
            SkyrimListGroup.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISkyrimListGroupGetter<T> item,
            StructuredStringBuilder sb,
            string? name = null,
            SkyrimListGroup.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SkyrimListGroup<{typeof(T).Name}> =>");
            }
            else
            {
                sb.AppendLine($"{name} (SkyrimListGroup<{typeof(T).Name}>) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISkyrimListGroupGetter<T> item,
            StructuredStringBuilder sb,
            SkyrimListGroup.Mask<bool>? printMask = null)
        {
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if (printMask?.LastModified ?? true)
            {
                sb.AppendItem(item.LastModified, "LastModified");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Records?.Overall ?? true)
            {
                sb.AppendLine("Records =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Records)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISkyrimListGroupGetter<T>? lhs,
            ISkyrimListGroupGetter<T>? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)SkyrimListGroup_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimListGroup_FieldIndex.LastModified) ?? true))
            {
                if (lhs.LastModified != rhs.LastModified) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimListGroup_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimListGroup_FieldIndex.Records) ?? true))
            {
                if (!lhs.Records.SequenceEqual(rhs.Records, (l, r) => ((CellBlockCommon)((ICellBlockGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SkyrimListGroup_FieldIndex.Records)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISkyrimListGroupGetter<T> item)
        {
            var hash = new HashCode();
            hash.Add(item.Type);
            hash.Add(item.LastModified);
            hash.Add(item.Unknown);
            hash.Add(item.Records);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew<T_Setter>()
            where T_Setter : class, ICellBlock, IBinaryItem
        {
            return SkyrimListGroup<T_Setter>.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISkyrimListGroupGetter<T> obj)
        {
            foreach (var item in obj.Records.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(ISkyrimListGroupGetter<T> obj)
        {
            return EnumerateMajorRecordsLoopLogic(obj: obj);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecordsLoopLogic(ISkyrimListGroupGetter<T> obj)
        {
            foreach (var subItem in obj.Records)
            {
                foreach (var item in subItem.EnumerateMajorRecords())
                {
                    yield return item;
                }
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            ISkyrimListGroupGetter<T> obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return SkyrimListGroupCommon<T>.Instance.EnumerateMajorRecords(obj);
            return SkyrimListGroupCommon<T>.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            ISkyrimListGroupGetter<T> obj,
            Type type,
            bool throwIfUnknown)
        {
            return EnumerateMajorRecordsLoopLogic(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecordsLoopLogic(
            ISkyrimListGroupGetter<T> obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "ISkyrimMajorRecord":
                case "SkyrimMajorRecord":
                    if (!SkyrimListGroup_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordsLoopLogic(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "ISkyrimMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordsLoopLogic(obj))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Skyrim, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    foreach (var item in obj.Records)
                    {
                        foreach (var subItem in item.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                        {
                            yield return subItem;
                        }
                    }
                    yield break;
            }
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ISkyrimListGroupGetter<T> obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in obj.Records.WhereCastable<T, IAssetLinkContainerGetter>()
                .SelectMany((f) => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SkyrimListGroupSetterTranslationCommon
    {
        public static readonly SkyrimListGroupSetterTranslationCommon Instance = new SkyrimListGroupSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn<T, TGetter>(
            ISkyrimListGroup<T> item,
            ISkyrimListGroupGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
        {
            if ((copyMask?.GetShouldTranslate((int)SkyrimListGroup_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimListGroup_FieldIndex.LastModified) ?? true))
            {
                item.LastModified = rhs.LastModified;
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimListGroup_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimListGroup_FieldIndex.Records) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimListGroup_FieldIndex.Records);
                try
                {
                    item.Records.SetTo(
                        rhs.Records
                        .Select(r =>
                        {
                            return (r.DeepCopy() as T)!;
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom<T, TGetter>(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom<T, TGetter>(
            ISkyrimListGroup<T> item,
            ISkyrimListGroupGetter<TGetter> rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem;
        #endregion
        
        public SkyrimListGroup<T> DeepCopy<T, TGetter, T_TranslMask>(
            ISkyrimListGroupGetter<TGetter> item,
            SkyrimListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            SkyrimListGroup<T> ret = (SkyrimListGroup<T>)((SkyrimListGroupCommon<TGetter>)((ISkyrimListGroupGetter<TGetter>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((SkyrimListGroupSetterTranslationCommon)((ISkyrimListGroupGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SkyrimListGroup<T> DeepCopy<T, TGetter, T_ErrMask, T_TranslMask>(
            ISkyrimListGroupGetter<TGetter> item,
            out SkyrimListGroup.ErrorMask<T_ErrMask> errorMask,
            SkyrimListGroup.TranslationMask<T_TranslMask>? copyMask = null)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SkyrimListGroup<T> ret = (SkyrimListGroup<T>)((SkyrimListGroupCommon<TGetter>)((ISkyrimListGroupGetter<TGetter>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((SkyrimListGroupSetterTranslationCommon)((ISkyrimListGroupGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SkyrimListGroup.ErrorMask<T_ErrMask>.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SkyrimListGroup<T> DeepCopy<T, TGetter>(
            ISkyrimListGroupGetter<TGetter> item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
            where T : class, ICellBlock, IBinaryItem
            where TGetter : class, ICellBlockGetter, IBinaryItem
        {
            SkyrimListGroup<T> ret = (SkyrimListGroup<T>)((SkyrimListGroupCommon<TGetter>)((ISkyrimListGroupGetter<TGetter>)item).CommonInstance(typeof(T))!).GetNew<T>();
            ((SkyrimListGroupSetterTranslationCommon)((ISkyrimListGroupGetter<T>)ret).CommonSetterTranslationInstance()!).DeepCopyIn<T, TGetter>(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SkyrimListGroup<T>
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimListGroup_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SkyrimListGroup_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance(Type type0) => GenericCommonInstanceGetter.Get(SkyrimListGroupCommon<T>.Instance, typeof(T), type0);
        [DebuggerStepThrough]
        protected object CommonSetterInstance(Type type0)
        {
            return GenericCommonInstanceGetter.Get(SkyrimListGroupSetterCommon<T>.Instance, typeof(T), type0);
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkyrimListGroupSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkyrimListGroupGetter<T>.CommonInstance(Type type0) => this.CommonInstance(type0);
        [DebuggerStepThrough]
        object ISkyrimListGroupGetter<T>.CommonSetterInstance(Type type0) => this.CommonSetterInstance(type0);
        [DebuggerStepThrough]
        object ISkyrimListGroupGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class SkyrimListGroupBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly SkyrimListGroupBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded<T>(
            ISkyrimListGroupGetter<T> item,
            MutagenWriter writer)
            where T : class, ICellBlockGetter, IBinaryItem
        {
            SkyrimListGroupBinaryWriteTranslation.WriteBinaryContainedRecordType(
                writer: writer,
                item: item);
            EnumBinaryTranslation<GroupTypeEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.Type,
                length: 4);
            writer.Write(item.LastModified);
            writer.Write(item.Unknown);
        }

        public static void WriteRecordTypes<T>(
            ISkyrimListGroupGetter<T> item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
            where T : class, ICellBlockGetter, IBinaryItem
        {
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<T>.Instance.Write(
                writer: writer,
                items: item.Records,
                transl: (MutagenWriter subWriter, T subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((CellBlockBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public static partial void WriteBinaryContainedRecordTypeCustom<T>(
            MutagenWriter writer,
            ISkyrimListGroupGetter<T> item)
            where T : class, ICellBlockGetter, IBinaryItem;

        public static void WriteBinaryContainedRecordType<T>(
            MutagenWriter writer,
            ISkyrimListGroupGetter<T> item)
            where T : class, ICellBlockGetter, IBinaryItem
        {
            WriteBinaryContainedRecordTypeCustom(
                writer: writer,
                item: item);
        }

        public void Write<T>(
            MutagenWriter writer,
            ISkyrimListGroupGetter<T> item,
            TypedWriteParams translationParams)
            where T : class, ICellBlockGetter, IBinaryItem
        {
            using (HeaderExport.Group(
                writer: writer,
                record: translationParams.ConvertToCustom(RecordTypes.GRUP)))
            {
                WriteEmbedded(
                    item: item,
                    writer: writer);
                WriteRecordTypes(
                    item: item,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            throw new NotImplementedException();
        }

    }

    internal partial class SkyrimListGroupBinaryCreateTranslation<T>
        where T : class, ICellBlock, IBinaryItem
    {
        public static readonly SkyrimListGroupBinaryCreateTranslation<T> Instance = new SkyrimListGroupBinaryCreateTranslation<T>();

        public static void FillBinaryStructs(
            ISkyrimListGroup<T> item,
            MutagenFrame frame)
        {
            SkyrimListGroupBinaryCreateTranslation<T>.FillBinaryContainedRecordTypeCustom(
                frame: frame,
                item: item);
            item.Type = EnumBinaryTranslation<GroupTypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                reader: frame,
                length: 4);
            item.LastModified = frame.ReadInt32();
            item.Unknown = frame.ReadInt32();
        }

        public static ParseResult FillBinaryRecordTypes(
            ISkyrimListGroup<T> item,
            MutagenFrame frame,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                default:
                    if (nextRecordType.Equals(SkyrimListGroup<T>.T_RecordType))
                    {
                        item.Records.SetTo(
                            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<T>.Instance.Parse(
                                reader: frame,
                                triggeringRecord: SkyrimListGroup<T>.T_RecordType,
                                thread: frame.MetaData.Parallel,
                                translationParams: translationParams,
                                transl: LoquiBinaryTranslation<T>.Instance.Parse));
                        return ParseResult.Stop;
                    }
                    frame.Position += contentLength + frame.MetaData.Constants.MajorConstants.HeaderLength;
                    return default(int?);
            }
        }

        public static partial void FillBinaryContainedRecordTypeCustom(
            MutagenFrame frame,
            ISkyrimListGroup<T> item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SkyrimListGroupBinaryTranslationMixIn
    {
        public static void WriteToBinary<T, T_ErrMask>(
            this ISkyrimListGroupGetter<T> item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
            where T : class, ICellBlockGetter, IBinaryItem
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
        {
            ((SkyrimListGroupBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class SkyrimListGroupBinaryOverlay<T> : ISkyrimListGroupGetter<T>
        where T : class, ICellBlockGetter, IBinaryItem
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimListGroup_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SkyrimListGroup_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance(Type type0) => GenericCommonInstanceGetter.Get(SkyrimListGroupCommon<T>.Instance, typeof(T), type0);
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkyrimListGroupSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkyrimListGroupGetter<T>.CommonInstance(Type type0) => this.CommonInstance(type0);
        [DebuggerStepThrough]
        object? ISkyrimListGroupGetter<T>.CommonSetterInstance(Type type0) => null;
        [DebuggerStepThrough]
        object ISkyrimListGroupGetter<T>.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SkyrimListGroupCommon<T>.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SkyrimListGroupCommon<T>.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<T, TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => SkyrimListGroupBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SkyrimListGroupBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region ContainedRecordType
        partial void ContainedRecordTypeCustomParse(
            OverlayStream stream,
            int offset);
        #endregion
        public GroupTypeEnum Type => (GroupTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_structData.Span.Slice(0x4, 0x4));
        public Int32 LastModified => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x8, 0x4));
        public Int32 Unknown => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0xC, 0x4));
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SkyrimListGroupBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISkyrimListGroupGetter<T> SkyrimListGroupFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractGroupMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SkyrimListGroupBinaryOverlay<T>(
                memoryPair: memoryPair,
                package: package);
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillGroupRecordsForWrapper(
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISkyrimListGroupGetter<T> SkyrimListGroupFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SkyrimListGroupFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                default:
                    return default(int?);
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SkyrimListGroupMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISkyrimListGroupGetter<T> rhs) return false;
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISkyrimListGroupGetter<T>? obj)
        {
            return ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)this).CommonInstance(typeof(T))!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SkyrimListGroupCommon<T>)((ISkyrimListGroupGetter<T>)this).CommonInstance(typeof(T))!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

namespace Mutagen.Bethesda.Skyrim
{
    public static class SkyrimListGroup
    {
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Type = initialValue;
                this.LastModified = initialValue;
                this.Unknown = initialValue;
                this.Records = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellBlock.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, CellBlock.Mask<TItem>?>>());
            }
        
            public Mask(
                TItem Type,
                TItem LastModified,
                TItem Unknown,
                TItem Records)
            {
                this.Type = Type;
                this.LastModified = LastModified;
                this.Unknown = Unknown;
                this.Records = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellBlock.Mask<TItem>?>>?>(Records, Enumerable.Empty<MaskItemIndexed<TItem, CellBlock.Mask<TItem>?>>());
            }
        
            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618
        
            #endregion
        
            #region Members
            public TItem Type;
            public TItem LastModified;
            public TItem Unknown;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CellBlock.Mask<TItem>?>>?>? Records;
            #endregion
        
            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }
        
            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.LastModified, rhs.LastModified)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Records, rhs.Records)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Type);
                hash.Add(this.LastModified);
                hash.Add(this.Unknown);
                hash.Add(this.Records);
                return hash.ToHashCode();
            }
        
            #endregion
        
            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Type)) return false;
                if (!eval(this.LastModified)) return false;
                if (!eval(this.Unknown)) return false;
                if (this.Records != null)
                {
                    if (!eval(this.Records.Overall)) return false;
                    if (this.Records.Specific != null)
                    {
                        foreach (var item in this.Records.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion
        
            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Type)) return true;
                if (eval(this.LastModified)) return true;
                if (eval(this.Unknown)) return true;
                if (this.Records != null)
                {
                    if (eval(this.Records.Overall)) return true;
                    if (this.Records.Specific != null)
                    {
                        foreach (var item in this.Records.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion
        
            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SkyrimListGroup.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }
        
            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Type = eval(this.Type);
                obj.LastModified = eval(this.LastModified);
                obj.Unknown = eval(this.Unknown);
                if (Records != null)
                {
                    obj.Records = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CellBlock.Mask<R>?>>?>(eval(this.Records.Overall), Enumerable.Empty<MaskItemIndexed<R, CellBlock.Mask<R>?>>());
                    if (Records.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, CellBlock.Mask<R>?>>();
                        obj.Records.Specific = l;
                        foreach (var item in Records.Specific)
                        {
                            MaskItemIndexed<R, CellBlock.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, CellBlock.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion
        
            #region To String
            public override string ToString() => this.Print();
        
            public string Print(SkyrimListGroup.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }
        
            public void Print(StructuredStringBuilder sb, SkyrimListGroup.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SkyrimListGroup.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.LastModified ?? true)
                    {
                        sb.AppendItem(LastModified, "LastModified");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if ((printMask?.Records?.Overall ?? true)
                        && Records is {} RecordsItem)
                    {
                        sb.AppendLine("Records =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RecordsItem.Overall);
                            if (RecordsItem.Specific != null)
                            {
                                foreach (var subItem in RecordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion
        
        }
        
        public class ErrorMask<T_ErrMask> :
            IErrorMask,
            IErrorMask<ErrorMask<T_ErrMask>>
            where T_ErrMask : CellBlock.ErrorMask, IErrorMask<T_ErrMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Type;
            public Exception? LastModified;
            public Exception? Unknown;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>? Records;
            #endregion
        
            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SkyrimListGroup_FieldIndex enu = (SkyrimListGroup_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimListGroup_FieldIndex.Type:
                        return Type;
                    case SkyrimListGroup_FieldIndex.LastModified:
                        return LastModified;
                    case SkyrimListGroup_FieldIndex.Unknown:
                        return Unknown;
                    case SkyrimListGroup_FieldIndex.Records:
                        return Records;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthException(int index, Exception ex)
            {
                SkyrimListGroup_FieldIndex enu = (SkyrimListGroup_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimListGroup_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case SkyrimListGroup_FieldIndex.LastModified:
                        this.LastModified = ex;
                        break;
                    case SkyrimListGroup_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case SkyrimListGroup_FieldIndex.Records:
                        this.Records = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public void SetNthMask(int index, object obj)
            {
                SkyrimListGroup_FieldIndex enu = (SkyrimListGroup_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimListGroup_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case SkyrimListGroup_FieldIndex.LastModified:
                        this.LastModified = (Exception?)obj;
                        break;
                    case SkyrimListGroup_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case SkyrimListGroup_FieldIndex.Records:
                        this.Records = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }
        
            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Type != null) return true;
                if (LastModified != null) return true;
                if (Unknown != null) return true;
                if (Records != null) return true;
                return false;
            }
            #endregion
        
            #region To String
            public override string ToString() => this.Print();
        
            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(LastModified, "LastModified");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                if (Records is {} RecordsItem)
                {
                    sb.AppendLine("Records =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RecordsItem.Overall);
                        if (RecordsItem.Specific != null)
                        {
                            foreach (var subItem in RecordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion
        
            #region Combine
            public ErrorMask<T_ErrMask> Combine(ErrorMask<T_ErrMask>? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask<T_ErrMask>();
                ret.Type = this.Type.Combine(rhs.Type);
                ret.LastModified = this.LastModified.Combine(rhs.LastModified);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Records = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, T_ErrMask?>>?>(Noggog.ExceptionExt.Combine(this.Records?.Overall, rhs.Records?.Overall), Noggog.ExceptionExt.Combine(this.Records?.Specific, rhs.Records?.Specific));
                return ret;
            }
            public static ErrorMask<T_ErrMask>? Combine(ErrorMask<T_ErrMask>? lhs, ErrorMask<T_ErrMask>? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion
        
            #region Factory
            public static ErrorMask<T_ErrMask> Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask<T_ErrMask>();
            }
            #endregion
        
        }
        public class TranslationMask<T_TranslMask> : ITranslationMask
            where T_TranslMask : CellBlock.TranslationMask, ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Type;
            public bool LastModified;
            public bool Unknown;
            public T_TranslMask? Records;
            #endregion
        
            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Type = defaultOn;
                this.LastModified = defaultOn;
                this.Unknown = defaultOn;
            }
        
            #endregion
        
            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }
        
            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Type, null));
                ret.Add((LastModified, null));
                ret.Add((Unknown, null));
                ret.Add((Records == null ? DefaultOn : !Records.GetCrystal().CopyNothing, Records?.GetCrystal()));
            }
        
            public static implicit operator TranslationMask<T_TranslMask>(bool defaultOn)
            {
                return new TranslationMask<T_TranslMask>(defaultOn: defaultOn, onOverall: defaultOn);
            }
        
        }
    }
}
