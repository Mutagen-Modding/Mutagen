/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Parameters;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Cache.Internals;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Masters;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Loqui;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Strings.DI;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.IO.Abstractions;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Threading.Tasks;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SkyrimMod :
        IEquatable<ISkyrimModGetter>,
        ILoquiObjectSetter<SkyrimMod>,
        ISkyrimMod
    {
        #region Ctor
        protected SkyrimMod()
        {
            _GameSettings_Object = new SkyrimGroup<GameSetting>(this);
            _Keywords_Object = new SkyrimGroup<Keyword>(this);
            _LocationReferenceTypes_Object = new SkyrimGroup<LocationReferenceType>(this);
            _Actions_Object = new SkyrimGroup<ActionRecord>(this);
            _TextureSets_Object = new SkyrimGroup<TextureSet>(this);
            _Globals_Object = new SkyrimGroup<Global>(this);
            _Classes_Object = new SkyrimGroup<Class>(this);
            _Factions_Object = new SkyrimGroup<Faction>(this);
            _HeadParts_Object = new SkyrimGroup<HeadPart>(this);
            _Hairs_Object = new SkyrimGroup<Hair>(this);
            _Eyes_Object = new SkyrimGroup<Eyes>(this);
            _Races_Object = new SkyrimGroup<Race>(this);
            _SoundMarkers_Object = new SkyrimGroup<SoundMarker>(this);
            _AcousticSpaces_Object = new SkyrimGroup<AcousticSpace>(this);
            _MagicEffects_Object = new SkyrimGroup<MagicEffect>(this);
            _LandscapeTextures_Object = new SkyrimGroup<LandscapeTexture>(this);
            _ObjectEffects_Object = new SkyrimGroup<ObjectEffect>(this);
            _Spells_Object = new SkyrimGroup<Spell>(this);
            _Scrolls_Object = new SkyrimGroup<Scroll>(this);
            _Activators_Object = new SkyrimGroup<Activator>(this);
            _TalkingActivators_Object = new SkyrimGroup<TalkingActivator>(this);
            _Armors_Object = new SkyrimGroup<Armor>(this);
            _Books_Object = new SkyrimGroup<Book>(this);
            _Containers_Object = new SkyrimGroup<Container>(this);
            _Doors_Object = new SkyrimGroup<Door>(this);
            _Ingredients_Object = new SkyrimGroup<Ingredient>(this);
            _Lights_Object = new SkyrimGroup<Light>(this);
            _MiscItems_Object = new SkyrimGroup<MiscItem>(this);
            _AlchemicalApparatuses_Object = new SkyrimGroup<AlchemicalApparatus>(this);
            _Statics_Object = new SkyrimGroup<Static>(this);
            _MoveableStatics_Object = new SkyrimGroup<MoveableStatic>(this);
            _Grasses_Object = new SkyrimGroup<Grass>(this);
            _Trees_Object = new SkyrimGroup<Tree>(this);
            _Florae_Object = new SkyrimGroup<Flora>(this);
            _Furniture_Object = new SkyrimGroup<Furniture>(this);
            _Weapons_Object = new SkyrimGroup<Weapon>(this);
            _Ammunitions_Object = new SkyrimGroup<Ammunition>(this);
            _Npcs_Object = new SkyrimGroup<Npc>(this);
            _LeveledNpcs_Object = new SkyrimGroup<LeveledNpc>(this);
            _Keys_Object = new SkyrimGroup<Key>(this);
            _Ingestibles_Object = new SkyrimGroup<Ingestible>(this);
            _IdleMarkers_Object = new SkyrimGroup<IdleMarker>(this);
            _ConstructibleObjects_Object = new SkyrimGroup<ConstructibleObject>(this);
            _Projectiles_Object = new SkyrimGroup<Projectile>(this);
            _Hazards_Object = new SkyrimGroup<Hazard>(this);
            _SoulGems_Object = new SkyrimGroup<SoulGem>(this);
            _LeveledItems_Object = new SkyrimGroup<LeveledItem>(this);
            _Weathers_Object = new SkyrimGroup<Weather>(this);
            _Climates_Object = new SkyrimGroup<Climate>(this);
            _ShaderParticleGeometries_Object = new SkyrimGroup<ShaderParticleGeometry>(this);
            _VisualEffects_Object = new SkyrimGroup<VisualEffect>(this);
            _Regions_Object = new SkyrimGroup<Region>(this);
            _NavigationMeshInfoMaps_Object = new SkyrimGroup<NavigationMeshInfoMap>(this);
            _Worldspaces_Object = new SkyrimGroup<Worldspace>(this);
            _DialogTopics_Object = new SkyrimGroup<DialogTopic>(this);
            _Quests_Object = new SkyrimGroup<Quest>(this);
            _IdleAnimations_Object = new SkyrimGroup<IdleAnimation>(this);
            _Packages_Object = new SkyrimGroup<Package>(this);
            _CombatStyles_Object = new SkyrimGroup<CombatStyle>(this);
            _LoadScreens_Object = new SkyrimGroup<LoadScreen>(this);
            _LeveledSpells_Object = new SkyrimGroup<LeveledSpell>(this);
            _AnimatedObjects_Object = new SkyrimGroup<AnimatedObject>(this);
            _Waters_Object = new SkyrimGroup<Water>(this);
            _EffectShaders_Object = new SkyrimGroup<EffectShader>(this);
            _Explosions_Object = new SkyrimGroup<Explosion>(this);
            _Debris_Object = new SkyrimGroup<Debris>(this);
            _ImageSpaces_Object = new SkyrimGroup<ImageSpace>(this);
            _ImageSpaceAdapters_Object = new SkyrimGroup<ImageSpaceAdapter>(this);
            _FormLists_Object = new SkyrimGroup<FormList>(this);
            _Perks_Object = new SkyrimGroup<Perk>(this);
            _BodyParts_Object = new SkyrimGroup<BodyPartData>(this);
            _AddonNodes_Object = new SkyrimGroup<AddonNode>(this);
            _ActorValueInformation_Object = new SkyrimGroup<ActorValueInformation>(this);
            _CameraShots_Object = new SkyrimGroup<CameraShot>(this);
            _CameraPaths_Object = new SkyrimGroup<CameraPath>(this);
            _VoiceTypes_Object = new SkyrimGroup<VoiceType>(this);
            _MaterialTypes_Object = new SkyrimGroup<MaterialType>(this);
            _Impacts_Object = new SkyrimGroup<Impact>(this);
            _ImpactDataSets_Object = new SkyrimGroup<ImpactDataSet>(this);
            _ArmorAddons_Object = new SkyrimGroup<ArmorAddon>(this);
            _EncounterZones_Object = new SkyrimGroup<EncounterZone>(this);
            _Locations_Object = new SkyrimGroup<Location>(this);
            _Messages_Object = new SkyrimGroup<Message>(this);
            _DefaultObjectManagers_Object = new SkyrimGroup<DefaultObjectManager>(this);
            _LightingTemplates_Object = new SkyrimGroup<LightingTemplate>(this);
            _MusicTypes_Object = new SkyrimGroup<MusicType>(this);
            _Footsteps_Object = new SkyrimGroup<Footstep>(this);
            _FootstepSets_Object = new SkyrimGroup<FootstepSet>(this);
            _StoryManagerBranchNodes_Object = new SkyrimGroup<StoryManagerBranchNode>(this);
            _StoryManagerQuestNodes_Object = new SkyrimGroup<StoryManagerQuestNode>(this);
            _StoryManagerEventNodes_Object = new SkyrimGroup<StoryManagerEventNode>(this);
            _DialogBranches_Object = new SkyrimGroup<DialogBranch>(this);
            _MusicTracks_Object = new SkyrimGroup<MusicTrack>(this);
            _DialogViews_Object = new SkyrimGroup<DialogView>(this);
            _WordsOfPower_Object = new SkyrimGroup<WordOfPower>(this);
            _Shouts_Object = new SkyrimGroup<Shout>(this);
            _EquipTypes_Object = new SkyrimGroup<EquipType>(this);
            _Relationships_Object = new SkyrimGroup<Relationship>(this);
            _Scenes_Object = new SkyrimGroup<Scene>(this);
            _AssociationTypes_Object = new SkyrimGroup<AssociationType>(this);
            _Outfits_Object = new SkyrimGroup<Outfit>(this);
            _ArtObjects_Object = new SkyrimGroup<ArtObject>(this);
            _MaterialObjects_Object = new SkyrimGroup<MaterialObject>(this);
            _MovementTypes_Object = new SkyrimGroup<MovementType>(this);
            _SoundDescriptors_Object = new SkyrimGroup<SoundDescriptor>(this);
            _DualCastData_Object = new SkyrimGroup<DualCastData>(this);
            _SoundCategories_Object = new SkyrimGroup<SoundCategory>(this);
            _SoundOutputModels_Object = new SkyrimGroup<SoundOutputModel>(this);
            _CollisionLayers_Object = new SkyrimGroup<CollisionLayer>(this);
            _Colors_Object = new SkyrimGroup<ColorRecord>(this);
            _ReverbParameters_Object = new SkyrimGroup<ReverbParameters>(this);
            _VolumetricLightings_Object = new SkyrimGroup<VolumetricLighting>(this);
            _LensFlares_Object = new SkyrimGroup<LensFlare>(this);
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ModHeader
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SkyrimModHeader _ModHeader_Object = new SkyrimModHeader();
        public SkyrimModHeader ModHeader => _ModHeader_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimModHeaderGetter ISkyrimModGetter.ModHeader => _ModHeader_Object;
        #endregion
        #region GameSettings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<GameSetting> _GameSettings_Object;
        public SkyrimGroup<GameSetting> GameSettings => _GameSettings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IGameSettingGetter> ISkyrimModGetter.GameSettings => _GameSettings_Object;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Keyword> _Keywords_Object;
        public SkyrimGroup<Keyword> Keywords => _Keywords_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IKeywordGetter> ISkyrimModGetter.Keywords => _Keywords_Object;
        #endregion
        #region LocationReferenceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<LocationReferenceType> _LocationReferenceTypes_Object;
        public SkyrimGroup<LocationReferenceType> LocationReferenceTypes => _LocationReferenceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ILocationReferenceTypeGetter> ISkyrimModGetter.LocationReferenceTypes => _LocationReferenceTypes_Object;
        #endregion
        #region Actions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ActionRecord> _Actions_Object;
        public SkyrimGroup<ActionRecord> Actions => _Actions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IActionRecordGetter> ISkyrimModGetter.Actions => _Actions_Object;
        #endregion
        #region TextureSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<TextureSet> _TextureSets_Object;
        public SkyrimGroup<TextureSet> TextureSets => _TextureSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ITextureSetGetter> ISkyrimModGetter.TextureSets => _TextureSets_Object;
        #endregion
        #region Globals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Global> _Globals_Object;
        public SkyrimGroup<Global> Globals => _Globals_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IGlobalGetter> ISkyrimModGetter.Globals => _Globals_Object;
        #endregion
        #region Classes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Class> _Classes_Object;
        public SkyrimGroup<Class> Classes => _Classes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IClassGetter> ISkyrimModGetter.Classes => _Classes_Object;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Faction> _Factions_Object;
        public SkyrimGroup<Faction> Factions => _Factions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IFactionGetter> ISkyrimModGetter.Factions => _Factions_Object;
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<HeadPart> _HeadParts_Object;
        public SkyrimGroup<HeadPart> HeadParts => _HeadParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IHeadPartGetter> ISkyrimModGetter.HeadParts => _HeadParts_Object;
        #endregion
        #region Hairs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Hair> _Hairs_Object;
        public SkyrimGroup<Hair> Hairs => _Hairs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IHairGetter> ISkyrimModGetter.Hairs => _Hairs_Object;
        #endregion
        #region Eyes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Eyes> _Eyes_Object;
        public SkyrimGroup<Eyes> Eyes => _Eyes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IEyesGetter> ISkyrimModGetter.Eyes => _Eyes_Object;
        #endregion
        #region Races
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Race> _Races_Object;
        public SkyrimGroup<Race> Races => _Races_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IRaceGetter> ISkyrimModGetter.Races => _Races_Object;
        #endregion
        #region SoundMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<SoundMarker> _SoundMarkers_Object;
        public SkyrimGroup<SoundMarker> SoundMarkers => _SoundMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ISoundMarkerGetter> ISkyrimModGetter.SoundMarkers => _SoundMarkers_Object;
        #endregion
        #region AcousticSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<AcousticSpace> _AcousticSpaces_Object;
        public SkyrimGroup<AcousticSpace> AcousticSpaces => _AcousticSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IAcousticSpaceGetter> ISkyrimModGetter.AcousticSpaces => _AcousticSpaces_Object;
        #endregion
        #region MagicEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<MagicEffect> _MagicEffects_Object;
        public SkyrimGroup<MagicEffect> MagicEffects => _MagicEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IMagicEffectGetter> ISkyrimModGetter.MagicEffects => _MagicEffects_Object;
        #endregion
        #region LandscapeTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<LandscapeTexture> _LandscapeTextures_Object;
        public SkyrimGroup<LandscapeTexture> LandscapeTextures => _LandscapeTextures_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ILandscapeTextureGetter> ISkyrimModGetter.LandscapeTextures => _LandscapeTextures_Object;
        #endregion
        #region ObjectEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ObjectEffect> _ObjectEffects_Object;
        public SkyrimGroup<ObjectEffect> ObjectEffects => _ObjectEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IObjectEffectGetter> ISkyrimModGetter.ObjectEffects => _ObjectEffects_Object;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Spell> _Spells_Object;
        public SkyrimGroup<Spell> Spells => _Spells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ISpellGetter> ISkyrimModGetter.Spells => _Spells_Object;
        #endregion
        #region Scrolls
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Scroll> _Scrolls_Object;
        public SkyrimGroup<Scroll> Scrolls => _Scrolls_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IScrollGetter> ISkyrimModGetter.Scrolls => _Scrolls_Object;
        #endregion
        #region Activators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Activator> _Activators_Object;
        public SkyrimGroup<Activator> Activators => _Activators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IActivatorGetter> ISkyrimModGetter.Activators => _Activators_Object;
        #endregion
        #region TalkingActivators
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<TalkingActivator> _TalkingActivators_Object;
        public SkyrimGroup<TalkingActivator> TalkingActivators => _TalkingActivators_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ITalkingActivatorGetter> ISkyrimModGetter.TalkingActivators => _TalkingActivators_Object;
        #endregion
        #region Armors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Armor> _Armors_Object;
        public SkyrimGroup<Armor> Armors => _Armors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IArmorGetter> ISkyrimModGetter.Armors => _Armors_Object;
        #endregion
        #region Books
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Book> _Books_Object;
        public SkyrimGroup<Book> Books => _Books_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IBookGetter> ISkyrimModGetter.Books => _Books_Object;
        #endregion
        #region Containers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Container> _Containers_Object;
        public SkyrimGroup<Container> Containers => _Containers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IContainerGetter> ISkyrimModGetter.Containers => _Containers_Object;
        #endregion
        #region Doors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Door> _Doors_Object;
        public SkyrimGroup<Door> Doors => _Doors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IDoorGetter> ISkyrimModGetter.Doors => _Doors_Object;
        #endregion
        #region Ingredients
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Ingredient> _Ingredients_Object;
        public SkyrimGroup<Ingredient> Ingredients => _Ingredients_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IIngredientGetter> ISkyrimModGetter.Ingredients => _Ingredients_Object;
        #endregion
        #region Lights
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Light> _Lights_Object;
        public SkyrimGroup<Light> Lights => _Lights_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ILightGetter> ISkyrimModGetter.Lights => _Lights_Object;
        #endregion
        #region MiscItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<MiscItem> _MiscItems_Object;
        public SkyrimGroup<MiscItem> MiscItems => _MiscItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IMiscItemGetter> ISkyrimModGetter.MiscItems => _MiscItems_Object;
        #endregion
        #region AlchemicalApparatuses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<AlchemicalApparatus> _AlchemicalApparatuses_Object;
        public SkyrimGroup<AlchemicalApparatus> AlchemicalApparatuses => _AlchemicalApparatuses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IAlchemicalApparatusGetter> ISkyrimModGetter.AlchemicalApparatuses => _AlchemicalApparatuses_Object;
        #endregion
        #region Statics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Static> _Statics_Object;
        public SkyrimGroup<Static> Statics => _Statics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IStaticGetter> ISkyrimModGetter.Statics => _Statics_Object;
        #endregion
        #region MoveableStatics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<MoveableStatic> _MoveableStatics_Object;
        public SkyrimGroup<MoveableStatic> MoveableStatics => _MoveableStatics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IMoveableStaticGetter> ISkyrimModGetter.MoveableStatics => _MoveableStatics_Object;
        #endregion
        #region Grasses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Grass> _Grasses_Object;
        public SkyrimGroup<Grass> Grasses => _Grasses_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IGrassGetter> ISkyrimModGetter.Grasses => _Grasses_Object;
        #endregion
        #region Trees
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Tree> _Trees_Object;
        public SkyrimGroup<Tree> Trees => _Trees_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ITreeGetter> ISkyrimModGetter.Trees => _Trees_Object;
        #endregion
        #region Florae
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Flora> _Florae_Object;
        public SkyrimGroup<Flora> Florae => _Florae_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IFloraGetter> ISkyrimModGetter.Florae => _Florae_Object;
        #endregion
        #region Furniture
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Furniture> _Furniture_Object;
        public SkyrimGroup<Furniture> Furniture => _Furniture_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IFurnitureGetter> ISkyrimModGetter.Furniture => _Furniture_Object;
        #endregion
        #region Weapons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Weapon> _Weapons_Object;
        public SkyrimGroup<Weapon> Weapons => _Weapons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IWeaponGetter> ISkyrimModGetter.Weapons => _Weapons_Object;
        #endregion
        #region Ammunitions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Ammunition> _Ammunitions_Object;
        public SkyrimGroup<Ammunition> Ammunitions => _Ammunitions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IAmmunitionGetter> ISkyrimModGetter.Ammunitions => _Ammunitions_Object;
        #endregion
        #region Npcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Npc> _Npcs_Object;
        public SkyrimGroup<Npc> Npcs => _Npcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<INpcGetter> ISkyrimModGetter.Npcs => _Npcs_Object;
        #endregion
        #region LeveledNpcs
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<LeveledNpc> _LeveledNpcs_Object;
        public SkyrimGroup<LeveledNpc> LeveledNpcs => _LeveledNpcs_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ILeveledNpcGetter> ISkyrimModGetter.LeveledNpcs => _LeveledNpcs_Object;
        #endregion
        #region Keys
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Key> _Keys_Object;
        public SkyrimGroup<Key> Keys => _Keys_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IKeyGetter> ISkyrimModGetter.Keys => _Keys_Object;
        #endregion
        #region Ingestibles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Ingestible> _Ingestibles_Object;
        public SkyrimGroup<Ingestible> Ingestibles => _Ingestibles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IIngestibleGetter> ISkyrimModGetter.Ingestibles => _Ingestibles_Object;
        #endregion
        #region IdleMarkers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<IdleMarker> _IdleMarkers_Object;
        public SkyrimGroup<IdleMarker> IdleMarkers => _IdleMarkers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IIdleMarkerGetter> ISkyrimModGetter.IdleMarkers => _IdleMarkers_Object;
        #endregion
        #region ConstructibleObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ConstructibleObject> _ConstructibleObjects_Object;
        public SkyrimGroup<ConstructibleObject> ConstructibleObjects => _ConstructibleObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IConstructibleObjectGetter> ISkyrimModGetter.ConstructibleObjects => _ConstructibleObjects_Object;
        #endregion
        #region Projectiles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Projectile> _Projectiles_Object;
        public SkyrimGroup<Projectile> Projectiles => _Projectiles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IProjectileGetter> ISkyrimModGetter.Projectiles => _Projectiles_Object;
        #endregion
        #region Hazards
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Hazard> _Hazards_Object;
        public SkyrimGroup<Hazard> Hazards => _Hazards_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IHazardGetter> ISkyrimModGetter.Hazards => _Hazards_Object;
        #endregion
        #region SoulGems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<SoulGem> _SoulGems_Object;
        public SkyrimGroup<SoulGem> SoulGems => _SoulGems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ISoulGemGetter> ISkyrimModGetter.SoulGems => _SoulGems_Object;
        #endregion
        #region LeveledItems
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<LeveledItem> _LeveledItems_Object;
        public SkyrimGroup<LeveledItem> LeveledItems => _LeveledItems_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ILeveledItemGetter> ISkyrimModGetter.LeveledItems => _LeveledItems_Object;
        #endregion
        #region Weathers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Weather> _Weathers_Object;
        public SkyrimGroup<Weather> Weathers => _Weathers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IWeatherGetter> ISkyrimModGetter.Weathers => _Weathers_Object;
        #endregion
        #region Climates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Climate> _Climates_Object;
        public SkyrimGroup<Climate> Climates => _Climates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IClimateGetter> ISkyrimModGetter.Climates => _Climates_Object;
        #endregion
        #region ShaderParticleGeometries
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ShaderParticleGeometry> _ShaderParticleGeometries_Object;
        public SkyrimGroup<ShaderParticleGeometry> ShaderParticleGeometries => _ShaderParticleGeometries_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IShaderParticleGeometryGetter> ISkyrimModGetter.ShaderParticleGeometries => _ShaderParticleGeometries_Object;
        #endregion
        #region VisualEffects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<VisualEffect> _VisualEffects_Object;
        public SkyrimGroup<VisualEffect> VisualEffects => _VisualEffects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IVisualEffectGetter> ISkyrimModGetter.VisualEffects => _VisualEffects_Object;
        #endregion
        #region Regions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Region> _Regions_Object;
        public SkyrimGroup<Region> Regions => _Regions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IRegionGetter> ISkyrimModGetter.Regions => _Regions_Object;
        #endregion
        #region NavigationMeshInfoMaps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<NavigationMeshInfoMap> _NavigationMeshInfoMaps_Object;
        public SkyrimGroup<NavigationMeshInfoMap> NavigationMeshInfoMaps => _NavigationMeshInfoMaps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<INavigationMeshInfoMapGetter> ISkyrimModGetter.NavigationMeshInfoMaps => _NavigationMeshInfoMaps_Object;
        #endregion
        #region Cells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private readonly SkyrimListGroup<CellBlock> _Cells_Object = new SkyrimListGroup<CellBlock>();
        public SkyrimListGroup<CellBlock> Cells => _Cells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimListGroupGetter<ICellBlockGetter> ISkyrimModGetter.Cells => _Cells_Object;
        #endregion
        #region Worldspaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Worldspace> _Worldspaces_Object;
        public SkyrimGroup<Worldspace> Worldspaces => _Worldspaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IWorldspaceGetter> ISkyrimModGetter.Worldspaces => _Worldspaces_Object;
        #endregion
        #region DialogTopics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<DialogTopic> _DialogTopics_Object;
        public SkyrimGroup<DialogTopic> DialogTopics => _DialogTopics_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IDialogTopicGetter> ISkyrimModGetter.DialogTopics => _DialogTopics_Object;
        #endregion
        #region Quests
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Quest> _Quests_Object;
        public SkyrimGroup<Quest> Quests => _Quests_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IQuestGetter> ISkyrimModGetter.Quests => _Quests_Object;
        #endregion
        #region IdleAnimations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<IdleAnimation> _IdleAnimations_Object;
        public SkyrimGroup<IdleAnimation> IdleAnimations => _IdleAnimations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IIdleAnimationGetter> ISkyrimModGetter.IdleAnimations => _IdleAnimations_Object;
        #endregion
        #region Packages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Package> _Packages_Object;
        public SkyrimGroup<Package> Packages => _Packages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IPackageGetter> ISkyrimModGetter.Packages => _Packages_Object;
        #endregion
        #region CombatStyles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<CombatStyle> _CombatStyles_Object;
        public SkyrimGroup<CombatStyle> CombatStyles => _CombatStyles_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ICombatStyleGetter> ISkyrimModGetter.CombatStyles => _CombatStyles_Object;
        #endregion
        #region LoadScreens
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<LoadScreen> _LoadScreens_Object;
        public SkyrimGroup<LoadScreen> LoadScreens => _LoadScreens_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ILoadScreenGetter> ISkyrimModGetter.LoadScreens => _LoadScreens_Object;
        #endregion
        #region LeveledSpells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<LeveledSpell> _LeveledSpells_Object;
        public SkyrimGroup<LeveledSpell> LeveledSpells => _LeveledSpells_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ILeveledSpellGetter> ISkyrimModGetter.LeveledSpells => _LeveledSpells_Object;
        #endregion
        #region AnimatedObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<AnimatedObject> _AnimatedObjects_Object;
        public SkyrimGroup<AnimatedObject> AnimatedObjects => _AnimatedObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IAnimatedObjectGetter> ISkyrimModGetter.AnimatedObjects => _AnimatedObjects_Object;
        #endregion
        #region Waters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Water> _Waters_Object;
        public SkyrimGroup<Water> Waters => _Waters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IWaterGetter> ISkyrimModGetter.Waters => _Waters_Object;
        #endregion
        #region EffectShaders
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<EffectShader> _EffectShaders_Object;
        public SkyrimGroup<EffectShader> EffectShaders => _EffectShaders_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IEffectShaderGetter> ISkyrimModGetter.EffectShaders => _EffectShaders_Object;
        #endregion
        #region Explosions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Explosion> _Explosions_Object;
        public SkyrimGroup<Explosion> Explosions => _Explosions_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IExplosionGetter> ISkyrimModGetter.Explosions => _Explosions_Object;
        #endregion
        #region Debris
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Debris> _Debris_Object;
        public SkyrimGroup<Debris> Debris => _Debris_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IDebrisGetter> ISkyrimModGetter.Debris => _Debris_Object;
        #endregion
        #region ImageSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ImageSpace> _ImageSpaces_Object;
        public SkyrimGroup<ImageSpace> ImageSpaces => _ImageSpaces_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IImageSpaceGetter> ISkyrimModGetter.ImageSpaces => _ImageSpaces_Object;
        #endregion
        #region ImageSpaceAdapters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ImageSpaceAdapter> _ImageSpaceAdapters_Object;
        public SkyrimGroup<ImageSpaceAdapter> ImageSpaceAdapters => _ImageSpaceAdapters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IImageSpaceAdapterGetter> ISkyrimModGetter.ImageSpaceAdapters => _ImageSpaceAdapters_Object;
        #endregion
        #region FormLists
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<FormList> _FormLists_Object;
        public SkyrimGroup<FormList> FormLists => _FormLists_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IFormListGetter> ISkyrimModGetter.FormLists => _FormLists_Object;
        #endregion
        #region Perks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Perk> _Perks_Object;
        public SkyrimGroup<Perk> Perks => _Perks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IPerkGetter> ISkyrimModGetter.Perks => _Perks_Object;
        #endregion
        #region BodyParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<BodyPartData> _BodyParts_Object;
        public SkyrimGroup<BodyPartData> BodyParts => _BodyParts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IBodyPartDataGetter> ISkyrimModGetter.BodyParts => _BodyParts_Object;
        #endregion
        #region AddonNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<AddonNode> _AddonNodes_Object;
        public SkyrimGroup<AddonNode> AddonNodes => _AddonNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IAddonNodeGetter> ISkyrimModGetter.AddonNodes => _AddonNodes_Object;
        #endregion
        #region ActorValueInformation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ActorValueInformation> _ActorValueInformation_Object;
        public SkyrimGroup<ActorValueInformation> ActorValueInformation => _ActorValueInformation_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IActorValueInformationGetter> ISkyrimModGetter.ActorValueInformation => _ActorValueInformation_Object;
        #endregion
        #region CameraShots
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<CameraShot> _CameraShots_Object;
        public SkyrimGroup<CameraShot> CameraShots => _CameraShots_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ICameraShotGetter> ISkyrimModGetter.CameraShots => _CameraShots_Object;
        #endregion
        #region CameraPaths
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<CameraPath> _CameraPaths_Object;
        public SkyrimGroup<CameraPath> CameraPaths => _CameraPaths_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ICameraPathGetter> ISkyrimModGetter.CameraPaths => _CameraPaths_Object;
        #endregion
        #region VoiceTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<VoiceType> _VoiceTypes_Object;
        public SkyrimGroup<VoiceType> VoiceTypes => _VoiceTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IVoiceTypeGetter> ISkyrimModGetter.VoiceTypes => _VoiceTypes_Object;
        #endregion
        #region MaterialTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<MaterialType> _MaterialTypes_Object;
        public SkyrimGroup<MaterialType> MaterialTypes => _MaterialTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IMaterialTypeGetter> ISkyrimModGetter.MaterialTypes => _MaterialTypes_Object;
        #endregion
        #region Impacts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Impact> _Impacts_Object;
        public SkyrimGroup<Impact> Impacts => _Impacts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IImpactGetter> ISkyrimModGetter.Impacts => _Impacts_Object;
        #endregion
        #region ImpactDataSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ImpactDataSet> _ImpactDataSets_Object;
        public SkyrimGroup<ImpactDataSet> ImpactDataSets => _ImpactDataSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IImpactDataSetGetter> ISkyrimModGetter.ImpactDataSets => _ImpactDataSets_Object;
        #endregion
        #region ArmorAddons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ArmorAddon> _ArmorAddons_Object;
        public SkyrimGroup<ArmorAddon> ArmorAddons => _ArmorAddons_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IArmorAddonGetter> ISkyrimModGetter.ArmorAddons => _ArmorAddons_Object;
        #endregion
        #region EncounterZones
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<EncounterZone> _EncounterZones_Object;
        public SkyrimGroup<EncounterZone> EncounterZones => _EncounterZones_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IEncounterZoneGetter> ISkyrimModGetter.EncounterZones => _EncounterZones_Object;
        #endregion
        #region Locations
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Location> _Locations_Object;
        public SkyrimGroup<Location> Locations => _Locations_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ILocationGetter> ISkyrimModGetter.Locations => _Locations_Object;
        #endregion
        #region Messages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Message> _Messages_Object;
        public SkyrimGroup<Message> Messages => _Messages_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IMessageGetter> ISkyrimModGetter.Messages => _Messages_Object;
        #endregion
        #region DefaultObjectManagers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<DefaultObjectManager> _DefaultObjectManagers_Object;
        public SkyrimGroup<DefaultObjectManager> DefaultObjectManagers => _DefaultObjectManagers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IDefaultObjectManagerGetter> ISkyrimModGetter.DefaultObjectManagers => _DefaultObjectManagers_Object;
        #endregion
        #region LightingTemplates
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<LightingTemplate> _LightingTemplates_Object;
        public SkyrimGroup<LightingTemplate> LightingTemplates => _LightingTemplates_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ILightingTemplateGetter> ISkyrimModGetter.LightingTemplates => _LightingTemplates_Object;
        #endregion
        #region MusicTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<MusicType> _MusicTypes_Object;
        public SkyrimGroup<MusicType> MusicTypes => _MusicTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IMusicTypeGetter> ISkyrimModGetter.MusicTypes => _MusicTypes_Object;
        #endregion
        #region Footsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Footstep> _Footsteps_Object;
        public SkyrimGroup<Footstep> Footsteps => _Footsteps_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IFootstepGetter> ISkyrimModGetter.Footsteps => _Footsteps_Object;
        #endregion
        #region FootstepSets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<FootstepSet> _FootstepSets_Object;
        public SkyrimGroup<FootstepSet> FootstepSets => _FootstepSets_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IFootstepSetGetter> ISkyrimModGetter.FootstepSets => _FootstepSets_Object;
        #endregion
        #region StoryManagerBranchNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<StoryManagerBranchNode> _StoryManagerBranchNodes_Object;
        public SkyrimGroup<StoryManagerBranchNode> StoryManagerBranchNodes => _StoryManagerBranchNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IStoryManagerBranchNodeGetter> ISkyrimModGetter.StoryManagerBranchNodes => _StoryManagerBranchNodes_Object;
        #endregion
        #region StoryManagerQuestNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<StoryManagerQuestNode> _StoryManagerQuestNodes_Object;
        public SkyrimGroup<StoryManagerQuestNode> StoryManagerQuestNodes => _StoryManagerQuestNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IStoryManagerQuestNodeGetter> ISkyrimModGetter.StoryManagerQuestNodes => _StoryManagerQuestNodes_Object;
        #endregion
        #region StoryManagerEventNodes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<StoryManagerEventNode> _StoryManagerEventNodes_Object;
        public SkyrimGroup<StoryManagerEventNode> StoryManagerEventNodes => _StoryManagerEventNodes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IStoryManagerEventNodeGetter> ISkyrimModGetter.StoryManagerEventNodes => _StoryManagerEventNodes_Object;
        #endregion
        #region DialogBranches
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<DialogBranch> _DialogBranches_Object;
        public SkyrimGroup<DialogBranch> DialogBranches => _DialogBranches_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IDialogBranchGetter> ISkyrimModGetter.DialogBranches => _DialogBranches_Object;
        #endregion
        #region MusicTracks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<MusicTrack> _MusicTracks_Object;
        public SkyrimGroup<MusicTrack> MusicTracks => _MusicTracks_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IMusicTrackGetter> ISkyrimModGetter.MusicTracks => _MusicTracks_Object;
        #endregion
        #region DialogViews
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<DialogView> _DialogViews_Object;
        public SkyrimGroup<DialogView> DialogViews => _DialogViews_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IDialogViewGetter> ISkyrimModGetter.DialogViews => _DialogViews_Object;
        #endregion
        #region WordsOfPower
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<WordOfPower> _WordsOfPower_Object;
        public SkyrimGroup<WordOfPower> WordsOfPower => _WordsOfPower_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IWordOfPowerGetter> ISkyrimModGetter.WordsOfPower => _WordsOfPower_Object;
        #endregion
        #region Shouts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Shout> _Shouts_Object;
        public SkyrimGroup<Shout> Shouts => _Shouts_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IShoutGetter> ISkyrimModGetter.Shouts => _Shouts_Object;
        #endregion
        #region EquipTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<EquipType> _EquipTypes_Object;
        public SkyrimGroup<EquipType> EquipTypes => _EquipTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IEquipTypeGetter> ISkyrimModGetter.EquipTypes => _EquipTypes_Object;
        #endregion
        #region Relationships
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Relationship> _Relationships_Object;
        public SkyrimGroup<Relationship> Relationships => _Relationships_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IRelationshipGetter> ISkyrimModGetter.Relationships => _Relationships_Object;
        #endregion
        #region Scenes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Scene> _Scenes_Object;
        public SkyrimGroup<Scene> Scenes => _Scenes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ISceneGetter> ISkyrimModGetter.Scenes => _Scenes_Object;
        #endregion
        #region AssociationTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<AssociationType> _AssociationTypes_Object;
        public SkyrimGroup<AssociationType> AssociationTypes => _AssociationTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IAssociationTypeGetter> ISkyrimModGetter.AssociationTypes => _AssociationTypes_Object;
        #endregion
        #region Outfits
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<Outfit> _Outfits_Object;
        public SkyrimGroup<Outfit> Outfits => _Outfits_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IOutfitGetter> ISkyrimModGetter.Outfits => _Outfits_Object;
        #endregion
        #region ArtObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ArtObject> _ArtObjects_Object;
        public SkyrimGroup<ArtObject> ArtObjects => _ArtObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IArtObjectGetter> ISkyrimModGetter.ArtObjects => _ArtObjects_Object;
        #endregion
        #region MaterialObjects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<MaterialObject> _MaterialObjects_Object;
        public SkyrimGroup<MaterialObject> MaterialObjects => _MaterialObjects_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IMaterialObjectGetter> ISkyrimModGetter.MaterialObjects => _MaterialObjects_Object;
        #endregion
        #region MovementTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<MovementType> _MovementTypes_Object;
        public SkyrimGroup<MovementType> MovementTypes => _MovementTypes_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IMovementTypeGetter> ISkyrimModGetter.MovementTypes => _MovementTypes_Object;
        #endregion
        #region SoundDescriptors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<SoundDescriptor> _SoundDescriptors_Object;
        public SkyrimGroup<SoundDescriptor> SoundDescriptors => _SoundDescriptors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ISoundDescriptorGetter> ISkyrimModGetter.SoundDescriptors => _SoundDescriptors_Object;
        #endregion
        #region DualCastData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<DualCastData> _DualCastData_Object;
        public SkyrimGroup<DualCastData> DualCastData => _DualCastData_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IDualCastDataGetter> ISkyrimModGetter.DualCastData => _DualCastData_Object;
        #endregion
        #region SoundCategories
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<SoundCategory> _SoundCategories_Object;
        public SkyrimGroup<SoundCategory> SoundCategories => _SoundCategories_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ISoundCategoryGetter> ISkyrimModGetter.SoundCategories => _SoundCategories_Object;
        #endregion
        #region SoundOutputModels
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<SoundOutputModel> _SoundOutputModels_Object;
        public SkyrimGroup<SoundOutputModel> SoundOutputModels => _SoundOutputModels_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ISoundOutputModelGetter> ISkyrimModGetter.SoundOutputModels => _SoundOutputModels_Object;
        #endregion
        #region CollisionLayers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<CollisionLayer> _CollisionLayers_Object;
        public SkyrimGroup<CollisionLayer> CollisionLayers => _CollisionLayers_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ICollisionLayerGetter> ISkyrimModGetter.CollisionLayers => _CollisionLayers_Object;
        #endregion
        #region Colors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ColorRecord> _Colors_Object;
        public SkyrimGroup<ColorRecord> Colors => _Colors_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IColorRecordGetter> ISkyrimModGetter.Colors => _Colors_Object;
        #endregion
        #region ReverbParameters
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<ReverbParameters> _ReverbParameters_Object;
        public SkyrimGroup<ReverbParameters> ReverbParameters => _ReverbParameters_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IReverbParametersGetter> ISkyrimModGetter.ReverbParameters => _ReverbParameters_Object;
        #endregion
        #region VolumetricLightings
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<VolumetricLighting> _VolumetricLightings_Object;
        public SkyrimGroup<VolumetricLighting> VolumetricLightings => _VolumetricLightings_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<IVolumetricLightingGetter> ISkyrimModGetter.VolumetricLightings => _VolumetricLightings_Object;
        #endregion
        #region LensFlares
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SkyrimGroup<LensFlare> _LensFlares_Object;
        public SkyrimGroup<LensFlare> LensFlares => _LensFlares_Object;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISkyrimGroupGetter<ILensFlareGetter> ISkyrimModGetter.LensFlares => _LensFlares_Object;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SkyrimModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISkyrimModGetter rhs) return false;
            return ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISkyrimModGetter? obj)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ModHeader = new MaskItem<TItem, SkyrimModHeader.Mask<TItem>?>(initialValue, new SkyrimModHeader.Mask<TItem>(initialValue));
                this.GameSettings = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.LocationReferenceTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Actions = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.TextureSets = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Globals = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Classes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.HeadParts = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Hairs = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Eyes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Races = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.SoundMarkers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.AcousticSpaces = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.MagicEffects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.LandscapeTextures = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.ObjectEffects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Spells = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Scrolls = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Activators = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.TalkingActivators = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Armors = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Books = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Containers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Doors = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Ingredients = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Lights = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.MiscItems = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.AlchemicalApparatuses = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Statics = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.MoveableStatics = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Grasses = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Trees = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Florae = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Furniture = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Weapons = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Ammunitions = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Npcs = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.LeveledNpcs = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Keys = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Ingestibles = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.IdleMarkers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.ConstructibleObjects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Projectiles = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Hazards = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.SoulGems = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.LeveledItems = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Weathers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Climates = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.ShaderParticleGeometries = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.VisualEffects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Regions = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.NavigationMeshInfoMaps = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Cells = new MaskItem<TItem, SkyrimListGroup.Mask<TItem>?>(initialValue, new SkyrimListGroup.Mask<TItem>(initialValue));
                this.Worldspaces = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.DialogTopics = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Quests = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.IdleAnimations = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Packages = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.CombatStyles = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.LoadScreens = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.LeveledSpells = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.AnimatedObjects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Waters = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.EffectShaders = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Explosions = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Debris = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.ImageSpaces = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.ImageSpaceAdapters = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.FormLists = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Perks = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.BodyParts = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.AddonNodes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.ActorValueInformation = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.CameraShots = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.CameraPaths = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.VoiceTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.MaterialTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Impacts = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.ImpactDataSets = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.ArmorAddons = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.EncounterZones = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Locations = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Messages = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.DefaultObjectManagers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.LightingTemplates = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.MusicTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Footsteps = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.FootstepSets = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.StoryManagerBranchNodes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.StoryManagerQuestNodes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.StoryManagerEventNodes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.DialogBranches = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.MusicTracks = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.DialogViews = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.WordsOfPower = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Shouts = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.EquipTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Relationships = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Scenes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.AssociationTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Outfits = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.ArtObjects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.MaterialObjects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.MovementTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.SoundDescriptors = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.DualCastData = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.SoundCategories = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.SoundOutputModels = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.CollisionLayers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.Colors = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.ReverbParameters = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.VolumetricLightings = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
                this.LensFlares = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(initialValue, new SkyrimGroup.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem ModHeader,
                TItem GameSettings,
                TItem Keywords,
                TItem LocationReferenceTypes,
                TItem Actions,
                TItem TextureSets,
                TItem Globals,
                TItem Classes,
                TItem Factions,
                TItem HeadParts,
                TItem Hairs,
                TItem Eyes,
                TItem Races,
                TItem SoundMarkers,
                TItem AcousticSpaces,
                TItem MagicEffects,
                TItem LandscapeTextures,
                TItem ObjectEffects,
                TItem Spells,
                TItem Scrolls,
                TItem Activators,
                TItem TalkingActivators,
                TItem Armors,
                TItem Books,
                TItem Containers,
                TItem Doors,
                TItem Ingredients,
                TItem Lights,
                TItem MiscItems,
                TItem AlchemicalApparatuses,
                TItem Statics,
                TItem MoveableStatics,
                TItem Grasses,
                TItem Trees,
                TItem Florae,
                TItem Furniture,
                TItem Weapons,
                TItem Ammunitions,
                TItem Npcs,
                TItem LeveledNpcs,
                TItem Keys,
                TItem Ingestibles,
                TItem IdleMarkers,
                TItem ConstructibleObjects,
                TItem Projectiles,
                TItem Hazards,
                TItem SoulGems,
                TItem LeveledItems,
                TItem Weathers,
                TItem Climates,
                TItem ShaderParticleGeometries,
                TItem VisualEffects,
                TItem Regions,
                TItem NavigationMeshInfoMaps,
                TItem Cells,
                TItem Worldspaces,
                TItem DialogTopics,
                TItem Quests,
                TItem IdleAnimations,
                TItem Packages,
                TItem CombatStyles,
                TItem LoadScreens,
                TItem LeveledSpells,
                TItem AnimatedObjects,
                TItem Waters,
                TItem EffectShaders,
                TItem Explosions,
                TItem Debris,
                TItem ImageSpaces,
                TItem ImageSpaceAdapters,
                TItem FormLists,
                TItem Perks,
                TItem BodyParts,
                TItem AddonNodes,
                TItem ActorValueInformation,
                TItem CameraShots,
                TItem CameraPaths,
                TItem VoiceTypes,
                TItem MaterialTypes,
                TItem Impacts,
                TItem ImpactDataSets,
                TItem ArmorAddons,
                TItem EncounterZones,
                TItem Locations,
                TItem Messages,
                TItem DefaultObjectManagers,
                TItem LightingTemplates,
                TItem MusicTypes,
                TItem Footsteps,
                TItem FootstepSets,
                TItem StoryManagerBranchNodes,
                TItem StoryManagerQuestNodes,
                TItem StoryManagerEventNodes,
                TItem DialogBranches,
                TItem MusicTracks,
                TItem DialogViews,
                TItem WordsOfPower,
                TItem Shouts,
                TItem EquipTypes,
                TItem Relationships,
                TItem Scenes,
                TItem AssociationTypes,
                TItem Outfits,
                TItem ArtObjects,
                TItem MaterialObjects,
                TItem MovementTypes,
                TItem SoundDescriptors,
                TItem DualCastData,
                TItem SoundCategories,
                TItem SoundOutputModels,
                TItem CollisionLayers,
                TItem Colors,
                TItem ReverbParameters,
                TItem VolumetricLightings,
                TItem LensFlares)
            {
                this.ModHeader = new MaskItem<TItem, SkyrimModHeader.Mask<TItem>?>(ModHeader, new SkyrimModHeader.Mask<TItem>(ModHeader));
                this.GameSettings = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(GameSettings, new SkyrimGroup.Mask<TItem>(GameSettings));
                this.Keywords = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Keywords, new SkyrimGroup.Mask<TItem>(Keywords));
                this.LocationReferenceTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(LocationReferenceTypes, new SkyrimGroup.Mask<TItem>(LocationReferenceTypes));
                this.Actions = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Actions, new SkyrimGroup.Mask<TItem>(Actions));
                this.TextureSets = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(TextureSets, new SkyrimGroup.Mask<TItem>(TextureSets));
                this.Globals = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Globals, new SkyrimGroup.Mask<TItem>(Globals));
                this.Classes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Classes, new SkyrimGroup.Mask<TItem>(Classes));
                this.Factions = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Factions, new SkyrimGroup.Mask<TItem>(Factions));
                this.HeadParts = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(HeadParts, new SkyrimGroup.Mask<TItem>(HeadParts));
                this.Hairs = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Hairs, new SkyrimGroup.Mask<TItem>(Hairs));
                this.Eyes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Eyes, new SkyrimGroup.Mask<TItem>(Eyes));
                this.Races = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Races, new SkyrimGroup.Mask<TItem>(Races));
                this.SoundMarkers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(SoundMarkers, new SkyrimGroup.Mask<TItem>(SoundMarkers));
                this.AcousticSpaces = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(AcousticSpaces, new SkyrimGroup.Mask<TItem>(AcousticSpaces));
                this.MagicEffects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(MagicEffects, new SkyrimGroup.Mask<TItem>(MagicEffects));
                this.LandscapeTextures = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(LandscapeTextures, new SkyrimGroup.Mask<TItem>(LandscapeTextures));
                this.ObjectEffects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(ObjectEffects, new SkyrimGroup.Mask<TItem>(ObjectEffects));
                this.Spells = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Spells, new SkyrimGroup.Mask<TItem>(Spells));
                this.Scrolls = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Scrolls, new SkyrimGroup.Mask<TItem>(Scrolls));
                this.Activators = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Activators, new SkyrimGroup.Mask<TItem>(Activators));
                this.TalkingActivators = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(TalkingActivators, new SkyrimGroup.Mask<TItem>(TalkingActivators));
                this.Armors = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Armors, new SkyrimGroup.Mask<TItem>(Armors));
                this.Books = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Books, new SkyrimGroup.Mask<TItem>(Books));
                this.Containers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Containers, new SkyrimGroup.Mask<TItem>(Containers));
                this.Doors = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Doors, new SkyrimGroup.Mask<TItem>(Doors));
                this.Ingredients = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Ingredients, new SkyrimGroup.Mask<TItem>(Ingredients));
                this.Lights = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Lights, new SkyrimGroup.Mask<TItem>(Lights));
                this.MiscItems = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(MiscItems, new SkyrimGroup.Mask<TItem>(MiscItems));
                this.AlchemicalApparatuses = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(AlchemicalApparatuses, new SkyrimGroup.Mask<TItem>(AlchemicalApparatuses));
                this.Statics = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Statics, new SkyrimGroup.Mask<TItem>(Statics));
                this.MoveableStatics = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(MoveableStatics, new SkyrimGroup.Mask<TItem>(MoveableStatics));
                this.Grasses = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Grasses, new SkyrimGroup.Mask<TItem>(Grasses));
                this.Trees = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Trees, new SkyrimGroup.Mask<TItem>(Trees));
                this.Florae = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Florae, new SkyrimGroup.Mask<TItem>(Florae));
                this.Furniture = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Furniture, new SkyrimGroup.Mask<TItem>(Furniture));
                this.Weapons = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Weapons, new SkyrimGroup.Mask<TItem>(Weapons));
                this.Ammunitions = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Ammunitions, new SkyrimGroup.Mask<TItem>(Ammunitions));
                this.Npcs = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Npcs, new SkyrimGroup.Mask<TItem>(Npcs));
                this.LeveledNpcs = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(LeveledNpcs, new SkyrimGroup.Mask<TItem>(LeveledNpcs));
                this.Keys = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Keys, new SkyrimGroup.Mask<TItem>(Keys));
                this.Ingestibles = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Ingestibles, new SkyrimGroup.Mask<TItem>(Ingestibles));
                this.IdleMarkers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(IdleMarkers, new SkyrimGroup.Mask<TItem>(IdleMarkers));
                this.ConstructibleObjects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(ConstructibleObjects, new SkyrimGroup.Mask<TItem>(ConstructibleObjects));
                this.Projectiles = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Projectiles, new SkyrimGroup.Mask<TItem>(Projectiles));
                this.Hazards = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Hazards, new SkyrimGroup.Mask<TItem>(Hazards));
                this.SoulGems = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(SoulGems, new SkyrimGroup.Mask<TItem>(SoulGems));
                this.LeveledItems = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(LeveledItems, new SkyrimGroup.Mask<TItem>(LeveledItems));
                this.Weathers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Weathers, new SkyrimGroup.Mask<TItem>(Weathers));
                this.Climates = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Climates, new SkyrimGroup.Mask<TItem>(Climates));
                this.ShaderParticleGeometries = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(ShaderParticleGeometries, new SkyrimGroup.Mask<TItem>(ShaderParticleGeometries));
                this.VisualEffects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(VisualEffects, new SkyrimGroup.Mask<TItem>(VisualEffects));
                this.Regions = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Regions, new SkyrimGroup.Mask<TItem>(Regions));
                this.NavigationMeshInfoMaps = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(NavigationMeshInfoMaps, new SkyrimGroup.Mask<TItem>(NavigationMeshInfoMaps));
                this.Cells = new MaskItem<TItem, SkyrimListGroup.Mask<TItem>?>(Cells, new SkyrimListGroup.Mask<TItem>(Cells));
                this.Worldspaces = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Worldspaces, new SkyrimGroup.Mask<TItem>(Worldspaces));
                this.DialogTopics = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(DialogTopics, new SkyrimGroup.Mask<TItem>(DialogTopics));
                this.Quests = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Quests, new SkyrimGroup.Mask<TItem>(Quests));
                this.IdleAnimations = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(IdleAnimations, new SkyrimGroup.Mask<TItem>(IdleAnimations));
                this.Packages = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Packages, new SkyrimGroup.Mask<TItem>(Packages));
                this.CombatStyles = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(CombatStyles, new SkyrimGroup.Mask<TItem>(CombatStyles));
                this.LoadScreens = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(LoadScreens, new SkyrimGroup.Mask<TItem>(LoadScreens));
                this.LeveledSpells = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(LeveledSpells, new SkyrimGroup.Mask<TItem>(LeveledSpells));
                this.AnimatedObjects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(AnimatedObjects, new SkyrimGroup.Mask<TItem>(AnimatedObjects));
                this.Waters = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Waters, new SkyrimGroup.Mask<TItem>(Waters));
                this.EffectShaders = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(EffectShaders, new SkyrimGroup.Mask<TItem>(EffectShaders));
                this.Explosions = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Explosions, new SkyrimGroup.Mask<TItem>(Explosions));
                this.Debris = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Debris, new SkyrimGroup.Mask<TItem>(Debris));
                this.ImageSpaces = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(ImageSpaces, new SkyrimGroup.Mask<TItem>(ImageSpaces));
                this.ImageSpaceAdapters = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(ImageSpaceAdapters, new SkyrimGroup.Mask<TItem>(ImageSpaceAdapters));
                this.FormLists = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(FormLists, new SkyrimGroup.Mask<TItem>(FormLists));
                this.Perks = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Perks, new SkyrimGroup.Mask<TItem>(Perks));
                this.BodyParts = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(BodyParts, new SkyrimGroup.Mask<TItem>(BodyParts));
                this.AddonNodes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(AddonNodes, new SkyrimGroup.Mask<TItem>(AddonNodes));
                this.ActorValueInformation = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(ActorValueInformation, new SkyrimGroup.Mask<TItem>(ActorValueInformation));
                this.CameraShots = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(CameraShots, new SkyrimGroup.Mask<TItem>(CameraShots));
                this.CameraPaths = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(CameraPaths, new SkyrimGroup.Mask<TItem>(CameraPaths));
                this.VoiceTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(VoiceTypes, new SkyrimGroup.Mask<TItem>(VoiceTypes));
                this.MaterialTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(MaterialTypes, new SkyrimGroup.Mask<TItem>(MaterialTypes));
                this.Impacts = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Impacts, new SkyrimGroup.Mask<TItem>(Impacts));
                this.ImpactDataSets = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(ImpactDataSets, new SkyrimGroup.Mask<TItem>(ImpactDataSets));
                this.ArmorAddons = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(ArmorAddons, new SkyrimGroup.Mask<TItem>(ArmorAddons));
                this.EncounterZones = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(EncounterZones, new SkyrimGroup.Mask<TItem>(EncounterZones));
                this.Locations = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Locations, new SkyrimGroup.Mask<TItem>(Locations));
                this.Messages = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Messages, new SkyrimGroup.Mask<TItem>(Messages));
                this.DefaultObjectManagers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(DefaultObjectManagers, new SkyrimGroup.Mask<TItem>(DefaultObjectManagers));
                this.LightingTemplates = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(LightingTemplates, new SkyrimGroup.Mask<TItem>(LightingTemplates));
                this.MusicTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(MusicTypes, new SkyrimGroup.Mask<TItem>(MusicTypes));
                this.Footsteps = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Footsteps, new SkyrimGroup.Mask<TItem>(Footsteps));
                this.FootstepSets = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(FootstepSets, new SkyrimGroup.Mask<TItem>(FootstepSets));
                this.StoryManagerBranchNodes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(StoryManagerBranchNodes, new SkyrimGroup.Mask<TItem>(StoryManagerBranchNodes));
                this.StoryManagerQuestNodes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(StoryManagerQuestNodes, new SkyrimGroup.Mask<TItem>(StoryManagerQuestNodes));
                this.StoryManagerEventNodes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(StoryManagerEventNodes, new SkyrimGroup.Mask<TItem>(StoryManagerEventNodes));
                this.DialogBranches = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(DialogBranches, new SkyrimGroup.Mask<TItem>(DialogBranches));
                this.MusicTracks = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(MusicTracks, new SkyrimGroup.Mask<TItem>(MusicTracks));
                this.DialogViews = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(DialogViews, new SkyrimGroup.Mask<TItem>(DialogViews));
                this.WordsOfPower = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(WordsOfPower, new SkyrimGroup.Mask<TItem>(WordsOfPower));
                this.Shouts = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Shouts, new SkyrimGroup.Mask<TItem>(Shouts));
                this.EquipTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(EquipTypes, new SkyrimGroup.Mask<TItem>(EquipTypes));
                this.Relationships = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Relationships, new SkyrimGroup.Mask<TItem>(Relationships));
                this.Scenes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Scenes, new SkyrimGroup.Mask<TItem>(Scenes));
                this.AssociationTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(AssociationTypes, new SkyrimGroup.Mask<TItem>(AssociationTypes));
                this.Outfits = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Outfits, new SkyrimGroup.Mask<TItem>(Outfits));
                this.ArtObjects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(ArtObjects, new SkyrimGroup.Mask<TItem>(ArtObjects));
                this.MaterialObjects = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(MaterialObjects, new SkyrimGroup.Mask<TItem>(MaterialObjects));
                this.MovementTypes = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(MovementTypes, new SkyrimGroup.Mask<TItem>(MovementTypes));
                this.SoundDescriptors = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(SoundDescriptors, new SkyrimGroup.Mask<TItem>(SoundDescriptors));
                this.DualCastData = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(DualCastData, new SkyrimGroup.Mask<TItem>(DualCastData));
                this.SoundCategories = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(SoundCategories, new SkyrimGroup.Mask<TItem>(SoundCategories));
                this.SoundOutputModels = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(SoundOutputModels, new SkyrimGroup.Mask<TItem>(SoundOutputModels));
                this.CollisionLayers = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(CollisionLayers, new SkyrimGroup.Mask<TItem>(CollisionLayers));
                this.Colors = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(Colors, new SkyrimGroup.Mask<TItem>(Colors));
                this.ReverbParameters = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(ReverbParameters, new SkyrimGroup.Mask<TItem>(ReverbParameters));
                this.VolumetricLightings = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(VolumetricLightings, new SkyrimGroup.Mask<TItem>(VolumetricLightings));
                this.LensFlares = new MaskItem<TItem, SkyrimGroup.Mask<TItem>?>(LensFlares, new SkyrimGroup.Mask<TItem>(LensFlares));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, SkyrimModHeader.Mask<TItem>?>? ModHeader { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? GameSettings { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Keywords { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? LocationReferenceTypes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Actions { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? TextureSets { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Globals { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Classes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Factions { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? HeadParts { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Hairs { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Eyes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Races { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? SoundMarkers { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? AcousticSpaces { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? MagicEffects { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? LandscapeTextures { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? ObjectEffects { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Spells { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Scrolls { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Activators { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? TalkingActivators { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Armors { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Books { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Containers { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Doors { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Ingredients { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Lights { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? MiscItems { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? AlchemicalApparatuses { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Statics { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? MoveableStatics { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Grasses { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Trees { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Florae { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Furniture { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Weapons { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Ammunitions { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Npcs { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? LeveledNpcs { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Keys { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Ingestibles { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? IdleMarkers { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? ConstructibleObjects { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Projectiles { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Hazards { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? SoulGems { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? LeveledItems { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Weathers { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Climates { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? ShaderParticleGeometries { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? VisualEffects { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Regions { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? NavigationMeshInfoMaps { get; set; }
            public MaskItem<TItem, SkyrimListGroup.Mask<TItem>?>? Cells { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Worldspaces { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? DialogTopics { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Quests { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? IdleAnimations { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Packages { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? CombatStyles { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? LoadScreens { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? LeveledSpells { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? AnimatedObjects { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Waters { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? EffectShaders { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Explosions { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Debris { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? ImageSpaces { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? ImageSpaceAdapters { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? FormLists { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Perks { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? BodyParts { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? AddonNodes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? ActorValueInformation { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? CameraShots { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? CameraPaths { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? VoiceTypes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? MaterialTypes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Impacts { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? ImpactDataSets { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? ArmorAddons { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? EncounterZones { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Locations { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Messages { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? DefaultObjectManagers { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? LightingTemplates { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? MusicTypes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Footsteps { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? FootstepSets { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? StoryManagerBranchNodes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? StoryManagerQuestNodes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? StoryManagerEventNodes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? DialogBranches { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? MusicTracks { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? DialogViews { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? WordsOfPower { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Shouts { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? EquipTypes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Relationships { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Scenes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? AssociationTypes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Outfits { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? ArtObjects { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? MaterialObjects { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? MovementTypes { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? SoundDescriptors { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? DualCastData { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? SoundCategories { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? SoundOutputModels { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? CollisionLayers { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? Colors { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? ReverbParameters { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? VolumetricLightings { get; set; }
            public MaskItem<TItem, SkyrimGroup.Mask<TItem>?>? LensFlares { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ModHeader, rhs.ModHeader)) return false;
                if (!object.Equals(this.GameSettings, rhs.GameSettings)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.LocationReferenceTypes, rhs.LocationReferenceTypes)) return false;
                if (!object.Equals(this.Actions, rhs.Actions)) return false;
                if (!object.Equals(this.TextureSets, rhs.TextureSets)) return false;
                if (!object.Equals(this.Globals, rhs.Globals)) return false;
                if (!object.Equals(this.Classes, rhs.Classes)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.Hairs, rhs.Hairs)) return false;
                if (!object.Equals(this.Eyes, rhs.Eyes)) return false;
                if (!object.Equals(this.Races, rhs.Races)) return false;
                if (!object.Equals(this.SoundMarkers, rhs.SoundMarkers)) return false;
                if (!object.Equals(this.AcousticSpaces, rhs.AcousticSpaces)) return false;
                if (!object.Equals(this.MagicEffects, rhs.MagicEffects)) return false;
                if (!object.Equals(this.LandscapeTextures, rhs.LandscapeTextures)) return false;
                if (!object.Equals(this.ObjectEffects, rhs.ObjectEffects)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Scrolls, rhs.Scrolls)) return false;
                if (!object.Equals(this.Activators, rhs.Activators)) return false;
                if (!object.Equals(this.TalkingActivators, rhs.TalkingActivators)) return false;
                if (!object.Equals(this.Armors, rhs.Armors)) return false;
                if (!object.Equals(this.Books, rhs.Books)) return false;
                if (!object.Equals(this.Containers, rhs.Containers)) return false;
                if (!object.Equals(this.Doors, rhs.Doors)) return false;
                if (!object.Equals(this.Ingredients, rhs.Ingredients)) return false;
                if (!object.Equals(this.Lights, rhs.Lights)) return false;
                if (!object.Equals(this.MiscItems, rhs.MiscItems)) return false;
                if (!object.Equals(this.AlchemicalApparatuses, rhs.AlchemicalApparatuses)) return false;
                if (!object.Equals(this.Statics, rhs.Statics)) return false;
                if (!object.Equals(this.MoveableStatics, rhs.MoveableStatics)) return false;
                if (!object.Equals(this.Grasses, rhs.Grasses)) return false;
                if (!object.Equals(this.Trees, rhs.Trees)) return false;
                if (!object.Equals(this.Florae, rhs.Florae)) return false;
                if (!object.Equals(this.Furniture, rhs.Furniture)) return false;
                if (!object.Equals(this.Weapons, rhs.Weapons)) return false;
                if (!object.Equals(this.Ammunitions, rhs.Ammunitions)) return false;
                if (!object.Equals(this.Npcs, rhs.Npcs)) return false;
                if (!object.Equals(this.LeveledNpcs, rhs.LeveledNpcs)) return false;
                if (!object.Equals(this.Keys, rhs.Keys)) return false;
                if (!object.Equals(this.Ingestibles, rhs.Ingestibles)) return false;
                if (!object.Equals(this.IdleMarkers, rhs.IdleMarkers)) return false;
                if (!object.Equals(this.ConstructibleObjects, rhs.ConstructibleObjects)) return false;
                if (!object.Equals(this.Projectiles, rhs.Projectiles)) return false;
                if (!object.Equals(this.Hazards, rhs.Hazards)) return false;
                if (!object.Equals(this.SoulGems, rhs.SoulGems)) return false;
                if (!object.Equals(this.LeveledItems, rhs.LeveledItems)) return false;
                if (!object.Equals(this.Weathers, rhs.Weathers)) return false;
                if (!object.Equals(this.Climates, rhs.Climates)) return false;
                if (!object.Equals(this.ShaderParticleGeometries, rhs.ShaderParticleGeometries)) return false;
                if (!object.Equals(this.VisualEffects, rhs.VisualEffects)) return false;
                if (!object.Equals(this.Regions, rhs.Regions)) return false;
                if (!object.Equals(this.NavigationMeshInfoMaps, rhs.NavigationMeshInfoMaps)) return false;
                if (!object.Equals(this.Cells, rhs.Cells)) return false;
                if (!object.Equals(this.Worldspaces, rhs.Worldspaces)) return false;
                if (!object.Equals(this.DialogTopics, rhs.DialogTopics)) return false;
                if (!object.Equals(this.Quests, rhs.Quests)) return false;
                if (!object.Equals(this.IdleAnimations, rhs.IdleAnimations)) return false;
                if (!object.Equals(this.Packages, rhs.Packages)) return false;
                if (!object.Equals(this.CombatStyles, rhs.CombatStyles)) return false;
                if (!object.Equals(this.LoadScreens, rhs.LoadScreens)) return false;
                if (!object.Equals(this.LeveledSpells, rhs.LeveledSpells)) return false;
                if (!object.Equals(this.AnimatedObjects, rhs.AnimatedObjects)) return false;
                if (!object.Equals(this.Waters, rhs.Waters)) return false;
                if (!object.Equals(this.EffectShaders, rhs.EffectShaders)) return false;
                if (!object.Equals(this.Explosions, rhs.Explosions)) return false;
                if (!object.Equals(this.Debris, rhs.Debris)) return false;
                if (!object.Equals(this.ImageSpaces, rhs.ImageSpaces)) return false;
                if (!object.Equals(this.ImageSpaceAdapters, rhs.ImageSpaceAdapters)) return false;
                if (!object.Equals(this.FormLists, rhs.FormLists)) return false;
                if (!object.Equals(this.Perks, rhs.Perks)) return false;
                if (!object.Equals(this.BodyParts, rhs.BodyParts)) return false;
                if (!object.Equals(this.AddonNodes, rhs.AddonNodes)) return false;
                if (!object.Equals(this.ActorValueInformation, rhs.ActorValueInformation)) return false;
                if (!object.Equals(this.CameraShots, rhs.CameraShots)) return false;
                if (!object.Equals(this.CameraPaths, rhs.CameraPaths)) return false;
                if (!object.Equals(this.VoiceTypes, rhs.VoiceTypes)) return false;
                if (!object.Equals(this.MaterialTypes, rhs.MaterialTypes)) return false;
                if (!object.Equals(this.Impacts, rhs.Impacts)) return false;
                if (!object.Equals(this.ImpactDataSets, rhs.ImpactDataSets)) return false;
                if (!object.Equals(this.ArmorAddons, rhs.ArmorAddons)) return false;
                if (!object.Equals(this.EncounterZones, rhs.EncounterZones)) return false;
                if (!object.Equals(this.Locations, rhs.Locations)) return false;
                if (!object.Equals(this.Messages, rhs.Messages)) return false;
                if (!object.Equals(this.DefaultObjectManagers, rhs.DefaultObjectManagers)) return false;
                if (!object.Equals(this.LightingTemplates, rhs.LightingTemplates)) return false;
                if (!object.Equals(this.MusicTypes, rhs.MusicTypes)) return false;
                if (!object.Equals(this.Footsteps, rhs.Footsteps)) return false;
                if (!object.Equals(this.FootstepSets, rhs.FootstepSets)) return false;
                if (!object.Equals(this.StoryManagerBranchNodes, rhs.StoryManagerBranchNodes)) return false;
                if (!object.Equals(this.StoryManagerQuestNodes, rhs.StoryManagerQuestNodes)) return false;
                if (!object.Equals(this.StoryManagerEventNodes, rhs.StoryManagerEventNodes)) return false;
                if (!object.Equals(this.DialogBranches, rhs.DialogBranches)) return false;
                if (!object.Equals(this.MusicTracks, rhs.MusicTracks)) return false;
                if (!object.Equals(this.DialogViews, rhs.DialogViews)) return false;
                if (!object.Equals(this.WordsOfPower, rhs.WordsOfPower)) return false;
                if (!object.Equals(this.Shouts, rhs.Shouts)) return false;
                if (!object.Equals(this.EquipTypes, rhs.EquipTypes)) return false;
                if (!object.Equals(this.Relationships, rhs.Relationships)) return false;
                if (!object.Equals(this.Scenes, rhs.Scenes)) return false;
                if (!object.Equals(this.AssociationTypes, rhs.AssociationTypes)) return false;
                if (!object.Equals(this.Outfits, rhs.Outfits)) return false;
                if (!object.Equals(this.ArtObjects, rhs.ArtObjects)) return false;
                if (!object.Equals(this.MaterialObjects, rhs.MaterialObjects)) return false;
                if (!object.Equals(this.MovementTypes, rhs.MovementTypes)) return false;
                if (!object.Equals(this.SoundDescriptors, rhs.SoundDescriptors)) return false;
                if (!object.Equals(this.DualCastData, rhs.DualCastData)) return false;
                if (!object.Equals(this.SoundCategories, rhs.SoundCategories)) return false;
                if (!object.Equals(this.SoundOutputModels, rhs.SoundOutputModels)) return false;
                if (!object.Equals(this.CollisionLayers, rhs.CollisionLayers)) return false;
                if (!object.Equals(this.Colors, rhs.Colors)) return false;
                if (!object.Equals(this.ReverbParameters, rhs.ReverbParameters)) return false;
                if (!object.Equals(this.VolumetricLightings, rhs.VolumetricLightings)) return false;
                if (!object.Equals(this.LensFlares, rhs.LensFlares)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ModHeader);
                hash.Add(this.GameSettings);
                hash.Add(this.Keywords);
                hash.Add(this.LocationReferenceTypes);
                hash.Add(this.Actions);
                hash.Add(this.TextureSets);
                hash.Add(this.Globals);
                hash.Add(this.Classes);
                hash.Add(this.Factions);
                hash.Add(this.HeadParts);
                hash.Add(this.Hairs);
                hash.Add(this.Eyes);
                hash.Add(this.Races);
                hash.Add(this.SoundMarkers);
                hash.Add(this.AcousticSpaces);
                hash.Add(this.MagicEffects);
                hash.Add(this.LandscapeTextures);
                hash.Add(this.ObjectEffects);
                hash.Add(this.Spells);
                hash.Add(this.Scrolls);
                hash.Add(this.Activators);
                hash.Add(this.TalkingActivators);
                hash.Add(this.Armors);
                hash.Add(this.Books);
                hash.Add(this.Containers);
                hash.Add(this.Doors);
                hash.Add(this.Ingredients);
                hash.Add(this.Lights);
                hash.Add(this.MiscItems);
                hash.Add(this.AlchemicalApparatuses);
                hash.Add(this.Statics);
                hash.Add(this.MoveableStatics);
                hash.Add(this.Grasses);
                hash.Add(this.Trees);
                hash.Add(this.Florae);
                hash.Add(this.Furniture);
                hash.Add(this.Weapons);
                hash.Add(this.Ammunitions);
                hash.Add(this.Npcs);
                hash.Add(this.LeveledNpcs);
                hash.Add(this.Keys);
                hash.Add(this.Ingestibles);
                hash.Add(this.IdleMarkers);
                hash.Add(this.ConstructibleObjects);
                hash.Add(this.Projectiles);
                hash.Add(this.Hazards);
                hash.Add(this.SoulGems);
                hash.Add(this.LeveledItems);
                hash.Add(this.Weathers);
                hash.Add(this.Climates);
                hash.Add(this.ShaderParticleGeometries);
                hash.Add(this.VisualEffects);
                hash.Add(this.Regions);
                hash.Add(this.NavigationMeshInfoMaps);
                hash.Add(this.Cells);
                hash.Add(this.Worldspaces);
                hash.Add(this.DialogTopics);
                hash.Add(this.Quests);
                hash.Add(this.IdleAnimations);
                hash.Add(this.Packages);
                hash.Add(this.CombatStyles);
                hash.Add(this.LoadScreens);
                hash.Add(this.LeveledSpells);
                hash.Add(this.AnimatedObjects);
                hash.Add(this.Waters);
                hash.Add(this.EffectShaders);
                hash.Add(this.Explosions);
                hash.Add(this.Debris);
                hash.Add(this.ImageSpaces);
                hash.Add(this.ImageSpaceAdapters);
                hash.Add(this.FormLists);
                hash.Add(this.Perks);
                hash.Add(this.BodyParts);
                hash.Add(this.AddonNodes);
                hash.Add(this.ActorValueInformation);
                hash.Add(this.CameraShots);
                hash.Add(this.CameraPaths);
                hash.Add(this.VoiceTypes);
                hash.Add(this.MaterialTypes);
                hash.Add(this.Impacts);
                hash.Add(this.ImpactDataSets);
                hash.Add(this.ArmorAddons);
                hash.Add(this.EncounterZones);
                hash.Add(this.Locations);
                hash.Add(this.Messages);
                hash.Add(this.DefaultObjectManagers);
                hash.Add(this.LightingTemplates);
                hash.Add(this.MusicTypes);
                hash.Add(this.Footsteps);
                hash.Add(this.FootstepSets);
                hash.Add(this.StoryManagerBranchNodes);
                hash.Add(this.StoryManagerQuestNodes);
                hash.Add(this.StoryManagerEventNodes);
                hash.Add(this.DialogBranches);
                hash.Add(this.MusicTracks);
                hash.Add(this.DialogViews);
                hash.Add(this.WordsOfPower);
                hash.Add(this.Shouts);
                hash.Add(this.EquipTypes);
                hash.Add(this.Relationships);
                hash.Add(this.Scenes);
                hash.Add(this.AssociationTypes);
                hash.Add(this.Outfits);
                hash.Add(this.ArtObjects);
                hash.Add(this.MaterialObjects);
                hash.Add(this.MovementTypes);
                hash.Add(this.SoundDescriptors);
                hash.Add(this.DualCastData);
                hash.Add(this.SoundCategories);
                hash.Add(this.SoundOutputModels);
                hash.Add(this.CollisionLayers);
                hash.Add(this.Colors);
                hash.Add(this.ReverbParameters);
                hash.Add(this.VolumetricLightings);
                hash.Add(this.LensFlares);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (!eval(this.ModHeader.Overall)) return false;
                    if (this.ModHeader.Specific != null && !this.ModHeader.Specific.All(eval)) return false;
                }
                if (GameSettings != null)
                {
                    if (!eval(this.GameSettings.Overall)) return false;
                    if (this.GameSettings.Specific != null && !this.GameSettings.Specific.All(eval)) return false;
                }
                if (Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null && !this.Keywords.Specific.All(eval)) return false;
                }
                if (LocationReferenceTypes != null)
                {
                    if (!eval(this.LocationReferenceTypes.Overall)) return false;
                    if (this.LocationReferenceTypes.Specific != null && !this.LocationReferenceTypes.Specific.All(eval)) return false;
                }
                if (Actions != null)
                {
                    if (!eval(this.Actions.Overall)) return false;
                    if (this.Actions.Specific != null && !this.Actions.Specific.All(eval)) return false;
                }
                if (TextureSets != null)
                {
                    if (!eval(this.TextureSets.Overall)) return false;
                    if (this.TextureSets.Specific != null && !this.TextureSets.Specific.All(eval)) return false;
                }
                if (Globals != null)
                {
                    if (!eval(this.Globals.Overall)) return false;
                    if (this.Globals.Specific != null && !this.Globals.Specific.All(eval)) return false;
                }
                if (Classes != null)
                {
                    if (!eval(this.Classes.Overall)) return false;
                    if (this.Classes.Specific != null && !this.Classes.Specific.All(eval)) return false;
                }
                if (Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null && !this.Factions.Specific.All(eval)) return false;
                }
                if (HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null && !this.HeadParts.Specific.All(eval)) return false;
                }
                if (Hairs != null)
                {
                    if (!eval(this.Hairs.Overall)) return false;
                    if (this.Hairs.Specific != null && !this.Hairs.Specific.All(eval)) return false;
                }
                if (Eyes != null)
                {
                    if (!eval(this.Eyes.Overall)) return false;
                    if (this.Eyes.Specific != null && !this.Eyes.Specific.All(eval)) return false;
                }
                if (Races != null)
                {
                    if (!eval(this.Races.Overall)) return false;
                    if (this.Races.Specific != null && !this.Races.Specific.All(eval)) return false;
                }
                if (SoundMarkers != null)
                {
                    if (!eval(this.SoundMarkers.Overall)) return false;
                    if (this.SoundMarkers.Specific != null && !this.SoundMarkers.Specific.All(eval)) return false;
                }
                if (AcousticSpaces != null)
                {
                    if (!eval(this.AcousticSpaces.Overall)) return false;
                    if (this.AcousticSpaces.Specific != null && !this.AcousticSpaces.Specific.All(eval)) return false;
                }
                if (MagicEffects != null)
                {
                    if (!eval(this.MagicEffects.Overall)) return false;
                    if (this.MagicEffects.Specific != null && !this.MagicEffects.Specific.All(eval)) return false;
                }
                if (LandscapeTextures != null)
                {
                    if (!eval(this.LandscapeTextures.Overall)) return false;
                    if (this.LandscapeTextures.Specific != null && !this.LandscapeTextures.Specific.All(eval)) return false;
                }
                if (ObjectEffects != null)
                {
                    if (!eval(this.ObjectEffects.Overall)) return false;
                    if (this.ObjectEffects.Specific != null && !this.ObjectEffects.Specific.All(eval)) return false;
                }
                if (Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null && !this.Spells.Specific.All(eval)) return false;
                }
                if (Scrolls != null)
                {
                    if (!eval(this.Scrolls.Overall)) return false;
                    if (this.Scrolls.Specific != null && !this.Scrolls.Specific.All(eval)) return false;
                }
                if (Activators != null)
                {
                    if (!eval(this.Activators.Overall)) return false;
                    if (this.Activators.Specific != null && !this.Activators.Specific.All(eval)) return false;
                }
                if (TalkingActivators != null)
                {
                    if (!eval(this.TalkingActivators.Overall)) return false;
                    if (this.TalkingActivators.Specific != null && !this.TalkingActivators.Specific.All(eval)) return false;
                }
                if (Armors != null)
                {
                    if (!eval(this.Armors.Overall)) return false;
                    if (this.Armors.Specific != null && !this.Armors.Specific.All(eval)) return false;
                }
                if (Books != null)
                {
                    if (!eval(this.Books.Overall)) return false;
                    if (this.Books.Specific != null && !this.Books.Specific.All(eval)) return false;
                }
                if (Containers != null)
                {
                    if (!eval(this.Containers.Overall)) return false;
                    if (this.Containers.Specific != null && !this.Containers.Specific.All(eval)) return false;
                }
                if (Doors != null)
                {
                    if (!eval(this.Doors.Overall)) return false;
                    if (this.Doors.Specific != null && !this.Doors.Specific.All(eval)) return false;
                }
                if (Ingredients != null)
                {
                    if (!eval(this.Ingredients.Overall)) return false;
                    if (this.Ingredients.Specific != null && !this.Ingredients.Specific.All(eval)) return false;
                }
                if (Lights != null)
                {
                    if (!eval(this.Lights.Overall)) return false;
                    if (this.Lights.Specific != null && !this.Lights.Specific.All(eval)) return false;
                }
                if (MiscItems != null)
                {
                    if (!eval(this.MiscItems.Overall)) return false;
                    if (this.MiscItems.Specific != null && !this.MiscItems.Specific.All(eval)) return false;
                }
                if (AlchemicalApparatuses != null)
                {
                    if (!eval(this.AlchemicalApparatuses.Overall)) return false;
                    if (this.AlchemicalApparatuses.Specific != null && !this.AlchemicalApparatuses.Specific.All(eval)) return false;
                }
                if (Statics != null)
                {
                    if (!eval(this.Statics.Overall)) return false;
                    if (this.Statics.Specific != null && !this.Statics.Specific.All(eval)) return false;
                }
                if (MoveableStatics != null)
                {
                    if (!eval(this.MoveableStatics.Overall)) return false;
                    if (this.MoveableStatics.Specific != null && !this.MoveableStatics.Specific.All(eval)) return false;
                }
                if (Grasses != null)
                {
                    if (!eval(this.Grasses.Overall)) return false;
                    if (this.Grasses.Specific != null && !this.Grasses.Specific.All(eval)) return false;
                }
                if (Trees != null)
                {
                    if (!eval(this.Trees.Overall)) return false;
                    if (this.Trees.Specific != null && !this.Trees.Specific.All(eval)) return false;
                }
                if (Florae != null)
                {
                    if (!eval(this.Florae.Overall)) return false;
                    if (this.Florae.Specific != null && !this.Florae.Specific.All(eval)) return false;
                }
                if (Furniture != null)
                {
                    if (!eval(this.Furniture.Overall)) return false;
                    if (this.Furniture.Specific != null && !this.Furniture.Specific.All(eval)) return false;
                }
                if (Weapons != null)
                {
                    if (!eval(this.Weapons.Overall)) return false;
                    if (this.Weapons.Specific != null && !this.Weapons.Specific.All(eval)) return false;
                }
                if (Ammunitions != null)
                {
                    if (!eval(this.Ammunitions.Overall)) return false;
                    if (this.Ammunitions.Specific != null && !this.Ammunitions.Specific.All(eval)) return false;
                }
                if (Npcs != null)
                {
                    if (!eval(this.Npcs.Overall)) return false;
                    if (this.Npcs.Specific != null && !this.Npcs.Specific.All(eval)) return false;
                }
                if (LeveledNpcs != null)
                {
                    if (!eval(this.LeveledNpcs.Overall)) return false;
                    if (this.LeveledNpcs.Specific != null && !this.LeveledNpcs.Specific.All(eval)) return false;
                }
                if (Keys != null)
                {
                    if (!eval(this.Keys.Overall)) return false;
                    if (this.Keys.Specific != null && !this.Keys.Specific.All(eval)) return false;
                }
                if (Ingestibles != null)
                {
                    if (!eval(this.Ingestibles.Overall)) return false;
                    if (this.Ingestibles.Specific != null && !this.Ingestibles.Specific.All(eval)) return false;
                }
                if (IdleMarkers != null)
                {
                    if (!eval(this.IdleMarkers.Overall)) return false;
                    if (this.IdleMarkers.Specific != null && !this.IdleMarkers.Specific.All(eval)) return false;
                }
                if (ConstructibleObjects != null)
                {
                    if (!eval(this.ConstructibleObjects.Overall)) return false;
                    if (this.ConstructibleObjects.Specific != null && !this.ConstructibleObjects.Specific.All(eval)) return false;
                }
                if (Projectiles != null)
                {
                    if (!eval(this.Projectiles.Overall)) return false;
                    if (this.Projectiles.Specific != null && !this.Projectiles.Specific.All(eval)) return false;
                }
                if (Hazards != null)
                {
                    if (!eval(this.Hazards.Overall)) return false;
                    if (this.Hazards.Specific != null && !this.Hazards.Specific.All(eval)) return false;
                }
                if (SoulGems != null)
                {
                    if (!eval(this.SoulGems.Overall)) return false;
                    if (this.SoulGems.Specific != null && !this.SoulGems.Specific.All(eval)) return false;
                }
                if (LeveledItems != null)
                {
                    if (!eval(this.LeveledItems.Overall)) return false;
                    if (this.LeveledItems.Specific != null && !this.LeveledItems.Specific.All(eval)) return false;
                }
                if (Weathers != null)
                {
                    if (!eval(this.Weathers.Overall)) return false;
                    if (this.Weathers.Specific != null && !this.Weathers.Specific.All(eval)) return false;
                }
                if (Climates != null)
                {
                    if (!eval(this.Climates.Overall)) return false;
                    if (this.Climates.Specific != null && !this.Climates.Specific.All(eval)) return false;
                }
                if (ShaderParticleGeometries != null)
                {
                    if (!eval(this.ShaderParticleGeometries.Overall)) return false;
                    if (this.ShaderParticleGeometries.Specific != null && !this.ShaderParticleGeometries.Specific.All(eval)) return false;
                }
                if (VisualEffects != null)
                {
                    if (!eval(this.VisualEffects.Overall)) return false;
                    if (this.VisualEffects.Specific != null && !this.VisualEffects.Specific.All(eval)) return false;
                }
                if (Regions != null)
                {
                    if (!eval(this.Regions.Overall)) return false;
                    if (this.Regions.Specific != null && !this.Regions.Specific.All(eval)) return false;
                }
                if (NavigationMeshInfoMaps != null)
                {
                    if (!eval(this.NavigationMeshInfoMaps.Overall)) return false;
                    if (this.NavigationMeshInfoMaps.Specific != null && !this.NavigationMeshInfoMaps.Specific.All(eval)) return false;
                }
                if (Cells != null)
                {
                    if (!eval(this.Cells.Overall)) return false;
                    if (this.Cells.Specific != null && !this.Cells.Specific.All(eval)) return false;
                }
                if (Worldspaces != null)
                {
                    if (!eval(this.Worldspaces.Overall)) return false;
                    if (this.Worldspaces.Specific != null && !this.Worldspaces.Specific.All(eval)) return false;
                }
                if (DialogTopics != null)
                {
                    if (!eval(this.DialogTopics.Overall)) return false;
                    if (this.DialogTopics.Specific != null && !this.DialogTopics.Specific.All(eval)) return false;
                }
                if (Quests != null)
                {
                    if (!eval(this.Quests.Overall)) return false;
                    if (this.Quests.Specific != null && !this.Quests.Specific.All(eval)) return false;
                }
                if (IdleAnimations != null)
                {
                    if (!eval(this.IdleAnimations.Overall)) return false;
                    if (this.IdleAnimations.Specific != null && !this.IdleAnimations.Specific.All(eval)) return false;
                }
                if (Packages != null)
                {
                    if (!eval(this.Packages.Overall)) return false;
                    if (this.Packages.Specific != null && !this.Packages.Specific.All(eval)) return false;
                }
                if (CombatStyles != null)
                {
                    if (!eval(this.CombatStyles.Overall)) return false;
                    if (this.CombatStyles.Specific != null && !this.CombatStyles.Specific.All(eval)) return false;
                }
                if (LoadScreens != null)
                {
                    if (!eval(this.LoadScreens.Overall)) return false;
                    if (this.LoadScreens.Specific != null && !this.LoadScreens.Specific.All(eval)) return false;
                }
                if (LeveledSpells != null)
                {
                    if (!eval(this.LeveledSpells.Overall)) return false;
                    if (this.LeveledSpells.Specific != null && !this.LeveledSpells.Specific.All(eval)) return false;
                }
                if (AnimatedObjects != null)
                {
                    if (!eval(this.AnimatedObjects.Overall)) return false;
                    if (this.AnimatedObjects.Specific != null && !this.AnimatedObjects.Specific.All(eval)) return false;
                }
                if (Waters != null)
                {
                    if (!eval(this.Waters.Overall)) return false;
                    if (this.Waters.Specific != null && !this.Waters.Specific.All(eval)) return false;
                }
                if (EffectShaders != null)
                {
                    if (!eval(this.EffectShaders.Overall)) return false;
                    if (this.EffectShaders.Specific != null && !this.EffectShaders.Specific.All(eval)) return false;
                }
                if (Explosions != null)
                {
                    if (!eval(this.Explosions.Overall)) return false;
                    if (this.Explosions.Specific != null && !this.Explosions.Specific.All(eval)) return false;
                }
                if (Debris != null)
                {
                    if (!eval(this.Debris.Overall)) return false;
                    if (this.Debris.Specific != null && !this.Debris.Specific.All(eval)) return false;
                }
                if (ImageSpaces != null)
                {
                    if (!eval(this.ImageSpaces.Overall)) return false;
                    if (this.ImageSpaces.Specific != null && !this.ImageSpaces.Specific.All(eval)) return false;
                }
                if (ImageSpaceAdapters != null)
                {
                    if (!eval(this.ImageSpaceAdapters.Overall)) return false;
                    if (this.ImageSpaceAdapters.Specific != null && !this.ImageSpaceAdapters.Specific.All(eval)) return false;
                }
                if (FormLists != null)
                {
                    if (!eval(this.FormLists.Overall)) return false;
                    if (this.FormLists.Specific != null && !this.FormLists.Specific.All(eval)) return false;
                }
                if (Perks != null)
                {
                    if (!eval(this.Perks.Overall)) return false;
                    if (this.Perks.Specific != null && !this.Perks.Specific.All(eval)) return false;
                }
                if (BodyParts != null)
                {
                    if (!eval(this.BodyParts.Overall)) return false;
                    if (this.BodyParts.Specific != null && !this.BodyParts.Specific.All(eval)) return false;
                }
                if (AddonNodes != null)
                {
                    if (!eval(this.AddonNodes.Overall)) return false;
                    if (this.AddonNodes.Specific != null && !this.AddonNodes.Specific.All(eval)) return false;
                }
                if (ActorValueInformation != null)
                {
                    if (!eval(this.ActorValueInformation.Overall)) return false;
                    if (this.ActorValueInformation.Specific != null && !this.ActorValueInformation.Specific.All(eval)) return false;
                }
                if (CameraShots != null)
                {
                    if (!eval(this.CameraShots.Overall)) return false;
                    if (this.CameraShots.Specific != null && !this.CameraShots.Specific.All(eval)) return false;
                }
                if (CameraPaths != null)
                {
                    if (!eval(this.CameraPaths.Overall)) return false;
                    if (this.CameraPaths.Specific != null && !this.CameraPaths.Specific.All(eval)) return false;
                }
                if (VoiceTypes != null)
                {
                    if (!eval(this.VoiceTypes.Overall)) return false;
                    if (this.VoiceTypes.Specific != null && !this.VoiceTypes.Specific.All(eval)) return false;
                }
                if (MaterialTypes != null)
                {
                    if (!eval(this.MaterialTypes.Overall)) return false;
                    if (this.MaterialTypes.Specific != null && !this.MaterialTypes.Specific.All(eval)) return false;
                }
                if (Impacts != null)
                {
                    if (!eval(this.Impacts.Overall)) return false;
                    if (this.Impacts.Specific != null && !this.Impacts.Specific.All(eval)) return false;
                }
                if (ImpactDataSets != null)
                {
                    if (!eval(this.ImpactDataSets.Overall)) return false;
                    if (this.ImpactDataSets.Specific != null && !this.ImpactDataSets.Specific.All(eval)) return false;
                }
                if (ArmorAddons != null)
                {
                    if (!eval(this.ArmorAddons.Overall)) return false;
                    if (this.ArmorAddons.Specific != null && !this.ArmorAddons.Specific.All(eval)) return false;
                }
                if (EncounterZones != null)
                {
                    if (!eval(this.EncounterZones.Overall)) return false;
                    if (this.EncounterZones.Specific != null && !this.EncounterZones.Specific.All(eval)) return false;
                }
                if (Locations != null)
                {
                    if (!eval(this.Locations.Overall)) return false;
                    if (this.Locations.Specific != null && !this.Locations.Specific.All(eval)) return false;
                }
                if (Messages != null)
                {
                    if (!eval(this.Messages.Overall)) return false;
                    if (this.Messages.Specific != null && !this.Messages.Specific.All(eval)) return false;
                }
                if (DefaultObjectManagers != null)
                {
                    if (!eval(this.DefaultObjectManagers.Overall)) return false;
                    if (this.DefaultObjectManagers.Specific != null && !this.DefaultObjectManagers.Specific.All(eval)) return false;
                }
                if (LightingTemplates != null)
                {
                    if (!eval(this.LightingTemplates.Overall)) return false;
                    if (this.LightingTemplates.Specific != null && !this.LightingTemplates.Specific.All(eval)) return false;
                }
                if (MusicTypes != null)
                {
                    if (!eval(this.MusicTypes.Overall)) return false;
                    if (this.MusicTypes.Specific != null && !this.MusicTypes.Specific.All(eval)) return false;
                }
                if (Footsteps != null)
                {
                    if (!eval(this.Footsteps.Overall)) return false;
                    if (this.Footsteps.Specific != null && !this.Footsteps.Specific.All(eval)) return false;
                }
                if (FootstepSets != null)
                {
                    if (!eval(this.FootstepSets.Overall)) return false;
                    if (this.FootstepSets.Specific != null && !this.FootstepSets.Specific.All(eval)) return false;
                }
                if (StoryManagerBranchNodes != null)
                {
                    if (!eval(this.StoryManagerBranchNodes.Overall)) return false;
                    if (this.StoryManagerBranchNodes.Specific != null && !this.StoryManagerBranchNodes.Specific.All(eval)) return false;
                }
                if (StoryManagerQuestNodes != null)
                {
                    if (!eval(this.StoryManagerQuestNodes.Overall)) return false;
                    if (this.StoryManagerQuestNodes.Specific != null && !this.StoryManagerQuestNodes.Specific.All(eval)) return false;
                }
                if (StoryManagerEventNodes != null)
                {
                    if (!eval(this.StoryManagerEventNodes.Overall)) return false;
                    if (this.StoryManagerEventNodes.Specific != null && !this.StoryManagerEventNodes.Specific.All(eval)) return false;
                }
                if (DialogBranches != null)
                {
                    if (!eval(this.DialogBranches.Overall)) return false;
                    if (this.DialogBranches.Specific != null && !this.DialogBranches.Specific.All(eval)) return false;
                }
                if (MusicTracks != null)
                {
                    if (!eval(this.MusicTracks.Overall)) return false;
                    if (this.MusicTracks.Specific != null && !this.MusicTracks.Specific.All(eval)) return false;
                }
                if (DialogViews != null)
                {
                    if (!eval(this.DialogViews.Overall)) return false;
                    if (this.DialogViews.Specific != null && !this.DialogViews.Specific.All(eval)) return false;
                }
                if (WordsOfPower != null)
                {
                    if (!eval(this.WordsOfPower.Overall)) return false;
                    if (this.WordsOfPower.Specific != null && !this.WordsOfPower.Specific.All(eval)) return false;
                }
                if (Shouts != null)
                {
                    if (!eval(this.Shouts.Overall)) return false;
                    if (this.Shouts.Specific != null && !this.Shouts.Specific.All(eval)) return false;
                }
                if (EquipTypes != null)
                {
                    if (!eval(this.EquipTypes.Overall)) return false;
                    if (this.EquipTypes.Specific != null && !this.EquipTypes.Specific.All(eval)) return false;
                }
                if (Relationships != null)
                {
                    if (!eval(this.Relationships.Overall)) return false;
                    if (this.Relationships.Specific != null && !this.Relationships.Specific.All(eval)) return false;
                }
                if (Scenes != null)
                {
                    if (!eval(this.Scenes.Overall)) return false;
                    if (this.Scenes.Specific != null && !this.Scenes.Specific.All(eval)) return false;
                }
                if (AssociationTypes != null)
                {
                    if (!eval(this.AssociationTypes.Overall)) return false;
                    if (this.AssociationTypes.Specific != null && !this.AssociationTypes.Specific.All(eval)) return false;
                }
                if (Outfits != null)
                {
                    if (!eval(this.Outfits.Overall)) return false;
                    if (this.Outfits.Specific != null && !this.Outfits.Specific.All(eval)) return false;
                }
                if (ArtObjects != null)
                {
                    if (!eval(this.ArtObjects.Overall)) return false;
                    if (this.ArtObjects.Specific != null && !this.ArtObjects.Specific.All(eval)) return false;
                }
                if (MaterialObjects != null)
                {
                    if (!eval(this.MaterialObjects.Overall)) return false;
                    if (this.MaterialObjects.Specific != null && !this.MaterialObjects.Specific.All(eval)) return false;
                }
                if (MovementTypes != null)
                {
                    if (!eval(this.MovementTypes.Overall)) return false;
                    if (this.MovementTypes.Specific != null && !this.MovementTypes.Specific.All(eval)) return false;
                }
                if (SoundDescriptors != null)
                {
                    if (!eval(this.SoundDescriptors.Overall)) return false;
                    if (this.SoundDescriptors.Specific != null && !this.SoundDescriptors.Specific.All(eval)) return false;
                }
                if (DualCastData != null)
                {
                    if (!eval(this.DualCastData.Overall)) return false;
                    if (this.DualCastData.Specific != null && !this.DualCastData.Specific.All(eval)) return false;
                }
                if (SoundCategories != null)
                {
                    if (!eval(this.SoundCategories.Overall)) return false;
                    if (this.SoundCategories.Specific != null && !this.SoundCategories.Specific.All(eval)) return false;
                }
                if (SoundOutputModels != null)
                {
                    if (!eval(this.SoundOutputModels.Overall)) return false;
                    if (this.SoundOutputModels.Specific != null && !this.SoundOutputModels.Specific.All(eval)) return false;
                }
                if (CollisionLayers != null)
                {
                    if (!eval(this.CollisionLayers.Overall)) return false;
                    if (this.CollisionLayers.Specific != null && !this.CollisionLayers.Specific.All(eval)) return false;
                }
                if (Colors != null)
                {
                    if (!eval(this.Colors.Overall)) return false;
                    if (this.Colors.Specific != null && !this.Colors.Specific.All(eval)) return false;
                }
                if (ReverbParameters != null)
                {
                    if (!eval(this.ReverbParameters.Overall)) return false;
                    if (this.ReverbParameters.Specific != null && !this.ReverbParameters.Specific.All(eval)) return false;
                }
                if (VolumetricLightings != null)
                {
                    if (!eval(this.VolumetricLightings.Overall)) return false;
                    if (this.VolumetricLightings.Specific != null && !this.VolumetricLightings.Specific.All(eval)) return false;
                }
                if (LensFlares != null)
                {
                    if (!eval(this.LensFlares.Overall)) return false;
                    if (this.LensFlares.Specific != null && !this.LensFlares.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (ModHeader != null)
                {
                    if (eval(this.ModHeader.Overall)) return true;
                    if (this.ModHeader.Specific != null && this.ModHeader.Specific.Any(eval)) return true;
                }
                if (GameSettings != null)
                {
                    if (eval(this.GameSettings.Overall)) return true;
                    if (this.GameSettings.Specific != null && this.GameSettings.Specific.Any(eval)) return true;
                }
                if (Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null && this.Keywords.Specific.Any(eval)) return true;
                }
                if (LocationReferenceTypes != null)
                {
                    if (eval(this.LocationReferenceTypes.Overall)) return true;
                    if (this.LocationReferenceTypes.Specific != null && this.LocationReferenceTypes.Specific.Any(eval)) return true;
                }
                if (Actions != null)
                {
                    if (eval(this.Actions.Overall)) return true;
                    if (this.Actions.Specific != null && this.Actions.Specific.Any(eval)) return true;
                }
                if (TextureSets != null)
                {
                    if (eval(this.TextureSets.Overall)) return true;
                    if (this.TextureSets.Specific != null && this.TextureSets.Specific.Any(eval)) return true;
                }
                if (Globals != null)
                {
                    if (eval(this.Globals.Overall)) return true;
                    if (this.Globals.Specific != null && this.Globals.Specific.Any(eval)) return true;
                }
                if (Classes != null)
                {
                    if (eval(this.Classes.Overall)) return true;
                    if (this.Classes.Specific != null && this.Classes.Specific.Any(eval)) return true;
                }
                if (Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null && this.Factions.Specific.Any(eval)) return true;
                }
                if (HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null && this.HeadParts.Specific.Any(eval)) return true;
                }
                if (Hairs != null)
                {
                    if (eval(this.Hairs.Overall)) return true;
                    if (this.Hairs.Specific != null && this.Hairs.Specific.Any(eval)) return true;
                }
                if (Eyes != null)
                {
                    if (eval(this.Eyes.Overall)) return true;
                    if (this.Eyes.Specific != null && this.Eyes.Specific.Any(eval)) return true;
                }
                if (Races != null)
                {
                    if (eval(this.Races.Overall)) return true;
                    if (this.Races.Specific != null && this.Races.Specific.Any(eval)) return true;
                }
                if (SoundMarkers != null)
                {
                    if (eval(this.SoundMarkers.Overall)) return true;
                    if (this.SoundMarkers.Specific != null && this.SoundMarkers.Specific.Any(eval)) return true;
                }
                if (AcousticSpaces != null)
                {
                    if (eval(this.AcousticSpaces.Overall)) return true;
                    if (this.AcousticSpaces.Specific != null && this.AcousticSpaces.Specific.Any(eval)) return true;
                }
                if (MagicEffects != null)
                {
                    if (eval(this.MagicEffects.Overall)) return true;
                    if (this.MagicEffects.Specific != null && this.MagicEffects.Specific.Any(eval)) return true;
                }
                if (LandscapeTextures != null)
                {
                    if (eval(this.LandscapeTextures.Overall)) return true;
                    if (this.LandscapeTextures.Specific != null && this.LandscapeTextures.Specific.Any(eval)) return true;
                }
                if (ObjectEffects != null)
                {
                    if (eval(this.ObjectEffects.Overall)) return true;
                    if (this.ObjectEffects.Specific != null && this.ObjectEffects.Specific.Any(eval)) return true;
                }
                if (Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null && this.Spells.Specific.Any(eval)) return true;
                }
                if (Scrolls != null)
                {
                    if (eval(this.Scrolls.Overall)) return true;
                    if (this.Scrolls.Specific != null && this.Scrolls.Specific.Any(eval)) return true;
                }
                if (Activators != null)
                {
                    if (eval(this.Activators.Overall)) return true;
                    if (this.Activators.Specific != null && this.Activators.Specific.Any(eval)) return true;
                }
                if (TalkingActivators != null)
                {
                    if (eval(this.TalkingActivators.Overall)) return true;
                    if (this.TalkingActivators.Specific != null && this.TalkingActivators.Specific.Any(eval)) return true;
                }
                if (Armors != null)
                {
                    if (eval(this.Armors.Overall)) return true;
                    if (this.Armors.Specific != null && this.Armors.Specific.Any(eval)) return true;
                }
                if (Books != null)
                {
                    if (eval(this.Books.Overall)) return true;
                    if (this.Books.Specific != null && this.Books.Specific.Any(eval)) return true;
                }
                if (Containers != null)
                {
                    if (eval(this.Containers.Overall)) return true;
                    if (this.Containers.Specific != null && this.Containers.Specific.Any(eval)) return true;
                }
                if (Doors != null)
                {
                    if (eval(this.Doors.Overall)) return true;
                    if (this.Doors.Specific != null && this.Doors.Specific.Any(eval)) return true;
                }
                if (Ingredients != null)
                {
                    if (eval(this.Ingredients.Overall)) return true;
                    if (this.Ingredients.Specific != null && this.Ingredients.Specific.Any(eval)) return true;
                }
                if (Lights != null)
                {
                    if (eval(this.Lights.Overall)) return true;
                    if (this.Lights.Specific != null && this.Lights.Specific.Any(eval)) return true;
                }
                if (MiscItems != null)
                {
                    if (eval(this.MiscItems.Overall)) return true;
                    if (this.MiscItems.Specific != null && this.MiscItems.Specific.Any(eval)) return true;
                }
                if (AlchemicalApparatuses != null)
                {
                    if (eval(this.AlchemicalApparatuses.Overall)) return true;
                    if (this.AlchemicalApparatuses.Specific != null && this.AlchemicalApparatuses.Specific.Any(eval)) return true;
                }
                if (Statics != null)
                {
                    if (eval(this.Statics.Overall)) return true;
                    if (this.Statics.Specific != null && this.Statics.Specific.Any(eval)) return true;
                }
                if (MoveableStatics != null)
                {
                    if (eval(this.MoveableStatics.Overall)) return true;
                    if (this.MoveableStatics.Specific != null && this.MoveableStatics.Specific.Any(eval)) return true;
                }
                if (Grasses != null)
                {
                    if (eval(this.Grasses.Overall)) return true;
                    if (this.Grasses.Specific != null && this.Grasses.Specific.Any(eval)) return true;
                }
                if (Trees != null)
                {
                    if (eval(this.Trees.Overall)) return true;
                    if (this.Trees.Specific != null && this.Trees.Specific.Any(eval)) return true;
                }
                if (Florae != null)
                {
                    if (eval(this.Florae.Overall)) return true;
                    if (this.Florae.Specific != null && this.Florae.Specific.Any(eval)) return true;
                }
                if (Furniture != null)
                {
                    if (eval(this.Furniture.Overall)) return true;
                    if (this.Furniture.Specific != null && this.Furniture.Specific.Any(eval)) return true;
                }
                if (Weapons != null)
                {
                    if (eval(this.Weapons.Overall)) return true;
                    if (this.Weapons.Specific != null && this.Weapons.Specific.Any(eval)) return true;
                }
                if (Ammunitions != null)
                {
                    if (eval(this.Ammunitions.Overall)) return true;
                    if (this.Ammunitions.Specific != null && this.Ammunitions.Specific.Any(eval)) return true;
                }
                if (Npcs != null)
                {
                    if (eval(this.Npcs.Overall)) return true;
                    if (this.Npcs.Specific != null && this.Npcs.Specific.Any(eval)) return true;
                }
                if (LeveledNpcs != null)
                {
                    if (eval(this.LeveledNpcs.Overall)) return true;
                    if (this.LeveledNpcs.Specific != null && this.LeveledNpcs.Specific.Any(eval)) return true;
                }
                if (Keys != null)
                {
                    if (eval(this.Keys.Overall)) return true;
                    if (this.Keys.Specific != null && this.Keys.Specific.Any(eval)) return true;
                }
                if (Ingestibles != null)
                {
                    if (eval(this.Ingestibles.Overall)) return true;
                    if (this.Ingestibles.Specific != null && this.Ingestibles.Specific.Any(eval)) return true;
                }
                if (IdleMarkers != null)
                {
                    if (eval(this.IdleMarkers.Overall)) return true;
                    if (this.IdleMarkers.Specific != null && this.IdleMarkers.Specific.Any(eval)) return true;
                }
                if (ConstructibleObjects != null)
                {
                    if (eval(this.ConstructibleObjects.Overall)) return true;
                    if (this.ConstructibleObjects.Specific != null && this.ConstructibleObjects.Specific.Any(eval)) return true;
                }
                if (Projectiles != null)
                {
                    if (eval(this.Projectiles.Overall)) return true;
                    if (this.Projectiles.Specific != null && this.Projectiles.Specific.Any(eval)) return true;
                }
                if (Hazards != null)
                {
                    if (eval(this.Hazards.Overall)) return true;
                    if (this.Hazards.Specific != null && this.Hazards.Specific.Any(eval)) return true;
                }
                if (SoulGems != null)
                {
                    if (eval(this.SoulGems.Overall)) return true;
                    if (this.SoulGems.Specific != null && this.SoulGems.Specific.Any(eval)) return true;
                }
                if (LeveledItems != null)
                {
                    if (eval(this.LeveledItems.Overall)) return true;
                    if (this.LeveledItems.Specific != null && this.LeveledItems.Specific.Any(eval)) return true;
                }
                if (Weathers != null)
                {
                    if (eval(this.Weathers.Overall)) return true;
                    if (this.Weathers.Specific != null && this.Weathers.Specific.Any(eval)) return true;
                }
                if (Climates != null)
                {
                    if (eval(this.Climates.Overall)) return true;
                    if (this.Climates.Specific != null && this.Climates.Specific.Any(eval)) return true;
                }
                if (ShaderParticleGeometries != null)
                {
                    if (eval(this.ShaderParticleGeometries.Overall)) return true;
                    if (this.ShaderParticleGeometries.Specific != null && this.ShaderParticleGeometries.Specific.Any(eval)) return true;
                }
                if (VisualEffects != null)
                {
                    if (eval(this.VisualEffects.Overall)) return true;
                    if (this.VisualEffects.Specific != null && this.VisualEffects.Specific.Any(eval)) return true;
                }
                if (Regions != null)
                {
                    if (eval(this.Regions.Overall)) return true;
                    if (this.Regions.Specific != null && this.Regions.Specific.Any(eval)) return true;
                }
                if (NavigationMeshInfoMaps != null)
                {
                    if (eval(this.NavigationMeshInfoMaps.Overall)) return true;
                    if (this.NavigationMeshInfoMaps.Specific != null && this.NavigationMeshInfoMaps.Specific.Any(eval)) return true;
                }
                if (Cells != null)
                {
                    if (eval(this.Cells.Overall)) return true;
                    if (this.Cells.Specific != null && this.Cells.Specific.Any(eval)) return true;
                }
                if (Worldspaces != null)
                {
                    if (eval(this.Worldspaces.Overall)) return true;
                    if (this.Worldspaces.Specific != null && this.Worldspaces.Specific.Any(eval)) return true;
                }
                if (DialogTopics != null)
                {
                    if (eval(this.DialogTopics.Overall)) return true;
                    if (this.DialogTopics.Specific != null && this.DialogTopics.Specific.Any(eval)) return true;
                }
                if (Quests != null)
                {
                    if (eval(this.Quests.Overall)) return true;
                    if (this.Quests.Specific != null && this.Quests.Specific.Any(eval)) return true;
                }
                if (IdleAnimations != null)
                {
                    if (eval(this.IdleAnimations.Overall)) return true;
                    if (this.IdleAnimations.Specific != null && this.IdleAnimations.Specific.Any(eval)) return true;
                }
                if (Packages != null)
                {
                    if (eval(this.Packages.Overall)) return true;
                    if (this.Packages.Specific != null && this.Packages.Specific.Any(eval)) return true;
                }
                if (CombatStyles != null)
                {
                    if (eval(this.CombatStyles.Overall)) return true;
                    if (this.CombatStyles.Specific != null && this.CombatStyles.Specific.Any(eval)) return true;
                }
                if (LoadScreens != null)
                {
                    if (eval(this.LoadScreens.Overall)) return true;
                    if (this.LoadScreens.Specific != null && this.LoadScreens.Specific.Any(eval)) return true;
                }
                if (LeveledSpells != null)
                {
                    if (eval(this.LeveledSpells.Overall)) return true;
                    if (this.LeveledSpells.Specific != null && this.LeveledSpells.Specific.Any(eval)) return true;
                }
                if (AnimatedObjects != null)
                {
                    if (eval(this.AnimatedObjects.Overall)) return true;
                    if (this.AnimatedObjects.Specific != null && this.AnimatedObjects.Specific.Any(eval)) return true;
                }
                if (Waters != null)
                {
                    if (eval(this.Waters.Overall)) return true;
                    if (this.Waters.Specific != null && this.Waters.Specific.Any(eval)) return true;
                }
                if (EffectShaders != null)
                {
                    if (eval(this.EffectShaders.Overall)) return true;
                    if (this.EffectShaders.Specific != null && this.EffectShaders.Specific.Any(eval)) return true;
                }
                if (Explosions != null)
                {
                    if (eval(this.Explosions.Overall)) return true;
                    if (this.Explosions.Specific != null && this.Explosions.Specific.Any(eval)) return true;
                }
                if (Debris != null)
                {
                    if (eval(this.Debris.Overall)) return true;
                    if (this.Debris.Specific != null && this.Debris.Specific.Any(eval)) return true;
                }
                if (ImageSpaces != null)
                {
                    if (eval(this.ImageSpaces.Overall)) return true;
                    if (this.ImageSpaces.Specific != null && this.ImageSpaces.Specific.Any(eval)) return true;
                }
                if (ImageSpaceAdapters != null)
                {
                    if (eval(this.ImageSpaceAdapters.Overall)) return true;
                    if (this.ImageSpaceAdapters.Specific != null && this.ImageSpaceAdapters.Specific.Any(eval)) return true;
                }
                if (FormLists != null)
                {
                    if (eval(this.FormLists.Overall)) return true;
                    if (this.FormLists.Specific != null && this.FormLists.Specific.Any(eval)) return true;
                }
                if (Perks != null)
                {
                    if (eval(this.Perks.Overall)) return true;
                    if (this.Perks.Specific != null && this.Perks.Specific.Any(eval)) return true;
                }
                if (BodyParts != null)
                {
                    if (eval(this.BodyParts.Overall)) return true;
                    if (this.BodyParts.Specific != null && this.BodyParts.Specific.Any(eval)) return true;
                }
                if (AddonNodes != null)
                {
                    if (eval(this.AddonNodes.Overall)) return true;
                    if (this.AddonNodes.Specific != null && this.AddonNodes.Specific.Any(eval)) return true;
                }
                if (ActorValueInformation != null)
                {
                    if (eval(this.ActorValueInformation.Overall)) return true;
                    if (this.ActorValueInformation.Specific != null && this.ActorValueInformation.Specific.Any(eval)) return true;
                }
                if (CameraShots != null)
                {
                    if (eval(this.CameraShots.Overall)) return true;
                    if (this.CameraShots.Specific != null && this.CameraShots.Specific.Any(eval)) return true;
                }
                if (CameraPaths != null)
                {
                    if (eval(this.CameraPaths.Overall)) return true;
                    if (this.CameraPaths.Specific != null && this.CameraPaths.Specific.Any(eval)) return true;
                }
                if (VoiceTypes != null)
                {
                    if (eval(this.VoiceTypes.Overall)) return true;
                    if (this.VoiceTypes.Specific != null && this.VoiceTypes.Specific.Any(eval)) return true;
                }
                if (MaterialTypes != null)
                {
                    if (eval(this.MaterialTypes.Overall)) return true;
                    if (this.MaterialTypes.Specific != null && this.MaterialTypes.Specific.Any(eval)) return true;
                }
                if (Impacts != null)
                {
                    if (eval(this.Impacts.Overall)) return true;
                    if (this.Impacts.Specific != null && this.Impacts.Specific.Any(eval)) return true;
                }
                if (ImpactDataSets != null)
                {
                    if (eval(this.ImpactDataSets.Overall)) return true;
                    if (this.ImpactDataSets.Specific != null && this.ImpactDataSets.Specific.Any(eval)) return true;
                }
                if (ArmorAddons != null)
                {
                    if (eval(this.ArmorAddons.Overall)) return true;
                    if (this.ArmorAddons.Specific != null && this.ArmorAddons.Specific.Any(eval)) return true;
                }
                if (EncounterZones != null)
                {
                    if (eval(this.EncounterZones.Overall)) return true;
                    if (this.EncounterZones.Specific != null && this.EncounterZones.Specific.Any(eval)) return true;
                }
                if (Locations != null)
                {
                    if (eval(this.Locations.Overall)) return true;
                    if (this.Locations.Specific != null && this.Locations.Specific.Any(eval)) return true;
                }
                if (Messages != null)
                {
                    if (eval(this.Messages.Overall)) return true;
                    if (this.Messages.Specific != null && this.Messages.Specific.Any(eval)) return true;
                }
                if (DefaultObjectManagers != null)
                {
                    if (eval(this.DefaultObjectManagers.Overall)) return true;
                    if (this.DefaultObjectManagers.Specific != null && this.DefaultObjectManagers.Specific.Any(eval)) return true;
                }
                if (LightingTemplates != null)
                {
                    if (eval(this.LightingTemplates.Overall)) return true;
                    if (this.LightingTemplates.Specific != null && this.LightingTemplates.Specific.Any(eval)) return true;
                }
                if (MusicTypes != null)
                {
                    if (eval(this.MusicTypes.Overall)) return true;
                    if (this.MusicTypes.Specific != null && this.MusicTypes.Specific.Any(eval)) return true;
                }
                if (Footsteps != null)
                {
                    if (eval(this.Footsteps.Overall)) return true;
                    if (this.Footsteps.Specific != null && this.Footsteps.Specific.Any(eval)) return true;
                }
                if (FootstepSets != null)
                {
                    if (eval(this.FootstepSets.Overall)) return true;
                    if (this.FootstepSets.Specific != null && this.FootstepSets.Specific.Any(eval)) return true;
                }
                if (StoryManagerBranchNodes != null)
                {
                    if (eval(this.StoryManagerBranchNodes.Overall)) return true;
                    if (this.StoryManagerBranchNodes.Specific != null && this.StoryManagerBranchNodes.Specific.Any(eval)) return true;
                }
                if (StoryManagerQuestNodes != null)
                {
                    if (eval(this.StoryManagerQuestNodes.Overall)) return true;
                    if (this.StoryManagerQuestNodes.Specific != null && this.StoryManagerQuestNodes.Specific.Any(eval)) return true;
                }
                if (StoryManagerEventNodes != null)
                {
                    if (eval(this.StoryManagerEventNodes.Overall)) return true;
                    if (this.StoryManagerEventNodes.Specific != null && this.StoryManagerEventNodes.Specific.Any(eval)) return true;
                }
                if (DialogBranches != null)
                {
                    if (eval(this.DialogBranches.Overall)) return true;
                    if (this.DialogBranches.Specific != null && this.DialogBranches.Specific.Any(eval)) return true;
                }
                if (MusicTracks != null)
                {
                    if (eval(this.MusicTracks.Overall)) return true;
                    if (this.MusicTracks.Specific != null && this.MusicTracks.Specific.Any(eval)) return true;
                }
                if (DialogViews != null)
                {
                    if (eval(this.DialogViews.Overall)) return true;
                    if (this.DialogViews.Specific != null && this.DialogViews.Specific.Any(eval)) return true;
                }
                if (WordsOfPower != null)
                {
                    if (eval(this.WordsOfPower.Overall)) return true;
                    if (this.WordsOfPower.Specific != null && this.WordsOfPower.Specific.Any(eval)) return true;
                }
                if (Shouts != null)
                {
                    if (eval(this.Shouts.Overall)) return true;
                    if (this.Shouts.Specific != null && this.Shouts.Specific.Any(eval)) return true;
                }
                if (EquipTypes != null)
                {
                    if (eval(this.EquipTypes.Overall)) return true;
                    if (this.EquipTypes.Specific != null && this.EquipTypes.Specific.Any(eval)) return true;
                }
                if (Relationships != null)
                {
                    if (eval(this.Relationships.Overall)) return true;
                    if (this.Relationships.Specific != null && this.Relationships.Specific.Any(eval)) return true;
                }
                if (Scenes != null)
                {
                    if (eval(this.Scenes.Overall)) return true;
                    if (this.Scenes.Specific != null && this.Scenes.Specific.Any(eval)) return true;
                }
                if (AssociationTypes != null)
                {
                    if (eval(this.AssociationTypes.Overall)) return true;
                    if (this.AssociationTypes.Specific != null && this.AssociationTypes.Specific.Any(eval)) return true;
                }
                if (Outfits != null)
                {
                    if (eval(this.Outfits.Overall)) return true;
                    if (this.Outfits.Specific != null && this.Outfits.Specific.Any(eval)) return true;
                }
                if (ArtObjects != null)
                {
                    if (eval(this.ArtObjects.Overall)) return true;
                    if (this.ArtObjects.Specific != null && this.ArtObjects.Specific.Any(eval)) return true;
                }
                if (MaterialObjects != null)
                {
                    if (eval(this.MaterialObjects.Overall)) return true;
                    if (this.MaterialObjects.Specific != null && this.MaterialObjects.Specific.Any(eval)) return true;
                }
                if (MovementTypes != null)
                {
                    if (eval(this.MovementTypes.Overall)) return true;
                    if (this.MovementTypes.Specific != null && this.MovementTypes.Specific.Any(eval)) return true;
                }
                if (SoundDescriptors != null)
                {
                    if (eval(this.SoundDescriptors.Overall)) return true;
                    if (this.SoundDescriptors.Specific != null && this.SoundDescriptors.Specific.Any(eval)) return true;
                }
                if (DualCastData != null)
                {
                    if (eval(this.DualCastData.Overall)) return true;
                    if (this.DualCastData.Specific != null && this.DualCastData.Specific.Any(eval)) return true;
                }
                if (SoundCategories != null)
                {
                    if (eval(this.SoundCategories.Overall)) return true;
                    if (this.SoundCategories.Specific != null && this.SoundCategories.Specific.Any(eval)) return true;
                }
                if (SoundOutputModels != null)
                {
                    if (eval(this.SoundOutputModels.Overall)) return true;
                    if (this.SoundOutputModels.Specific != null && this.SoundOutputModels.Specific.Any(eval)) return true;
                }
                if (CollisionLayers != null)
                {
                    if (eval(this.CollisionLayers.Overall)) return true;
                    if (this.CollisionLayers.Specific != null && this.CollisionLayers.Specific.Any(eval)) return true;
                }
                if (Colors != null)
                {
                    if (eval(this.Colors.Overall)) return true;
                    if (this.Colors.Specific != null && this.Colors.Specific.Any(eval)) return true;
                }
                if (ReverbParameters != null)
                {
                    if (eval(this.ReverbParameters.Overall)) return true;
                    if (this.ReverbParameters.Specific != null && this.ReverbParameters.Specific.Any(eval)) return true;
                }
                if (VolumetricLightings != null)
                {
                    if (eval(this.VolumetricLightings.Overall)) return true;
                    if (this.VolumetricLightings.Specific != null && this.VolumetricLightings.Specific.Any(eval)) return true;
                }
                if (LensFlares != null)
                {
                    if (eval(this.LensFlares.Overall)) return true;
                    if (this.LensFlares.Specific != null && this.LensFlares.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SkyrimMod.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ModHeader = this.ModHeader == null ? null : new MaskItem<R, SkyrimModHeader.Mask<R>?>(eval(this.ModHeader.Overall), this.ModHeader.Specific?.Translate(eval));
                obj.GameSettings = this.GameSettings == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.GameSettings.Overall), this.GameSettings.Specific?.Translate(eval));
                obj.Keywords = this.Keywords == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Keywords.Overall), this.Keywords.Specific?.Translate(eval));
                obj.LocationReferenceTypes = this.LocationReferenceTypes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.LocationReferenceTypes.Overall), this.LocationReferenceTypes.Specific?.Translate(eval));
                obj.Actions = this.Actions == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Actions.Overall), this.Actions.Specific?.Translate(eval));
                obj.TextureSets = this.TextureSets == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.TextureSets.Overall), this.TextureSets.Specific?.Translate(eval));
                obj.Globals = this.Globals == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Globals.Overall), this.Globals.Specific?.Translate(eval));
                obj.Classes = this.Classes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Classes.Overall), this.Classes.Specific?.Translate(eval));
                obj.Factions = this.Factions == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Factions.Overall), this.Factions.Specific?.Translate(eval));
                obj.HeadParts = this.HeadParts == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.HeadParts.Overall), this.HeadParts.Specific?.Translate(eval));
                obj.Hairs = this.Hairs == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Hairs.Overall), this.Hairs.Specific?.Translate(eval));
                obj.Eyes = this.Eyes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Eyes.Overall), this.Eyes.Specific?.Translate(eval));
                obj.Races = this.Races == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Races.Overall), this.Races.Specific?.Translate(eval));
                obj.SoundMarkers = this.SoundMarkers == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.SoundMarkers.Overall), this.SoundMarkers.Specific?.Translate(eval));
                obj.AcousticSpaces = this.AcousticSpaces == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.AcousticSpaces.Overall), this.AcousticSpaces.Specific?.Translate(eval));
                obj.MagicEffects = this.MagicEffects == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.MagicEffects.Overall), this.MagicEffects.Specific?.Translate(eval));
                obj.LandscapeTextures = this.LandscapeTextures == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.LandscapeTextures.Overall), this.LandscapeTextures.Specific?.Translate(eval));
                obj.ObjectEffects = this.ObjectEffects == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.ObjectEffects.Overall), this.ObjectEffects.Specific?.Translate(eval));
                obj.Spells = this.Spells == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Spells.Overall), this.Spells.Specific?.Translate(eval));
                obj.Scrolls = this.Scrolls == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Scrolls.Overall), this.Scrolls.Specific?.Translate(eval));
                obj.Activators = this.Activators == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Activators.Overall), this.Activators.Specific?.Translate(eval));
                obj.TalkingActivators = this.TalkingActivators == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.TalkingActivators.Overall), this.TalkingActivators.Specific?.Translate(eval));
                obj.Armors = this.Armors == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Armors.Overall), this.Armors.Specific?.Translate(eval));
                obj.Books = this.Books == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Books.Overall), this.Books.Specific?.Translate(eval));
                obj.Containers = this.Containers == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Containers.Overall), this.Containers.Specific?.Translate(eval));
                obj.Doors = this.Doors == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Doors.Overall), this.Doors.Specific?.Translate(eval));
                obj.Ingredients = this.Ingredients == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Ingredients.Overall), this.Ingredients.Specific?.Translate(eval));
                obj.Lights = this.Lights == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Lights.Overall), this.Lights.Specific?.Translate(eval));
                obj.MiscItems = this.MiscItems == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.MiscItems.Overall), this.MiscItems.Specific?.Translate(eval));
                obj.AlchemicalApparatuses = this.AlchemicalApparatuses == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.AlchemicalApparatuses.Overall), this.AlchemicalApparatuses.Specific?.Translate(eval));
                obj.Statics = this.Statics == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Statics.Overall), this.Statics.Specific?.Translate(eval));
                obj.MoveableStatics = this.MoveableStatics == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.MoveableStatics.Overall), this.MoveableStatics.Specific?.Translate(eval));
                obj.Grasses = this.Grasses == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Grasses.Overall), this.Grasses.Specific?.Translate(eval));
                obj.Trees = this.Trees == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Trees.Overall), this.Trees.Specific?.Translate(eval));
                obj.Florae = this.Florae == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Florae.Overall), this.Florae.Specific?.Translate(eval));
                obj.Furniture = this.Furniture == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Furniture.Overall), this.Furniture.Specific?.Translate(eval));
                obj.Weapons = this.Weapons == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Weapons.Overall), this.Weapons.Specific?.Translate(eval));
                obj.Ammunitions = this.Ammunitions == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Ammunitions.Overall), this.Ammunitions.Specific?.Translate(eval));
                obj.Npcs = this.Npcs == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Npcs.Overall), this.Npcs.Specific?.Translate(eval));
                obj.LeveledNpcs = this.LeveledNpcs == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.LeveledNpcs.Overall), this.LeveledNpcs.Specific?.Translate(eval));
                obj.Keys = this.Keys == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Keys.Overall), this.Keys.Specific?.Translate(eval));
                obj.Ingestibles = this.Ingestibles == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Ingestibles.Overall), this.Ingestibles.Specific?.Translate(eval));
                obj.IdleMarkers = this.IdleMarkers == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.IdleMarkers.Overall), this.IdleMarkers.Specific?.Translate(eval));
                obj.ConstructibleObjects = this.ConstructibleObjects == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.ConstructibleObjects.Overall), this.ConstructibleObjects.Specific?.Translate(eval));
                obj.Projectiles = this.Projectiles == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Projectiles.Overall), this.Projectiles.Specific?.Translate(eval));
                obj.Hazards = this.Hazards == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Hazards.Overall), this.Hazards.Specific?.Translate(eval));
                obj.SoulGems = this.SoulGems == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.SoulGems.Overall), this.SoulGems.Specific?.Translate(eval));
                obj.LeveledItems = this.LeveledItems == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.LeveledItems.Overall), this.LeveledItems.Specific?.Translate(eval));
                obj.Weathers = this.Weathers == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Weathers.Overall), this.Weathers.Specific?.Translate(eval));
                obj.Climates = this.Climates == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Climates.Overall), this.Climates.Specific?.Translate(eval));
                obj.ShaderParticleGeometries = this.ShaderParticleGeometries == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.ShaderParticleGeometries.Overall), this.ShaderParticleGeometries.Specific?.Translate(eval));
                obj.VisualEffects = this.VisualEffects == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.VisualEffects.Overall), this.VisualEffects.Specific?.Translate(eval));
                obj.Regions = this.Regions == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Regions.Overall), this.Regions.Specific?.Translate(eval));
                obj.NavigationMeshInfoMaps = this.NavigationMeshInfoMaps == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.NavigationMeshInfoMaps.Overall), this.NavigationMeshInfoMaps.Specific?.Translate(eval));
                obj.Cells = this.Cells == null ? null : new MaskItem<R, SkyrimListGroup.Mask<R>?>(eval(this.Cells.Overall), this.Cells.Specific?.Translate(eval));
                obj.Worldspaces = this.Worldspaces == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Worldspaces.Overall), this.Worldspaces.Specific?.Translate(eval));
                obj.DialogTopics = this.DialogTopics == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.DialogTopics.Overall), this.DialogTopics.Specific?.Translate(eval));
                obj.Quests = this.Quests == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Quests.Overall), this.Quests.Specific?.Translate(eval));
                obj.IdleAnimations = this.IdleAnimations == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.IdleAnimations.Overall), this.IdleAnimations.Specific?.Translate(eval));
                obj.Packages = this.Packages == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Packages.Overall), this.Packages.Specific?.Translate(eval));
                obj.CombatStyles = this.CombatStyles == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.CombatStyles.Overall), this.CombatStyles.Specific?.Translate(eval));
                obj.LoadScreens = this.LoadScreens == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.LoadScreens.Overall), this.LoadScreens.Specific?.Translate(eval));
                obj.LeveledSpells = this.LeveledSpells == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.LeveledSpells.Overall), this.LeveledSpells.Specific?.Translate(eval));
                obj.AnimatedObjects = this.AnimatedObjects == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.AnimatedObjects.Overall), this.AnimatedObjects.Specific?.Translate(eval));
                obj.Waters = this.Waters == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Waters.Overall), this.Waters.Specific?.Translate(eval));
                obj.EffectShaders = this.EffectShaders == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.EffectShaders.Overall), this.EffectShaders.Specific?.Translate(eval));
                obj.Explosions = this.Explosions == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Explosions.Overall), this.Explosions.Specific?.Translate(eval));
                obj.Debris = this.Debris == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Debris.Overall), this.Debris.Specific?.Translate(eval));
                obj.ImageSpaces = this.ImageSpaces == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.ImageSpaces.Overall), this.ImageSpaces.Specific?.Translate(eval));
                obj.ImageSpaceAdapters = this.ImageSpaceAdapters == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.ImageSpaceAdapters.Overall), this.ImageSpaceAdapters.Specific?.Translate(eval));
                obj.FormLists = this.FormLists == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.FormLists.Overall), this.FormLists.Specific?.Translate(eval));
                obj.Perks = this.Perks == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Perks.Overall), this.Perks.Specific?.Translate(eval));
                obj.BodyParts = this.BodyParts == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.BodyParts.Overall), this.BodyParts.Specific?.Translate(eval));
                obj.AddonNodes = this.AddonNodes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.AddonNodes.Overall), this.AddonNodes.Specific?.Translate(eval));
                obj.ActorValueInformation = this.ActorValueInformation == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.ActorValueInformation.Overall), this.ActorValueInformation.Specific?.Translate(eval));
                obj.CameraShots = this.CameraShots == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.CameraShots.Overall), this.CameraShots.Specific?.Translate(eval));
                obj.CameraPaths = this.CameraPaths == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.CameraPaths.Overall), this.CameraPaths.Specific?.Translate(eval));
                obj.VoiceTypes = this.VoiceTypes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.VoiceTypes.Overall), this.VoiceTypes.Specific?.Translate(eval));
                obj.MaterialTypes = this.MaterialTypes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.MaterialTypes.Overall), this.MaterialTypes.Specific?.Translate(eval));
                obj.Impacts = this.Impacts == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Impacts.Overall), this.Impacts.Specific?.Translate(eval));
                obj.ImpactDataSets = this.ImpactDataSets == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.ImpactDataSets.Overall), this.ImpactDataSets.Specific?.Translate(eval));
                obj.ArmorAddons = this.ArmorAddons == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.ArmorAddons.Overall), this.ArmorAddons.Specific?.Translate(eval));
                obj.EncounterZones = this.EncounterZones == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.EncounterZones.Overall), this.EncounterZones.Specific?.Translate(eval));
                obj.Locations = this.Locations == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Locations.Overall), this.Locations.Specific?.Translate(eval));
                obj.Messages = this.Messages == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Messages.Overall), this.Messages.Specific?.Translate(eval));
                obj.DefaultObjectManagers = this.DefaultObjectManagers == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.DefaultObjectManagers.Overall), this.DefaultObjectManagers.Specific?.Translate(eval));
                obj.LightingTemplates = this.LightingTemplates == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.LightingTemplates.Overall), this.LightingTemplates.Specific?.Translate(eval));
                obj.MusicTypes = this.MusicTypes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.MusicTypes.Overall), this.MusicTypes.Specific?.Translate(eval));
                obj.Footsteps = this.Footsteps == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Footsteps.Overall), this.Footsteps.Specific?.Translate(eval));
                obj.FootstepSets = this.FootstepSets == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.FootstepSets.Overall), this.FootstepSets.Specific?.Translate(eval));
                obj.StoryManagerBranchNodes = this.StoryManagerBranchNodes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.StoryManagerBranchNodes.Overall), this.StoryManagerBranchNodes.Specific?.Translate(eval));
                obj.StoryManagerQuestNodes = this.StoryManagerQuestNodes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.StoryManagerQuestNodes.Overall), this.StoryManagerQuestNodes.Specific?.Translate(eval));
                obj.StoryManagerEventNodes = this.StoryManagerEventNodes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.StoryManagerEventNodes.Overall), this.StoryManagerEventNodes.Specific?.Translate(eval));
                obj.DialogBranches = this.DialogBranches == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.DialogBranches.Overall), this.DialogBranches.Specific?.Translate(eval));
                obj.MusicTracks = this.MusicTracks == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.MusicTracks.Overall), this.MusicTracks.Specific?.Translate(eval));
                obj.DialogViews = this.DialogViews == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.DialogViews.Overall), this.DialogViews.Specific?.Translate(eval));
                obj.WordsOfPower = this.WordsOfPower == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.WordsOfPower.Overall), this.WordsOfPower.Specific?.Translate(eval));
                obj.Shouts = this.Shouts == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Shouts.Overall), this.Shouts.Specific?.Translate(eval));
                obj.EquipTypes = this.EquipTypes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.EquipTypes.Overall), this.EquipTypes.Specific?.Translate(eval));
                obj.Relationships = this.Relationships == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Relationships.Overall), this.Relationships.Specific?.Translate(eval));
                obj.Scenes = this.Scenes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Scenes.Overall), this.Scenes.Specific?.Translate(eval));
                obj.AssociationTypes = this.AssociationTypes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.AssociationTypes.Overall), this.AssociationTypes.Specific?.Translate(eval));
                obj.Outfits = this.Outfits == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Outfits.Overall), this.Outfits.Specific?.Translate(eval));
                obj.ArtObjects = this.ArtObjects == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.ArtObjects.Overall), this.ArtObjects.Specific?.Translate(eval));
                obj.MaterialObjects = this.MaterialObjects == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.MaterialObjects.Overall), this.MaterialObjects.Specific?.Translate(eval));
                obj.MovementTypes = this.MovementTypes == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.MovementTypes.Overall), this.MovementTypes.Specific?.Translate(eval));
                obj.SoundDescriptors = this.SoundDescriptors == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.SoundDescriptors.Overall), this.SoundDescriptors.Specific?.Translate(eval));
                obj.DualCastData = this.DualCastData == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.DualCastData.Overall), this.DualCastData.Specific?.Translate(eval));
                obj.SoundCategories = this.SoundCategories == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.SoundCategories.Overall), this.SoundCategories.Specific?.Translate(eval));
                obj.SoundOutputModels = this.SoundOutputModels == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.SoundOutputModels.Overall), this.SoundOutputModels.Specific?.Translate(eval));
                obj.CollisionLayers = this.CollisionLayers == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.CollisionLayers.Overall), this.CollisionLayers.Specific?.Translate(eval));
                obj.Colors = this.Colors == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.Colors.Overall), this.Colors.Specific?.Translate(eval));
                obj.ReverbParameters = this.ReverbParameters == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.ReverbParameters.Overall), this.ReverbParameters.Specific?.Translate(eval));
                obj.VolumetricLightings = this.VolumetricLightings == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.VolumetricLightings.Overall), this.VolumetricLightings.Specific?.Translate(eval));
                obj.LensFlares = this.LensFlares == null ? null : new MaskItem<R, SkyrimGroup.Mask<R>?>(eval(this.LensFlares.Overall), this.LensFlares.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SkyrimMod.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SkyrimMod.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SkyrimMod.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ModHeader?.Overall ?? true)
                    {
                        ModHeader?.Print(sb);
                    }
                    if (printMask?.GameSettings?.Overall ?? true)
                    {
                        GameSettings?.Print(sb);
                    }
                    if (printMask?.Keywords?.Overall ?? true)
                    {
                        Keywords?.Print(sb);
                    }
                    if (printMask?.LocationReferenceTypes?.Overall ?? true)
                    {
                        LocationReferenceTypes?.Print(sb);
                    }
                    if (printMask?.Actions?.Overall ?? true)
                    {
                        Actions?.Print(sb);
                    }
                    if (printMask?.TextureSets?.Overall ?? true)
                    {
                        TextureSets?.Print(sb);
                    }
                    if (printMask?.Globals?.Overall ?? true)
                    {
                        Globals?.Print(sb);
                    }
                    if (printMask?.Classes?.Overall ?? true)
                    {
                        Classes?.Print(sb);
                    }
                    if (printMask?.Factions?.Overall ?? true)
                    {
                        Factions?.Print(sb);
                    }
                    if (printMask?.HeadParts?.Overall ?? true)
                    {
                        HeadParts?.Print(sb);
                    }
                    if (printMask?.Hairs?.Overall ?? true)
                    {
                        Hairs?.Print(sb);
                    }
                    if (printMask?.Eyes?.Overall ?? true)
                    {
                        Eyes?.Print(sb);
                    }
                    if (printMask?.Races?.Overall ?? true)
                    {
                        Races?.Print(sb);
                    }
                    if (printMask?.SoundMarkers?.Overall ?? true)
                    {
                        SoundMarkers?.Print(sb);
                    }
                    if (printMask?.AcousticSpaces?.Overall ?? true)
                    {
                        AcousticSpaces?.Print(sb);
                    }
                    if (printMask?.MagicEffects?.Overall ?? true)
                    {
                        MagicEffects?.Print(sb);
                    }
                    if (printMask?.LandscapeTextures?.Overall ?? true)
                    {
                        LandscapeTextures?.Print(sb);
                    }
                    if (printMask?.ObjectEffects?.Overall ?? true)
                    {
                        ObjectEffects?.Print(sb);
                    }
                    if (printMask?.Spells?.Overall ?? true)
                    {
                        Spells?.Print(sb);
                    }
                    if (printMask?.Scrolls?.Overall ?? true)
                    {
                        Scrolls?.Print(sb);
                    }
                    if (printMask?.Activators?.Overall ?? true)
                    {
                        Activators?.Print(sb);
                    }
                    if (printMask?.TalkingActivators?.Overall ?? true)
                    {
                        TalkingActivators?.Print(sb);
                    }
                    if (printMask?.Armors?.Overall ?? true)
                    {
                        Armors?.Print(sb);
                    }
                    if (printMask?.Books?.Overall ?? true)
                    {
                        Books?.Print(sb);
                    }
                    if (printMask?.Containers?.Overall ?? true)
                    {
                        Containers?.Print(sb);
                    }
                    if (printMask?.Doors?.Overall ?? true)
                    {
                        Doors?.Print(sb);
                    }
                    if (printMask?.Ingredients?.Overall ?? true)
                    {
                        Ingredients?.Print(sb);
                    }
                    if (printMask?.Lights?.Overall ?? true)
                    {
                        Lights?.Print(sb);
                    }
                    if (printMask?.MiscItems?.Overall ?? true)
                    {
                        MiscItems?.Print(sb);
                    }
                    if (printMask?.AlchemicalApparatuses?.Overall ?? true)
                    {
                        AlchemicalApparatuses?.Print(sb);
                    }
                    if (printMask?.Statics?.Overall ?? true)
                    {
                        Statics?.Print(sb);
                    }
                    if (printMask?.MoveableStatics?.Overall ?? true)
                    {
                        MoveableStatics?.Print(sb);
                    }
                    if (printMask?.Grasses?.Overall ?? true)
                    {
                        Grasses?.Print(sb);
                    }
                    if (printMask?.Trees?.Overall ?? true)
                    {
                        Trees?.Print(sb);
                    }
                    if (printMask?.Florae?.Overall ?? true)
                    {
                        Florae?.Print(sb);
                    }
                    if (printMask?.Furniture?.Overall ?? true)
                    {
                        Furniture?.Print(sb);
                    }
                    if (printMask?.Weapons?.Overall ?? true)
                    {
                        Weapons?.Print(sb);
                    }
                    if (printMask?.Ammunitions?.Overall ?? true)
                    {
                        Ammunitions?.Print(sb);
                    }
                    if (printMask?.Npcs?.Overall ?? true)
                    {
                        Npcs?.Print(sb);
                    }
                    if (printMask?.LeveledNpcs?.Overall ?? true)
                    {
                        LeveledNpcs?.Print(sb);
                    }
                    if (printMask?.Keys?.Overall ?? true)
                    {
                        Keys?.Print(sb);
                    }
                    if (printMask?.Ingestibles?.Overall ?? true)
                    {
                        Ingestibles?.Print(sb);
                    }
                    if (printMask?.IdleMarkers?.Overall ?? true)
                    {
                        IdleMarkers?.Print(sb);
                    }
                    if (printMask?.ConstructibleObjects?.Overall ?? true)
                    {
                        ConstructibleObjects?.Print(sb);
                    }
                    if (printMask?.Projectiles?.Overall ?? true)
                    {
                        Projectiles?.Print(sb);
                    }
                    if (printMask?.Hazards?.Overall ?? true)
                    {
                        Hazards?.Print(sb);
                    }
                    if (printMask?.SoulGems?.Overall ?? true)
                    {
                        SoulGems?.Print(sb);
                    }
                    if (printMask?.LeveledItems?.Overall ?? true)
                    {
                        LeveledItems?.Print(sb);
                    }
                    if (printMask?.Weathers?.Overall ?? true)
                    {
                        Weathers?.Print(sb);
                    }
                    if (printMask?.Climates?.Overall ?? true)
                    {
                        Climates?.Print(sb);
                    }
                    if (printMask?.ShaderParticleGeometries?.Overall ?? true)
                    {
                        ShaderParticleGeometries?.Print(sb);
                    }
                    if (printMask?.VisualEffects?.Overall ?? true)
                    {
                        VisualEffects?.Print(sb);
                    }
                    if (printMask?.Regions?.Overall ?? true)
                    {
                        Regions?.Print(sb);
                    }
                    if (printMask?.NavigationMeshInfoMaps?.Overall ?? true)
                    {
                        NavigationMeshInfoMaps?.Print(sb);
                    }
                    if (printMask?.Cells?.Overall ?? true)
                    {
                        Cells?.Print(sb);
                    }
                    if (printMask?.Worldspaces?.Overall ?? true)
                    {
                        Worldspaces?.Print(sb);
                    }
                    if (printMask?.DialogTopics?.Overall ?? true)
                    {
                        DialogTopics?.Print(sb);
                    }
                    if (printMask?.Quests?.Overall ?? true)
                    {
                        Quests?.Print(sb);
                    }
                    if (printMask?.IdleAnimations?.Overall ?? true)
                    {
                        IdleAnimations?.Print(sb);
                    }
                    if (printMask?.Packages?.Overall ?? true)
                    {
                        Packages?.Print(sb);
                    }
                    if (printMask?.CombatStyles?.Overall ?? true)
                    {
                        CombatStyles?.Print(sb);
                    }
                    if (printMask?.LoadScreens?.Overall ?? true)
                    {
                        LoadScreens?.Print(sb);
                    }
                    if (printMask?.LeveledSpells?.Overall ?? true)
                    {
                        LeveledSpells?.Print(sb);
                    }
                    if (printMask?.AnimatedObjects?.Overall ?? true)
                    {
                        AnimatedObjects?.Print(sb);
                    }
                    if (printMask?.Waters?.Overall ?? true)
                    {
                        Waters?.Print(sb);
                    }
                    if (printMask?.EffectShaders?.Overall ?? true)
                    {
                        EffectShaders?.Print(sb);
                    }
                    if (printMask?.Explosions?.Overall ?? true)
                    {
                        Explosions?.Print(sb);
                    }
                    if (printMask?.Debris?.Overall ?? true)
                    {
                        Debris?.Print(sb);
                    }
                    if (printMask?.ImageSpaces?.Overall ?? true)
                    {
                        ImageSpaces?.Print(sb);
                    }
                    if (printMask?.ImageSpaceAdapters?.Overall ?? true)
                    {
                        ImageSpaceAdapters?.Print(sb);
                    }
                    if (printMask?.FormLists?.Overall ?? true)
                    {
                        FormLists?.Print(sb);
                    }
                    if (printMask?.Perks?.Overall ?? true)
                    {
                        Perks?.Print(sb);
                    }
                    if (printMask?.BodyParts?.Overall ?? true)
                    {
                        BodyParts?.Print(sb);
                    }
                    if (printMask?.AddonNodes?.Overall ?? true)
                    {
                        AddonNodes?.Print(sb);
                    }
                    if (printMask?.ActorValueInformation?.Overall ?? true)
                    {
                        ActorValueInformation?.Print(sb);
                    }
                    if (printMask?.CameraShots?.Overall ?? true)
                    {
                        CameraShots?.Print(sb);
                    }
                    if (printMask?.CameraPaths?.Overall ?? true)
                    {
                        CameraPaths?.Print(sb);
                    }
                    if (printMask?.VoiceTypes?.Overall ?? true)
                    {
                        VoiceTypes?.Print(sb);
                    }
                    if (printMask?.MaterialTypes?.Overall ?? true)
                    {
                        MaterialTypes?.Print(sb);
                    }
                    if (printMask?.Impacts?.Overall ?? true)
                    {
                        Impacts?.Print(sb);
                    }
                    if (printMask?.ImpactDataSets?.Overall ?? true)
                    {
                        ImpactDataSets?.Print(sb);
                    }
                    if (printMask?.ArmorAddons?.Overall ?? true)
                    {
                        ArmorAddons?.Print(sb);
                    }
                    if (printMask?.EncounterZones?.Overall ?? true)
                    {
                        EncounterZones?.Print(sb);
                    }
                    if (printMask?.Locations?.Overall ?? true)
                    {
                        Locations?.Print(sb);
                    }
                    if (printMask?.Messages?.Overall ?? true)
                    {
                        Messages?.Print(sb);
                    }
                    if (printMask?.DefaultObjectManagers?.Overall ?? true)
                    {
                        DefaultObjectManagers?.Print(sb);
                    }
                    if (printMask?.LightingTemplates?.Overall ?? true)
                    {
                        LightingTemplates?.Print(sb);
                    }
                    if (printMask?.MusicTypes?.Overall ?? true)
                    {
                        MusicTypes?.Print(sb);
                    }
                    if (printMask?.Footsteps?.Overall ?? true)
                    {
                        Footsteps?.Print(sb);
                    }
                    if (printMask?.FootstepSets?.Overall ?? true)
                    {
                        FootstepSets?.Print(sb);
                    }
                    if (printMask?.StoryManagerBranchNodes?.Overall ?? true)
                    {
                        StoryManagerBranchNodes?.Print(sb);
                    }
                    if (printMask?.StoryManagerQuestNodes?.Overall ?? true)
                    {
                        StoryManagerQuestNodes?.Print(sb);
                    }
                    if (printMask?.StoryManagerEventNodes?.Overall ?? true)
                    {
                        StoryManagerEventNodes?.Print(sb);
                    }
                    if (printMask?.DialogBranches?.Overall ?? true)
                    {
                        DialogBranches?.Print(sb);
                    }
                    if (printMask?.MusicTracks?.Overall ?? true)
                    {
                        MusicTracks?.Print(sb);
                    }
                    if (printMask?.DialogViews?.Overall ?? true)
                    {
                        DialogViews?.Print(sb);
                    }
                    if (printMask?.WordsOfPower?.Overall ?? true)
                    {
                        WordsOfPower?.Print(sb);
                    }
                    if (printMask?.Shouts?.Overall ?? true)
                    {
                        Shouts?.Print(sb);
                    }
                    if (printMask?.EquipTypes?.Overall ?? true)
                    {
                        EquipTypes?.Print(sb);
                    }
                    if (printMask?.Relationships?.Overall ?? true)
                    {
                        Relationships?.Print(sb);
                    }
                    if (printMask?.Scenes?.Overall ?? true)
                    {
                        Scenes?.Print(sb);
                    }
                    if (printMask?.AssociationTypes?.Overall ?? true)
                    {
                        AssociationTypes?.Print(sb);
                    }
                    if (printMask?.Outfits?.Overall ?? true)
                    {
                        Outfits?.Print(sb);
                    }
                    if (printMask?.ArtObjects?.Overall ?? true)
                    {
                        ArtObjects?.Print(sb);
                    }
                    if (printMask?.MaterialObjects?.Overall ?? true)
                    {
                        MaterialObjects?.Print(sb);
                    }
                    if (printMask?.MovementTypes?.Overall ?? true)
                    {
                        MovementTypes?.Print(sb);
                    }
                    if (printMask?.SoundDescriptors?.Overall ?? true)
                    {
                        SoundDescriptors?.Print(sb);
                    }
                    if (printMask?.DualCastData?.Overall ?? true)
                    {
                        DualCastData?.Print(sb);
                    }
                    if (printMask?.SoundCategories?.Overall ?? true)
                    {
                        SoundCategories?.Print(sb);
                    }
                    if (printMask?.SoundOutputModels?.Overall ?? true)
                    {
                        SoundOutputModels?.Print(sb);
                    }
                    if (printMask?.CollisionLayers?.Overall ?? true)
                    {
                        CollisionLayers?.Print(sb);
                    }
                    if (printMask?.Colors?.Overall ?? true)
                    {
                        Colors?.Print(sb);
                    }
                    if (printMask?.ReverbParameters?.Overall ?? true)
                    {
                        ReverbParameters?.Print(sb);
                    }
                    if (printMask?.VolumetricLightings?.Overall ?? true)
                    {
                        VolumetricLightings?.Print(sb);
                    }
                    if (printMask?.LensFlares?.Overall ?? true)
                    {
                        LensFlares?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public MaskItem<Exception?, SkyrimModHeader.ErrorMask?>? ModHeader;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<GameSetting.ErrorMask>?>? GameSettings;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Keyword.ErrorMask>?>? Keywords;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<LocationReferenceType.ErrorMask>?>? LocationReferenceTypes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ActionRecord.ErrorMask>?>? Actions;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<TextureSet.ErrorMask>?>? TextureSets;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Global.ErrorMask>?>? Globals;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Class.ErrorMask>?>? Classes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Faction.ErrorMask>?>? Factions;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<HeadPart.ErrorMask>?>? HeadParts;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Hair.ErrorMask>?>? Hairs;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Eyes.ErrorMask>?>? Eyes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Race.ErrorMask>?>? Races;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundMarker.ErrorMask>?>? SoundMarkers;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<AcousticSpace.ErrorMask>?>? AcousticSpaces;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<MagicEffect.ErrorMask>?>? MagicEffects;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<LandscapeTexture.ErrorMask>?>? LandscapeTextures;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ObjectEffect.ErrorMask>?>? ObjectEffects;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Spell.ErrorMask>?>? Spells;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Scroll.ErrorMask>?>? Scrolls;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Activator.ErrorMask>?>? Activators;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<TalkingActivator.ErrorMask>?>? TalkingActivators;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Armor.ErrorMask>?>? Armors;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Book.ErrorMask>?>? Books;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Container.ErrorMask>?>? Containers;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Door.ErrorMask>?>? Doors;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Ingredient.ErrorMask>?>? Ingredients;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Light.ErrorMask>?>? Lights;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<MiscItem.ErrorMask>?>? MiscItems;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<AlchemicalApparatus.ErrorMask>?>? AlchemicalApparatuses;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Static.ErrorMask>?>? Statics;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<MoveableStatic.ErrorMask>?>? MoveableStatics;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Grass.ErrorMask>?>? Grasses;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Tree.ErrorMask>?>? Trees;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Flora.ErrorMask>?>? Florae;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Furniture.ErrorMask>?>? Furniture;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Weapon.ErrorMask>?>? Weapons;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Ammunition.ErrorMask>?>? Ammunitions;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Npc.ErrorMask>?>? Npcs;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<LeveledNpc.ErrorMask>?>? LeveledNpcs;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Key.ErrorMask>?>? Keys;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Ingestible.ErrorMask>?>? Ingestibles;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<IdleMarker.ErrorMask>?>? IdleMarkers;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ConstructibleObject.ErrorMask>?>? ConstructibleObjects;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Projectile.ErrorMask>?>? Projectiles;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Hazard.ErrorMask>?>? Hazards;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<SoulGem.ErrorMask>?>? SoulGems;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<LeveledItem.ErrorMask>?>? LeveledItems;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Weather.ErrorMask>?>? Weathers;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Climate.ErrorMask>?>? Climates;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ShaderParticleGeometry.ErrorMask>?>? ShaderParticleGeometries;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<VisualEffect.ErrorMask>?>? VisualEffects;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Region.ErrorMask>?>? Regions;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>? NavigationMeshInfoMaps;
            public MaskItem<Exception?, SkyrimListGroup.ErrorMask<CellBlock.ErrorMask>?>? Cells;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Worldspace.ErrorMask>?>? Worldspaces;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<DialogTopic.ErrorMask>?>? DialogTopics;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Quest.ErrorMask>?>? Quests;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<IdleAnimation.ErrorMask>?>? IdleAnimations;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Package.ErrorMask>?>? Packages;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<CombatStyle.ErrorMask>?>? CombatStyles;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<LoadScreen.ErrorMask>?>? LoadScreens;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<LeveledSpell.ErrorMask>?>? LeveledSpells;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<AnimatedObject.ErrorMask>?>? AnimatedObjects;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Water.ErrorMask>?>? Waters;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<EffectShader.ErrorMask>?>? EffectShaders;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Explosion.ErrorMask>?>? Explosions;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Debris.ErrorMask>?>? Debris;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ImageSpace.ErrorMask>?>? ImageSpaces;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ImageSpaceAdapter.ErrorMask>?>? ImageSpaceAdapters;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<FormList.ErrorMask>?>? FormLists;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Perk.ErrorMask>?>? Perks;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<BodyPartData.ErrorMask>?>? BodyParts;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<AddonNode.ErrorMask>?>? AddonNodes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ActorValueInformation.ErrorMask>?>? ActorValueInformation;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<CameraShot.ErrorMask>?>? CameraShots;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<CameraPath.ErrorMask>?>? CameraPaths;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<VoiceType.ErrorMask>?>? VoiceTypes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<MaterialType.ErrorMask>?>? MaterialTypes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Impact.ErrorMask>?>? Impacts;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ImpactDataSet.ErrorMask>?>? ImpactDataSets;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ArmorAddon.ErrorMask>?>? ArmorAddons;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<EncounterZone.ErrorMask>?>? EncounterZones;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Location.ErrorMask>?>? Locations;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Message.ErrorMask>?>? Messages;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<DefaultObjectManager.ErrorMask>?>? DefaultObjectManagers;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<LightingTemplate.ErrorMask>?>? LightingTemplates;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<MusicType.ErrorMask>?>? MusicTypes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Footstep.ErrorMask>?>? Footsteps;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<FootstepSet.ErrorMask>?>? FootstepSets;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<StoryManagerBranchNode.ErrorMask>?>? StoryManagerBranchNodes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<StoryManagerQuestNode.ErrorMask>?>? StoryManagerQuestNodes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<StoryManagerEventNode.ErrorMask>?>? StoryManagerEventNodes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<DialogBranch.ErrorMask>?>? DialogBranches;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<MusicTrack.ErrorMask>?>? MusicTracks;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<DialogView.ErrorMask>?>? DialogViews;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<WordOfPower.ErrorMask>?>? WordsOfPower;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Shout.ErrorMask>?>? Shouts;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<EquipType.ErrorMask>?>? EquipTypes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Relationship.ErrorMask>?>? Relationships;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Scene.ErrorMask>?>? Scenes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<AssociationType.ErrorMask>?>? AssociationTypes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<Outfit.ErrorMask>?>? Outfits;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ArtObject.ErrorMask>?>? ArtObjects;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<MaterialObject.ErrorMask>?>? MaterialObjects;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<MovementType.ErrorMask>?>? MovementTypes;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundDescriptor.ErrorMask>?>? SoundDescriptors;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<DualCastData.ErrorMask>?>? DualCastData;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundCategory.ErrorMask>?>? SoundCategories;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundOutputModel.ErrorMask>?>? SoundOutputModels;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<CollisionLayer.ErrorMask>?>? CollisionLayers;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ColorRecord.ErrorMask>?>? Colors;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<ReverbParameters.ErrorMask>?>? ReverbParameters;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<VolumetricLighting.ErrorMask>?>? VolumetricLightings;
            public MaskItem<Exception?, SkyrimGroup.ErrorMask<LensFlare.ErrorMask>?>? LensFlares;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMod_FieldIndex.ModHeader:
                        return ModHeader;
                    case SkyrimMod_FieldIndex.GameSettings:
                        return GameSettings;
                    case SkyrimMod_FieldIndex.Keywords:
                        return Keywords;
                    case SkyrimMod_FieldIndex.LocationReferenceTypes:
                        return LocationReferenceTypes;
                    case SkyrimMod_FieldIndex.Actions:
                        return Actions;
                    case SkyrimMod_FieldIndex.TextureSets:
                        return TextureSets;
                    case SkyrimMod_FieldIndex.Globals:
                        return Globals;
                    case SkyrimMod_FieldIndex.Classes:
                        return Classes;
                    case SkyrimMod_FieldIndex.Factions:
                        return Factions;
                    case SkyrimMod_FieldIndex.HeadParts:
                        return HeadParts;
                    case SkyrimMod_FieldIndex.Hairs:
                        return Hairs;
                    case SkyrimMod_FieldIndex.Eyes:
                        return Eyes;
                    case SkyrimMod_FieldIndex.Races:
                        return Races;
                    case SkyrimMod_FieldIndex.SoundMarkers:
                        return SoundMarkers;
                    case SkyrimMod_FieldIndex.AcousticSpaces:
                        return AcousticSpaces;
                    case SkyrimMod_FieldIndex.MagicEffects:
                        return MagicEffects;
                    case SkyrimMod_FieldIndex.LandscapeTextures:
                        return LandscapeTextures;
                    case SkyrimMod_FieldIndex.ObjectEffects:
                        return ObjectEffects;
                    case SkyrimMod_FieldIndex.Spells:
                        return Spells;
                    case SkyrimMod_FieldIndex.Scrolls:
                        return Scrolls;
                    case SkyrimMod_FieldIndex.Activators:
                        return Activators;
                    case SkyrimMod_FieldIndex.TalkingActivators:
                        return TalkingActivators;
                    case SkyrimMod_FieldIndex.Armors:
                        return Armors;
                    case SkyrimMod_FieldIndex.Books:
                        return Books;
                    case SkyrimMod_FieldIndex.Containers:
                        return Containers;
                    case SkyrimMod_FieldIndex.Doors:
                        return Doors;
                    case SkyrimMod_FieldIndex.Ingredients:
                        return Ingredients;
                    case SkyrimMod_FieldIndex.Lights:
                        return Lights;
                    case SkyrimMod_FieldIndex.MiscItems:
                        return MiscItems;
                    case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                        return AlchemicalApparatuses;
                    case SkyrimMod_FieldIndex.Statics:
                        return Statics;
                    case SkyrimMod_FieldIndex.MoveableStatics:
                        return MoveableStatics;
                    case SkyrimMod_FieldIndex.Grasses:
                        return Grasses;
                    case SkyrimMod_FieldIndex.Trees:
                        return Trees;
                    case SkyrimMod_FieldIndex.Florae:
                        return Florae;
                    case SkyrimMod_FieldIndex.Furniture:
                        return Furniture;
                    case SkyrimMod_FieldIndex.Weapons:
                        return Weapons;
                    case SkyrimMod_FieldIndex.Ammunitions:
                        return Ammunitions;
                    case SkyrimMod_FieldIndex.Npcs:
                        return Npcs;
                    case SkyrimMod_FieldIndex.LeveledNpcs:
                        return LeveledNpcs;
                    case SkyrimMod_FieldIndex.Keys:
                        return Keys;
                    case SkyrimMod_FieldIndex.Ingestibles:
                        return Ingestibles;
                    case SkyrimMod_FieldIndex.IdleMarkers:
                        return IdleMarkers;
                    case SkyrimMod_FieldIndex.ConstructibleObjects:
                        return ConstructibleObjects;
                    case SkyrimMod_FieldIndex.Projectiles:
                        return Projectiles;
                    case SkyrimMod_FieldIndex.Hazards:
                        return Hazards;
                    case SkyrimMod_FieldIndex.SoulGems:
                        return SoulGems;
                    case SkyrimMod_FieldIndex.LeveledItems:
                        return LeveledItems;
                    case SkyrimMod_FieldIndex.Weathers:
                        return Weathers;
                    case SkyrimMod_FieldIndex.Climates:
                        return Climates;
                    case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                        return ShaderParticleGeometries;
                    case SkyrimMod_FieldIndex.VisualEffects:
                        return VisualEffects;
                    case SkyrimMod_FieldIndex.Regions:
                        return Regions;
                    case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                        return NavigationMeshInfoMaps;
                    case SkyrimMod_FieldIndex.Cells:
                        return Cells;
                    case SkyrimMod_FieldIndex.Worldspaces:
                        return Worldspaces;
                    case SkyrimMod_FieldIndex.DialogTopics:
                        return DialogTopics;
                    case SkyrimMod_FieldIndex.Quests:
                        return Quests;
                    case SkyrimMod_FieldIndex.IdleAnimations:
                        return IdleAnimations;
                    case SkyrimMod_FieldIndex.Packages:
                        return Packages;
                    case SkyrimMod_FieldIndex.CombatStyles:
                        return CombatStyles;
                    case SkyrimMod_FieldIndex.LoadScreens:
                        return LoadScreens;
                    case SkyrimMod_FieldIndex.LeveledSpells:
                        return LeveledSpells;
                    case SkyrimMod_FieldIndex.AnimatedObjects:
                        return AnimatedObjects;
                    case SkyrimMod_FieldIndex.Waters:
                        return Waters;
                    case SkyrimMod_FieldIndex.EffectShaders:
                        return EffectShaders;
                    case SkyrimMod_FieldIndex.Explosions:
                        return Explosions;
                    case SkyrimMod_FieldIndex.Debris:
                        return Debris;
                    case SkyrimMod_FieldIndex.ImageSpaces:
                        return ImageSpaces;
                    case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                        return ImageSpaceAdapters;
                    case SkyrimMod_FieldIndex.FormLists:
                        return FormLists;
                    case SkyrimMod_FieldIndex.Perks:
                        return Perks;
                    case SkyrimMod_FieldIndex.BodyParts:
                        return BodyParts;
                    case SkyrimMod_FieldIndex.AddonNodes:
                        return AddonNodes;
                    case SkyrimMod_FieldIndex.ActorValueInformation:
                        return ActorValueInformation;
                    case SkyrimMod_FieldIndex.CameraShots:
                        return CameraShots;
                    case SkyrimMod_FieldIndex.CameraPaths:
                        return CameraPaths;
                    case SkyrimMod_FieldIndex.VoiceTypes:
                        return VoiceTypes;
                    case SkyrimMod_FieldIndex.MaterialTypes:
                        return MaterialTypes;
                    case SkyrimMod_FieldIndex.Impacts:
                        return Impacts;
                    case SkyrimMod_FieldIndex.ImpactDataSets:
                        return ImpactDataSets;
                    case SkyrimMod_FieldIndex.ArmorAddons:
                        return ArmorAddons;
                    case SkyrimMod_FieldIndex.EncounterZones:
                        return EncounterZones;
                    case SkyrimMod_FieldIndex.Locations:
                        return Locations;
                    case SkyrimMod_FieldIndex.Messages:
                        return Messages;
                    case SkyrimMod_FieldIndex.DefaultObjectManagers:
                        return DefaultObjectManagers;
                    case SkyrimMod_FieldIndex.LightingTemplates:
                        return LightingTemplates;
                    case SkyrimMod_FieldIndex.MusicTypes:
                        return MusicTypes;
                    case SkyrimMod_FieldIndex.Footsteps:
                        return Footsteps;
                    case SkyrimMod_FieldIndex.FootstepSets:
                        return FootstepSets;
                    case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                        return StoryManagerBranchNodes;
                    case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                        return StoryManagerQuestNodes;
                    case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                        return StoryManagerEventNodes;
                    case SkyrimMod_FieldIndex.DialogBranches:
                        return DialogBranches;
                    case SkyrimMod_FieldIndex.MusicTracks:
                        return MusicTracks;
                    case SkyrimMod_FieldIndex.DialogViews:
                        return DialogViews;
                    case SkyrimMod_FieldIndex.WordsOfPower:
                        return WordsOfPower;
                    case SkyrimMod_FieldIndex.Shouts:
                        return Shouts;
                    case SkyrimMod_FieldIndex.EquipTypes:
                        return EquipTypes;
                    case SkyrimMod_FieldIndex.Relationships:
                        return Relationships;
                    case SkyrimMod_FieldIndex.Scenes:
                        return Scenes;
                    case SkyrimMod_FieldIndex.AssociationTypes:
                        return AssociationTypes;
                    case SkyrimMod_FieldIndex.Outfits:
                        return Outfits;
                    case SkyrimMod_FieldIndex.ArtObjects:
                        return ArtObjects;
                    case SkyrimMod_FieldIndex.MaterialObjects:
                        return MaterialObjects;
                    case SkyrimMod_FieldIndex.MovementTypes:
                        return MovementTypes;
                    case SkyrimMod_FieldIndex.SoundDescriptors:
                        return SoundDescriptors;
                    case SkyrimMod_FieldIndex.DualCastData:
                        return DualCastData;
                    case SkyrimMod_FieldIndex.SoundCategories:
                        return SoundCategories;
                    case SkyrimMod_FieldIndex.SoundOutputModels:
                        return SoundOutputModels;
                    case SkyrimMod_FieldIndex.CollisionLayers:
                        return CollisionLayers;
                    case SkyrimMod_FieldIndex.Colors:
                        return Colors;
                    case SkyrimMod_FieldIndex.ReverbParameters:
                        return ReverbParameters;
                    case SkyrimMod_FieldIndex.VolumetricLightings:
                        return VolumetricLightings;
                    case SkyrimMod_FieldIndex.LensFlares:
                        return LensFlares;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMod_FieldIndex.ModHeader:
                        this.ModHeader = new MaskItem<Exception?, SkyrimModHeader.ErrorMask?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.GameSettings:
                        this.GameSettings = new MaskItem<Exception?, SkyrimGroup.ErrorMask<GameSetting.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Keyword.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<LocationReferenceType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Actions:
                        this.Actions = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ActionRecord.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.TextureSets:
                        this.TextureSets = new MaskItem<Exception?, SkyrimGroup.ErrorMask<TextureSet.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Globals:
                        this.Globals = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Global.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Classes:
                        this.Classes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Class.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Faction.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, SkyrimGroup.ErrorMask<HeadPart.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Hairs:
                        this.Hairs = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Hair.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Eyes:
                        this.Eyes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Eyes.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Races:
                        this.Races = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Race.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = new MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundMarker.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = new MaskItem<Exception?, SkyrimGroup.ErrorMask<AcousticSpace.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MagicEffects:
                        this.MagicEffects = new MaskItem<Exception?, SkyrimGroup.ErrorMask<MagicEffect.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = new MaskItem<Exception?, SkyrimGroup.ErrorMask<LandscapeTexture.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ObjectEffect.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Spell.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Scrolls:
                        this.Scrolls = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Scroll.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Activators:
                        this.Activators = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Activator.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.TalkingActivators:
                        this.TalkingActivators = new MaskItem<Exception?, SkyrimGroup.ErrorMask<TalkingActivator.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Armors:
                        this.Armors = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Armor.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Books:
                        this.Books = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Book.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Containers:
                        this.Containers = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Container.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Doors:
                        this.Doors = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Door.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Ingredients:
                        this.Ingredients = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Ingredient.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Lights:
                        this.Lights = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Light.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MiscItems:
                        this.MiscItems = new MaskItem<Exception?, SkyrimGroup.ErrorMask<MiscItem.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                        this.AlchemicalApparatuses = new MaskItem<Exception?, SkyrimGroup.ErrorMask<AlchemicalApparatus.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Statics:
                        this.Statics = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Static.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MoveableStatics:
                        this.MoveableStatics = new MaskItem<Exception?, SkyrimGroup.ErrorMask<MoveableStatic.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Grasses:
                        this.Grasses = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Grass.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Trees:
                        this.Trees = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Tree.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Florae:
                        this.Florae = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Flora.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Furniture:
                        this.Furniture = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Furniture.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Weapons:
                        this.Weapons = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Weapon.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Ammunitions:
                        this.Ammunitions = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Ammunition.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Npcs:
                        this.Npcs = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Npc.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = new MaskItem<Exception?, SkyrimGroup.ErrorMask<LeveledNpc.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Keys:
                        this.Keys = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Key.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Ingestibles:
                        this.Ingestibles = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Ingestible.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = new MaskItem<Exception?, SkyrimGroup.ErrorMask<IdleMarker.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ConstructibleObject.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Projectiles:
                        this.Projectiles = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Projectile.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Hazards:
                        this.Hazards = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Hazard.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoulGems:
                        this.SoulGems = new MaskItem<Exception?, SkyrimGroup.ErrorMask<SoulGem.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LeveledItems:
                        this.LeveledItems = new MaskItem<Exception?, SkyrimGroup.ErrorMask<LeveledItem.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Weathers:
                        this.Weathers = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Weather.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Climates:
                        this.Climates = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Climate.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                        this.ShaderParticleGeometries = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ShaderParticleGeometry.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.VisualEffects:
                        this.VisualEffects = new MaskItem<Exception?, SkyrimGroup.ErrorMask<VisualEffect.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Regions:
                        this.Regions = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Region.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                        this.NavigationMeshInfoMaps = new MaskItem<Exception?, SkyrimGroup.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Cells:
                        this.Cells = new MaskItem<Exception?, SkyrimListGroup.ErrorMask<CellBlock.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Worldspaces:
                        this.Worldspaces = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Worldspace.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.DialogTopics:
                        this.DialogTopics = new MaskItem<Exception?, SkyrimGroup.ErrorMask<DialogTopic.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Quests:
                        this.Quests = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Quest.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = new MaskItem<Exception?, SkyrimGroup.ErrorMask<IdleAnimation.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Packages:
                        this.Packages = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Package.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.CombatStyles:
                        this.CombatStyles = new MaskItem<Exception?, SkyrimGroup.ErrorMask<CombatStyle.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LoadScreens:
                        this.LoadScreens = new MaskItem<Exception?, SkyrimGroup.ErrorMask<LoadScreen.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LeveledSpells:
                        this.LeveledSpells = new MaskItem<Exception?, SkyrimGroup.ErrorMask<LeveledSpell.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = new MaskItem<Exception?, SkyrimGroup.ErrorMask<AnimatedObject.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Waters:
                        this.Waters = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Water.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.EffectShaders:
                        this.EffectShaders = new MaskItem<Exception?, SkyrimGroup.ErrorMask<EffectShader.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Explosions:
                        this.Explosions = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Explosion.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Debris:
                        this.Debris = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Debris.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ImageSpaces:
                        this.ImageSpaces = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ImageSpace.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                        this.ImageSpaceAdapters = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ImageSpaceAdapter.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.FormLists:
                        this.FormLists = new MaskItem<Exception?, SkyrimGroup.ErrorMask<FormList.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Perks:
                        this.Perks = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Perk.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.BodyParts:
                        this.BodyParts = new MaskItem<Exception?, SkyrimGroup.ErrorMask<BodyPartData.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AddonNodes:
                        this.AddonNodes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<AddonNode.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ActorValueInformation:
                        this.ActorValueInformation = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ActorValueInformation.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.CameraShots:
                        this.CameraShots = new MaskItem<Exception?, SkyrimGroup.ErrorMask<CameraShot.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.CameraPaths:
                        this.CameraPaths = new MaskItem<Exception?, SkyrimGroup.ErrorMask<CameraPath.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.VoiceTypes:
                        this.VoiceTypes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<VoiceType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MaterialTypes:
                        this.MaterialTypes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<MaterialType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Impacts:
                        this.Impacts = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Impact.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ImpactDataSets:
                        this.ImpactDataSets = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ImpactDataSet.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ArmorAddons:
                        this.ArmorAddons = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ArmorAddon.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.EncounterZones:
                        this.EncounterZones = new MaskItem<Exception?, SkyrimGroup.ErrorMask<EncounterZone.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Locations:
                        this.Locations = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Location.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Messages:
                        this.Messages = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Message.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.DefaultObjectManagers:
                        this.DefaultObjectManagers = new MaskItem<Exception?, SkyrimGroup.ErrorMask<DefaultObjectManager.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LightingTemplates:
                        this.LightingTemplates = new MaskItem<Exception?, SkyrimGroup.ErrorMask<LightingTemplate.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MusicTypes:
                        this.MusicTypes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<MusicType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Footsteps:
                        this.Footsteps = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Footstep.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.FootstepSets:
                        this.FootstepSets = new MaskItem<Exception?, SkyrimGroup.ErrorMask<FootstepSet.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                        this.StoryManagerBranchNodes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<StoryManagerBranchNode.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                        this.StoryManagerQuestNodes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<StoryManagerQuestNode.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                        this.StoryManagerEventNodes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<StoryManagerEventNode.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.DialogBranches:
                        this.DialogBranches = new MaskItem<Exception?, SkyrimGroup.ErrorMask<DialogBranch.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MusicTracks:
                        this.MusicTracks = new MaskItem<Exception?, SkyrimGroup.ErrorMask<MusicTrack.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.DialogViews:
                        this.DialogViews = new MaskItem<Exception?, SkyrimGroup.ErrorMask<DialogView.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.WordsOfPower:
                        this.WordsOfPower = new MaskItem<Exception?, SkyrimGroup.ErrorMask<WordOfPower.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Shouts:
                        this.Shouts = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Shout.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.EquipTypes:
                        this.EquipTypes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<EquipType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Relationships:
                        this.Relationships = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Relationship.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Scenes:
                        this.Scenes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Scene.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.AssociationTypes:
                        this.AssociationTypes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<AssociationType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Outfits:
                        this.Outfits = new MaskItem<Exception?, SkyrimGroup.ErrorMask<Outfit.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ArtObjects:
                        this.ArtObjects = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ArtObject.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MaterialObjects:
                        this.MaterialObjects = new MaskItem<Exception?, SkyrimGroup.ErrorMask<MaterialObject.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.MovementTypes:
                        this.MovementTypes = new MaskItem<Exception?, SkyrimGroup.ErrorMask<MovementType.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoundDescriptors:
                        this.SoundDescriptors = new MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundDescriptor.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.DualCastData:
                        this.DualCastData = new MaskItem<Exception?, SkyrimGroup.ErrorMask<DualCastData.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoundCategories:
                        this.SoundCategories = new MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundCategory.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.SoundOutputModels:
                        this.SoundOutputModels = new MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundOutputModel.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.CollisionLayers:
                        this.CollisionLayers = new MaskItem<Exception?, SkyrimGroup.ErrorMask<CollisionLayer.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.Colors:
                        this.Colors = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ColorRecord.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.ReverbParameters:
                        this.ReverbParameters = new MaskItem<Exception?, SkyrimGroup.ErrorMask<ReverbParameters.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.VolumetricLightings:
                        this.VolumetricLightings = new MaskItem<Exception?, SkyrimGroup.ErrorMask<VolumetricLighting.ErrorMask>?>(ex, null);
                        break;
                    case SkyrimMod_FieldIndex.LensFlares:
                        this.LensFlares = new MaskItem<Exception?, SkyrimGroup.ErrorMask<LensFlare.ErrorMask>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                SkyrimMod_FieldIndex enu = (SkyrimMod_FieldIndex)index;
                switch (enu)
                {
                    case SkyrimMod_FieldIndex.ModHeader:
                        this.ModHeader = (MaskItem<Exception?, SkyrimModHeader.ErrorMask?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.GameSettings:
                        this.GameSettings = (MaskItem<Exception?, SkyrimGroup.ErrorMask<GameSetting.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Keyword.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LocationReferenceTypes:
                        this.LocationReferenceTypes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<LocationReferenceType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Actions:
                        this.Actions = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ActionRecord.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.TextureSets:
                        this.TextureSets = (MaskItem<Exception?, SkyrimGroup.ErrorMask<TextureSet.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Globals:
                        this.Globals = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Global.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Classes:
                        this.Classes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Class.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Faction.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, SkyrimGroup.ErrorMask<HeadPart.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Hairs:
                        this.Hairs = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Hair.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Eyes:
                        this.Eyes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Eyes.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Races:
                        this.Races = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Race.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoundMarkers:
                        this.SoundMarkers = (MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundMarker.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AcousticSpaces:
                        this.AcousticSpaces = (MaskItem<Exception?, SkyrimGroup.ErrorMask<AcousticSpace.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MagicEffects:
                        this.MagicEffects = (MaskItem<Exception?, SkyrimGroup.ErrorMask<MagicEffect.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LandscapeTextures:
                        this.LandscapeTextures = (MaskItem<Exception?, SkyrimGroup.ErrorMask<LandscapeTexture.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ObjectEffects:
                        this.ObjectEffects = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ObjectEffect.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Spell.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Scrolls:
                        this.Scrolls = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Scroll.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Activators:
                        this.Activators = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Activator.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.TalkingActivators:
                        this.TalkingActivators = (MaskItem<Exception?, SkyrimGroup.ErrorMask<TalkingActivator.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Armors:
                        this.Armors = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Armor.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Books:
                        this.Books = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Book.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Containers:
                        this.Containers = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Container.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Doors:
                        this.Doors = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Door.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Ingredients:
                        this.Ingredients = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Ingredient.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Lights:
                        this.Lights = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Light.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MiscItems:
                        this.MiscItems = (MaskItem<Exception?, SkyrimGroup.ErrorMask<MiscItem.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AlchemicalApparatuses:
                        this.AlchemicalApparatuses = (MaskItem<Exception?, SkyrimGroup.ErrorMask<AlchemicalApparatus.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Statics:
                        this.Statics = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Static.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MoveableStatics:
                        this.MoveableStatics = (MaskItem<Exception?, SkyrimGroup.ErrorMask<MoveableStatic.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Grasses:
                        this.Grasses = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Grass.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Trees:
                        this.Trees = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Tree.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Florae:
                        this.Florae = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Flora.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Furniture:
                        this.Furniture = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Furniture.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Weapons:
                        this.Weapons = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Weapon.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Ammunitions:
                        this.Ammunitions = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Ammunition.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Npcs:
                        this.Npcs = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Npc.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LeveledNpcs:
                        this.LeveledNpcs = (MaskItem<Exception?, SkyrimGroup.ErrorMask<LeveledNpc.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Keys:
                        this.Keys = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Key.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Ingestibles:
                        this.Ingestibles = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Ingestible.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.IdleMarkers:
                        this.IdleMarkers = (MaskItem<Exception?, SkyrimGroup.ErrorMask<IdleMarker.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ConstructibleObjects:
                        this.ConstructibleObjects = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ConstructibleObject.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Projectiles:
                        this.Projectiles = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Projectile.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Hazards:
                        this.Hazards = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Hazard.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoulGems:
                        this.SoulGems = (MaskItem<Exception?, SkyrimGroup.ErrorMask<SoulGem.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LeveledItems:
                        this.LeveledItems = (MaskItem<Exception?, SkyrimGroup.ErrorMask<LeveledItem.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Weathers:
                        this.Weathers = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Weather.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Climates:
                        this.Climates = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Climate.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ShaderParticleGeometries:
                        this.ShaderParticleGeometries = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ShaderParticleGeometry.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.VisualEffects:
                        this.VisualEffects = (MaskItem<Exception?, SkyrimGroup.ErrorMask<VisualEffect.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Regions:
                        this.Regions = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Region.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.NavigationMeshInfoMaps:
                        this.NavigationMeshInfoMaps = (MaskItem<Exception?, SkyrimGroup.ErrorMask<NavigationMeshInfoMap.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Cells:
                        this.Cells = (MaskItem<Exception?, SkyrimListGroup.ErrorMask<CellBlock.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Worldspaces:
                        this.Worldspaces = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Worldspace.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.DialogTopics:
                        this.DialogTopics = (MaskItem<Exception?, SkyrimGroup.ErrorMask<DialogTopic.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Quests:
                        this.Quests = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Quest.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.IdleAnimations:
                        this.IdleAnimations = (MaskItem<Exception?, SkyrimGroup.ErrorMask<IdleAnimation.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Packages:
                        this.Packages = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Package.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.CombatStyles:
                        this.CombatStyles = (MaskItem<Exception?, SkyrimGroup.ErrorMask<CombatStyle.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LoadScreens:
                        this.LoadScreens = (MaskItem<Exception?, SkyrimGroup.ErrorMask<LoadScreen.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LeveledSpells:
                        this.LeveledSpells = (MaskItem<Exception?, SkyrimGroup.ErrorMask<LeveledSpell.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AnimatedObjects:
                        this.AnimatedObjects = (MaskItem<Exception?, SkyrimGroup.ErrorMask<AnimatedObject.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Waters:
                        this.Waters = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Water.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.EffectShaders:
                        this.EffectShaders = (MaskItem<Exception?, SkyrimGroup.ErrorMask<EffectShader.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Explosions:
                        this.Explosions = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Explosion.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Debris:
                        this.Debris = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Debris.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ImageSpaces:
                        this.ImageSpaces = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ImageSpace.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ImageSpaceAdapters:
                        this.ImageSpaceAdapters = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ImageSpaceAdapter.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.FormLists:
                        this.FormLists = (MaskItem<Exception?, SkyrimGroup.ErrorMask<FormList.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Perks:
                        this.Perks = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Perk.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.BodyParts:
                        this.BodyParts = (MaskItem<Exception?, SkyrimGroup.ErrorMask<BodyPartData.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AddonNodes:
                        this.AddonNodes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<AddonNode.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ActorValueInformation:
                        this.ActorValueInformation = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ActorValueInformation.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.CameraShots:
                        this.CameraShots = (MaskItem<Exception?, SkyrimGroup.ErrorMask<CameraShot.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.CameraPaths:
                        this.CameraPaths = (MaskItem<Exception?, SkyrimGroup.ErrorMask<CameraPath.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.VoiceTypes:
                        this.VoiceTypes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<VoiceType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MaterialTypes:
                        this.MaterialTypes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<MaterialType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Impacts:
                        this.Impacts = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Impact.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ImpactDataSets:
                        this.ImpactDataSets = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ImpactDataSet.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ArmorAddons:
                        this.ArmorAddons = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ArmorAddon.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.EncounterZones:
                        this.EncounterZones = (MaskItem<Exception?, SkyrimGroup.ErrorMask<EncounterZone.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Locations:
                        this.Locations = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Location.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Messages:
                        this.Messages = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Message.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.DefaultObjectManagers:
                        this.DefaultObjectManagers = (MaskItem<Exception?, SkyrimGroup.ErrorMask<DefaultObjectManager.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LightingTemplates:
                        this.LightingTemplates = (MaskItem<Exception?, SkyrimGroup.ErrorMask<LightingTemplate.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MusicTypes:
                        this.MusicTypes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<MusicType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Footsteps:
                        this.Footsteps = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Footstep.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.FootstepSets:
                        this.FootstepSets = (MaskItem<Exception?, SkyrimGroup.ErrorMask<FootstepSet.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerBranchNodes:
                        this.StoryManagerBranchNodes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<StoryManagerBranchNode.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerQuestNodes:
                        this.StoryManagerQuestNodes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<StoryManagerQuestNode.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.StoryManagerEventNodes:
                        this.StoryManagerEventNodes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<StoryManagerEventNode.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.DialogBranches:
                        this.DialogBranches = (MaskItem<Exception?, SkyrimGroup.ErrorMask<DialogBranch.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MusicTracks:
                        this.MusicTracks = (MaskItem<Exception?, SkyrimGroup.ErrorMask<MusicTrack.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.DialogViews:
                        this.DialogViews = (MaskItem<Exception?, SkyrimGroup.ErrorMask<DialogView.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.WordsOfPower:
                        this.WordsOfPower = (MaskItem<Exception?, SkyrimGroup.ErrorMask<WordOfPower.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Shouts:
                        this.Shouts = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Shout.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.EquipTypes:
                        this.EquipTypes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<EquipType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Relationships:
                        this.Relationships = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Relationship.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Scenes:
                        this.Scenes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Scene.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.AssociationTypes:
                        this.AssociationTypes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<AssociationType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Outfits:
                        this.Outfits = (MaskItem<Exception?, SkyrimGroup.ErrorMask<Outfit.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ArtObjects:
                        this.ArtObjects = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ArtObject.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MaterialObjects:
                        this.MaterialObjects = (MaskItem<Exception?, SkyrimGroup.ErrorMask<MaterialObject.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.MovementTypes:
                        this.MovementTypes = (MaskItem<Exception?, SkyrimGroup.ErrorMask<MovementType.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoundDescriptors:
                        this.SoundDescriptors = (MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundDescriptor.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.DualCastData:
                        this.DualCastData = (MaskItem<Exception?, SkyrimGroup.ErrorMask<DualCastData.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoundCategories:
                        this.SoundCategories = (MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundCategory.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.SoundOutputModels:
                        this.SoundOutputModels = (MaskItem<Exception?, SkyrimGroup.ErrorMask<SoundOutputModel.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.CollisionLayers:
                        this.CollisionLayers = (MaskItem<Exception?, SkyrimGroup.ErrorMask<CollisionLayer.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.Colors:
                        this.Colors = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ColorRecord.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.ReverbParameters:
                        this.ReverbParameters = (MaskItem<Exception?, SkyrimGroup.ErrorMask<ReverbParameters.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.VolumetricLightings:
                        this.VolumetricLightings = (MaskItem<Exception?, SkyrimGroup.ErrorMask<VolumetricLighting.ErrorMask>?>?)obj;
                        break;
                    case SkyrimMod_FieldIndex.LensFlares:
                        this.LensFlares = (MaskItem<Exception?, SkyrimGroup.ErrorMask<LensFlare.ErrorMask>?>?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ModHeader != null) return true;
                if (GameSettings != null) return true;
                if (Keywords != null) return true;
                if (LocationReferenceTypes != null) return true;
                if (Actions != null) return true;
                if (TextureSets != null) return true;
                if (Globals != null) return true;
                if (Classes != null) return true;
                if (Factions != null) return true;
                if (HeadParts != null) return true;
                if (Hairs != null) return true;
                if (Eyes != null) return true;
                if (Races != null) return true;
                if (SoundMarkers != null) return true;
                if (AcousticSpaces != null) return true;
                if (MagicEffects != null) return true;
                if (LandscapeTextures != null) return true;
                if (ObjectEffects != null) return true;
                if (Spells != null) return true;
                if (Scrolls != null) return true;
                if (Activators != null) return true;
                if (TalkingActivators != null) return true;
                if (Armors != null) return true;
                if (Books != null) return true;
                if (Containers != null) return true;
                if (Doors != null) return true;
                if (Ingredients != null) return true;
                if (Lights != null) return true;
                if (MiscItems != null) return true;
                if (AlchemicalApparatuses != null) return true;
                if (Statics != null) return true;
                if (MoveableStatics != null) return true;
                if (Grasses != null) return true;
                if (Trees != null) return true;
                if (Florae != null) return true;
                if (Furniture != null) return true;
                if (Weapons != null) return true;
                if (Ammunitions != null) return true;
                if (Npcs != null) return true;
                if (LeveledNpcs != null) return true;
                if (Keys != null) return true;
                if (Ingestibles != null) return true;
                if (IdleMarkers != null) return true;
                if (ConstructibleObjects != null) return true;
                if (Projectiles != null) return true;
                if (Hazards != null) return true;
                if (SoulGems != null) return true;
                if (LeveledItems != null) return true;
                if (Weathers != null) return true;
                if (Climates != null) return true;
                if (ShaderParticleGeometries != null) return true;
                if (VisualEffects != null) return true;
                if (Regions != null) return true;
                if (NavigationMeshInfoMaps != null) return true;
                if (Cells != null) return true;
                if (Worldspaces != null) return true;
                if (DialogTopics != null) return true;
                if (Quests != null) return true;
                if (IdleAnimations != null) return true;
                if (Packages != null) return true;
                if (CombatStyles != null) return true;
                if (LoadScreens != null) return true;
                if (LeveledSpells != null) return true;
                if (AnimatedObjects != null) return true;
                if (Waters != null) return true;
                if (EffectShaders != null) return true;
                if (Explosions != null) return true;
                if (Debris != null) return true;
                if (ImageSpaces != null) return true;
                if (ImageSpaceAdapters != null) return true;
                if (FormLists != null) return true;
                if (Perks != null) return true;
                if (BodyParts != null) return true;
                if (AddonNodes != null) return true;
                if (ActorValueInformation != null) return true;
                if (CameraShots != null) return true;
                if (CameraPaths != null) return true;
                if (VoiceTypes != null) return true;
                if (MaterialTypes != null) return true;
                if (Impacts != null) return true;
                if (ImpactDataSets != null) return true;
                if (ArmorAddons != null) return true;
                if (EncounterZones != null) return true;
                if (Locations != null) return true;
                if (Messages != null) return true;
                if (DefaultObjectManagers != null) return true;
                if (LightingTemplates != null) return true;
                if (MusicTypes != null) return true;
                if (Footsteps != null) return true;
                if (FootstepSets != null) return true;
                if (StoryManagerBranchNodes != null) return true;
                if (StoryManagerQuestNodes != null) return true;
                if (StoryManagerEventNodes != null) return true;
                if (DialogBranches != null) return true;
                if (MusicTracks != null) return true;
                if (DialogViews != null) return true;
                if (WordsOfPower != null) return true;
                if (Shouts != null) return true;
                if (EquipTypes != null) return true;
                if (Relationships != null) return true;
                if (Scenes != null) return true;
                if (AssociationTypes != null) return true;
                if (Outfits != null) return true;
                if (ArtObjects != null) return true;
                if (MaterialObjects != null) return true;
                if (MovementTypes != null) return true;
                if (SoundDescriptors != null) return true;
                if (DualCastData != null) return true;
                if (SoundCategories != null) return true;
                if (SoundOutputModels != null) return true;
                if (CollisionLayers != null) return true;
                if (Colors != null) return true;
                if (ReverbParameters != null) return true;
                if (VolumetricLightings != null) return true;
                if (LensFlares != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                ModHeader?.Print(sb);
                GameSettings?.Print(sb);
                Keywords?.Print(sb);
                LocationReferenceTypes?.Print(sb);
                Actions?.Print(sb);
                TextureSets?.Print(sb);
                Globals?.Print(sb);
                Classes?.Print(sb);
                Factions?.Print(sb);
                HeadParts?.Print(sb);
                Hairs?.Print(sb);
                Eyes?.Print(sb);
                Races?.Print(sb);
                SoundMarkers?.Print(sb);
                AcousticSpaces?.Print(sb);
                MagicEffects?.Print(sb);
                LandscapeTextures?.Print(sb);
                ObjectEffects?.Print(sb);
                Spells?.Print(sb);
                Scrolls?.Print(sb);
                Activators?.Print(sb);
                TalkingActivators?.Print(sb);
                Armors?.Print(sb);
                Books?.Print(sb);
                Containers?.Print(sb);
                Doors?.Print(sb);
                Ingredients?.Print(sb);
                Lights?.Print(sb);
                MiscItems?.Print(sb);
                AlchemicalApparatuses?.Print(sb);
                Statics?.Print(sb);
                MoveableStatics?.Print(sb);
                Grasses?.Print(sb);
                Trees?.Print(sb);
                Florae?.Print(sb);
                Furniture?.Print(sb);
                Weapons?.Print(sb);
                Ammunitions?.Print(sb);
                Npcs?.Print(sb);
                LeveledNpcs?.Print(sb);
                Keys?.Print(sb);
                Ingestibles?.Print(sb);
                IdleMarkers?.Print(sb);
                ConstructibleObjects?.Print(sb);
                Projectiles?.Print(sb);
                Hazards?.Print(sb);
                SoulGems?.Print(sb);
                LeveledItems?.Print(sb);
                Weathers?.Print(sb);
                Climates?.Print(sb);
                ShaderParticleGeometries?.Print(sb);
                VisualEffects?.Print(sb);
                Regions?.Print(sb);
                NavigationMeshInfoMaps?.Print(sb);
                Cells?.Print(sb);
                Worldspaces?.Print(sb);
                DialogTopics?.Print(sb);
                Quests?.Print(sb);
                IdleAnimations?.Print(sb);
                Packages?.Print(sb);
                CombatStyles?.Print(sb);
                LoadScreens?.Print(sb);
                LeveledSpells?.Print(sb);
                AnimatedObjects?.Print(sb);
                Waters?.Print(sb);
                EffectShaders?.Print(sb);
                Explosions?.Print(sb);
                Debris?.Print(sb);
                ImageSpaces?.Print(sb);
                ImageSpaceAdapters?.Print(sb);
                FormLists?.Print(sb);
                Perks?.Print(sb);
                BodyParts?.Print(sb);
                AddonNodes?.Print(sb);
                ActorValueInformation?.Print(sb);
                CameraShots?.Print(sb);
                CameraPaths?.Print(sb);
                VoiceTypes?.Print(sb);
                MaterialTypes?.Print(sb);
                Impacts?.Print(sb);
                ImpactDataSets?.Print(sb);
                ArmorAddons?.Print(sb);
                EncounterZones?.Print(sb);
                Locations?.Print(sb);
                Messages?.Print(sb);
                DefaultObjectManagers?.Print(sb);
                LightingTemplates?.Print(sb);
                MusicTypes?.Print(sb);
                Footsteps?.Print(sb);
                FootstepSets?.Print(sb);
                StoryManagerBranchNodes?.Print(sb);
                StoryManagerQuestNodes?.Print(sb);
                StoryManagerEventNodes?.Print(sb);
                DialogBranches?.Print(sb);
                MusicTracks?.Print(sb);
                DialogViews?.Print(sb);
                WordsOfPower?.Print(sb);
                Shouts?.Print(sb);
                EquipTypes?.Print(sb);
                Relationships?.Print(sb);
                Scenes?.Print(sb);
                AssociationTypes?.Print(sb);
                Outfits?.Print(sb);
                ArtObjects?.Print(sb);
                MaterialObjects?.Print(sb);
                MovementTypes?.Print(sb);
                SoundDescriptors?.Print(sb);
                DualCastData?.Print(sb);
                SoundCategories?.Print(sb);
                SoundOutputModels?.Print(sb);
                CollisionLayers?.Print(sb);
                Colors?.Print(sb);
                ReverbParameters?.Print(sb);
                VolumetricLightings?.Print(sb);
                LensFlares?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ModHeader = this.ModHeader.Combine(rhs.ModHeader, (l, r) => l.Combine(r));
                ret.GameSettings = this.GameSettings.Combine(rhs.GameSettings, (l, r) => l.Combine(r));
                ret.Keywords = this.Keywords.Combine(rhs.Keywords, (l, r) => l.Combine(r));
                ret.LocationReferenceTypes = this.LocationReferenceTypes.Combine(rhs.LocationReferenceTypes, (l, r) => l.Combine(r));
                ret.Actions = this.Actions.Combine(rhs.Actions, (l, r) => l.Combine(r));
                ret.TextureSets = this.TextureSets.Combine(rhs.TextureSets, (l, r) => l.Combine(r));
                ret.Globals = this.Globals.Combine(rhs.Globals, (l, r) => l.Combine(r));
                ret.Classes = this.Classes.Combine(rhs.Classes, (l, r) => l.Combine(r));
                ret.Factions = this.Factions.Combine(rhs.Factions, (l, r) => l.Combine(r));
                ret.HeadParts = this.HeadParts.Combine(rhs.HeadParts, (l, r) => l.Combine(r));
                ret.Hairs = this.Hairs.Combine(rhs.Hairs, (l, r) => l.Combine(r));
                ret.Eyes = this.Eyes.Combine(rhs.Eyes, (l, r) => l.Combine(r));
                ret.Races = this.Races.Combine(rhs.Races, (l, r) => l.Combine(r));
                ret.SoundMarkers = this.SoundMarkers.Combine(rhs.SoundMarkers, (l, r) => l.Combine(r));
                ret.AcousticSpaces = this.AcousticSpaces.Combine(rhs.AcousticSpaces, (l, r) => l.Combine(r));
                ret.MagicEffects = this.MagicEffects.Combine(rhs.MagicEffects, (l, r) => l.Combine(r));
                ret.LandscapeTextures = this.LandscapeTextures.Combine(rhs.LandscapeTextures, (l, r) => l.Combine(r));
                ret.ObjectEffects = this.ObjectEffects.Combine(rhs.ObjectEffects, (l, r) => l.Combine(r));
                ret.Spells = this.Spells.Combine(rhs.Spells, (l, r) => l.Combine(r));
                ret.Scrolls = this.Scrolls.Combine(rhs.Scrolls, (l, r) => l.Combine(r));
                ret.Activators = this.Activators.Combine(rhs.Activators, (l, r) => l.Combine(r));
                ret.TalkingActivators = this.TalkingActivators.Combine(rhs.TalkingActivators, (l, r) => l.Combine(r));
                ret.Armors = this.Armors.Combine(rhs.Armors, (l, r) => l.Combine(r));
                ret.Books = this.Books.Combine(rhs.Books, (l, r) => l.Combine(r));
                ret.Containers = this.Containers.Combine(rhs.Containers, (l, r) => l.Combine(r));
                ret.Doors = this.Doors.Combine(rhs.Doors, (l, r) => l.Combine(r));
                ret.Ingredients = this.Ingredients.Combine(rhs.Ingredients, (l, r) => l.Combine(r));
                ret.Lights = this.Lights.Combine(rhs.Lights, (l, r) => l.Combine(r));
                ret.MiscItems = this.MiscItems.Combine(rhs.MiscItems, (l, r) => l.Combine(r));
                ret.AlchemicalApparatuses = this.AlchemicalApparatuses.Combine(rhs.AlchemicalApparatuses, (l, r) => l.Combine(r));
                ret.Statics = this.Statics.Combine(rhs.Statics, (l, r) => l.Combine(r));
                ret.MoveableStatics = this.MoveableStatics.Combine(rhs.MoveableStatics, (l, r) => l.Combine(r));
                ret.Grasses = this.Grasses.Combine(rhs.Grasses, (l, r) => l.Combine(r));
                ret.Trees = this.Trees.Combine(rhs.Trees, (l, r) => l.Combine(r));
                ret.Florae = this.Florae.Combine(rhs.Florae, (l, r) => l.Combine(r));
                ret.Furniture = this.Furniture.Combine(rhs.Furniture, (l, r) => l.Combine(r));
                ret.Weapons = this.Weapons.Combine(rhs.Weapons, (l, r) => l.Combine(r));
                ret.Ammunitions = this.Ammunitions.Combine(rhs.Ammunitions, (l, r) => l.Combine(r));
                ret.Npcs = this.Npcs.Combine(rhs.Npcs, (l, r) => l.Combine(r));
                ret.LeveledNpcs = this.LeveledNpcs.Combine(rhs.LeveledNpcs, (l, r) => l.Combine(r));
                ret.Keys = this.Keys.Combine(rhs.Keys, (l, r) => l.Combine(r));
                ret.Ingestibles = this.Ingestibles.Combine(rhs.Ingestibles, (l, r) => l.Combine(r));
                ret.IdleMarkers = this.IdleMarkers.Combine(rhs.IdleMarkers, (l, r) => l.Combine(r));
                ret.ConstructibleObjects = this.ConstructibleObjects.Combine(rhs.ConstructibleObjects, (l, r) => l.Combine(r));
                ret.Projectiles = this.Projectiles.Combine(rhs.Projectiles, (l, r) => l.Combine(r));
                ret.Hazards = this.Hazards.Combine(rhs.Hazards, (l, r) => l.Combine(r));
                ret.SoulGems = this.SoulGems.Combine(rhs.SoulGems, (l, r) => l.Combine(r));
                ret.LeveledItems = this.LeveledItems.Combine(rhs.LeveledItems, (l, r) => l.Combine(r));
                ret.Weathers = this.Weathers.Combine(rhs.Weathers, (l, r) => l.Combine(r));
                ret.Climates = this.Climates.Combine(rhs.Climates, (l, r) => l.Combine(r));
                ret.ShaderParticleGeometries = this.ShaderParticleGeometries.Combine(rhs.ShaderParticleGeometries, (l, r) => l.Combine(r));
                ret.VisualEffects = this.VisualEffects.Combine(rhs.VisualEffects, (l, r) => l.Combine(r));
                ret.Regions = this.Regions.Combine(rhs.Regions, (l, r) => l.Combine(r));
                ret.NavigationMeshInfoMaps = this.NavigationMeshInfoMaps.Combine(rhs.NavigationMeshInfoMaps, (l, r) => l.Combine(r));
                ret.Cells = this.Cells.Combine(rhs.Cells, (l, r) => l.Combine(r));
                ret.Worldspaces = this.Worldspaces.Combine(rhs.Worldspaces, (l, r) => l.Combine(r));
                ret.DialogTopics = this.DialogTopics.Combine(rhs.DialogTopics, (l, r) => l.Combine(r));
                ret.Quests = this.Quests.Combine(rhs.Quests, (l, r) => l.Combine(r));
                ret.IdleAnimations = this.IdleAnimations.Combine(rhs.IdleAnimations, (l, r) => l.Combine(r));
                ret.Packages = this.Packages.Combine(rhs.Packages, (l, r) => l.Combine(r));
                ret.CombatStyles = this.CombatStyles.Combine(rhs.CombatStyles, (l, r) => l.Combine(r));
                ret.LoadScreens = this.LoadScreens.Combine(rhs.LoadScreens, (l, r) => l.Combine(r));
                ret.LeveledSpells = this.LeveledSpells.Combine(rhs.LeveledSpells, (l, r) => l.Combine(r));
                ret.AnimatedObjects = this.AnimatedObjects.Combine(rhs.AnimatedObjects, (l, r) => l.Combine(r));
                ret.Waters = this.Waters.Combine(rhs.Waters, (l, r) => l.Combine(r));
                ret.EffectShaders = this.EffectShaders.Combine(rhs.EffectShaders, (l, r) => l.Combine(r));
                ret.Explosions = this.Explosions.Combine(rhs.Explosions, (l, r) => l.Combine(r));
                ret.Debris = this.Debris.Combine(rhs.Debris, (l, r) => l.Combine(r));
                ret.ImageSpaces = this.ImageSpaces.Combine(rhs.ImageSpaces, (l, r) => l.Combine(r));
                ret.ImageSpaceAdapters = this.ImageSpaceAdapters.Combine(rhs.ImageSpaceAdapters, (l, r) => l.Combine(r));
                ret.FormLists = this.FormLists.Combine(rhs.FormLists, (l, r) => l.Combine(r));
                ret.Perks = this.Perks.Combine(rhs.Perks, (l, r) => l.Combine(r));
                ret.BodyParts = this.BodyParts.Combine(rhs.BodyParts, (l, r) => l.Combine(r));
                ret.AddonNodes = this.AddonNodes.Combine(rhs.AddonNodes, (l, r) => l.Combine(r));
                ret.ActorValueInformation = this.ActorValueInformation.Combine(rhs.ActorValueInformation, (l, r) => l.Combine(r));
                ret.CameraShots = this.CameraShots.Combine(rhs.CameraShots, (l, r) => l.Combine(r));
                ret.CameraPaths = this.CameraPaths.Combine(rhs.CameraPaths, (l, r) => l.Combine(r));
                ret.VoiceTypes = this.VoiceTypes.Combine(rhs.VoiceTypes, (l, r) => l.Combine(r));
                ret.MaterialTypes = this.MaterialTypes.Combine(rhs.MaterialTypes, (l, r) => l.Combine(r));
                ret.Impacts = this.Impacts.Combine(rhs.Impacts, (l, r) => l.Combine(r));
                ret.ImpactDataSets = this.ImpactDataSets.Combine(rhs.ImpactDataSets, (l, r) => l.Combine(r));
                ret.ArmorAddons = this.ArmorAddons.Combine(rhs.ArmorAddons, (l, r) => l.Combine(r));
                ret.EncounterZones = this.EncounterZones.Combine(rhs.EncounterZones, (l, r) => l.Combine(r));
                ret.Locations = this.Locations.Combine(rhs.Locations, (l, r) => l.Combine(r));
                ret.Messages = this.Messages.Combine(rhs.Messages, (l, r) => l.Combine(r));
                ret.DefaultObjectManagers = this.DefaultObjectManagers.Combine(rhs.DefaultObjectManagers, (l, r) => l.Combine(r));
                ret.LightingTemplates = this.LightingTemplates.Combine(rhs.LightingTemplates, (l, r) => l.Combine(r));
                ret.MusicTypes = this.MusicTypes.Combine(rhs.MusicTypes, (l, r) => l.Combine(r));
                ret.Footsteps = this.Footsteps.Combine(rhs.Footsteps, (l, r) => l.Combine(r));
                ret.FootstepSets = this.FootstepSets.Combine(rhs.FootstepSets, (l, r) => l.Combine(r));
                ret.StoryManagerBranchNodes = this.StoryManagerBranchNodes.Combine(rhs.StoryManagerBranchNodes, (l, r) => l.Combine(r));
                ret.StoryManagerQuestNodes = this.StoryManagerQuestNodes.Combine(rhs.StoryManagerQuestNodes, (l, r) => l.Combine(r));
                ret.StoryManagerEventNodes = this.StoryManagerEventNodes.Combine(rhs.StoryManagerEventNodes, (l, r) => l.Combine(r));
                ret.DialogBranches = this.DialogBranches.Combine(rhs.DialogBranches, (l, r) => l.Combine(r));
                ret.MusicTracks = this.MusicTracks.Combine(rhs.MusicTracks, (l, r) => l.Combine(r));
                ret.DialogViews = this.DialogViews.Combine(rhs.DialogViews, (l, r) => l.Combine(r));
                ret.WordsOfPower = this.WordsOfPower.Combine(rhs.WordsOfPower, (l, r) => l.Combine(r));
                ret.Shouts = this.Shouts.Combine(rhs.Shouts, (l, r) => l.Combine(r));
                ret.EquipTypes = this.EquipTypes.Combine(rhs.EquipTypes, (l, r) => l.Combine(r));
                ret.Relationships = this.Relationships.Combine(rhs.Relationships, (l, r) => l.Combine(r));
                ret.Scenes = this.Scenes.Combine(rhs.Scenes, (l, r) => l.Combine(r));
                ret.AssociationTypes = this.AssociationTypes.Combine(rhs.AssociationTypes, (l, r) => l.Combine(r));
                ret.Outfits = this.Outfits.Combine(rhs.Outfits, (l, r) => l.Combine(r));
                ret.ArtObjects = this.ArtObjects.Combine(rhs.ArtObjects, (l, r) => l.Combine(r));
                ret.MaterialObjects = this.MaterialObjects.Combine(rhs.MaterialObjects, (l, r) => l.Combine(r));
                ret.MovementTypes = this.MovementTypes.Combine(rhs.MovementTypes, (l, r) => l.Combine(r));
                ret.SoundDescriptors = this.SoundDescriptors.Combine(rhs.SoundDescriptors, (l, r) => l.Combine(r));
                ret.DualCastData = this.DualCastData.Combine(rhs.DualCastData, (l, r) => l.Combine(r));
                ret.SoundCategories = this.SoundCategories.Combine(rhs.SoundCategories, (l, r) => l.Combine(r));
                ret.SoundOutputModels = this.SoundOutputModels.Combine(rhs.SoundOutputModels, (l, r) => l.Combine(r));
                ret.CollisionLayers = this.CollisionLayers.Combine(rhs.CollisionLayers, (l, r) => l.Combine(r));
                ret.Colors = this.Colors.Combine(rhs.Colors, (l, r) => l.Combine(r));
                ret.ReverbParameters = this.ReverbParameters.Combine(rhs.ReverbParameters, (l, r) => l.Combine(r));
                ret.VolumetricLightings = this.VolumetricLightings.Combine(rhs.VolumetricLightings, (l, r) => l.Combine(r));
                ret.LensFlares = this.LensFlares.Combine(rhs.LensFlares, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public SkyrimModHeader.TranslationMask? ModHeader;
            public SkyrimGroup.TranslationMask<GameSetting.TranslationMask>? GameSettings;
            public SkyrimGroup.TranslationMask<Keyword.TranslationMask>? Keywords;
            public SkyrimGroup.TranslationMask<LocationReferenceType.TranslationMask>? LocationReferenceTypes;
            public SkyrimGroup.TranslationMask<ActionRecord.TranslationMask>? Actions;
            public SkyrimGroup.TranslationMask<TextureSet.TranslationMask>? TextureSets;
            public SkyrimGroup.TranslationMask<Global.TranslationMask>? Globals;
            public SkyrimGroup.TranslationMask<Class.TranslationMask>? Classes;
            public SkyrimGroup.TranslationMask<Faction.TranslationMask>? Factions;
            public SkyrimGroup.TranslationMask<HeadPart.TranslationMask>? HeadParts;
            public SkyrimGroup.TranslationMask<Hair.TranslationMask>? Hairs;
            public SkyrimGroup.TranslationMask<Eyes.TranslationMask>? Eyes;
            public SkyrimGroup.TranslationMask<Race.TranslationMask>? Races;
            public SkyrimGroup.TranslationMask<SoundMarker.TranslationMask>? SoundMarkers;
            public SkyrimGroup.TranslationMask<AcousticSpace.TranslationMask>? AcousticSpaces;
            public SkyrimGroup.TranslationMask<MagicEffect.TranslationMask>? MagicEffects;
            public SkyrimGroup.TranslationMask<LandscapeTexture.TranslationMask>? LandscapeTextures;
            public SkyrimGroup.TranslationMask<ObjectEffect.TranslationMask>? ObjectEffects;
            public SkyrimGroup.TranslationMask<Spell.TranslationMask>? Spells;
            public SkyrimGroup.TranslationMask<Scroll.TranslationMask>? Scrolls;
            public SkyrimGroup.TranslationMask<Activator.TranslationMask>? Activators;
            public SkyrimGroup.TranslationMask<TalkingActivator.TranslationMask>? TalkingActivators;
            public SkyrimGroup.TranslationMask<Armor.TranslationMask>? Armors;
            public SkyrimGroup.TranslationMask<Book.TranslationMask>? Books;
            public SkyrimGroup.TranslationMask<Container.TranslationMask>? Containers;
            public SkyrimGroup.TranslationMask<Door.TranslationMask>? Doors;
            public SkyrimGroup.TranslationMask<Ingredient.TranslationMask>? Ingredients;
            public SkyrimGroup.TranslationMask<Light.TranslationMask>? Lights;
            public SkyrimGroup.TranslationMask<MiscItem.TranslationMask>? MiscItems;
            public SkyrimGroup.TranslationMask<AlchemicalApparatus.TranslationMask>? AlchemicalApparatuses;
            public SkyrimGroup.TranslationMask<Static.TranslationMask>? Statics;
            public SkyrimGroup.TranslationMask<MoveableStatic.TranslationMask>? MoveableStatics;
            public SkyrimGroup.TranslationMask<Grass.TranslationMask>? Grasses;
            public SkyrimGroup.TranslationMask<Tree.TranslationMask>? Trees;
            public SkyrimGroup.TranslationMask<Flora.TranslationMask>? Florae;
            public SkyrimGroup.TranslationMask<Furniture.TranslationMask>? Furniture;
            public SkyrimGroup.TranslationMask<Weapon.TranslationMask>? Weapons;
            public SkyrimGroup.TranslationMask<Ammunition.TranslationMask>? Ammunitions;
            public SkyrimGroup.TranslationMask<Npc.TranslationMask>? Npcs;
            public SkyrimGroup.TranslationMask<LeveledNpc.TranslationMask>? LeveledNpcs;
            public SkyrimGroup.TranslationMask<Key.TranslationMask>? Keys;
            public SkyrimGroup.TranslationMask<Ingestible.TranslationMask>? Ingestibles;
            public SkyrimGroup.TranslationMask<IdleMarker.TranslationMask>? IdleMarkers;
            public SkyrimGroup.TranslationMask<ConstructibleObject.TranslationMask>? ConstructibleObjects;
            public SkyrimGroup.TranslationMask<Projectile.TranslationMask>? Projectiles;
            public SkyrimGroup.TranslationMask<Hazard.TranslationMask>? Hazards;
            public SkyrimGroup.TranslationMask<SoulGem.TranslationMask>? SoulGems;
            public SkyrimGroup.TranslationMask<LeveledItem.TranslationMask>? LeveledItems;
            public SkyrimGroup.TranslationMask<Weather.TranslationMask>? Weathers;
            public SkyrimGroup.TranslationMask<Climate.TranslationMask>? Climates;
            public SkyrimGroup.TranslationMask<ShaderParticleGeometry.TranslationMask>? ShaderParticleGeometries;
            public SkyrimGroup.TranslationMask<VisualEffect.TranslationMask>? VisualEffects;
            public SkyrimGroup.TranslationMask<Region.TranslationMask>? Regions;
            public SkyrimGroup.TranslationMask<NavigationMeshInfoMap.TranslationMask>? NavigationMeshInfoMaps;
            public SkyrimListGroup.TranslationMask<CellBlock.TranslationMask>? Cells;
            public SkyrimGroup.TranslationMask<Worldspace.TranslationMask>? Worldspaces;
            public SkyrimGroup.TranslationMask<DialogTopic.TranslationMask>? DialogTopics;
            public SkyrimGroup.TranslationMask<Quest.TranslationMask>? Quests;
            public SkyrimGroup.TranslationMask<IdleAnimation.TranslationMask>? IdleAnimations;
            public SkyrimGroup.TranslationMask<Package.TranslationMask>? Packages;
            public SkyrimGroup.TranslationMask<CombatStyle.TranslationMask>? CombatStyles;
            public SkyrimGroup.TranslationMask<LoadScreen.TranslationMask>? LoadScreens;
            public SkyrimGroup.TranslationMask<LeveledSpell.TranslationMask>? LeveledSpells;
            public SkyrimGroup.TranslationMask<AnimatedObject.TranslationMask>? AnimatedObjects;
            public SkyrimGroup.TranslationMask<Water.TranslationMask>? Waters;
            public SkyrimGroup.TranslationMask<EffectShader.TranslationMask>? EffectShaders;
            public SkyrimGroup.TranslationMask<Explosion.TranslationMask>? Explosions;
            public SkyrimGroup.TranslationMask<Debris.TranslationMask>? Debris;
            public SkyrimGroup.TranslationMask<ImageSpace.TranslationMask>? ImageSpaces;
            public SkyrimGroup.TranslationMask<ImageSpaceAdapter.TranslationMask>? ImageSpaceAdapters;
            public SkyrimGroup.TranslationMask<FormList.TranslationMask>? FormLists;
            public SkyrimGroup.TranslationMask<Perk.TranslationMask>? Perks;
            public SkyrimGroup.TranslationMask<BodyPartData.TranslationMask>? BodyParts;
            public SkyrimGroup.TranslationMask<AddonNode.TranslationMask>? AddonNodes;
            public SkyrimGroup.TranslationMask<ActorValueInformation.TranslationMask>? ActorValueInformation;
            public SkyrimGroup.TranslationMask<CameraShot.TranslationMask>? CameraShots;
            public SkyrimGroup.TranslationMask<CameraPath.TranslationMask>? CameraPaths;
            public SkyrimGroup.TranslationMask<VoiceType.TranslationMask>? VoiceTypes;
            public SkyrimGroup.TranslationMask<MaterialType.TranslationMask>? MaterialTypes;
            public SkyrimGroup.TranslationMask<Impact.TranslationMask>? Impacts;
            public SkyrimGroup.TranslationMask<ImpactDataSet.TranslationMask>? ImpactDataSets;
            public SkyrimGroup.TranslationMask<ArmorAddon.TranslationMask>? ArmorAddons;
            public SkyrimGroup.TranslationMask<EncounterZone.TranslationMask>? EncounterZones;
            public SkyrimGroup.TranslationMask<Location.TranslationMask>? Locations;
            public SkyrimGroup.TranslationMask<Message.TranslationMask>? Messages;
            public SkyrimGroup.TranslationMask<DefaultObjectManager.TranslationMask>? DefaultObjectManagers;
            public SkyrimGroup.TranslationMask<LightingTemplate.TranslationMask>? LightingTemplates;
            public SkyrimGroup.TranslationMask<MusicType.TranslationMask>? MusicTypes;
            public SkyrimGroup.TranslationMask<Footstep.TranslationMask>? Footsteps;
            public SkyrimGroup.TranslationMask<FootstepSet.TranslationMask>? FootstepSets;
            public SkyrimGroup.TranslationMask<StoryManagerBranchNode.TranslationMask>? StoryManagerBranchNodes;
            public SkyrimGroup.TranslationMask<StoryManagerQuestNode.TranslationMask>? StoryManagerQuestNodes;
            public SkyrimGroup.TranslationMask<StoryManagerEventNode.TranslationMask>? StoryManagerEventNodes;
            public SkyrimGroup.TranslationMask<DialogBranch.TranslationMask>? DialogBranches;
            public SkyrimGroup.TranslationMask<MusicTrack.TranslationMask>? MusicTracks;
            public SkyrimGroup.TranslationMask<DialogView.TranslationMask>? DialogViews;
            public SkyrimGroup.TranslationMask<WordOfPower.TranslationMask>? WordsOfPower;
            public SkyrimGroup.TranslationMask<Shout.TranslationMask>? Shouts;
            public SkyrimGroup.TranslationMask<EquipType.TranslationMask>? EquipTypes;
            public SkyrimGroup.TranslationMask<Relationship.TranslationMask>? Relationships;
            public SkyrimGroup.TranslationMask<Scene.TranslationMask>? Scenes;
            public SkyrimGroup.TranslationMask<AssociationType.TranslationMask>? AssociationTypes;
            public SkyrimGroup.TranslationMask<Outfit.TranslationMask>? Outfits;
            public SkyrimGroup.TranslationMask<ArtObject.TranslationMask>? ArtObjects;
            public SkyrimGroup.TranslationMask<MaterialObject.TranslationMask>? MaterialObjects;
            public SkyrimGroup.TranslationMask<MovementType.TranslationMask>? MovementTypes;
            public SkyrimGroup.TranslationMask<SoundDescriptor.TranslationMask>? SoundDescriptors;
            public SkyrimGroup.TranslationMask<DualCastData.TranslationMask>? DualCastData;
            public SkyrimGroup.TranslationMask<SoundCategory.TranslationMask>? SoundCategories;
            public SkyrimGroup.TranslationMask<SoundOutputModel.TranslationMask>? SoundOutputModels;
            public SkyrimGroup.TranslationMask<CollisionLayer.TranslationMask>? CollisionLayers;
            public SkyrimGroup.TranslationMask<ColorRecord.TranslationMask>? Colors;
            public SkyrimGroup.TranslationMask<ReverbParameters.TranslationMask>? ReverbParameters;
            public SkyrimGroup.TranslationMask<VolumetricLighting.TranslationMask>? VolumetricLightings;
            public SkyrimGroup.TranslationMask<LensFlare.TranslationMask>? LensFlares;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ModHeader != null ? ModHeader.OnOverall : DefaultOn, ModHeader?.GetCrystal()));
                ret.Add((GameSettings != null ? GameSettings.OnOverall : DefaultOn, GameSettings?.GetCrystal()));
                ret.Add((Keywords != null ? Keywords.OnOverall : DefaultOn, Keywords?.GetCrystal()));
                ret.Add((LocationReferenceTypes != null ? LocationReferenceTypes.OnOverall : DefaultOn, LocationReferenceTypes?.GetCrystal()));
                ret.Add((Actions != null ? Actions.OnOverall : DefaultOn, Actions?.GetCrystal()));
                ret.Add((TextureSets != null ? TextureSets.OnOverall : DefaultOn, TextureSets?.GetCrystal()));
                ret.Add((Globals != null ? Globals.OnOverall : DefaultOn, Globals?.GetCrystal()));
                ret.Add((Classes != null ? Classes.OnOverall : DefaultOn, Classes?.GetCrystal()));
                ret.Add((Factions != null ? Factions.OnOverall : DefaultOn, Factions?.GetCrystal()));
                ret.Add((HeadParts != null ? HeadParts.OnOverall : DefaultOn, HeadParts?.GetCrystal()));
                ret.Add((Hairs != null ? Hairs.OnOverall : DefaultOn, Hairs?.GetCrystal()));
                ret.Add((Eyes != null ? Eyes.OnOverall : DefaultOn, Eyes?.GetCrystal()));
                ret.Add((Races != null ? Races.OnOverall : DefaultOn, Races?.GetCrystal()));
                ret.Add((SoundMarkers != null ? SoundMarkers.OnOverall : DefaultOn, SoundMarkers?.GetCrystal()));
                ret.Add((AcousticSpaces != null ? AcousticSpaces.OnOverall : DefaultOn, AcousticSpaces?.GetCrystal()));
                ret.Add((MagicEffects != null ? MagicEffects.OnOverall : DefaultOn, MagicEffects?.GetCrystal()));
                ret.Add((LandscapeTextures != null ? LandscapeTextures.OnOverall : DefaultOn, LandscapeTextures?.GetCrystal()));
                ret.Add((ObjectEffects != null ? ObjectEffects.OnOverall : DefaultOn, ObjectEffects?.GetCrystal()));
                ret.Add((Spells != null ? Spells.OnOverall : DefaultOn, Spells?.GetCrystal()));
                ret.Add((Scrolls != null ? Scrolls.OnOverall : DefaultOn, Scrolls?.GetCrystal()));
                ret.Add((Activators != null ? Activators.OnOverall : DefaultOn, Activators?.GetCrystal()));
                ret.Add((TalkingActivators != null ? TalkingActivators.OnOverall : DefaultOn, TalkingActivators?.GetCrystal()));
                ret.Add((Armors != null ? Armors.OnOverall : DefaultOn, Armors?.GetCrystal()));
                ret.Add((Books != null ? Books.OnOverall : DefaultOn, Books?.GetCrystal()));
                ret.Add((Containers != null ? Containers.OnOverall : DefaultOn, Containers?.GetCrystal()));
                ret.Add((Doors != null ? Doors.OnOverall : DefaultOn, Doors?.GetCrystal()));
                ret.Add((Ingredients != null ? Ingredients.OnOverall : DefaultOn, Ingredients?.GetCrystal()));
                ret.Add((Lights != null ? Lights.OnOverall : DefaultOn, Lights?.GetCrystal()));
                ret.Add((MiscItems != null ? MiscItems.OnOverall : DefaultOn, MiscItems?.GetCrystal()));
                ret.Add((AlchemicalApparatuses != null ? AlchemicalApparatuses.OnOverall : DefaultOn, AlchemicalApparatuses?.GetCrystal()));
                ret.Add((Statics != null ? Statics.OnOverall : DefaultOn, Statics?.GetCrystal()));
                ret.Add((MoveableStatics != null ? MoveableStatics.OnOverall : DefaultOn, MoveableStatics?.GetCrystal()));
                ret.Add((Grasses != null ? Grasses.OnOverall : DefaultOn, Grasses?.GetCrystal()));
                ret.Add((Trees != null ? Trees.OnOverall : DefaultOn, Trees?.GetCrystal()));
                ret.Add((Florae != null ? Florae.OnOverall : DefaultOn, Florae?.GetCrystal()));
                ret.Add((Furniture != null ? Furniture.OnOverall : DefaultOn, Furniture?.GetCrystal()));
                ret.Add((Weapons != null ? Weapons.OnOverall : DefaultOn, Weapons?.GetCrystal()));
                ret.Add((Ammunitions != null ? Ammunitions.OnOverall : DefaultOn, Ammunitions?.GetCrystal()));
                ret.Add((Npcs != null ? Npcs.OnOverall : DefaultOn, Npcs?.GetCrystal()));
                ret.Add((LeveledNpcs != null ? LeveledNpcs.OnOverall : DefaultOn, LeveledNpcs?.GetCrystal()));
                ret.Add((Keys != null ? Keys.OnOverall : DefaultOn, Keys?.GetCrystal()));
                ret.Add((Ingestibles != null ? Ingestibles.OnOverall : DefaultOn, Ingestibles?.GetCrystal()));
                ret.Add((IdleMarkers != null ? IdleMarkers.OnOverall : DefaultOn, IdleMarkers?.GetCrystal()));
                ret.Add((ConstructibleObjects != null ? ConstructibleObjects.OnOverall : DefaultOn, ConstructibleObjects?.GetCrystal()));
                ret.Add((Projectiles != null ? Projectiles.OnOverall : DefaultOn, Projectiles?.GetCrystal()));
                ret.Add((Hazards != null ? Hazards.OnOverall : DefaultOn, Hazards?.GetCrystal()));
                ret.Add((SoulGems != null ? SoulGems.OnOverall : DefaultOn, SoulGems?.GetCrystal()));
                ret.Add((LeveledItems != null ? LeveledItems.OnOverall : DefaultOn, LeveledItems?.GetCrystal()));
                ret.Add((Weathers != null ? Weathers.OnOverall : DefaultOn, Weathers?.GetCrystal()));
                ret.Add((Climates != null ? Climates.OnOverall : DefaultOn, Climates?.GetCrystal()));
                ret.Add((ShaderParticleGeometries != null ? ShaderParticleGeometries.OnOverall : DefaultOn, ShaderParticleGeometries?.GetCrystal()));
                ret.Add((VisualEffects != null ? VisualEffects.OnOverall : DefaultOn, VisualEffects?.GetCrystal()));
                ret.Add((Regions != null ? Regions.OnOverall : DefaultOn, Regions?.GetCrystal()));
                ret.Add((NavigationMeshInfoMaps != null ? NavigationMeshInfoMaps.OnOverall : DefaultOn, NavigationMeshInfoMaps?.GetCrystal()));
                ret.Add((Cells != null ? Cells.OnOverall : DefaultOn, Cells?.GetCrystal()));
                ret.Add((Worldspaces != null ? Worldspaces.OnOverall : DefaultOn, Worldspaces?.GetCrystal()));
                ret.Add((DialogTopics != null ? DialogTopics.OnOverall : DefaultOn, DialogTopics?.GetCrystal()));
                ret.Add((Quests != null ? Quests.OnOverall : DefaultOn, Quests?.GetCrystal()));
                ret.Add((IdleAnimations != null ? IdleAnimations.OnOverall : DefaultOn, IdleAnimations?.GetCrystal()));
                ret.Add((Packages != null ? Packages.OnOverall : DefaultOn, Packages?.GetCrystal()));
                ret.Add((CombatStyles != null ? CombatStyles.OnOverall : DefaultOn, CombatStyles?.GetCrystal()));
                ret.Add((LoadScreens != null ? LoadScreens.OnOverall : DefaultOn, LoadScreens?.GetCrystal()));
                ret.Add((LeveledSpells != null ? LeveledSpells.OnOverall : DefaultOn, LeveledSpells?.GetCrystal()));
                ret.Add((AnimatedObjects != null ? AnimatedObjects.OnOverall : DefaultOn, AnimatedObjects?.GetCrystal()));
                ret.Add((Waters != null ? Waters.OnOverall : DefaultOn, Waters?.GetCrystal()));
                ret.Add((EffectShaders != null ? EffectShaders.OnOverall : DefaultOn, EffectShaders?.GetCrystal()));
                ret.Add((Explosions != null ? Explosions.OnOverall : DefaultOn, Explosions?.GetCrystal()));
                ret.Add((Debris != null ? Debris.OnOverall : DefaultOn, Debris?.GetCrystal()));
                ret.Add((ImageSpaces != null ? ImageSpaces.OnOverall : DefaultOn, ImageSpaces?.GetCrystal()));
                ret.Add((ImageSpaceAdapters != null ? ImageSpaceAdapters.OnOverall : DefaultOn, ImageSpaceAdapters?.GetCrystal()));
                ret.Add((FormLists != null ? FormLists.OnOverall : DefaultOn, FormLists?.GetCrystal()));
                ret.Add((Perks != null ? Perks.OnOverall : DefaultOn, Perks?.GetCrystal()));
                ret.Add((BodyParts != null ? BodyParts.OnOverall : DefaultOn, BodyParts?.GetCrystal()));
                ret.Add((AddonNodes != null ? AddonNodes.OnOverall : DefaultOn, AddonNodes?.GetCrystal()));
                ret.Add((ActorValueInformation != null ? ActorValueInformation.OnOverall : DefaultOn, ActorValueInformation?.GetCrystal()));
                ret.Add((CameraShots != null ? CameraShots.OnOverall : DefaultOn, CameraShots?.GetCrystal()));
                ret.Add((CameraPaths != null ? CameraPaths.OnOverall : DefaultOn, CameraPaths?.GetCrystal()));
                ret.Add((VoiceTypes != null ? VoiceTypes.OnOverall : DefaultOn, VoiceTypes?.GetCrystal()));
                ret.Add((MaterialTypes != null ? MaterialTypes.OnOverall : DefaultOn, MaterialTypes?.GetCrystal()));
                ret.Add((Impacts != null ? Impacts.OnOverall : DefaultOn, Impacts?.GetCrystal()));
                ret.Add((ImpactDataSets != null ? ImpactDataSets.OnOverall : DefaultOn, ImpactDataSets?.GetCrystal()));
                ret.Add((ArmorAddons != null ? ArmorAddons.OnOverall : DefaultOn, ArmorAddons?.GetCrystal()));
                ret.Add((EncounterZones != null ? EncounterZones.OnOverall : DefaultOn, EncounterZones?.GetCrystal()));
                ret.Add((Locations != null ? Locations.OnOverall : DefaultOn, Locations?.GetCrystal()));
                ret.Add((Messages != null ? Messages.OnOverall : DefaultOn, Messages?.GetCrystal()));
                ret.Add((DefaultObjectManagers != null ? DefaultObjectManagers.OnOverall : DefaultOn, DefaultObjectManagers?.GetCrystal()));
                ret.Add((LightingTemplates != null ? LightingTemplates.OnOverall : DefaultOn, LightingTemplates?.GetCrystal()));
                ret.Add((MusicTypes != null ? MusicTypes.OnOverall : DefaultOn, MusicTypes?.GetCrystal()));
                ret.Add((Footsteps != null ? Footsteps.OnOverall : DefaultOn, Footsteps?.GetCrystal()));
                ret.Add((FootstepSets != null ? FootstepSets.OnOverall : DefaultOn, FootstepSets?.GetCrystal()));
                ret.Add((StoryManagerBranchNodes != null ? StoryManagerBranchNodes.OnOverall : DefaultOn, StoryManagerBranchNodes?.GetCrystal()));
                ret.Add((StoryManagerQuestNodes != null ? StoryManagerQuestNodes.OnOverall : DefaultOn, StoryManagerQuestNodes?.GetCrystal()));
                ret.Add((StoryManagerEventNodes != null ? StoryManagerEventNodes.OnOverall : DefaultOn, StoryManagerEventNodes?.GetCrystal()));
                ret.Add((DialogBranches != null ? DialogBranches.OnOverall : DefaultOn, DialogBranches?.GetCrystal()));
                ret.Add((MusicTracks != null ? MusicTracks.OnOverall : DefaultOn, MusicTracks?.GetCrystal()));
                ret.Add((DialogViews != null ? DialogViews.OnOverall : DefaultOn, DialogViews?.GetCrystal()));
                ret.Add((WordsOfPower != null ? WordsOfPower.OnOverall : DefaultOn, WordsOfPower?.GetCrystal()));
                ret.Add((Shouts != null ? Shouts.OnOverall : DefaultOn, Shouts?.GetCrystal()));
                ret.Add((EquipTypes != null ? EquipTypes.OnOverall : DefaultOn, EquipTypes?.GetCrystal()));
                ret.Add((Relationships != null ? Relationships.OnOverall : DefaultOn, Relationships?.GetCrystal()));
                ret.Add((Scenes != null ? Scenes.OnOverall : DefaultOn, Scenes?.GetCrystal()));
                ret.Add((AssociationTypes != null ? AssociationTypes.OnOverall : DefaultOn, AssociationTypes?.GetCrystal()));
                ret.Add((Outfits != null ? Outfits.OnOverall : DefaultOn, Outfits?.GetCrystal()));
                ret.Add((ArtObjects != null ? ArtObjects.OnOverall : DefaultOn, ArtObjects?.GetCrystal()));
                ret.Add((MaterialObjects != null ? MaterialObjects.OnOverall : DefaultOn, MaterialObjects?.GetCrystal()));
                ret.Add((MovementTypes != null ? MovementTypes.OnOverall : DefaultOn, MovementTypes?.GetCrystal()));
                ret.Add((SoundDescriptors != null ? SoundDescriptors.OnOverall : DefaultOn, SoundDescriptors?.GetCrystal()));
                ret.Add((DualCastData != null ? DualCastData.OnOverall : DefaultOn, DualCastData?.GetCrystal()));
                ret.Add((SoundCategories != null ? SoundCategories.OnOverall : DefaultOn, SoundCategories?.GetCrystal()));
                ret.Add((SoundOutputModels != null ? SoundOutputModels.OnOverall : DefaultOn, SoundOutputModels?.GetCrystal()));
                ret.Add((CollisionLayers != null ? CollisionLayers.OnOverall : DefaultOn, CollisionLayers?.GetCrystal()));
                ret.Add((Colors != null ? Colors.OnOverall : DefaultOn, Colors?.GetCrystal()));
                ret.Add((ReverbParameters != null ? ReverbParameters.OnOverall : DefaultOn, ReverbParameters?.GetCrystal()));
                ret.Add((VolumetricLightings != null ? VolumetricLightings.OnOverall : DefaultOn, VolumetricLightings?.GetCrystal()));
                ret.Add((LensFlares != null ? LensFlares.OnOverall : DefaultOn, LensFlares?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public SkyrimRelease SkyrimRelease { get; }
        public override GameRelease GameRelease => SkyrimRelease.ToGameRelease();
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        IGroup<T>? IMod.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroup? IMod.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        uint IModGetter.GetRecordCount() => this.GetRecordCount();
        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => SkyrimModMixIn.GetEqualsMask(this, (ISkyrimModGetter)rhs, include);
        public override bool CanUseLocalization => true;
        public override bool UsingLocalization
        {
            get => this.ModHeader.Flags.HasFlag(SkyrimModHeader.HeaderFlag.Localized);
            set => this.ModHeader.Flags = this.ModHeader.Flags.SetFlag(SkyrimModHeader.HeaderFlag.Localized, value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IList<MasterReference> IMod.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IMod.NextFormID
        {
            get => this.ModHeader.Stats.NextFormID;
            set => this.ModHeader.Stats.NextFormID = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        uint IModGetter.NextFormID => this.ModHeader.Stats.NextFormID;
        /// <param name="modKey">ModKey to assign to the mod</param>
        /// <param name="release">Release to assign to the mod</param>
        /// <param name="headerVersion">Header version to assign to the mod.  Default value is latest header version the game supports</param>
        /// <param name="forceUseLowerFormIDRanges">Default value of false, which will not use lower FormID ranges from 1-X.  A null value will refer to header version + game release to determine if it should be allowed.  True will force it to always use FormIDs 1-X</param>
        public SkyrimMod(
            ModKey modKey,
            SkyrimRelease release,
            float? headerVersion = null,
            bool? forceUseLowerFormIDRanges = false)
            : base(modKey)
        {
            if (headerVersion != null)
            {
                this.ModHeader.Stats.Version = headerVersion.Value;
            }
            this.SkyrimRelease = release;
            this.ModHeader.Stats.NextFormID = GetDefaultInitialNextFormID(forceUseLowerFormIDRanges: forceUseLowerFormIDRanges);
            _GameSettings_Object = new SkyrimGroup<GameSetting>(this);
            _Keywords_Object = new SkyrimGroup<Keyword>(this);
            _LocationReferenceTypes_Object = new SkyrimGroup<LocationReferenceType>(this);
            _Actions_Object = new SkyrimGroup<ActionRecord>(this);
            _TextureSets_Object = new SkyrimGroup<TextureSet>(this);
            _Globals_Object = new SkyrimGroup<Global>(this);
            _Classes_Object = new SkyrimGroup<Class>(this);
            _Factions_Object = new SkyrimGroup<Faction>(this);
            _HeadParts_Object = new SkyrimGroup<HeadPart>(this);
            _Hairs_Object = new SkyrimGroup<Hair>(this);
            _Eyes_Object = new SkyrimGroup<Eyes>(this);
            _Races_Object = new SkyrimGroup<Race>(this);
            _SoundMarkers_Object = new SkyrimGroup<SoundMarker>(this);
            _AcousticSpaces_Object = new SkyrimGroup<AcousticSpace>(this);
            _MagicEffects_Object = new SkyrimGroup<MagicEffect>(this);
            _LandscapeTextures_Object = new SkyrimGroup<LandscapeTexture>(this);
            _ObjectEffects_Object = new SkyrimGroup<ObjectEffect>(this);
            _Spells_Object = new SkyrimGroup<Spell>(this);
            _Scrolls_Object = new SkyrimGroup<Scroll>(this);
            _Activators_Object = new SkyrimGroup<Activator>(this);
            _TalkingActivators_Object = new SkyrimGroup<TalkingActivator>(this);
            _Armors_Object = new SkyrimGroup<Armor>(this);
            _Books_Object = new SkyrimGroup<Book>(this);
            _Containers_Object = new SkyrimGroup<Container>(this);
            _Doors_Object = new SkyrimGroup<Door>(this);
            _Ingredients_Object = new SkyrimGroup<Ingredient>(this);
            _Lights_Object = new SkyrimGroup<Light>(this);
            _MiscItems_Object = new SkyrimGroup<MiscItem>(this);
            _AlchemicalApparatuses_Object = new SkyrimGroup<AlchemicalApparatus>(this);
            _Statics_Object = new SkyrimGroup<Static>(this);
            _MoveableStatics_Object = new SkyrimGroup<MoveableStatic>(this);
            _Grasses_Object = new SkyrimGroup<Grass>(this);
            _Trees_Object = new SkyrimGroup<Tree>(this);
            _Florae_Object = new SkyrimGroup<Flora>(this);
            _Furniture_Object = new SkyrimGroup<Furniture>(this);
            _Weapons_Object = new SkyrimGroup<Weapon>(this);
            _Ammunitions_Object = new SkyrimGroup<Ammunition>(this);
            _Npcs_Object = new SkyrimGroup<Npc>(this);
            _LeveledNpcs_Object = new SkyrimGroup<LeveledNpc>(this);
            _Keys_Object = new SkyrimGroup<Key>(this);
            _Ingestibles_Object = new SkyrimGroup<Ingestible>(this);
            _IdleMarkers_Object = new SkyrimGroup<IdleMarker>(this);
            _ConstructibleObjects_Object = new SkyrimGroup<ConstructibleObject>(this);
            _Projectiles_Object = new SkyrimGroup<Projectile>(this);
            _Hazards_Object = new SkyrimGroup<Hazard>(this);
            _SoulGems_Object = new SkyrimGroup<SoulGem>(this);
            _LeveledItems_Object = new SkyrimGroup<LeveledItem>(this);
            _Weathers_Object = new SkyrimGroup<Weather>(this);
            _Climates_Object = new SkyrimGroup<Climate>(this);
            _ShaderParticleGeometries_Object = new SkyrimGroup<ShaderParticleGeometry>(this);
            _VisualEffects_Object = new SkyrimGroup<VisualEffect>(this);
            _Regions_Object = new SkyrimGroup<Region>(this);
            _NavigationMeshInfoMaps_Object = new SkyrimGroup<NavigationMeshInfoMap>(this);
            _Worldspaces_Object = new SkyrimGroup<Worldspace>(this);
            _DialogTopics_Object = new SkyrimGroup<DialogTopic>(this);
            _Quests_Object = new SkyrimGroup<Quest>(this);
            _IdleAnimations_Object = new SkyrimGroup<IdleAnimation>(this);
            _Packages_Object = new SkyrimGroup<Package>(this);
            _CombatStyles_Object = new SkyrimGroup<CombatStyle>(this);
            _LoadScreens_Object = new SkyrimGroup<LoadScreen>(this);
            _LeveledSpells_Object = new SkyrimGroup<LeveledSpell>(this);
            _AnimatedObjects_Object = new SkyrimGroup<AnimatedObject>(this);
            _Waters_Object = new SkyrimGroup<Water>(this);
            _EffectShaders_Object = new SkyrimGroup<EffectShader>(this);
            _Explosions_Object = new SkyrimGroup<Explosion>(this);
            _Debris_Object = new SkyrimGroup<Debris>(this);
            _ImageSpaces_Object = new SkyrimGroup<ImageSpace>(this);
            _ImageSpaceAdapters_Object = new SkyrimGroup<ImageSpaceAdapter>(this);
            _FormLists_Object = new SkyrimGroup<FormList>(this);
            _Perks_Object = new SkyrimGroup<Perk>(this);
            _BodyParts_Object = new SkyrimGroup<BodyPartData>(this);
            _AddonNodes_Object = new SkyrimGroup<AddonNode>(this);
            _ActorValueInformation_Object = new SkyrimGroup<ActorValueInformation>(this);
            _CameraShots_Object = new SkyrimGroup<CameraShot>(this);
            _CameraPaths_Object = new SkyrimGroup<CameraPath>(this);
            _VoiceTypes_Object = new SkyrimGroup<VoiceType>(this);
            _MaterialTypes_Object = new SkyrimGroup<MaterialType>(this);
            _Impacts_Object = new SkyrimGroup<Impact>(this);
            _ImpactDataSets_Object = new SkyrimGroup<ImpactDataSet>(this);
            _ArmorAddons_Object = new SkyrimGroup<ArmorAddon>(this);
            _EncounterZones_Object = new SkyrimGroup<EncounterZone>(this);
            _Locations_Object = new SkyrimGroup<Location>(this);
            _Messages_Object = new SkyrimGroup<Message>(this);
            _DefaultObjectManagers_Object = new SkyrimGroup<DefaultObjectManager>(this);
            _LightingTemplates_Object = new SkyrimGroup<LightingTemplate>(this);
            _MusicTypes_Object = new SkyrimGroup<MusicType>(this);
            _Footsteps_Object = new SkyrimGroup<Footstep>(this);
            _FootstepSets_Object = new SkyrimGroup<FootstepSet>(this);
            _StoryManagerBranchNodes_Object = new SkyrimGroup<StoryManagerBranchNode>(this);
            _StoryManagerQuestNodes_Object = new SkyrimGroup<StoryManagerQuestNode>(this);
            _StoryManagerEventNodes_Object = new SkyrimGroup<StoryManagerEventNode>(this);
            _DialogBranches_Object = new SkyrimGroup<DialogBranch>(this);
            _MusicTracks_Object = new SkyrimGroup<MusicTrack>(this);
            _DialogViews_Object = new SkyrimGroup<DialogView>(this);
            _WordsOfPower_Object = new SkyrimGroup<WordOfPower>(this);
            _Shouts_Object = new SkyrimGroup<Shout>(this);
            _EquipTypes_Object = new SkyrimGroup<EquipType>(this);
            _Relationships_Object = new SkyrimGroup<Relationship>(this);
            _Scenes_Object = new SkyrimGroup<Scene>(this);
            _AssociationTypes_Object = new SkyrimGroup<AssociationType>(this);
            _Outfits_Object = new SkyrimGroup<Outfit>(this);
            _ArtObjects_Object = new SkyrimGroup<ArtObject>(this);
            _MaterialObjects_Object = new SkyrimGroup<MaterialObject>(this);
            _MovementTypes_Object = new SkyrimGroup<MovementType>(this);
            _SoundDescriptors_Object = new SkyrimGroup<SoundDescriptor>(this);
            _DualCastData_Object = new SkyrimGroup<DualCastData>(this);
            _SoundCategories_Object = new SkyrimGroup<SoundCategory>(this);
            _SoundOutputModels_Object = new SkyrimGroup<SoundOutputModel>(this);
            _CollisionLayers_Object = new SkyrimGroup<CollisionLayer>(this);
            _Colors_Object = new SkyrimGroup<ColorRecord>(this);
            _ReverbParameters_Object = new SkyrimGroup<ReverbParameters>(this);
            _VolumetricLightings_Object = new SkyrimGroup<VolumetricLighting>(this);
            _LensFlares_Object = new SkyrimGroup<LensFlare>(this);
            CustomCtor();
        }
        public void AddRecords(
            SkyrimMod rhsMod,
            GroupMask? mask = null)
        {
            if (mask?.GameSettings ?? true)
            {
                this.GameSettings.RecordCache.Set(rhsMod.GameSettings.RecordCache.Items);
            }
            if (mask?.Keywords ?? true)
            {
                this.Keywords.RecordCache.Set(rhsMod.Keywords.RecordCache.Items);
            }
            if (mask?.LocationReferenceTypes ?? true)
            {
                this.LocationReferenceTypes.RecordCache.Set(rhsMod.LocationReferenceTypes.RecordCache.Items);
            }
            if (mask?.Actions ?? true)
            {
                this.Actions.RecordCache.Set(rhsMod.Actions.RecordCache.Items);
            }
            if (mask?.TextureSets ?? true)
            {
                this.TextureSets.RecordCache.Set(rhsMod.TextureSets.RecordCache.Items);
            }
            if (mask?.Globals ?? true)
            {
                this.Globals.RecordCache.Set(rhsMod.Globals.RecordCache.Items);
            }
            if (mask?.Classes ?? true)
            {
                this.Classes.RecordCache.Set(rhsMod.Classes.RecordCache.Items);
            }
            if (mask?.Factions ?? true)
            {
                this.Factions.RecordCache.Set(rhsMod.Factions.RecordCache.Items);
            }
            if (mask?.HeadParts ?? true)
            {
                this.HeadParts.RecordCache.Set(rhsMod.HeadParts.RecordCache.Items);
            }
            if (mask?.Hairs ?? true)
            {
                this.Hairs.RecordCache.Set(rhsMod.Hairs.RecordCache.Items);
            }
            if (mask?.Eyes ?? true)
            {
                this.Eyes.RecordCache.Set(rhsMod.Eyes.RecordCache.Items);
            }
            if (mask?.Races ?? true)
            {
                this.Races.RecordCache.Set(rhsMod.Races.RecordCache.Items);
            }
            if (mask?.SoundMarkers ?? true)
            {
                this.SoundMarkers.RecordCache.Set(rhsMod.SoundMarkers.RecordCache.Items);
            }
            if (mask?.AcousticSpaces ?? true)
            {
                this.AcousticSpaces.RecordCache.Set(rhsMod.AcousticSpaces.RecordCache.Items);
            }
            if (mask?.MagicEffects ?? true)
            {
                this.MagicEffects.RecordCache.Set(rhsMod.MagicEffects.RecordCache.Items);
            }
            if (mask?.LandscapeTextures ?? true)
            {
                this.LandscapeTextures.RecordCache.Set(rhsMod.LandscapeTextures.RecordCache.Items);
            }
            if (mask?.ObjectEffects ?? true)
            {
                this.ObjectEffects.RecordCache.Set(rhsMod.ObjectEffects.RecordCache.Items);
            }
            if (mask?.Spells ?? true)
            {
                this.Spells.RecordCache.Set(rhsMod.Spells.RecordCache.Items);
            }
            if (mask?.Scrolls ?? true)
            {
                this.Scrolls.RecordCache.Set(rhsMod.Scrolls.RecordCache.Items);
            }
            if (mask?.Activators ?? true)
            {
                this.Activators.RecordCache.Set(rhsMod.Activators.RecordCache.Items);
            }
            if (mask?.TalkingActivators ?? true)
            {
                this.TalkingActivators.RecordCache.Set(rhsMod.TalkingActivators.RecordCache.Items);
            }
            if (mask?.Armors ?? true)
            {
                this.Armors.RecordCache.Set(rhsMod.Armors.RecordCache.Items);
            }
            if (mask?.Books ?? true)
            {
                this.Books.RecordCache.Set(rhsMod.Books.RecordCache.Items);
            }
            if (mask?.Containers ?? true)
            {
                this.Containers.RecordCache.Set(rhsMod.Containers.RecordCache.Items);
            }
            if (mask?.Doors ?? true)
            {
                this.Doors.RecordCache.Set(rhsMod.Doors.RecordCache.Items);
            }
            if (mask?.Ingredients ?? true)
            {
                this.Ingredients.RecordCache.Set(rhsMod.Ingredients.RecordCache.Items);
            }
            if (mask?.Lights ?? true)
            {
                this.Lights.RecordCache.Set(rhsMod.Lights.RecordCache.Items);
            }
            if (mask?.MiscItems ?? true)
            {
                this.MiscItems.RecordCache.Set(rhsMod.MiscItems.RecordCache.Items);
            }
            if (mask?.AlchemicalApparatuses ?? true)
            {
                this.AlchemicalApparatuses.RecordCache.Set(rhsMod.AlchemicalApparatuses.RecordCache.Items);
            }
            if (mask?.Statics ?? true)
            {
                this.Statics.RecordCache.Set(rhsMod.Statics.RecordCache.Items);
            }
            if (mask?.MoveableStatics ?? true)
            {
                this.MoveableStatics.RecordCache.Set(rhsMod.MoveableStatics.RecordCache.Items);
            }
            if (mask?.Grasses ?? true)
            {
                this.Grasses.RecordCache.Set(rhsMod.Grasses.RecordCache.Items);
            }
            if (mask?.Trees ?? true)
            {
                this.Trees.RecordCache.Set(rhsMod.Trees.RecordCache.Items);
            }
            if (mask?.Florae ?? true)
            {
                this.Florae.RecordCache.Set(rhsMod.Florae.RecordCache.Items);
            }
            if (mask?.Furniture ?? true)
            {
                this.Furniture.RecordCache.Set(rhsMod.Furniture.RecordCache.Items);
            }
            if (mask?.Weapons ?? true)
            {
                this.Weapons.RecordCache.Set(rhsMod.Weapons.RecordCache.Items);
            }
            if (mask?.Ammunitions ?? true)
            {
                this.Ammunitions.RecordCache.Set(rhsMod.Ammunitions.RecordCache.Items);
            }
            if (mask?.Npcs ?? true)
            {
                this.Npcs.RecordCache.Set(rhsMod.Npcs.RecordCache.Items);
            }
            if (mask?.LeveledNpcs ?? true)
            {
                this.LeveledNpcs.RecordCache.Set(rhsMod.LeveledNpcs.RecordCache.Items);
            }
            if (mask?.Keys ?? true)
            {
                this.Keys.RecordCache.Set(rhsMod.Keys.RecordCache.Items);
            }
            if (mask?.Ingestibles ?? true)
            {
                this.Ingestibles.RecordCache.Set(rhsMod.Ingestibles.RecordCache.Items);
            }
            if (mask?.IdleMarkers ?? true)
            {
                this.IdleMarkers.RecordCache.Set(rhsMod.IdleMarkers.RecordCache.Items);
            }
            if (mask?.ConstructibleObjects ?? true)
            {
                this.ConstructibleObjects.RecordCache.Set(rhsMod.ConstructibleObjects.RecordCache.Items);
            }
            if (mask?.Projectiles ?? true)
            {
                this.Projectiles.RecordCache.Set(rhsMod.Projectiles.RecordCache.Items);
            }
            if (mask?.Hazards ?? true)
            {
                this.Hazards.RecordCache.Set(rhsMod.Hazards.RecordCache.Items);
            }
            if (mask?.SoulGems ?? true)
            {
                this.SoulGems.RecordCache.Set(rhsMod.SoulGems.RecordCache.Items);
            }
            if (mask?.LeveledItems ?? true)
            {
                this.LeveledItems.RecordCache.Set(rhsMod.LeveledItems.RecordCache.Items);
            }
            if (mask?.Weathers ?? true)
            {
                this.Weathers.RecordCache.Set(rhsMod.Weathers.RecordCache.Items);
            }
            if (mask?.Climates ?? true)
            {
                this.Climates.RecordCache.Set(rhsMod.Climates.RecordCache.Items);
            }
            if (mask?.ShaderParticleGeometries ?? true)
            {
                this.ShaderParticleGeometries.RecordCache.Set(rhsMod.ShaderParticleGeometries.RecordCache.Items);
            }
            if (mask?.VisualEffects ?? true)
            {
                this.VisualEffects.RecordCache.Set(rhsMod.VisualEffects.RecordCache.Items);
            }
            if (mask?.Regions ?? true)
            {
                this.Regions.RecordCache.Set(rhsMod.Regions.RecordCache.Items);
            }
            if (mask?.NavigationMeshInfoMaps ?? true)
            {
                this.NavigationMeshInfoMaps.RecordCache.Set(rhsMod.NavigationMeshInfoMaps.RecordCache.Items);
            }
            if (mask?.Cells ?? true)
            {
                if (rhsMod.Cells.Records.Count > 0)
                {
                    throw new NotImplementedException("Cell additions need implementing");
                }
            }
            if (mask?.Worldspaces ?? true)
            {
                this.Worldspaces.RecordCache.Set(rhsMod.Worldspaces.RecordCache.Items);
            }
            if (mask?.DialogTopics ?? true)
            {
                this.DialogTopics.RecordCache.Set(rhsMod.DialogTopics.RecordCache.Items);
            }
            if (mask?.Quests ?? true)
            {
                this.Quests.RecordCache.Set(rhsMod.Quests.RecordCache.Items);
            }
            if (mask?.IdleAnimations ?? true)
            {
                this.IdleAnimations.RecordCache.Set(rhsMod.IdleAnimations.RecordCache.Items);
            }
            if (mask?.Packages ?? true)
            {
                this.Packages.RecordCache.Set(rhsMod.Packages.RecordCache.Items);
            }
            if (mask?.CombatStyles ?? true)
            {
                this.CombatStyles.RecordCache.Set(rhsMod.CombatStyles.RecordCache.Items);
            }
            if (mask?.LoadScreens ?? true)
            {
                this.LoadScreens.RecordCache.Set(rhsMod.LoadScreens.RecordCache.Items);
            }
            if (mask?.LeveledSpells ?? true)
            {
                this.LeveledSpells.RecordCache.Set(rhsMod.LeveledSpells.RecordCache.Items);
            }
            if (mask?.AnimatedObjects ?? true)
            {
                this.AnimatedObjects.RecordCache.Set(rhsMod.AnimatedObjects.RecordCache.Items);
            }
            if (mask?.Waters ?? true)
            {
                this.Waters.RecordCache.Set(rhsMod.Waters.RecordCache.Items);
            }
            if (mask?.EffectShaders ?? true)
            {
                this.EffectShaders.RecordCache.Set(rhsMod.EffectShaders.RecordCache.Items);
            }
            if (mask?.Explosions ?? true)
            {
                this.Explosions.RecordCache.Set(rhsMod.Explosions.RecordCache.Items);
            }
            if (mask?.Debris ?? true)
            {
                this.Debris.RecordCache.Set(rhsMod.Debris.RecordCache.Items);
            }
            if (mask?.ImageSpaces ?? true)
            {
                this.ImageSpaces.RecordCache.Set(rhsMod.ImageSpaces.RecordCache.Items);
            }
            if (mask?.ImageSpaceAdapters ?? true)
            {
                this.ImageSpaceAdapters.RecordCache.Set(rhsMod.ImageSpaceAdapters.RecordCache.Items);
            }
            if (mask?.FormLists ?? true)
            {
                this.FormLists.RecordCache.Set(rhsMod.FormLists.RecordCache.Items);
            }
            if (mask?.Perks ?? true)
            {
                this.Perks.RecordCache.Set(rhsMod.Perks.RecordCache.Items);
            }
            if (mask?.BodyParts ?? true)
            {
                this.BodyParts.RecordCache.Set(rhsMod.BodyParts.RecordCache.Items);
            }
            if (mask?.AddonNodes ?? true)
            {
                this.AddonNodes.RecordCache.Set(rhsMod.AddonNodes.RecordCache.Items);
            }
            if (mask?.ActorValueInformation ?? true)
            {
                this.ActorValueInformation.RecordCache.Set(rhsMod.ActorValueInformation.RecordCache.Items);
            }
            if (mask?.CameraShots ?? true)
            {
                this.CameraShots.RecordCache.Set(rhsMod.CameraShots.RecordCache.Items);
            }
            if (mask?.CameraPaths ?? true)
            {
                this.CameraPaths.RecordCache.Set(rhsMod.CameraPaths.RecordCache.Items);
            }
            if (mask?.VoiceTypes ?? true)
            {
                this.VoiceTypes.RecordCache.Set(rhsMod.VoiceTypes.RecordCache.Items);
            }
            if (mask?.MaterialTypes ?? true)
            {
                this.MaterialTypes.RecordCache.Set(rhsMod.MaterialTypes.RecordCache.Items);
            }
            if (mask?.Impacts ?? true)
            {
                this.Impacts.RecordCache.Set(rhsMod.Impacts.RecordCache.Items);
            }
            if (mask?.ImpactDataSets ?? true)
            {
                this.ImpactDataSets.RecordCache.Set(rhsMod.ImpactDataSets.RecordCache.Items);
            }
            if (mask?.ArmorAddons ?? true)
            {
                this.ArmorAddons.RecordCache.Set(rhsMod.ArmorAddons.RecordCache.Items);
            }
            if (mask?.EncounterZones ?? true)
            {
                this.EncounterZones.RecordCache.Set(rhsMod.EncounterZones.RecordCache.Items);
            }
            if (mask?.Locations ?? true)
            {
                this.Locations.RecordCache.Set(rhsMod.Locations.RecordCache.Items);
            }
            if (mask?.Messages ?? true)
            {
                this.Messages.RecordCache.Set(rhsMod.Messages.RecordCache.Items);
            }
            if (mask?.DefaultObjectManagers ?? true)
            {
                this.DefaultObjectManagers.RecordCache.Set(rhsMod.DefaultObjectManagers.RecordCache.Items);
            }
            if (mask?.LightingTemplates ?? true)
            {
                this.LightingTemplates.RecordCache.Set(rhsMod.LightingTemplates.RecordCache.Items);
            }
            if (mask?.MusicTypes ?? true)
            {
                this.MusicTypes.RecordCache.Set(rhsMod.MusicTypes.RecordCache.Items);
            }
            if (mask?.Footsteps ?? true)
            {
                this.Footsteps.RecordCache.Set(rhsMod.Footsteps.RecordCache.Items);
            }
            if (mask?.FootstepSets ?? true)
            {
                this.FootstepSets.RecordCache.Set(rhsMod.FootstepSets.RecordCache.Items);
            }
            if (mask?.StoryManagerBranchNodes ?? true)
            {
                this.StoryManagerBranchNodes.RecordCache.Set(rhsMod.StoryManagerBranchNodes.RecordCache.Items);
            }
            if (mask?.StoryManagerQuestNodes ?? true)
            {
                this.StoryManagerQuestNodes.RecordCache.Set(rhsMod.StoryManagerQuestNodes.RecordCache.Items);
            }
            if (mask?.StoryManagerEventNodes ?? true)
            {
                this.StoryManagerEventNodes.RecordCache.Set(rhsMod.StoryManagerEventNodes.RecordCache.Items);
            }
            if (mask?.DialogBranches ?? true)
            {
                this.DialogBranches.RecordCache.Set(rhsMod.DialogBranches.RecordCache.Items);
            }
            if (mask?.MusicTracks ?? true)
            {
                this.MusicTracks.RecordCache.Set(rhsMod.MusicTracks.RecordCache.Items);
            }
            if (mask?.DialogViews ?? true)
            {
                this.DialogViews.RecordCache.Set(rhsMod.DialogViews.RecordCache.Items);
            }
            if (mask?.WordsOfPower ?? true)
            {
                this.WordsOfPower.RecordCache.Set(rhsMod.WordsOfPower.RecordCache.Items);
            }
            if (mask?.Shouts ?? true)
            {
                this.Shouts.RecordCache.Set(rhsMod.Shouts.RecordCache.Items);
            }
            if (mask?.EquipTypes ?? true)
            {
                this.EquipTypes.RecordCache.Set(rhsMod.EquipTypes.RecordCache.Items);
            }
            if (mask?.Relationships ?? true)
            {
                this.Relationships.RecordCache.Set(rhsMod.Relationships.RecordCache.Items);
            }
            if (mask?.Scenes ?? true)
            {
                this.Scenes.RecordCache.Set(rhsMod.Scenes.RecordCache.Items);
            }
            if (mask?.AssociationTypes ?? true)
            {
                this.AssociationTypes.RecordCache.Set(rhsMod.AssociationTypes.RecordCache.Items);
            }
            if (mask?.Outfits ?? true)
            {
                this.Outfits.RecordCache.Set(rhsMod.Outfits.RecordCache.Items);
            }
            if (mask?.ArtObjects ?? true)
            {
                this.ArtObjects.RecordCache.Set(rhsMod.ArtObjects.RecordCache.Items);
            }
            if (mask?.MaterialObjects ?? true)
            {
                this.MaterialObjects.RecordCache.Set(rhsMod.MaterialObjects.RecordCache.Items);
            }
            if (mask?.MovementTypes ?? true)
            {
                this.MovementTypes.RecordCache.Set(rhsMod.MovementTypes.RecordCache.Items);
            }
            if (mask?.SoundDescriptors ?? true)
            {
                this.SoundDescriptors.RecordCache.Set(rhsMod.SoundDescriptors.RecordCache.Items);
            }
            if (mask?.DualCastData ?? true)
            {
                this.DualCastData.RecordCache.Set(rhsMod.DualCastData.RecordCache.Items);
            }
            if (mask?.SoundCategories ?? true)
            {
                this.SoundCategories.RecordCache.Set(rhsMod.SoundCategories.RecordCache.Items);
            }
            if (mask?.SoundOutputModels ?? true)
            {
                this.SoundOutputModels.RecordCache.Set(rhsMod.SoundOutputModels.RecordCache.Items);
            }
            if (mask?.CollisionLayers ?? true)
            {
                this.CollisionLayers.RecordCache.Set(rhsMod.CollisionLayers.RecordCache.Items);
            }
            if (mask?.Colors ?? true)
            {
                this.Colors.RecordCache.Set(rhsMod.Colors.RecordCache.Items);
            }
            if (mask?.ReverbParameters ?? true)
            {
                this.ReverbParameters.RecordCache.Set(rhsMod.ReverbParameters.RecordCache.Items);
            }
            if (mask?.VolumetricLightings ?? true)
            {
                this.VolumetricLightings.RecordCache.Set(rhsMod.VolumetricLightings.RecordCache.Items);
            }
            if (mask?.LensFlares ?? true)
            {
                this.LensFlares.RecordCache.Set(rhsMod.LensFlares.RecordCache.Items);
            }
        }

        public override void SyncRecordCount()
        {
            this.ModHeader.Stats.NumRecords = this.GetRecordCount();
        }

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SkyrimModCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SkyrimModSetterCommon.Instance.RemapLinks(this, mapping);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecord> IMajorRecordEnumerable.EnumerateMajorRecords(Type? type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey) => this.Remove(formKey);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys) => this.Remove(formKeys);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<IFormLinkIdentifier> formLinks) => this.Remove(formLinks);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(FormKey formKey, Type type, bool throwIfUnknown) => this.Remove(formKey, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(HashSet<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove(IEnumerable<FormKey> formKeys, Type type, bool throwIfUnknown) => this.Remove(formKeys, type, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(FormKey formKey, bool throwIfUnknown) => this.Remove<TMajor>(formKey, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(HashSet<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<FormKey> formKeys, bool throwIfUnknown) => this.Remove<TMajor>(formKeys, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(TMajor record, bool throwIfUnknown) => this.Remove<TMajor>(record, throwIfUnknown);
        [DebuggerStepThrough]
        void IMajorRecordEnumerable.Remove<TMajor>(IEnumerable<TMajor> records, bool throwIfUnknown) => this.Remove<TMajor>(records, throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<ISkyrimMod, ISkyrimModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<ISkyrimMod, ISkyrimModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<ISkyrimMod, ISkyrimModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<ISkyrimMod, ISkyrimModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SkyrimModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks() => SkyrimModSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => SkyrimModSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => SkyrimModSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        #region Binary Create
        public static SkyrimMod CreateFromBinary(
            ModPath path,
            SkyrimRelease release,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)SkyrimModHeader.HeaderFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(gameRelease, path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam);
                    }
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static SkyrimMod CreateFromBinary(
            ModPath path,
            SkyrimRelease release,
            ErrorMaskBuilder? errorMask,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)SkyrimModHeader.HeaderFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(gameRelease, path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam);
                    }
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static SkyrimMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            SkyrimRelease release,
            RecordTypeInfoCacheReader infoCache,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        public static SkyrimMod CreateFromBinary(
            Stream stream,
            ModKey modKey,
            SkyrimRelease release,
            RecordTypeInfoCacheReader infoCache,
            ErrorMaskBuilder? errorMask,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    return CreateFromBinary(
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        #endregion

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            ModPath path,
            SkyrimRelease release,
            BinaryReadParameters? param = null)
        {
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                path: path,
                release: release,
                param: param);
        }

        public static ISkyrimModDisposableGetter CreateFromBinaryOverlay(
            Stream stream,
            SkyrimRelease release,
            ModKey modKey,
            BinaryReadParameters? param = null)
        {
            param ??= BinaryReadParameters.Default;
            var meta = ParsingMeta.Factory(param, release.ToGameRelease(), modKey, stream);
            return SkyrimModBinaryOverlay.SkyrimModFactory(
                stream: new MutagenBinaryReadStream(stream, meta),
                modKey: modKey,
                release: release,
                shouldDispose: false);
        }

        public static SkyrimMod CreateFromBinary(
            MutagenFrame frame,
            SkyrimRelease release,
            GroupMask? importMask = null)
        {
            try
            {
                var ret = new SkyrimMod(
                    modKey: frame.MetaData.ModKey,
                    release: release);
                ((SkyrimModSetterCommon)((ISkyrimModGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                    item: ret,
                    frame: frame,
                    release: release,
                    importMask: importMask);
                return ret;
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, frame.MetaData.ModKey);
                throw;
            }
        }

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static SkyrimMod GetNew()
        {
            return new SkyrimMod();
        }

    }
    #endregion

    #region Interface
    public partial interface ISkyrimMod :
        IAssetLinkContainer,
        IContextMod<ISkyrimMod, ISkyrimModGetter>,
        IFormLinkContainer,
        ILoquiObjectSetter<ISkyrimMod>,
        IMajorRecordEnumerable,
        IMod,
        ISkyrimModGetter
    {
        new SkyrimModHeader ModHeader { get; }
        new SkyrimGroup<GameSetting> GameSettings { get; }
        new SkyrimGroup<Keyword> Keywords { get; }
        new SkyrimGroup<LocationReferenceType> LocationReferenceTypes { get; }
        new SkyrimGroup<ActionRecord> Actions { get; }
        new SkyrimGroup<TextureSet> TextureSets { get; }
        new SkyrimGroup<Global> Globals { get; }
        new SkyrimGroup<Class> Classes { get; }
        new SkyrimGroup<Faction> Factions { get; }
        new SkyrimGroup<HeadPart> HeadParts { get; }
        new SkyrimGroup<Hair> Hairs { get; }
        new SkyrimGroup<Eyes> Eyes { get; }
        new SkyrimGroup<Race> Races { get; }
        new SkyrimGroup<SoundMarker> SoundMarkers { get; }
        new SkyrimGroup<AcousticSpace> AcousticSpaces { get; }
        new SkyrimGroup<MagicEffect> MagicEffects { get; }
        new SkyrimGroup<LandscapeTexture> LandscapeTextures { get; }
        new SkyrimGroup<ObjectEffect> ObjectEffects { get; }
        new SkyrimGroup<Spell> Spells { get; }
        new SkyrimGroup<Scroll> Scrolls { get; }
        new SkyrimGroup<Activator> Activators { get; }
        new SkyrimGroup<TalkingActivator> TalkingActivators { get; }
        new SkyrimGroup<Armor> Armors { get; }
        new SkyrimGroup<Book> Books { get; }
        new SkyrimGroup<Container> Containers { get; }
        new SkyrimGroup<Door> Doors { get; }
        new SkyrimGroup<Ingredient> Ingredients { get; }
        new SkyrimGroup<Light> Lights { get; }
        new SkyrimGroup<MiscItem> MiscItems { get; }
        new SkyrimGroup<AlchemicalApparatus> AlchemicalApparatuses { get; }
        new SkyrimGroup<Static> Statics { get; }
        new SkyrimGroup<MoveableStatic> MoveableStatics { get; }
        new SkyrimGroup<Grass> Grasses { get; }
        new SkyrimGroup<Tree> Trees { get; }
        new SkyrimGroup<Flora> Florae { get; }
        new SkyrimGroup<Furniture> Furniture { get; }
        new SkyrimGroup<Weapon> Weapons { get; }
        new SkyrimGroup<Ammunition> Ammunitions { get; }
        new SkyrimGroup<Npc> Npcs { get; }
        new SkyrimGroup<LeveledNpc> LeveledNpcs { get; }
        new SkyrimGroup<Key> Keys { get; }
        new SkyrimGroup<Ingestible> Ingestibles { get; }
        new SkyrimGroup<IdleMarker> IdleMarkers { get; }
        new SkyrimGroup<ConstructibleObject> ConstructibleObjects { get; }
        new SkyrimGroup<Projectile> Projectiles { get; }
        new SkyrimGroup<Hazard> Hazards { get; }
        new SkyrimGroup<SoulGem> SoulGems { get; }
        new SkyrimGroup<LeveledItem> LeveledItems { get; }
        new SkyrimGroup<Weather> Weathers { get; }
        new SkyrimGroup<Climate> Climates { get; }
        new SkyrimGroup<ShaderParticleGeometry> ShaderParticleGeometries { get; }
        new SkyrimGroup<VisualEffect> VisualEffects { get; }
        new SkyrimGroup<Region> Regions { get; }
        new SkyrimGroup<NavigationMeshInfoMap> NavigationMeshInfoMaps { get; }
        new SkyrimListGroup<CellBlock> Cells { get; }
        new SkyrimGroup<Worldspace> Worldspaces { get; }
        new SkyrimGroup<DialogTopic> DialogTopics { get; }
        new SkyrimGroup<Quest> Quests { get; }
        new SkyrimGroup<IdleAnimation> IdleAnimations { get; }
        new SkyrimGroup<Package> Packages { get; }
        new SkyrimGroup<CombatStyle> CombatStyles { get; }
        new SkyrimGroup<LoadScreen> LoadScreens { get; }
        new SkyrimGroup<LeveledSpell> LeveledSpells { get; }
        new SkyrimGroup<AnimatedObject> AnimatedObjects { get; }
        new SkyrimGroup<Water> Waters { get; }
        new SkyrimGroup<EffectShader> EffectShaders { get; }
        new SkyrimGroup<Explosion> Explosions { get; }
        new SkyrimGroup<Debris> Debris { get; }
        new SkyrimGroup<ImageSpace> ImageSpaces { get; }
        new SkyrimGroup<ImageSpaceAdapter> ImageSpaceAdapters { get; }
        new SkyrimGroup<FormList> FormLists { get; }
        new SkyrimGroup<Perk> Perks { get; }
        new SkyrimGroup<BodyPartData> BodyParts { get; }
        new SkyrimGroup<AddonNode> AddonNodes { get; }
        new SkyrimGroup<ActorValueInformation> ActorValueInformation { get; }
        new SkyrimGroup<CameraShot> CameraShots { get; }
        new SkyrimGroup<CameraPath> CameraPaths { get; }
        new SkyrimGroup<VoiceType> VoiceTypes { get; }
        new SkyrimGroup<MaterialType> MaterialTypes { get; }
        new SkyrimGroup<Impact> Impacts { get; }
        new SkyrimGroup<ImpactDataSet> ImpactDataSets { get; }
        new SkyrimGroup<ArmorAddon> ArmorAddons { get; }
        new SkyrimGroup<EncounterZone> EncounterZones { get; }
        new SkyrimGroup<Location> Locations { get; }
        new SkyrimGroup<Message> Messages { get; }
        new SkyrimGroup<DefaultObjectManager> DefaultObjectManagers { get; }
        new SkyrimGroup<LightingTemplate> LightingTemplates { get; }
        new SkyrimGroup<MusicType> MusicTypes { get; }
        new SkyrimGroup<Footstep> Footsteps { get; }
        new SkyrimGroup<FootstepSet> FootstepSets { get; }
        new SkyrimGroup<StoryManagerBranchNode> StoryManagerBranchNodes { get; }
        new SkyrimGroup<StoryManagerQuestNode> StoryManagerQuestNodes { get; }
        new SkyrimGroup<StoryManagerEventNode> StoryManagerEventNodes { get; }
        new SkyrimGroup<DialogBranch> DialogBranches { get; }
        new SkyrimGroup<MusicTrack> MusicTracks { get; }
        new SkyrimGroup<DialogView> DialogViews { get; }
        new SkyrimGroup<WordOfPower> WordsOfPower { get; }
        new SkyrimGroup<Shout> Shouts { get; }
        new SkyrimGroup<EquipType> EquipTypes { get; }
        new SkyrimGroup<Relationship> Relationships { get; }
        new SkyrimGroup<Scene> Scenes { get; }
        new SkyrimGroup<AssociationType> AssociationTypes { get; }
        new SkyrimGroup<Outfit> Outfits { get; }
        new SkyrimGroup<ArtObject> ArtObjects { get; }
        new SkyrimGroup<MaterialObject> MaterialObjects { get; }
        new SkyrimGroup<MovementType> MovementTypes { get; }
        new SkyrimGroup<SoundDescriptor> SoundDescriptors { get; }
        new SkyrimGroup<DualCastData> DualCastData { get; }
        new SkyrimGroup<SoundCategory> SoundCategories { get; }
        new SkyrimGroup<SoundOutputModel> SoundOutputModels { get; }
        new SkyrimGroup<CollisionLayer> CollisionLayers { get; }
        new SkyrimGroup<ColorRecord> Colors { get; }
        new SkyrimGroup<ReverbParameters> ReverbParameters { get; }
        new SkyrimGroup<VolumetricLighting> VolumetricLightings { get; }
        new SkyrimGroup<LensFlare> LensFlares { get; }
    }

    public partial interface ISkyrimModGetter :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IContextGetterMod<ISkyrimMod, ISkyrimModGetter>,
        IFormLinkContainerGetter,
        ILoquiObject<ISkyrimModGetter>,
        IMajorRecordContextEnumerable<ISkyrimMod, ISkyrimModGetter>,
        IMajorRecordGetterEnumerable,
        IModGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => SkyrimMod_Registration.Instance;
        ISkyrimModHeaderGetter ModHeader { get; }
        ISkyrimGroupGetter<IGameSettingGetter> GameSettings { get; }
        ISkyrimGroupGetter<IKeywordGetter> Keywords { get; }
        ISkyrimGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes { get; }
        ISkyrimGroupGetter<IActionRecordGetter> Actions { get; }
        ISkyrimGroupGetter<ITextureSetGetter> TextureSets { get; }
        ISkyrimGroupGetter<IGlobalGetter> Globals { get; }
        ISkyrimGroupGetter<IClassGetter> Classes { get; }
        ISkyrimGroupGetter<IFactionGetter> Factions { get; }
        ISkyrimGroupGetter<IHeadPartGetter> HeadParts { get; }
        ISkyrimGroupGetter<IHairGetter> Hairs { get; }
        ISkyrimGroupGetter<IEyesGetter> Eyes { get; }
        ISkyrimGroupGetter<IRaceGetter> Races { get; }
        ISkyrimGroupGetter<ISoundMarkerGetter> SoundMarkers { get; }
        ISkyrimGroupGetter<IAcousticSpaceGetter> AcousticSpaces { get; }
        ISkyrimGroupGetter<IMagicEffectGetter> MagicEffects { get; }
        ISkyrimGroupGetter<ILandscapeTextureGetter> LandscapeTextures { get; }
        ISkyrimGroupGetter<IObjectEffectGetter> ObjectEffects { get; }
        ISkyrimGroupGetter<ISpellGetter> Spells { get; }
        ISkyrimGroupGetter<IScrollGetter> Scrolls { get; }
        ISkyrimGroupGetter<IActivatorGetter> Activators { get; }
        ISkyrimGroupGetter<ITalkingActivatorGetter> TalkingActivators { get; }
        ISkyrimGroupGetter<IArmorGetter> Armors { get; }
        ISkyrimGroupGetter<IBookGetter> Books { get; }
        ISkyrimGroupGetter<IContainerGetter> Containers { get; }
        ISkyrimGroupGetter<IDoorGetter> Doors { get; }
        ISkyrimGroupGetter<IIngredientGetter> Ingredients { get; }
        ISkyrimGroupGetter<ILightGetter> Lights { get; }
        ISkyrimGroupGetter<IMiscItemGetter> MiscItems { get; }
        ISkyrimGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatuses { get; }
        ISkyrimGroupGetter<IStaticGetter> Statics { get; }
        ISkyrimGroupGetter<IMoveableStaticGetter> MoveableStatics { get; }
        ISkyrimGroupGetter<IGrassGetter> Grasses { get; }
        ISkyrimGroupGetter<ITreeGetter> Trees { get; }
        ISkyrimGroupGetter<IFloraGetter> Florae { get; }
        ISkyrimGroupGetter<IFurnitureGetter> Furniture { get; }
        ISkyrimGroupGetter<IWeaponGetter> Weapons { get; }
        ISkyrimGroupGetter<IAmmunitionGetter> Ammunitions { get; }
        ISkyrimGroupGetter<INpcGetter> Npcs { get; }
        ISkyrimGroupGetter<ILeveledNpcGetter> LeveledNpcs { get; }
        ISkyrimGroupGetter<IKeyGetter> Keys { get; }
        ISkyrimGroupGetter<IIngestibleGetter> Ingestibles { get; }
        ISkyrimGroupGetter<IIdleMarkerGetter> IdleMarkers { get; }
        ISkyrimGroupGetter<IConstructibleObjectGetter> ConstructibleObjects { get; }
        ISkyrimGroupGetter<IProjectileGetter> Projectiles { get; }
        ISkyrimGroupGetter<IHazardGetter> Hazards { get; }
        ISkyrimGroupGetter<ISoulGemGetter> SoulGems { get; }
        ISkyrimGroupGetter<ILeveledItemGetter> LeveledItems { get; }
        ISkyrimGroupGetter<IWeatherGetter> Weathers { get; }
        ISkyrimGroupGetter<IClimateGetter> Climates { get; }
        ISkyrimGroupGetter<IShaderParticleGeometryGetter> ShaderParticleGeometries { get; }
        ISkyrimGroupGetter<IVisualEffectGetter> VisualEffects { get; }
        ISkyrimGroupGetter<IRegionGetter> Regions { get; }
        ISkyrimGroupGetter<INavigationMeshInfoMapGetter> NavigationMeshInfoMaps { get; }
        ISkyrimListGroupGetter<ICellBlockGetter> Cells { get; }
        ISkyrimGroupGetter<IWorldspaceGetter> Worldspaces { get; }
        ISkyrimGroupGetter<IDialogTopicGetter> DialogTopics { get; }
        ISkyrimGroupGetter<IQuestGetter> Quests { get; }
        ISkyrimGroupGetter<IIdleAnimationGetter> IdleAnimations { get; }
        ISkyrimGroupGetter<IPackageGetter> Packages { get; }
        ISkyrimGroupGetter<ICombatStyleGetter> CombatStyles { get; }
        ISkyrimGroupGetter<ILoadScreenGetter> LoadScreens { get; }
        ISkyrimGroupGetter<ILeveledSpellGetter> LeveledSpells { get; }
        ISkyrimGroupGetter<IAnimatedObjectGetter> AnimatedObjects { get; }
        ISkyrimGroupGetter<IWaterGetter> Waters { get; }
        ISkyrimGroupGetter<IEffectShaderGetter> EffectShaders { get; }
        ISkyrimGroupGetter<IExplosionGetter> Explosions { get; }
        ISkyrimGroupGetter<IDebrisGetter> Debris { get; }
        ISkyrimGroupGetter<IImageSpaceGetter> ImageSpaces { get; }
        ISkyrimGroupGetter<IImageSpaceAdapterGetter> ImageSpaceAdapters { get; }
        ISkyrimGroupGetter<IFormListGetter> FormLists { get; }
        ISkyrimGroupGetter<IPerkGetter> Perks { get; }
        ISkyrimGroupGetter<IBodyPartDataGetter> BodyParts { get; }
        ISkyrimGroupGetter<IAddonNodeGetter> AddonNodes { get; }
        ISkyrimGroupGetter<IActorValueInformationGetter> ActorValueInformation { get; }
        ISkyrimGroupGetter<ICameraShotGetter> CameraShots { get; }
        ISkyrimGroupGetter<ICameraPathGetter> CameraPaths { get; }
        ISkyrimGroupGetter<IVoiceTypeGetter> VoiceTypes { get; }
        ISkyrimGroupGetter<IMaterialTypeGetter> MaterialTypes { get; }
        ISkyrimGroupGetter<IImpactGetter> Impacts { get; }
        ISkyrimGroupGetter<IImpactDataSetGetter> ImpactDataSets { get; }
        ISkyrimGroupGetter<IArmorAddonGetter> ArmorAddons { get; }
        ISkyrimGroupGetter<IEncounterZoneGetter> EncounterZones { get; }
        ISkyrimGroupGetter<ILocationGetter> Locations { get; }
        ISkyrimGroupGetter<IMessageGetter> Messages { get; }
        ISkyrimGroupGetter<IDefaultObjectManagerGetter> DefaultObjectManagers { get; }
        ISkyrimGroupGetter<ILightingTemplateGetter> LightingTemplates { get; }
        ISkyrimGroupGetter<IMusicTypeGetter> MusicTypes { get; }
        ISkyrimGroupGetter<IFootstepGetter> Footsteps { get; }
        ISkyrimGroupGetter<IFootstepSetGetter> FootstepSets { get; }
        ISkyrimGroupGetter<IStoryManagerBranchNodeGetter> StoryManagerBranchNodes { get; }
        ISkyrimGroupGetter<IStoryManagerQuestNodeGetter> StoryManagerQuestNodes { get; }
        ISkyrimGroupGetter<IStoryManagerEventNodeGetter> StoryManagerEventNodes { get; }
        ISkyrimGroupGetter<IDialogBranchGetter> DialogBranches { get; }
        ISkyrimGroupGetter<IMusicTrackGetter> MusicTracks { get; }
        ISkyrimGroupGetter<IDialogViewGetter> DialogViews { get; }
        ISkyrimGroupGetter<IWordOfPowerGetter> WordsOfPower { get; }
        ISkyrimGroupGetter<IShoutGetter> Shouts { get; }
        ISkyrimGroupGetter<IEquipTypeGetter> EquipTypes { get; }
        ISkyrimGroupGetter<IRelationshipGetter> Relationships { get; }
        ISkyrimGroupGetter<ISceneGetter> Scenes { get; }
        ISkyrimGroupGetter<IAssociationTypeGetter> AssociationTypes { get; }
        ISkyrimGroupGetter<IOutfitGetter> Outfits { get; }
        ISkyrimGroupGetter<IArtObjectGetter> ArtObjects { get; }
        ISkyrimGroupGetter<IMaterialObjectGetter> MaterialObjects { get; }
        ISkyrimGroupGetter<IMovementTypeGetter> MovementTypes { get; }
        ISkyrimGroupGetter<ISoundDescriptorGetter> SoundDescriptors { get; }
        ISkyrimGroupGetter<IDualCastDataGetter> DualCastData { get; }
        ISkyrimGroupGetter<ISoundCategoryGetter> SoundCategories { get; }
        ISkyrimGroupGetter<ISoundOutputModelGetter> SoundOutputModels { get; }
        ISkyrimGroupGetter<ICollisionLayerGetter> CollisionLayers { get; }
        ISkyrimGroupGetter<IColorRecordGetter> Colors { get; }
        ISkyrimGroupGetter<IReverbParametersGetter> ReverbParameters { get; }
        ISkyrimGroupGetter<IVolumetricLightingGetter> VolumetricLightings { get; }
        ISkyrimGroupGetter<ILensFlareGetter> LensFlares { get; }

        #region Mutagen
        SkyrimRelease SkyrimRelease { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class SkyrimModMixIn
    {
        public static void Clear(this ISkyrimMod item)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SkyrimMod.Mask<bool> GetEqualsMask(
            this ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISkyrimModGetter item,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISkyrimModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            SkyrimMod.TranslationMask? equalsMask = null)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SkyrimMod.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISkyrimMod lhs,
            ISkyrimModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SkyrimMod DeepCopy(
            this ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IGroupGetter<T>? TryGetTopLevelGroup<T>(this ISkyrimModGetter obj)
            where T : IMajorRecordGetter
        {
            return (IGroupGetter<T>?)((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroupGetter? TryGetTopLevelGroup(
            this ISkyrimModGetter obj,
            Type type)
        {
            return (IGroupGetter?)((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static IGroup<T>? TryGetTopLevelGroup<T>(this ISkyrimMod obj)
            where T : IMajorRecord
        {
            return (IGroup<T>?)((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: typeof(T));
        }

        public static IGroup? TryGetTopLevelGroup(
            this ISkyrimMod obj,
            Type type)
        {
            return (IGroup?)((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).GetGroup(
                obj: obj,
                type: type);
        }

        public static uint GetRecordCount(this ISkyrimModGetter item)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).GetRecordCount(item: item);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(this ISkyrimModGetter obj)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(
            this ISkyrimModGetter obj,
            bool throwIfUnknown = true)
            where TMajor : class, IMajorRecordQueryableGetter
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown)
                .Select(m => (TMajor)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            this ISkyrimModGetter obj,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecordGetter)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(this ISkyrimMod obj)
        {
            return ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(obj: obj).Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<TMajor> EnumerateMajorRecords<TMajor>(this ISkyrimMod obj)
            where TMajor : class, IMajorRecordQueryable
        {
            return ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).EnumerateMajorRecords(
                obj: obj,
                type: typeof(TMajor),
                throwIfUnknown: true)
                .Select(m => (TMajor)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IMajorRecord> EnumerateMajorRecords(
            this ISkyrimMod obj,
            Type? type,
            bool throwIfUnknown = true)
        {
            return ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).EnumeratePotentiallyTypedMajorRecords(
                obj: obj,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Select(m => (IMajorRecord)m)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ISkyrimMod obj,
            FormKey key)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ISkyrimMod obj,
            IEnumerable<FormKey> keys)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet());
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ISkyrimMod obj,
            IEnumerable<IFormLinkIdentifier> keys)
        {
            foreach (var g in keys.GroupBy(x => x.Type))
            {
                Remove(
                    obj: obj,
                    keys: g.Select(x => x.FormKey),
                    type: g.Key);
            }
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ISkyrimMod obj,
            HashSet<FormKey> keys)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ISkyrimMod obj,
            FormKey key,
            Type type,
            bool throwIfUnknown = true)
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ISkyrimMod obj,
            IEnumerable<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove(
            this ISkyrimMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown = true)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: type,
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ISkyrimMod obj,
            TMajor record,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(record.FormKey);
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ISkyrimMod obj,
            IEnumerable<TMajor> records,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: records.Select(m => m.FormKey).ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ISkyrimMod obj,
            FormKey key,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            var keys = new HashSet<FormKey>();
            keys.Add(key);
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ISkyrimMod obj,
            IEnumerable<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys.ToHashSet(),
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static void Remove<TMajor>(
            this ISkyrimMod obj,
            HashSet<FormKey> keys,
            bool throwIfUnknown = true)
            where TMajor : IMajorRecordGetter
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)obj).CommonSetterInstance()!).Remove(
                obj: obj,
                keys: keys,
                type: typeof(TMajor),
                throwIfUnknown: throwIfUnknown);
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<ISkyrimMod, ISkyrimModGetter, TSetter, TGetter>> EnumerateMajorRecordContexts<TSetter, TGetter>(
            this ISkyrimModGetter obj,
            ILinkCache linkCache,
            bool throwIfUnknown = true)
            where TSetter : class, IMajorRecordQueryable, TGetter
            where TGetter : class, IMajorRecordQueryableGetter
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: typeof(TGetter),
                throwIfUnknown: throwIfUnknown)
                .Select(m => m.AsType<ISkyrimMod, ISkyrimModGetter, IMajorRecordQueryable, IMajorRecordQueryableGetter, TSetter, TGetter>())
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<IMajorRecordGetter>> EnumerateMajorRecordContexts(this ISkyrimModGetter obj)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: null!)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        [DebuggerStepThrough]
        public static IEnumerable<IModContext<ISkyrimMod, ISkyrimModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            this ISkyrimModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown = true)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)obj).CommonInstance()!).EnumerateMajorRecordContexts(
                obj: obj,
                linkCache: linkCache,
                type: type,
                throwIfUnknown: throwIfUnknown)
                .Catch(e => RecordException.EnrichAndThrow(e, obj.ModKey));
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISkyrimMod item,
            MutagenFrame frame,
            SkyrimRelease release,
            GroupMask? importMask = null)
        {
            ((SkyrimModSetterCommon)((ISkyrimModGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                release: release,
                importMask: importMask);
        }

        public static void CopyInFromBinary(
            this ISkyrimMod item,
            ModPath path,
            SkyrimRelease release,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                var gameRelease = release.ToGameRelease();
                param ??= BinaryReadParameters.Default;
                var fileSystem = param.FileSystem.GetOrDefault();
                var meta = ParsingMeta.Factory(param, gameRelease, path);
                using (var reader = new MutagenBinaryReadStream(path, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
                    if (reader.Remaining < 12)
                    {
                        throw new ArgumentException("File stream was too short to parse flags");
                    }
                    var flags = reader.GetInt32(offset: 8);
                    if (Enums.HasFlag(flags, (int)SkyrimModHeader.HeaderFlag.Localized))
                    {
                        frame.MetaData.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(gameRelease, path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam);
                    }
                    CopyInFromBinary(
                        item: item,
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, path.ModKey);
                throw;
            }
        }

        public static void CopyInFromBinary(
            this ISkyrimMod item,
            Stream stream,
            ModKey modKey,
            SkyrimRelease release,
            RecordTypeInfoCacheReader infoCache,
            BinaryReadParameters? param = null,
            GroupMask? importMask = null)
        {
            try
            {
                param ??= BinaryReadParameters.Default;
                var meta = ParsingMeta.Factory(param, GameRelease.Oblivion, modKey, stream);
                using (var reader = new MutagenBinaryReadStream(stream, meta))
                {
                    var frame = new MutagenFrame(reader);
                    frame.MetaData.RecordInfoCache = infoCache;
                    CopyInFromBinary(
                        item: item,
                        release: release,
                        importMask: importMask,
                        frame: frame);
                }
            }
            catch (Exception ex)
            {
                RecordException.EnrichAndThrow(ex, modKey);
                throw;
            }
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum SkyrimMod_FieldIndex
    {
        ModHeader = 0,
        GameSettings = 1,
        Keywords = 2,
        LocationReferenceTypes = 3,
        Actions = 4,
        TextureSets = 5,
        Globals = 6,
        Classes = 7,
        Factions = 8,
        HeadParts = 9,
        Hairs = 10,
        Eyes = 11,
        Races = 12,
        SoundMarkers = 13,
        AcousticSpaces = 14,
        MagicEffects = 15,
        LandscapeTextures = 16,
        ObjectEffects = 17,
        Spells = 18,
        Scrolls = 19,
        Activators = 20,
        TalkingActivators = 21,
        Armors = 22,
        Books = 23,
        Containers = 24,
        Doors = 25,
        Ingredients = 26,
        Lights = 27,
        MiscItems = 28,
        AlchemicalApparatuses = 29,
        Statics = 30,
        MoveableStatics = 31,
        Grasses = 32,
        Trees = 33,
        Florae = 34,
        Furniture = 35,
        Weapons = 36,
        Ammunitions = 37,
        Npcs = 38,
        LeveledNpcs = 39,
        Keys = 40,
        Ingestibles = 41,
        IdleMarkers = 42,
        ConstructibleObjects = 43,
        Projectiles = 44,
        Hazards = 45,
        SoulGems = 46,
        LeveledItems = 47,
        Weathers = 48,
        Climates = 49,
        ShaderParticleGeometries = 50,
        VisualEffects = 51,
        Regions = 52,
        NavigationMeshInfoMaps = 53,
        Cells = 54,
        Worldspaces = 55,
        DialogTopics = 56,
        Quests = 57,
        IdleAnimations = 58,
        Packages = 59,
        CombatStyles = 60,
        LoadScreens = 61,
        LeveledSpells = 62,
        AnimatedObjects = 63,
        Waters = 64,
        EffectShaders = 65,
        Explosions = 66,
        Debris = 67,
        ImageSpaces = 68,
        ImageSpaceAdapters = 69,
        FormLists = 70,
        Perks = 71,
        BodyParts = 72,
        AddonNodes = 73,
        ActorValueInformation = 74,
        CameraShots = 75,
        CameraPaths = 76,
        VoiceTypes = 77,
        MaterialTypes = 78,
        Impacts = 79,
        ImpactDataSets = 80,
        ArmorAddons = 81,
        EncounterZones = 82,
        Locations = 83,
        Messages = 84,
        DefaultObjectManagers = 85,
        LightingTemplates = 86,
        MusicTypes = 87,
        Footsteps = 88,
        FootstepSets = 89,
        StoryManagerBranchNodes = 90,
        StoryManagerQuestNodes = 91,
        StoryManagerEventNodes = 92,
        DialogBranches = 93,
        MusicTracks = 94,
        DialogViews = 95,
        WordsOfPower = 96,
        Shouts = 97,
        EquipTypes = 98,
        Relationships = 99,
        Scenes = 100,
        AssociationTypes = 101,
        Outfits = 102,
        ArtObjects = 103,
        MaterialObjects = 104,
        MovementTypes = 105,
        SoundDescriptors = 106,
        DualCastData = 107,
        SoundCategories = 108,
        SoundOutputModels = 109,
        CollisionLayers = 110,
        Colors = 111,
        ReverbParameters = 112,
        VolumetricLightings = 113,
        LensFlares = 114,
    }
    #endregion

    #region Registration
    internal partial class SkyrimMod_Registration : ILoquiRegistration
    {
        public static readonly SkyrimMod_Registration Instance = new SkyrimMod_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 115;

        public const ushort FieldCount = 115;

        public static readonly Type MaskType = typeof(SkyrimMod.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SkyrimMod.ErrorMask);

        public static readonly Type ClassType = typeof(SkyrimMod);

        public static readonly Type GetterType = typeof(ISkyrimModGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISkyrimMod);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.SkyrimMod";

        public const string Name = "SkyrimMod";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TES4;
        public static readonly Type BinaryWriteTranslation = typeof(SkyrimModBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SkyrimModSetterCommon
    {
        public static readonly SkyrimModSetterCommon Instance = new SkyrimModSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISkyrimMod item)
        {
            ClearPartial();
            item.GameSettings.Clear();
            item.Keywords.Clear();
            item.LocationReferenceTypes.Clear();
            item.Actions.Clear();
            item.TextureSets.Clear();
            item.Globals.Clear();
            item.Classes.Clear();
            item.Factions.Clear();
            item.HeadParts.Clear();
            item.Hairs.Clear();
            item.Eyes.Clear();
            item.Races.Clear();
            item.SoundMarkers.Clear();
            item.AcousticSpaces.Clear();
            item.MagicEffects.Clear();
            item.LandscapeTextures.Clear();
            item.ObjectEffects.Clear();
            item.Spells.Clear();
            item.Scrolls.Clear();
            item.Activators.Clear();
            item.TalkingActivators.Clear();
            item.Armors.Clear();
            item.Books.Clear();
            item.Containers.Clear();
            item.Doors.Clear();
            item.Ingredients.Clear();
            item.Lights.Clear();
            item.MiscItems.Clear();
            item.AlchemicalApparatuses.Clear();
            item.Statics.Clear();
            item.MoveableStatics.Clear();
            item.Grasses.Clear();
            item.Trees.Clear();
            item.Florae.Clear();
            item.Furniture.Clear();
            item.Weapons.Clear();
            item.Ammunitions.Clear();
            item.Npcs.Clear();
            item.LeveledNpcs.Clear();
            item.Keys.Clear();
            item.Ingestibles.Clear();
            item.IdleMarkers.Clear();
            item.ConstructibleObjects.Clear();
            item.Projectiles.Clear();
            item.Hazards.Clear();
            item.SoulGems.Clear();
            item.LeveledItems.Clear();
            item.Weathers.Clear();
            item.Climates.Clear();
            item.ShaderParticleGeometries.Clear();
            item.VisualEffects.Clear();
            item.Regions.Clear();
            item.NavigationMeshInfoMaps.Clear();
            item.Worldspaces.Clear();
            item.DialogTopics.Clear();
            item.Quests.Clear();
            item.IdleAnimations.Clear();
            item.Packages.Clear();
            item.CombatStyles.Clear();
            item.LoadScreens.Clear();
            item.LeveledSpells.Clear();
            item.AnimatedObjects.Clear();
            item.Waters.Clear();
            item.EffectShaders.Clear();
            item.Explosions.Clear();
            item.Debris.Clear();
            item.ImageSpaces.Clear();
            item.ImageSpaceAdapters.Clear();
            item.FormLists.Clear();
            item.Perks.Clear();
            item.BodyParts.Clear();
            item.AddonNodes.Clear();
            item.ActorValueInformation.Clear();
            item.CameraShots.Clear();
            item.CameraPaths.Clear();
            item.VoiceTypes.Clear();
            item.MaterialTypes.Clear();
            item.Impacts.Clear();
            item.ImpactDataSets.Clear();
            item.ArmorAddons.Clear();
            item.EncounterZones.Clear();
            item.Locations.Clear();
            item.Messages.Clear();
            item.DefaultObjectManagers.Clear();
            item.LightingTemplates.Clear();
            item.MusicTypes.Clear();
            item.Footsteps.Clear();
            item.FootstepSets.Clear();
            item.StoryManagerBranchNodes.Clear();
            item.StoryManagerQuestNodes.Clear();
            item.StoryManagerEventNodes.Clear();
            item.DialogBranches.Clear();
            item.MusicTracks.Clear();
            item.DialogViews.Clear();
            item.WordsOfPower.Clear();
            item.Shouts.Clear();
            item.EquipTypes.Clear();
            item.Relationships.Clear();
            item.Scenes.Clear();
            item.AssociationTypes.Clear();
            item.Outfits.Clear();
            item.ArtObjects.Clear();
            item.MaterialObjects.Clear();
            item.MovementTypes.Clear();
            item.SoundDescriptors.Clear();
            item.DualCastData.Clear();
            item.SoundCategories.Clear();
            item.SoundOutputModels.Clear();
            item.CollisionLayers.Clear();
            item.Colors.Clear();
            item.ReverbParameters.Clear();
            item.VolumetricLightings.Clear();
            item.LensFlares.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ISkyrimMod obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ModHeader.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.HeadParts.RemapLinks(mapping);
            obj.Races.RemapLinks(mapping);
            obj.SoundMarkers.RemapLinks(mapping);
            obj.AcousticSpaces.RemapLinks(mapping);
            obj.MagicEffects.RemapLinks(mapping);
            obj.LandscapeTextures.RemapLinks(mapping);
            obj.ObjectEffects.RemapLinks(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Scrolls.RemapLinks(mapping);
            obj.Activators.RemapLinks(mapping);
            obj.TalkingActivators.RemapLinks(mapping);
            obj.Armors.RemapLinks(mapping);
            obj.Books.RemapLinks(mapping);
            obj.Containers.RemapLinks(mapping);
            obj.Doors.RemapLinks(mapping);
            obj.Ingredients.RemapLinks(mapping);
            obj.Lights.RemapLinks(mapping);
            obj.MiscItems.RemapLinks(mapping);
            obj.AlchemicalApparatuses.RemapLinks(mapping);
            obj.Statics.RemapLinks(mapping);
            obj.MoveableStatics.RemapLinks(mapping);
            obj.Grasses.RemapLinks(mapping);
            obj.Trees.RemapLinks(mapping);
            obj.Florae.RemapLinks(mapping);
            obj.Furniture.RemapLinks(mapping);
            obj.Weapons.RemapLinks(mapping);
            obj.Ammunitions.RemapLinks(mapping);
            obj.Npcs.RemapLinks(mapping);
            obj.LeveledNpcs.RemapLinks(mapping);
            obj.Keys.RemapLinks(mapping);
            obj.Ingestibles.RemapLinks(mapping);
            obj.IdleMarkers.RemapLinks(mapping);
            obj.ConstructibleObjects.RemapLinks(mapping);
            obj.Projectiles.RemapLinks(mapping);
            obj.Hazards.RemapLinks(mapping);
            obj.SoulGems.RemapLinks(mapping);
            obj.LeveledItems.RemapLinks(mapping);
            obj.Weathers.RemapLinks(mapping);
            obj.Climates.RemapLinks(mapping);
            obj.VisualEffects.RemapLinks(mapping);
            obj.Regions.RemapLinks(mapping);
            obj.NavigationMeshInfoMaps.RemapLinks(mapping);
            obj.Cells.RemapLinks(mapping);
            obj.Worldspaces.RemapLinks(mapping);
            obj.DialogTopics.RemapLinks(mapping);
            obj.Quests.RemapLinks(mapping);
            obj.IdleAnimations.RemapLinks(mapping);
            obj.Packages.RemapLinks(mapping);
            obj.LoadScreens.RemapLinks(mapping);
            obj.LeveledSpells.RemapLinks(mapping);
            obj.AnimatedObjects.RemapLinks(mapping);
            obj.Waters.RemapLinks(mapping);
            obj.EffectShaders.RemapLinks(mapping);
            obj.Explosions.RemapLinks(mapping);
            obj.FormLists.RemapLinks(mapping);
            obj.Perks.RemapLinks(mapping);
            obj.BodyParts.RemapLinks(mapping);
            obj.AddonNodes.RemapLinks(mapping);
            obj.ActorValueInformation.RemapLinks(mapping);
            obj.CameraShots.RemapLinks(mapping);
            obj.CameraPaths.RemapLinks(mapping);
            obj.MaterialTypes.RemapLinks(mapping);
            obj.Impacts.RemapLinks(mapping);
            obj.ImpactDataSets.RemapLinks(mapping);
            obj.ArmorAddons.RemapLinks(mapping);
            obj.EncounterZones.RemapLinks(mapping);
            obj.Locations.RemapLinks(mapping);
            obj.Messages.RemapLinks(mapping);
            obj.DefaultObjectManagers.RemapLinks(mapping);
            obj.MusicTypes.RemapLinks(mapping);
            obj.Footsteps.RemapLinks(mapping);
            obj.FootstepSets.RemapLinks(mapping);
            obj.StoryManagerBranchNodes.RemapLinks(mapping);
            obj.StoryManagerQuestNodes.RemapLinks(mapping);
            obj.StoryManagerEventNodes.RemapLinks(mapping);
            obj.DialogBranches.RemapLinks(mapping);
            obj.MusicTracks.RemapLinks(mapping);
            obj.DialogViews.RemapLinks(mapping);
            obj.Shouts.RemapLinks(mapping);
            obj.EquipTypes.RemapLinks(mapping);
            obj.Relationships.RemapLinks(mapping);
            obj.Scenes.RemapLinks(mapping);
            obj.Outfits.RemapLinks(mapping);
            obj.ArtObjects.RemapLinks(mapping);
            obj.MaterialObjects.RemapLinks(mapping);
            obj.SoundDescriptors.RemapLinks(mapping);
            obj.DualCastData.RemapLinks(mapping);
            obj.SoundCategories.RemapLinks(mapping);
            obj.CollisionLayers.RemapLinks(mapping);
        }
        
        public IEnumerable<IMajorRecord> EnumerateMajorRecords(ISkyrimMod obj)
        {
            foreach (var item in SkyrimModCommon.Instance.EnumerateMajorRecords(obj))
            {
                yield return (item as IMajorRecord)!;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            ISkyrimMod obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            ISkyrimMod obj,
            Type type,
            bool throwIfUnknown)
        {
            foreach (var item in SkyrimModCommon.Instance.EnumerateMajorRecords(obj, type, throwIfUnknown))
            {
                yield return item;
            }
        }
        
        public void Remove(
            ISkyrimMod obj,
            HashSet<FormKey> keys)
        {
            obj.GameSettings.Remove(keys);
            obj.Keywords.Remove(keys);
            obj.LocationReferenceTypes.Remove(keys);
            obj.Actions.Remove(keys);
            obj.TextureSets.Remove(keys);
            obj.Globals.Remove(keys);
            obj.Classes.Remove(keys);
            obj.Factions.Remove(keys);
            obj.HeadParts.Remove(keys);
            obj.Hairs.Remove(keys);
            obj.Eyes.Remove(keys);
            obj.Races.Remove(keys);
            obj.SoundMarkers.Remove(keys);
            obj.AcousticSpaces.Remove(keys);
            obj.MagicEffects.Remove(keys);
            obj.LandscapeTextures.Remove(keys);
            obj.ObjectEffects.Remove(keys);
            obj.Spells.Remove(keys);
            obj.Scrolls.Remove(keys);
            obj.Activators.Remove(keys);
            obj.TalkingActivators.Remove(keys);
            obj.Armors.Remove(keys);
            obj.Books.Remove(keys);
            obj.Containers.Remove(keys);
            obj.Doors.Remove(keys);
            obj.Ingredients.Remove(keys);
            obj.Lights.Remove(keys);
            obj.MiscItems.Remove(keys);
            obj.AlchemicalApparatuses.Remove(keys);
            obj.Statics.Remove(keys);
            obj.MoveableStatics.Remove(keys);
            obj.Grasses.Remove(keys);
            obj.Trees.Remove(keys);
            obj.Florae.Remove(keys);
            obj.Furniture.Remove(keys);
            obj.Weapons.Remove(keys);
            obj.Ammunitions.Remove(keys);
            obj.Npcs.Remove(keys);
            obj.LeveledNpcs.Remove(keys);
            obj.Keys.Remove(keys);
            obj.Ingestibles.Remove(keys);
            obj.IdleMarkers.Remove(keys);
            obj.ConstructibleObjects.Remove(keys);
            obj.Projectiles.Remove(keys);
            obj.Hazards.Remove(keys);
            obj.SoulGems.Remove(keys);
            obj.LeveledItems.Remove(keys);
            obj.Weathers.Remove(keys);
            obj.Climates.Remove(keys);
            obj.ShaderParticleGeometries.Remove(keys);
            obj.VisualEffects.Remove(keys);
            obj.Regions.Remove(keys);
            obj.NavigationMeshInfoMaps.Remove(keys);
            obj.Cells.Remove(keys);
            obj.Worldspaces.Remove(keys);
            obj.DialogTopics.Remove(keys);
            obj.Quests.Remove(keys);
            obj.IdleAnimations.Remove(keys);
            obj.Packages.Remove(keys);
            obj.CombatStyles.Remove(keys);
            obj.LoadScreens.Remove(keys);
            obj.LeveledSpells.Remove(keys);
            obj.AnimatedObjects.Remove(keys);
            obj.Waters.Remove(keys);
            obj.EffectShaders.Remove(keys);
            obj.Explosions.Remove(keys);
            obj.Debris.Remove(keys);
            obj.ImageSpaces.Remove(keys);
            obj.ImageSpaceAdapters.Remove(keys);
            obj.FormLists.Remove(keys);
            obj.Perks.Remove(keys);
            obj.BodyParts.Remove(keys);
            obj.AddonNodes.Remove(keys);
            obj.ActorValueInformation.Remove(keys);
            obj.CameraShots.Remove(keys);
            obj.CameraPaths.Remove(keys);
            obj.VoiceTypes.Remove(keys);
            obj.MaterialTypes.Remove(keys);
            obj.Impacts.Remove(keys);
            obj.ImpactDataSets.Remove(keys);
            obj.ArmorAddons.Remove(keys);
            obj.EncounterZones.Remove(keys);
            obj.Locations.Remove(keys);
            obj.Messages.Remove(keys);
            obj.DefaultObjectManagers.Remove(keys);
            obj.LightingTemplates.Remove(keys);
            obj.MusicTypes.Remove(keys);
            obj.Footsteps.Remove(keys);
            obj.FootstepSets.Remove(keys);
            obj.StoryManagerBranchNodes.Remove(keys);
            obj.StoryManagerQuestNodes.Remove(keys);
            obj.StoryManagerEventNodes.Remove(keys);
            obj.DialogBranches.Remove(keys);
            obj.MusicTracks.Remove(keys);
            obj.DialogViews.Remove(keys);
            obj.WordsOfPower.Remove(keys);
            obj.Shouts.Remove(keys);
            obj.EquipTypes.Remove(keys);
            obj.Relationships.Remove(keys);
            obj.Scenes.Remove(keys);
            obj.AssociationTypes.Remove(keys);
            obj.Outfits.Remove(keys);
            obj.ArtObjects.Remove(keys);
            obj.MaterialObjects.Remove(keys);
            obj.MovementTypes.Remove(keys);
            obj.SoundDescriptors.Remove(keys);
            obj.DualCastData.Remove(keys);
            obj.SoundCategories.Remove(keys);
            obj.SoundOutputModels.Remove(keys);
            obj.CollisionLayers.Remove(keys);
            obj.Colors.Remove(keys);
            obj.ReverbParameters.Remove(keys);
            obj.VolumetricLightings.Remove(keys);
            obj.LensFlares.Remove(keys);
        }
        
        public void Remove(
            ISkyrimMod obj,
            HashSet<FormKey> keys,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "ISkyrimMajorRecord":
                case "SkyrimMajorRecord":
                case "IMajorRecordGetter":
                case "ISkyrimMajorRecordGetter":
                    if (!SkyrimMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) return;
                    this.Remove(obj, keys);
                    break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                case "GameSettingInt":
                case "IGameSettingIntGetter":
                case "IGameSettingInt":
                case "IGameSettingIntInternal":
                case "GameSettingFloat":
                case "IGameSettingFloatGetter":
                case "IGameSettingFloat":
                case "IGameSettingFloatInternal":
                case "GameSettingString":
                case "IGameSettingStringGetter":
                case "IGameSettingString":
                case "IGameSettingStringInternal":
                case "GameSettingBool":
                case "IGameSettingBoolGetter":
                case "IGameSettingBool":
                case "IGameSettingBoolInternal":
                    obj.GameSettings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    obj.Keywords.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    obj.LocationReferenceTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    obj.Actions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    obj.TextureSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                case "GlobalInt":
                case "IGlobalIntGetter":
                case "IGlobalInt":
                case "IGlobalIntInternal":
                case "GlobalShort":
                case "IGlobalShortGetter":
                case "IGlobalShort":
                case "IGlobalShortInternal":
                case "GlobalFloat":
                case "IGlobalFloatGetter":
                case "IGlobalFloat":
                case "IGlobalFloatInternal":
                case "GlobalUnknown":
                case "IGlobalUnknownGetter":
                case "IGlobalUnknown":
                case "IGlobalUnknownInternal":
                    obj.Globals.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    obj.Classes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    obj.Factions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    obj.HeadParts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    obj.Hairs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    obj.Eyes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    obj.Races.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    obj.SoundMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    obj.AcousticSpaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    obj.MagicEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    obj.LandscapeTextures.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    obj.ObjectEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    obj.Spells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    obj.Scrolls.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    obj.Activators.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    obj.TalkingActivators.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    obj.Armors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    obj.Books.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    obj.Containers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    obj.Doors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    obj.Ingredients.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    obj.Lights.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    obj.MiscItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    obj.AlchemicalApparatuses.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    obj.Statics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    obj.MoveableStatics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    obj.Grasses.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    obj.Trees.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    obj.Florae.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    obj.Furniture.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    obj.Weapons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    obj.Ammunitions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    obj.Npcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    obj.LeveledNpcs.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    obj.Keys.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    obj.Ingestibles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    obj.IdleMarkers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    obj.ConstructibleObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    obj.Projectiles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    obj.Hazards.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    obj.SoulGems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    obj.LeveledItems.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    obj.Weathers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    obj.Climates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    obj.ShaderParticleGeometries.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    obj.VisualEffects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    obj.Regions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    obj.NavigationMeshInfoMaps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    obj.DialogTopics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    obj.Quests.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    obj.IdleAnimations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    obj.Packages.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    obj.CombatStyles.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    obj.LoadScreens.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    obj.LeveledSpells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    obj.AnimatedObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    obj.Waters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    obj.EffectShaders.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    obj.Explosions.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    obj.Debris.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    obj.ImageSpaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    obj.ImageSpaceAdapters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    obj.FormLists.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    obj.Perks.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    obj.BodyParts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    obj.AddonNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    obj.ActorValueInformation.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    obj.CameraShots.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    obj.CameraPaths.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    obj.VoiceTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    obj.MaterialTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    obj.Impacts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    obj.ImpactDataSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    obj.ArmorAddons.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    obj.EncounterZones.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    obj.Locations.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    obj.Messages.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    obj.DefaultObjectManagers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    obj.LightingTemplates.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    obj.MusicTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    obj.Footsteps.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    obj.FootstepSets.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    obj.StoryManagerBranchNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    obj.StoryManagerQuestNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    obj.StoryManagerEventNodes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    obj.DialogBranches.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    obj.MusicTracks.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    obj.DialogViews.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "WordOfPower":
                case "IWordOfPowerGetter":
                case "IWordOfPower":
                case "IWordOfPowerInternal":
                    obj.WordsOfPower.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Shout":
                case "IShoutGetter":
                case "IShout":
                case "IShoutInternal":
                    obj.Shouts.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    obj.EquipTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    obj.Relationships.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    obj.Scenes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    obj.AssociationTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    obj.Outfits.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    obj.ArtObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    obj.MaterialObjects.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    obj.MovementTypes.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    obj.SoundDescriptors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DualCastData":
                case "IDualCastDataGetter":
                case "IDualCastData":
                case "IDualCastDataInternal":
                    obj.DualCastData.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    obj.SoundCategories.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    obj.SoundOutputModels.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    obj.CollisionLayers.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    obj.Colors.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    obj.ReverbParameters.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    obj.VolumetricLightings.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    obj.LensFlares.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                case "PlacedArrow":
                case "IPlacedArrowGetter":
                case "IPlacedArrow":
                case "IPlacedArrowInternal":
                case "PlacedBeam":
                case "IPlacedBeamGetter":
                case "IPlacedBeam":
                case "IPlacedBeamInternal":
                case "PlacedFlame":
                case "IPlacedFlameGetter":
                case "IPlacedFlame":
                case "IPlacedFlameInternal":
                case "PlacedCone":
                case "IPlacedConeGetter":
                case "IPlacedCone":
                case "IPlacedConeInternal":
                case "PlacedBarrier":
                case "IPlacedBarrierGetter":
                case "IPlacedBarrier":
                case "IPlacedBarrierInternal":
                case "PlacedTrap":
                case "IPlacedTrapGetter":
                case "IPlacedTrap":
                case "IPlacedTrapInternal":
                case "PlacedHazard":
                case "IPlacedHazardGetter":
                case "IPlacedHazard":
                case "IPlacedHazardInternal":
                case "PlacedMissile":
                case "IPlacedMissileGetter":
                case "IPlacedMissile":
                case "IPlacedMissileInternal":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    obj.DialogTopics.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlaceableObject":
                case "IPlaceableObjectGetter":
                    Remove(obj, keys, typeof(IAcousticSpaceGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAddonNodeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAlchemicalApparatusGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArtObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoulGemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITalkingActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IReferenceableObject":
                case "IReferenceableObjectGetter":
                    Remove(obj, keys, typeof(IAcousticSpaceGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAlchemicalApparatusGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoulGemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITalkingActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IExplodeSpawn":
                case "IExplodeSpawnGetter":
                    Remove(obj, keys, typeof(IAcousticSpaceGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAddonNodeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAlchemicalApparatusGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorAddonGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArtObjectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDualCastDataGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IExplosionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IGrassGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledSpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoulGemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITalkingActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IIdleRelation":
                case "IIdleRelationGetter":
                    Remove(obj, keys, typeof(IActionRecordGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleAnimationGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IObjectId":
                case "IObjectIdGetter":
                    Remove(obj, keys, typeof(IActivatorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IContainerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IDoorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFurnitureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIdleMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IShoutGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITextureSetGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IItem":
                case "IItemGetter":
                    Remove(obj, keys, typeof(IAlchemicalApparatusGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoulGemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IItemOrList":
                case "IItemOrListGetter":
                    Remove(obj, keys, typeof(IAlchemicalApparatusGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoulGemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IConstructible":
                case "IConstructibleGetter":
                    Remove(obj, keys, typeof(IAlchemicalApparatusGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IAmmunitionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IBookGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IKeyGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoulGemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IOutfitTarget":
                case "IOutfitTargetGetter":
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IBindableEquipment":
                case "IBindableEquipmentGetter":
                    Remove(obj, keys, typeof(IArmorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IComplexLocation":
                case "IComplexLocationGetter":
                    Remove(obj, keys, typeof(IWorldspaceGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IOwner":
                case "IOwnerGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IRelatable":
                case "IRelatableGetter":
                    Remove(obj, keys, typeof(IFactionGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IRaceGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IRegionTarget":
                case "IRegionTargetGetter":
                    Remove(obj, keys, typeof(IFloraGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILandscapeTextureGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMoveableStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IStaticGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ITreeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IAliasVoiceType":
                case "IAliasVoiceTypeGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILockList":
                case "ILockListGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IWorldspaceOrList":
                case "IWorldspaceOrListGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWorldspaceGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IVoiceTypeOrList":
                case "IVoiceTypeOrListGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IVoiceTypeGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "INpcOrList":
                case "INpcOrListGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IWeaponOrList":
                case "IWeaponOrListGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWeaponGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ISpellOrList":
                case "ISpellOrListGetter":
                    Remove(obj, keys, typeof(IFormListGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IPlacedTrapTarget":
                case "IPlacedTrapTargetGetter":
                    Remove(obj, keys, typeof(IHazardGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IProjectileGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IHarvestTarget":
                case "IHarvestTargetGetter":
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ILeveledItemGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IMiscItemGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IMagicItem":
                case "IMagicItemGetter":
                    Remove(obj, keys, typeof(IIngestibleGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IIngredientGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IScrollGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IKeywordLinkedReference":
                case "IKeywordLinkedReferenceGetter":
                    Remove(obj, keys, typeof(IKeywordGetter), throwIfUnknown: throwIfUnknown);
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "INpcSpawn":
                case "INpcSpawnGetter":
                    Remove(obj, keys, typeof(ILeveledNpcGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(INpcGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ISpellRecord":
                case "ISpellRecordGetter":
                    Remove(obj, keys, typeof(ILeveledSpellGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IShoutGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IEmittance":
                case "IEmittanceGetter":
                    Remove(obj, keys, typeof(ILightGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IRegionGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IKnowable":
                case "IKnowableGetter":
                    Remove(obj, keys, typeof(IMagicEffectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(IWordOfPowerGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "IEffectRecord":
                case "IEffectRecordGetter":
                    Remove(obj, keys, typeof(IObjectEffectGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISpellGetter), throwIfUnknown: throwIfUnknown);
                    break;
                case "ILinkedReference":
                case "ILinkedReferenceGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlaced":
                case "IPlacedGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlacedSimple":
                case "IPlacedSimpleGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "IPlacedThing":
                case "IPlacedThingGetter":
                    obj.Cells.Remove(
                        type: type,
                        keys: keys);
                    obj.Worldspaces.Remove(
                        type: type,
                        keys: keys);
                    break;
                case "ISound":
                case "ISoundGetter":
                    Remove(obj, keys, typeof(ISoundDescriptorGetter), throwIfUnknown: throwIfUnknown);
                    Remove(obj, keys, typeof(ISoundMarkerGetter), throwIfUnknown: throwIfUnknown);
                    break;
                default:
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        break;
                    }
            }
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ISkyrimMod obj)
        {
            {
                foreach (var item in obj.TextureSets.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.HeadParts.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Eyes.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Races.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.MagicEffects.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Scrolls.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Activators.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.TalkingActivators.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Armors.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Books.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Containers.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Doors.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Ingredients.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Lights.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.MiscItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.AlchemicalApparatuses.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Statics.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.MoveableStatics.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Grasses.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Trees.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Florae.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Furniture.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Weapons.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Ammunitions.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Npcs.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.LeveledNpcs.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Keys.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Ingestibles.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.IdleMarkers.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Projectiles.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Hazards.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.SoulGems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Weathers.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Climates.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.ShaderParticleGeometries.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Regions.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Cells is IAssetLinkContainer CellslinkCont)
            {
                foreach (var item in CellslinkCont.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Worldspaces.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.DialogTopics.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Quests.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.IdleAnimations.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Packages.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.LoadScreens.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.AnimatedObjects.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Waters.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.EffectShaders.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Explosions.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Debris.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Perks.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.BodyParts.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.AddonNodes.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.CameraShots.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Impacts.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.ArmorAddons.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.MusicTracks.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.Scenes.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.ArtObjects.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.MaterialObjects.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.SoundDescriptors.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            {
                foreach (var item in obj.LensFlares.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        private static partial void RemapInferredAssetLinks(
            ISkyrimMod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            AssetLinkQuery queryCategories);
        
        public void RemapAssetLinks(
            ISkyrimMod obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            RemapInferredAssetLinks(obj, mapping, queryCategories);
            obj.TextureSets.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.HeadParts.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Eyes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Races.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.MagicEffects.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Scrolls.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Activators.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.TalkingActivators.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Armors.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Books.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Containers.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Doors.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Ingredients.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Lights.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.MiscItems.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.AlchemicalApparatuses.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Statics.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.MoveableStatics.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Grasses.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Trees.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Florae.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Furniture.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Weapons.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Ammunitions.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Npcs.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LeveledNpcs.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Keys.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Ingestibles.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.IdleMarkers.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Projectiles.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Hazards.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.SoulGems.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Weathers.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Climates.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ShaderParticleGeometries.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Regions.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Cells.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Worldspaces.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.DialogTopics.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Quests.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.IdleAnimations.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Packages.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LoadScreens.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.AnimatedObjects.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Waters.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.EffectShaders.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Explosions.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Debris.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Perks.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.BodyParts.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.AddonNodes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.CameraShots.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Impacts.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ArmorAddons.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.MusicTracks.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Scenes.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.ArtObjects.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.MaterialObjects.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.SoundDescriptors.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.LensFlares.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISkyrimMod item,
            MutagenFrame frame,
            SkyrimRelease release,
            GroupMask? importMask = null)
        {
            PluginUtilityTranslation.ModParse(
                record: item,
                frame: frame,
                importMask: importMask,
                fillTyped: SkyrimModBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class SkyrimModCommon
    {
        public static readonly SkyrimModCommon Instance = new SkyrimModCommon();

        public SkyrimMod.Mask<bool> GetEqualsMask(
            ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SkyrimMod.Mask<bool>(false);
            ((SkyrimModCommon)((ISkyrimModGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISkyrimModGetter item,
            ISkyrimModGetter rhs,
            SkyrimMod.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ModHeader = MaskItemExt.Factory(item.ModHeader.GetEqualsMask(rhs.ModHeader, include), include);
            ret.GameSettings = MaskItemExt.Factory(item.GameSettings.GetEqualsMask(rhs.GameSettings, include), include);
            ret.Keywords = MaskItemExt.Factory(item.Keywords.GetEqualsMask(rhs.Keywords, include), include);
            ret.LocationReferenceTypes = MaskItemExt.Factory(item.LocationReferenceTypes.GetEqualsMask(rhs.LocationReferenceTypes, include), include);
            ret.Actions = MaskItemExt.Factory(item.Actions.GetEqualsMask(rhs.Actions, include), include);
            ret.TextureSets = MaskItemExt.Factory(item.TextureSets.GetEqualsMask(rhs.TextureSets, include), include);
            ret.Globals = MaskItemExt.Factory(item.Globals.GetEqualsMask(rhs.Globals, include), include);
            ret.Classes = MaskItemExt.Factory(item.Classes.GetEqualsMask(rhs.Classes, include), include);
            ret.Factions = MaskItemExt.Factory(item.Factions.GetEqualsMask(rhs.Factions, include), include);
            ret.HeadParts = MaskItemExt.Factory(item.HeadParts.GetEqualsMask(rhs.HeadParts, include), include);
            ret.Hairs = MaskItemExt.Factory(item.Hairs.GetEqualsMask(rhs.Hairs, include), include);
            ret.Eyes = MaskItemExt.Factory(item.Eyes.GetEqualsMask(rhs.Eyes, include), include);
            ret.Races = MaskItemExt.Factory(item.Races.GetEqualsMask(rhs.Races, include), include);
            ret.SoundMarkers = MaskItemExt.Factory(item.SoundMarkers.GetEqualsMask(rhs.SoundMarkers, include), include);
            ret.AcousticSpaces = MaskItemExt.Factory(item.AcousticSpaces.GetEqualsMask(rhs.AcousticSpaces, include), include);
            ret.MagicEffects = MaskItemExt.Factory(item.MagicEffects.GetEqualsMask(rhs.MagicEffects, include), include);
            ret.LandscapeTextures = MaskItemExt.Factory(item.LandscapeTextures.GetEqualsMask(rhs.LandscapeTextures, include), include);
            ret.ObjectEffects = MaskItemExt.Factory(item.ObjectEffects.GetEqualsMask(rhs.ObjectEffects, include), include);
            ret.Spells = MaskItemExt.Factory(item.Spells.GetEqualsMask(rhs.Spells, include), include);
            ret.Scrolls = MaskItemExt.Factory(item.Scrolls.GetEqualsMask(rhs.Scrolls, include), include);
            ret.Activators = MaskItemExt.Factory(item.Activators.GetEqualsMask(rhs.Activators, include), include);
            ret.TalkingActivators = MaskItemExt.Factory(item.TalkingActivators.GetEqualsMask(rhs.TalkingActivators, include), include);
            ret.Armors = MaskItemExt.Factory(item.Armors.GetEqualsMask(rhs.Armors, include), include);
            ret.Books = MaskItemExt.Factory(item.Books.GetEqualsMask(rhs.Books, include), include);
            ret.Containers = MaskItemExt.Factory(item.Containers.GetEqualsMask(rhs.Containers, include), include);
            ret.Doors = MaskItemExt.Factory(item.Doors.GetEqualsMask(rhs.Doors, include), include);
            ret.Ingredients = MaskItemExt.Factory(item.Ingredients.GetEqualsMask(rhs.Ingredients, include), include);
            ret.Lights = MaskItemExt.Factory(item.Lights.GetEqualsMask(rhs.Lights, include), include);
            ret.MiscItems = MaskItemExt.Factory(item.MiscItems.GetEqualsMask(rhs.MiscItems, include), include);
            ret.AlchemicalApparatuses = MaskItemExt.Factory(item.AlchemicalApparatuses.GetEqualsMask(rhs.AlchemicalApparatuses, include), include);
            ret.Statics = MaskItemExt.Factory(item.Statics.GetEqualsMask(rhs.Statics, include), include);
            ret.MoveableStatics = MaskItemExt.Factory(item.MoveableStatics.GetEqualsMask(rhs.MoveableStatics, include), include);
            ret.Grasses = MaskItemExt.Factory(item.Grasses.GetEqualsMask(rhs.Grasses, include), include);
            ret.Trees = MaskItemExt.Factory(item.Trees.GetEqualsMask(rhs.Trees, include), include);
            ret.Florae = MaskItemExt.Factory(item.Florae.GetEqualsMask(rhs.Florae, include), include);
            ret.Furniture = MaskItemExt.Factory(item.Furniture.GetEqualsMask(rhs.Furniture, include), include);
            ret.Weapons = MaskItemExt.Factory(item.Weapons.GetEqualsMask(rhs.Weapons, include), include);
            ret.Ammunitions = MaskItemExt.Factory(item.Ammunitions.GetEqualsMask(rhs.Ammunitions, include), include);
            ret.Npcs = MaskItemExt.Factory(item.Npcs.GetEqualsMask(rhs.Npcs, include), include);
            ret.LeveledNpcs = MaskItemExt.Factory(item.LeveledNpcs.GetEqualsMask(rhs.LeveledNpcs, include), include);
            ret.Keys = MaskItemExt.Factory(item.Keys.GetEqualsMask(rhs.Keys, include), include);
            ret.Ingestibles = MaskItemExt.Factory(item.Ingestibles.GetEqualsMask(rhs.Ingestibles, include), include);
            ret.IdleMarkers = MaskItemExt.Factory(item.IdleMarkers.GetEqualsMask(rhs.IdleMarkers, include), include);
            ret.ConstructibleObjects = MaskItemExt.Factory(item.ConstructibleObjects.GetEqualsMask(rhs.ConstructibleObjects, include), include);
            ret.Projectiles = MaskItemExt.Factory(item.Projectiles.GetEqualsMask(rhs.Projectiles, include), include);
            ret.Hazards = MaskItemExt.Factory(item.Hazards.GetEqualsMask(rhs.Hazards, include), include);
            ret.SoulGems = MaskItemExt.Factory(item.SoulGems.GetEqualsMask(rhs.SoulGems, include), include);
            ret.LeveledItems = MaskItemExt.Factory(item.LeveledItems.GetEqualsMask(rhs.LeveledItems, include), include);
            ret.Weathers = MaskItemExt.Factory(item.Weathers.GetEqualsMask(rhs.Weathers, include), include);
            ret.Climates = MaskItemExt.Factory(item.Climates.GetEqualsMask(rhs.Climates, include), include);
            ret.ShaderParticleGeometries = MaskItemExt.Factory(item.ShaderParticleGeometries.GetEqualsMask(rhs.ShaderParticleGeometries, include), include);
            ret.VisualEffects = MaskItemExt.Factory(item.VisualEffects.GetEqualsMask(rhs.VisualEffects, include), include);
            ret.Regions = MaskItemExt.Factory(item.Regions.GetEqualsMask(rhs.Regions, include), include);
            ret.NavigationMeshInfoMaps = MaskItemExt.Factory(item.NavigationMeshInfoMaps.GetEqualsMask(rhs.NavigationMeshInfoMaps, include), include);
            ret.Cells = MaskItemExt.Factory(item.Cells.GetEqualsMask(rhs.Cells, include), include);
            ret.Worldspaces = MaskItemExt.Factory(item.Worldspaces.GetEqualsMask(rhs.Worldspaces, include), include);
            ret.DialogTopics = MaskItemExt.Factory(item.DialogTopics.GetEqualsMask(rhs.DialogTopics, include), include);
            ret.Quests = MaskItemExt.Factory(item.Quests.GetEqualsMask(rhs.Quests, include), include);
            ret.IdleAnimations = MaskItemExt.Factory(item.IdleAnimations.GetEqualsMask(rhs.IdleAnimations, include), include);
            ret.Packages = MaskItemExt.Factory(item.Packages.GetEqualsMask(rhs.Packages, include), include);
            ret.CombatStyles = MaskItemExt.Factory(item.CombatStyles.GetEqualsMask(rhs.CombatStyles, include), include);
            ret.LoadScreens = MaskItemExt.Factory(item.LoadScreens.GetEqualsMask(rhs.LoadScreens, include), include);
            ret.LeveledSpells = MaskItemExt.Factory(item.LeveledSpells.GetEqualsMask(rhs.LeveledSpells, include), include);
            ret.AnimatedObjects = MaskItemExt.Factory(item.AnimatedObjects.GetEqualsMask(rhs.AnimatedObjects, include), include);
            ret.Waters = MaskItemExt.Factory(item.Waters.GetEqualsMask(rhs.Waters, include), include);
            ret.EffectShaders = MaskItemExt.Factory(item.EffectShaders.GetEqualsMask(rhs.EffectShaders, include), include);
            ret.Explosions = MaskItemExt.Factory(item.Explosions.GetEqualsMask(rhs.Explosions, include), include);
            ret.Debris = MaskItemExt.Factory(item.Debris.GetEqualsMask(rhs.Debris, include), include);
            ret.ImageSpaces = MaskItemExt.Factory(item.ImageSpaces.GetEqualsMask(rhs.ImageSpaces, include), include);
            ret.ImageSpaceAdapters = MaskItemExt.Factory(item.ImageSpaceAdapters.GetEqualsMask(rhs.ImageSpaceAdapters, include), include);
            ret.FormLists = MaskItemExt.Factory(item.FormLists.GetEqualsMask(rhs.FormLists, include), include);
            ret.Perks = MaskItemExt.Factory(item.Perks.GetEqualsMask(rhs.Perks, include), include);
            ret.BodyParts = MaskItemExt.Factory(item.BodyParts.GetEqualsMask(rhs.BodyParts, include), include);
            ret.AddonNodes = MaskItemExt.Factory(item.AddonNodes.GetEqualsMask(rhs.AddonNodes, include), include);
            ret.ActorValueInformation = MaskItemExt.Factory(item.ActorValueInformation.GetEqualsMask(rhs.ActorValueInformation, include), include);
            ret.CameraShots = MaskItemExt.Factory(item.CameraShots.GetEqualsMask(rhs.CameraShots, include), include);
            ret.CameraPaths = MaskItemExt.Factory(item.CameraPaths.GetEqualsMask(rhs.CameraPaths, include), include);
            ret.VoiceTypes = MaskItemExt.Factory(item.VoiceTypes.GetEqualsMask(rhs.VoiceTypes, include), include);
            ret.MaterialTypes = MaskItemExt.Factory(item.MaterialTypes.GetEqualsMask(rhs.MaterialTypes, include), include);
            ret.Impacts = MaskItemExt.Factory(item.Impacts.GetEqualsMask(rhs.Impacts, include), include);
            ret.ImpactDataSets = MaskItemExt.Factory(item.ImpactDataSets.GetEqualsMask(rhs.ImpactDataSets, include), include);
            ret.ArmorAddons = MaskItemExt.Factory(item.ArmorAddons.GetEqualsMask(rhs.ArmorAddons, include), include);
            ret.EncounterZones = MaskItemExt.Factory(item.EncounterZones.GetEqualsMask(rhs.EncounterZones, include), include);
            ret.Locations = MaskItemExt.Factory(item.Locations.GetEqualsMask(rhs.Locations, include), include);
            ret.Messages = MaskItemExt.Factory(item.Messages.GetEqualsMask(rhs.Messages, include), include);
            ret.DefaultObjectManagers = MaskItemExt.Factory(item.DefaultObjectManagers.GetEqualsMask(rhs.DefaultObjectManagers, include), include);
            ret.LightingTemplates = MaskItemExt.Factory(item.LightingTemplates.GetEqualsMask(rhs.LightingTemplates, include), include);
            ret.MusicTypes = MaskItemExt.Factory(item.MusicTypes.GetEqualsMask(rhs.MusicTypes, include), include);
            ret.Footsteps = MaskItemExt.Factory(item.Footsteps.GetEqualsMask(rhs.Footsteps, include), include);
            ret.FootstepSets = MaskItemExt.Factory(item.FootstepSets.GetEqualsMask(rhs.FootstepSets, include), include);
            ret.StoryManagerBranchNodes = MaskItemExt.Factory(item.StoryManagerBranchNodes.GetEqualsMask(rhs.StoryManagerBranchNodes, include), include);
            ret.StoryManagerQuestNodes = MaskItemExt.Factory(item.StoryManagerQuestNodes.GetEqualsMask(rhs.StoryManagerQuestNodes, include), include);
            ret.StoryManagerEventNodes = MaskItemExt.Factory(item.StoryManagerEventNodes.GetEqualsMask(rhs.StoryManagerEventNodes, include), include);
            ret.DialogBranches = MaskItemExt.Factory(item.DialogBranches.GetEqualsMask(rhs.DialogBranches, include), include);
            ret.MusicTracks = MaskItemExt.Factory(item.MusicTracks.GetEqualsMask(rhs.MusicTracks, include), include);
            ret.DialogViews = MaskItemExt.Factory(item.DialogViews.GetEqualsMask(rhs.DialogViews, include), include);
            ret.WordsOfPower = MaskItemExt.Factory(item.WordsOfPower.GetEqualsMask(rhs.WordsOfPower, include), include);
            ret.Shouts = MaskItemExt.Factory(item.Shouts.GetEqualsMask(rhs.Shouts, include), include);
            ret.EquipTypes = MaskItemExt.Factory(item.EquipTypes.GetEqualsMask(rhs.EquipTypes, include), include);
            ret.Relationships = MaskItemExt.Factory(item.Relationships.GetEqualsMask(rhs.Relationships, include), include);
            ret.Scenes = MaskItemExt.Factory(item.Scenes.GetEqualsMask(rhs.Scenes, include), include);
            ret.AssociationTypes = MaskItemExt.Factory(item.AssociationTypes.GetEqualsMask(rhs.AssociationTypes, include), include);
            ret.Outfits = MaskItemExt.Factory(item.Outfits.GetEqualsMask(rhs.Outfits, include), include);
            ret.ArtObjects = MaskItemExt.Factory(item.ArtObjects.GetEqualsMask(rhs.ArtObjects, include), include);
            ret.MaterialObjects = MaskItemExt.Factory(item.MaterialObjects.GetEqualsMask(rhs.MaterialObjects, include), include);
            ret.MovementTypes = MaskItemExt.Factory(item.MovementTypes.GetEqualsMask(rhs.MovementTypes, include), include);
            ret.SoundDescriptors = MaskItemExt.Factory(item.SoundDescriptors.GetEqualsMask(rhs.SoundDescriptors, include), include);
            ret.DualCastData = MaskItemExt.Factory(item.DualCastData.GetEqualsMask(rhs.DualCastData, include), include);
            ret.SoundCategories = MaskItemExt.Factory(item.SoundCategories.GetEqualsMask(rhs.SoundCategories, include), include);
            ret.SoundOutputModels = MaskItemExt.Factory(item.SoundOutputModels.GetEqualsMask(rhs.SoundOutputModels, include), include);
            ret.CollisionLayers = MaskItemExt.Factory(item.CollisionLayers.GetEqualsMask(rhs.CollisionLayers, include), include);
            ret.Colors = MaskItemExt.Factory(item.Colors.GetEqualsMask(rhs.Colors, include), include);
            ret.ReverbParameters = MaskItemExt.Factory(item.ReverbParameters.GetEqualsMask(rhs.ReverbParameters, include), include);
            ret.VolumetricLightings = MaskItemExt.Factory(item.VolumetricLightings.GetEqualsMask(rhs.VolumetricLightings, include), include);
            ret.LensFlares = MaskItemExt.Factory(item.LensFlares.GetEqualsMask(rhs.LensFlares, include), include);
        }
        
        public string Print(
            ISkyrimModGetter item,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISkyrimModGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SkyrimMod =>");
            }
            else
            {
                sb.AppendLine($"{name} (SkyrimMod) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISkyrimModGetter item,
            StructuredStringBuilder sb,
            SkyrimMod.Mask<bool>? printMask = null)
        {
            if (printMask?.ModHeader?.Overall ?? true)
            {
                item.ModHeader?.Print(sb, "ModHeader");
            }
            if (printMask?.GameSettings?.Overall ?? true)
            {
                item.GameSettings?.Print(sb, "GameSettings");
            }
            if (printMask?.Keywords?.Overall ?? true)
            {
                item.Keywords?.Print(sb, "Keywords");
            }
            if (printMask?.LocationReferenceTypes?.Overall ?? true)
            {
                item.LocationReferenceTypes?.Print(sb, "LocationReferenceTypes");
            }
            if (printMask?.Actions?.Overall ?? true)
            {
                item.Actions?.Print(sb, "Actions");
            }
            if (printMask?.TextureSets?.Overall ?? true)
            {
                item.TextureSets?.Print(sb, "TextureSets");
            }
            if (printMask?.Globals?.Overall ?? true)
            {
                item.Globals?.Print(sb, "Globals");
            }
            if (printMask?.Classes?.Overall ?? true)
            {
                item.Classes?.Print(sb, "Classes");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                item.Factions?.Print(sb, "Factions");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                item.HeadParts?.Print(sb, "HeadParts");
            }
            if (printMask?.Hairs?.Overall ?? true)
            {
                item.Hairs?.Print(sb, "Hairs");
            }
            if (printMask?.Eyes?.Overall ?? true)
            {
                item.Eyes?.Print(sb, "Eyes");
            }
            if (printMask?.Races?.Overall ?? true)
            {
                item.Races?.Print(sb, "Races");
            }
            if (printMask?.SoundMarkers?.Overall ?? true)
            {
                item.SoundMarkers?.Print(sb, "SoundMarkers");
            }
            if (printMask?.AcousticSpaces?.Overall ?? true)
            {
                item.AcousticSpaces?.Print(sb, "AcousticSpaces");
            }
            if (printMask?.MagicEffects?.Overall ?? true)
            {
                item.MagicEffects?.Print(sb, "MagicEffects");
            }
            if (printMask?.LandscapeTextures?.Overall ?? true)
            {
                item.LandscapeTextures?.Print(sb, "LandscapeTextures");
            }
            if (printMask?.ObjectEffects?.Overall ?? true)
            {
                item.ObjectEffects?.Print(sb, "ObjectEffects");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                item.Spells?.Print(sb, "Spells");
            }
            if (printMask?.Scrolls?.Overall ?? true)
            {
                item.Scrolls?.Print(sb, "Scrolls");
            }
            if (printMask?.Activators?.Overall ?? true)
            {
                item.Activators?.Print(sb, "Activators");
            }
            if (printMask?.TalkingActivators?.Overall ?? true)
            {
                item.TalkingActivators?.Print(sb, "TalkingActivators");
            }
            if (printMask?.Armors?.Overall ?? true)
            {
                item.Armors?.Print(sb, "Armors");
            }
            if (printMask?.Books?.Overall ?? true)
            {
                item.Books?.Print(sb, "Books");
            }
            if (printMask?.Containers?.Overall ?? true)
            {
                item.Containers?.Print(sb, "Containers");
            }
            if (printMask?.Doors?.Overall ?? true)
            {
                item.Doors?.Print(sb, "Doors");
            }
            if (printMask?.Ingredients?.Overall ?? true)
            {
                item.Ingredients?.Print(sb, "Ingredients");
            }
            if (printMask?.Lights?.Overall ?? true)
            {
                item.Lights?.Print(sb, "Lights");
            }
            if (printMask?.MiscItems?.Overall ?? true)
            {
                item.MiscItems?.Print(sb, "MiscItems");
            }
            if (printMask?.AlchemicalApparatuses?.Overall ?? true)
            {
                item.AlchemicalApparatuses?.Print(sb, "AlchemicalApparatuses");
            }
            if (printMask?.Statics?.Overall ?? true)
            {
                item.Statics?.Print(sb, "Statics");
            }
            if (printMask?.MoveableStatics?.Overall ?? true)
            {
                item.MoveableStatics?.Print(sb, "MoveableStatics");
            }
            if (printMask?.Grasses?.Overall ?? true)
            {
                item.Grasses?.Print(sb, "Grasses");
            }
            if (printMask?.Trees?.Overall ?? true)
            {
                item.Trees?.Print(sb, "Trees");
            }
            if (printMask?.Florae?.Overall ?? true)
            {
                item.Florae?.Print(sb, "Florae");
            }
            if (printMask?.Furniture?.Overall ?? true)
            {
                item.Furniture?.Print(sb, "Furniture");
            }
            if (printMask?.Weapons?.Overall ?? true)
            {
                item.Weapons?.Print(sb, "Weapons");
            }
            if (printMask?.Ammunitions?.Overall ?? true)
            {
                item.Ammunitions?.Print(sb, "Ammunitions");
            }
            if (printMask?.Npcs?.Overall ?? true)
            {
                item.Npcs?.Print(sb, "Npcs");
            }
            if (printMask?.LeveledNpcs?.Overall ?? true)
            {
                item.LeveledNpcs?.Print(sb, "LeveledNpcs");
            }
            if (printMask?.Keys?.Overall ?? true)
            {
                item.Keys?.Print(sb, "Keys");
            }
            if (printMask?.Ingestibles?.Overall ?? true)
            {
                item.Ingestibles?.Print(sb, "Ingestibles");
            }
            if (printMask?.IdleMarkers?.Overall ?? true)
            {
                item.IdleMarkers?.Print(sb, "IdleMarkers");
            }
            if (printMask?.ConstructibleObjects?.Overall ?? true)
            {
                item.ConstructibleObjects?.Print(sb, "ConstructibleObjects");
            }
            if (printMask?.Projectiles?.Overall ?? true)
            {
                item.Projectiles?.Print(sb, "Projectiles");
            }
            if (printMask?.Hazards?.Overall ?? true)
            {
                item.Hazards?.Print(sb, "Hazards");
            }
            if (printMask?.SoulGems?.Overall ?? true)
            {
                item.SoulGems?.Print(sb, "SoulGems");
            }
            if (printMask?.LeveledItems?.Overall ?? true)
            {
                item.LeveledItems?.Print(sb, "LeveledItems");
            }
            if (printMask?.Weathers?.Overall ?? true)
            {
                item.Weathers?.Print(sb, "Weathers");
            }
            if (printMask?.Climates?.Overall ?? true)
            {
                item.Climates?.Print(sb, "Climates");
            }
            if (printMask?.ShaderParticleGeometries?.Overall ?? true)
            {
                item.ShaderParticleGeometries?.Print(sb, "ShaderParticleGeometries");
            }
            if (printMask?.VisualEffects?.Overall ?? true)
            {
                item.VisualEffects?.Print(sb, "VisualEffects");
            }
            if (printMask?.Regions?.Overall ?? true)
            {
                item.Regions?.Print(sb, "Regions");
            }
            if (printMask?.NavigationMeshInfoMaps?.Overall ?? true)
            {
                item.NavigationMeshInfoMaps?.Print(sb, "NavigationMeshInfoMaps");
            }
            if (printMask?.Cells?.Overall ?? true)
            {
                item.Cells?.Print(sb, "Cells");
            }
            if (printMask?.Worldspaces?.Overall ?? true)
            {
                item.Worldspaces?.Print(sb, "Worldspaces");
            }
            if (printMask?.DialogTopics?.Overall ?? true)
            {
                item.DialogTopics?.Print(sb, "DialogTopics");
            }
            if (printMask?.Quests?.Overall ?? true)
            {
                item.Quests?.Print(sb, "Quests");
            }
            if (printMask?.IdleAnimations?.Overall ?? true)
            {
                item.IdleAnimations?.Print(sb, "IdleAnimations");
            }
            if (printMask?.Packages?.Overall ?? true)
            {
                item.Packages?.Print(sb, "Packages");
            }
            if (printMask?.CombatStyles?.Overall ?? true)
            {
                item.CombatStyles?.Print(sb, "CombatStyles");
            }
            if (printMask?.LoadScreens?.Overall ?? true)
            {
                item.LoadScreens?.Print(sb, "LoadScreens");
            }
            if (printMask?.LeveledSpells?.Overall ?? true)
            {
                item.LeveledSpells?.Print(sb, "LeveledSpells");
            }
            if (printMask?.AnimatedObjects?.Overall ?? true)
            {
                item.AnimatedObjects?.Print(sb, "AnimatedObjects");
            }
            if (printMask?.Waters?.Overall ?? true)
            {
                item.Waters?.Print(sb, "Waters");
            }
            if (printMask?.EffectShaders?.Overall ?? true)
            {
                item.EffectShaders?.Print(sb, "EffectShaders");
            }
            if (printMask?.Explosions?.Overall ?? true)
            {
                item.Explosions?.Print(sb, "Explosions");
            }
            if (printMask?.Debris?.Overall ?? true)
            {
                item.Debris?.Print(sb, "Debris");
            }
            if (printMask?.ImageSpaces?.Overall ?? true)
            {
                item.ImageSpaces?.Print(sb, "ImageSpaces");
            }
            if (printMask?.ImageSpaceAdapters?.Overall ?? true)
            {
                item.ImageSpaceAdapters?.Print(sb, "ImageSpaceAdapters");
            }
            if (printMask?.FormLists?.Overall ?? true)
            {
                item.FormLists?.Print(sb, "FormLists");
            }
            if (printMask?.Perks?.Overall ?? true)
            {
                item.Perks?.Print(sb, "Perks");
            }
            if (printMask?.BodyParts?.Overall ?? true)
            {
                item.BodyParts?.Print(sb, "BodyParts");
            }
            if (printMask?.AddonNodes?.Overall ?? true)
            {
                item.AddonNodes?.Print(sb, "AddonNodes");
            }
            if (printMask?.ActorValueInformation?.Overall ?? true)
            {
                item.ActorValueInformation?.Print(sb, "ActorValueInformation");
            }
            if (printMask?.CameraShots?.Overall ?? true)
            {
                item.CameraShots?.Print(sb, "CameraShots");
            }
            if (printMask?.CameraPaths?.Overall ?? true)
            {
                item.CameraPaths?.Print(sb, "CameraPaths");
            }
            if (printMask?.VoiceTypes?.Overall ?? true)
            {
                item.VoiceTypes?.Print(sb, "VoiceTypes");
            }
            if (printMask?.MaterialTypes?.Overall ?? true)
            {
                item.MaterialTypes?.Print(sb, "MaterialTypes");
            }
            if (printMask?.Impacts?.Overall ?? true)
            {
                item.Impacts?.Print(sb, "Impacts");
            }
            if (printMask?.ImpactDataSets?.Overall ?? true)
            {
                item.ImpactDataSets?.Print(sb, "ImpactDataSets");
            }
            if (printMask?.ArmorAddons?.Overall ?? true)
            {
                item.ArmorAddons?.Print(sb, "ArmorAddons");
            }
            if (printMask?.EncounterZones?.Overall ?? true)
            {
                item.EncounterZones?.Print(sb, "EncounterZones");
            }
            if (printMask?.Locations?.Overall ?? true)
            {
                item.Locations?.Print(sb, "Locations");
            }
            if (printMask?.Messages?.Overall ?? true)
            {
                item.Messages?.Print(sb, "Messages");
            }
            if (printMask?.DefaultObjectManagers?.Overall ?? true)
            {
                item.DefaultObjectManagers?.Print(sb, "DefaultObjectManagers");
            }
            if (printMask?.LightingTemplates?.Overall ?? true)
            {
                item.LightingTemplates?.Print(sb, "LightingTemplates");
            }
            if (printMask?.MusicTypes?.Overall ?? true)
            {
                item.MusicTypes?.Print(sb, "MusicTypes");
            }
            if (printMask?.Footsteps?.Overall ?? true)
            {
                item.Footsteps?.Print(sb, "Footsteps");
            }
            if (printMask?.FootstepSets?.Overall ?? true)
            {
                item.FootstepSets?.Print(sb, "FootstepSets");
            }
            if (printMask?.StoryManagerBranchNodes?.Overall ?? true)
            {
                item.StoryManagerBranchNodes?.Print(sb, "StoryManagerBranchNodes");
            }
            if (printMask?.StoryManagerQuestNodes?.Overall ?? true)
            {
                item.StoryManagerQuestNodes?.Print(sb, "StoryManagerQuestNodes");
            }
            if (printMask?.StoryManagerEventNodes?.Overall ?? true)
            {
                item.StoryManagerEventNodes?.Print(sb, "StoryManagerEventNodes");
            }
            if (printMask?.DialogBranches?.Overall ?? true)
            {
                item.DialogBranches?.Print(sb, "DialogBranches");
            }
            if (printMask?.MusicTracks?.Overall ?? true)
            {
                item.MusicTracks?.Print(sb, "MusicTracks");
            }
            if (printMask?.DialogViews?.Overall ?? true)
            {
                item.DialogViews?.Print(sb, "DialogViews");
            }
            if (printMask?.WordsOfPower?.Overall ?? true)
            {
                item.WordsOfPower?.Print(sb, "WordsOfPower");
            }
            if (printMask?.Shouts?.Overall ?? true)
            {
                item.Shouts?.Print(sb, "Shouts");
            }
            if (printMask?.EquipTypes?.Overall ?? true)
            {
                item.EquipTypes?.Print(sb, "EquipTypes");
            }
            if (printMask?.Relationships?.Overall ?? true)
            {
                item.Relationships?.Print(sb, "Relationships");
            }
            if (printMask?.Scenes?.Overall ?? true)
            {
                item.Scenes?.Print(sb, "Scenes");
            }
            if (printMask?.AssociationTypes?.Overall ?? true)
            {
                item.AssociationTypes?.Print(sb, "AssociationTypes");
            }
            if (printMask?.Outfits?.Overall ?? true)
            {
                item.Outfits?.Print(sb, "Outfits");
            }
            if (printMask?.ArtObjects?.Overall ?? true)
            {
                item.ArtObjects?.Print(sb, "ArtObjects");
            }
            if (printMask?.MaterialObjects?.Overall ?? true)
            {
                item.MaterialObjects?.Print(sb, "MaterialObjects");
            }
            if (printMask?.MovementTypes?.Overall ?? true)
            {
                item.MovementTypes?.Print(sb, "MovementTypes");
            }
            if (printMask?.SoundDescriptors?.Overall ?? true)
            {
                item.SoundDescriptors?.Print(sb, "SoundDescriptors");
            }
            if (printMask?.DualCastData?.Overall ?? true)
            {
                item.DualCastData?.Print(sb, "DualCastData");
            }
            if (printMask?.SoundCategories?.Overall ?? true)
            {
                item.SoundCategories?.Print(sb, "SoundCategories");
            }
            if (printMask?.SoundOutputModels?.Overall ?? true)
            {
                item.SoundOutputModels?.Print(sb, "SoundOutputModels");
            }
            if (printMask?.CollisionLayers?.Overall ?? true)
            {
                item.CollisionLayers?.Print(sb, "CollisionLayers");
            }
            if (printMask?.Colors?.Overall ?? true)
            {
                item.Colors?.Print(sb, "Colors");
            }
            if (printMask?.ReverbParameters?.Overall ?? true)
            {
                item.ReverbParameters?.Print(sb, "ReverbParameters");
            }
            if (printMask?.VolumetricLightings?.Overall ?? true)
            {
                item.VolumetricLightings?.Print(sb, "VolumetricLightings");
            }
            if (printMask?.LensFlares?.Overall ?? true)
            {
                item.LensFlares?.Print(sb, "LensFlares");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISkyrimModGetter? lhs,
            ISkyrimModGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ModHeader) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ModHeader, rhs.ModHeader, out var lhsModHeader, out var rhsModHeader, out var isModHeaderEqual))
                {
                    if (!((SkyrimModHeaderCommon)((ISkyrimModHeaderGetter)lhsModHeader).CommonInstance()!).Equals(lhsModHeader, rhsModHeader, equalsMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ModHeader))) return false;
                }
                else if (!isModHeaderEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.GameSettings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.GameSettings, rhs.GameSettings, out var lhsGameSettings, out var rhsGameSettings, out var isGameSettingsEqual))
                {
                    if (!object.Equals(lhsGameSettings, rhsGameSettings)) return false;
                }
                else if (!isGameSettingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keywords) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Keywords, rhs.Keywords, out var lhsKeywords, out var rhsKeywords, out var isKeywordsEqual))
                {
                    if (!object.Equals(lhsKeywords, rhsKeywords)) return false;
                }
                else if (!isKeywordsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LocationReferenceTypes, rhs.LocationReferenceTypes, out var lhsLocationReferenceTypes, out var rhsLocationReferenceTypes, out var isLocationReferenceTypesEqual))
                {
                    if (!object.Equals(lhsLocationReferenceTypes, rhsLocationReferenceTypes)) return false;
                }
                else if (!isLocationReferenceTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Actions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Actions, rhs.Actions, out var lhsActions, out var rhsActions, out var isActionsEqual))
                {
                    if (!object.Equals(lhsActions, rhsActions)) return false;
                }
                else if (!isActionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TextureSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TextureSets, rhs.TextureSets, out var lhsTextureSets, out var rhsTextureSets, out var isTextureSetsEqual))
                {
                    if (!object.Equals(lhsTextureSets, rhsTextureSets)) return false;
                }
                else if (!isTextureSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Globals) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Globals, rhs.Globals, out var lhsGlobals, out var rhsGlobals, out var isGlobalsEqual))
                {
                    if (!object.Equals(lhsGlobals, rhsGlobals)) return false;
                }
                else if (!isGlobalsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Classes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Classes, rhs.Classes, out var lhsClasses, out var rhsClasses, out var isClassesEqual))
                {
                    if (!object.Equals(lhsClasses, rhsClasses)) return false;
                }
                else if (!isClassesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Factions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Factions, rhs.Factions, out var lhsFactions, out var rhsFactions, out var isFactionsEqual))
                {
                    if (!object.Equals(lhsFactions, rhsFactions)) return false;
                }
                else if (!isFactionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.HeadParts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HeadParts, rhs.HeadParts, out var lhsHeadParts, out var rhsHeadParts, out var isHeadPartsEqual))
                {
                    if (!object.Equals(lhsHeadParts, rhsHeadParts)) return false;
                }
                else if (!isHeadPartsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hairs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Hairs, rhs.Hairs, out var lhsHairs, out var rhsHairs, out var isHairsEqual))
                {
                    if (!object.Equals(lhsHairs, rhsHairs)) return false;
                }
                else if (!isHairsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Eyes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Eyes, rhs.Eyes, out var lhsEyes, out var rhsEyes, out var isEyesEqual))
                {
                    if (!object.Equals(lhsEyes, rhsEyes)) return false;
                }
                else if (!isEyesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Races) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Races, rhs.Races, out var lhsRaces, out var rhsRaces, out var isRacesEqual))
                {
                    if (!object.Equals(lhsRaces, rhsRaces)) return false;
                }
                else if (!isRacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundMarkers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundMarkers, rhs.SoundMarkers, out var lhsSoundMarkers, out var rhsSoundMarkers, out var isSoundMarkersEqual))
                {
                    if (!object.Equals(lhsSoundMarkers, rhsSoundMarkers)) return false;
                }
                else if (!isSoundMarkersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AcousticSpaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AcousticSpaces, rhs.AcousticSpaces, out var lhsAcousticSpaces, out var rhsAcousticSpaces, out var isAcousticSpacesEqual))
                {
                    if (!object.Equals(lhsAcousticSpaces, rhsAcousticSpaces)) return false;
                }
                else if (!isAcousticSpacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MagicEffects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MagicEffects, rhs.MagicEffects, out var lhsMagicEffects, out var rhsMagicEffects, out var isMagicEffectsEqual))
                {
                    if (!object.Equals(lhsMagicEffects, rhsMagicEffects)) return false;
                }
                else if (!isMagicEffectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LandscapeTextures) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LandscapeTextures, rhs.LandscapeTextures, out var lhsLandscapeTextures, out var rhsLandscapeTextures, out var isLandscapeTexturesEqual))
                {
                    if (!object.Equals(lhsLandscapeTextures, rhsLandscapeTextures)) return false;
                }
                else if (!isLandscapeTexturesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ObjectEffects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectEffects, rhs.ObjectEffects, out var lhsObjectEffects, out var rhsObjectEffects, out var isObjectEffectsEqual))
                {
                    if (!object.Equals(lhsObjectEffects, rhsObjectEffects)) return false;
                }
                else if (!isObjectEffectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Spells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Spells, rhs.Spells, out var lhsSpells, out var rhsSpells, out var isSpellsEqual))
                {
                    if (!object.Equals(lhsSpells, rhsSpells)) return false;
                }
                else if (!isSpellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Scrolls) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Scrolls, rhs.Scrolls, out var lhsScrolls, out var rhsScrolls, out var isScrollsEqual))
                {
                    if (!object.Equals(lhsScrolls, rhsScrolls)) return false;
                }
                else if (!isScrollsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Activators) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Activators, rhs.Activators, out var lhsActivators, out var rhsActivators, out var isActivatorsEqual))
                {
                    if (!object.Equals(lhsActivators, rhsActivators)) return false;
                }
                else if (!isActivatorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TalkingActivators) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TalkingActivators, rhs.TalkingActivators, out var lhsTalkingActivators, out var rhsTalkingActivators, out var isTalkingActivatorsEqual))
                {
                    if (!object.Equals(lhsTalkingActivators, rhsTalkingActivators)) return false;
                }
                else if (!isTalkingActivatorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Armors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Armors, rhs.Armors, out var lhsArmors, out var rhsArmors, out var isArmorsEqual))
                {
                    if (!object.Equals(lhsArmors, rhsArmors)) return false;
                }
                else if (!isArmorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Books) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Books, rhs.Books, out var lhsBooks, out var rhsBooks, out var isBooksEqual))
                {
                    if (!object.Equals(lhsBooks, rhsBooks)) return false;
                }
                else if (!isBooksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Containers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Containers, rhs.Containers, out var lhsContainers, out var rhsContainers, out var isContainersEqual))
                {
                    if (!object.Equals(lhsContainers, rhsContainers)) return false;
                }
                else if (!isContainersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Doors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Doors, rhs.Doors, out var lhsDoors, out var rhsDoors, out var isDoorsEqual))
                {
                    if (!object.Equals(lhsDoors, rhsDoors)) return false;
                }
                else if (!isDoorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingredients) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ingredients, rhs.Ingredients, out var lhsIngredients, out var rhsIngredients, out var isIngredientsEqual))
                {
                    if (!object.Equals(lhsIngredients, rhsIngredients)) return false;
                }
                else if (!isIngredientsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Lights) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Lights, rhs.Lights, out var lhsLights, out var rhsLights, out var isLightsEqual))
                {
                    if (!object.Equals(lhsLights, rhsLights)) return false;
                }
                else if (!isLightsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MiscItems) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MiscItems, rhs.MiscItems, out var lhsMiscItems, out var rhsMiscItems, out var isMiscItemsEqual))
                {
                    if (!object.Equals(lhsMiscItems, rhsMiscItems)) return false;
                }
                else if (!isMiscItemsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AlchemicalApparatuses) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AlchemicalApparatuses, rhs.AlchemicalApparatuses, out var lhsAlchemicalApparatuses, out var rhsAlchemicalApparatuses, out var isAlchemicalApparatusesEqual))
                {
                    if (!object.Equals(lhsAlchemicalApparatuses, rhsAlchemicalApparatuses)) return false;
                }
                else if (!isAlchemicalApparatusesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Statics) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Statics, rhs.Statics, out var lhsStatics, out var rhsStatics, out var isStaticsEqual))
                {
                    if (!object.Equals(lhsStatics, rhsStatics)) return false;
                }
                else if (!isStaticsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MoveableStatics) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MoveableStatics, rhs.MoveableStatics, out var lhsMoveableStatics, out var rhsMoveableStatics, out var isMoveableStaticsEqual))
                {
                    if (!object.Equals(lhsMoveableStatics, rhsMoveableStatics)) return false;
                }
                else if (!isMoveableStaticsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Grasses) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Grasses, rhs.Grasses, out var lhsGrasses, out var rhsGrasses, out var isGrassesEqual))
                {
                    if (!object.Equals(lhsGrasses, rhsGrasses)) return false;
                }
                else if (!isGrassesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Trees) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Trees, rhs.Trees, out var lhsTrees, out var rhsTrees, out var isTreesEqual))
                {
                    if (!object.Equals(lhsTrees, rhsTrees)) return false;
                }
                else if (!isTreesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Florae) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Florae, rhs.Florae, out var lhsFlorae, out var rhsFlorae, out var isFloraeEqual))
                {
                    if (!object.Equals(lhsFlorae, rhsFlorae)) return false;
                }
                else if (!isFloraeEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Furniture) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Furniture, rhs.Furniture, out var lhsFurniture, out var rhsFurniture, out var isFurnitureEqual))
                {
                    if (!object.Equals(lhsFurniture, rhsFurniture)) return false;
                }
                else if (!isFurnitureEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Weapons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weapons, rhs.Weapons, out var lhsWeapons, out var rhsWeapons, out var isWeaponsEqual))
                {
                    if (!object.Equals(lhsWeapons, rhsWeapons)) return false;
                }
                else if (!isWeaponsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ammunitions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ammunitions, rhs.Ammunitions, out var lhsAmmunitions, out var rhsAmmunitions, out var isAmmunitionsEqual))
                {
                    if (!object.Equals(lhsAmmunitions, rhsAmmunitions)) return false;
                }
                else if (!isAmmunitionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Npcs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Npcs, rhs.Npcs, out var lhsNpcs, out var rhsNpcs, out var isNpcsEqual))
                {
                    if (!object.Equals(lhsNpcs, rhsNpcs)) return false;
                }
                else if (!isNpcsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledNpcs) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledNpcs, rhs.LeveledNpcs, out var lhsLeveledNpcs, out var rhsLeveledNpcs, out var isLeveledNpcsEqual))
                {
                    if (!object.Equals(lhsLeveledNpcs, rhsLeveledNpcs)) return false;
                }
                else if (!isLeveledNpcsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keys) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Keys, rhs.Keys, out var lhsKeys, out var rhsKeys, out var isKeysEqual))
                {
                    if (!object.Equals(lhsKeys, rhsKeys)) return false;
                }
                else if (!isKeysEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingestibles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Ingestibles, rhs.Ingestibles, out var lhsIngestibles, out var rhsIngestibles, out var isIngestiblesEqual))
                {
                    if (!object.Equals(lhsIngestibles, rhsIngestibles)) return false;
                }
                else if (!isIngestiblesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.IdleMarkers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IdleMarkers, rhs.IdleMarkers, out var lhsIdleMarkers, out var rhsIdleMarkers, out var isIdleMarkersEqual))
                {
                    if (!object.Equals(lhsIdleMarkers, rhsIdleMarkers)) return false;
                }
                else if (!isIdleMarkersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ConstructibleObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ConstructibleObjects, rhs.ConstructibleObjects, out var lhsConstructibleObjects, out var rhsConstructibleObjects, out var isConstructibleObjectsEqual))
                {
                    if (!object.Equals(lhsConstructibleObjects, rhsConstructibleObjects)) return false;
                }
                else if (!isConstructibleObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Projectiles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Projectiles, rhs.Projectiles, out var lhsProjectiles, out var rhsProjectiles, out var isProjectilesEqual))
                {
                    if (!object.Equals(lhsProjectiles, rhsProjectiles)) return false;
                }
                else if (!isProjectilesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hazards) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Hazards, rhs.Hazards, out var lhsHazards, out var rhsHazards, out var isHazardsEqual))
                {
                    if (!object.Equals(lhsHazards, rhsHazards)) return false;
                }
                else if (!isHazardsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoulGems) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoulGems, rhs.SoulGems, out var lhsSoulGems, out var rhsSoulGems, out var isSoulGemsEqual))
                {
                    if (!object.Equals(lhsSoulGems, rhsSoulGems)) return false;
                }
                else if (!isSoulGemsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledItems) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledItems, rhs.LeveledItems, out var lhsLeveledItems, out var rhsLeveledItems, out var isLeveledItemsEqual))
                {
                    if (!object.Equals(lhsLeveledItems, rhsLeveledItems)) return false;
                }
                else if (!isLeveledItemsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Weathers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Weathers, rhs.Weathers, out var lhsWeathers, out var rhsWeathers, out var isWeathersEqual))
                {
                    if (!object.Equals(lhsWeathers, rhsWeathers)) return false;
                }
                else if (!isWeathersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Climates) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Climates, rhs.Climates, out var lhsClimates, out var rhsClimates, out var isClimatesEqual))
                {
                    if (!object.Equals(lhsClimates, rhsClimates)) return false;
                }
                else if (!isClimatesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ShaderParticleGeometries) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ShaderParticleGeometries, rhs.ShaderParticleGeometries, out var lhsShaderParticleGeometries, out var rhsShaderParticleGeometries, out var isShaderParticleGeometriesEqual))
                {
                    if (!object.Equals(lhsShaderParticleGeometries, rhsShaderParticleGeometries)) return false;
                }
                else if (!isShaderParticleGeometriesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.VisualEffects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VisualEffects, rhs.VisualEffects, out var lhsVisualEffects, out var rhsVisualEffects, out var isVisualEffectsEqual))
                {
                    if (!object.Equals(lhsVisualEffects, rhsVisualEffects)) return false;
                }
                else if (!isVisualEffectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Regions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Regions, rhs.Regions, out var lhsRegions, out var rhsRegions, out var isRegionsEqual))
                {
                    if (!object.Equals(lhsRegions, rhsRegions)) return false;
                }
                else if (!isRegionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NavigationMeshInfoMaps, rhs.NavigationMeshInfoMaps, out var lhsNavigationMeshInfoMaps, out var rhsNavigationMeshInfoMaps, out var isNavigationMeshInfoMapsEqual))
                {
                    if (!object.Equals(lhsNavigationMeshInfoMaps, rhsNavigationMeshInfoMaps)) return false;
                }
                else if (!isNavigationMeshInfoMapsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Cells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Cells, rhs.Cells, out var lhsCells, out var rhsCells, out var isCellsEqual))
                {
                    if (!object.Equals(lhsCells, rhsCells)) return false;
                }
                else if (!isCellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Worldspaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Worldspaces, rhs.Worldspaces, out var lhsWorldspaces, out var rhsWorldspaces, out var isWorldspacesEqual))
                {
                    if (!object.Equals(lhsWorldspaces, rhsWorldspaces)) return false;
                }
                else if (!isWorldspacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogTopics) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DialogTopics, rhs.DialogTopics, out var lhsDialogTopics, out var rhsDialogTopics, out var isDialogTopicsEqual))
                {
                    if (!object.Equals(lhsDialogTopics, rhsDialogTopics)) return false;
                }
                else if (!isDialogTopicsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Quests) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Quests, rhs.Quests, out var lhsQuests, out var rhsQuests, out var isQuestsEqual))
                {
                    if (!object.Equals(lhsQuests, rhsQuests)) return false;
                }
                else if (!isQuestsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.IdleAnimations) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.IdleAnimations, rhs.IdleAnimations, out var lhsIdleAnimations, out var rhsIdleAnimations, out var isIdleAnimationsEqual))
                {
                    if (!object.Equals(lhsIdleAnimations, rhsIdleAnimations)) return false;
                }
                else if (!isIdleAnimationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Packages) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Packages, rhs.Packages, out var lhsPackages, out var rhsPackages, out var isPackagesEqual))
                {
                    if (!object.Equals(lhsPackages, rhsPackages)) return false;
                }
                else if (!isPackagesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CombatStyles) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CombatStyles, rhs.CombatStyles, out var lhsCombatStyles, out var rhsCombatStyles, out var isCombatStylesEqual))
                {
                    if (!object.Equals(lhsCombatStyles, rhsCombatStyles)) return false;
                }
                else if (!isCombatStylesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LoadScreens) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LoadScreens, rhs.LoadScreens, out var lhsLoadScreens, out var rhsLoadScreens, out var isLoadScreensEqual))
                {
                    if (!object.Equals(lhsLoadScreens, rhsLoadScreens)) return false;
                }
                else if (!isLoadScreensEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledSpells) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LeveledSpells, rhs.LeveledSpells, out var lhsLeveledSpells, out var rhsLeveledSpells, out var isLeveledSpellsEqual))
                {
                    if (!object.Equals(lhsLeveledSpells, rhsLeveledSpells)) return false;
                }
                else if (!isLeveledSpellsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AnimatedObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AnimatedObjects, rhs.AnimatedObjects, out var lhsAnimatedObjects, out var rhsAnimatedObjects, out var isAnimatedObjectsEqual))
                {
                    if (!object.Equals(lhsAnimatedObjects, rhsAnimatedObjects)) return false;
                }
                else if (!isAnimatedObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Waters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Waters, rhs.Waters, out var lhsWaters, out var rhsWaters, out var isWatersEqual))
                {
                    if (!object.Equals(lhsWaters, rhsWaters)) return false;
                }
                else if (!isWatersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EffectShaders) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EffectShaders, rhs.EffectShaders, out var lhsEffectShaders, out var rhsEffectShaders, out var isEffectShadersEqual))
                {
                    if (!object.Equals(lhsEffectShaders, rhsEffectShaders)) return false;
                }
                else if (!isEffectShadersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Explosions) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Explosions, rhs.Explosions, out var lhsExplosions, out var rhsExplosions, out var isExplosionsEqual))
                {
                    if (!object.Equals(lhsExplosions, rhsExplosions)) return false;
                }
                else if (!isExplosionsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Debris) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Debris, rhs.Debris, out var lhsDebris, out var rhsDebris, out var isDebrisEqual))
                {
                    if (!object.Equals(lhsDebris, rhsDebris)) return false;
                }
                else if (!isDebrisEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImageSpaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ImageSpaces, rhs.ImageSpaces, out var lhsImageSpaces, out var rhsImageSpaces, out var isImageSpacesEqual))
                {
                    if (!object.Equals(lhsImageSpaces, rhsImageSpaces)) return false;
                }
                else if (!isImageSpacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImageSpaceAdapters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ImageSpaceAdapters, rhs.ImageSpaceAdapters, out var lhsImageSpaceAdapters, out var rhsImageSpaceAdapters, out var isImageSpaceAdaptersEqual))
                {
                    if (!object.Equals(lhsImageSpaceAdapters, rhsImageSpaceAdapters)) return false;
                }
                else if (!isImageSpaceAdaptersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.FormLists) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FormLists, rhs.FormLists, out var lhsFormLists, out var rhsFormLists, out var isFormListsEqual))
                {
                    if (!object.Equals(lhsFormLists, rhsFormLists)) return false;
                }
                else if (!isFormListsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Perks) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Perks, rhs.Perks, out var lhsPerks, out var rhsPerks, out var isPerksEqual))
                {
                    if (!object.Equals(lhsPerks, rhsPerks)) return false;
                }
                else if (!isPerksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.BodyParts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BodyParts, rhs.BodyParts, out var lhsBodyParts, out var rhsBodyParts, out var isBodyPartsEqual))
                {
                    if (!object.Equals(lhsBodyParts, rhsBodyParts)) return false;
                }
                else if (!isBodyPartsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AddonNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AddonNodes, rhs.AddonNodes, out var lhsAddonNodes, out var rhsAddonNodes, out var isAddonNodesEqual))
                {
                    if (!object.Equals(lhsAddonNodes, rhsAddonNodes)) return false;
                }
                else if (!isAddonNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ActorValueInformation) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ActorValueInformation, rhs.ActorValueInformation, out var lhsActorValueInformation, out var rhsActorValueInformation, out var isActorValueInformationEqual))
                {
                    if (!object.Equals(lhsActorValueInformation, rhsActorValueInformation)) return false;
                }
                else if (!isActorValueInformationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CameraShots) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CameraShots, rhs.CameraShots, out var lhsCameraShots, out var rhsCameraShots, out var isCameraShotsEqual))
                {
                    if (!object.Equals(lhsCameraShots, rhsCameraShots)) return false;
                }
                else if (!isCameraShotsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CameraPaths) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CameraPaths, rhs.CameraPaths, out var lhsCameraPaths, out var rhsCameraPaths, out var isCameraPathsEqual))
                {
                    if (!object.Equals(lhsCameraPaths, rhsCameraPaths)) return false;
                }
                else if (!isCameraPathsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.VoiceTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VoiceTypes, rhs.VoiceTypes, out var lhsVoiceTypes, out var rhsVoiceTypes, out var isVoiceTypesEqual))
                {
                    if (!object.Equals(lhsVoiceTypes, rhsVoiceTypes)) return false;
                }
                else if (!isVoiceTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MaterialTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MaterialTypes, rhs.MaterialTypes, out var lhsMaterialTypes, out var rhsMaterialTypes, out var isMaterialTypesEqual))
                {
                    if (!object.Equals(lhsMaterialTypes, rhsMaterialTypes)) return false;
                }
                else if (!isMaterialTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Impacts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Impacts, rhs.Impacts, out var lhsImpacts, out var rhsImpacts, out var isImpactsEqual))
                {
                    if (!object.Equals(lhsImpacts, rhsImpacts)) return false;
                }
                else if (!isImpactsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImpactDataSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ImpactDataSets, rhs.ImpactDataSets, out var lhsImpactDataSets, out var rhsImpactDataSets, out var isImpactDataSetsEqual))
                {
                    if (!object.Equals(lhsImpactDataSets, rhsImpactDataSets)) return false;
                }
                else if (!isImpactDataSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ArmorAddons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ArmorAddons, rhs.ArmorAddons, out var lhsArmorAddons, out var rhsArmorAddons, out var isArmorAddonsEqual))
                {
                    if (!object.Equals(lhsArmorAddons, rhsArmorAddons)) return false;
                }
                else if (!isArmorAddonsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EncounterZones) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EncounterZones, rhs.EncounterZones, out var lhsEncounterZones, out var rhsEncounterZones, out var isEncounterZonesEqual))
                {
                    if (!object.Equals(lhsEncounterZones, rhsEncounterZones)) return false;
                }
                else if (!isEncounterZonesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Locations) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Locations, rhs.Locations, out var lhsLocations, out var rhsLocations, out var isLocationsEqual))
                {
                    if (!object.Equals(lhsLocations, rhsLocations)) return false;
                }
                else if (!isLocationsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Messages) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Messages, rhs.Messages, out var lhsMessages, out var rhsMessages, out var isMessagesEqual))
                {
                    if (!object.Equals(lhsMessages, rhsMessages)) return false;
                }
                else if (!isMessagesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DefaultObjectManagers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DefaultObjectManagers, rhs.DefaultObjectManagers, out var lhsDefaultObjectManagers, out var rhsDefaultObjectManagers, out var isDefaultObjectManagersEqual))
                {
                    if (!object.Equals(lhsDefaultObjectManagers, rhsDefaultObjectManagers)) return false;
                }
                else if (!isDefaultObjectManagersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LightingTemplates) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LightingTemplates, rhs.LightingTemplates, out var lhsLightingTemplates, out var rhsLightingTemplates, out var isLightingTemplatesEqual))
                {
                    if (!object.Equals(lhsLightingTemplates, rhsLightingTemplates)) return false;
                }
                else if (!isLightingTemplatesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MusicTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MusicTypes, rhs.MusicTypes, out var lhsMusicTypes, out var rhsMusicTypes, out var isMusicTypesEqual))
                {
                    if (!object.Equals(lhsMusicTypes, rhsMusicTypes)) return false;
                }
                else if (!isMusicTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Footsteps) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Footsteps, rhs.Footsteps, out var lhsFootsteps, out var rhsFootsteps, out var isFootstepsEqual))
                {
                    if (!object.Equals(lhsFootsteps, rhsFootsteps)) return false;
                }
                else if (!isFootstepsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.FootstepSets) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FootstepSets, rhs.FootstepSets, out var lhsFootstepSets, out var rhsFootstepSets, out var isFootstepSetsEqual))
                {
                    if (!object.Equals(lhsFootstepSets, rhsFootstepSets)) return false;
                }
                else if (!isFootstepSetsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerBranchNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StoryManagerBranchNodes, rhs.StoryManagerBranchNodes, out var lhsStoryManagerBranchNodes, out var rhsStoryManagerBranchNodes, out var isStoryManagerBranchNodesEqual))
                {
                    if (!object.Equals(lhsStoryManagerBranchNodes, rhsStoryManagerBranchNodes)) return false;
                }
                else if (!isStoryManagerBranchNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerQuestNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StoryManagerQuestNodes, rhs.StoryManagerQuestNodes, out var lhsStoryManagerQuestNodes, out var rhsStoryManagerQuestNodes, out var isStoryManagerQuestNodesEqual))
                {
                    if (!object.Equals(lhsStoryManagerQuestNodes, rhsStoryManagerQuestNodes)) return false;
                }
                else if (!isStoryManagerQuestNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerEventNodes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StoryManagerEventNodes, rhs.StoryManagerEventNodes, out var lhsStoryManagerEventNodes, out var rhsStoryManagerEventNodes, out var isStoryManagerEventNodesEqual))
                {
                    if (!object.Equals(lhsStoryManagerEventNodes, rhsStoryManagerEventNodes)) return false;
                }
                else if (!isStoryManagerEventNodesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogBranches) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DialogBranches, rhs.DialogBranches, out var lhsDialogBranches, out var rhsDialogBranches, out var isDialogBranchesEqual))
                {
                    if (!object.Equals(lhsDialogBranches, rhsDialogBranches)) return false;
                }
                else if (!isDialogBranchesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MusicTracks) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MusicTracks, rhs.MusicTracks, out var lhsMusicTracks, out var rhsMusicTracks, out var isMusicTracksEqual))
                {
                    if (!object.Equals(lhsMusicTracks, rhsMusicTracks)) return false;
                }
                else if (!isMusicTracksEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogViews) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DialogViews, rhs.DialogViews, out var lhsDialogViews, out var rhsDialogViews, out var isDialogViewsEqual))
                {
                    if (!object.Equals(lhsDialogViews, rhsDialogViews)) return false;
                }
                else if (!isDialogViewsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.WordsOfPower) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WordsOfPower, rhs.WordsOfPower, out var lhsWordsOfPower, out var rhsWordsOfPower, out var isWordsOfPowerEqual))
                {
                    if (!object.Equals(lhsWordsOfPower, rhsWordsOfPower)) return false;
                }
                else if (!isWordsOfPowerEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Shouts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Shouts, rhs.Shouts, out var lhsShouts, out var rhsShouts, out var isShoutsEqual))
                {
                    if (!object.Equals(lhsShouts, rhsShouts)) return false;
                }
                else if (!isShoutsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EquipTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EquipTypes, rhs.EquipTypes, out var lhsEquipTypes, out var rhsEquipTypes, out var isEquipTypesEqual))
                {
                    if (!object.Equals(lhsEquipTypes, rhsEquipTypes)) return false;
                }
                else if (!isEquipTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Relationships) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Relationships, rhs.Relationships, out var lhsRelationships, out var rhsRelationships, out var isRelationshipsEqual))
                {
                    if (!object.Equals(lhsRelationships, rhsRelationships)) return false;
                }
                else if (!isRelationshipsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Scenes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Scenes, rhs.Scenes, out var lhsScenes, out var rhsScenes, out var isScenesEqual))
                {
                    if (!object.Equals(lhsScenes, rhsScenes)) return false;
                }
                else if (!isScenesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AssociationTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AssociationTypes, rhs.AssociationTypes, out var lhsAssociationTypes, out var rhsAssociationTypes, out var isAssociationTypesEqual))
                {
                    if (!object.Equals(lhsAssociationTypes, rhsAssociationTypes)) return false;
                }
                else if (!isAssociationTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Outfits) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Outfits, rhs.Outfits, out var lhsOutfits, out var rhsOutfits, out var isOutfitsEqual))
                {
                    if (!object.Equals(lhsOutfits, rhsOutfits)) return false;
                }
                else if (!isOutfitsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ArtObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ArtObjects, rhs.ArtObjects, out var lhsArtObjects, out var rhsArtObjects, out var isArtObjectsEqual))
                {
                    if (!object.Equals(lhsArtObjects, rhsArtObjects)) return false;
                }
                else if (!isArtObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MaterialObjects) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MaterialObjects, rhs.MaterialObjects, out var lhsMaterialObjects, out var rhsMaterialObjects, out var isMaterialObjectsEqual))
                {
                    if (!object.Equals(lhsMaterialObjects, rhsMaterialObjects)) return false;
                }
                else if (!isMaterialObjectsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MovementTypes) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MovementTypes, rhs.MovementTypes, out var lhsMovementTypes, out var rhsMovementTypes, out var isMovementTypesEqual))
                {
                    if (!object.Equals(lhsMovementTypes, rhsMovementTypes)) return false;
                }
                else if (!isMovementTypesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundDescriptors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundDescriptors, rhs.SoundDescriptors, out var lhsSoundDescriptors, out var rhsSoundDescriptors, out var isSoundDescriptorsEqual))
                {
                    if (!object.Equals(lhsSoundDescriptors, rhsSoundDescriptors)) return false;
                }
                else if (!isSoundDescriptorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DualCastData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DualCastData, rhs.DualCastData, out var lhsDualCastData, out var rhsDualCastData, out var isDualCastDataEqual))
                {
                    if (!object.Equals(lhsDualCastData, rhsDualCastData)) return false;
                }
                else if (!isDualCastDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundCategories) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundCategories, rhs.SoundCategories, out var lhsSoundCategories, out var rhsSoundCategories, out var isSoundCategoriesEqual))
                {
                    if (!object.Equals(lhsSoundCategories, rhsSoundCategories)) return false;
                }
                else if (!isSoundCategoriesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundOutputModels) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SoundOutputModels, rhs.SoundOutputModels, out var lhsSoundOutputModels, out var rhsSoundOutputModels, out var isSoundOutputModelsEqual))
                {
                    if (!object.Equals(lhsSoundOutputModels, rhsSoundOutputModels)) return false;
                }
                else if (!isSoundOutputModelsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CollisionLayers) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CollisionLayers, rhs.CollisionLayers, out var lhsCollisionLayers, out var rhsCollisionLayers, out var isCollisionLayersEqual))
                {
                    if (!object.Equals(lhsCollisionLayers, rhsCollisionLayers)) return false;
                }
                else if (!isCollisionLayersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Colors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Colors, rhs.Colors, out var lhsColors, out var rhsColors, out var isColorsEqual))
                {
                    if (!object.Equals(lhsColors, rhsColors)) return false;
                }
                else if (!isColorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ReverbParameters) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ReverbParameters, rhs.ReverbParameters, out var lhsReverbParameters, out var rhsReverbParameters, out var isReverbParametersEqual))
                {
                    if (!object.Equals(lhsReverbParameters, rhsReverbParameters)) return false;
                }
                else if (!isReverbParametersEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.VolumetricLightings) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VolumetricLightings, rhs.VolumetricLightings, out var lhsVolumetricLightings, out var rhsVolumetricLightings, out var isVolumetricLightingsEqual))
                {
                    if (!object.Equals(lhsVolumetricLightings, rhsVolumetricLightings)) return false;
                }
                else if (!isVolumetricLightingsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LensFlares) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LensFlares, rhs.LensFlares, out var lhsLensFlares, out var rhsLensFlares, out var isLensFlaresEqual))
                {
                    if (!object.Equals(lhsLensFlares, rhsLensFlares)) return false;
                }
                else if (!isLensFlaresEqual) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ISkyrimModGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ModHeader);
            hash.Add(item.GameSettings);
            hash.Add(item.Keywords);
            hash.Add(item.LocationReferenceTypes);
            hash.Add(item.Actions);
            hash.Add(item.TextureSets);
            hash.Add(item.Globals);
            hash.Add(item.Classes);
            hash.Add(item.Factions);
            hash.Add(item.HeadParts);
            hash.Add(item.Hairs);
            hash.Add(item.Eyes);
            hash.Add(item.Races);
            hash.Add(item.SoundMarkers);
            hash.Add(item.AcousticSpaces);
            hash.Add(item.MagicEffects);
            hash.Add(item.LandscapeTextures);
            hash.Add(item.ObjectEffects);
            hash.Add(item.Spells);
            hash.Add(item.Scrolls);
            hash.Add(item.Activators);
            hash.Add(item.TalkingActivators);
            hash.Add(item.Armors);
            hash.Add(item.Books);
            hash.Add(item.Containers);
            hash.Add(item.Doors);
            hash.Add(item.Ingredients);
            hash.Add(item.Lights);
            hash.Add(item.MiscItems);
            hash.Add(item.AlchemicalApparatuses);
            hash.Add(item.Statics);
            hash.Add(item.MoveableStatics);
            hash.Add(item.Grasses);
            hash.Add(item.Trees);
            hash.Add(item.Florae);
            hash.Add(item.Furniture);
            hash.Add(item.Weapons);
            hash.Add(item.Ammunitions);
            hash.Add(item.Npcs);
            hash.Add(item.LeveledNpcs);
            hash.Add(item.Keys);
            hash.Add(item.Ingestibles);
            hash.Add(item.IdleMarkers);
            hash.Add(item.ConstructibleObjects);
            hash.Add(item.Projectiles);
            hash.Add(item.Hazards);
            hash.Add(item.SoulGems);
            hash.Add(item.LeveledItems);
            hash.Add(item.Weathers);
            hash.Add(item.Climates);
            hash.Add(item.ShaderParticleGeometries);
            hash.Add(item.VisualEffects);
            hash.Add(item.Regions);
            hash.Add(item.NavigationMeshInfoMaps);
            hash.Add(item.Cells);
            hash.Add(item.Worldspaces);
            hash.Add(item.DialogTopics);
            hash.Add(item.Quests);
            hash.Add(item.IdleAnimations);
            hash.Add(item.Packages);
            hash.Add(item.CombatStyles);
            hash.Add(item.LoadScreens);
            hash.Add(item.LeveledSpells);
            hash.Add(item.AnimatedObjects);
            hash.Add(item.Waters);
            hash.Add(item.EffectShaders);
            hash.Add(item.Explosions);
            hash.Add(item.Debris);
            hash.Add(item.ImageSpaces);
            hash.Add(item.ImageSpaceAdapters);
            hash.Add(item.FormLists);
            hash.Add(item.Perks);
            hash.Add(item.BodyParts);
            hash.Add(item.AddonNodes);
            hash.Add(item.ActorValueInformation);
            hash.Add(item.CameraShots);
            hash.Add(item.CameraPaths);
            hash.Add(item.VoiceTypes);
            hash.Add(item.MaterialTypes);
            hash.Add(item.Impacts);
            hash.Add(item.ImpactDataSets);
            hash.Add(item.ArmorAddons);
            hash.Add(item.EncounterZones);
            hash.Add(item.Locations);
            hash.Add(item.Messages);
            hash.Add(item.DefaultObjectManagers);
            hash.Add(item.LightingTemplates);
            hash.Add(item.MusicTypes);
            hash.Add(item.Footsteps);
            hash.Add(item.FootstepSets);
            hash.Add(item.StoryManagerBranchNodes);
            hash.Add(item.StoryManagerQuestNodes);
            hash.Add(item.StoryManagerEventNodes);
            hash.Add(item.DialogBranches);
            hash.Add(item.MusicTracks);
            hash.Add(item.DialogViews);
            hash.Add(item.WordsOfPower);
            hash.Add(item.Shouts);
            hash.Add(item.EquipTypes);
            hash.Add(item.Relationships);
            hash.Add(item.Scenes);
            hash.Add(item.AssociationTypes);
            hash.Add(item.Outfits);
            hash.Add(item.ArtObjects);
            hash.Add(item.MaterialObjects);
            hash.Add(item.MovementTypes);
            hash.Add(item.SoundDescriptors);
            hash.Add(item.DualCastData);
            hash.Add(item.SoundCategories);
            hash.Add(item.SoundOutputModels);
            hash.Add(item.CollisionLayers);
            hash.Add(item.Colors);
            hash.Add(item.ReverbParameters);
            hash.Add(item.VolumetricLightings);
            hash.Add(item.LensFlares);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return SkyrimMod.GetNew();
        }
        
        #region Mutagen
        public object? GetGroup(
            ISkyrimModGetter obj,
            Type type)
        {
            switch (type.Name)
            {
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    return obj.GameSettings;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    return obj.Keywords;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    return obj.LocationReferenceTypes;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    return obj.Actions;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    return obj.TextureSets;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    return obj.Globals;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    return obj.Classes;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    return obj.Factions;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    return obj.HeadParts;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    return obj.Hairs;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    return obj.Eyes;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    return obj.Races;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    return obj.SoundMarkers;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    return obj.AcousticSpaces;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    return obj.MagicEffects;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    return obj.LandscapeTextures;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    return obj.ObjectEffects;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    return obj.Spells;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    return obj.Scrolls;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    return obj.Activators;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    return obj.TalkingActivators;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    return obj.Armors;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    return obj.Books;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    return obj.Containers;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    return obj.Doors;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    return obj.Ingredients;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    return obj.Lights;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    return obj.MiscItems;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    return obj.AlchemicalApparatuses;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    return obj.Statics;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    return obj.MoveableStatics;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    return obj.Grasses;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    return obj.Trees;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    return obj.Florae;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    return obj.Furniture;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    return obj.Weapons;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    return obj.Ammunitions;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    return obj.Npcs;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    return obj.LeveledNpcs;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    return obj.Keys;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    return obj.Ingestibles;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    return obj.IdleMarkers;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    return obj.ConstructibleObjects;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    return obj.Projectiles;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    return obj.Hazards;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    return obj.SoulGems;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    return obj.LeveledItems;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    return obj.Weathers;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    return obj.Climates;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    return obj.ShaderParticleGeometries;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    return obj.VisualEffects;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    return obj.Regions;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    return obj.NavigationMeshInfoMaps;
                case "CellBlock":
                case "ICellBlockGetter":
                case "ICellBlock":
                    return obj.Cells.Records;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    return obj.Worldspaces;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    return obj.DialogTopics;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    return obj.Quests;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    return obj.IdleAnimations;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    return obj.Packages;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    return obj.CombatStyles;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    return obj.LoadScreens;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    return obj.LeveledSpells;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    return obj.AnimatedObjects;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    return obj.Waters;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    return obj.EffectShaders;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    return obj.Explosions;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    return obj.Debris;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    return obj.ImageSpaces;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    return obj.ImageSpaceAdapters;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    return obj.FormLists;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    return obj.Perks;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    return obj.BodyParts;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    return obj.AddonNodes;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    return obj.ActorValueInformation;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    return obj.CameraShots;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    return obj.CameraPaths;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    return obj.VoiceTypes;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    return obj.MaterialTypes;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    return obj.Impacts;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    return obj.ImpactDataSets;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    return obj.ArmorAddons;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    return obj.EncounterZones;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    return obj.Locations;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    return obj.Messages;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    return obj.DefaultObjectManagers;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    return obj.LightingTemplates;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    return obj.MusicTypes;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    return obj.Footsteps;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    return obj.FootstepSets;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    return obj.StoryManagerBranchNodes;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    return obj.StoryManagerQuestNodes;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    return obj.StoryManagerEventNodes;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    return obj.DialogBranches;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    return obj.MusicTracks;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    return obj.DialogViews;
                case "WordOfPower":
                case "IWordOfPowerGetter":
                case "IWordOfPower":
                case "IWordOfPowerInternal":
                    return obj.WordsOfPower;
                case "Shout":
                case "IShoutGetter":
                case "IShout":
                case "IShoutInternal":
                    return obj.Shouts;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    return obj.EquipTypes;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    return obj.Relationships;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    return obj.Scenes;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    return obj.AssociationTypes;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    return obj.Outfits;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    return obj.ArtObjects;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    return obj.MaterialObjects;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    return obj.MovementTypes;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    return obj.SoundDescriptors;
                case "DualCastData":
                case "IDualCastDataGetter":
                case "IDualCastData":
                case "IDualCastDataInternal":
                    return obj.DualCastData;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    return obj.SoundCategories;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    return obj.SoundOutputModels;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    return obj.CollisionLayers;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    return obj.Colors;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    return obj.ReverbParameters;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    return obj.VolumetricLightings;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    return obj.LensFlares;
                default:
                    return null;
            }
        }
        
        public static void WriteParallel(
            ISkyrimModGetter item,
            MutagenWriter writer,
            BinaryWriteParameters param,
            ModKey modKey)
        {
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            Stream[] outputStreams = new Stream[114];
            List<Action> toDo = new List<Action>();
            toDo.Add(() => WriteGroupParallel(item.GameSettings, 0, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Keywords, 1, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LocationReferenceTypes, 2, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Actions, 3, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.TextureSets, 4, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Globals, 5, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Classes, 6, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Factions, 7, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.HeadParts, 8, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Hairs, 9, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Eyes, 10, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Races, 11, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundMarkers, 12, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AcousticSpaces, 13, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MagicEffects, 14, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LandscapeTextures, 15, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ObjectEffects, 16, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Spells, 17, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Scrolls, 18, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Activators, 19, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.TalkingActivators, 20, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Armors, 21, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Books, 22, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Containers, 23, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Doors, 24, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Ingredients, 25, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Lights, 26, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MiscItems, 27, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AlchemicalApparatuses, 28, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Statics, 29, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MoveableStatics, 30, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Grasses, 31, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Trees, 32, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Florae, 33, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Furniture, 34, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Weapons, 35, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Ammunitions, 36, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Npcs, 37, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledNpcs, 38, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Keys, 39, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Ingestibles, 40, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.IdleMarkers, 41, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ConstructibleObjects, 42, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Projectiles, 43, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Hazards, 44, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoulGems, 45, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledItems, 46, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Weathers, 47, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Climates, 48, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ShaderParticleGeometries, 49, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.VisualEffects, 50, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Regions, 51, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.NavigationMeshInfoMaps, 52, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteCellsParallel(item.Cells, 53, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteWorldspacesParallel(item.Worldspaces, 54, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteDialogTopicsParallel(item.DialogTopics, 55, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Quests, 56, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.IdleAnimations, 57, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Packages, 58, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CombatStyles, 59, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LoadScreens, 60, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LeveledSpells, 61, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AnimatedObjects, 62, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Waters, 63, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.EffectShaders, 64, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Explosions, 65, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Debris, 66, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ImageSpaces, 67, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ImageSpaceAdapters, 68, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.FormLists, 69, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Perks, 70, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.BodyParts, 71, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AddonNodes, 72, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ActorValueInformation, 73, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CameraShots, 74, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CameraPaths, 75, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.VoiceTypes, 76, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MaterialTypes, 77, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Impacts, 78, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ImpactDataSets, 79, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ArmorAddons, 80, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.EncounterZones, 81, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Locations, 82, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Messages, 83, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DefaultObjectManagers, 84, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LightingTemplates, 85, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MusicTypes, 86, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Footsteps, 87, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.FootstepSets, 88, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerBranchNodes, 89, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerQuestNodes, 90, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.StoryManagerEventNodes, 91, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DialogBranches, 92, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MusicTracks, 93, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DialogViews, 94, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.WordsOfPower, 95, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Shouts, 96, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.EquipTypes, 97, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Relationships, 98, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Scenes, 99, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.AssociationTypes, 100, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Outfits, 101, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ArtObjects, 102, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MaterialObjects, 103, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.MovementTypes, 104, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundDescriptors, 105, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.DualCastData, 106, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundCategories, 107, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.SoundOutputModels, 108, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.CollisionLayers, 109, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.Colors, 110, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.ReverbParameters, 111, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.VolumetricLightings, 112, outputStreams, writer.MetaData, param.Parallel));
            toDo.Add(() => WriteGroupParallel(item.LensFlares, 113, outputStreams, writer.MetaData, param.Parallel));
            Parallel.Invoke(param.Parallel.ParallelOptions, toDo.ToArray());
            PluginUtilityTranslation.CompileStreamsInto(
                outputStreams.WhereNotNull(),
                writer.BaseStream);
        }
        
        public static void WriteGroupParallel<T>(
            ISkyrimGroupGetter<T> group,
            int targetIndex,
            Stream[] streamDepositArray,
            WritingBundle bundle,
            ParallelWriteParameters parallelParam)
            where T : class, ISkyrimMajorRecordGetter, IBinaryItem
        {
            if (group.RecordCache.Count == 0) return;
            var cuts = group.Cut(parallelParam.CutCount).ToArray();
            Stream[] subStreams = new Stream[cuts.Length + 1];
            byte[] groupBytes = new byte[bundle.Constants.GroupConstants.HeaderLength];
            BinaryPrimitives.WriteInt32LittleEndian(groupBytes.AsSpan(), RecordTypes.GRUP.TypeInt);
            var groupByteStream = new MemoryStream(groupBytes);
            using (var stream = new MutagenWriter(groupByteStream, bundle.Constants, dispose: false))
            {
                stream.Position += 8;
                SkyrimGroupBinaryWriteTranslation.WriteEmbedded<T>(group, stream);
            }
            subStreams[0] = groupByteStream;
            Parallel.ForEach(cuts, parallelParam.ParallelOptions, (cutItems, state, counter) =>
            {
                MemoryTributary trib = new MemoryTributary();
                using (var stream = new MutagenWriter(trib, bundle with {}, dispose: false))
                {
                    foreach (var item in cutItems)
                    {
                        item.WriteToBinary(stream);
                    }
                }
                subStreams[(int)counter + 1] = trib;
            });
            PluginUtilityTranslation.CompileSetGroupLength(subStreams, groupBytes);
            streamDepositArray[targetIndex] = new CompositeReadStream(subStreams, resetPositions: true);
        }
        
        public uint GetRecordCount(ISkyrimModGetter item)
        {
            uint count = (uint)item.EnumerateMajorRecords().Count();
            count += item.GameSettings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Keywords.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LocationReferenceTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Actions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.TextureSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Globals.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Classes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Factions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.HeadParts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Hairs.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Eyes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Races.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AcousticSpaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MagicEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LandscapeTextures.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ObjectEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Spells.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Scrolls.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Activators.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.TalkingActivators.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Armors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Books.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Containers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Doors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Ingredients.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Lights.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MiscItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AlchemicalApparatuses.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Statics.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MoveableStatics.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Grasses.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Trees.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Florae.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Furniture.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Weapons.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Ammunitions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Npcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledNpcs.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Keys.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Ingestibles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.IdleMarkers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ConstructibleObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Projectiles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Hazards.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoulGems.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledItems.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Weathers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Climates.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ShaderParticleGeometries.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.VisualEffects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Regions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.NavigationMeshInfoMaps.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Cells.Records.Count > 0 ? 1 : default(uint);
            count += item.Worldspaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DialogTopics.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Quests.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.IdleAnimations.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Packages.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CombatStyles.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LoadScreens.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LeveledSpells.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AnimatedObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Waters.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.EffectShaders.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Explosions.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Debris.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ImageSpaces.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ImageSpaceAdapters.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.FormLists.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Perks.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.BodyParts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AddonNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ActorValueInformation.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CameraShots.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CameraPaths.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.VoiceTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MaterialTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Impacts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ImpactDataSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ArmorAddons.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.EncounterZones.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Locations.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Messages.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DefaultObjectManagers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LightingTemplates.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MusicTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Footsteps.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.FootstepSets.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StoryManagerBranchNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StoryManagerQuestNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.StoryManagerEventNodes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DialogBranches.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MusicTracks.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DialogViews.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.WordsOfPower.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Shouts.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.EquipTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Relationships.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Scenes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.AssociationTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Outfits.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ArtObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MaterialObjects.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.MovementTypes.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundDescriptors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.DualCastData.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundCategories.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.SoundOutputModels.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.CollisionLayers.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.Colors.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.ReverbParameters.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.VolumetricLightings.RecordCache.Count > 0 ? 1 : default(uint);
            count += item.LensFlares.RecordCache.Count > 0 ? 1 : default(uint);
            GetCustomRecordCount(item, (customCount) => count += customCount);
            return count;
        }
        
        partial void GetCustomRecordCount(ISkyrimModGetter item, Action<uint> setter);
        
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISkyrimModGetter obj)
        {
            foreach (var item in obj.ModHeader.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundMarkers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AcousticSpaces.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LandscapeTextures.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectEffects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Scrolls.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.TalkingActivators.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MiscItems.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AlchemicalApparatuses.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MoveableStatics.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Florae.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledNpcs.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Ingestibles.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.IdleMarkers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ConstructibleObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Projectiles.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Hazards.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoulGems.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.VisualEffects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshInfoMaps.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Packages.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateFormLinks())
            {
                yield return item;
            }
            if (obj.LeveledSpells is IFormLinkContainerGetter LeveledSpellslinkCont)
            {
                foreach (var item in LeveledSpellslinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.AnimatedObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Explosions.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.FormLists.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Perks.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.BodyParts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.AddonNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ActorValueInformation.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.CameraShots.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.CameraPaths.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Impacts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ImpactDataSets.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ArmorAddons.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.EncounterZones.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Locations.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Messages.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjectManagers.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Footsteps.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.FootstepSets.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerBranchNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerQuestNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerEventNodes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DialogBranches.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTracks.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DialogViews.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Shouts.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.EquipTypes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Relationships.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Scenes.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.Outfits.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.ArtObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialObjects.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundDescriptors.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.DualCastData.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.SoundCategories.EnumerateFormLinks())
            {
                yield return item;
            }
            foreach (var item in obj.CollisionLayers.EnumerateFormLinks())
            {
                yield return item;
            }
            yield break;
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(ISkyrimModGetter obj)
        {
            foreach (var item in obj.GameSettings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keywords.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Actions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TextureSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Globals.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Classes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Factions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hairs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Eyes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ObjectEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Spells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Scrolls.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.TalkingActivators.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MiscItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AlchemicalApparatuses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MoveableStatics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Florae.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Ingestibles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleMarkers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Projectiles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Hazards.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoulGems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledItems.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ShaderParticleGeometries.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VisualEffects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.NavigationMeshInfoMaps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Worldspaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Packages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CombatStyles.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LeveledSpells.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Explosions.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Debris.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaces.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImageSpaceAdapters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FormLists.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Perks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.BodyParts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AddonNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ActorValueInformation.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CameraShots.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CameraPaths.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VoiceTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Impacts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ImpactDataSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ArmorAddons.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EncounterZones.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Locations.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Messages.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DefaultObjectManagers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LightingTemplates.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Footsteps.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.FootstepSets.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerBranchNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerQuestNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.StoryManagerEventNodes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogBranches.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MusicTracks.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DialogViews.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.WordsOfPower.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Shouts.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.EquipTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Relationships.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Scenes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.AssociationTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Outfits.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ArtObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MaterialObjects.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.MovementTypes.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundDescriptors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.DualCastData.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundCategories.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.SoundOutputModels.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.CollisionLayers.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.Colors.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.ReverbParameters.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.VolumetricLightings.EnumerateMajorRecords())
            {
                yield return item;
            }
            foreach (var item in obj.LensFlares.EnumerateMajorRecords())
            {
                yield return item;
            }
        }
        
        public IEnumerable<IMajorRecordGetter> EnumeratePotentiallyTypedMajorRecords(
            ISkyrimModGetter obj,
            Type? type,
            bool throwIfUnknown)
        {
            if (type == null) return EnumerateMajorRecords(obj);
            return EnumerateMajorRecords(obj, type, throwIfUnknown);
        }
        
        public IEnumerable<IMajorRecordGetter> EnumerateMajorRecords(
            ISkyrimModGetter obj,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "ISkyrimMajorRecord":
                case "SkyrimMajorRecord":
                    if (!SkyrimMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "ISkyrimMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecords(obj))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in obj.GameSettings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in obj.Keywords.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in obj.LocationReferenceTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in obj.Actions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in obj.TextureSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in obj.Globals.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in obj.Classes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in obj.Factions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in obj.HeadParts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in obj.Hairs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    foreach (var item in obj.Eyes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in obj.Races.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    foreach (var item in obj.SoundMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    foreach (var item in obj.AcousticSpaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in obj.MagicEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    foreach (var item in obj.LandscapeTextures.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    foreach (var item in obj.ObjectEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in obj.Spells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    foreach (var item in obj.Scrolls.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in obj.Activators.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    foreach (var item in obj.TalkingActivators.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in obj.Armors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in obj.Books.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in obj.Containers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in obj.Doors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in obj.Ingredients.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in obj.Lights.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    foreach (var item in obj.MiscItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in obj.AlchemicalApparatuses.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in obj.Statics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    foreach (var item in obj.MoveableStatics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in obj.Grasses.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in obj.Trees.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in obj.Florae.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in obj.Furniture.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in obj.Weapons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in obj.Ammunitions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in obj.Npcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    foreach (var item in obj.LeveledNpcs.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in obj.Keys.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    foreach (var item in obj.Ingestibles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    foreach (var item in obj.IdleMarkers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    foreach (var item in obj.ConstructibleObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    foreach (var item in obj.Projectiles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    foreach (var item in obj.Hazards.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in obj.SoulGems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in obj.LeveledItems.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in obj.Weathers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in obj.Climates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    foreach (var item in obj.ShaderParticleGeometries.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    foreach (var item in obj.VisualEffects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in obj.Regions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    foreach (var item in obj.NavigationMeshInfoMaps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in obj.Quests.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in obj.IdleAnimations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    foreach (var item in obj.Packages.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in obj.CombatStyles.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in obj.LoadScreens.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    foreach (var item in obj.LeveledSpells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in obj.AnimatedObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in obj.Waters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in obj.EffectShaders.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    foreach (var item in obj.Explosions.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in obj.Debris.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    foreach (var item in obj.ImageSpaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    foreach (var item in obj.ImageSpaceAdapters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    foreach (var item in obj.FormLists.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    foreach (var item in obj.Perks.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    foreach (var item in obj.BodyParts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    foreach (var item in obj.AddonNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    foreach (var item in obj.ActorValueInformation.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    foreach (var item in obj.CameraShots.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    foreach (var item in obj.CameraPaths.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    foreach (var item in obj.VoiceTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    foreach (var item in obj.MaterialTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    foreach (var item in obj.Impacts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    foreach (var item in obj.ImpactDataSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    foreach (var item in obj.ArmorAddons.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    foreach (var item in obj.EncounterZones.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    foreach (var item in obj.Locations.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    foreach (var item in obj.Messages.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    foreach (var item in obj.DefaultObjectManagers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    foreach (var item in obj.LightingTemplates.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    foreach (var item in obj.MusicTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    foreach (var item in obj.Footsteps.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    foreach (var item in obj.FootstepSets.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    foreach (var item in obj.StoryManagerBranchNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    foreach (var item in obj.StoryManagerQuestNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    foreach (var item in obj.StoryManagerEventNodes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var item in obj.DialogBranches.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    foreach (var item in obj.MusicTracks.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    foreach (var item in obj.DialogViews.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "WordOfPower":
                case "IWordOfPowerGetter":
                case "IWordOfPower":
                case "IWordOfPowerInternal":
                    foreach (var item in obj.WordsOfPower.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Shout":
                case "IShoutGetter":
                case "IShout":
                case "IShoutInternal":
                    foreach (var item in obj.Shouts.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    foreach (var item in obj.EquipTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    foreach (var item in obj.Relationships.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var item in obj.Scenes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    foreach (var item in obj.AssociationTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    foreach (var item in obj.Outfits.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    foreach (var item in obj.ArtObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    foreach (var item in obj.MaterialObjects.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    foreach (var item in obj.MovementTypes.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    foreach (var item in obj.SoundDescriptors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DualCastData":
                case "IDualCastDataGetter":
                case "IDualCastData":
                case "IDualCastDataInternal":
                    foreach (var item in obj.DualCastData.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    foreach (var item in obj.SoundCategories.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    foreach (var item in obj.SoundOutputModels.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    foreach (var item in obj.CollisionLayers.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    foreach (var item in obj.Colors.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    foreach (var item in obj.ReverbParameters.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    foreach (var item in obj.VolumetricLightings.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    foreach (var item in obj.LensFlares.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    foreach (var item in obj.Worldspaces.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var item in obj.DialogTopics.EnumerateMajorRecords(type, throwIfUnknown: throwIfUnknown))
                    {
                        yield return item;
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceRecordsFor(GameCategory.Skyrim, obj, type, out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public IEnumerable<IModContext<ISkyrimMod, ISkyrimModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            ISkyrimModGetter obj,
            ILinkCache linkCache)
        {
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, GameSetting, IGameSettingGetter>(
                srcGroup: obj.GameSettings,
                type: typeof(IGameSettingGetter),
                modKey: obj.ModKey,
                group: (m) => m.GameSettings,
                groupGetter: (m) => m.GameSettings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Keyword, IKeywordGetter>(
                srcGroup: obj.Keywords,
                type: typeof(IKeywordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Keywords,
                groupGetter: (m) => m.Keywords))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LocationReferenceType, ILocationReferenceTypeGetter>(
                srcGroup: obj.LocationReferenceTypes,
                type: typeof(ILocationReferenceTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.LocationReferenceTypes,
                groupGetter: (m) => m.LocationReferenceTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ActionRecord, IActionRecordGetter>(
                srcGroup: obj.Actions,
                type: typeof(IActionRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Actions,
                groupGetter: (m) => m.Actions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, TextureSet, ITextureSetGetter>(
                srcGroup: obj.TextureSets,
                type: typeof(ITextureSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.TextureSets,
                groupGetter: (m) => m.TextureSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Global, IGlobalGetter>(
                srcGroup: obj.Globals,
                type: typeof(IGlobalGetter),
                modKey: obj.ModKey,
                group: (m) => m.Globals,
                groupGetter: (m) => m.Globals))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Class, IClassGetter>(
                srcGroup: obj.Classes,
                type: typeof(IClassGetter),
                modKey: obj.ModKey,
                group: (m) => m.Classes,
                groupGetter: (m) => m.Classes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Faction, IFactionGetter>(
                srcGroup: obj.Factions,
                type: typeof(IFactionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Factions,
                groupGetter: (m) => m.Factions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, HeadPart, IHeadPartGetter>(
                srcGroup: obj.HeadParts,
                type: typeof(IHeadPartGetter),
                modKey: obj.ModKey,
                group: (m) => m.HeadParts,
                groupGetter: (m) => m.HeadParts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Hair, IHairGetter>(
                srcGroup: obj.Hairs,
                type: typeof(IHairGetter),
                modKey: obj.ModKey,
                group: (m) => m.Hairs,
                groupGetter: (m) => m.Hairs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Eyes, IEyesGetter>(
                srcGroup: obj.Eyes,
                type: typeof(IEyesGetter),
                modKey: obj.ModKey,
                group: (m) => m.Eyes,
                groupGetter: (m) => m.Eyes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Race, IRaceGetter>(
                srcGroup: obj.Races,
                type: typeof(IRaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Races,
                groupGetter: (m) => m.Races))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, SoundMarker, ISoundMarkerGetter>(
                srcGroup: obj.SoundMarkers,
                type: typeof(ISoundMarkerGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundMarkers,
                groupGetter: (m) => m.SoundMarkers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, AcousticSpace, IAcousticSpaceGetter>(
                srcGroup: obj.AcousticSpaces,
                type: typeof(IAcousticSpaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.AcousticSpaces,
                groupGetter: (m) => m.AcousticSpaces))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MagicEffect, IMagicEffectGetter>(
                srcGroup: obj.MagicEffects,
                type: typeof(IMagicEffectGetter),
                modKey: obj.ModKey,
                group: (m) => m.MagicEffects,
                groupGetter: (m) => m.MagicEffects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LandscapeTexture, ILandscapeTextureGetter>(
                srcGroup: obj.LandscapeTextures,
                type: typeof(ILandscapeTextureGetter),
                modKey: obj.ModKey,
                group: (m) => m.LandscapeTextures,
                groupGetter: (m) => m.LandscapeTextures))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ObjectEffect, IObjectEffectGetter>(
                srcGroup: obj.ObjectEffects,
                type: typeof(IObjectEffectGetter),
                modKey: obj.ModKey,
                group: (m) => m.ObjectEffects,
                groupGetter: (m) => m.ObjectEffects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Spell, ISpellGetter>(
                srcGroup: obj.Spells,
                type: typeof(ISpellGetter),
                modKey: obj.ModKey,
                group: (m) => m.Spells,
                groupGetter: (m) => m.Spells))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Scroll, IScrollGetter>(
                srcGroup: obj.Scrolls,
                type: typeof(IScrollGetter),
                modKey: obj.ModKey,
                group: (m) => m.Scrolls,
                groupGetter: (m) => m.Scrolls))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Activator, IActivatorGetter>(
                srcGroup: obj.Activators,
                type: typeof(IActivatorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Activators,
                groupGetter: (m) => m.Activators))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, TalkingActivator, ITalkingActivatorGetter>(
                srcGroup: obj.TalkingActivators,
                type: typeof(ITalkingActivatorGetter),
                modKey: obj.ModKey,
                group: (m) => m.TalkingActivators,
                groupGetter: (m) => m.TalkingActivators))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Armor, IArmorGetter>(
                srcGroup: obj.Armors,
                type: typeof(IArmorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Armors,
                groupGetter: (m) => m.Armors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Book, IBookGetter>(
                srcGroup: obj.Books,
                type: typeof(IBookGetter),
                modKey: obj.ModKey,
                group: (m) => m.Books,
                groupGetter: (m) => m.Books))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Container, IContainerGetter>(
                srcGroup: obj.Containers,
                type: typeof(IContainerGetter),
                modKey: obj.ModKey,
                group: (m) => m.Containers,
                groupGetter: (m) => m.Containers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Door, IDoorGetter>(
                srcGroup: obj.Doors,
                type: typeof(IDoorGetter),
                modKey: obj.ModKey,
                group: (m) => m.Doors,
                groupGetter: (m) => m.Doors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Ingredient, IIngredientGetter>(
                srcGroup: obj.Ingredients,
                type: typeof(IIngredientGetter),
                modKey: obj.ModKey,
                group: (m) => m.Ingredients,
                groupGetter: (m) => m.Ingredients))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Light, ILightGetter>(
                srcGroup: obj.Lights,
                type: typeof(ILightGetter),
                modKey: obj.ModKey,
                group: (m) => m.Lights,
                groupGetter: (m) => m.Lights))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MiscItem, IMiscItemGetter>(
                srcGroup: obj.MiscItems,
                type: typeof(IMiscItemGetter),
                modKey: obj.ModKey,
                group: (m) => m.MiscItems,
                groupGetter: (m) => m.MiscItems))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, AlchemicalApparatus, IAlchemicalApparatusGetter>(
                srcGroup: obj.AlchemicalApparatuses,
                type: typeof(IAlchemicalApparatusGetter),
                modKey: obj.ModKey,
                group: (m) => m.AlchemicalApparatuses,
                groupGetter: (m) => m.AlchemicalApparatuses))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Static, IStaticGetter>(
                srcGroup: obj.Statics,
                type: typeof(IStaticGetter),
                modKey: obj.ModKey,
                group: (m) => m.Statics,
                groupGetter: (m) => m.Statics))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MoveableStatic, IMoveableStaticGetter>(
                srcGroup: obj.MoveableStatics,
                type: typeof(IMoveableStaticGetter),
                modKey: obj.ModKey,
                group: (m) => m.MoveableStatics,
                groupGetter: (m) => m.MoveableStatics))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Grass, IGrassGetter>(
                srcGroup: obj.Grasses,
                type: typeof(IGrassGetter),
                modKey: obj.ModKey,
                group: (m) => m.Grasses,
                groupGetter: (m) => m.Grasses))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Tree, ITreeGetter>(
                srcGroup: obj.Trees,
                type: typeof(ITreeGetter),
                modKey: obj.ModKey,
                group: (m) => m.Trees,
                groupGetter: (m) => m.Trees))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Flora, IFloraGetter>(
                srcGroup: obj.Florae,
                type: typeof(IFloraGetter),
                modKey: obj.ModKey,
                group: (m) => m.Florae,
                groupGetter: (m) => m.Florae))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Furniture, IFurnitureGetter>(
                srcGroup: obj.Furniture,
                type: typeof(IFurnitureGetter),
                modKey: obj.ModKey,
                group: (m) => m.Furniture,
                groupGetter: (m) => m.Furniture))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Weapon, IWeaponGetter>(
                srcGroup: obj.Weapons,
                type: typeof(IWeaponGetter),
                modKey: obj.ModKey,
                group: (m) => m.Weapons,
                groupGetter: (m) => m.Weapons))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Ammunition, IAmmunitionGetter>(
                srcGroup: obj.Ammunitions,
                type: typeof(IAmmunitionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Ammunitions,
                groupGetter: (m) => m.Ammunitions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Npc, INpcGetter>(
                srcGroup: obj.Npcs,
                type: typeof(INpcGetter),
                modKey: obj.ModKey,
                group: (m) => m.Npcs,
                groupGetter: (m) => m.Npcs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LeveledNpc, ILeveledNpcGetter>(
                srcGroup: obj.LeveledNpcs,
                type: typeof(ILeveledNpcGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledNpcs,
                groupGetter: (m) => m.LeveledNpcs))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Key, IKeyGetter>(
                srcGroup: obj.Keys,
                type: typeof(IKeyGetter),
                modKey: obj.ModKey,
                group: (m) => m.Keys,
                groupGetter: (m) => m.Keys))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Ingestible, IIngestibleGetter>(
                srcGroup: obj.Ingestibles,
                type: typeof(IIngestibleGetter),
                modKey: obj.ModKey,
                group: (m) => m.Ingestibles,
                groupGetter: (m) => m.Ingestibles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, IdleMarker, IIdleMarkerGetter>(
                srcGroup: obj.IdleMarkers,
                type: typeof(IIdleMarkerGetter),
                modKey: obj.ModKey,
                group: (m) => m.IdleMarkers,
                groupGetter: (m) => m.IdleMarkers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ConstructibleObject, IConstructibleObjectGetter>(
                srcGroup: obj.ConstructibleObjects,
                type: typeof(IConstructibleObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.ConstructibleObjects,
                groupGetter: (m) => m.ConstructibleObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Projectile, IProjectileGetter>(
                srcGroup: obj.Projectiles,
                type: typeof(IProjectileGetter),
                modKey: obj.ModKey,
                group: (m) => m.Projectiles,
                groupGetter: (m) => m.Projectiles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Hazard, IHazardGetter>(
                srcGroup: obj.Hazards,
                type: typeof(IHazardGetter),
                modKey: obj.ModKey,
                group: (m) => m.Hazards,
                groupGetter: (m) => m.Hazards))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, SoulGem, ISoulGemGetter>(
                srcGroup: obj.SoulGems,
                type: typeof(ISoulGemGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoulGems,
                groupGetter: (m) => m.SoulGems))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LeveledItem, ILeveledItemGetter>(
                srcGroup: obj.LeveledItems,
                type: typeof(ILeveledItemGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledItems,
                groupGetter: (m) => m.LeveledItems))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Weather, IWeatherGetter>(
                srcGroup: obj.Weathers,
                type: typeof(IWeatherGetter),
                modKey: obj.ModKey,
                group: (m) => m.Weathers,
                groupGetter: (m) => m.Weathers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Climate, IClimateGetter>(
                srcGroup: obj.Climates,
                type: typeof(IClimateGetter),
                modKey: obj.ModKey,
                group: (m) => m.Climates,
                groupGetter: (m) => m.Climates))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ShaderParticleGeometry, IShaderParticleGeometryGetter>(
                srcGroup: obj.ShaderParticleGeometries,
                type: typeof(IShaderParticleGeometryGetter),
                modKey: obj.ModKey,
                group: (m) => m.ShaderParticleGeometries,
                groupGetter: (m) => m.ShaderParticleGeometries))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, VisualEffect, IVisualEffectGetter>(
                srcGroup: obj.VisualEffects,
                type: typeof(IVisualEffectGetter),
                modKey: obj.ModKey,
                group: (m) => m.VisualEffects,
                groupGetter: (m) => m.VisualEffects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Region, IRegionGetter>(
                srcGroup: obj.Regions,
                type: typeof(IRegionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Regions,
                groupGetter: (m) => m.Regions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, NavigationMeshInfoMap, INavigationMeshInfoMapGetter>(
                srcGroup: obj.NavigationMeshInfoMaps,
                type: typeof(INavigationMeshInfoMapGetter),
                modKey: obj.ModKey,
                group: (m) => m.NavigationMeshInfoMaps,
                groupGetter: (m) => m.NavigationMeshInfoMaps))
            {
                yield return item;
            }
            foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                linkCache: linkCache,
                modKey: obj.ModKey,
                parent: null))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Worldspace, IWorldspaceGetter>(
                srcGroup: obj.Worldspaces,
                type: typeof(IWorldspaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.Worldspaces,
                groupGetter: (m) => m.Worldspaces))
            {
                yield return item;
            }
            foreach (var groupItem in obj.Worldspaces)
            {
                foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                    duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                {
                    yield return item;
                }
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, DialogTopic, IDialogTopicGetter>(
                srcGroup: obj.DialogTopics,
                type: typeof(IDialogTopicGetter),
                modKey: obj.ModKey,
                group: (m) => m.DialogTopics,
                groupGetter: (m) => m.DialogTopics))
            {
                yield return item;
            }
            foreach (var groupItem in obj.DialogTopics)
            {
                foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecordContexts(
                    groupItem,
                    linkCache: linkCache,
                    modKey: obj.ModKey,
                    parent: null,
                    getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(linkCache.Resolve<IDialogTopicGetter>(r.FormKey)),
                    duplicateInto: (m, r, e, f) => m.DialogTopics.DuplicateInAsNewRecord(linkCache.Resolve<IDialogTopicGetter>(r.FormKey), e, f)))
                {
                    yield return item;
                }
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Quest, IQuestGetter>(
                srcGroup: obj.Quests,
                type: typeof(IQuestGetter),
                modKey: obj.ModKey,
                group: (m) => m.Quests,
                groupGetter: (m) => m.Quests))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, IdleAnimation, IIdleAnimationGetter>(
                srcGroup: obj.IdleAnimations,
                type: typeof(IIdleAnimationGetter),
                modKey: obj.ModKey,
                group: (m) => m.IdleAnimations,
                groupGetter: (m) => m.IdleAnimations))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Package, IPackageGetter>(
                srcGroup: obj.Packages,
                type: typeof(IPackageGetter),
                modKey: obj.ModKey,
                group: (m) => m.Packages,
                groupGetter: (m) => m.Packages))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, CombatStyle, ICombatStyleGetter>(
                srcGroup: obj.CombatStyles,
                type: typeof(ICombatStyleGetter),
                modKey: obj.ModKey,
                group: (m) => m.CombatStyles,
                groupGetter: (m) => m.CombatStyles))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LoadScreen, ILoadScreenGetter>(
                srcGroup: obj.LoadScreens,
                type: typeof(ILoadScreenGetter),
                modKey: obj.ModKey,
                group: (m) => m.LoadScreens,
                groupGetter: (m) => m.LoadScreens))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LeveledSpell, ILeveledSpellGetter>(
                srcGroup: obj.LeveledSpells,
                type: typeof(ILeveledSpellGetter),
                modKey: obj.ModKey,
                group: (m) => m.LeveledSpells,
                groupGetter: (m) => m.LeveledSpells))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, AnimatedObject, IAnimatedObjectGetter>(
                srcGroup: obj.AnimatedObjects,
                type: typeof(IAnimatedObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.AnimatedObjects,
                groupGetter: (m) => m.AnimatedObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Water, IWaterGetter>(
                srcGroup: obj.Waters,
                type: typeof(IWaterGetter),
                modKey: obj.ModKey,
                group: (m) => m.Waters,
                groupGetter: (m) => m.Waters))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, EffectShader, IEffectShaderGetter>(
                srcGroup: obj.EffectShaders,
                type: typeof(IEffectShaderGetter),
                modKey: obj.ModKey,
                group: (m) => m.EffectShaders,
                groupGetter: (m) => m.EffectShaders))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Explosion, IExplosionGetter>(
                srcGroup: obj.Explosions,
                type: typeof(IExplosionGetter),
                modKey: obj.ModKey,
                group: (m) => m.Explosions,
                groupGetter: (m) => m.Explosions))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Debris, IDebrisGetter>(
                srcGroup: obj.Debris,
                type: typeof(IDebrisGetter),
                modKey: obj.ModKey,
                group: (m) => m.Debris,
                groupGetter: (m) => m.Debris))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ImageSpace, IImageSpaceGetter>(
                srcGroup: obj.ImageSpaces,
                type: typeof(IImageSpaceGetter),
                modKey: obj.ModKey,
                group: (m) => m.ImageSpaces,
                groupGetter: (m) => m.ImageSpaces))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ImageSpaceAdapter, IImageSpaceAdapterGetter>(
                srcGroup: obj.ImageSpaceAdapters,
                type: typeof(IImageSpaceAdapterGetter),
                modKey: obj.ModKey,
                group: (m) => m.ImageSpaceAdapters,
                groupGetter: (m) => m.ImageSpaceAdapters))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, FormList, IFormListGetter>(
                srcGroup: obj.FormLists,
                type: typeof(IFormListGetter),
                modKey: obj.ModKey,
                group: (m) => m.FormLists,
                groupGetter: (m) => m.FormLists))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Perk, IPerkGetter>(
                srcGroup: obj.Perks,
                type: typeof(IPerkGetter),
                modKey: obj.ModKey,
                group: (m) => m.Perks,
                groupGetter: (m) => m.Perks))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, BodyPartData, IBodyPartDataGetter>(
                srcGroup: obj.BodyParts,
                type: typeof(IBodyPartDataGetter),
                modKey: obj.ModKey,
                group: (m) => m.BodyParts,
                groupGetter: (m) => m.BodyParts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, AddonNode, IAddonNodeGetter>(
                srcGroup: obj.AddonNodes,
                type: typeof(IAddonNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.AddonNodes,
                groupGetter: (m) => m.AddonNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ActorValueInformation, IActorValueInformationGetter>(
                srcGroup: obj.ActorValueInformation,
                type: typeof(IActorValueInformationGetter),
                modKey: obj.ModKey,
                group: (m) => m.ActorValueInformation,
                groupGetter: (m) => m.ActorValueInformation))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, CameraShot, ICameraShotGetter>(
                srcGroup: obj.CameraShots,
                type: typeof(ICameraShotGetter),
                modKey: obj.ModKey,
                group: (m) => m.CameraShots,
                groupGetter: (m) => m.CameraShots))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, CameraPath, ICameraPathGetter>(
                srcGroup: obj.CameraPaths,
                type: typeof(ICameraPathGetter),
                modKey: obj.ModKey,
                group: (m) => m.CameraPaths,
                groupGetter: (m) => m.CameraPaths))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, VoiceType, IVoiceTypeGetter>(
                srcGroup: obj.VoiceTypes,
                type: typeof(IVoiceTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.VoiceTypes,
                groupGetter: (m) => m.VoiceTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MaterialType, IMaterialTypeGetter>(
                srcGroup: obj.MaterialTypes,
                type: typeof(IMaterialTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.MaterialTypes,
                groupGetter: (m) => m.MaterialTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Impact, IImpactGetter>(
                srcGroup: obj.Impacts,
                type: typeof(IImpactGetter),
                modKey: obj.ModKey,
                group: (m) => m.Impacts,
                groupGetter: (m) => m.Impacts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ImpactDataSet, IImpactDataSetGetter>(
                srcGroup: obj.ImpactDataSets,
                type: typeof(IImpactDataSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.ImpactDataSets,
                groupGetter: (m) => m.ImpactDataSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ArmorAddon, IArmorAddonGetter>(
                srcGroup: obj.ArmorAddons,
                type: typeof(IArmorAddonGetter),
                modKey: obj.ModKey,
                group: (m) => m.ArmorAddons,
                groupGetter: (m) => m.ArmorAddons))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, EncounterZone, IEncounterZoneGetter>(
                srcGroup: obj.EncounterZones,
                type: typeof(IEncounterZoneGetter),
                modKey: obj.ModKey,
                group: (m) => m.EncounterZones,
                groupGetter: (m) => m.EncounterZones))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Location, ILocationGetter>(
                srcGroup: obj.Locations,
                type: typeof(ILocationGetter),
                modKey: obj.ModKey,
                group: (m) => m.Locations,
                groupGetter: (m) => m.Locations))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Message, IMessageGetter>(
                srcGroup: obj.Messages,
                type: typeof(IMessageGetter),
                modKey: obj.ModKey,
                group: (m) => m.Messages,
                groupGetter: (m) => m.Messages))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, DefaultObjectManager, IDefaultObjectManagerGetter>(
                srcGroup: obj.DefaultObjectManagers,
                type: typeof(IDefaultObjectManagerGetter),
                modKey: obj.ModKey,
                group: (m) => m.DefaultObjectManagers,
                groupGetter: (m) => m.DefaultObjectManagers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LightingTemplate, ILightingTemplateGetter>(
                srcGroup: obj.LightingTemplates,
                type: typeof(ILightingTemplateGetter),
                modKey: obj.ModKey,
                group: (m) => m.LightingTemplates,
                groupGetter: (m) => m.LightingTemplates))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MusicType, IMusicTypeGetter>(
                srcGroup: obj.MusicTypes,
                type: typeof(IMusicTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.MusicTypes,
                groupGetter: (m) => m.MusicTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Footstep, IFootstepGetter>(
                srcGroup: obj.Footsteps,
                type: typeof(IFootstepGetter),
                modKey: obj.ModKey,
                group: (m) => m.Footsteps,
                groupGetter: (m) => m.Footsteps))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, FootstepSet, IFootstepSetGetter>(
                srcGroup: obj.FootstepSets,
                type: typeof(IFootstepSetGetter),
                modKey: obj.ModKey,
                group: (m) => m.FootstepSets,
                groupGetter: (m) => m.FootstepSets))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, StoryManagerBranchNode, IStoryManagerBranchNodeGetter>(
                srcGroup: obj.StoryManagerBranchNodes,
                type: typeof(IStoryManagerBranchNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.StoryManagerBranchNodes,
                groupGetter: (m) => m.StoryManagerBranchNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, StoryManagerQuestNode, IStoryManagerQuestNodeGetter>(
                srcGroup: obj.StoryManagerQuestNodes,
                type: typeof(IStoryManagerQuestNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.StoryManagerQuestNodes,
                groupGetter: (m) => m.StoryManagerQuestNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, StoryManagerEventNode, IStoryManagerEventNodeGetter>(
                srcGroup: obj.StoryManagerEventNodes,
                type: typeof(IStoryManagerEventNodeGetter),
                modKey: obj.ModKey,
                group: (m) => m.StoryManagerEventNodes,
                groupGetter: (m) => m.StoryManagerEventNodes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, DialogBranch, IDialogBranchGetter>(
                srcGroup: obj.DialogBranches,
                type: typeof(IDialogBranchGetter),
                modKey: obj.ModKey,
                group: (m) => m.DialogBranches,
                groupGetter: (m) => m.DialogBranches))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MusicTrack, IMusicTrackGetter>(
                srcGroup: obj.MusicTracks,
                type: typeof(IMusicTrackGetter),
                modKey: obj.ModKey,
                group: (m) => m.MusicTracks,
                groupGetter: (m) => m.MusicTracks))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, DialogView, IDialogViewGetter>(
                srcGroup: obj.DialogViews,
                type: typeof(IDialogViewGetter),
                modKey: obj.ModKey,
                group: (m) => m.DialogViews,
                groupGetter: (m) => m.DialogViews))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, WordOfPower, IWordOfPowerGetter>(
                srcGroup: obj.WordsOfPower,
                type: typeof(IWordOfPowerGetter),
                modKey: obj.ModKey,
                group: (m) => m.WordsOfPower,
                groupGetter: (m) => m.WordsOfPower))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Shout, IShoutGetter>(
                srcGroup: obj.Shouts,
                type: typeof(IShoutGetter),
                modKey: obj.ModKey,
                group: (m) => m.Shouts,
                groupGetter: (m) => m.Shouts))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, EquipType, IEquipTypeGetter>(
                srcGroup: obj.EquipTypes,
                type: typeof(IEquipTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.EquipTypes,
                groupGetter: (m) => m.EquipTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Relationship, IRelationshipGetter>(
                srcGroup: obj.Relationships,
                type: typeof(IRelationshipGetter),
                modKey: obj.ModKey,
                group: (m) => m.Relationships,
                groupGetter: (m) => m.Relationships))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Scene, ISceneGetter>(
                srcGroup: obj.Scenes,
                type: typeof(ISceneGetter),
                modKey: obj.ModKey,
                group: (m) => m.Scenes,
                groupGetter: (m) => m.Scenes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, AssociationType, IAssociationTypeGetter>(
                srcGroup: obj.AssociationTypes,
                type: typeof(IAssociationTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.AssociationTypes,
                groupGetter: (m) => m.AssociationTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Outfit, IOutfitGetter>(
                srcGroup: obj.Outfits,
                type: typeof(IOutfitGetter),
                modKey: obj.ModKey,
                group: (m) => m.Outfits,
                groupGetter: (m) => m.Outfits))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ArtObject, IArtObjectGetter>(
                srcGroup: obj.ArtObjects,
                type: typeof(IArtObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.ArtObjects,
                groupGetter: (m) => m.ArtObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MaterialObject, IMaterialObjectGetter>(
                srcGroup: obj.MaterialObjects,
                type: typeof(IMaterialObjectGetter),
                modKey: obj.ModKey,
                group: (m) => m.MaterialObjects,
                groupGetter: (m) => m.MaterialObjects))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MovementType, IMovementTypeGetter>(
                srcGroup: obj.MovementTypes,
                type: typeof(IMovementTypeGetter),
                modKey: obj.ModKey,
                group: (m) => m.MovementTypes,
                groupGetter: (m) => m.MovementTypes))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, SoundDescriptor, ISoundDescriptorGetter>(
                srcGroup: obj.SoundDescriptors,
                type: typeof(ISoundDescriptorGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundDescriptors,
                groupGetter: (m) => m.SoundDescriptors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, DualCastData, IDualCastDataGetter>(
                srcGroup: obj.DualCastData,
                type: typeof(IDualCastDataGetter),
                modKey: obj.ModKey,
                group: (m) => m.DualCastData,
                groupGetter: (m) => m.DualCastData))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, SoundCategory, ISoundCategoryGetter>(
                srcGroup: obj.SoundCategories,
                type: typeof(ISoundCategoryGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundCategories,
                groupGetter: (m) => m.SoundCategories))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, SoundOutputModel, ISoundOutputModelGetter>(
                srcGroup: obj.SoundOutputModels,
                type: typeof(ISoundOutputModelGetter),
                modKey: obj.ModKey,
                group: (m) => m.SoundOutputModels,
                groupGetter: (m) => m.SoundOutputModels))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, CollisionLayer, ICollisionLayerGetter>(
                srcGroup: obj.CollisionLayers,
                type: typeof(ICollisionLayerGetter),
                modKey: obj.ModKey,
                group: (m) => m.CollisionLayers,
                groupGetter: (m) => m.CollisionLayers))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ColorRecord, IColorRecordGetter>(
                srcGroup: obj.Colors,
                type: typeof(IColorRecordGetter),
                modKey: obj.ModKey,
                group: (m) => m.Colors,
                groupGetter: (m) => m.Colors))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ReverbParameters, IReverbParametersGetter>(
                srcGroup: obj.ReverbParameters,
                type: typeof(IReverbParametersGetter),
                modKey: obj.ModKey,
                group: (m) => m.ReverbParameters,
                groupGetter: (m) => m.ReverbParameters))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, VolumetricLighting, IVolumetricLightingGetter>(
                srcGroup: obj.VolumetricLightings,
                type: typeof(IVolumetricLightingGetter),
                modKey: obj.ModKey,
                group: (m) => m.VolumetricLightings,
                groupGetter: (m) => m.VolumetricLightings))
            {
                yield return item;
            }
            foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LensFlare, ILensFlareGetter>(
                srcGroup: obj.LensFlares,
                type: typeof(ILensFlareGetter),
                modKey: obj.ModKey,
                group: (m) => m.LensFlares,
                groupGetter: (m) => m.LensFlares))
            {
                yield return item;
            }
        }
        
        public IEnumerable<IModContext<ISkyrimMod, ISkyrimModGetter, IMajorRecord, IMajorRecordGetter>> EnumerateMajorRecordContexts(
            ISkyrimModGetter obj,
            ILinkCache linkCache,
            Type type,
            bool throwIfUnknown)
        {
            switch (type.Name)
            {
                case "IMajorRecord":
                case "MajorRecord":
                case "ISkyrimMajorRecord":
                case "SkyrimMajorRecord":
                    if (!SkyrimMod_Registration.SetterType.IsAssignableFrom(obj.GetType())) yield break;
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "IMajorRecordGetter":
                case "ISkyrimMajorRecordGetter":
                    foreach (var item in this.EnumerateMajorRecordContexts(
                        obj,
                        linkCache: linkCache))
                    {
                        yield return item;
                    }
                    yield break;
                case "GameSetting":
                case "IGameSettingGetter":
                case "IGameSetting":
                case "IGameSettingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, GameSetting, IGameSettingGetter>(
                        srcGroup: obj.GameSettings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.GameSettings,
                        groupGetter: (m) => m.GameSettings))
                    {
                        yield return item;
                    }
                    yield break;
                case "Keyword":
                case "IKeywordGetter":
                case "IKeyword":
                case "IKeywordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Keyword, IKeywordGetter>(
                        srcGroup: obj.Keywords,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Keywords,
                        groupGetter: (m) => m.Keywords))
                    {
                        yield return item;
                    }
                    yield break;
                case "LocationReferenceType":
                case "ILocationReferenceTypeGetter":
                case "ILocationReferenceType":
                case "ILocationReferenceTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LocationReferenceType, ILocationReferenceTypeGetter>(
                        srcGroup: obj.LocationReferenceTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LocationReferenceTypes,
                        groupGetter: (m) => m.LocationReferenceTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActionRecord":
                case "IActionRecordGetter":
                case "IActionRecord":
                case "IActionRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ActionRecord, IActionRecordGetter>(
                        srcGroup: obj.Actions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Actions,
                        groupGetter: (m) => m.Actions))
                    {
                        yield return item;
                    }
                    yield break;
                case "TextureSet":
                case "ITextureSetGetter":
                case "ITextureSet":
                case "ITextureSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, TextureSet, ITextureSetGetter>(
                        srcGroup: obj.TextureSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.TextureSets,
                        groupGetter: (m) => m.TextureSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "Global":
                case "IGlobalGetter":
                case "IGlobal":
                case "IGlobalInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Global, IGlobalGetter>(
                        srcGroup: obj.Globals,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Globals,
                        groupGetter: (m) => m.Globals))
                    {
                        yield return item;
                    }
                    yield break;
                case "Class":
                case "IClassGetter":
                case "IClass":
                case "IClassInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Class, IClassGetter>(
                        srcGroup: obj.Classes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Classes,
                        groupGetter: (m) => m.Classes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Faction":
                case "IFactionGetter":
                case "IFaction":
                case "IFactionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Faction, IFactionGetter>(
                        srcGroup: obj.Factions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Factions,
                        groupGetter: (m) => m.Factions))
                    {
                        yield return item;
                    }
                    yield break;
                case "HeadPart":
                case "IHeadPartGetter":
                case "IHeadPart":
                case "IHeadPartInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, HeadPart, IHeadPartGetter>(
                        srcGroup: obj.HeadParts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.HeadParts,
                        groupGetter: (m) => m.HeadParts))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hair":
                case "IHairGetter":
                case "IHair":
                case "IHairInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Hair, IHairGetter>(
                        srcGroup: obj.Hairs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Hairs,
                        groupGetter: (m) => m.Hairs))
                    {
                        yield return item;
                    }
                    yield break;
                case "Eyes":
                case "IEyesGetter":
                case "IEyes":
                case "IEyesInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Eyes, IEyesGetter>(
                        srcGroup: obj.Eyes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Eyes,
                        groupGetter: (m) => m.Eyes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Race":
                case "IRaceGetter":
                case "IRace":
                case "IRaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Race, IRaceGetter>(
                        srcGroup: obj.Races,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Races,
                        groupGetter: (m) => m.Races))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundMarker":
                case "ISoundMarkerGetter":
                case "ISoundMarker":
                case "ISoundMarkerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, SoundMarker, ISoundMarkerGetter>(
                        srcGroup: obj.SoundMarkers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundMarkers,
                        groupGetter: (m) => m.SoundMarkers))
                    {
                        yield return item;
                    }
                    yield break;
                case "AcousticSpace":
                case "IAcousticSpaceGetter":
                case "IAcousticSpace":
                case "IAcousticSpaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, AcousticSpace, IAcousticSpaceGetter>(
                        srcGroup: obj.AcousticSpaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AcousticSpaces,
                        groupGetter: (m) => m.AcousticSpaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "MagicEffect":
                case "IMagicEffectGetter":
                case "IMagicEffect":
                case "IMagicEffectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MagicEffect, IMagicEffectGetter>(
                        srcGroup: obj.MagicEffects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MagicEffects,
                        groupGetter: (m) => m.MagicEffects))
                    {
                        yield return item;
                    }
                    yield break;
                case "LandscapeTexture":
                case "ILandscapeTextureGetter":
                case "ILandscapeTexture":
                case "ILandscapeTextureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LandscapeTexture, ILandscapeTextureGetter>(
                        srcGroup: obj.LandscapeTextures,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LandscapeTextures,
                        groupGetter: (m) => m.LandscapeTextures))
                    {
                        yield return item;
                    }
                    yield break;
                case "ObjectEffect":
                case "IObjectEffectGetter":
                case "IObjectEffect":
                case "IObjectEffectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ObjectEffect, IObjectEffectGetter>(
                        srcGroup: obj.ObjectEffects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ObjectEffects,
                        groupGetter: (m) => m.ObjectEffects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Spell":
                case "ISpellGetter":
                case "ISpell":
                case "ISpellInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Spell, ISpellGetter>(
                        srcGroup: obj.Spells,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Spells,
                        groupGetter: (m) => m.Spells))
                    {
                        yield return item;
                    }
                    yield break;
                case "Scroll":
                case "IScrollGetter":
                case "IScroll":
                case "IScrollInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Scroll, IScrollGetter>(
                        srcGroup: obj.Scrolls,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Scrolls,
                        groupGetter: (m) => m.Scrolls))
                    {
                        yield return item;
                    }
                    yield break;
                case "Activator":
                case "IActivatorGetter":
                case "IActivator":
                case "IActivatorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Activator, IActivatorGetter>(
                        srcGroup: obj.Activators,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Activators,
                        groupGetter: (m) => m.Activators))
                    {
                        yield return item;
                    }
                    yield break;
                case "TalkingActivator":
                case "ITalkingActivatorGetter":
                case "ITalkingActivator":
                case "ITalkingActivatorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, TalkingActivator, ITalkingActivatorGetter>(
                        srcGroup: obj.TalkingActivators,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.TalkingActivators,
                        groupGetter: (m) => m.TalkingActivators))
                    {
                        yield return item;
                    }
                    yield break;
                case "Armor":
                case "IArmorGetter":
                case "IArmor":
                case "IArmorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Armor, IArmorGetter>(
                        srcGroup: obj.Armors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Armors,
                        groupGetter: (m) => m.Armors))
                    {
                        yield return item;
                    }
                    yield break;
                case "Book":
                case "IBookGetter":
                case "IBook":
                case "IBookInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Book, IBookGetter>(
                        srcGroup: obj.Books,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Books,
                        groupGetter: (m) => m.Books))
                    {
                        yield return item;
                    }
                    yield break;
                case "Container":
                case "IContainerGetter":
                case "IContainer":
                case "IContainerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Container, IContainerGetter>(
                        srcGroup: obj.Containers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Containers,
                        groupGetter: (m) => m.Containers))
                    {
                        yield return item;
                    }
                    yield break;
                case "Door":
                case "IDoorGetter":
                case "IDoor":
                case "IDoorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Door, IDoorGetter>(
                        srcGroup: obj.Doors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Doors,
                        groupGetter: (m) => m.Doors))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingredient":
                case "IIngredientGetter":
                case "IIngredient":
                case "IIngredientInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Ingredient, IIngredientGetter>(
                        srcGroup: obj.Ingredients,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Ingredients,
                        groupGetter: (m) => m.Ingredients))
                    {
                        yield return item;
                    }
                    yield break;
                case "Light":
                case "ILightGetter":
                case "ILight":
                case "ILightInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Light, ILightGetter>(
                        srcGroup: obj.Lights,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Lights,
                        groupGetter: (m) => m.Lights))
                    {
                        yield return item;
                    }
                    yield break;
                case "MiscItem":
                case "IMiscItemGetter":
                case "IMiscItem":
                case "IMiscItemInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MiscItem, IMiscItemGetter>(
                        srcGroup: obj.MiscItems,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MiscItems,
                        groupGetter: (m) => m.MiscItems))
                    {
                        yield return item;
                    }
                    yield break;
                case "AlchemicalApparatus":
                case "IAlchemicalApparatusGetter":
                case "IAlchemicalApparatus":
                case "IAlchemicalApparatusInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, AlchemicalApparatus, IAlchemicalApparatusGetter>(
                        srcGroup: obj.AlchemicalApparatuses,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AlchemicalApparatuses,
                        groupGetter: (m) => m.AlchemicalApparatuses))
                    {
                        yield return item;
                    }
                    yield break;
                case "Static":
                case "IStaticGetter":
                case "IStatic":
                case "IStaticInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Static, IStaticGetter>(
                        srcGroup: obj.Statics,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Statics,
                        groupGetter: (m) => m.Statics))
                    {
                        yield return item;
                    }
                    yield break;
                case "MoveableStatic":
                case "IMoveableStaticGetter":
                case "IMoveableStatic":
                case "IMoveableStaticInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MoveableStatic, IMoveableStaticGetter>(
                        srcGroup: obj.MoveableStatics,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MoveableStatics,
                        groupGetter: (m) => m.MoveableStatics))
                    {
                        yield return item;
                    }
                    yield break;
                case "Grass":
                case "IGrassGetter":
                case "IGrass":
                case "IGrassInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Grass, IGrassGetter>(
                        srcGroup: obj.Grasses,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Grasses,
                        groupGetter: (m) => m.Grasses))
                    {
                        yield return item;
                    }
                    yield break;
                case "Tree":
                case "ITreeGetter":
                case "ITree":
                case "ITreeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Tree, ITreeGetter>(
                        srcGroup: obj.Trees,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Trees,
                        groupGetter: (m) => m.Trees))
                    {
                        yield return item;
                    }
                    yield break;
                case "Flora":
                case "IFloraGetter":
                case "IFlora":
                case "IFloraInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Flora, IFloraGetter>(
                        srcGroup: obj.Florae,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Florae,
                        groupGetter: (m) => m.Florae))
                    {
                        yield return item;
                    }
                    yield break;
                case "Furniture":
                case "IFurnitureGetter":
                case "IFurniture":
                case "IFurnitureInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Furniture, IFurnitureGetter>(
                        srcGroup: obj.Furniture,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Furniture,
                        groupGetter: (m) => m.Furniture))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weapon":
                case "IWeaponGetter":
                case "IWeapon":
                case "IWeaponInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Weapon, IWeaponGetter>(
                        srcGroup: obj.Weapons,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Weapons,
                        groupGetter: (m) => m.Weapons))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ammunition":
                case "IAmmunitionGetter":
                case "IAmmunition":
                case "IAmmunitionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Ammunition, IAmmunitionGetter>(
                        srcGroup: obj.Ammunitions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Ammunitions,
                        groupGetter: (m) => m.Ammunitions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Npc":
                case "INpcGetter":
                case "INpc":
                case "INpcInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Npc, INpcGetter>(
                        srcGroup: obj.Npcs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Npcs,
                        groupGetter: (m) => m.Npcs))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledNpc":
                case "ILeveledNpcGetter":
                case "ILeveledNpc":
                case "ILeveledNpcInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LeveledNpc, ILeveledNpcGetter>(
                        srcGroup: obj.LeveledNpcs,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledNpcs,
                        groupGetter: (m) => m.LeveledNpcs))
                    {
                        yield return item;
                    }
                    yield break;
                case "Key":
                case "IKeyGetter":
                case "IKey":
                case "IKeyInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Key, IKeyGetter>(
                        srcGroup: obj.Keys,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Keys,
                        groupGetter: (m) => m.Keys))
                    {
                        yield return item;
                    }
                    yield break;
                case "Ingestible":
                case "IIngestibleGetter":
                case "IIngestible":
                case "IIngestibleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Ingestible, IIngestibleGetter>(
                        srcGroup: obj.Ingestibles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Ingestibles,
                        groupGetter: (m) => m.Ingestibles))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleMarker":
                case "IIdleMarkerGetter":
                case "IIdleMarker":
                case "IIdleMarkerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, IdleMarker, IIdleMarkerGetter>(
                        srcGroup: obj.IdleMarkers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.IdleMarkers,
                        groupGetter: (m) => m.IdleMarkers))
                    {
                        yield return item;
                    }
                    yield break;
                case "ConstructibleObject":
                case "IConstructibleObjectGetter":
                case "IConstructibleObject":
                case "IConstructibleObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ConstructibleObject, IConstructibleObjectGetter>(
                        srcGroup: obj.ConstructibleObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ConstructibleObjects,
                        groupGetter: (m) => m.ConstructibleObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Projectile":
                case "IProjectileGetter":
                case "IProjectile":
                case "IProjectileInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Projectile, IProjectileGetter>(
                        srcGroup: obj.Projectiles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Projectiles,
                        groupGetter: (m) => m.Projectiles))
                    {
                        yield return item;
                    }
                    yield break;
                case "Hazard":
                case "IHazardGetter":
                case "IHazard":
                case "IHazardInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Hazard, IHazardGetter>(
                        srcGroup: obj.Hazards,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Hazards,
                        groupGetter: (m) => m.Hazards))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoulGem":
                case "ISoulGemGetter":
                case "ISoulGem":
                case "ISoulGemInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, SoulGem, ISoulGemGetter>(
                        srcGroup: obj.SoulGems,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoulGems,
                        groupGetter: (m) => m.SoulGems))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledItem":
                case "ILeveledItemGetter":
                case "ILeveledItem":
                case "ILeveledItemInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LeveledItem, ILeveledItemGetter>(
                        srcGroup: obj.LeveledItems,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledItems,
                        groupGetter: (m) => m.LeveledItems))
                    {
                        yield return item;
                    }
                    yield break;
                case "Weather":
                case "IWeatherGetter":
                case "IWeather":
                case "IWeatherInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Weather, IWeatherGetter>(
                        srcGroup: obj.Weathers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Weathers,
                        groupGetter: (m) => m.Weathers))
                    {
                        yield return item;
                    }
                    yield break;
                case "Climate":
                case "IClimateGetter":
                case "IClimate":
                case "IClimateInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Climate, IClimateGetter>(
                        srcGroup: obj.Climates,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Climates,
                        groupGetter: (m) => m.Climates))
                    {
                        yield return item;
                    }
                    yield break;
                case "ShaderParticleGeometry":
                case "IShaderParticleGeometryGetter":
                case "IShaderParticleGeometry":
                case "IShaderParticleGeometryInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ShaderParticleGeometry, IShaderParticleGeometryGetter>(
                        srcGroup: obj.ShaderParticleGeometries,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ShaderParticleGeometries,
                        groupGetter: (m) => m.ShaderParticleGeometries))
                    {
                        yield return item;
                    }
                    yield break;
                case "VisualEffect":
                case "IVisualEffectGetter":
                case "IVisualEffect":
                case "IVisualEffectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, VisualEffect, IVisualEffectGetter>(
                        srcGroup: obj.VisualEffects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.VisualEffects,
                        groupGetter: (m) => m.VisualEffects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Region":
                case "IRegionGetter":
                case "IRegion":
                case "IRegionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Region, IRegionGetter>(
                        srcGroup: obj.Regions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Regions,
                        groupGetter: (m) => m.Regions))
                    {
                        yield return item;
                    }
                    yield break;
                case "NavigationMeshInfoMap":
                case "INavigationMeshInfoMapGetter":
                case "INavigationMeshInfoMap":
                case "INavigationMeshInfoMapInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, NavigationMeshInfoMap, INavigationMeshInfoMapGetter>(
                        srcGroup: obj.NavigationMeshInfoMaps,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.NavigationMeshInfoMaps,
                        groupGetter: (m) => m.NavigationMeshInfoMaps))
                    {
                        yield return item;
                    }
                    yield break;
                case "Worldspace":
                case "IWorldspaceGetter":
                case "IWorldspace":
                case "IWorldspaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Worldspace, IWorldspaceGetter>(
                        srcGroup: obj.Worldspaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Worldspaces,
                        groupGetter: (m) => m.Worldspaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogTopic":
                case "IDialogTopicGetter":
                case "IDialogTopic":
                case "IDialogTopicInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, DialogTopic, IDialogTopicGetter>(
                        srcGroup: obj.DialogTopics,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DialogTopics,
                        groupGetter: (m) => m.DialogTopics))
                    {
                        yield return item;
                    }
                    yield break;
                case "Quest":
                case "IQuestGetter":
                case "IQuest":
                case "IQuestInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Quest, IQuestGetter>(
                        srcGroup: obj.Quests,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Quests,
                        groupGetter: (m) => m.Quests))
                    {
                        yield return item;
                    }
                    yield break;
                case "IdleAnimation":
                case "IIdleAnimationGetter":
                case "IIdleAnimation":
                case "IIdleAnimationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, IdleAnimation, IIdleAnimationGetter>(
                        srcGroup: obj.IdleAnimations,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.IdleAnimations,
                        groupGetter: (m) => m.IdleAnimations))
                    {
                        yield return item;
                    }
                    yield break;
                case "Package":
                case "IPackageGetter":
                case "IPackage":
                case "IPackageInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Package, IPackageGetter>(
                        srcGroup: obj.Packages,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Packages,
                        groupGetter: (m) => m.Packages))
                    {
                        yield return item;
                    }
                    yield break;
                case "CombatStyle":
                case "ICombatStyleGetter":
                case "ICombatStyle":
                case "ICombatStyleInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, CombatStyle, ICombatStyleGetter>(
                        srcGroup: obj.CombatStyles,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CombatStyles,
                        groupGetter: (m) => m.CombatStyles))
                    {
                        yield return item;
                    }
                    yield break;
                case "LoadScreen":
                case "ILoadScreenGetter":
                case "ILoadScreen":
                case "ILoadScreenInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LoadScreen, ILoadScreenGetter>(
                        srcGroup: obj.LoadScreens,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LoadScreens,
                        groupGetter: (m) => m.LoadScreens))
                    {
                        yield return item;
                    }
                    yield break;
                case "LeveledSpell":
                case "ILeveledSpellGetter":
                case "ILeveledSpell":
                case "ILeveledSpellInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LeveledSpell, ILeveledSpellGetter>(
                        srcGroup: obj.LeveledSpells,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LeveledSpells,
                        groupGetter: (m) => m.LeveledSpells))
                    {
                        yield return item;
                    }
                    yield break;
                case "AnimatedObject":
                case "IAnimatedObjectGetter":
                case "IAnimatedObject":
                case "IAnimatedObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, AnimatedObject, IAnimatedObjectGetter>(
                        srcGroup: obj.AnimatedObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AnimatedObjects,
                        groupGetter: (m) => m.AnimatedObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "Water":
                case "IWaterGetter":
                case "IWater":
                case "IWaterInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Water, IWaterGetter>(
                        srcGroup: obj.Waters,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Waters,
                        groupGetter: (m) => m.Waters))
                    {
                        yield return item;
                    }
                    yield break;
                case "EffectShader":
                case "IEffectShaderGetter":
                case "IEffectShader":
                case "IEffectShaderInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, EffectShader, IEffectShaderGetter>(
                        srcGroup: obj.EffectShaders,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.EffectShaders,
                        groupGetter: (m) => m.EffectShaders))
                    {
                        yield return item;
                    }
                    yield break;
                case "Explosion":
                case "IExplosionGetter":
                case "IExplosion":
                case "IExplosionInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Explosion, IExplosionGetter>(
                        srcGroup: obj.Explosions,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Explosions,
                        groupGetter: (m) => m.Explosions))
                    {
                        yield return item;
                    }
                    yield break;
                case "Debris":
                case "IDebrisGetter":
                case "IDebris":
                case "IDebrisInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Debris, IDebrisGetter>(
                        srcGroup: obj.Debris,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Debris,
                        groupGetter: (m) => m.Debris))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpace":
                case "IImageSpaceGetter":
                case "IImageSpace":
                case "IImageSpaceInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ImageSpace, IImageSpaceGetter>(
                        srcGroup: obj.ImageSpaces,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ImageSpaces,
                        groupGetter: (m) => m.ImageSpaces))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImageSpaceAdapter":
                case "IImageSpaceAdapterGetter":
                case "IImageSpaceAdapter":
                case "IImageSpaceAdapterInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ImageSpaceAdapter, IImageSpaceAdapterGetter>(
                        srcGroup: obj.ImageSpaceAdapters,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ImageSpaceAdapters,
                        groupGetter: (m) => m.ImageSpaceAdapters))
                    {
                        yield return item;
                    }
                    yield break;
                case "FormList":
                case "IFormListGetter":
                case "IFormList":
                case "IFormListInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, FormList, IFormListGetter>(
                        srcGroup: obj.FormLists,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FormLists,
                        groupGetter: (m) => m.FormLists))
                    {
                        yield return item;
                    }
                    yield break;
                case "Perk":
                case "IPerkGetter":
                case "IPerk":
                case "IPerkInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Perk, IPerkGetter>(
                        srcGroup: obj.Perks,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Perks,
                        groupGetter: (m) => m.Perks))
                    {
                        yield return item;
                    }
                    yield break;
                case "BodyPartData":
                case "IBodyPartDataGetter":
                case "IBodyPartData":
                case "IBodyPartDataInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, BodyPartData, IBodyPartDataGetter>(
                        srcGroup: obj.BodyParts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.BodyParts,
                        groupGetter: (m) => m.BodyParts))
                    {
                        yield return item;
                    }
                    yield break;
                case "AddonNode":
                case "IAddonNodeGetter":
                case "IAddonNode":
                case "IAddonNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, AddonNode, IAddonNodeGetter>(
                        srcGroup: obj.AddonNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AddonNodes,
                        groupGetter: (m) => m.AddonNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "ActorValueInformation":
                case "IActorValueInformationGetter":
                case "IActorValueInformation":
                case "IActorValueInformationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ActorValueInformation, IActorValueInformationGetter>(
                        srcGroup: obj.ActorValueInformation,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ActorValueInformation,
                        groupGetter: (m) => m.ActorValueInformation))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraShot":
                case "ICameraShotGetter":
                case "ICameraShot":
                case "ICameraShotInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, CameraShot, ICameraShotGetter>(
                        srcGroup: obj.CameraShots,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CameraShots,
                        groupGetter: (m) => m.CameraShots))
                    {
                        yield return item;
                    }
                    yield break;
                case "CameraPath":
                case "ICameraPathGetter":
                case "ICameraPath":
                case "ICameraPathInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, CameraPath, ICameraPathGetter>(
                        srcGroup: obj.CameraPaths,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CameraPaths,
                        groupGetter: (m) => m.CameraPaths))
                    {
                        yield return item;
                    }
                    yield break;
                case "VoiceType":
                case "IVoiceTypeGetter":
                case "IVoiceType":
                case "IVoiceTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, VoiceType, IVoiceTypeGetter>(
                        srcGroup: obj.VoiceTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.VoiceTypes,
                        groupGetter: (m) => m.VoiceTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialType":
                case "IMaterialTypeGetter":
                case "IMaterialType":
                case "IMaterialTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MaterialType, IMaterialTypeGetter>(
                        srcGroup: obj.MaterialTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MaterialTypes,
                        groupGetter: (m) => m.MaterialTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Impact":
                case "IImpactGetter":
                case "IImpact":
                case "IImpactInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Impact, IImpactGetter>(
                        srcGroup: obj.Impacts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Impacts,
                        groupGetter: (m) => m.Impacts))
                    {
                        yield return item;
                    }
                    yield break;
                case "ImpactDataSet":
                case "IImpactDataSetGetter":
                case "IImpactDataSet":
                case "IImpactDataSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ImpactDataSet, IImpactDataSetGetter>(
                        srcGroup: obj.ImpactDataSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ImpactDataSets,
                        groupGetter: (m) => m.ImpactDataSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArmorAddon":
                case "IArmorAddonGetter":
                case "IArmorAddon":
                case "IArmorAddonInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ArmorAddon, IArmorAddonGetter>(
                        srcGroup: obj.ArmorAddons,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ArmorAddons,
                        groupGetter: (m) => m.ArmorAddons))
                    {
                        yield return item;
                    }
                    yield break;
                case "EncounterZone":
                case "IEncounterZoneGetter":
                case "IEncounterZone":
                case "IEncounterZoneInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, EncounterZone, IEncounterZoneGetter>(
                        srcGroup: obj.EncounterZones,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.EncounterZones,
                        groupGetter: (m) => m.EncounterZones))
                    {
                        yield return item;
                    }
                    yield break;
                case "Location":
                case "ILocationGetter":
                case "ILocation":
                case "ILocationInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Location, ILocationGetter>(
                        srcGroup: obj.Locations,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Locations,
                        groupGetter: (m) => m.Locations))
                    {
                        yield return item;
                    }
                    yield break;
                case "Message":
                case "IMessageGetter":
                case "IMessage":
                case "IMessageInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Message, IMessageGetter>(
                        srcGroup: obj.Messages,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Messages,
                        groupGetter: (m) => m.Messages))
                    {
                        yield return item;
                    }
                    yield break;
                case "DefaultObjectManager":
                case "IDefaultObjectManagerGetter":
                case "IDefaultObjectManager":
                case "IDefaultObjectManagerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, DefaultObjectManager, IDefaultObjectManagerGetter>(
                        srcGroup: obj.DefaultObjectManagers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DefaultObjectManagers,
                        groupGetter: (m) => m.DefaultObjectManagers))
                    {
                        yield return item;
                    }
                    yield break;
                case "LightingTemplate":
                case "ILightingTemplateGetter":
                case "ILightingTemplate":
                case "ILightingTemplateInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LightingTemplate, ILightingTemplateGetter>(
                        srcGroup: obj.LightingTemplates,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LightingTemplates,
                        groupGetter: (m) => m.LightingTemplates))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicType":
                case "IMusicTypeGetter":
                case "IMusicType":
                case "IMusicTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MusicType, IMusicTypeGetter>(
                        srcGroup: obj.MusicTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MusicTypes,
                        groupGetter: (m) => m.MusicTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Footstep":
                case "IFootstepGetter":
                case "IFootstep":
                case "IFootstepInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Footstep, IFootstepGetter>(
                        srcGroup: obj.Footsteps,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Footsteps,
                        groupGetter: (m) => m.Footsteps))
                    {
                        yield return item;
                    }
                    yield break;
                case "FootstepSet":
                case "IFootstepSetGetter":
                case "IFootstepSet":
                case "IFootstepSetInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, FootstepSet, IFootstepSetGetter>(
                        srcGroup: obj.FootstepSets,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.FootstepSets,
                        groupGetter: (m) => m.FootstepSets))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerBranchNode":
                case "IStoryManagerBranchNodeGetter":
                case "IStoryManagerBranchNode":
                case "IStoryManagerBranchNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, StoryManagerBranchNode, IStoryManagerBranchNodeGetter>(
                        srcGroup: obj.StoryManagerBranchNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StoryManagerBranchNodes,
                        groupGetter: (m) => m.StoryManagerBranchNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerQuestNode":
                case "IStoryManagerQuestNodeGetter":
                case "IStoryManagerQuestNode":
                case "IStoryManagerQuestNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, StoryManagerQuestNode, IStoryManagerQuestNodeGetter>(
                        srcGroup: obj.StoryManagerQuestNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StoryManagerQuestNodes,
                        groupGetter: (m) => m.StoryManagerQuestNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "StoryManagerEventNode":
                case "IStoryManagerEventNodeGetter":
                case "IStoryManagerEventNode":
                case "IStoryManagerEventNodeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, StoryManagerEventNode, IStoryManagerEventNodeGetter>(
                        srcGroup: obj.StoryManagerEventNodes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.StoryManagerEventNodes,
                        groupGetter: (m) => m.StoryManagerEventNodes))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogBranch":
                case "IDialogBranchGetter":
                case "IDialogBranch":
                case "IDialogBranchInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, DialogBranch, IDialogBranchGetter>(
                        srcGroup: obj.DialogBranches,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DialogBranches,
                        groupGetter: (m) => m.DialogBranches))
                    {
                        yield return item;
                    }
                    yield break;
                case "MusicTrack":
                case "IMusicTrackGetter":
                case "IMusicTrack":
                case "IMusicTrackInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MusicTrack, IMusicTrackGetter>(
                        srcGroup: obj.MusicTracks,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MusicTracks,
                        groupGetter: (m) => m.MusicTracks))
                    {
                        yield return item;
                    }
                    yield break;
                case "DialogView":
                case "IDialogViewGetter":
                case "IDialogView":
                case "IDialogViewInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, DialogView, IDialogViewGetter>(
                        srcGroup: obj.DialogViews,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DialogViews,
                        groupGetter: (m) => m.DialogViews))
                    {
                        yield return item;
                    }
                    yield break;
                case "WordOfPower":
                case "IWordOfPowerGetter":
                case "IWordOfPower":
                case "IWordOfPowerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, WordOfPower, IWordOfPowerGetter>(
                        srcGroup: obj.WordsOfPower,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.WordsOfPower,
                        groupGetter: (m) => m.WordsOfPower))
                    {
                        yield return item;
                    }
                    yield break;
                case "Shout":
                case "IShoutGetter":
                case "IShout":
                case "IShoutInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Shout, IShoutGetter>(
                        srcGroup: obj.Shouts,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Shouts,
                        groupGetter: (m) => m.Shouts))
                    {
                        yield return item;
                    }
                    yield break;
                case "EquipType":
                case "IEquipTypeGetter":
                case "IEquipType":
                case "IEquipTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, EquipType, IEquipTypeGetter>(
                        srcGroup: obj.EquipTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.EquipTypes,
                        groupGetter: (m) => m.EquipTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Relationship":
                case "IRelationshipGetter":
                case "IRelationship":
                case "IRelationshipInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Relationship, IRelationshipGetter>(
                        srcGroup: obj.Relationships,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Relationships,
                        groupGetter: (m) => m.Relationships))
                    {
                        yield return item;
                    }
                    yield break;
                case "Scene":
                case "ISceneGetter":
                case "IScene":
                case "ISceneInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Scene, ISceneGetter>(
                        srcGroup: obj.Scenes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Scenes,
                        groupGetter: (m) => m.Scenes))
                    {
                        yield return item;
                    }
                    yield break;
                case "AssociationType":
                case "IAssociationTypeGetter":
                case "IAssociationType":
                case "IAssociationTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, AssociationType, IAssociationTypeGetter>(
                        srcGroup: obj.AssociationTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.AssociationTypes,
                        groupGetter: (m) => m.AssociationTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "Outfit":
                case "IOutfitGetter":
                case "IOutfit":
                case "IOutfitInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, Outfit, IOutfitGetter>(
                        srcGroup: obj.Outfits,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Outfits,
                        groupGetter: (m) => m.Outfits))
                    {
                        yield return item;
                    }
                    yield break;
                case "ArtObject":
                case "IArtObjectGetter":
                case "IArtObject":
                case "IArtObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ArtObject, IArtObjectGetter>(
                        srcGroup: obj.ArtObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ArtObjects,
                        groupGetter: (m) => m.ArtObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "MaterialObject":
                case "IMaterialObjectGetter":
                case "IMaterialObject":
                case "IMaterialObjectInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MaterialObject, IMaterialObjectGetter>(
                        srcGroup: obj.MaterialObjects,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MaterialObjects,
                        groupGetter: (m) => m.MaterialObjects))
                    {
                        yield return item;
                    }
                    yield break;
                case "MovementType":
                case "IMovementTypeGetter":
                case "IMovementType":
                case "IMovementTypeInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, MovementType, IMovementTypeGetter>(
                        srcGroup: obj.MovementTypes,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.MovementTypes,
                        groupGetter: (m) => m.MovementTypes))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundDescriptor":
                case "ISoundDescriptorGetter":
                case "ISoundDescriptor":
                case "ISoundDescriptorInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, SoundDescriptor, ISoundDescriptorGetter>(
                        srcGroup: obj.SoundDescriptors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundDescriptors,
                        groupGetter: (m) => m.SoundDescriptors))
                    {
                        yield return item;
                    }
                    yield break;
                case "DualCastData":
                case "IDualCastDataGetter":
                case "IDualCastData":
                case "IDualCastDataInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, DualCastData, IDualCastDataGetter>(
                        srcGroup: obj.DualCastData,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.DualCastData,
                        groupGetter: (m) => m.DualCastData))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundCategory":
                case "ISoundCategoryGetter":
                case "ISoundCategory":
                case "ISoundCategoryInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, SoundCategory, ISoundCategoryGetter>(
                        srcGroup: obj.SoundCategories,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundCategories,
                        groupGetter: (m) => m.SoundCategories))
                    {
                        yield return item;
                    }
                    yield break;
                case "SoundOutputModel":
                case "ISoundOutputModelGetter":
                case "ISoundOutputModel":
                case "ISoundOutputModelInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, SoundOutputModel, ISoundOutputModelGetter>(
                        srcGroup: obj.SoundOutputModels,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.SoundOutputModels,
                        groupGetter: (m) => m.SoundOutputModels))
                    {
                        yield return item;
                    }
                    yield break;
                case "CollisionLayer":
                case "ICollisionLayerGetter":
                case "ICollisionLayer":
                case "ICollisionLayerInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, CollisionLayer, ICollisionLayerGetter>(
                        srcGroup: obj.CollisionLayers,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.CollisionLayers,
                        groupGetter: (m) => m.CollisionLayers))
                    {
                        yield return item;
                    }
                    yield break;
                case "ColorRecord":
                case "IColorRecordGetter":
                case "IColorRecord":
                case "IColorRecordInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ColorRecord, IColorRecordGetter>(
                        srcGroup: obj.Colors,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.Colors,
                        groupGetter: (m) => m.Colors))
                    {
                        yield return item;
                    }
                    yield break;
                case "ReverbParameters":
                case "IReverbParametersGetter":
                case "IReverbParameters":
                case "IReverbParametersInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, ReverbParameters, IReverbParametersGetter>(
                        srcGroup: obj.ReverbParameters,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.ReverbParameters,
                        groupGetter: (m) => m.ReverbParameters))
                    {
                        yield return item;
                    }
                    yield break;
                case "VolumetricLighting":
                case "IVolumetricLightingGetter":
                case "IVolumetricLighting":
                case "IVolumetricLightingInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, VolumetricLighting, IVolumetricLightingGetter>(
                        srcGroup: obj.VolumetricLightings,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.VolumetricLightings,
                        groupGetter: (m) => m.VolumetricLightings))
                    {
                        yield return item;
                    }
                    yield break;
                case "LensFlare":
                case "ILensFlareGetter":
                case "ILensFlare":
                case "ILensFlareInternal":
                    foreach (var item in InterfaceEnumerationHelper.EnumerateGroupContexts<ISkyrimMod, ISkyrimModGetter, LensFlare, ILensFlareGetter>(
                        srcGroup: obj.LensFlares,
                        type: type,
                        modKey: obj.ModKey,
                        group: (m) => m.LensFlares,
                        groupGetter: (m) => m.LensFlares))
                    {
                        yield return item;
                    }
                    yield break;
                case "Cell":
                case "ICellGetter":
                case "ICell":
                case "ICellInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "Landscape":
                case "ILandscapeGetter":
                case "ILandscape":
                case "ILandscapeInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "NavigationMesh":
                case "INavigationMeshGetter":
                case "INavigationMesh":
                case "INavigationMeshInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedNpc":
                case "IPlacedNpcGetter":
                case "IPlacedNpc":
                case "IPlacedNpcInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "PlacedObject":
                case "IPlacedObjectGetter":
                case "IPlacedObject":
                case "IPlacedObjectInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "APlacedTrap":
                case "IAPlacedTrapGetter":
                case "IAPlacedTrap":
                case "IAPlacedTrapInternal":
                    foreach (var item in obj.Cells.EnumerateMajorRecordContexts(
                        linkCache: linkCache,
                        type: type,
                        throwIfUnknown: throwIfUnknown,
                        modKey: obj.ModKey,
                        parent: null))
                    {
                        yield return item;
                    }
                    foreach (var groupItem in obj.Worldspaces)
                    {
                        foreach (var item in WorldspaceCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.Worldspaces.GetOrAddAsOverride(linkCache.Resolve<IWorldspaceGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.Worldspaces.DuplicateInAsNewRecord(linkCache.Resolve<IWorldspaceGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                case "DialogResponses":
                case "IDialogResponsesGetter":
                case "IDialogResponses":
                case "IDialogResponsesInternal":
                    foreach (var groupItem in obj.DialogTopics)
                    {
                        foreach (var item in DialogTopicCommon.Instance.EnumerateMajorRecordContexts(
                            groupItem,
                            linkCache: linkCache,
                            type: type,
                            throwIfUnknown: throwIfUnknown,
                            modKey: obj.ModKey,
                            parent: null,
                            getOrAddAsOverride: (m, r) => m.DialogTopics.GetOrAddAsOverride(linkCache.Resolve<IDialogTopicGetter>(r.FormKey)),
                            duplicateInto: (m, r, e, f) => m.DialogTopics.DuplicateInAsNewRecord(linkCache.Resolve<IDialogTopicGetter>(r.FormKey), e, f)))
                        {
                            yield return item;
                        }
                    }
                    yield break;
                default:
                    if (InterfaceEnumerationHelper.TryEnumerateInterfaceContextsFor<ISkyrimModGetter, ISkyrimMod, ISkyrimModGetter>(
                        GameCategory.Skyrim,
                        obj,
                        type,
                        linkCache,
                        out var linkInterfaces))
                    {
                        foreach (var item in linkInterfaces)
                        {
                            yield return item;
                        }
                        yield break;
                    }
                    if (throwIfUnknown)
                    {
                        throw new ArgumentException($"Unknown major record type: {type}");
                    }
                    else
                    {
                        yield break;
                    }
            }
        }
        
        public static partial IEnumerable<IAssetLinkGetter> GetInferredAssetLinks(ISkyrimModGetter obj, Type? assetType);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ISkyrimModGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            if (queryCategories.HasFlag(AssetLinkQuery.Inferred))
            {
                foreach (var additional in GetInferredAssetLinks(obj, assetType))
                {
                    yield return additional;
                }
            }
            foreach (var item in obj.TextureSets.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.HeadParts.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Eyes.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Races.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.MagicEffects.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Scrolls.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Activators.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.TalkingActivators.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Armors.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Books.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Containers.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Doors.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Ingredients.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Lights.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.MiscItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.AlchemicalApparatuses.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Statics.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.MoveableStatics.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Grasses.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Trees.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Florae.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Furniture.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Weapons.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Ammunitions.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Npcs.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.LeveledNpcs.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Keys.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Ingestibles.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.IdleMarkers.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Projectiles.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Hazards.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.SoulGems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Weathers.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Climates.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.ShaderParticleGeometries.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Regions.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            if (obj.Cells is IAssetLinkContainerGetter CellslinkCont)
            {
                foreach (var item in CellslinkCont.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Worldspaces.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.DialogTopics.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Quests.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.IdleAnimations.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Packages.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.LoadScreens.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.AnimatedObjects.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Waters.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.EffectShaders.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Explosions.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Debris.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Perks.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.BodyParts.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.AddonNodes.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.CameraShots.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Impacts.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.ArmorAddons.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.MusicTracks.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.Scenes.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.ArtObjects.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.MaterialObjects.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.SoundDescriptors.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            foreach (var item in obj.LensFlares.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
            {
                yield return item;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class SkyrimModSetterTranslationCommon
    {
        public static readonly SkyrimModSetterTranslationCommon Instance = new SkyrimModSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISkyrimMod item,
            ISkyrimModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ModHeader) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ModHeader);
                try
                {
                    item.ModHeader.DeepCopyIn(
                        rhs: rhs.ModHeader,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ModHeader));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.GameSettings) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.GameSettings);
                try
                {
                    item.GameSettings.DeepCopyIn(
                        rhs: rhs.GameSettings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.GameSettings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keywords);
                try
                {
                    item.Keywords.DeepCopyIn(
                        rhs: rhs.Keywords,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keywords));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LocationReferenceTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LocationReferenceTypes);
                try
                {
                    item.LocationReferenceTypes.DeepCopyIn(
                        rhs: rhs.LocationReferenceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LocationReferenceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Actions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Actions);
                try
                {
                    item.Actions.DeepCopyIn(
                        rhs: rhs.Actions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Actions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TextureSets) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TextureSets);
                try
                {
                    item.TextureSets.DeepCopyIn(
                        rhs: rhs.TextureSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TextureSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Globals) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Globals);
                try
                {
                    item.Globals.DeepCopyIn(
                        rhs: rhs.Globals,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Globals));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Classes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Classes);
                try
                {
                    item.Classes.DeepCopyIn(
                        rhs: rhs.Classes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Classes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Factions);
                try
                {
                    item.Factions.DeepCopyIn(
                        rhs: rhs.Factions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Factions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.DeepCopyIn(
                        rhs: rhs.HeadParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.HeadParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hairs) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Hairs);
                try
                {
                    item.Hairs.DeepCopyIn(
                        rhs: rhs.Hairs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Hairs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Eyes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Eyes);
                try
                {
                    item.Eyes.DeepCopyIn(
                        rhs: rhs.Eyes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Eyes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Races) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Races);
                try
                {
                    item.Races.DeepCopyIn(
                        rhs: rhs.Races,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Races));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundMarkers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundMarkers);
                try
                {
                    item.SoundMarkers.DeepCopyIn(
                        rhs: rhs.SoundMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AcousticSpaces) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AcousticSpaces);
                try
                {
                    item.AcousticSpaces.DeepCopyIn(
                        rhs: rhs.AcousticSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AcousticSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MagicEffects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MagicEffects);
                try
                {
                    item.MagicEffects.DeepCopyIn(
                        rhs: rhs.MagicEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MagicEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LandscapeTextures) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LandscapeTextures);
                try
                {
                    item.LandscapeTextures.DeepCopyIn(
                        rhs: rhs.LandscapeTextures,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LandscapeTextures));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ObjectEffects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ObjectEffects);
                try
                {
                    item.ObjectEffects.DeepCopyIn(
                        rhs: rhs.ObjectEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ObjectEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Spells);
                try
                {
                    item.Spells.DeepCopyIn(
                        rhs: rhs.Spells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Spells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Scrolls) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Scrolls);
                try
                {
                    item.Scrolls.DeepCopyIn(
                        rhs: rhs.Scrolls,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Scrolls));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Activators) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Activators);
                try
                {
                    item.Activators.DeepCopyIn(
                        rhs: rhs.Activators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Activators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.TalkingActivators) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.TalkingActivators);
                try
                {
                    item.TalkingActivators.DeepCopyIn(
                        rhs: rhs.TalkingActivators,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.TalkingActivators));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Armors) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Armors);
                try
                {
                    item.Armors.DeepCopyIn(
                        rhs: rhs.Armors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Armors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Books) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Books);
                try
                {
                    item.Books.DeepCopyIn(
                        rhs: rhs.Books,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Books));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Containers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Containers);
                try
                {
                    item.Containers.DeepCopyIn(
                        rhs: rhs.Containers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Containers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Doors) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Doors);
                try
                {
                    item.Doors.DeepCopyIn(
                        rhs: rhs.Doors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Doors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingredients) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ingredients);
                try
                {
                    item.Ingredients.DeepCopyIn(
                        rhs: rhs.Ingredients,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ingredients));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Lights) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Lights);
                try
                {
                    item.Lights.DeepCopyIn(
                        rhs: rhs.Lights,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Lights));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MiscItems) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MiscItems);
                try
                {
                    item.MiscItems.DeepCopyIn(
                        rhs: rhs.MiscItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MiscItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AlchemicalApparatuses) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AlchemicalApparatuses);
                try
                {
                    item.AlchemicalApparatuses.DeepCopyIn(
                        rhs: rhs.AlchemicalApparatuses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AlchemicalApparatuses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Statics) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Statics);
                try
                {
                    item.Statics.DeepCopyIn(
                        rhs: rhs.Statics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Statics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MoveableStatics) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MoveableStatics);
                try
                {
                    item.MoveableStatics.DeepCopyIn(
                        rhs: rhs.MoveableStatics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MoveableStatics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Grasses) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Grasses);
                try
                {
                    item.Grasses.DeepCopyIn(
                        rhs: rhs.Grasses,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Grasses));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Trees) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Trees);
                try
                {
                    item.Trees.DeepCopyIn(
                        rhs: rhs.Trees,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Trees));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Florae) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Florae);
                try
                {
                    item.Florae.DeepCopyIn(
                        rhs: rhs.Florae,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Florae));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Furniture) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Furniture);
                try
                {
                    item.Furniture.DeepCopyIn(
                        rhs: rhs.Furniture,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Furniture));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Weapons) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Weapons);
                try
                {
                    item.Weapons.DeepCopyIn(
                        rhs: rhs.Weapons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Weapons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ammunitions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ammunitions);
                try
                {
                    item.Ammunitions.DeepCopyIn(
                        rhs: rhs.Ammunitions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ammunitions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Npcs) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Npcs);
                try
                {
                    item.Npcs.DeepCopyIn(
                        rhs: rhs.Npcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Npcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledNpcs) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledNpcs);
                try
                {
                    item.LeveledNpcs.DeepCopyIn(
                        rhs: rhs.LeveledNpcs,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledNpcs));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Keys) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Keys);
                try
                {
                    item.Keys.DeepCopyIn(
                        rhs: rhs.Keys,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Keys));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Ingestibles) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Ingestibles);
                try
                {
                    item.Ingestibles.DeepCopyIn(
                        rhs: rhs.Ingestibles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Ingestibles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.IdleMarkers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.IdleMarkers);
                try
                {
                    item.IdleMarkers.DeepCopyIn(
                        rhs: rhs.IdleMarkers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.IdleMarkers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ConstructibleObjects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ConstructibleObjects);
                try
                {
                    item.ConstructibleObjects.DeepCopyIn(
                        rhs: rhs.ConstructibleObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ConstructibleObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Projectiles) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Projectiles);
                try
                {
                    item.Projectiles.DeepCopyIn(
                        rhs: rhs.Projectiles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Projectiles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Hazards) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Hazards);
                try
                {
                    item.Hazards.DeepCopyIn(
                        rhs: rhs.Hazards,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Hazards));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoulGems) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoulGems);
                try
                {
                    item.SoulGems.DeepCopyIn(
                        rhs: rhs.SoulGems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoulGems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledItems) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledItems);
                try
                {
                    item.LeveledItems.DeepCopyIn(
                        rhs: rhs.LeveledItems,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledItems));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Weathers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Weathers);
                try
                {
                    item.Weathers.DeepCopyIn(
                        rhs: rhs.Weathers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Weathers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Climates) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Climates);
                try
                {
                    item.Climates.DeepCopyIn(
                        rhs: rhs.Climates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Climates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ShaderParticleGeometries) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ShaderParticleGeometries);
                try
                {
                    item.ShaderParticleGeometries.DeepCopyIn(
                        rhs: rhs.ShaderParticleGeometries,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ShaderParticleGeometries));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.VisualEffects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.VisualEffects);
                try
                {
                    item.VisualEffects.DeepCopyIn(
                        rhs: rhs.VisualEffects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.VisualEffects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Regions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Regions);
                try
                {
                    item.Regions.DeepCopyIn(
                        rhs: rhs.Regions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Regions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps);
                try
                {
                    item.NavigationMeshInfoMaps.DeepCopyIn(
                        rhs: rhs.NavigationMeshInfoMaps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Cells) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Cells);
                try
                {
                    item.Cells.DeepCopyIn(
                        rhs: rhs.Cells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Cells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Worldspaces) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Worldspaces);
                try
                {
                    item.Worldspaces.DeepCopyIn(
                        rhs: rhs.Worldspaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Worldspaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogTopics) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DialogTopics);
                try
                {
                    item.DialogTopics.DeepCopyIn(
                        rhs: rhs.DialogTopics,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DialogTopics));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Quests) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Quests);
                try
                {
                    item.Quests.DeepCopyIn(
                        rhs: rhs.Quests,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Quests));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.IdleAnimations) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.IdleAnimations);
                try
                {
                    item.IdleAnimations.DeepCopyIn(
                        rhs: rhs.IdleAnimations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.IdleAnimations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Packages) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Packages);
                try
                {
                    item.Packages.DeepCopyIn(
                        rhs: rhs.Packages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Packages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CombatStyles) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CombatStyles);
                try
                {
                    item.CombatStyles.DeepCopyIn(
                        rhs: rhs.CombatStyles,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CombatStyles));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LoadScreens) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LoadScreens);
                try
                {
                    item.LoadScreens.DeepCopyIn(
                        rhs: rhs.LoadScreens,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LoadScreens));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LeveledSpells) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LeveledSpells);
                try
                {
                    item.LeveledSpells.DeepCopyIn(
                        rhs: rhs.LeveledSpells,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LeveledSpells));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AnimatedObjects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AnimatedObjects);
                try
                {
                    item.AnimatedObjects.DeepCopyIn(
                        rhs: rhs.AnimatedObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AnimatedObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Waters) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Waters);
                try
                {
                    item.Waters.DeepCopyIn(
                        rhs: rhs.Waters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Waters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EffectShaders) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.EffectShaders);
                try
                {
                    item.EffectShaders.DeepCopyIn(
                        rhs: rhs.EffectShaders,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.EffectShaders));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Explosions) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Explosions);
                try
                {
                    item.Explosions.DeepCopyIn(
                        rhs: rhs.Explosions,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Explosions));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Debris) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Debris);
                try
                {
                    item.Debris.DeepCopyIn(
                        rhs: rhs.Debris,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Debris));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImageSpaces) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ImageSpaces);
                try
                {
                    item.ImageSpaces.DeepCopyIn(
                        rhs: rhs.ImageSpaces,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ImageSpaces));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImageSpaceAdapters) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ImageSpaceAdapters);
                try
                {
                    item.ImageSpaceAdapters.DeepCopyIn(
                        rhs: rhs.ImageSpaceAdapters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ImageSpaceAdapters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.FormLists) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.FormLists);
                try
                {
                    item.FormLists.DeepCopyIn(
                        rhs: rhs.FormLists,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.FormLists));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Perks) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Perks);
                try
                {
                    item.Perks.DeepCopyIn(
                        rhs: rhs.Perks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Perks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.BodyParts) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.BodyParts);
                try
                {
                    item.BodyParts.DeepCopyIn(
                        rhs: rhs.BodyParts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.BodyParts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AddonNodes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AddonNodes);
                try
                {
                    item.AddonNodes.DeepCopyIn(
                        rhs: rhs.AddonNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AddonNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ActorValueInformation) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ActorValueInformation);
                try
                {
                    item.ActorValueInformation.DeepCopyIn(
                        rhs: rhs.ActorValueInformation,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ActorValueInformation));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CameraShots) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CameraShots);
                try
                {
                    item.CameraShots.DeepCopyIn(
                        rhs: rhs.CameraShots,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CameraShots));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CameraPaths) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CameraPaths);
                try
                {
                    item.CameraPaths.DeepCopyIn(
                        rhs: rhs.CameraPaths,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CameraPaths));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.VoiceTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.VoiceTypes);
                try
                {
                    item.VoiceTypes.DeepCopyIn(
                        rhs: rhs.VoiceTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.VoiceTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MaterialTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MaterialTypes);
                try
                {
                    item.MaterialTypes.DeepCopyIn(
                        rhs: rhs.MaterialTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MaterialTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Impacts) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Impacts);
                try
                {
                    item.Impacts.DeepCopyIn(
                        rhs: rhs.Impacts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Impacts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ImpactDataSets) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ImpactDataSets);
                try
                {
                    item.ImpactDataSets.DeepCopyIn(
                        rhs: rhs.ImpactDataSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ImpactDataSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ArmorAddons) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ArmorAddons);
                try
                {
                    item.ArmorAddons.DeepCopyIn(
                        rhs: rhs.ArmorAddons,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ArmorAddons));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EncounterZones) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.EncounterZones);
                try
                {
                    item.EncounterZones.DeepCopyIn(
                        rhs: rhs.EncounterZones,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.EncounterZones));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Locations) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Locations);
                try
                {
                    item.Locations.DeepCopyIn(
                        rhs: rhs.Locations,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Locations));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Messages) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Messages);
                try
                {
                    item.Messages.DeepCopyIn(
                        rhs: rhs.Messages,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Messages));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DefaultObjectManagers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DefaultObjectManagers);
                try
                {
                    item.DefaultObjectManagers.DeepCopyIn(
                        rhs: rhs.DefaultObjectManagers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DefaultObjectManagers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LightingTemplates) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LightingTemplates);
                try
                {
                    item.LightingTemplates.DeepCopyIn(
                        rhs: rhs.LightingTemplates,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LightingTemplates));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MusicTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MusicTypes);
                try
                {
                    item.MusicTypes.DeepCopyIn(
                        rhs: rhs.MusicTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MusicTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Footsteps) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Footsteps);
                try
                {
                    item.Footsteps.DeepCopyIn(
                        rhs: rhs.Footsteps,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Footsteps));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.FootstepSets) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.FootstepSets);
                try
                {
                    item.FootstepSets.DeepCopyIn(
                        rhs: rhs.FootstepSets,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.FootstepSets));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerBranchNodes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.StoryManagerBranchNodes);
                try
                {
                    item.StoryManagerBranchNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerBranchNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.StoryManagerBranchNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerQuestNodes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.StoryManagerQuestNodes);
                try
                {
                    item.StoryManagerQuestNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerQuestNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.StoryManagerQuestNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.StoryManagerEventNodes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.StoryManagerEventNodes);
                try
                {
                    item.StoryManagerEventNodes.DeepCopyIn(
                        rhs: rhs.StoryManagerEventNodes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.StoryManagerEventNodes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogBranches) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DialogBranches);
                try
                {
                    item.DialogBranches.DeepCopyIn(
                        rhs: rhs.DialogBranches,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DialogBranches));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MusicTracks) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MusicTracks);
                try
                {
                    item.MusicTracks.DeepCopyIn(
                        rhs: rhs.MusicTracks,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MusicTracks));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DialogViews) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DialogViews);
                try
                {
                    item.DialogViews.DeepCopyIn(
                        rhs: rhs.DialogViews,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DialogViews));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.WordsOfPower) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.WordsOfPower);
                try
                {
                    item.WordsOfPower.DeepCopyIn(
                        rhs: rhs.WordsOfPower,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.WordsOfPower));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Shouts) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Shouts);
                try
                {
                    item.Shouts.DeepCopyIn(
                        rhs: rhs.Shouts,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Shouts));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.EquipTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.EquipTypes);
                try
                {
                    item.EquipTypes.DeepCopyIn(
                        rhs: rhs.EquipTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.EquipTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Relationships) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Relationships);
                try
                {
                    item.Relationships.DeepCopyIn(
                        rhs: rhs.Relationships,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Relationships));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Scenes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Scenes);
                try
                {
                    item.Scenes.DeepCopyIn(
                        rhs: rhs.Scenes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Scenes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.AssociationTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.AssociationTypes);
                try
                {
                    item.AssociationTypes.DeepCopyIn(
                        rhs: rhs.AssociationTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.AssociationTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Outfits) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Outfits);
                try
                {
                    item.Outfits.DeepCopyIn(
                        rhs: rhs.Outfits,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Outfits));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ArtObjects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ArtObjects);
                try
                {
                    item.ArtObjects.DeepCopyIn(
                        rhs: rhs.ArtObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ArtObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MaterialObjects) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MaterialObjects);
                try
                {
                    item.MaterialObjects.DeepCopyIn(
                        rhs: rhs.MaterialObjects,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MaterialObjects));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.MovementTypes) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.MovementTypes);
                try
                {
                    item.MovementTypes.DeepCopyIn(
                        rhs: rhs.MovementTypes,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.MovementTypes));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundDescriptors) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundDescriptors);
                try
                {
                    item.SoundDescriptors.DeepCopyIn(
                        rhs: rhs.SoundDescriptors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundDescriptors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.DualCastData) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.DualCastData);
                try
                {
                    item.DualCastData.DeepCopyIn(
                        rhs: rhs.DualCastData,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.DualCastData));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundCategories) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundCategories);
                try
                {
                    item.SoundCategories.DeepCopyIn(
                        rhs: rhs.SoundCategories,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundCategories));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.SoundOutputModels) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.SoundOutputModels);
                try
                {
                    item.SoundOutputModels.DeepCopyIn(
                        rhs: rhs.SoundOutputModels,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.SoundOutputModels));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.CollisionLayers) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.CollisionLayers);
                try
                {
                    item.CollisionLayers.DeepCopyIn(
                        rhs: rhs.CollisionLayers,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.CollisionLayers));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.Colors) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.Colors);
                try
                {
                    item.Colors.DeepCopyIn(
                        rhs: rhs.Colors,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.Colors));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.ReverbParameters) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.ReverbParameters);
                try
                {
                    item.ReverbParameters.DeepCopyIn(
                        rhs: rhs.ReverbParameters,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.ReverbParameters));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.VolumetricLightings) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.VolumetricLightings);
                try
                {
                    item.VolumetricLightings.DeepCopyIn(
                        rhs: rhs.VolumetricLightings,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.VolumetricLightings));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SkyrimMod_FieldIndex.LensFlares) ?? true))
            {
                errorMask?.PushIndex((int)SkyrimMod_FieldIndex.LensFlares);
                try
                {
                    item.LensFlares.DeepCopyIn(
                        rhs: rhs.LensFlares,
                        errorMask: errorMask,
                        copyMask: copyMask?.GetSubCrystal((int)SkyrimMod_FieldIndex.LensFlares));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISkyrimMod item,
            ISkyrimModGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public partial SkyrimMod DeepCopyGetNew(ISkyrimModGetter item);
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            var ret = DeepCopyGetNew(item);
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            out SkyrimMod.ErrorMask errorMask,
            SkyrimMod.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            var ret = DeepCopyGetNew(item);
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SkyrimMod.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SkyrimMod DeepCopy(
            ISkyrimModGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            var ret = DeepCopyGetNew(item);
            ((SkyrimModSetterTranslationCommon)((ISkyrimModGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SkyrimMod
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SkyrimMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SkyrimModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return SkyrimModSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkyrimModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Mutagen
namespace Mutagen.Bethesda.Skyrim
{
    public class GroupMask
    {
        public bool GameSettings;
        public bool Keywords;
        public bool LocationReferenceTypes;
        public bool Actions;
        public bool TextureSets;
        public bool Globals;
        public bool Classes;
        public bool Factions;
        public bool HeadParts;
        public bool Hairs;
        public bool Eyes;
        public bool Races;
        public bool SoundMarkers;
        public bool AcousticSpaces;
        public bool MagicEffects;
        public bool LandscapeTextures;
        public bool ObjectEffects;
        public bool Spells;
        public bool Scrolls;
        public bool Activators;
        public bool TalkingActivators;
        public bool Armors;
        public bool Books;
        public bool Containers;
        public bool Doors;
        public bool Ingredients;
        public bool Lights;
        public bool MiscItems;
        public bool AlchemicalApparatuses;
        public bool Statics;
        public bool MoveableStatics;
        public bool Grasses;
        public bool Trees;
        public bool Florae;
        public bool Furniture;
        public bool Weapons;
        public bool Ammunitions;
        public bool Npcs;
        public bool LeveledNpcs;
        public bool Keys;
        public bool Ingestibles;
        public bool IdleMarkers;
        public bool ConstructibleObjects;
        public bool Projectiles;
        public bool Hazards;
        public bool SoulGems;
        public bool LeveledItems;
        public bool Weathers;
        public bool Climates;
        public bool ShaderParticleGeometries;
        public bool VisualEffects;
        public bool Regions;
        public bool NavigationMeshInfoMaps;
        public bool Cells;
        public bool Worldspaces;
        public bool DialogTopics;
        public bool Quests;
        public bool IdleAnimations;
        public bool Packages;
        public bool CombatStyles;
        public bool LoadScreens;
        public bool LeveledSpells;
        public bool AnimatedObjects;
        public bool Waters;
        public bool EffectShaders;
        public bool Explosions;
        public bool Debris;
        public bool ImageSpaces;
        public bool ImageSpaceAdapters;
        public bool FormLists;
        public bool Perks;
        public bool BodyParts;
        public bool AddonNodes;
        public bool ActorValueInformation;
        public bool CameraShots;
        public bool CameraPaths;
        public bool VoiceTypes;
        public bool MaterialTypes;
        public bool Impacts;
        public bool ImpactDataSets;
        public bool ArmorAddons;
        public bool EncounterZones;
        public bool Locations;
        public bool Messages;
        public bool DefaultObjectManagers;
        public bool LightingTemplates;
        public bool MusicTypes;
        public bool Footsteps;
        public bool FootstepSets;
        public bool StoryManagerBranchNodes;
        public bool StoryManagerQuestNodes;
        public bool StoryManagerEventNodes;
        public bool DialogBranches;
        public bool MusicTracks;
        public bool DialogViews;
        public bool WordsOfPower;
        public bool Shouts;
        public bool EquipTypes;
        public bool Relationships;
        public bool Scenes;
        public bool AssociationTypes;
        public bool Outfits;
        public bool ArtObjects;
        public bool MaterialObjects;
        public bool MovementTypes;
        public bool SoundDescriptors;
        public bool DualCastData;
        public bool SoundCategories;
        public bool SoundOutputModels;
        public bool CollisionLayers;
        public bool Colors;
        public bool ReverbParameters;
        public bool VolumetricLightings;
        public bool LensFlares;
        public GroupMask()
        {
        }
        public GroupMask(bool defaultValue)
        {
            GameSettings = defaultValue;
            Keywords = defaultValue;
            LocationReferenceTypes = defaultValue;
            Actions = defaultValue;
            TextureSets = defaultValue;
            Globals = defaultValue;
            Classes = defaultValue;
            Factions = defaultValue;
            HeadParts = defaultValue;
            Hairs = defaultValue;
            Eyes = defaultValue;
            Races = defaultValue;
            SoundMarkers = defaultValue;
            AcousticSpaces = defaultValue;
            MagicEffects = defaultValue;
            LandscapeTextures = defaultValue;
            ObjectEffects = defaultValue;
            Spells = defaultValue;
            Scrolls = defaultValue;
            Activators = defaultValue;
            TalkingActivators = defaultValue;
            Armors = defaultValue;
            Books = defaultValue;
            Containers = defaultValue;
            Doors = defaultValue;
            Ingredients = defaultValue;
            Lights = defaultValue;
            MiscItems = defaultValue;
            AlchemicalApparatuses = defaultValue;
            Statics = defaultValue;
            MoveableStatics = defaultValue;
            Grasses = defaultValue;
            Trees = defaultValue;
            Florae = defaultValue;
            Furniture = defaultValue;
            Weapons = defaultValue;
            Ammunitions = defaultValue;
            Npcs = defaultValue;
            LeveledNpcs = defaultValue;
            Keys = defaultValue;
            Ingestibles = defaultValue;
            IdleMarkers = defaultValue;
            ConstructibleObjects = defaultValue;
            Projectiles = defaultValue;
            Hazards = defaultValue;
            SoulGems = defaultValue;
            LeveledItems = defaultValue;
            Weathers = defaultValue;
            Climates = defaultValue;
            ShaderParticleGeometries = defaultValue;
            VisualEffects = defaultValue;
            Regions = defaultValue;
            NavigationMeshInfoMaps = defaultValue;
            Cells = defaultValue;
            Worldspaces = defaultValue;
            DialogTopics = defaultValue;
            Quests = defaultValue;
            IdleAnimations = defaultValue;
            Packages = defaultValue;
            CombatStyles = defaultValue;
            LoadScreens = defaultValue;
            LeveledSpells = defaultValue;
            AnimatedObjects = defaultValue;
            Waters = defaultValue;
            EffectShaders = defaultValue;
            Explosions = defaultValue;
            Debris = defaultValue;
            ImageSpaces = defaultValue;
            ImageSpaceAdapters = defaultValue;
            FormLists = defaultValue;
            Perks = defaultValue;
            BodyParts = defaultValue;
            AddonNodes = defaultValue;
            ActorValueInformation = defaultValue;
            CameraShots = defaultValue;
            CameraPaths = defaultValue;
            VoiceTypes = defaultValue;
            MaterialTypes = defaultValue;
            Impacts = defaultValue;
            ImpactDataSets = defaultValue;
            ArmorAddons = defaultValue;
            EncounterZones = defaultValue;
            Locations = defaultValue;
            Messages = defaultValue;
            DefaultObjectManagers = defaultValue;
            LightingTemplates = defaultValue;
            MusicTypes = defaultValue;
            Footsteps = defaultValue;
            FootstepSets = defaultValue;
            StoryManagerBranchNodes = defaultValue;
            StoryManagerQuestNodes = defaultValue;
            StoryManagerEventNodes = defaultValue;
            DialogBranches = defaultValue;
            MusicTracks = defaultValue;
            DialogViews = defaultValue;
            WordsOfPower = defaultValue;
            Shouts = defaultValue;
            EquipTypes = defaultValue;
            Relationships = defaultValue;
            Scenes = defaultValue;
            AssociationTypes = defaultValue;
            Outfits = defaultValue;
            ArtObjects = defaultValue;
            MaterialObjects = defaultValue;
            MovementTypes = defaultValue;
            SoundDescriptors = defaultValue;
            DualCastData = defaultValue;
            SoundCategories = defaultValue;
            SoundOutputModels = defaultValue;
            CollisionLayers = defaultValue;
            Colors = defaultValue;
            ReverbParameters = defaultValue;
            VolumetricLightings = defaultValue;
            LensFlares = defaultValue;
        }
    }

    public interface ISkyrimModDisposableGetter : ISkyrimModGetter, IModDisposeGetter
    {
    }

    /// <summary>
    /// Different game release versions a Skyrim mod can have
    /// </summary>
    public enum SkyrimRelease
    {
        SkyrimLE = 1,
        SkyrimSE = 2,
        SkyrimSEGog = 7,
        SkyrimVR = 3,
        EnderalLE = 5,
        EnderalSE = 6
    }

    public static class SkyrimReleaseExt
    {
        public static GameRelease ToGameRelease(this SkyrimRelease release)
        {
            return release switch
            {
                SkyrimRelease.SkyrimLE => GameRelease.SkyrimLE,
                SkyrimRelease.SkyrimSE => GameRelease.SkyrimSE,
                SkyrimRelease.SkyrimSEGog => GameRelease.SkyrimSEGog,
                SkyrimRelease.SkyrimVR => GameRelease.SkyrimVR,
                SkyrimRelease.EnderalLE => GameRelease.EnderalLE,
                SkyrimRelease.EnderalSE => GameRelease.EnderalSE,
                _ => throw new ArgumentException()
            };
        }

        public static SkyrimRelease ToSkyrimRelease(this GameRelease release)
        {
            return release switch
            {
                GameRelease.SkyrimLE => SkyrimRelease.SkyrimLE,
                GameRelease.SkyrimSE => SkyrimRelease.SkyrimSE,
                GameRelease.SkyrimSEGog => SkyrimRelease.SkyrimSEGog,
                GameRelease.SkyrimVR => SkyrimRelease.SkyrimVR,
                GameRelease.EnderalLE => SkyrimRelease.EnderalLE,
                GameRelease.EnderalSE => SkyrimRelease.EnderalSE,
                _ => throw new ArgumentException()
            };
        }
    }
}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class SkyrimMod_Registration : IModRegistration
    {
        public GameCategory GameCategory => GameCategory.Skyrim;
    }

}
#endregion

#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class SkyrimModBinaryWriteTranslation
    {
        public static readonly SkyrimModBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISkyrimModGetter item,
            MutagenWriter writer,
            GroupMask? importMask,
            TypedWriteParams translationParams = default)
        {
            if (importMask?.GameSettings ?? true)
            {
                var GameSettingsItem = item.GameSettings;
                if (GameSettingsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)GameSettingsItem).BinaryWriteTranslator).Write<IGameSettingGetter>(
                        item: GameSettingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Keywords ?? true)
            {
                var KeywordsItem = item.Keywords;
                if (KeywordsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)KeywordsItem).BinaryWriteTranslator).Write<IKeywordGetter>(
                        item: KeywordsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LocationReferenceTypes ?? true)
            {
                var LocationReferenceTypesItem = item.LocationReferenceTypes;
                if (LocationReferenceTypesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)LocationReferenceTypesItem).BinaryWriteTranslator).Write<ILocationReferenceTypeGetter>(
                        item: LocationReferenceTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Actions ?? true)
            {
                var ActionsItem = item.Actions;
                if (ActionsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ActionsItem).BinaryWriteTranslator).Write<IActionRecordGetter>(
                        item: ActionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.TextureSets ?? true)
            {
                var TextureSetsItem = item.TextureSets;
                if (TextureSetsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)TextureSetsItem).BinaryWriteTranslator).Write<ITextureSetGetter>(
                        item: TextureSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Globals ?? true)
            {
                var GlobalsItem = item.Globals;
                if (GlobalsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)GlobalsItem).BinaryWriteTranslator).Write<IGlobalGetter>(
                        item: GlobalsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Classes ?? true)
            {
                var ClassesItem = item.Classes;
                if (ClassesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ClassesItem).BinaryWriteTranslator).Write<IClassGetter>(
                        item: ClassesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Factions ?? true)
            {
                var FactionsItem = item.Factions;
                if (FactionsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)FactionsItem).BinaryWriteTranslator).Write<IFactionGetter>(
                        item: FactionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.HeadParts ?? true)
            {
                var HeadPartsItem = item.HeadParts;
                if (HeadPartsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)HeadPartsItem).BinaryWriteTranslator).Write<IHeadPartGetter>(
                        item: HeadPartsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Hairs ?? true)
            {
                var HairsItem = item.Hairs;
                if (HairsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)HairsItem).BinaryWriteTranslator).Write<IHairGetter>(
                        item: HairsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Eyes ?? true)
            {
                var EyesItem = item.Eyes;
                if (EyesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)EyesItem).BinaryWriteTranslator).Write<IEyesGetter>(
                        item: EyesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Races ?? true)
            {
                var RacesItem = item.Races;
                if (RacesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)RacesItem).BinaryWriteTranslator).Write<IRaceGetter>(
                        item: RacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundMarkers ?? true)
            {
                var SoundMarkersItem = item.SoundMarkers;
                if (SoundMarkersItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)SoundMarkersItem).BinaryWriteTranslator).Write<ISoundMarkerGetter>(
                        item: SoundMarkersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AcousticSpaces ?? true)
            {
                var AcousticSpacesItem = item.AcousticSpaces;
                if (AcousticSpacesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)AcousticSpacesItem).BinaryWriteTranslator).Write<IAcousticSpaceGetter>(
                        item: AcousticSpacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MagicEffects ?? true)
            {
                var MagicEffectsItem = item.MagicEffects;
                if (MagicEffectsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)MagicEffectsItem).BinaryWriteTranslator).Write<IMagicEffectGetter>(
                        item: MagicEffectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LandscapeTextures ?? true)
            {
                var LandscapeTexturesItem = item.LandscapeTextures;
                if (LandscapeTexturesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)LandscapeTexturesItem).BinaryWriteTranslator).Write<ILandscapeTextureGetter>(
                        item: LandscapeTexturesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ObjectEffects ?? true)
            {
                var ObjectEffectsItem = item.ObjectEffects;
                if (ObjectEffectsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ObjectEffectsItem).BinaryWriteTranslator).Write<IObjectEffectGetter>(
                        item: ObjectEffectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Spells ?? true)
            {
                var SpellsItem = item.Spells;
                if (SpellsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)SpellsItem).BinaryWriteTranslator).Write<ISpellGetter>(
                        item: SpellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Scrolls ?? true)
            {
                var ScrollsItem = item.Scrolls;
                if (ScrollsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ScrollsItem).BinaryWriteTranslator).Write<IScrollGetter>(
                        item: ScrollsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Activators ?? true)
            {
                var ActivatorsItem = item.Activators;
                if (ActivatorsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ActivatorsItem).BinaryWriteTranslator).Write<IActivatorGetter>(
                        item: ActivatorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.TalkingActivators ?? true)
            {
                var TalkingActivatorsItem = item.TalkingActivators;
                if (TalkingActivatorsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)TalkingActivatorsItem).BinaryWriteTranslator).Write<ITalkingActivatorGetter>(
                        item: TalkingActivatorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Armors ?? true)
            {
                var ArmorsItem = item.Armors;
                if (ArmorsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ArmorsItem).BinaryWriteTranslator).Write<IArmorGetter>(
                        item: ArmorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Books ?? true)
            {
                var BooksItem = item.Books;
                if (BooksItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)BooksItem).BinaryWriteTranslator).Write<IBookGetter>(
                        item: BooksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Containers ?? true)
            {
                var ContainersItem = item.Containers;
                if (ContainersItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ContainersItem).BinaryWriteTranslator).Write<IContainerGetter>(
                        item: ContainersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Doors ?? true)
            {
                var DoorsItem = item.Doors;
                if (DoorsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)DoorsItem).BinaryWriteTranslator).Write<IDoorGetter>(
                        item: DoorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Ingredients ?? true)
            {
                var IngredientsItem = item.Ingredients;
                if (IngredientsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)IngredientsItem).BinaryWriteTranslator).Write<IIngredientGetter>(
                        item: IngredientsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Lights ?? true)
            {
                var LightsItem = item.Lights;
                if (LightsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)LightsItem).BinaryWriteTranslator).Write<ILightGetter>(
                        item: LightsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MiscItems ?? true)
            {
                var MiscItemsItem = item.MiscItems;
                if (MiscItemsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)MiscItemsItem).BinaryWriteTranslator).Write<IMiscItemGetter>(
                        item: MiscItemsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AlchemicalApparatuses ?? true)
            {
                var AlchemicalApparatusesItem = item.AlchemicalApparatuses;
                if (AlchemicalApparatusesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)AlchemicalApparatusesItem).BinaryWriteTranslator).Write<IAlchemicalApparatusGetter>(
                        item: AlchemicalApparatusesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Statics ?? true)
            {
                var StaticsItem = item.Statics;
                if (StaticsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)StaticsItem).BinaryWriteTranslator).Write<IStaticGetter>(
                        item: StaticsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MoveableStatics ?? true)
            {
                var MoveableStaticsItem = item.MoveableStatics;
                if (MoveableStaticsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)MoveableStaticsItem).BinaryWriteTranslator).Write<IMoveableStaticGetter>(
                        item: MoveableStaticsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Grasses ?? true)
            {
                var GrassesItem = item.Grasses;
                if (GrassesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)GrassesItem).BinaryWriteTranslator).Write<IGrassGetter>(
                        item: GrassesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Trees ?? true)
            {
                var TreesItem = item.Trees;
                if (TreesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)TreesItem).BinaryWriteTranslator).Write<ITreeGetter>(
                        item: TreesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Florae ?? true)
            {
                var FloraeItem = item.Florae;
                if (FloraeItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)FloraeItem).BinaryWriteTranslator).Write<IFloraGetter>(
                        item: FloraeItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Furniture ?? true)
            {
                var FurnitureItem = item.Furniture;
                if (FurnitureItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)FurnitureItem).BinaryWriteTranslator).Write<IFurnitureGetter>(
                        item: FurnitureItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Weapons ?? true)
            {
                var WeaponsItem = item.Weapons;
                if (WeaponsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)WeaponsItem).BinaryWriteTranslator).Write<IWeaponGetter>(
                        item: WeaponsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Ammunitions ?? true)
            {
                var AmmunitionsItem = item.Ammunitions;
                if (AmmunitionsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)AmmunitionsItem).BinaryWriteTranslator).Write<IAmmunitionGetter>(
                        item: AmmunitionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Npcs ?? true)
            {
                var NpcsItem = item.Npcs;
                if (NpcsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)NpcsItem).BinaryWriteTranslator).Write<INpcGetter>(
                        item: NpcsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledNpcs ?? true)
            {
                var LeveledNpcsItem = item.LeveledNpcs;
                if (LeveledNpcsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)LeveledNpcsItem).BinaryWriteTranslator).Write<ILeveledNpcGetter>(
                        item: LeveledNpcsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Keys ?? true)
            {
                var KeysItem = item.Keys;
                if (KeysItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)KeysItem).BinaryWriteTranslator).Write<IKeyGetter>(
                        item: KeysItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Ingestibles ?? true)
            {
                var IngestiblesItem = item.Ingestibles;
                if (IngestiblesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)IngestiblesItem).BinaryWriteTranslator).Write<IIngestibleGetter>(
                        item: IngestiblesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.IdleMarkers ?? true)
            {
                var IdleMarkersItem = item.IdleMarkers;
                if (IdleMarkersItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)IdleMarkersItem).BinaryWriteTranslator).Write<IIdleMarkerGetter>(
                        item: IdleMarkersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ConstructibleObjects ?? true)
            {
                var ConstructibleObjectsItem = item.ConstructibleObjects;
                if (ConstructibleObjectsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ConstructibleObjectsItem).BinaryWriteTranslator).Write<IConstructibleObjectGetter>(
                        item: ConstructibleObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Projectiles ?? true)
            {
                var ProjectilesItem = item.Projectiles;
                if (ProjectilesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ProjectilesItem).BinaryWriteTranslator).Write<IProjectileGetter>(
                        item: ProjectilesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Hazards ?? true)
            {
                var HazardsItem = item.Hazards;
                if (HazardsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)HazardsItem).BinaryWriteTranslator).Write<IHazardGetter>(
                        item: HazardsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoulGems ?? true)
            {
                var SoulGemsItem = item.SoulGems;
                if (SoulGemsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)SoulGemsItem).BinaryWriteTranslator).Write<ISoulGemGetter>(
                        item: SoulGemsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledItems ?? true)
            {
                var LeveledItemsItem = item.LeveledItems;
                if (LeveledItemsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)LeveledItemsItem).BinaryWriteTranslator).Write<ILeveledItemGetter>(
                        item: LeveledItemsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Weathers ?? true)
            {
                var WeathersItem = item.Weathers;
                if (WeathersItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)WeathersItem).BinaryWriteTranslator).Write<IWeatherGetter>(
                        item: WeathersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Climates ?? true)
            {
                var ClimatesItem = item.Climates;
                if (ClimatesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ClimatesItem).BinaryWriteTranslator).Write<IClimateGetter>(
                        item: ClimatesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ShaderParticleGeometries ?? true)
            {
                var ShaderParticleGeometriesItem = item.ShaderParticleGeometries;
                if (ShaderParticleGeometriesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ShaderParticleGeometriesItem).BinaryWriteTranslator).Write<IShaderParticleGeometryGetter>(
                        item: ShaderParticleGeometriesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.VisualEffects ?? true)
            {
                var VisualEffectsItem = item.VisualEffects;
                if (VisualEffectsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)VisualEffectsItem).BinaryWriteTranslator).Write<IVisualEffectGetter>(
                        item: VisualEffectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Regions ?? true)
            {
                var RegionsItem = item.Regions;
                if (RegionsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)RegionsItem).BinaryWriteTranslator).Write<IRegionGetter>(
                        item: RegionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.NavigationMeshInfoMaps ?? true)
            {
                var NavigationMeshInfoMapsItem = item.NavigationMeshInfoMaps;
                if (NavigationMeshInfoMapsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)NavigationMeshInfoMapsItem).BinaryWriteTranslator).Write<INavigationMeshInfoMapGetter>(
                        item: NavigationMeshInfoMapsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Cells ?? true)
            {
                var CellsItem = item.Cells;
                if (CellsItem.Records.Count > 0)
                {
                    ((SkyrimListGroupBinaryWriteTranslation)((IBinaryItem)CellsItem).BinaryWriteTranslator).Write<ICellBlockGetter>(
                        item: CellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Worldspaces ?? true)
            {
                var WorldspacesItem = item.Worldspaces;
                if (WorldspacesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)WorldspacesItem).BinaryWriteTranslator).Write<IWorldspaceGetter>(
                        item: WorldspacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DialogTopics ?? true)
            {
                var DialogTopicsItem = item.DialogTopics;
                if (DialogTopicsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)DialogTopicsItem).BinaryWriteTranslator).Write<IDialogTopicGetter>(
                        item: DialogTopicsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Quests ?? true)
            {
                var QuestsItem = item.Quests;
                if (QuestsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)QuestsItem).BinaryWriteTranslator).Write<IQuestGetter>(
                        item: QuestsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.IdleAnimations ?? true)
            {
                var IdleAnimationsItem = item.IdleAnimations;
                if (IdleAnimationsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)IdleAnimationsItem).BinaryWriteTranslator).Write<IIdleAnimationGetter>(
                        item: IdleAnimationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Packages ?? true)
            {
                var PackagesItem = item.Packages;
                if (PackagesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)PackagesItem).BinaryWriteTranslator).Write<IPackageGetter>(
                        item: PackagesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CombatStyles ?? true)
            {
                var CombatStylesItem = item.CombatStyles;
                if (CombatStylesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)CombatStylesItem).BinaryWriteTranslator).Write<ICombatStyleGetter>(
                        item: CombatStylesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LoadScreens ?? true)
            {
                var LoadScreensItem = item.LoadScreens;
                if (LoadScreensItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)LoadScreensItem).BinaryWriteTranslator).Write<ILoadScreenGetter>(
                        item: LoadScreensItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LeveledSpells ?? true)
            {
                var LeveledSpellsItem = item.LeveledSpells;
                if (LeveledSpellsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)LeveledSpellsItem).BinaryWriteTranslator).Write<ILeveledSpellGetter>(
                        item: LeveledSpellsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AnimatedObjects ?? true)
            {
                var AnimatedObjectsItem = item.AnimatedObjects;
                if (AnimatedObjectsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)AnimatedObjectsItem).BinaryWriteTranslator).Write<IAnimatedObjectGetter>(
                        item: AnimatedObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Waters ?? true)
            {
                var WatersItem = item.Waters;
                if (WatersItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)WatersItem).BinaryWriteTranslator).Write<IWaterGetter>(
                        item: WatersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.EffectShaders ?? true)
            {
                var EffectShadersItem = item.EffectShaders;
                if (EffectShadersItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)EffectShadersItem).BinaryWriteTranslator).Write<IEffectShaderGetter>(
                        item: EffectShadersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Explosions ?? true)
            {
                var ExplosionsItem = item.Explosions;
                if (ExplosionsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ExplosionsItem).BinaryWriteTranslator).Write<IExplosionGetter>(
                        item: ExplosionsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Debris ?? true)
            {
                var DebrisItem = item.Debris;
                if (DebrisItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)DebrisItem).BinaryWriteTranslator).Write<IDebrisGetter>(
                        item: DebrisItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ImageSpaces ?? true)
            {
                var ImageSpacesItem = item.ImageSpaces;
                if (ImageSpacesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ImageSpacesItem).BinaryWriteTranslator).Write<IImageSpaceGetter>(
                        item: ImageSpacesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ImageSpaceAdapters ?? true)
            {
                var ImageSpaceAdaptersItem = item.ImageSpaceAdapters;
                if (ImageSpaceAdaptersItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ImageSpaceAdaptersItem).BinaryWriteTranslator).Write<IImageSpaceAdapterGetter>(
                        item: ImageSpaceAdaptersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FormLists ?? true)
            {
                var FormListsItem = item.FormLists;
                if (FormListsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)FormListsItem).BinaryWriteTranslator).Write<IFormListGetter>(
                        item: FormListsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Perks ?? true)
            {
                var PerksItem = item.Perks;
                if (PerksItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)PerksItem).BinaryWriteTranslator).Write<IPerkGetter>(
                        item: PerksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.BodyParts ?? true)
            {
                var BodyPartsItem = item.BodyParts;
                if (BodyPartsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)BodyPartsItem).BinaryWriteTranslator).Write<IBodyPartDataGetter>(
                        item: BodyPartsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AddonNodes ?? true)
            {
                var AddonNodesItem = item.AddonNodes;
                if (AddonNodesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)AddonNodesItem).BinaryWriteTranslator).Write<IAddonNodeGetter>(
                        item: AddonNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ActorValueInformation ?? true)
            {
                var ActorValueInformationItem = item.ActorValueInformation;
                if (ActorValueInformationItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ActorValueInformationItem).BinaryWriteTranslator).Write<IActorValueInformationGetter>(
                        item: ActorValueInformationItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CameraShots ?? true)
            {
                var CameraShotsItem = item.CameraShots;
                if (CameraShotsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)CameraShotsItem).BinaryWriteTranslator).Write<ICameraShotGetter>(
                        item: CameraShotsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CameraPaths ?? true)
            {
                var CameraPathsItem = item.CameraPaths;
                if (CameraPathsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)CameraPathsItem).BinaryWriteTranslator).Write<ICameraPathGetter>(
                        item: CameraPathsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.VoiceTypes ?? true)
            {
                var VoiceTypesItem = item.VoiceTypes;
                if (VoiceTypesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)VoiceTypesItem).BinaryWriteTranslator).Write<IVoiceTypeGetter>(
                        item: VoiceTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MaterialTypes ?? true)
            {
                var MaterialTypesItem = item.MaterialTypes;
                if (MaterialTypesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)MaterialTypesItem).BinaryWriteTranslator).Write<IMaterialTypeGetter>(
                        item: MaterialTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Impacts ?? true)
            {
                var ImpactsItem = item.Impacts;
                if (ImpactsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ImpactsItem).BinaryWriteTranslator).Write<IImpactGetter>(
                        item: ImpactsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ImpactDataSets ?? true)
            {
                var ImpactDataSetsItem = item.ImpactDataSets;
                if (ImpactDataSetsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ImpactDataSetsItem).BinaryWriteTranslator).Write<IImpactDataSetGetter>(
                        item: ImpactDataSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ArmorAddons ?? true)
            {
                var ArmorAddonsItem = item.ArmorAddons;
                if (ArmorAddonsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ArmorAddonsItem).BinaryWriteTranslator).Write<IArmorAddonGetter>(
                        item: ArmorAddonsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.EncounterZones ?? true)
            {
                var EncounterZonesItem = item.EncounterZones;
                if (EncounterZonesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)EncounterZonesItem).BinaryWriteTranslator).Write<IEncounterZoneGetter>(
                        item: EncounterZonesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Locations ?? true)
            {
                var LocationsItem = item.Locations;
                if (LocationsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)LocationsItem).BinaryWriteTranslator).Write<ILocationGetter>(
                        item: LocationsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Messages ?? true)
            {
                var MessagesItem = item.Messages;
                if (MessagesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)MessagesItem).BinaryWriteTranslator).Write<IMessageGetter>(
                        item: MessagesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DefaultObjectManagers ?? true)
            {
                var DefaultObjectManagersItem = item.DefaultObjectManagers;
                if (DefaultObjectManagersItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)DefaultObjectManagersItem).BinaryWriteTranslator).Write<IDefaultObjectManagerGetter>(
                        item: DefaultObjectManagersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LightingTemplates ?? true)
            {
                var LightingTemplatesItem = item.LightingTemplates;
                if (LightingTemplatesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)LightingTemplatesItem).BinaryWriteTranslator).Write<ILightingTemplateGetter>(
                        item: LightingTemplatesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MusicTypes ?? true)
            {
                var MusicTypesItem = item.MusicTypes;
                if (MusicTypesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)MusicTypesItem).BinaryWriteTranslator).Write<IMusicTypeGetter>(
                        item: MusicTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Footsteps ?? true)
            {
                var FootstepsItem = item.Footsteps;
                if (FootstepsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)FootstepsItem).BinaryWriteTranslator).Write<IFootstepGetter>(
                        item: FootstepsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.FootstepSets ?? true)
            {
                var FootstepSetsItem = item.FootstepSets;
                if (FootstepSetsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)FootstepSetsItem).BinaryWriteTranslator).Write<IFootstepSetGetter>(
                        item: FootstepSetsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StoryManagerBranchNodes ?? true)
            {
                var StoryManagerBranchNodesItem = item.StoryManagerBranchNodes;
                if (StoryManagerBranchNodesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)StoryManagerBranchNodesItem).BinaryWriteTranslator).Write<IStoryManagerBranchNodeGetter>(
                        item: StoryManagerBranchNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StoryManagerQuestNodes ?? true)
            {
                var StoryManagerQuestNodesItem = item.StoryManagerQuestNodes;
                if (StoryManagerQuestNodesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)StoryManagerQuestNodesItem).BinaryWriteTranslator).Write<IStoryManagerQuestNodeGetter>(
                        item: StoryManagerQuestNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.StoryManagerEventNodes ?? true)
            {
                var StoryManagerEventNodesItem = item.StoryManagerEventNodes;
                if (StoryManagerEventNodesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)StoryManagerEventNodesItem).BinaryWriteTranslator).Write<IStoryManagerEventNodeGetter>(
                        item: StoryManagerEventNodesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DialogBranches ?? true)
            {
                var DialogBranchesItem = item.DialogBranches;
                if (DialogBranchesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)DialogBranchesItem).BinaryWriteTranslator).Write<IDialogBranchGetter>(
                        item: DialogBranchesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MusicTracks ?? true)
            {
                var MusicTracksItem = item.MusicTracks;
                if (MusicTracksItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)MusicTracksItem).BinaryWriteTranslator).Write<IMusicTrackGetter>(
                        item: MusicTracksItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DialogViews ?? true)
            {
                var DialogViewsItem = item.DialogViews;
                if (DialogViewsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)DialogViewsItem).BinaryWriteTranslator).Write<IDialogViewGetter>(
                        item: DialogViewsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.WordsOfPower ?? true)
            {
                var WordsOfPowerItem = item.WordsOfPower;
                if (WordsOfPowerItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)WordsOfPowerItem).BinaryWriteTranslator).Write<IWordOfPowerGetter>(
                        item: WordsOfPowerItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Shouts ?? true)
            {
                var ShoutsItem = item.Shouts;
                if (ShoutsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ShoutsItem).BinaryWriteTranslator).Write<IShoutGetter>(
                        item: ShoutsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.EquipTypes ?? true)
            {
                var EquipTypesItem = item.EquipTypes;
                if (EquipTypesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)EquipTypesItem).BinaryWriteTranslator).Write<IEquipTypeGetter>(
                        item: EquipTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Relationships ?? true)
            {
                var RelationshipsItem = item.Relationships;
                if (RelationshipsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)RelationshipsItem).BinaryWriteTranslator).Write<IRelationshipGetter>(
                        item: RelationshipsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Scenes ?? true)
            {
                var ScenesItem = item.Scenes;
                if (ScenesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ScenesItem).BinaryWriteTranslator).Write<ISceneGetter>(
                        item: ScenesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.AssociationTypes ?? true)
            {
                var AssociationTypesItem = item.AssociationTypes;
                if (AssociationTypesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)AssociationTypesItem).BinaryWriteTranslator).Write<IAssociationTypeGetter>(
                        item: AssociationTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Outfits ?? true)
            {
                var OutfitsItem = item.Outfits;
                if (OutfitsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)OutfitsItem).BinaryWriteTranslator).Write<IOutfitGetter>(
                        item: OutfitsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ArtObjects ?? true)
            {
                var ArtObjectsItem = item.ArtObjects;
                if (ArtObjectsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ArtObjectsItem).BinaryWriteTranslator).Write<IArtObjectGetter>(
                        item: ArtObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MaterialObjects ?? true)
            {
                var MaterialObjectsItem = item.MaterialObjects;
                if (MaterialObjectsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)MaterialObjectsItem).BinaryWriteTranslator).Write<IMaterialObjectGetter>(
                        item: MaterialObjectsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.MovementTypes ?? true)
            {
                var MovementTypesItem = item.MovementTypes;
                if (MovementTypesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)MovementTypesItem).BinaryWriteTranslator).Write<IMovementTypeGetter>(
                        item: MovementTypesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundDescriptors ?? true)
            {
                var SoundDescriptorsItem = item.SoundDescriptors;
                if (SoundDescriptorsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)SoundDescriptorsItem).BinaryWriteTranslator).Write<ISoundDescriptorGetter>(
                        item: SoundDescriptorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.DualCastData ?? true)
            {
                var DualCastDataItem = item.DualCastData;
                if (DualCastDataItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)DualCastDataItem).BinaryWriteTranslator).Write<IDualCastDataGetter>(
                        item: DualCastDataItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundCategories ?? true)
            {
                var SoundCategoriesItem = item.SoundCategories;
                if (SoundCategoriesItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)SoundCategoriesItem).BinaryWriteTranslator).Write<ISoundCategoryGetter>(
                        item: SoundCategoriesItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.SoundOutputModels ?? true)
            {
                var SoundOutputModelsItem = item.SoundOutputModels;
                if (SoundOutputModelsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)SoundOutputModelsItem).BinaryWriteTranslator).Write<ISoundOutputModelGetter>(
                        item: SoundOutputModelsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.CollisionLayers ?? true)
            {
                var CollisionLayersItem = item.CollisionLayers;
                if (CollisionLayersItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)CollisionLayersItem).BinaryWriteTranslator).Write<ICollisionLayerGetter>(
                        item: CollisionLayersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.Colors ?? true)
            {
                var ColorsItem = item.Colors;
                if (ColorsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ColorsItem).BinaryWriteTranslator).Write<IColorRecordGetter>(
                        item: ColorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.ReverbParameters ?? true)
            {
                var ReverbParametersItem = item.ReverbParameters;
                if (ReverbParametersItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)ReverbParametersItem).BinaryWriteTranslator).Write<IReverbParametersGetter>(
                        item: ReverbParametersItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.VolumetricLightings ?? true)
            {
                var VolumetricLightingsItem = item.VolumetricLightings;
                if (VolumetricLightingsItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)VolumetricLightingsItem).BinaryWriteTranslator).Write<IVolumetricLightingGetter>(
                        item: VolumetricLightingsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            if (importMask?.LensFlares ?? true)
            {
                var LensFlaresItem = item.LensFlares;
                if (LensFlaresItem.RecordCache.Count > 0)
                {
                    ((SkyrimGroupBinaryWriteTranslation)((IBinaryItem)LensFlaresItem).BinaryWriteTranslator).Write<ILensFlareGetter>(
                        item: LensFlaresItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ISkyrimModGetter item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            param ??= BinaryWriteParameters.Default;
            if (param.Parallel.MaxDegreeOfParallelism != 1)
            {
                SkyrimModCommon.WriteParallel(
                    item: item,
                    writer: writer,
                    param: param,
                    modKey: modKey);
                return;
            }
            ModHeaderWriteLogic.WriteHeader(
                param: param,
                writer: writer,
                mod: item,
                modHeader: item.ModHeader.DeepCopy(),
                modKey: modKey);
            WriteRecordTypes(
                item: item,
                writer: writer,
                importMask: importMask);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            ModKey modKey,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            Write(
                item: (ISkyrimModGetter)item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

    }

    internal partial class SkyrimModBinaryCreateTranslation
    {
        public static readonly SkyrimModBinaryCreateTranslation Instance = new SkyrimModBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ISkyrimMod item,
            MutagenFrame frame,
            RecordType nextRecordType,
            int contentLength,
            GroupMask? importMask,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    item.ModHeader.CopyInFromBinary(
                        frame: frame,
                        translationParams: null);
                    return (int)SkyrimMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    if (importMask?.GameSettings ?? true)
                    {
                        item.GameSettings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    if (importMask?.Keywords ?? true)
                    {
                        item.Keywords.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Keywords;
                }
                case RecordTypeInts.LCRT:
                {
                    if (importMask?.LocationReferenceTypes ?? true)
                    {
                        item.LocationReferenceTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    if (importMask?.Actions ?? true)
                    {
                        item.Actions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Actions;
                }
                case RecordTypeInts.TXST:
                {
                    if (importMask?.TextureSets ?? true)
                    {
                        item.TextureSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    if (importMask?.Globals ?? true)
                    {
                        item.Globals.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Globals;
                }
                case RecordTypeInts.CLAS:
                {
                    if (importMask?.Classes ?? true)
                    {
                        item.Classes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    if (importMask?.Factions ?? true)
                    {
                        item.Factions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Factions;
                }
                case RecordTypeInts.HDPT:
                {
                    if (importMask?.HeadParts ?? true)
                    {
                        item.HeadParts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HAIR:
                {
                    if (importMask?.Hairs ?? true)
                    {
                        item.Hairs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Hairs;
                }
                case RecordTypeInts.EYES:
                {
                    if (importMask?.Eyes ?? true)
                    {
                        item.Eyes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Eyes;
                }
                case RecordTypeInts.RACE:
                {
                    if (importMask?.Races ?? true)
                    {
                        item.Races.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    if (importMask?.SoundMarkers ?? true)
                    {
                        item.SoundMarkers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.SoundMarkers;
                }
                case RecordTypeInts.ASPC:
                {
                    if (importMask?.AcousticSpaces ?? true)
                    {
                        item.AcousticSpaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.AcousticSpaces;
                }
                case RecordTypeInts.MGEF:
                {
                    if (importMask?.MagicEffects ?? true)
                    {
                        item.MagicEffects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.LTEX:
                {
                    if (importMask?.LandscapeTextures ?? true)
                    {
                        item.LandscapeTextures.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LandscapeTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    if (importMask?.ObjectEffects ?? true)
                    {
                        item.ObjectEffects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ObjectEffects;
                }
                case RecordTypeInts.SPEL:
                {
                    if (importMask?.Spells ?? true)
                    {
                        item.Spells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Spells;
                }
                case RecordTypeInts.SCRL:
                {
                    if (importMask?.Scrolls ?? true)
                    {
                        item.Scrolls.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Scrolls;
                }
                case RecordTypeInts.ACTI:
                {
                    if (importMask?.Activators ?? true)
                    {
                        item.Activators.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Activators;
                }
                case RecordTypeInts.TACT:
                {
                    if (importMask?.TalkingActivators ?? true)
                    {
                        item.TalkingActivators.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.TalkingActivators;
                }
                case RecordTypeInts.ARMO:
                {
                    if (importMask?.Armors ?? true)
                    {
                        item.Armors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    if (importMask?.Books ?? true)
                    {
                        item.Books.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Books;
                }
                case RecordTypeInts.CONT:
                {
                    if (importMask?.Containers ?? true)
                    {
                        item.Containers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    if (importMask?.Doors ?? true)
                    {
                        item.Doors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    if (importMask?.Ingredients ?? true)
                    {
                        item.Ingredients.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    if (importMask?.Lights ?? true)
                    {
                        item.Lights.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    if (importMask?.MiscItems ?? true)
                    {
                        item.MiscItems.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MiscItems;
                }
                case RecordTypeInts.APPA:
                {
                    if (importMask?.AlchemicalApparatuses ?? true)
                    {
                        item.AlchemicalApparatuses.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.AlchemicalApparatuses;
                }
                case RecordTypeInts.STAT:
                {
                    if (importMask?.Statics ?? true)
                    {
                        item.Statics.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Statics;
                }
                case RecordTypeInts.MSTT:
                {
                    if (importMask?.MoveableStatics ?? true)
                    {
                        item.MoveableStatics.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MoveableStatics;
                }
                case RecordTypeInts.GRAS:
                {
                    if (importMask?.Grasses ?? true)
                    {
                        item.Grasses.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    if (importMask?.Trees ?? true)
                    {
                        item.Trees.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    if (importMask?.Florae ?? true)
                    {
                        item.Florae.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Florae;
                }
                case RecordTypeInts.FURN:
                {
                    if (importMask?.Furniture ?? true)
                    {
                        item.Furniture.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    if (importMask?.Weapons ?? true)
                    {
                        item.Weapons.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    if (importMask?.Ammunitions ?? true)
                    {
                        item.Ammunitions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    if (importMask?.Npcs ?? true)
                    {
                        item.Npcs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.LVLN:
                {
                    if (importMask?.LeveledNpcs ?? true)
                    {
                        item.LeveledNpcs.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LeveledNpcs;
                }
                case RecordTypeInts.KEYM:
                {
                    if (importMask?.Keys ?? true)
                    {
                        item.Keys.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    if (importMask?.Ingestibles ?? true)
                    {
                        item.Ingestibles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Ingestibles;
                }
                case RecordTypeInts.IDLM:
                {
                    if (importMask?.IdleMarkers ?? true)
                    {
                        item.IdleMarkers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.IdleMarkers;
                }
                case RecordTypeInts.COBJ:
                {
                    if (importMask?.ConstructibleObjects ?? true)
                    {
                        item.ConstructibleObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ConstructibleObjects;
                }
                case RecordTypeInts.PROJ:
                {
                    if (importMask?.Projectiles ?? true)
                    {
                        item.Projectiles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Projectiles;
                }
                case RecordTypeInts.HAZD:
                {
                    if (importMask?.Hazards ?? true)
                    {
                        item.Hazards.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Hazards;
                }
                case RecordTypeInts.SLGM:
                {
                    if (importMask?.SoulGems ?? true)
                    {
                        item.SoulGems.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.SoulGems;
                }
                case RecordTypeInts.LVLI:
                {
                    if (importMask?.LeveledItems ?? true)
                    {
                        item.LeveledItems.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    if (importMask?.Weathers ?? true)
                    {
                        item.Weathers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Weathers;
                }
                case RecordTypeInts.CLMT:
                {
                    if (importMask?.Climates ?? true)
                    {
                        item.Climates.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Climates;
                }
                case RecordTypeInts.SPGD:
                {
                    if (importMask?.ShaderParticleGeometries ?? true)
                    {
                        item.ShaderParticleGeometries.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ShaderParticleGeometries;
                }
                case RecordTypeInts.RFCT:
                {
                    if (importMask?.VisualEffects ?? true)
                    {
                        item.VisualEffects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.VisualEffects;
                }
                case RecordTypeInts.REGN:
                {
                    if (importMask?.Regions ?? true)
                    {
                        item.Regions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Regions;
                }
                case RecordTypeInts.NAVI:
                {
                    if (importMask?.NavigationMeshInfoMaps ?? true)
                    {
                        item.NavigationMeshInfoMaps.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps;
                }
                case RecordTypeInts.CELL:
                {
                    if (importMask?.Cells ?? true)
                    {
                        item.Cells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    if (importMask?.Worldspaces ?? true)
                    {
                        item.Worldspaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.DIAL:
                {
                    if (importMask?.DialogTopics ?? true)
                    {
                        item.DialogTopics.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.DialogTopics;
                }
                case RecordTypeInts.QUST:
                {
                    if (importMask?.Quests ?? true)
                    {
                        item.Quests.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    if (importMask?.IdleAnimations ?? true)
                    {
                        item.IdleAnimations.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    if (importMask?.Packages ?? true)
                    {
                        item.Packages.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Packages;
                }
                case RecordTypeInts.CSTY:
                {
                    if (importMask?.CombatStyles ?? true)
                    {
                        item.CombatStyles.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    if (importMask?.LoadScreens ?? true)
                    {
                        item.LoadScreens.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.LVSP:
                {
                    if (importMask?.LeveledSpells ?? true)
                    {
                        item.LeveledSpells.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LeveledSpells;
                }
                case RecordTypeInts.ANIO:
                {
                    if (importMask?.AnimatedObjects ?? true)
                    {
                        item.AnimatedObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    if (importMask?.Waters ?? true)
                    {
                        item.Waters.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    if (importMask?.EffectShaders ?? true)
                    {
                        item.EffectShaders.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.EffectShaders;
                }
                case RecordTypeInts.EXPL:
                {
                    if (importMask?.Explosions ?? true)
                    {
                        item.Explosions.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Explosions;
                }
                case RecordTypeInts.DEBR:
                {
                    if (importMask?.Debris ?? true)
                    {
                        item.Debris.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Debris;
                }
                case RecordTypeInts.IMGS:
                {
                    if (importMask?.ImageSpaces ?? true)
                    {
                        item.ImageSpaces.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.IMAD:
                {
                    if (importMask?.ImageSpaceAdapters ?? true)
                    {
                        item.ImageSpaceAdapters.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ImageSpaceAdapters;
                }
                case RecordTypeInts.FLST:
                {
                    if (importMask?.FormLists ?? true)
                    {
                        item.FormLists.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.FormLists;
                }
                case RecordTypeInts.PERK:
                {
                    if (importMask?.Perks ?? true)
                    {
                        item.Perks.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Perks;
                }
                case RecordTypeInts.BPTD:
                {
                    if (importMask?.BodyParts ?? true)
                    {
                        item.BodyParts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.BodyParts;
                }
                case RecordTypeInts.ADDN:
                {
                    if (importMask?.AddonNodes ?? true)
                    {
                        item.AddonNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.AddonNodes;
                }
                case RecordTypeInts.AVIF:
                {
                    if (importMask?.ActorValueInformation ?? true)
                    {
                        item.ActorValueInformation.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ActorValueInformation;
                }
                case RecordTypeInts.CAMS:
                {
                    if (importMask?.CameraShots ?? true)
                    {
                        item.CameraShots.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.CameraShots;
                }
                case RecordTypeInts.CPTH:
                {
                    if (importMask?.CameraPaths ?? true)
                    {
                        item.CameraPaths.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.CameraPaths;
                }
                case RecordTypeInts.VTYP:
                {
                    if (importMask?.VoiceTypes ?? true)
                    {
                        item.VoiceTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.MATT:
                {
                    if (importMask?.MaterialTypes ?? true)
                    {
                        item.MaterialTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MaterialTypes;
                }
                case RecordTypeInts.IPCT:
                {
                    if (importMask?.Impacts ?? true)
                    {
                        item.Impacts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Impacts;
                }
                case RecordTypeInts.IPDS:
                {
                    if (importMask?.ImpactDataSets ?? true)
                    {
                        item.ImpactDataSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ImpactDataSets;
                }
                case RecordTypeInts.ARMA:
                {
                    if (importMask?.ArmorAddons ?? true)
                    {
                        item.ArmorAddons.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ArmorAddons;
                }
                case RecordTypeInts.ECZN:
                {
                    if (importMask?.EncounterZones ?? true)
                    {
                        item.EncounterZones.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.EncounterZones;
                }
                case RecordTypeInts.LCTN:
                {
                    if (importMask?.Locations ?? true)
                    {
                        item.Locations.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Locations;
                }
                case RecordTypeInts.MESG:
                {
                    if (importMask?.Messages ?? true)
                    {
                        item.Messages.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Messages;
                }
                case RecordTypeInts.DOBJ:
                {
                    if (importMask?.DefaultObjectManagers ?? true)
                    {
                        item.DefaultObjectManagers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.DefaultObjectManagers;
                }
                case RecordTypeInts.LGTM:
                {
                    if (importMask?.LightingTemplates ?? true)
                    {
                        item.LightingTemplates.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LightingTemplates;
                }
                case RecordTypeInts.MUSC:
                {
                    if (importMask?.MusicTypes ?? true)
                    {
                        item.MusicTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MusicTypes;
                }
                case RecordTypeInts.FSTP:
                {
                    if (importMask?.Footsteps ?? true)
                    {
                        item.Footsteps.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Footsteps;
                }
                case RecordTypeInts.FSTS:
                {
                    if (importMask?.FootstepSets ?? true)
                    {
                        item.FootstepSets.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.FootstepSets;
                }
                case RecordTypeInts.SMBN:
                {
                    if (importMask?.StoryManagerBranchNodes ?? true)
                    {
                        item.StoryManagerBranchNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.StoryManagerBranchNodes;
                }
                case RecordTypeInts.SMQN:
                {
                    if (importMask?.StoryManagerQuestNodes ?? true)
                    {
                        item.StoryManagerQuestNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.StoryManagerQuestNodes;
                }
                case RecordTypeInts.SMEN:
                {
                    if (importMask?.StoryManagerEventNodes ?? true)
                    {
                        item.StoryManagerEventNodes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.StoryManagerEventNodes;
                }
                case RecordTypeInts.DLBR:
                {
                    if (importMask?.DialogBranches ?? true)
                    {
                        item.DialogBranches.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.DialogBranches;
                }
                case RecordTypeInts.MUST:
                {
                    if (importMask?.MusicTracks ?? true)
                    {
                        item.MusicTracks.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MusicTracks;
                }
                case RecordTypeInts.DLVW:
                {
                    if (importMask?.DialogViews ?? true)
                    {
                        item.DialogViews.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.DialogViews;
                }
                case RecordTypeInts.WOOP:
                {
                    if (importMask?.WordsOfPower ?? true)
                    {
                        item.WordsOfPower.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.WordsOfPower;
                }
                case RecordTypeInts.SHOU:
                {
                    if (importMask?.Shouts ?? true)
                    {
                        item.Shouts.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Shouts;
                }
                case RecordTypeInts.EQUP:
                {
                    if (importMask?.EquipTypes ?? true)
                    {
                        item.EquipTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.EquipTypes;
                }
                case RecordTypeInts.RELA:
                {
                    if (importMask?.Relationships ?? true)
                    {
                        item.Relationships.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Relationships;
                }
                case RecordTypeInts.SCEN:
                {
                    if (importMask?.Scenes ?? true)
                    {
                        item.Scenes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Scenes;
                }
                case RecordTypeInts.ASTP:
                {
                    if (importMask?.AssociationTypes ?? true)
                    {
                        item.AssociationTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.AssociationTypes;
                }
                case RecordTypeInts.OTFT:
                {
                    if (importMask?.Outfits ?? true)
                    {
                        item.Outfits.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Outfits;
                }
                case RecordTypeInts.ARTO:
                {
                    if (importMask?.ArtObjects ?? true)
                    {
                        item.ArtObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ArtObjects;
                }
                case RecordTypeInts.MATO:
                {
                    if (importMask?.MaterialObjects ?? true)
                    {
                        item.MaterialObjects.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MaterialObjects;
                }
                case RecordTypeInts.MOVT:
                {
                    if (importMask?.MovementTypes ?? true)
                    {
                        item.MovementTypes.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.SNDR:
                {
                    if (importMask?.SoundDescriptors ?? true)
                    {
                        item.SoundDescriptors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.SoundDescriptors;
                }
                case RecordTypeInts.DUAL:
                {
                    if (importMask?.DualCastData ?? true)
                    {
                        item.DualCastData.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.DualCastData;
                }
                case RecordTypeInts.SNCT:
                {
                    if (importMask?.SoundCategories ?? true)
                    {
                        item.SoundCategories.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.SoundCategories;
                }
                case RecordTypeInts.SOPM:
                {
                    if (importMask?.SoundOutputModels ?? true)
                    {
                        item.SoundOutputModels.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.SoundOutputModels;
                }
                case RecordTypeInts.COLL:
                {
                    if (importMask?.CollisionLayers ?? true)
                    {
                        item.CollisionLayers.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.CollisionLayers;
                }
                case RecordTypeInts.CLFM:
                {
                    if (importMask?.Colors ?? true)
                    {
                        item.Colors.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.Colors;
                }
                case RecordTypeInts.REVB:
                {
                    if (importMask?.ReverbParameters ?? true)
                    {
                        item.ReverbParameters.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.ReverbParameters;
                }
                case RecordTypeInts.VOLI:
                {
                    if (importMask?.VolumetricLightings ?? true)
                    {
                        item.VolumetricLightings.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.VolumetricLightings;
                }
                case RecordTypeInts.LENS:
                {
                    if (importMask?.LensFlares ?? true)
                    {
                        item.LensFlares.CopyInFromBinary(
                            frame: frame,
                            translationParams: null);
                    }
                    else
                    {
                        frame.Position += contentLength;
                    }
                    return (int)SkyrimMod_FieldIndex.LensFlares;
                }
                default:
                    frame.Position += contentLength;
                    return default(int?);
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SkyrimModBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ISkyrimModGetter item,
            MutagenWriter writer,
            GroupMask? importMask = null,
            BinaryWriteParameters? param = null)
        {
            var modKey = item.ModKey;
            SkyrimModBinaryWriteTranslation.Instance.Write(
                item: item,
                writer: writer,
                importMask: importMask,
                param: param,
                modKey: modKey);
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            FilePath path,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            param ??= BinaryWriteParameters.Default;
            var modKey = param.RunMasterMatch(
                mod: item,
                path: path);
            param = PluginUtilityTranslation.SetStringsWriter(item, param, path, modKey);
            var bundle = new WritingBundle(item.SkyrimRelease.ToGameRelease())
            {
                StringsWriter = param.StringsWriter,
                CleanNulls = param.CleanNulls,
                TargetLanguageOverride = param.TargetLanguageOverride,
                Header = item
            };
            if (param.Encodings != null)
            {
                bundle.Encodings = param.Encodings;
            }
            using var memStream = new MemoryTributary();
            using (var writer = new MutagenWriter(
                memStream,
                bundle,
                dispose: false))
            {
                SkyrimModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
            using (var fs = param.FileSystem.GetOrDefault().FileStream.New(path, FileMode.Create, FileAccess.Write))
            {
                memStream.Position = 0;
                memStream.CopyTo(fs);
            }
            param.StringsWriter?.Dispose();
        }

        public static void WriteToBinary(
            this ISkyrimModGetter item,
            Stream stream,
            BinaryWriteParameters? param = null,
            GroupMask? importMask = null)
        {
            var modKey = item.ModKey;
            using (var writer = new MutagenWriter(
                stream: stream,
                new WritingBundle(item.SkyrimRelease.ToGameRelease()),
                dispose: false))
            {
                SkyrimModBinaryWriteTranslation.Instance.Write(
                    item: item,
                    importMask: importMask,
                    writer: writer,
                    param: param,
                    modKey: modKey);
            }
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    [DebuggerDisplay("{GameRelease} {ModKey.ToString()}")]
    internal partial class SkyrimModBinaryOverlay : ISkyrimModDisposableGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SkyrimMod_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => SkyrimMod_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => SkyrimModCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => SkyrimModSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ISkyrimModGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ISkyrimModGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public SkyrimRelease SkyrimRelease { get; }
        public GameRelease GameRelease => SkyrimRelease.ToGameRelease();
        IGroupGetter<T>? IModGetter.TryGetTopLevelGroup<T>() => this.TryGetTopLevelGroup<T>();
        IGroupGetter? IModGetter.TryGetTopLevelGroup(Type type) => this.TryGetTopLevelGroup(type);
        void IModGetter.WriteToBinary(FilePath path, BinaryWriteParameters? param) => this.WriteToBinary(path, importMask: null, param: param);
        void IModGetter.WriteToBinary(Stream stream, BinaryWriteParameters? param) => this.WriteToBinary(stream, importMask: null, param: param);
        uint IModGetter.GetRecordCount() => this.GetRecordCount();
        IReadOnlyList<IMasterReferenceGetter> IModGetter.MasterReferences => this.ModHeader.MasterReferences;
        public bool CanUseLocalization => true;
        public bool UsingLocalization => this.ModHeader.Flags.HasFlag(SkyrimModHeader.HeaderFlag.Localized);
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SkyrimModCommon.Instance.EnumerateFormLinks(this);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SkyrimModCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerStepThrough]
        IEnumerable<IModContext<ISkyrimMod, ISkyrimModGetter, TSetter, TGetter>> IMajorRecordContextEnumerable<ISkyrimMod, ISkyrimModGetter>.EnumerateMajorRecordContexts<TSetter, TGetter>(ILinkCache linkCache, bool throwIfUnknown) => this.EnumerateMajorRecordContexts<TSetter, TGetter>(linkCache, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<ISkyrimMod, ISkyrimModGetter, IMajorRecord, IMajorRecordGetter>> IMajorRecordContextEnumerable<ISkyrimMod, ISkyrimModGetter>.EnumerateMajorRecordContexts(ILinkCache linkCache, Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts() => this.EnumerateMajorRecordContexts();
        [DebuggerStepThrough]
        IEnumerable<IModContext<TMajor>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, typeof(TMajor), throwIfUnknown: throwIfUnknown).Select(x => x.AsType<Mutagen.Bethesda.Plugins.Records.IMajorRecordQueryableGetter, TMajor>());
        [DebuggerStepThrough]
        IEnumerable<IModContext<IMajorRecordGetter>> IMajorRecordSimpleContextEnumerable.EnumerateMajorRecordSimpleContexts(Type type, bool throwIfUnknown) => this.EnumerateMajorRecordContexts(linkCache: null!, type: type, throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords() => this.EnumerateMajorRecords();
        [DebuggerStepThrough]
        IEnumerable<TMajor> IMajorRecordGetterEnumerable.EnumerateMajorRecords<TMajor>(bool throwIfUnknown) => this.EnumerateMajorRecords<TMajor>(throwIfUnknown: throwIfUnknown);
        [DebuggerStepThrough]
        IEnumerable<IMajorRecordGetter> IMajorRecordGetterEnumerable.EnumerateMajorRecords(Type type, bool throwIfUnknown) => this.EnumerateMajorRecords(type: type, throwIfUnknown: throwIfUnknown);
        uint IModGetter.NextFormID => ModHeader.Stats.NextFormID;
        public ModKey ModKey { get; }
        private readonly BinaryOverlayFactoryPackage _package;
        private readonly IBinaryReadStream _stream;
        private readonly bool _shouldDispose;
        public void Dispose()
        {
            if (!_shouldDispose) return;
            _stream.Dispose();
        }

        #region ModHeader
        private RangeInt64? _ModHeaderLocation;
        private ISkyrimModHeaderGetter? _ModHeader => _ModHeaderLocation.HasValue ? SkyrimModHeaderBinaryOverlay.SkyrimModHeaderFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _ModHeaderLocation!.Value.Min, _ModHeaderLocation!.Value.Max), _package) : default;
        public ISkyrimModHeaderGetter ModHeader => _ModHeader ?? new SkyrimModHeader();
        #endregion
        #region GameSettings
        private List<RangeInt64>? _GameSettingsLocations;
        private ISkyrimGroupGetter<IGameSettingGetter>? _GameSettings => _GameSettingsLocations != null ? SkyrimGroupBinaryOverlay<IGameSettingGetter>.SkyrimGroupFactory(_stream, _GameSettingsLocations, _package) : default;
        public ISkyrimGroupGetter<IGameSettingGetter> GameSettings => _GameSettings ?? new SkyrimGroup<GameSetting>(this);
        #endregion
        #region Keywords
        private List<RangeInt64>? _KeywordsLocations;
        private ISkyrimGroupGetter<IKeywordGetter>? _Keywords => _KeywordsLocations != null ? SkyrimGroupBinaryOverlay<IKeywordGetter>.SkyrimGroupFactory(_stream, _KeywordsLocations, _package) : default;
        public ISkyrimGroupGetter<IKeywordGetter> Keywords => _Keywords ?? new SkyrimGroup<Keyword>(this);
        #endregion
        #region LocationReferenceTypes
        private List<RangeInt64>? _LocationReferenceTypesLocations;
        private ISkyrimGroupGetter<ILocationReferenceTypeGetter>? _LocationReferenceTypes => _LocationReferenceTypesLocations != null ? SkyrimGroupBinaryOverlay<ILocationReferenceTypeGetter>.SkyrimGroupFactory(_stream, _LocationReferenceTypesLocations, _package) : default;
        public ISkyrimGroupGetter<ILocationReferenceTypeGetter> LocationReferenceTypes => _LocationReferenceTypes ?? new SkyrimGroup<LocationReferenceType>(this);
        #endregion
        #region Actions
        private List<RangeInt64>? _ActionsLocations;
        private ISkyrimGroupGetter<IActionRecordGetter>? _Actions => _ActionsLocations != null ? SkyrimGroupBinaryOverlay<IActionRecordGetter>.SkyrimGroupFactory(_stream, _ActionsLocations, _package) : default;
        public ISkyrimGroupGetter<IActionRecordGetter> Actions => _Actions ?? new SkyrimGroup<ActionRecord>(this);
        #endregion
        #region TextureSets
        private List<RangeInt64>? _TextureSetsLocations;
        private ISkyrimGroupGetter<ITextureSetGetter>? _TextureSets => _TextureSetsLocations != null ? SkyrimGroupBinaryOverlay<ITextureSetGetter>.SkyrimGroupFactory(_stream, _TextureSetsLocations, _package) : default;
        public ISkyrimGroupGetter<ITextureSetGetter> TextureSets => _TextureSets ?? new SkyrimGroup<TextureSet>(this);
        #endregion
        #region Globals
        private List<RangeInt64>? _GlobalsLocations;
        private ISkyrimGroupGetter<IGlobalGetter>? _Globals => _GlobalsLocations != null ? SkyrimGroupBinaryOverlay<IGlobalGetter>.SkyrimGroupFactory(_stream, _GlobalsLocations, _package) : default;
        public ISkyrimGroupGetter<IGlobalGetter> Globals => _Globals ?? new SkyrimGroup<Global>(this);
        #endregion
        #region Classes
        private List<RangeInt64>? _ClassesLocations;
        private ISkyrimGroupGetter<IClassGetter>? _Classes => _ClassesLocations != null ? SkyrimGroupBinaryOverlay<IClassGetter>.SkyrimGroupFactory(_stream, _ClassesLocations, _package) : default;
        public ISkyrimGroupGetter<IClassGetter> Classes => _Classes ?? new SkyrimGroup<Class>(this);
        #endregion
        #region Factions
        private List<RangeInt64>? _FactionsLocations;
        private ISkyrimGroupGetter<IFactionGetter>? _Factions => _FactionsLocations != null ? SkyrimGroupBinaryOverlay<IFactionGetter>.SkyrimGroupFactory(_stream, _FactionsLocations, _package) : default;
        public ISkyrimGroupGetter<IFactionGetter> Factions => _Factions ?? new SkyrimGroup<Faction>(this);
        #endregion
        #region HeadParts
        private List<RangeInt64>? _HeadPartsLocations;
        private ISkyrimGroupGetter<IHeadPartGetter>? _HeadParts => _HeadPartsLocations != null ? SkyrimGroupBinaryOverlay<IHeadPartGetter>.SkyrimGroupFactory(_stream, _HeadPartsLocations, _package) : default;
        public ISkyrimGroupGetter<IHeadPartGetter> HeadParts => _HeadParts ?? new SkyrimGroup<HeadPart>(this);
        #endregion
        #region Hairs
        private List<RangeInt64>? _HairsLocations;
        private ISkyrimGroupGetter<IHairGetter>? _Hairs => _HairsLocations != null ? SkyrimGroupBinaryOverlay<IHairGetter>.SkyrimGroupFactory(_stream, _HairsLocations, _package) : default;
        public ISkyrimGroupGetter<IHairGetter> Hairs => _Hairs ?? new SkyrimGroup<Hair>(this);
        #endregion
        #region Eyes
        private List<RangeInt64>? _EyesLocations;
        private ISkyrimGroupGetter<IEyesGetter>? _Eyes => _EyesLocations != null ? SkyrimGroupBinaryOverlay<IEyesGetter>.SkyrimGroupFactory(_stream, _EyesLocations, _package) : default;
        public ISkyrimGroupGetter<IEyesGetter> Eyes => _Eyes ?? new SkyrimGroup<Eyes>(this);
        #endregion
        #region Races
        private List<RangeInt64>? _RacesLocations;
        private ISkyrimGroupGetter<IRaceGetter>? _Races => _RacesLocations != null ? SkyrimGroupBinaryOverlay<IRaceGetter>.SkyrimGroupFactory(_stream, _RacesLocations, _package) : default;
        public ISkyrimGroupGetter<IRaceGetter> Races => _Races ?? new SkyrimGroup<Race>(this);
        #endregion
        #region SoundMarkers
        private List<RangeInt64>? _SoundMarkersLocations;
        private ISkyrimGroupGetter<ISoundMarkerGetter>? _SoundMarkers => _SoundMarkersLocations != null ? SkyrimGroupBinaryOverlay<ISoundMarkerGetter>.SkyrimGroupFactory(_stream, _SoundMarkersLocations, _package) : default;
        public ISkyrimGroupGetter<ISoundMarkerGetter> SoundMarkers => _SoundMarkers ?? new SkyrimGroup<SoundMarker>(this);
        #endregion
        #region AcousticSpaces
        private List<RangeInt64>? _AcousticSpacesLocations;
        private ISkyrimGroupGetter<IAcousticSpaceGetter>? _AcousticSpaces => _AcousticSpacesLocations != null ? SkyrimGroupBinaryOverlay<IAcousticSpaceGetter>.SkyrimGroupFactory(_stream, _AcousticSpacesLocations, _package) : default;
        public ISkyrimGroupGetter<IAcousticSpaceGetter> AcousticSpaces => _AcousticSpaces ?? new SkyrimGroup<AcousticSpace>(this);
        #endregion
        #region MagicEffects
        private List<RangeInt64>? _MagicEffectsLocations;
        private ISkyrimGroupGetter<IMagicEffectGetter>? _MagicEffects => _MagicEffectsLocations != null ? SkyrimGroupBinaryOverlay<IMagicEffectGetter>.SkyrimGroupFactory(_stream, _MagicEffectsLocations, _package) : default;
        public ISkyrimGroupGetter<IMagicEffectGetter> MagicEffects => _MagicEffects ?? new SkyrimGroup<MagicEffect>(this);
        #endregion
        #region LandscapeTextures
        private List<RangeInt64>? _LandscapeTexturesLocations;
        private ISkyrimGroupGetter<ILandscapeTextureGetter>? _LandscapeTextures => _LandscapeTexturesLocations != null ? SkyrimGroupBinaryOverlay<ILandscapeTextureGetter>.SkyrimGroupFactory(_stream, _LandscapeTexturesLocations, _package) : default;
        public ISkyrimGroupGetter<ILandscapeTextureGetter> LandscapeTextures => _LandscapeTextures ?? new SkyrimGroup<LandscapeTexture>(this);
        #endregion
        #region ObjectEffects
        private List<RangeInt64>? _ObjectEffectsLocations;
        private ISkyrimGroupGetter<IObjectEffectGetter>? _ObjectEffects => _ObjectEffectsLocations != null ? SkyrimGroupBinaryOverlay<IObjectEffectGetter>.SkyrimGroupFactory(_stream, _ObjectEffectsLocations, _package) : default;
        public ISkyrimGroupGetter<IObjectEffectGetter> ObjectEffects => _ObjectEffects ?? new SkyrimGroup<ObjectEffect>(this);
        #endregion
        #region Spells
        private List<RangeInt64>? _SpellsLocations;
        private ISkyrimGroupGetter<ISpellGetter>? _Spells => _SpellsLocations != null ? SkyrimGroupBinaryOverlay<ISpellGetter>.SkyrimGroupFactory(_stream, _SpellsLocations, _package) : default;
        public ISkyrimGroupGetter<ISpellGetter> Spells => _Spells ?? new SkyrimGroup<Spell>(this);
        #endregion
        #region Scrolls
        private List<RangeInt64>? _ScrollsLocations;
        private ISkyrimGroupGetter<IScrollGetter>? _Scrolls => _ScrollsLocations != null ? SkyrimGroupBinaryOverlay<IScrollGetter>.SkyrimGroupFactory(_stream, _ScrollsLocations, _package) : default;
        public ISkyrimGroupGetter<IScrollGetter> Scrolls => _Scrolls ?? new SkyrimGroup<Scroll>(this);
        #endregion
        #region Activators
        private List<RangeInt64>? _ActivatorsLocations;
        private ISkyrimGroupGetter<IActivatorGetter>? _Activators => _ActivatorsLocations != null ? SkyrimGroupBinaryOverlay<IActivatorGetter>.SkyrimGroupFactory(_stream, _ActivatorsLocations, _package) : default;
        public ISkyrimGroupGetter<IActivatorGetter> Activators => _Activators ?? new SkyrimGroup<Activator>(this);
        #endregion
        #region TalkingActivators
        private List<RangeInt64>? _TalkingActivatorsLocations;
        private ISkyrimGroupGetter<ITalkingActivatorGetter>? _TalkingActivators => _TalkingActivatorsLocations != null ? SkyrimGroupBinaryOverlay<ITalkingActivatorGetter>.SkyrimGroupFactory(_stream, _TalkingActivatorsLocations, _package) : default;
        public ISkyrimGroupGetter<ITalkingActivatorGetter> TalkingActivators => _TalkingActivators ?? new SkyrimGroup<TalkingActivator>(this);
        #endregion
        #region Armors
        private List<RangeInt64>? _ArmorsLocations;
        private ISkyrimGroupGetter<IArmorGetter>? _Armors => _ArmorsLocations != null ? SkyrimGroupBinaryOverlay<IArmorGetter>.SkyrimGroupFactory(_stream, _ArmorsLocations, _package) : default;
        public ISkyrimGroupGetter<IArmorGetter> Armors => _Armors ?? new SkyrimGroup<Armor>(this);
        #endregion
        #region Books
        private List<RangeInt64>? _BooksLocations;
        private ISkyrimGroupGetter<IBookGetter>? _Books => _BooksLocations != null ? SkyrimGroupBinaryOverlay<IBookGetter>.SkyrimGroupFactory(_stream, _BooksLocations, _package) : default;
        public ISkyrimGroupGetter<IBookGetter> Books => _Books ?? new SkyrimGroup<Book>(this);
        #endregion
        #region Containers
        private List<RangeInt64>? _ContainersLocations;
        private ISkyrimGroupGetter<IContainerGetter>? _Containers => _ContainersLocations != null ? SkyrimGroupBinaryOverlay<IContainerGetter>.SkyrimGroupFactory(_stream, _ContainersLocations, _package) : default;
        public ISkyrimGroupGetter<IContainerGetter> Containers => _Containers ?? new SkyrimGroup<Container>(this);
        #endregion
        #region Doors
        private List<RangeInt64>? _DoorsLocations;
        private ISkyrimGroupGetter<IDoorGetter>? _Doors => _DoorsLocations != null ? SkyrimGroupBinaryOverlay<IDoorGetter>.SkyrimGroupFactory(_stream, _DoorsLocations, _package) : default;
        public ISkyrimGroupGetter<IDoorGetter> Doors => _Doors ?? new SkyrimGroup<Door>(this);
        #endregion
        #region Ingredients
        private List<RangeInt64>? _IngredientsLocations;
        private ISkyrimGroupGetter<IIngredientGetter>? _Ingredients => _IngredientsLocations != null ? SkyrimGroupBinaryOverlay<IIngredientGetter>.SkyrimGroupFactory(_stream, _IngredientsLocations, _package) : default;
        public ISkyrimGroupGetter<IIngredientGetter> Ingredients => _Ingredients ?? new SkyrimGroup<Ingredient>(this);
        #endregion
        #region Lights
        private List<RangeInt64>? _LightsLocations;
        private ISkyrimGroupGetter<ILightGetter>? _Lights => _LightsLocations != null ? SkyrimGroupBinaryOverlay<ILightGetter>.SkyrimGroupFactory(_stream, _LightsLocations, _package) : default;
        public ISkyrimGroupGetter<ILightGetter> Lights => _Lights ?? new SkyrimGroup<Light>(this);
        #endregion
        #region MiscItems
        private List<RangeInt64>? _MiscItemsLocations;
        private ISkyrimGroupGetter<IMiscItemGetter>? _MiscItems => _MiscItemsLocations != null ? SkyrimGroupBinaryOverlay<IMiscItemGetter>.SkyrimGroupFactory(_stream, _MiscItemsLocations, _package) : default;
        public ISkyrimGroupGetter<IMiscItemGetter> MiscItems => _MiscItems ?? new SkyrimGroup<MiscItem>(this);
        #endregion
        #region AlchemicalApparatuses
        private List<RangeInt64>? _AlchemicalApparatusesLocations;
        private ISkyrimGroupGetter<IAlchemicalApparatusGetter>? _AlchemicalApparatuses => _AlchemicalApparatusesLocations != null ? SkyrimGroupBinaryOverlay<IAlchemicalApparatusGetter>.SkyrimGroupFactory(_stream, _AlchemicalApparatusesLocations, _package) : default;
        public ISkyrimGroupGetter<IAlchemicalApparatusGetter> AlchemicalApparatuses => _AlchemicalApparatuses ?? new SkyrimGroup<AlchemicalApparatus>(this);
        #endregion
        #region Statics
        private List<RangeInt64>? _StaticsLocations;
        private ISkyrimGroupGetter<IStaticGetter>? _Statics => _StaticsLocations != null ? SkyrimGroupBinaryOverlay<IStaticGetter>.SkyrimGroupFactory(_stream, _StaticsLocations, _package) : default;
        public ISkyrimGroupGetter<IStaticGetter> Statics => _Statics ?? new SkyrimGroup<Static>(this);
        #endregion
        #region MoveableStatics
        private List<RangeInt64>? _MoveableStaticsLocations;
        private ISkyrimGroupGetter<IMoveableStaticGetter>? _MoveableStatics => _MoveableStaticsLocations != null ? SkyrimGroupBinaryOverlay<IMoveableStaticGetter>.SkyrimGroupFactory(_stream, _MoveableStaticsLocations, _package) : default;
        public ISkyrimGroupGetter<IMoveableStaticGetter> MoveableStatics => _MoveableStatics ?? new SkyrimGroup<MoveableStatic>(this);
        #endregion
        #region Grasses
        private List<RangeInt64>? _GrassesLocations;
        private ISkyrimGroupGetter<IGrassGetter>? _Grasses => _GrassesLocations != null ? SkyrimGroupBinaryOverlay<IGrassGetter>.SkyrimGroupFactory(_stream, _GrassesLocations, _package) : default;
        public ISkyrimGroupGetter<IGrassGetter> Grasses => _Grasses ?? new SkyrimGroup<Grass>(this);
        #endregion
        #region Trees
        private List<RangeInt64>? _TreesLocations;
        private ISkyrimGroupGetter<ITreeGetter>? _Trees => _TreesLocations != null ? SkyrimGroupBinaryOverlay<ITreeGetter>.SkyrimGroupFactory(_stream, _TreesLocations, _package) : default;
        public ISkyrimGroupGetter<ITreeGetter> Trees => _Trees ?? new SkyrimGroup<Tree>(this);
        #endregion
        #region Florae
        private List<RangeInt64>? _FloraeLocations;
        private ISkyrimGroupGetter<IFloraGetter>? _Florae => _FloraeLocations != null ? SkyrimGroupBinaryOverlay<IFloraGetter>.SkyrimGroupFactory(_stream, _FloraeLocations, _package) : default;
        public ISkyrimGroupGetter<IFloraGetter> Florae => _Florae ?? new SkyrimGroup<Flora>(this);
        #endregion
        #region Furniture
        private List<RangeInt64>? _FurnitureLocations;
        private ISkyrimGroupGetter<IFurnitureGetter>? _Furniture => _FurnitureLocations != null ? SkyrimGroupBinaryOverlay<IFurnitureGetter>.SkyrimGroupFactory(_stream, _FurnitureLocations, _package) : default;
        public ISkyrimGroupGetter<IFurnitureGetter> Furniture => _Furniture ?? new SkyrimGroup<Furniture>(this);
        #endregion
        #region Weapons
        private List<RangeInt64>? _WeaponsLocations;
        private ISkyrimGroupGetter<IWeaponGetter>? _Weapons => _WeaponsLocations != null ? SkyrimGroupBinaryOverlay<IWeaponGetter>.SkyrimGroupFactory(_stream, _WeaponsLocations, _package) : default;
        public ISkyrimGroupGetter<IWeaponGetter> Weapons => _Weapons ?? new SkyrimGroup<Weapon>(this);
        #endregion
        #region Ammunitions
        private List<RangeInt64>? _AmmunitionsLocations;
        private ISkyrimGroupGetter<IAmmunitionGetter>? _Ammunitions => _AmmunitionsLocations != null ? SkyrimGroupBinaryOverlay<IAmmunitionGetter>.SkyrimGroupFactory(_stream, _AmmunitionsLocations, _package) : default;
        public ISkyrimGroupGetter<IAmmunitionGetter> Ammunitions => _Ammunitions ?? new SkyrimGroup<Ammunition>(this);
        #endregion
        #region Npcs
        private List<RangeInt64>? _NpcsLocations;
        private ISkyrimGroupGetter<INpcGetter>? _Npcs => _NpcsLocations != null ? SkyrimGroupBinaryOverlay<INpcGetter>.SkyrimGroupFactory(_stream, _NpcsLocations, _package) : default;
        public ISkyrimGroupGetter<INpcGetter> Npcs => _Npcs ?? new SkyrimGroup<Npc>(this);
        #endregion
        #region LeveledNpcs
        private List<RangeInt64>? _LeveledNpcsLocations;
        private ISkyrimGroupGetter<ILeveledNpcGetter>? _LeveledNpcs => _LeveledNpcsLocations != null ? SkyrimGroupBinaryOverlay<ILeveledNpcGetter>.SkyrimGroupFactory(_stream, _LeveledNpcsLocations, _package) : default;
        public ISkyrimGroupGetter<ILeveledNpcGetter> LeveledNpcs => _LeveledNpcs ?? new SkyrimGroup<LeveledNpc>(this);
        #endregion
        #region Keys
        private List<RangeInt64>? _KeysLocations;
        private ISkyrimGroupGetter<IKeyGetter>? _Keys => _KeysLocations != null ? SkyrimGroupBinaryOverlay<IKeyGetter>.SkyrimGroupFactory(_stream, _KeysLocations, _package) : default;
        public ISkyrimGroupGetter<IKeyGetter> Keys => _Keys ?? new SkyrimGroup<Key>(this);
        #endregion
        #region Ingestibles
        private List<RangeInt64>? _IngestiblesLocations;
        private ISkyrimGroupGetter<IIngestibleGetter>? _Ingestibles => _IngestiblesLocations != null ? SkyrimGroupBinaryOverlay<IIngestibleGetter>.SkyrimGroupFactory(_stream, _IngestiblesLocations, _package) : default;
        public ISkyrimGroupGetter<IIngestibleGetter> Ingestibles => _Ingestibles ?? new SkyrimGroup<Ingestible>(this);
        #endregion
        #region IdleMarkers
        private List<RangeInt64>? _IdleMarkersLocations;
        private ISkyrimGroupGetter<IIdleMarkerGetter>? _IdleMarkers => _IdleMarkersLocations != null ? SkyrimGroupBinaryOverlay<IIdleMarkerGetter>.SkyrimGroupFactory(_stream, _IdleMarkersLocations, _package) : default;
        public ISkyrimGroupGetter<IIdleMarkerGetter> IdleMarkers => _IdleMarkers ?? new SkyrimGroup<IdleMarker>(this);
        #endregion
        #region ConstructibleObjects
        private List<RangeInt64>? _ConstructibleObjectsLocations;
        private ISkyrimGroupGetter<IConstructibleObjectGetter>? _ConstructibleObjects => _ConstructibleObjectsLocations != null ? SkyrimGroupBinaryOverlay<IConstructibleObjectGetter>.SkyrimGroupFactory(_stream, _ConstructibleObjectsLocations, _package) : default;
        public ISkyrimGroupGetter<IConstructibleObjectGetter> ConstructibleObjects => _ConstructibleObjects ?? new SkyrimGroup<ConstructibleObject>(this);
        #endregion
        #region Projectiles
        private List<RangeInt64>? _ProjectilesLocations;
        private ISkyrimGroupGetter<IProjectileGetter>? _Projectiles => _ProjectilesLocations != null ? SkyrimGroupBinaryOverlay<IProjectileGetter>.SkyrimGroupFactory(_stream, _ProjectilesLocations, _package) : default;
        public ISkyrimGroupGetter<IProjectileGetter> Projectiles => _Projectiles ?? new SkyrimGroup<Projectile>(this);
        #endregion
        #region Hazards
        private List<RangeInt64>? _HazardsLocations;
        private ISkyrimGroupGetter<IHazardGetter>? _Hazards => _HazardsLocations != null ? SkyrimGroupBinaryOverlay<IHazardGetter>.SkyrimGroupFactory(_stream, _HazardsLocations, _package) : default;
        public ISkyrimGroupGetter<IHazardGetter> Hazards => _Hazards ?? new SkyrimGroup<Hazard>(this);
        #endregion
        #region SoulGems
        private List<RangeInt64>? _SoulGemsLocations;
        private ISkyrimGroupGetter<ISoulGemGetter>? _SoulGems => _SoulGemsLocations != null ? SkyrimGroupBinaryOverlay<ISoulGemGetter>.SkyrimGroupFactory(_stream, _SoulGemsLocations, _package) : default;
        public ISkyrimGroupGetter<ISoulGemGetter> SoulGems => _SoulGems ?? new SkyrimGroup<SoulGem>(this);
        #endregion
        #region LeveledItems
        private List<RangeInt64>? _LeveledItemsLocations;
        private ISkyrimGroupGetter<ILeveledItemGetter>? _LeveledItems => _LeveledItemsLocations != null ? SkyrimGroupBinaryOverlay<ILeveledItemGetter>.SkyrimGroupFactory(_stream, _LeveledItemsLocations, _package) : default;
        public ISkyrimGroupGetter<ILeveledItemGetter> LeveledItems => _LeveledItems ?? new SkyrimGroup<LeveledItem>(this);
        #endregion
        #region Weathers
        private List<RangeInt64>? _WeathersLocations;
        private ISkyrimGroupGetter<IWeatherGetter>? _Weathers => _WeathersLocations != null ? SkyrimGroupBinaryOverlay<IWeatherGetter>.SkyrimGroupFactory(_stream, _WeathersLocations, _package) : default;
        public ISkyrimGroupGetter<IWeatherGetter> Weathers => _Weathers ?? new SkyrimGroup<Weather>(this);
        #endregion
        #region Climates
        private List<RangeInt64>? _ClimatesLocations;
        private ISkyrimGroupGetter<IClimateGetter>? _Climates => _ClimatesLocations != null ? SkyrimGroupBinaryOverlay<IClimateGetter>.SkyrimGroupFactory(_stream, _ClimatesLocations, _package) : default;
        public ISkyrimGroupGetter<IClimateGetter> Climates => _Climates ?? new SkyrimGroup<Climate>(this);
        #endregion
        #region ShaderParticleGeometries
        private List<RangeInt64>? _ShaderParticleGeometriesLocations;
        private ISkyrimGroupGetter<IShaderParticleGeometryGetter>? _ShaderParticleGeometries => _ShaderParticleGeometriesLocations != null ? SkyrimGroupBinaryOverlay<IShaderParticleGeometryGetter>.SkyrimGroupFactory(_stream, _ShaderParticleGeometriesLocations, _package) : default;
        public ISkyrimGroupGetter<IShaderParticleGeometryGetter> ShaderParticleGeometries => _ShaderParticleGeometries ?? new SkyrimGroup<ShaderParticleGeometry>(this);
        #endregion
        #region VisualEffects
        private List<RangeInt64>? _VisualEffectsLocations;
        private ISkyrimGroupGetter<IVisualEffectGetter>? _VisualEffects => _VisualEffectsLocations != null ? SkyrimGroupBinaryOverlay<IVisualEffectGetter>.SkyrimGroupFactory(_stream, _VisualEffectsLocations, _package) : default;
        public ISkyrimGroupGetter<IVisualEffectGetter> VisualEffects => _VisualEffects ?? new SkyrimGroup<VisualEffect>(this);
        #endregion
        #region Regions
        private List<RangeInt64>? _RegionsLocations;
        private ISkyrimGroupGetter<IRegionGetter>? _Regions => _RegionsLocations != null ? SkyrimGroupBinaryOverlay<IRegionGetter>.SkyrimGroupFactory(_stream, _RegionsLocations, _package) : default;
        public ISkyrimGroupGetter<IRegionGetter> Regions => _Regions ?? new SkyrimGroup<Region>(this);
        #endregion
        #region NavigationMeshInfoMaps
        private List<RangeInt64>? _NavigationMeshInfoMapsLocations;
        private ISkyrimGroupGetter<INavigationMeshInfoMapGetter>? _NavigationMeshInfoMaps => _NavigationMeshInfoMapsLocations != null ? SkyrimGroupBinaryOverlay<INavigationMeshInfoMapGetter>.SkyrimGroupFactory(_stream, _NavigationMeshInfoMapsLocations, _package) : default;
        public ISkyrimGroupGetter<INavigationMeshInfoMapGetter> NavigationMeshInfoMaps => _NavigationMeshInfoMaps ?? new SkyrimGroup<NavigationMeshInfoMap>(this);
        #endregion
        #region Cells
        private RangeInt64? _CellsLocation;
        private ISkyrimListGroupGetter<ICellBlockGetter>? _Cells => _CellsLocation.HasValue ? SkyrimListGroupBinaryOverlay<ICellBlockGetter>.SkyrimListGroupFactory(PluginBinaryOverlay.LockExtractMemory(_stream, _CellsLocation!.Value.Min, _CellsLocation!.Value.Max), _package) : default;
        public ISkyrimListGroupGetter<ICellBlockGetter> Cells => _Cells ?? new SkyrimListGroup<CellBlock>();
        #endregion
        #region Worldspaces
        private List<RangeInt64>? _WorldspacesLocations;
        private ISkyrimGroupGetter<IWorldspaceGetter>? _Worldspaces => _WorldspacesLocations != null ? SkyrimGroupBinaryOverlay<IWorldspaceGetter>.SkyrimGroupFactory(_stream, _WorldspacesLocations, _package) : default;
        public ISkyrimGroupGetter<IWorldspaceGetter> Worldspaces => _Worldspaces ?? new SkyrimGroup<Worldspace>(this);
        #endregion
        #region DialogTopics
        private List<RangeInt64>? _DialogTopicsLocations;
        private ISkyrimGroupGetter<IDialogTopicGetter>? _DialogTopics => _DialogTopicsLocations != null ? SkyrimGroupBinaryOverlay<IDialogTopicGetter>.SkyrimGroupFactory(_stream, _DialogTopicsLocations, _package) : default;
        public ISkyrimGroupGetter<IDialogTopicGetter> DialogTopics => _DialogTopics ?? new SkyrimGroup<DialogTopic>(this);
        #endregion
        #region Quests
        private List<RangeInt64>? _QuestsLocations;
        private ISkyrimGroupGetter<IQuestGetter>? _Quests => _QuestsLocations != null ? SkyrimGroupBinaryOverlay<IQuestGetter>.SkyrimGroupFactory(_stream, _QuestsLocations, _package) : default;
        public ISkyrimGroupGetter<IQuestGetter> Quests => _Quests ?? new SkyrimGroup<Quest>(this);
        #endregion
        #region IdleAnimations
        private List<RangeInt64>? _IdleAnimationsLocations;
        private ISkyrimGroupGetter<IIdleAnimationGetter>? _IdleAnimations => _IdleAnimationsLocations != null ? SkyrimGroupBinaryOverlay<IIdleAnimationGetter>.SkyrimGroupFactory(_stream, _IdleAnimationsLocations, _package) : default;
        public ISkyrimGroupGetter<IIdleAnimationGetter> IdleAnimations => _IdleAnimations ?? new SkyrimGroup<IdleAnimation>(this);
        #endregion
        #region Packages
        private List<RangeInt64>? _PackagesLocations;
        private ISkyrimGroupGetter<IPackageGetter>? _Packages => _PackagesLocations != null ? SkyrimGroupBinaryOverlay<IPackageGetter>.SkyrimGroupFactory(_stream, _PackagesLocations, _package) : default;
        public ISkyrimGroupGetter<IPackageGetter> Packages => _Packages ?? new SkyrimGroup<Package>(this);
        #endregion
        #region CombatStyles
        private List<RangeInt64>? _CombatStylesLocations;
        private ISkyrimGroupGetter<ICombatStyleGetter>? _CombatStyles => _CombatStylesLocations != null ? SkyrimGroupBinaryOverlay<ICombatStyleGetter>.SkyrimGroupFactory(_stream, _CombatStylesLocations, _package) : default;
        public ISkyrimGroupGetter<ICombatStyleGetter> CombatStyles => _CombatStyles ?? new SkyrimGroup<CombatStyle>(this);
        #endregion
        #region LoadScreens
        private List<RangeInt64>? _LoadScreensLocations;
        private ISkyrimGroupGetter<ILoadScreenGetter>? _LoadScreens => _LoadScreensLocations != null ? SkyrimGroupBinaryOverlay<ILoadScreenGetter>.SkyrimGroupFactory(_stream, _LoadScreensLocations, _package) : default;
        public ISkyrimGroupGetter<ILoadScreenGetter> LoadScreens => _LoadScreens ?? new SkyrimGroup<LoadScreen>(this);
        #endregion
        #region LeveledSpells
        private List<RangeInt64>? _LeveledSpellsLocations;
        private ISkyrimGroupGetter<ILeveledSpellGetter>? _LeveledSpells => _LeveledSpellsLocations != null ? SkyrimGroupBinaryOverlay<ILeveledSpellGetter>.SkyrimGroupFactory(_stream, _LeveledSpellsLocations, _package) : default;
        public ISkyrimGroupGetter<ILeveledSpellGetter> LeveledSpells => _LeveledSpells ?? new SkyrimGroup<LeveledSpell>(this);
        #endregion
        #region AnimatedObjects
        private List<RangeInt64>? _AnimatedObjectsLocations;
        private ISkyrimGroupGetter<IAnimatedObjectGetter>? _AnimatedObjects => _AnimatedObjectsLocations != null ? SkyrimGroupBinaryOverlay<IAnimatedObjectGetter>.SkyrimGroupFactory(_stream, _AnimatedObjectsLocations, _package) : default;
        public ISkyrimGroupGetter<IAnimatedObjectGetter> AnimatedObjects => _AnimatedObjects ?? new SkyrimGroup<AnimatedObject>(this);
        #endregion
        #region Waters
        private List<RangeInt64>? _WatersLocations;
        private ISkyrimGroupGetter<IWaterGetter>? _Waters => _WatersLocations != null ? SkyrimGroupBinaryOverlay<IWaterGetter>.SkyrimGroupFactory(_stream, _WatersLocations, _package) : default;
        public ISkyrimGroupGetter<IWaterGetter> Waters => _Waters ?? new SkyrimGroup<Water>(this);
        #endregion
        #region EffectShaders
        private List<RangeInt64>? _EffectShadersLocations;
        private ISkyrimGroupGetter<IEffectShaderGetter>? _EffectShaders => _EffectShadersLocations != null ? SkyrimGroupBinaryOverlay<IEffectShaderGetter>.SkyrimGroupFactory(_stream, _EffectShadersLocations, _package) : default;
        public ISkyrimGroupGetter<IEffectShaderGetter> EffectShaders => _EffectShaders ?? new SkyrimGroup<EffectShader>(this);
        #endregion
        #region Explosions
        private List<RangeInt64>? _ExplosionsLocations;
        private ISkyrimGroupGetter<IExplosionGetter>? _Explosions => _ExplosionsLocations != null ? SkyrimGroupBinaryOverlay<IExplosionGetter>.SkyrimGroupFactory(_stream, _ExplosionsLocations, _package) : default;
        public ISkyrimGroupGetter<IExplosionGetter> Explosions => _Explosions ?? new SkyrimGroup<Explosion>(this);
        #endregion
        #region Debris
        private List<RangeInt64>? _DebrisLocations;
        private ISkyrimGroupGetter<IDebrisGetter>? _Debris => _DebrisLocations != null ? SkyrimGroupBinaryOverlay<IDebrisGetter>.SkyrimGroupFactory(_stream, _DebrisLocations, _package) : default;
        public ISkyrimGroupGetter<IDebrisGetter> Debris => _Debris ?? new SkyrimGroup<Debris>(this);
        #endregion
        #region ImageSpaces
        private List<RangeInt64>? _ImageSpacesLocations;
        private ISkyrimGroupGetter<IImageSpaceGetter>? _ImageSpaces => _ImageSpacesLocations != null ? SkyrimGroupBinaryOverlay<IImageSpaceGetter>.SkyrimGroupFactory(_stream, _ImageSpacesLocations, _package) : default;
        public ISkyrimGroupGetter<IImageSpaceGetter> ImageSpaces => _ImageSpaces ?? new SkyrimGroup<ImageSpace>(this);
        #endregion
        #region ImageSpaceAdapters
        private List<RangeInt64>? _ImageSpaceAdaptersLocations;
        private ISkyrimGroupGetter<IImageSpaceAdapterGetter>? _ImageSpaceAdapters => _ImageSpaceAdaptersLocations != null ? SkyrimGroupBinaryOverlay<IImageSpaceAdapterGetter>.SkyrimGroupFactory(_stream, _ImageSpaceAdaptersLocations, _package) : default;
        public ISkyrimGroupGetter<IImageSpaceAdapterGetter> ImageSpaceAdapters => _ImageSpaceAdapters ?? new SkyrimGroup<ImageSpaceAdapter>(this);
        #endregion
        #region FormLists
        private List<RangeInt64>? _FormListsLocations;
        private ISkyrimGroupGetter<IFormListGetter>? _FormLists => _FormListsLocations != null ? SkyrimGroupBinaryOverlay<IFormListGetter>.SkyrimGroupFactory(_stream, _FormListsLocations, _package) : default;
        public ISkyrimGroupGetter<IFormListGetter> FormLists => _FormLists ?? new SkyrimGroup<FormList>(this);
        #endregion
        #region Perks
        private List<RangeInt64>? _PerksLocations;
        private ISkyrimGroupGetter<IPerkGetter>? _Perks => _PerksLocations != null ? SkyrimGroupBinaryOverlay<IPerkGetter>.SkyrimGroupFactory(_stream, _PerksLocations, _package) : default;
        public ISkyrimGroupGetter<IPerkGetter> Perks => _Perks ?? new SkyrimGroup<Perk>(this);
        #endregion
        #region BodyParts
        private List<RangeInt64>? _BodyPartsLocations;
        private ISkyrimGroupGetter<IBodyPartDataGetter>? _BodyParts => _BodyPartsLocations != null ? SkyrimGroupBinaryOverlay<IBodyPartDataGetter>.SkyrimGroupFactory(_stream, _BodyPartsLocations, _package) : default;
        public ISkyrimGroupGetter<IBodyPartDataGetter> BodyParts => _BodyParts ?? new SkyrimGroup<BodyPartData>(this);
        #endregion
        #region AddonNodes
        private List<RangeInt64>? _AddonNodesLocations;
        private ISkyrimGroupGetter<IAddonNodeGetter>? _AddonNodes => _AddonNodesLocations != null ? SkyrimGroupBinaryOverlay<IAddonNodeGetter>.SkyrimGroupFactory(_stream, _AddonNodesLocations, _package) : default;
        public ISkyrimGroupGetter<IAddonNodeGetter> AddonNodes => _AddonNodes ?? new SkyrimGroup<AddonNode>(this);
        #endregion
        #region ActorValueInformation
        private List<RangeInt64>? _ActorValueInformationLocations;
        private ISkyrimGroupGetter<IActorValueInformationGetter>? _ActorValueInformation => _ActorValueInformationLocations != null ? SkyrimGroupBinaryOverlay<IActorValueInformationGetter>.SkyrimGroupFactory(_stream, _ActorValueInformationLocations, _package) : default;
        public ISkyrimGroupGetter<IActorValueInformationGetter> ActorValueInformation => _ActorValueInformation ?? new SkyrimGroup<ActorValueInformation>(this);
        #endregion
        #region CameraShots
        private List<RangeInt64>? _CameraShotsLocations;
        private ISkyrimGroupGetter<ICameraShotGetter>? _CameraShots => _CameraShotsLocations != null ? SkyrimGroupBinaryOverlay<ICameraShotGetter>.SkyrimGroupFactory(_stream, _CameraShotsLocations, _package) : default;
        public ISkyrimGroupGetter<ICameraShotGetter> CameraShots => _CameraShots ?? new SkyrimGroup<CameraShot>(this);
        #endregion
        #region CameraPaths
        private List<RangeInt64>? _CameraPathsLocations;
        private ISkyrimGroupGetter<ICameraPathGetter>? _CameraPaths => _CameraPathsLocations != null ? SkyrimGroupBinaryOverlay<ICameraPathGetter>.SkyrimGroupFactory(_stream, _CameraPathsLocations, _package) : default;
        public ISkyrimGroupGetter<ICameraPathGetter> CameraPaths => _CameraPaths ?? new SkyrimGroup<CameraPath>(this);
        #endregion
        #region VoiceTypes
        private List<RangeInt64>? _VoiceTypesLocations;
        private ISkyrimGroupGetter<IVoiceTypeGetter>? _VoiceTypes => _VoiceTypesLocations != null ? SkyrimGroupBinaryOverlay<IVoiceTypeGetter>.SkyrimGroupFactory(_stream, _VoiceTypesLocations, _package) : default;
        public ISkyrimGroupGetter<IVoiceTypeGetter> VoiceTypes => _VoiceTypes ?? new SkyrimGroup<VoiceType>(this);
        #endregion
        #region MaterialTypes
        private List<RangeInt64>? _MaterialTypesLocations;
        private ISkyrimGroupGetter<IMaterialTypeGetter>? _MaterialTypes => _MaterialTypesLocations != null ? SkyrimGroupBinaryOverlay<IMaterialTypeGetter>.SkyrimGroupFactory(_stream, _MaterialTypesLocations, _package) : default;
        public ISkyrimGroupGetter<IMaterialTypeGetter> MaterialTypes => _MaterialTypes ?? new SkyrimGroup<MaterialType>(this);
        #endregion
        #region Impacts
        private List<RangeInt64>? _ImpactsLocations;
        private ISkyrimGroupGetter<IImpactGetter>? _Impacts => _ImpactsLocations != null ? SkyrimGroupBinaryOverlay<IImpactGetter>.SkyrimGroupFactory(_stream, _ImpactsLocations, _package) : default;
        public ISkyrimGroupGetter<IImpactGetter> Impacts => _Impacts ?? new SkyrimGroup<Impact>(this);
        #endregion
        #region ImpactDataSets
        private List<RangeInt64>? _ImpactDataSetsLocations;
        private ISkyrimGroupGetter<IImpactDataSetGetter>? _ImpactDataSets => _ImpactDataSetsLocations != null ? SkyrimGroupBinaryOverlay<IImpactDataSetGetter>.SkyrimGroupFactory(_stream, _ImpactDataSetsLocations, _package) : default;
        public ISkyrimGroupGetter<IImpactDataSetGetter> ImpactDataSets => _ImpactDataSets ?? new SkyrimGroup<ImpactDataSet>(this);
        #endregion
        #region ArmorAddons
        private List<RangeInt64>? _ArmorAddonsLocations;
        private ISkyrimGroupGetter<IArmorAddonGetter>? _ArmorAddons => _ArmorAddonsLocations != null ? SkyrimGroupBinaryOverlay<IArmorAddonGetter>.SkyrimGroupFactory(_stream, _ArmorAddonsLocations, _package) : default;
        public ISkyrimGroupGetter<IArmorAddonGetter> ArmorAddons => _ArmorAddons ?? new SkyrimGroup<ArmorAddon>(this);
        #endregion
        #region EncounterZones
        private List<RangeInt64>? _EncounterZonesLocations;
        private ISkyrimGroupGetter<IEncounterZoneGetter>? _EncounterZones => _EncounterZonesLocations != null ? SkyrimGroupBinaryOverlay<IEncounterZoneGetter>.SkyrimGroupFactory(_stream, _EncounterZonesLocations, _package) : default;
        public ISkyrimGroupGetter<IEncounterZoneGetter> EncounterZones => _EncounterZones ?? new SkyrimGroup<EncounterZone>(this);
        #endregion
        #region Locations
        private List<RangeInt64>? _LocationsLocations;
        private ISkyrimGroupGetter<ILocationGetter>? _Locations => _LocationsLocations != null ? SkyrimGroupBinaryOverlay<ILocationGetter>.SkyrimGroupFactory(_stream, _LocationsLocations, _package) : default;
        public ISkyrimGroupGetter<ILocationGetter> Locations => _Locations ?? new SkyrimGroup<Location>(this);
        #endregion
        #region Messages
        private List<RangeInt64>? _MessagesLocations;
        private ISkyrimGroupGetter<IMessageGetter>? _Messages => _MessagesLocations != null ? SkyrimGroupBinaryOverlay<IMessageGetter>.SkyrimGroupFactory(_stream, _MessagesLocations, _package) : default;
        public ISkyrimGroupGetter<IMessageGetter> Messages => _Messages ?? new SkyrimGroup<Message>(this);
        #endregion
        #region DefaultObjectManagers
        private List<RangeInt64>? _DefaultObjectManagersLocations;
        private ISkyrimGroupGetter<IDefaultObjectManagerGetter>? _DefaultObjectManagers => _DefaultObjectManagersLocations != null ? SkyrimGroupBinaryOverlay<IDefaultObjectManagerGetter>.SkyrimGroupFactory(_stream, _DefaultObjectManagersLocations, _package) : default;
        public ISkyrimGroupGetter<IDefaultObjectManagerGetter> DefaultObjectManagers => _DefaultObjectManagers ?? new SkyrimGroup<DefaultObjectManager>(this);
        #endregion
        #region LightingTemplates
        private List<RangeInt64>? _LightingTemplatesLocations;
        private ISkyrimGroupGetter<ILightingTemplateGetter>? _LightingTemplates => _LightingTemplatesLocations != null ? SkyrimGroupBinaryOverlay<ILightingTemplateGetter>.SkyrimGroupFactory(_stream, _LightingTemplatesLocations, _package) : default;
        public ISkyrimGroupGetter<ILightingTemplateGetter> LightingTemplates => _LightingTemplates ?? new SkyrimGroup<LightingTemplate>(this);
        #endregion
        #region MusicTypes
        private List<RangeInt64>? _MusicTypesLocations;
        private ISkyrimGroupGetter<IMusicTypeGetter>? _MusicTypes => _MusicTypesLocations != null ? SkyrimGroupBinaryOverlay<IMusicTypeGetter>.SkyrimGroupFactory(_stream, _MusicTypesLocations, _package) : default;
        public ISkyrimGroupGetter<IMusicTypeGetter> MusicTypes => _MusicTypes ?? new SkyrimGroup<MusicType>(this);
        #endregion
        #region Footsteps
        private List<RangeInt64>? _FootstepsLocations;
        private ISkyrimGroupGetter<IFootstepGetter>? _Footsteps => _FootstepsLocations != null ? SkyrimGroupBinaryOverlay<IFootstepGetter>.SkyrimGroupFactory(_stream, _FootstepsLocations, _package) : default;
        public ISkyrimGroupGetter<IFootstepGetter> Footsteps => _Footsteps ?? new SkyrimGroup<Footstep>(this);
        #endregion
        #region FootstepSets
        private List<RangeInt64>? _FootstepSetsLocations;
        private ISkyrimGroupGetter<IFootstepSetGetter>? _FootstepSets => _FootstepSetsLocations != null ? SkyrimGroupBinaryOverlay<IFootstepSetGetter>.SkyrimGroupFactory(_stream, _FootstepSetsLocations, _package) : default;
        public ISkyrimGroupGetter<IFootstepSetGetter> FootstepSets => _FootstepSets ?? new SkyrimGroup<FootstepSet>(this);
        #endregion
        #region StoryManagerBranchNodes
        private List<RangeInt64>? _StoryManagerBranchNodesLocations;
        private ISkyrimGroupGetter<IStoryManagerBranchNodeGetter>? _StoryManagerBranchNodes => _StoryManagerBranchNodesLocations != null ? SkyrimGroupBinaryOverlay<IStoryManagerBranchNodeGetter>.SkyrimGroupFactory(_stream, _StoryManagerBranchNodesLocations, _package) : default;
        public ISkyrimGroupGetter<IStoryManagerBranchNodeGetter> StoryManagerBranchNodes => _StoryManagerBranchNodes ?? new SkyrimGroup<StoryManagerBranchNode>(this);
        #endregion
        #region StoryManagerQuestNodes
        private List<RangeInt64>? _StoryManagerQuestNodesLocations;
        private ISkyrimGroupGetter<IStoryManagerQuestNodeGetter>? _StoryManagerQuestNodes => _StoryManagerQuestNodesLocations != null ? SkyrimGroupBinaryOverlay<IStoryManagerQuestNodeGetter>.SkyrimGroupFactory(_stream, _StoryManagerQuestNodesLocations, _package) : default;
        public ISkyrimGroupGetter<IStoryManagerQuestNodeGetter> StoryManagerQuestNodes => _StoryManagerQuestNodes ?? new SkyrimGroup<StoryManagerQuestNode>(this);
        #endregion
        #region StoryManagerEventNodes
        private List<RangeInt64>? _StoryManagerEventNodesLocations;
        private ISkyrimGroupGetter<IStoryManagerEventNodeGetter>? _StoryManagerEventNodes => _StoryManagerEventNodesLocations != null ? SkyrimGroupBinaryOverlay<IStoryManagerEventNodeGetter>.SkyrimGroupFactory(_stream, _StoryManagerEventNodesLocations, _package) : default;
        public ISkyrimGroupGetter<IStoryManagerEventNodeGetter> StoryManagerEventNodes => _StoryManagerEventNodes ?? new SkyrimGroup<StoryManagerEventNode>(this);
        #endregion
        #region DialogBranches
        private List<RangeInt64>? _DialogBranchesLocations;
        private ISkyrimGroupGetter<IDialogBranchGetter>? _DialogBranches => _DialogBranchesLocations != null ? SkyrimGroupBinaryOverlay<IDialogBranchGetter>.SkyrimGroupFactory(_stream, _DialogBranchesLocations, _package) : default;
        public ISkyrimGroupGetter<IDialogBranchGetter> DialogBranches => _DialogBranches ?? new SkyrimGroup<DialogBranch>(this);
        #endregion
        #region MusicTracks
        private List<RangeInt64>? _MusicTracksLocations;
        private ISkyrimGroupGetter<IMusicTrackGetter>? _MusicTracks => _MusicTracksLocations != null ? SkyrimGroupBinaryOverlay<IMusicTrackGetter>.SkyrimGroupFactory(_stream, _MusicTracksLocations, _package) : default;
        public ISkyrimGroupGetter<IMusicTrackGetter> MusicTracks => _MusicTracks ?? new SkyrimGroup<MusicTrack>(this);
        #endregion
        #region DialogViews
        private List<RangeInt64>? _DialogViewsLocations;
        private ISkyrimGroupGetter<IDialogViewGetter>? _DialogViews => _DialogViewsLocations != null ? SkyrimGroupBinaryOverlay<IDialogViewGetter>.SkyrimGroupFactory(_stream, _DialogViewsLocations, _package) : default;
        public ISkyrimGroupGetter<IDialogViewGetter> DialogViews => _DialogViews ?? new SkyrimGroup<DialogView>(this);
        #endregion
        #region WordsOfPower
        private List<RangeInt64>? _WordsOfPowerLocations;
        private ISkyrimGroupGetter<IWordOfPowerGetter>? _WordsOfPower => _WordsOfPowerLocations != null ? SkyrimGroupBinaryOverlay<IWordOfPowerGetter>.SkyrimGroupFactory(_stream, _WordsOfPowerLocations, _package) : default;
        public ISkyrimGroupGetter<IWordOfPowerGetter> WordsOfPower => _WordsOfPower ?? new SkyrimGroup<WordOfPower>(this);
        #endregion
        #region Shouts
        private List<RangeInt64>? _ShoutsLocations;
        private ISkyrimGroupGetter<IShoutGetter>? _Shouts => _ShoutsLocations != null ? SkyrimGroupBinaryOverlay<IShoutGetter>.SkyrimGroupFactory(_stream, _ShoutsLocations, _package) : default;
        public ISkyrimGroupGetter<IShoutGetter> Shouts => _Shouts ?? new SkyrimGroup<Shout>(this);
        #endregion
        #region EquipTypes
        private List<RangeInt64>? _EquipTypesLocations;
        private ISkyrimGroupGetter<IEquipTypeGetter>? _EquipTypes => _EquipTypesLocations != null ? SkyrimGroupBinaryOverlay<IEquipTypeGetter>.SkyrimGroupFactory(_stream, _EquipTypesLocations, _package) : default;
        public ISkyrimGroupGetter<IEquipTypeGetter> EquipTypes => _EquipTypes ?? new SkyrimGroup<EquipType>(this);
        #endregion
        #region Relationships
        private List<RangeInt64>? _RelationshipsLocations;
        private ISkyrimGroupGetter<IRelationshipGetter>? _Relationships => _RelationshipsLocations != null ? SkyrimGroupBinaryOverlay<IRelationshipGetter>.SkyrimGroupFactory(_stream, _RelationshipsLocations, _package) : default;
        public ISkyrimGroupGetter<IRelationshipGetter> Relationships => _Relationships ?? new SkyrimGroup<Relationship>(this);
        #endregion
        #region Scenes
        private List<RangeInt64>? _ScenesLocations;
        private ISkyrimGroupGetter<ISceneGetter>? _Scenes => _ScenesLocations != null ? SkyrimGroupBinaryOverlay<ISceneGetter>.SkyrimGroupFactory(_stream, _ScenesLocations, _package) : default;
        public ISkyrimGroupGetter<ISceneGetter> Scenes => _Scenes ?? new SkyrimGroup<Scene>(this);
        #endregion
        #region AssociationTypes
        private List<RangeInt64>? _AssociationTypesLocations;
        private ISkyrimGroupGetter<IAssociationTypeGetter>? _AssociationTypes => _AssociationTypesLocations != null ? SkyrimGroupBinaryOverlay<IAssociationTypeGetter>.SkyrimGroupFactory(_stream, _AssociationTypesLocations, _package) : default;
        public ISkyrimGroupGetter<IAssociationTypeGetter> AssociationTypes => _AssociationTypes ?? new SkyrimGroup<AssociationType>(this);
        #endregion
        #region Outfits
        private List<RangeInt64>? _OutfitsLocations;
        private ISkyrimGroupGetter<IOutfitGetter>? _Outfits => _OutfitsLocations != null ? SkyrimGroupBinaryOverlay<IOutfitGetter>.SkyrimGroupFactory(_stream, _OutfitsLocations, _package) : default;
        public ISkyrimGroupGetter<IOutfitGetter> Outfits => _Outfits ?? new SkyrimGroup<Outfit>(this);
        #endregion
        #region ArtObjects
        private List<RangeInt64>? _ArtObjectsLocations;
        private ISkyrimGroupGetter<IArtObjectGetter>? _ArtObjects => _ArtObjectsLocations != null ? SkyrimGroupBinaryOverlay<IArtObjectGetter>.SkyrimGroupFactory(_stream, _ArtObjectsLocations, _package) : default;
        public ISkyrimGroupGetter<IArtObjectGetter> ArtObjects => _ArtObjects ?? new SkyrimGroup<ArtObject>(this);
        #endregion
        #region MaterialObjects
        private List<RangeInt64>? _MaterialObjectsLocations;
        private ISkyrimGroupGetter<IMaterialObjectGetter>? _MaterialObjects => _MaterialObjectsLocations != null ? SkyrimGroupBinaryOverlay<IMaterialObjectGetter>.SkyrimGroupFactory(_stream, _MaterialObjectsLocations, _package) : default;
        public ISkyrimGroupGetter<IMaterialObjectGetter> MaterialObjects => _MaterialObjects ?? new SkyrimGroup<MaterialObject>(this);
        #endregion
        #region MovementTypes
        private List<RangeInt64>? _MovementTypesLocations;
        private ISkyrimGroupGetter<IMovementTypeGetter>? _MovementTypes => _MovementTypesLocations != null ? SkyrimGroupBinaryOverlay<IMovementTypeGetter>.SkyrimGroupFactory(_stream, _MovementTypesLocations, _package) : default;
        public ISkyrimGroupGetter<IMovementTypeGetter> MovementTypes => _MovementTypes ?? new SkyrimGroup<MovementType>(this);
        #endregion
        #region SoundDescriptors
        private List<RangeInt64>? _SoundDescriptorsLocations;
        private ISkyrimGroupGetter<ISoundDescriptorGetter>? _SoundDescriptors => _SoundDescriptorsLocations != null ? SkyrimGroupBinaryOverlay<ISoundDescriptorGetter>.SkyrimGroupFactory(_stream, _SoundDescriptorsLocations, _package) : default;
        public ISkyrimGroupGetter<ISoundDescriptorGetter> SoundDescriptors => _SoundDescriptors ?? new SkyrimGroup<SoundDescriptor>(this);
        #endregion
        #region DualCastData
        private List<RangeInt64>? _DualCastDataLocations;
        private ISkyrimGroupGetter<IDualCastDataGetter>? _DualCastData => _DualCastDataLocations != null ? SkyrimGroupBinaryOverlay<IDualCastDataGetter>.SkyrimGroupFactory(_stream, _DualCastDataLocations, _package) : default;
        public ISkyrimGroupGetter<IDualCastDataGetter> DualCastData => _DualCastData ?? new SkyrimGroup<DualCastData>(this);
        #endregion
        #region SoundCategories
        private List<RangeInt64>? _SoundCategoriesLocations;
        private ISkyrimGroupGetter<ISoundCategoryGetter>? _SoundCategories => _SoundCategoriesLocations != null ? SkyrimGroupBinaryOverlay<ISoundCategoryGetter>.SkyrimGroupFactory(_stream, _SoundCategoriesLocations, _package) : default;
        public ISkyrimGroupGetter<ISoundCategoryGetter> SoundCategories => _SoundCategories ?? new SkyrimGroup<SoundCategory>(this);
        #endregion
        #region SoundOutputModels
        private List<RangeInt64>? _SoundOutputModelsLocations;
        private ISkyrimGroupGetter<ISoundOutputModelGetter>? _SoundOutputModels => _SoundOutputModelsLocations != null ? SkyrimGroupBinaryOverlay<ISoundOutputModelGetter>.SkyrimGroupFactory(_stream, _SoundOutputModelsLocations, _package) : default;
        public ISkyrimGroupGetter<ISoundOutputModelGetter> SoundOutputModels => _SoundOutputModels ?? new SkyrimGroup<SoundOutputModel>(this);
        #endregion
        #region CollisionLayers
        private List<RangeInt64>? _CollisionLayersLocations;
        private ISkyrimGroupGetter<ICollisionLayerGetter>? _CollisionLayers => _CollisionLayersLocations != null ? SkyrimGroupBinaryOverlay<ICollisionLayerGetter>.SkyrimGroupFactory(_stream, _CollisionLayersLocations, _package) : default;
        public ISkyrimGroupGetter<ICollisionLayerGetter> CollisionLayers => _CollisionLayers ?? new SkyrimGroup<CollisionLayer>(this);
        #endregion
        #region Colors
        private List<RangeInt64>? _ColorsLocations;
        private ISkyrimGroupGetter<IColorRecordGetter>? _Colors => _ColorsLocations != null ? SkyrimGroupBinaryOverlay<IColorRecordGetter>.SkyrimGroupFactory(_stream, _ColorsLocations, _package) : default;
        public ISkyrimGroupGetter<IColorRecordGetter> Colors => _Colors ?? new SkyrimGroup<ColorRecord>(this);
        #endregion
        #region ReverbParameters
        private List<RangeInt64>? _ReverbParametersLocations;
        private ISkyrimGroupGetter<IReverbParametersGetter>? _ReverbParameters => _ReverbParametersLocations != null ? SkyrimGroupBinaryOverlay<IReverbParametersGetter>.SkyrimGroupFactory(_stream, _ReverbParametersLocations, _package) : default;
        public ISkyrimGroupGetter<IReverbParametersGetter> ReverbParameters => _ReverbParameters ?? new SkyrimGroup<ReverbParameters>(this);
        #endregion
        #region VolumetricLightings
        private List<RangeInt64>? _VolumetricLightingsLocations;
        private ISkyrimGroupGetter<IVolumetricLightingGetter>? _VolumetricLightings => _VolumetricLightingsLocations != null ? SkyrimGroupBinaryOverlay<IVolumetricLightingGetter>.SkyrimGroupFactory(_stream, _VolumetricLightingsLocations, _package) : default;
        public ISkyrimGroupGetter<IVolumetricLightingGetter> VolumetricLightings => _VolumetricLightings ?? new SkyrimGroup<VolumetricLighting>(this);
        #endregion
        #region LensFlares
        private List<RangeInt64>? _LensFlaresLocations;
        private ISkyrimGroupGetter<ILensFlareGetter>? _LensFlares => _LensFlaresLocations != null ? SkyrimGroupBinaryOverlay<ILensFlareGetter>.SkyrimGroupFactory(_stream, _LensFlaresLocations, _package) : default;
        public ISkyrimGroupGetter<ILensFlareGetter> LensFlares => _LensFlares ?? new SkyrimGroup<LensFlare>(this);
        #endregion
        protected SkyrimModBinaryOverlay(
            IMutagenReadStream stream,
            ModKey modKey,
            bool shouldDispose,
            SkyrimRelease release)
        {
            this.ModKey = modKey;
            this.SkyrimRelease = release;
            this._stream = stream;
            this._package = new BinaryOverlayFactoryPackage(stream.MetaData);
            this._shouldDispose = shouldDispose;
        }

        public static SkyrimModBinaryOverlay SkyrimModFactory(
            ModPath path,
            SkyrimRelease release,
            BinaryReadParameters? param)
        {
            param ??= BinaryReadParameters.Default;
            var meta = ParsingMeta.Factory(param, release.ToGameRelease(), path);
            meta.RecordInfoCache = new RecordTypeInfoCacheReader(() => new MutagenBinaryReadStream(path, meta));
            var stream = new MutagenBinaryReadStream(
                path: path.Path,
                metaData: meta);
            try
            {
                if (stream.Remaining < 12)
                {
                    throw new ArgumentException("File stream was too short to parse flags");
                }
                var flags = stream.GetInt32(offset: 8);
                if (Enums.HasFlag(flags, (int)SkyrimModHeader.HeaderFlag.Localized))
                {
                    meta.StringsLookup = StringsFolderLookupOverlay.TypicalFactory(release.ToGameRelease(), path.ModKey, Path.GetDirectoryName(path.Path)!, param.StringsParam, fileSystem: param.FileSystem);
                }
                return SkyrimModFactory(
                    stream: stream,
                    path.ModKey,
                    release: release,
                    shouldDispose: true);
            }
            catch (Exception)
            {
                stream.Dispose();
                throw;
            }
        }

        public static SkyrimModBinaryOverlay SkyrimModFactory(
            IMutagenReadStream stream,
            ModKey modKey,
            SkyrimRelease release,
            bool shouldDispose)
        {
            var ret = new SkyrimModBinaryOverlay(
                stream: stream,
                release: release,
                modKey: modKey,
                shouldDispose: shouldDispose);
            PluginBinaryOverlay.FillModTypes(
                stream: stream,
                package: ret._package,
                fill: ret.FillRecordType);
            return ret;
        }


        public ParseResult FillRecordType(
            IBinaryReadStream stream,
            long finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TES4:
                {
                    _ModHeaderLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    return (int)SkyrimMod_FieldIndex.ModHeader;
                }
                case RecordTypeInts.GMST:
                {
                    _GameSettingsLocations ??= new();
                    _GameSettingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.GameSettings;
                }
                case RecordTypeInts.KYWD:
                {
                    _KeywordsLocations ??= new();
                    _KeywordsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Keywords;
                }
                case RecordTypeInts.LCRT:
                {
                    _LocationReferenceTypesLocations ??= new();
                    _LocationReferenceTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.LocationReferenceTypes;
                }
                case RecordTypeInts.AACT:
                {
                    _ActionsLocations ??= new();
                    _ActionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Actions;
                }
                case RecordTypeInts.TXST:
                {
                    _TextureSetsLocations ??= new();
                    _TextureSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.TextureSets;
                }
                case RecordTypeInts.GLOB:
                {
                    _GlobalsLocations ??= new();
                    _GlobalsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Globals;
                }
                case RecordTypeInts.CLAS:
                {
                    _ClassesLocations ??= new();
                    _ClassesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Classes;
                }
                case RecordTypeInts.FACT:
                {
                    _FactionsLocations ??= new();
                    _FactionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Factions;
                }
                case RecordTypeInts.HDPT:
                {
                    _HeadPartsLocations ??= new();
                    _HeadPartsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HAIR:
                {
                    _HairsLocations ??= new();
                    _HairsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Hairs;
                }
                case RecordTypeInts.EYES:
                {
                    _EyesLocations ??= new();
                    _EyesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Eyes;
                }
                case RecordTypeInts.RACE:
                {
                    _RacesLocations ??= new();
                    _RacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Races;
                }
                case RecordTypeInts.SOUN:
                {
                    _SoundMarkersLocations ??= new();
                    _SoundMarkersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.SoundMarkers;
                }
                case RecordTypeInts.ASPC:
                {
                    _AcousticSpacesLocations ??= new();
                    _AcousticSpacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.AcousticSpaces;
                }
                case RecordTypeInts.MGEF:
                {
                    _MagicEffectsLocations ??= new();
                    _MagicEffectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.MagicEffects;
                }
                case RecordTypeInts.LTEX:
                {
                    _LandscapeTexturesLocations ??= new();
                    _LandscapeTexturesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.LandscapeTextures;
                }
                case RecordTypeInts.ENCH:
                {
                    _ObjectEffectsLocations ??= new();
                    _ObjectEffectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.ObjectEffects;
                }
                case RecordTypeInts.SPEL:
                {
                    _SpellsLocations ??= new();
                    _SpellsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Spells;
                }
                case RecordTypeInts.SCRL:
                {
                    _ScrollsLocations ??= new();
                    _ScrollsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Scrolls;
                }
                case RecordTypeInts.ACTI:
                {
                    _ActivatorsLocations ??= new();
                    _ActivatorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Activators;
                }
                case RecordTypeInts.TACT:
                {
                    _TalkingActivatorsLocations ??= new();
                    _TalkingActivatorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.TalkingActivators;
                }
                case RecordTypeInts.ARMO:
                {
                    _ArmorsLocations ??= new();
                    _ArmorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Armors;
                }
                case RecordTypeInts.BOOK:
                {
                    _BooksLocations ??= new();
                    _BooksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Books;
                }
                case RecordTypeInts.CONT:
                {
                    _ContainersLocations ??= new();
                    _ContainersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Containers;
                }
                case RecordTypeInts.DOOR:
                {
                    _DoorsLocations ??= new();
                    _DoorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Doors;
                }
                case RecordTypeInts.INGR:
                {
                    _IngredientsLocations ??= new();
                    _IngredientsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Ingredients;
                }
                case RecordTypeInts.LIGH:
                {
                    _LightsLocations ??= new();
                    _LightsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Lights;
                }
                case RecordTypeInts.MISC:
                {
                    _MiscItemsLocations ??= new();
                    _MiscItemsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.MiscItems;
                }
                case RecordTypeInts.APPA:
                {
                    _AlchemicalApparatusesLocations ??= new();
                    _AlchemicalApparatusesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.AlchemicalApparatuses;
                }
                case RecordTypeInts.STAT:
                {
                    _StaticsLocations ??= new();
                    _StaticsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Statics;
                }
                case RecordTypeInts.MSTT:
                {
                    _MoveableStaticsLocations ??= new();
                    _MoveableStaticsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.MoveableStatics;
                }
                case RecordTypeInts.GRAS:
                {
                    _GrassesLocations ??= new();
                    _GrassesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Grasses;
                }
                case RecordTypeInts.TREE:
                {
                    _TreesLocations ??= new();
                    _TreesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Trees;
                }
                case RecordTypeInts.FLOR:
                {
                    _FloraeLocations ??= new();
                    _FloraeLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Florae;
                }
                case RecordTypeInts.FURN:
                {
                    _FurnitureLocations ??= new();
                    _FurnitureLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Furniture;
                }
                case RecordTypeInts.WEAP:
                {
                    _WeaponsLocations ??= new();
                    _WeaponsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Weapons;
                }
                case RecordTypeInts.AMMO:
                {
                    _AmmunitionsLocations ??= new();
                    _AmmunitionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Ammunitions;
                }
                case RecordTypeInts.NPC_:
                {
                    _NpcsLocations ??= new();
                    _NpcsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Npcs;
                }
                case RecordTypeInts.LVLN:
                {
                    _LeveledNpcsLocations ??= new();
                    _LeveledNpcsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.LeveledNpcs;
                }
                case RecordTypeInts.KEYM:
                {
                    _KeysLocations ??= new();
                    _KeysLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Keys;
                }
                case RecordTypeInts.ALCH:
                {
                    _IngestiblesLocations ??= new();
                    _IngestiblesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Ingestibles;
                }
                case RecordTypeInts.IDLM:
                {
                    _IdleMarkersLocations ??= new();
                    _IdleMarkersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.IdleMarkers;
                }
                case RecordTypeInts.COBJ:
                {
                    _ConstructibleObjectsLocations ??= new();
                    _ConstructibleObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.ConstructibleObjects;
                }
                case RecordTypeInts.PROJ:
                {
                    _ProjectilesLocations ??= new();
                    _ProjectilesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Projectiles;
                }
                case RecordTypeInts.HAZD:
                {
                    _HazardsLocations ??= new();
                    _HazardsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Hazards;
                }
                case RecordTypeInts.SLGM:
                {
                    _SoulGemsLocations ??= new();
                    _SoulGemsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.SoulGems;
                }
                case RecordTypeInts.LVLI:
                {
                    _LeveledItemsLocations ??= new();
                    _LeveledItemsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.LeveledItems;
                }
                case RecordTypeInts.WTHR:
                {
                    _WeathersLocations ??= new();
                    _WeathersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Weathers;
                }
                case RecordTypeInts.CLMT:
                {
                    _ClimatesLocations ??= new();
                    _ClimatesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Climates;
                }
                case RecordTypeInts.SPGD:
                {
                    _ShaderParticleGeometriesLocations ??= new();
                    _ShaderParticleGeometriesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.ShaderParticleGeometries;
                }
                case RecordTypeInts.RFCT:
                {
                    _VisualEffectsLocations ??= new();
                    _VisualEffectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.VisualEffects;
                }
                case RecordTypeInts.REGN:
                {
                    _RegionsLocations ??= new();
                    _RegionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Regions;
                }
                case RecordTypeInts.NAVI:
                {
                    _NavigationMeshInfoMapsLocations ??= new();
                    _NavigationMeshInfoMapsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.NavigationMeshInfoMaps;
                }
                case RecordTypeInts.CELL:
                {
                    _CellsLocation = new RangeInt64((stream.Position - offset), finalPos - offset);
                    return (int)SkyrimMod_FieldIndex.Cells;
                }
                case RecordTypeInts.WRLD:
                {
                    _WorldspacesLocations ??= new();
                    _WorldspacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Worldspaces;
                }
                case RecordTypeInts.DIAL:
                {
                    _DialogTopicsLocations ??= new();
                    _DialogTopicsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.DialogTopics;
                }
                case RecordTypeInts.QUST:
                {
                    _QuestsLocations ??= new();
                    _QuestsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Quests;
                }
                case RecordTypeInts.IDLE:
                {
                    _IdleAnimationsLocations ??= new();
                    _IdleAnimationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.IdleAnimations;
                }
                case RecordTypeInts.PACK:
                {
                    _PackagesLocations ??= new();
                    _PackagesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Packages;
                }
                case RecordTypeInts.CSTY:
                {
                    _CombatStylesLocations ??= new();
                    _CombatStylesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.CombatStyles;
                }
                case RecordTypeInts.LSCR:
                {
                    _LoadScreensLocations ??= new();
                    _LoadScreensLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.LoadScreens;
                }
                case RecordTypeInts.LVSP:
                {
                    _LeveledSpellsLocations ??= new();
                    _LeveledSpellsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.LeveledSpells;
                }
                case RecordTypeInts.ANIO:
                {
                    _AnimatedObjectsLocations ??= new();
                    _AnimatedObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.AnimatedObjects;
                }
                case RecordTypeInts.WATR:
                {
                    _WatersLocations ??= new();
                    _WatersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Waters;
                }
                case RecordTypeInts.EFSH:
                {
                    _EffectShadersLocations ??= new();
                    _EffectShadersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.EffectShaders;
                }
                case RecordTypeInts.EXPL:
                {
                    _ExplosionsLocations ??= new();
                    _ExplosionsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Explosions;
                }
                case RecordTypeInts.DEBR:
                {
                    _DebrisLocations ??= new();
                    _DebrisLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Debris;
                }
                case RecordTypeInts.IMGS:
                {
                    _ImageSpacesLocations ??= new();
                    _ImageSpacesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.IMAD:
                {
                    _ImageSpaceAdaptersLocations ??= new();
                    _ImageSpaceAdaptersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.ImageSpaceAdapters;
                }
                case RecordTypeInts.FLST:
                {
                    _FormListsLocations ??= new();
                    _FormListsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.FormLists;
                }
                case RecordTypeInts.PERK:
                {
                    _PerksLocations ??= new();
                    _PerksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Perks;
                }
                case RecordTypeInts.BPTD:
                {
                    _BodyPartsLocations ??= new();
                    _BodyPartsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.BodyParts;
                }
                case RecordTypeInts.ADDN:
                {
                    _AddonNodesLocations ??= new();
                    _AddonNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.AddonNodes;
                }
                case RecordTypeInts.AVIF:
                {
                    _ActorValueInformationLocations ??= new();
                    _ActorValueInformationLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.ActorValueInformation;
                }
                case RecordTypeInts.CAMS:
                {
                    _CameraShotsLocations ??= new();
                    _CameraShotsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.CameraShots;
                }
                case RecordTypeInts.CPTH:
                {
                    _CameraPathsLocations ??= new();
                    _CameraPathsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.CameraPaths;
                }
                case RecordTypeInts.VTYP:
                {
                    _VoiceTypesLocations ??= new();
                    _VoiceTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.MATT:
                {
                    _MaterialTypesLocations ??= new();
                    _MaterialTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.MaterialTypes;
                }
                case RecordTypeInts.IPCT:
                {
                    _ImpactsLocations ??= new();
                    _ImpactsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Impacts;
                }
                case RecordTypeInts.IPDS:
                {
                    _ImpactDataSetsLocations ??= new();
                    _ImpactDataSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.ImpactDataSets;
                }
                case RecordTypeInts.ARMA:
                {
                    _ArmorAddonsLocations ??= new();
                    _ArmorAddonsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.ArmorAddons;
                }
                case RecordTypeInts.ECZN:
                {
                    _EncounterZonesLocations ??= new();
                    _EncounterZonesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.EncounterZones;
                }
                case RecordTypeInts.LCTN:
                {
                    _LocationsLocations ??= new();
                    _LocationsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Locations;
                }
                case RecordTypeInts.MESG:
                {
                    _MessagesLocations ??= new();
                    _MessagesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Messages;
                }
                case RecordTypeInts.DOBJ:
                {
                    _DefaultObjectManagersLocations ??= new();
                    _DefaultObjectManagersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.DefaultObjectManagers;
                }
                case RecordTypeInts.LGTM:
                {
                    _LightingTemplatesLocations ??= new();
                    _LightingTemplatesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.LightingTemplates;
                }
                case RecordTypeInts.MUSC:
                {
                    _MusicTypesLocations ??= new();
                    _MusicTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.MusicTypes;
                }
                case RecordTypeInts.FSTP:
                {
                    _FootstepsLocations ??= new();
                    _FootstepsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Footsteps;
                }
                case RecordTypeInts.FSTS:
                {
                    _FootstepSetsLocations ??= new();
                    _FootstepSetsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.FootstepSets;
                }
                case RecordTypeInts.SMBN:
                {
                    _StoryManagerBranchNodesLocations ??= new();
                    _StoryManagerBranchNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.StoryManagerBranchNodes;
                }
                case RecordTypeInts.SMQN:
                {
                    _StoryManagerQuestNodesLocations ??= new();
                    _StoryManagerQuestNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.StoryManagerQuestNodes;
                }
                case RecordTypeInts.SMEN:
                {
                    _StoryManagerEventNodesLocations ??= new();
                    _StoryManagerEventNodesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.StoryManagerEventNodes;
                }
                case RecordTypeInts.DLBR:
                {
                    _DialogBranchesLocations ??= new();
                    _DialogBranchesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.DialogBranches;
                }
                case RecordTypeInts.MUST:
                {
                    _MusicTracksLocations ??= new();
                    _MusicTracksLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.MusicTracks;
                }
                case RecordTypeInts.DLVW:
                {
                    _DialogViewsLocations ??= new();
                    _DialogViewsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.DialogViews;
                }
                case RecordTypeInts.WOOP:
                {
                    _WordsOfPowerLocations ??= new();
                    _WordsOfPowerLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.WordsOfPower;
                }
                case RecordTypeInts.SHOU:
                {
                    _ShoutsLocations ??= new();
                    _ShoutsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Shouts;
                }
                case RecordTypeInts.EQUP:
                {
                    _EquipTypesLocations ??= new();
                    _EquipTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.EquipTypes;
                }
                case RecordTypeInts.RELA:
                {
                    _RelationshipsLocations ??= new();
                    _RelationshipsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Relationships;
                }
                case RecordTypeInts.SCEN:
                {
                    _ScenesLocations ??= new();
                    _ScenesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Scenes;
                }
                case RecordTypeInts.ASTP:
                {
                    _AssociationTypesLocations ??= new();
                    _AssociationTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.AssociationTypes;
                }
                case RecordTypeInts.OTFT:
                {
                    _OutfitsLocations ??= new();
                    _OutfitsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Outfits;
                }
                case RecordTypeInts.ARTO:
                {
                    _ArtObjectsLocations ??= new();
                    _ArtObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.ArtObjects;
                }
                case RecordTypeInts.MATO:
                {
                    _MaterialObjectsLocations ??= new();
                    _MaterialObjectsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.MaterialObjects;
                }
                case RecordTypeInts.MOVT:
                {
                    _MovementTypesLocations ??= new();
                    _MovementTypesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.MovementTypes;
                }
                case RecordTypeInts.SNDR:
                {
                    _SoundDescriptorsLocations ??= new();
                    _SoundDescriptorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.SoundDescriptors;
                }
                case RecordTypeInts.DUAL:
                {
                    _DualCastDataLocations ??= new();
                    _DualCastDataLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.DualCastData;
                }
                case RecordTypeInts.SNCT:
                {
                    _SoundCategoriesLocations ??= new();
                    _SoundCategoriesLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.SoundCategories;
                }
                case RecordTypeInts.SOPM:
                {
                    _SoundOutputModelsLocations ??= new();
                    _SoundOutputModelsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.SoundOutputModels;
                }
                case RecordTypeInts.COLL:
                {
                    _CollisionLayersLocations ??= new();
                    _CollisionLayersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.CollisionLayers;
                }
                case RecordTypeInts.CLFM:
                {
                    _ColorsLocations ??= new();
                    _ColorsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.Colors;
                }
                case RecordTypeInts.REVB:
                {
                    _ReverbParametersLocations ??= new();
                    _ReverbParametersLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.ReverbParameters;
                }
                case RecordTypeInts.VOLI:
                {
                    _VolumetricLightingsLocations ??= new();
                    _VolumetricLightingsLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.VolumetricLightings;
                }
                case RecordTypeInts.LENS:
                {
                    _LensFlaresLocations ??= new();
                    _LensFlaresLocations.Add(new RangeInt64((stream.Position - offset), finalPos - offset));
                    return (int)SkyrimMod_FieldIndex.LensFlares;
                }
                default:
                    return default(int?);
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SkyrimModMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ISkyrimModGetter rhs) return false;
            return ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISkyrimModGetter? obj)
        {
            return ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SkyrimModCommon)((ISkyrimModGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        IMask<bool> IEqualsMask.GetEqualsMask(object rhs, EqualsMaskHelper.Include include = EqualsMaskHelper.Include.OnlyFailures) => SkyrimModMixIn.GetEqualsMask(this, (ISkyrimModGetter)rhs, include);
    }

}
#endregion

#endregion

