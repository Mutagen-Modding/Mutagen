/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Assets;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Climate :
        SkyrimMajorRecord,
        IClimateInternal,
        IEquatable<IClimateGetter>,
        ILoquiObjectSetter<Climate>
    {
        #region Ctor
        protected Climate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region WeatherTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WeatherType>? _WeatherTypes;
        public ExtendedList<WeatherType>? WeatherTypes
        {
            get => this._WeatherTypes;
            set => this._WeatherTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWeatherTypeGetter>? IClimateGetter.WeatherTypes => _WeatherTypes;
        #endregion

        #endregion
        #region SunTexture
        public AssetLink<SkyrimTextureAssetType>? SunTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? IClimateGetter.SunTexture => this.SunTexture;
        #endregion
        #region SunGlareTexture
        public AssetLink<SkyrimTextureAssetType>? SunGlareTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? IClimateGetter.SunGlareTexture => this.SunGlareTexture;
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IClimateGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region SunriseBegin
        public TimeOnly SunriseBegin { get; set; } = default(TimeOnly);
        #endregion
        #region SunriseEnd
        public TimeOnly SunriseEnd { get; set; } = default(TimeOnly);
        #endregion
        #region SunsetBegin
        public TimeOnly SunsetBegin { get; set; } = default(TimeOnly);
        #endregion
        #region SunsetEnd
        public TimeOnly SunsetEnd { get; set; } = default(TimeOnly);
        #endregion
        #region Volatility
        public Byte Volatility { get; set; } = default(Byte);
        #endregion
        #region Moons
        public Climate.Moon Moons { get; set; } = default(Climate.Moon);
        #endregion
        #region PhaseLength
        public Byte PhaseLength { get; set; } = default(Byte);
        public static RangeUInt8 PhaseLength_Range = new RangeUInt8(0, 64);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ClimateMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.WeatherTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>());
                this.SunTexture = initialValue;
                this.SunGlareTexture = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.SunriseBegin = initialValue;
                this.SunriseEnd = initialValue;
                this.SunsetBegin = initialValue;
                this.SunsetEnd = initialValue;
                this.Volatility = initialValue;
                this.Moons = initialValue;
                this.PhaseLength = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem WeatherTypes,
                TItem SunTexture,
                TItem SunGlareTexture,
                TItem Model,
                TItem SunriseBegin,
                TItem SunriseEnd,
                TItem SunsetBegin,
                TItem SunsetEnd,
                TItem Volatility,
                TItem Moons,
                TItem PhaseLength)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.WeatherTypes = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>?>(WeatherTypes, Enumerable.Empty<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>());
                this.SunTexture = SunTexture;
                this.SunGlareTexture = SunGlareTexture;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.SunriseBegin = SunriseBegin;
                this.SunriseEnd = SunriseEnd;
                this.SunsetBegin = SunsetBegin;
                this.SunsetEnd = SunsetEnd;
                this.Volatility = Volatility;
                this.Moons = Moons;
                this.PhaseLength = PhaseLength;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherType.Mask<TItem>?>>?>? WeatherTypes;
            public TItem SunTexture;
            public TItem SunGlareTexture;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem SunriseBegin;
            public TItem SunriseEnd;
            public TItem SunsetBegin;
            public TItem SunsetEnd;
            public TItem Volatility;
            public TItem Moons;
            public TItem PhaseLength;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.WeatherTypes, rhs.WeatherTypes)) return false;
                if (!object.Equals(this.SunTexture, rhs.SunTexture)) return false;
                if (!object.Equals(this.SunGlareTexture, rhs.SunGlareTexture)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.SunriseBegin, rhs.SunriseBegin)) return false;
                if (!object.Equals(this.SunriseEnd, rhs.SunriseEnd)) return false;
                if (!object.Equals(this.SunsetBegin, rhs.SunsetBegin)) return false;
                if (!object.Equals(this.SunsetEnd, rhs.SunsetEnd)) return false;
                if (!object.Equals(this.Volatility, rhs.Volatility)) return false;
                if (!object.Equals(this.Moons, rhs.Moons)) return false;
                if (!object.Equals(this.PhaseLength, rhs.PhaseLength)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.WeatherTypes);
                hash.Add(this.SunTexture);
                hash.Add(this.SunGlareTexture);
                hash.Add(this.Model);
                hash.Add(this.SunriseBegin);
                hash.Add(this.SunriseEnd);
                hash.Add(this.SunsetBegin);
                hash.Add(this.SunsetEnd);
                hash.Add(this.Volatility);
                hash.Add(this.Moons);
                hash.Add(this.PhaseLength);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.WeatherTypes != null)
                {
                    if (!eval(this.WeatherTypes.Overall)) return false;
                    if (this.WeatherTypes.Specific != null)
                    {
                        foreach (var item in this.WeatherTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SunTexture)) return false;
                if (!eval(this.SunGlareTexture)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.SunriseBegin)) return false;
                if (!eval(this.SunriseEnd)) return false;
                if (!eval(this.SunsetBegin)) return false;
                if (!eval(this.SunsetEnd)) return false;
                if (!eval(this.Volatility)) return false;
                if (!eval(this.Moons)) return false;
                if (!eval(this.PhaseLength)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.WeatherTypes != null)
                {
                    if (eval(this.WeatherTypes.Overall)) return true;
                    if (this.WeatherTypes.Specific != null)
                    {
                        foreach (var item in this.WeatherTypes.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SunTexture)) return true;
                if (eval(this.SunGlareTexture)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.SunriseBegin)) return true;
                if (eval(this.SunriseEnd)) return true;
                if (eval(this.SunsetBegin)) return true;
                if (eval(this.SunsetEnd)) return true;
                if (eval(this.Volatility)) return true;
                if (eval(this.Moons)) return true;
                if (eval(this.PhaseLength)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Climate.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (WeatherTypes != null)
                {
                    obj.WeatherTypes = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherType.Mask<R>?>>?>(eval(this.WeatherTypes.Overall), Enumerable.Empty<MaskItemIndexed<R, WeatherType.Mask<R>?>>());
                    if (WeatherTypes.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WeatherType.Mask<R>?>>();
                        obj.WeatherTypes.Specific = l;
                        foreach (var item in WeatherTypes.Specific)
                        {
                            MaskItemIndexed<R, WeatherType.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, WeatherType.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SunTexture = eval(this.SunTexture);
                obj.SunGlareTexture = eval(this.SunGlareTexture);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.SunriseBegin = eval(this.SunriseBegin);
                obj.SunriseEnd = eval(this.SunriseEnd);
                obj.SunsetBegin = eval(this.SunsetBegin);
                obj.SunsetEnd = eval(this.SunsetEnd);
                obj.Volatility = eval(this.Volatility);
                obj.Moons = eval(this.Moons);
                obj.PhaseLength = eval(this.PhaseLength);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Climate.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Climate.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Climate.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.WeatherTypes?.Overall ?? true)
                        && WeatherTypes is {} WeatherTypesItem)
                    {
                        sb.AppendLine("WeatherTypes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(WeatherTypesItem.Overall);
                            if (WeatherTypesItem.Specific != null)
                            {
                                foreach (var subItem in WeatherTypesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SunTexture ?? true)
                    {
                        sb.AppendItem(SunTexture, "SunTexture");
                    }
                    if (printMask?.SunGlareTexture ?? true)
                    {
                        sb.AppendItem(SunGlareTexture, "SunGlareTexture");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.SunriseBegin ?? true)
                    {
                        sb.AppendItem(SunriseBegin, "SunriseBegin");
                    }
                    if (printMask?.SunriseEnd ?? true)
                    {
                        sb.AppendItem(SunriseEnd, "SunriseEnd");
                    }
                    if (printMask?.SunsetBegin ?? true)
                    {
                        sb.AppendItem(SunsetBegin, "SunsetBegin");
                    }
                    if (printMask?.SunsetEnd ?? true)
                    {
                        sb.AppendItem(SunsetEnd, "SunsetEnd");
                    }
                    if (printMask?.Volatility ?? true)
                    {
                        sb.AppendItem(Volatility, "Volatility");
                    }
                    if (printMask?.Moons ?? true)
                    {
                        sb.AppendItem(Moons, "Moons");
                    }
                    if (printMask?.PhaseLength ?? true)
                    {
                        sb.AppendItem(PhaseLength, "PhaseLength");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>? WeatherTypes;
            public Exception? SunTexture;
            public Exception? SunGlareTexture;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? SunriseBegin;
            public Exception? SunriseEnd;
            public Exception? SunsetBegin;
            public Exception? SunsetEnd;
            public Exception? Volatility;
            public Exception? Moons;
            public Exception? PhaseLength;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.WeatherTypes:
                        return WeatherTypes;
                    case Climate_FieldIndex.SunTexture:
                        return SunTexture;
                    case Climate_FieldIndex.SunGlareTexture:
                        return SunGlareTexture;
                    case Climate_FieldIndex.Model:
                        return Model;
                    case Climate_FieldIndex.SunriseBegin:
                        return SunriseBegin;
                    case Climate_FieldIndex.SunriseEnd:
                        return SunriseEnd;
                    case Climate_FieldIndex.SunsetBegin:
                        return SunsetBegin;
                    case Climate_FieldIndex.SunsetEnd:
                        return SunsetEnd;
                    case Climate_FieldIndex.Volatility:
                        return Volatility;
                    case Climate_FieldIndex.Moons:
                        return Moons;
                    case Climate_FieldIndex.PhaseLength:
                        return PhaseLength;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.WeatherTypes:
                        this.WeatherTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>(ex, null);
                        break;
                    case Climate_FieldIndex.SunTexture:
                        this.SunTexture = ex;
                        break;
                    case Climate_FieldIndex.SunGlareTexture:
                        this.SunGlareTexture = ex;
                        break;
                    case Climate_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Climate_FieldIndex.SunriseBegin:
                        this.SunriseBegin = ex;
                        break;
                    case Climate_FieldIndex.SunriseEnd:
                        this.SunriseEnd = ex;
                        break;
                    case Climate_FieldIndex.SunsetBegin:
                        this.SunsetBegin = ex;
                        break;
                    case Climate_FieldIndex.SunsetEnd:
                        this.SunsetEnd = ex;
                        break;
                    case Climate_FieldIndex.Volatility:
                        this.Volatility = ex;
                        break;
                    case Climate_FieldIndex.Moons:
                        this.Moons = ex;
                        break;
                    case Climate_FieldIndex.PhaseLength:
                        this.PhaseLength = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Climate_FieldIndex enu = (Climate_FieldIndex)index;
                switch (enu)
                {
                    case Climate_FieldIndex.WeatherTypes:
                        this.WeatherTypes = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>)obj;
                        break;
                    case Climate_FieldIndex.SunTexture:
                        this.SunTexture = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunGlareTexture:
                        this.SunGlareTexture = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Climate_FieldIndex.SunriseBegin:
                        this.SunriseBegin = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunriseEnd:
                        this.SunriseEnd = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunsetBegin:
                        this.SunsetBegin = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.SunsetEnd:
                        this.SunsetEnd = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.Volatility:
                        this.Volatility = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.Moons:
                        this.Moons = (Exception?)obj;
                        break;
                    case Climate_FieldIndex.PhaseLength:
                        this.PhaseLength = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (WeatherTypes != null) return true;
                if (SunTexture != null) return true;
                if (SunGlareTexture != null) return true;
                if (Model != null) return true;
                if (SunriseBegin != null) return true;
                if (SunriseEnd != null) return true;
                if (SunsetBegin != null) return true;
                if (SunsetEnd != null) return true;
                if (Volatility != null) return true;
                if (Moons != null) return true;
                if (PhaseLength != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (WeatherTypes is {} WeatherTypesItem)
                {
                    sb.AppendLine("WeatherTypes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(WeatherTypesItem.Overall);
                        if (WeatherTypesItem.Specific != null)
                        {
                            foreach (var subItem in WeatherTypesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SunTexture, "SunTexture");
                }
                {
                    sb.AppendItem(SunGlareTexture, "SunGlareTexture");
                }
                Model?.Print(sb);
                {
                    sb.AppendItem(SunriseBegin, "SunriseBegin");
                }
                {
                    sb.AppendItem(SunriseEnd, "SunriseEnd");
                }
                {
                    sb.AppendItem(SunsetBegin, "SunsetBegin");
                }
                {
                    sb.AppendItem(SunsetEnd, "SunsetEnd");
                }
                {
                    sb.AppendItem(Volatility, "Volatility");
                }
                {
                    sb.AppendItem(Moons, "Moons");
                }
                {
                    sb.AppendItem(PhaseLength, "PhaseLength");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.WeatherTypes = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherType.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.WeatherTypes?.Overall, rhs.WeatherTypes?.Overall), Noggog.ExceptionExt.Combine(this.WeatherTypes?.Specific, rhs.WeatherTypes?.Specific));
                ret.SunTexture = this.SunTexture.Combine(rhs.SunTexture);
                ret.SunGlareTexture = this.SunGlareTexture.Combine(rhs.SunGlareTexture);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.SunriseBegin = this.SunriseBegin.Combine(rhs.SunriseBegin);
                ret.SunriseEnd = this.SunriseEnd.Combine(rhs.SunriseEnd);
                ret.SunsetBegin = this.SunsetBegin.Combine(rhs.SunsetBegin);
                ret.SunsetEnd = this.SunsetEnd.Combine(rhs.SunsetEnd);
                ret.Volatility = this.Volatility.Combine(rhs.Volatility);
                ret.Moons = this.Moons.Combine(rhs.Moons);
                ret.PhaseLength = this.PhaseLength.Combine(rhs.PhaseLength);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public WeatherType.TranslationMask? WeatherTypes;
            public bool SunTexture;
            public bool SunGlareTexture;
            public Model.TranslationMask? Model;
            public bool SunriseBegin;
            public bool SunriseEnd;
            public bool SunsetBegin;
            public bool SunsetEnd;
            public bool Volatility;
            public bool Moons;
            public bool PhaseLength;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.SunTexture = defaultOn;
                this.SunGlareTexture = defaultOn;
                this.SunriseBegin = defaultOn;
                this.SunriseEnd = defaultOn;
                this.SunsetBegin = defaultOn;
                this.SunsetEnd = defaultOn;
                this.Volatility = defaultOn;
                this.Moons = defaultOn;
                this.PhaseLength = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((WeatherTypes == null ? DefaultOn : !WeatherTypes.GetCrystal().CopyNothing, WeatherTypes?.GetCrystal()));
                ret.Add((SunTexture, null));
                ret.Add((SunGlareTexture, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((SunriseBegin, null));
                ret.Add((SunriseEnd, null));
                ret.Add((SunsetBegin, null));
                ret.Add((SunsetEnd, null));
                ret.Add((Volatility, null));
                ret.Add((Moons, null));
                ret.Add((PhaseLength, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Climate_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ClimateCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ClimateSetterCommon.Instance.RemapLinks(this, mapping);
        public Climate(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Climate(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Climate(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Climate(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Climate(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Climate>.ToString(this);
        }

        protected override Type LinkType => typeof(IClimate);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ClimateCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => ClimateSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => ClimateSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => ClimateSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IClimateGetter rhs) return false;
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IClimateGetter? obj)
        {
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClimateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClimateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Climate CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Climate();
            ((ClimateSetterCommon)((IClimateGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Climate item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ClimateSetterCommon)((IClimateGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Climate GetNew()
        {
            return new Climate();
        }

    }
    #endregion

    #region Interface
    public partial interface IClimate :
        IAssetLinkContainer,
        IClimateGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IClimateInternal>,
        IModeled,
        ISkyrimMajorRecordInternal
    {
        new ExtendedList<WeatherType>? WeatherTypes { get; set; }
        new AssetLink<SkyrimTextureAssetType>? SunTexture { get; set; }
        new AssetLink<SkyrimTextureAssetType>? SunGlareTexture { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new TimeOnly SunriseBegin { get; set; }
        new TimeOnly SunriseEnd { get; set; }
        new TimeOnly SunsetBegin { get; set; }
        new TimeOnly SunsetEnd { get; set; }
        new Byte Volatility { get; set; }
        new Climate.Moon Moons { get; set; }
        new Byte PhaseLength { get; set; }
    }

    public partial interface IClimateInternal :
        ISkyrimMajorRecordInternal,
        IClimate,
        IClimateGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.CLMT)]
    public partial interface IClimateGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IClimateGetter>,
        IMapsToGetter<IClimateGetter>,
        IModeledGetter
    {
        static new ILoquiRegistration StaticRegistration => Climate_Registration.Instance;
        IReadOnlyList<IWeatherTypeGetter>? WeatherTypes { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? SunTexture { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? SunGlareTexture { get; }
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        TimeOnly SunriseBegin { get; }
        TimeOnly SunriseEnd { get; }
        TimeOnly SunsetBegin { get; }
        TimeOnly SunsetEnd { get; }
        Byte Volatility { get; }
        Climate.Moon Moons { get; }
        Byte PhaseLength { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ClimateMixIn
    {
        public static void Clear(this IClimateInternal item)
        {
            ((ClimateSetterCommon)((IClimateGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Climate.Mask<bool> GetEqualsMask(
            this IClimateGetter item,
            IClimateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IClimateGetter item,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IClimateGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IClimateGetter item,
            IClimateGetter rhs,
            Climate.TranslationMask? equalsMask = null)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IClimateInternal lhs,
            IClimateGetter rhs,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ClimateSetterTranslationCommon)((IClimateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Climate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IClimateInternal lhs,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ClimateSetterTranslationCommon)((IClimateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Climate DeepCopy(
            this IClimateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ClimateSetterTranslationCommon)((IClimateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Climate Duplicate(
            this IClimateGetter item,
            FormKey formKey,
            Climate.TranslationMask? copyMask = null)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Climate Duplicate(
            this IClimateGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IClimateInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ClimateSetterCommon)((IClimateGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Climate_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        WeatherTypes = 7,
        SunTexture = 8,
        SunGlareTexture = 9,
        Model = 10,
        SunriseBegin = 11,
        SunriseEnd = 12,
        SunsetBegin = 13,
        SunsetEnd = 14,
        Volatility = 15,
        Moons = 16,
        PhaseLength = 17,
    }
    #endregion

    #region Registration
    internal partial class Climate_Registration : ILoquiRegistration
    {
        public static readonly Climate_Registration Instance = new Climate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(Climate.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Climate.ErrorMask);

        public static readonly Type ClassType = typeof(Climate);

        public static readonly Type GetterType = typeof(IClimateGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IClimate);

        public static readonly Type? InternalSetterType = typeof(IClimateInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Climate";

        public const string Name = "Climate";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.CLMT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.CLMT);
            var all = RecordCollection.Factory(
                RecordTypes.CLMT,
                RecordTypes.WLST,
                RecordTypes.FNAM,
                RecordTypes.GNAM,
                RecordTypes.MODL,
                RecordTypes.TNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ClimateBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ClimateSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ClimateSetterCommon Instance = new ClimateSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IClimateInternal item)
        {
            ClearPartial();
            item.WeatherTypes = null;
            item.SunTexture = default;
            item.SunGlareTexture = default;
            item.Model = null;
            item.SunriseBegin = default(TimeOnly);
            item.SunriseEnd = default(TimeOnly);
            item.SunsetBegin = default(TimeOnly);
            item.SunsetEnd = default(TimeOnly);
            item.Volatility = default(Byte);
            item.Moons = default(Climate.Moon);
            item.PhaseLength = default(Byte);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IClimateInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IClimateInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IClimate obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.WeatherTypes?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IClimate obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.SunTexture != null)
            {
                yield return obj.SunTexture;
            }
            if (obj.SunGlareTexture != null)
            {
                yield return obj.SunGlareTexture;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IClimate obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                obj.SunTexture?.Relink(mapping);
                obj.SunGlareTexture?.Relink(mapping);
            }
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IClimateInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IClimateInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ClimateBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ClimateBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Climate)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Climate)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ClimateCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ClimateCommon Instance = new ClimateCommon();

        public Climate.Mask<bool> GetEqualsMask(
            IClimateGetter item,
            IClimateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Climate.Mask<bool>(false);
            ((ClimateCommon)((IClimateGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IClimateGetter item,
            IClimateGetter rhs,
            Climate.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.WeatherTypes = item.WeatherTypes.CollectionEqualsHelper(
                rhs.WeatherTypes,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SunTexture = object.Equals(item.SunTexture, rhs.SunTexture);
            ret.SunGlareTexture = object.Equals(item.SunGlareTexture, rhs.SunGlareTexture);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SunriseBegin = item.SunriseBegin == rhs.SunriseBegin;
            ret.SunriseEnd = item.SunriseEnd == rhs.SunriseEnd;
            ret.SunsetBegin = item.SunsetBegin == rhs.SunsetBegin;
            ret.SunsetEnd = item.SunsetEnd == rhs.SunsetEnd;
            ret.Volatility = item.Volatility == rhs.Volatility;
            ret.Moons = item.Moons == rhs.Moons;
            ret.PhaseLength = item.PhaseLength == rhs.PhaseLength;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IClimateGetter item,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IClimateGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Climate.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Climate =>");
            }
            else
            {
                sb.AppendLine($"{name} (Climate) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IClimateGetter item,
            StructuredStringBuilder sb,
            Climate.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.WeatherTypes?.Overall ?? true)
                && item.WeatherTypes is {} WeatherTypesItem)
            {
                sb.AppendLine("WeatherTypes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in WeatherTypesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.SunTexture ?? true)
                && item.SunTexture is {} SunTextureItem)
            {
                sb.AppendItem(SunTextureItem, "SunTexture");
            }
            if ((printMask?.SunGlareTexture ?? true)
                && item.SunGlareTexture is {} SunGlareTextureItem)
            {
                sb.AppendItem(SunGlareTextureItem, "SunGlareTexture");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if (printMask?.SunriseBegin ?? true)
            {
                sb.AppendItem(item.SunriseBegin, "SunriseBegin");
            }
            if (printMask?.SunriseEnd ?? true)
            {
                sb.AppendItem(item.SunriseEnd, "SunriseEnd");
            }
            if (printMask?.SunsetBegin ?? true)
            {
                sb.AppendItem(item.SunsetBegin, "SunsetBegin");
            }
            if (printMask?.SunsetEnd ?? true)
            {
                sb.AppendItem(item.SunsetEnd, "SunsetEnd");
            }
            if (printMask?.Volatility ?? true)
            {
                sb.AppendItem(item.Volatility, "Volatility");
            }
            if (printMask?.Moons ?? true)
            {
                sb.AppendItem(item.Moons, "Moons");
            }
            if (printMask?.PhaseLength ?? true)
            {
                sb.AppendItem(item.PhaseLength, "PhaseLength");
            }
        }
        
        public static Climate_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Climate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Climate_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Climate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Climate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IClimateGetter? lhs,
            IClimateGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.WeatherTypes) ?? true))
            {
                if (!lhs.WeatherTypes.SequenceEqualNullable(rhs.WeatherTypes, (l, r) => ((WeatherTypeCommon)((IWeatherTypeGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Climate_FieldIndex.WeatherTypes)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.SunTexture) ?? true))
            {
                if (!object.Equals(lhs.SunTexture, rhs.SunTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.SunGlareTexture) ?? true))
            {
                if (!object.Equals(lhs.SunGlareTexture, rhs.SunGlareTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Climate_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseBegin) ?? true))
            {
                if (lhs.SunriseBegin != rhs.SunriseBegin) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseEnd) ?? true))
            {
                if (lhs.SunriseEnd != rhs.SunriseEnd) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetBegin) ?? true))
            {
                if (lhs.SunsetBegin != rhs.SunsetBegin) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetEnd) ?? true))
            {
                if (lhs.SunsetEnd != rhs.SunsetEnd) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.Volatility) ?? true))
            {
                if (lhs.Volatility != rhs.Volatility) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.Moons) ?? true))
            {
                if (lhs.Moons != rhs.Moons) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Climate_FieldIndex.PhaseLength) ?? true))
            {
                if (lhs.PhaseLength != rhs.PhaseLength) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IClimateGetter?)lhs,
                rhs: rhs as IClimateGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IClimateGetter?)lhs,
                rhs: rhs as IClimateGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IClimateGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.WeatherTypes);
            if (item.SunTexture is {} SunTextureitem)
            {
                hash.Add(SunTextureitem);
            }
            if (item.SunGlareTexture is {} SunGlareTextureitem)
            {
                hash.Add(SunGlareTextureitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.SunriseBegin);
            hash.Add(item.SunriseEnd);
            hash.Add(item.SunsetBegin);
            hash.Add(item.SunsetEnd);
            hash.Add(item.Volatility);
            hash.Add(item.Moons);
            hash.Add(item.PhaseLength);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IClimateGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IClimateGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Climate.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IClimateGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.WeatherTypes is {} WeatherTypesItem)
            {
                foreach (var item in WeatherTypesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IClimateGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                if (obj.SunTexture != null)
                {
                    yield return obj.SunTexture;
                }
                if (obj.SunGlareTexture != null)
                {
                    yield return obj.SunGlareTexture;
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Climate Duplicate(
            IClimateGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Climate(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IClimateGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IClimateGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ClimateSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ClimateSetterTranslationCommon Instance = new ClimateSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IClimateInternal item,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IClimate item,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.WeatherTypes) ?? true))
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.WeatherTypes);
                try
                {
                    if ((rhs.WeatherTypes != null))
                    {
                        item.WeatherTypes = 
                            rhs.WeatherTypes
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<WeatherType>();
                    }
                    else
                    {
                        item.WeatherTypes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.SunTexture = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.SunTexture, rhs.SunTexture);
            item.SunGlareTexture = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.SunGlareTexture, rhs.SunGlareTexture);
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Climate_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Climate_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseBegin) ?? true))
            {
                item.SunriseBegin = rhs.SunriseBegin;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunriseEnd) ?? true))
            {
                item.SunriseEnd = rhs.SunriseEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetBegin) ?? true))
            {
                item.SunsetBegin = rhs.SunsetBegin;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.SunsetEnd) ?? true))
            {
                item.SunsetEnd = rhs.SunsetEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Volatility) ?? true))
            {
                item.Volatility = rhs.Volatility;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.Moons) ?? true))
            {
                item.Moons = rhs.Moons;
            }
            if ((copyMask?.GetShouldTranslate((int)Climate_FieldIndex.PhaseLength) ?? true))
            {
                item.PhaseLength = rhs.PhaseLength;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IClimate item,
            IClimateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimateInternal)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimate)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimateInternal)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IClimate)item,
                rhs: (IClimateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Climate DeepCopy(
            IClimateGetter item,
            Climate.TranslationMask? copyMask = null)
        {
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ((ClimateSetterTranslationCommon)((IClimateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Climate DeepCopy(
            IClimateGetter item,
            out Climate.ErrorMask errorMask,
            Climate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ((ClimateSetterTranslationCommon)((IClimateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Climate.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Climate DeepCopy(
            IClimateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Climate ret = (Climate)((ClimateCommon)((IClimateGetter)item).CommonInstance()!).GetNew();
            ((ClimateSetterTranslationCommon)((IClimateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Climate
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Climate_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Climate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClimateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ClimateSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClimateSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class ClimateBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ClimateBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IClimateGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IWeatherTypeGetter>.Instance.Write(
                writer: writer,
                items: item.WeatherTypes,
                recordType: translationParams.ConvertToCustom(RecordTypes.WLST),
                transl: (MutagenWriter subWriter, IWeatherTypeGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((WeatherTypeBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SunTexture?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SunGlareTexture?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.TNAM)))
            {
                ClimateBinaryWriteTranslation.WriteBinarySunriseBegin(
                    writer: writer,
                    item: item);
                ClimateBinaryWriteTranslation.WriteBinarySunriseEnd(
                    writer: writer,
                    item: item);
                ClimateBinaryWriteTranslation.WriteBinarySunsetBegin(
                    writer: writer,
                    item: item);
                ClimateBinaryWriteTranslation.WriteBinarySunsetEnd(
                    writer: writer,
                    item: item);
                writer.Write(item.Volatility);
                ClimateBinaryWriteTranslation.WriteBinaryMoonAndPhaseLength(
                    writer: writer,
                    item: item);
            }
        }

        public static partial void WriteBinarySunriseBeginCustom(
            MutagenWriter writer,
            IClimateGetter item);

        public static void WriteBinarySunriseBegin(
            MutagenWriter writer,
            IClimateGetter item)
        {
            WriteBinarySunriseBeginCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinarySunriseEndCustom(
            MutagenWriter writer,
            IClimateGetter item);

        public static void WriteBinarySunriseEnd(
            MutagenWriter writer,
            IClimateGetter item)
        {
            WriteBinarySunriseEndCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinarySunsetBeginCustom(
            MutagenWriter writer,
            IClimateGetter item);

        public static void WriteBinarySunsetBegin(
            MutagenWriter writer,
            IClimateGetter item)
        {
            WriteBinarySunsetBeginCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinarySunsetEndCustom(
            MutagenWriter writer,
            IClimateGetter item);

        public static void WriteBinarySunsetEnd(
            MutagenWriter writer,
            IClimateGetter item)
        {
            WriteBinarySunsetEndCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryMoonAndPhaseLengthCustom(
            MutagenWriter writer,
            IClimateGetter item);

        public static void WriteBinaryMoonAndPhaseLength(
            MutagenWriter writer,
            IClimateGetter item)
        {
            WriteBinaryMoonAndPhaseLengthCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IClimateGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.CLMT,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IClimateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IClimateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IClimateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ClimateBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly ClimateBinaryCreateTranslation Instance = new ClimateBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.CLMT;
        public static ParseResult FillBinaryRecordTypes(
            IClimateInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.WLST:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WeatherTypes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<WeatherType>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: WeatherType.TryCreateFromBinary)
                        .CastExtendedList<WeatherType>();
                    return (int)Climate_FieldIndex.WeatherTypes;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SunTexture = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)Climate_FieldIndex.SunTexture;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SunGlareTexture = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)Climate_FieldIndex.SunGlareTexture;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Climate_FieldIndex.Model;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    ClimateBinaryCreateTranslation.FillBinarySunriseBeginCustom(
                        frame: dataFrame,
                        item: item);
                    ClimateBinaryCreateTranslation.FillBinarySunriseEndCustom(
                        frame: dataFrame,
                        item: item);
                    ClimateBinaryCreateTranslation.FillBinarySunsetBeginCustom(
                        frame: dataFrame,
                        item: item);
                    ClimateBinaryCreateTranslation.FillBinarySunsetEndCustom(
                        frame: dataFrame,
                        item: item);
                    if (dataFrame.Remaining < 1) return null;
                    item.Volatility = dataFrame.ReadUInt8();
                    ClimateBinaryCreateTranslation.FillBinaryMoonAndPhaseLengthCustom(
                        frame: dataFrame,
                        item: item);
                    return (int)Climate_FieldIndex.PhaseLength;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinarySunriseBeginCustom(
            MutagenFrame frame,
            IClimateInternal item);

        public static partial void FillBinarySunriseEndCustom(
            MutagenFrame frame,
            IClimateInternal item);

        public static partial void FillBinarySunsetBeginCustom(
            MutagenFrame frame,
            IClimateInternal item);

        public static partial void FillBinarySunsetEndCustom(
            MutagenFrame frame,
            IClimateInternal item);

        public static partial void FillBinaryMoonAndPhaseLengthCustom(
            MutagenFrame frame,
            IClimateInternal item);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ClimateBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class ClimateBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IClimateGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Climate_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Climate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ClimateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ClimateSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ClimateCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ClimateCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ClimateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ClimateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IClimate);


        public IReadOnlyList<IWeatherTypeGetter>? WeatherTypes { get; private set; }
        #region SunTexture
        private int? _SunTextureLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? SunTexture => _SunTextureLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SunTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region SunGlareTexture
        private int? _SunGlareTextureLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? SunGlareTexture => _SunGlareTextureLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SunGlareTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        public IModelGetter? Model { get; private set; }
        private RangeInt32? _TNAMLocation;
        #region SunriseBegin
        private int _SunriseBeginLocation => _TNAMLocation!.Value.Min;
        public partial TimeOnly GetSunriseBeginCustom();
        public TimeOnly SunriseBegin => GetSunriseBeginCustom();
        #endregion
        #region SunriseEnd
        private int _SunriseEndLocation => _TNAMLocation!.Value.Min + 0x1;
        public partial TimeOnly GetSunriseEndCustom();
        public TimeOnly SunriseEnd => GetSunriseEndCustom();
        #endregion
        #region SunsetBegin
        private int _SunsetBeginLocation => _TNAMLocation!.Value.Min + 0x2;
        public partial TimeOnly GetSunsetBeginCustom();
        public TimeOnly SunsetBegin => GetSunsetBeginCustom();
        #endregion
        #region SunsetEnd
        private int _SunsetEndLocation => _TNAMLocation!.Value.Min + 0x3;
        public partial TimeOnly GetSunsetEndCustom();
        public TimeOnly SunsetEnd => GetSunsetEndCustom();
        #endregion
        #region Volatility
        private int _VolatilityLocation => _TNAMLocation!.Value.Min + 0x4;
        private bool _Volatility_IsSet => _TNAMLocation.HasValue;
        public Byte Volatility => _Volatility_IsSet ? _recordData.Span[_VolatilityLocation] : default;
        #endregion
        #region MoonAndPhaseLength
        private int _MoonAndPhaseLengthLocation => _TNAMLocation!.Value.Min + 0x5;
        private bool _MoonAndPhaseLength_IsSet => _TNAMLocation.HasValue;
        partial void MoonAndPhaseLengthCustomParse(
            OverlayStream stream,
            int offset);
        protected int MoonAndPhaseLengthEndingPos;
        #endregion
        protected int MoonsEndingPos;
        protected int PhaseLengthEndingPos;
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ClimateBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IClimateGetter ClimateFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ClimateBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IClimateGetter ClimateFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ClimateFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.WLST:
                {
                    this.WeatherTypes = BinaryOverlayList.FactoryByStartIndexWithTrigger<IWeatherTypeGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => WeatherTypeBinaryOverlay.WeatherTypeFactory(s, p));
                    return (int)Climate_FieldIndex.WeatherTypes;
                }
                case RecordTypeInts.FNAM:
                {
                    _SunTextureLocation = (stream.Position - offset);
                    return (int)Climate_FieldIndex.SunTexture;
                }
                case RecordTypeInts.GNAM:
                {
                    _SunGlareTextureLocation = (stream.Position - offset);
                    return (int)Climate_FieldIndex.SunGlareTexture;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Climate_FieldIndex.Model;
                }
                case RecordTypeInts.TNAM:
                {
                    _TNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Climate_FieldIndex.PhaseLength;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ClimateMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Climate>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IClimateGetter rhs) return false;
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IClimateGetter? obj)
        {
            return ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ClimateCommon)((IClimateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

