/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Quest :
        SkyrimMajorRecord,
        IEquatable<IQuestGetter>,
        ILoquiObjectSetter<Quest>,
        IQuestInternal
    {
        #region Ctor
        protected Quest()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private QuestAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        public QuestAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuestAdapterGetter? IQuestGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IQuestGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Flags
        public Quest.Flag Flags { get; set; } = default(Quest.Flag);
        #endregion
        #region Priority
        public Byte Priority { get; set; } = default(Byte);
        #endregion
        #region QuestFormVersion
        public static readonly Byte QuestFormVersionDefault = byte.MaxValue;
        public Byte QuestFormVersion { get; set; } = QuestFormVersionDefault;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default(Int32);
        #endregion
        #region Type
        public Quest.TypeEnum Type { get; set; } = default(Quest.TypeEnum);
        #endregion
        #region Event
        public RecordType? Event { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        RecordType? IQuestGetter.Event => this.Event;
        #endregion
        #region TextDisplayGlobals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IGlobalGetter>> _TextDisplayGlobals = new ExtendedList<IFormLinkGetter<IGlobalGetter>>();
        public ExtendedList<IFormLinkGetter<IGlobalGetter>> TextDisplayGlobals
        {
            get => this._TextDisplayGlobals;
            init => this._TextDisplayGlobals = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IGlobalGetter>> IQuestGetter.TextDisplayGlobals => _TextDisplayGlobals;
        #endregion

        #endregion
        #region Filter
        public String? Filter { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestGetter.Filter => this.Filter;
        #endregion
        #region DialogConditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _DialogConditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> DialogConditions
        {
            get => this._DialogConditions;
            init => this._DialogConditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IQuestGetter.DialogConditions => _DialogConditions;
        #endregion

        #endregion
        #region EventConditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _EventConditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> EventConditions
        {
            get => this._EventConditions;
            init => this._EventConditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IQuestGetter.EventConditions => _EventConditions;
        #endregion

        #endregion
        #region Stages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestStage> _Stages = new ExtendedList<QuestStage>();
        public ExtendedList<QuestStage> Stages
        {
            get => this._Stages;
            init => this._Stages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestStageGetter> IQuestGetter.Stages => _Stages;
        #endregion

        #endregion
        #region Objectives
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestObjective> _Objectives = new ExtendedList<QuestObjective>();
        public ExtendedList<QuestObjective> Objectives
        {
            get => this._Objectives;
            init => this._Objectives = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestObjectiveGetter> IQuestGetter.Objectives => _Objectives;
        #endregion

        #endregion
        #region NextAliasID
        public UInt32? NextAliasID { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IQuestGetter.NextAliasID => this.NextAliasID;
        #endregion
        #region Aliases
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<QuestAlias> _Aliases = new ExtendedList<QuestAlias>();
        public ExtendedList<QuestAlias> Aliases
        {
            get => this._Aliases;
            init => this._Aliases = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IQuestAliasGetter> IQuestGetter.Aliases => _Aliases;
        #endregion

        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IQuestGetter.Description => this.Description;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, QuestAdapter.Mask<TItem>?>(initialValue, new QuestAdapter.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Flags = initialValue;
                this.Priority = initialValue;
                this.QuestFormVersion = initialValue;
                this.Unknown = initialValue;
                this.Type = initialValue;
                this.Event = initialValue;
                this.TextDisplayGlobals = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Filter = initialValue;
                this.DialogConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.EventConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Stages = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>());
                this.Objectives = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>());
                this.NextAliasID = initialValue;
                this.Aliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestAlias.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, QuestAlias.Mask<TItem>?>>());
                this.Description = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem Name,
                TItem Flags,
                TItem Priority,
                TItem QuestFormVersion,
                TItem Unknown,
                TItem Type,
                TItem Event,
                TItem TextDisplayGlobals,
                TItem Filter,
                TItem DialogConditions,
                TItem EventConditions,
                TItem Stages,
                TItem Objectives,
                TItem NextAliasID,
                TItem Aliases,
                TItem Description)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, QuestAdapter.Mask<TItem>?>(VirtualMachineAdapter, new QuestAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Name = Name;
                this.Flags = Flags;
                this.Priority = Priority;
                this.QuestFormVersion = QuestFormVersion;
                this.Unknown = Unknown;
                this.Type = Type;
                this.Event = Event;
                this.TextDisplayGlobals = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(TextDisplayGlobals, Enumerable.Empty<(int Index, TItem Value)>());
                this.Filter = Filter;
                this.DialogConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(DialogConditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.EventConditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(EventConditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Stages = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>?>(Stages, Enumerable.Empty<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>());
                this.Objectives = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>?>(Objectives, Enumerable.Empty<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>());
                this.NextAliasID = NextAliasID;
                this.Aliases = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestAlias.Mask<TItem>?>>?>(Aliases, Enumerable.Empty<MaskItemIndexed<TItem, QuestAlias.Mask<TItem>?>>());
                this.Description = Description;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, QuestAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Name;
            public TItem Flags;
            public TItem Priority;
            public TItem QuestFormVersion;
            public TItem Unknown;
            public TItem Type;
            public TItem Event;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? TextDisplayGlobals;
            public TItem Filter;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? DialogConditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? EventConditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestStage.Mask<TItem>?>>?>? Stages;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestObjective.Mask<TItem>?>>?>? Objectives;
            public TItem NextAliasID;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, QuestAlias.Mask<TItem>?>>?>? Aliases;
            public TItem Description;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.QuestFormVersion, rhs.QuestFormVersion)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Event, rhs.Event)) return false;
                if (!object.Equals(this.TextDisplayGlobals, rhs.TextDisplayGlobals)) return false;
                if (!object.Equals(this.Filter, rhs.Filter)) return false;
                if (!object.Equals(this.DialogConditions, rhs.DialogConditions)) return false;
                if (!object.Equals(this.EventConditions, rhs.EventConditions)) return false;
                if (!object.Equals(this.Stages, rhs.Stages)) return false;
                if (!object.Equals(this.Objectives, rhs.Objectives)) return false;
                if (!object.Equals(this.NextAliasID, rhs.NextAliasID)) return false;
                if (!object.Equals(this.Aliases, rhs.Aliases)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.Priority);
                hash.Add(this.QuestFormVersion);
                hash.Add(this.Unknown);
                hash.Add(this.Type);
                hash.Add(this.Event);
                hash.Add(this.TextDisplayGlobals);
                hash.Add(this.Filter);
                hash.Add(this.DialogConditions);
                hash.Add(this.EventConditions);
                hash.Add(this.Stages);
                hash.Add(this.Objectives);
                hash.Add(this.NextAliasID);
                hash.Add(this.Aliases);
                hash.Add(this.Description);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Priority)) return false;
                if (!eval(this.QuestFormVersion)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Event)) return false;
                if (this.TextDisplayGlobals != null)
                {
                    if (!eval(this.TextDisplayGlobals.Overall)) return false;
                    if (this.TextDisplayGlobals.Specific != null)
                    {
                        foreach (var item in this.TextDisplayGlobals.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Filter)) return false;
                if (this.DialogConditions != null)
                {
                    if (!eval(this.DialogConditions.Overall)) return false;
                    if (this.DialogConditions.Specific != null)
                    {
                        foreach (var item in this.DialogConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.EventConditions != null)
                {
                    if (!eval(this.EventConditions.Overall)) return false;
                    if (this.EventConditions.Specific != null)
                    {
                        foreach (var item in this.EventConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Stages != null)
                {
                    if (!eval(this.Stages.Overall)) return false;
                    if (this.Stages.Specific != null)
                    {
                        foreach (var item in this.Stages.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Objectives != null)
                {
                    if (!eval(this.Objectives.Overall)) return false;
                    if (this.Objectives.Specific != null)
                    {
                        foreach (var item in this.Objectives.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.NextAliasID)) return false;
                if (this.Aliases != null)
                {
                    if (!eval(this.Aliases.Overall)) return false;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Priority)) return true;
                if (eval(this.QuestFormVersion)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Event)) return true;
                if (this.TextDisplayGlobals != null)
                {
                    if (eval(this.TextDisplayGlobals.Overall)) return true;
                    if (this.TextDisplayGlobals.Specific != null)
                    {
                        foreach (var item in this.TextDisplayGlobals.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Filter)) return true;
                if (this.DialogConditions != null)
                {
                    if (eval(this.DialogConditions.Overall)) return true;
                    if (this.DialogConditions.Specific != null)
                    {
                        foreach (var item in this.DialogConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.EventConditions != null)
                {
                    if (eval(this.EventConditions.Overall)) return true;
                    if (this.EventConditions.Specific != null)
                    {
                        foreach (var item in this.EventConditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Stages != null)
                {
                    if (eval(this.Stages.Overall)) return true;
                    if (this.Stages.Specific != null)
                    {
                        foreach (var item in this.Stages.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Objectives != null)
                {
                    if (eval(this.Objectives.Overall)) return true;
                    if (this.Objectives.Specific != null)
                    {
                        foreach (var item in this.Objectives.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.NextAliasID)) return true;
                if (this.Aliases != null)
                {
                    if (eval(this.Aliases.Overall)) return true;
                    if (this.Aliases.Specific != null)
                    {
                        foreach (var item in this.Aliases.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Quest.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, QuestAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.Priority = eval(this.Priority);
                obj.QuestFormVersion = eval(this.QuestFormVersion);
                obj.Unknown = eval(this.Unknown);
                obj.Type = eval(this.Type);
                obj.Event = eval(this.Event);
                if (TextDisplayGlobals != null)
                {
                    obj.TextDisplayGlobals = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.TextDisplayGlobals.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (TextDisplayGlobals.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.TextDisplayGlobals.Specific = l;
                        foreach (var item in TextDisplayGlobals.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Filter = eval(this.Filter);
                if (DialogConditions != null)
                {
                    obj.DialogConditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.DialogConditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (DialogConditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.DialogConditions.Specific = l;
                        foreach (var item in DialogConditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (EventConditions != null)
                {
                    obj.EventConditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.EventConditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (EventConditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.EventConditions.Specific = l;
                        foreach (var item in EventConditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Stages != null)
                {
                    obj.Stages = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestStage.Mask<R>?>>?>(eval(this.Stages.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestStage.Mask<R>?>>());
                    if (Stages.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestStage.Mask<R>?>>();
                        obj.Stages.Specific = l;
                        foreach (var item in Stages.Specific)
                        {
                            MaskItemIndexed<R, QuestStage.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, QuestStage.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Objectives != null)
                {
                    obj.Objectives = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestObjective.Mask<R>?>>?>(eval(this.Objectives.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestObjective.Mask<R>?>>());
                    if (Objectives.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestObjective.Mask<R>?>>();
                        obj.Objectives.Specific = l;
                        foreach (var item in Objectives.Specific)
                        {
                            MaskItemIndexed<R, QuestObjective.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, QuestObjective.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.NextAliasID = eval(this.NextAliasID);
                if (Aliases != null)
                {
                    obj.Aliases = new MaskItem<R, IEnumerable<MaskItemIndexed<R, QuestAlias.Mask<R>?>>?>(eval(this.Aliases.Overall), Enumerable.Empty<MaskItemIndexed<R, QuestAlias.Mask<R>?>>());
                    if (Aliases.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, QuestAlias.Mask<R>?>>();
                        obj.Aliases.Specific = l;
                        foreach (var item in Aliases.Specific)
                        {
                            MaskItemIndexed<R, QuestAlias.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, QuestAlias.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Description = eval(this.Description);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Quest.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Quest.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Quest.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Priority ?? true)
                    {
                        sb.AppendItem(Priority, "Priority");
                    }
                    if (printMask?.QuestFormVersion ?? true)
                    {
                        sb.AppendItem(QuestFormVersion, "QuestFormVersion");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.Event ?? true)
                    {
                        sb.AppendItem(Event, "Event");
                    }
                    if ((printMask?.TextDisplayGlobals?.Overall ?? true)
                        && TextDisplayGlobals is {} TextDisplayGlobalsItem)
                    {
                        sb.AppendLine("TextDisplayGlobals =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TextDisplayGlobalsItem.Overall);
                            if (TextDisplayGlobalsItem.Specific != null)
                            {
                                foreach (var subItem in TextDisplayGlobalsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Filter ?? true)
                    {
                        sb.AppendItem(Filter, "Filter");
                    }
                    if ((printMask?.DialogConditions?.Overall ?? true)
                        && DialogConditions is {} DialogConditionsItem)
                    {
                        sb.AppendLine("DialogConditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(DialogConditionsItem.Overall);
                            if (DialogConditionsItem.Specific != null)
                            {
                                foreach (var subItem in DialogConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.EventConditions?.Overall ?? true)
                        && EventConditions is {} EventConditionsItem)
                    {
                        sb.AppendLine("EventConditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EventConditionsItem.Overall);
                            if (EventConditionsItem.Specific != null)
                            {
                                foreach (var subItem in EventConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Stages?.Overall ?? true)
                        && Stages is {} StagesItem)
                    {
                        sb.AppendLine("Stages =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(StagesItem.Overall);
                            if (StagesItem.Specific != null)
                            {
                                foreach (var subItem in StagesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Objectives?.Overall ?? true)
                        && Objectives is {} ObjectivesItem)
                    {
                        sb.AppendLine("Objectives =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ObjectivesItem.Overall);
                            if (ObjectivesItem.Specific != null)
                            {
                                foreach (var subItem in ObjectivesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.NextAliasID ?? true)
                    {
                        sb.AppendItem(NextAliasID, "NextAliasID");
                    }
                    if ((printMask?.Aliases?.Overall ?? true)
                        && Aliases is {} AliasesItem)
                    {
                        sb.AppendLine("Aliases =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AliasesItem.Overall);
                            if (AliasesItem.Specific != null)
                            {
                                foreach (var subItem in AliasesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, QuestAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Name;
            public Exception? Flags;
            public Exception? Priority;
            public Exception? QuestFormVersion;
            public Exception? Unknown;
            public Exception? Type;
            public Exception? Event;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? TextDisplayGlobals;
            public Exception? Filter;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? DialogConditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? EventConditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>? Stages;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>? Objectives;
            public Exception? NextAliasID;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestAlias.ErrorMask?>>?>? Aliases;
            public Exception? Description;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Quest_FieldIndex enu = (Quest_FieldIndex)index;
                switch (enu)
                {
                    case Quest_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Quest_FieldIndex.Name:
                        return Name;
                    case Quest_FieldIndex.Flags:
                        return Flags;
                    case Quest_FieldIndex.Priority:
                        return Priority;
                    case Quest_FieldIndex.QuestFormVersion:
                        return QuestFormVersion;
                    case Quest_FieldIndex.Unknown:
                        return Unknown;
                    case Quest_FieldIndex.Type:
                        return Type;
                    case Quest_FieldIndex.Event:
                        return Event;
                    case Quest_FieldIndex.TextDisplayGlobals:
                        return TextDisplayGlobals;
                    case Quest_FieldIndex.Filter:
                        return Filter;
                    case Quest_FieldIndex.DialogConditions:
                        return DialogConditions;
                    case Quest_FieldIndex.EventConditions:
                        return EventConditions;
                    case Quest_FieldIndex.Stages:
                        return Stages;
                    case Quest_FieldIndex.Objectives:
                        return Objectives;
                    case Quest_FieldIndex.NextAliasID:
                        return NextAliasID;
                    case Quest_FieldIndex.Aliases:
                        return Aliases;
                    case Quest_FieldIndex.Description:
                        return Description;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Quest_FieldIndex enu = (Quest_FieldIndex)index;
                switch (enu)
                {
                    case Quest_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, QuestAdapter.ErrorMask?>(ex, null);
                        break;
                    case Quest_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Quest_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Quest_FieldIndex.Priority:
                        this.Priority = ex;
                        break;
                    case Quest_FieldIndex.QuestFormVersion:
                        this.QuestFormVersion = ex;
                        break;
                    case Quest_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Quest_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Quest_FieldIndex.Event:
                        this.Event = ex;
                        break;
                    case Quest_FieldIndex.TextDisplayGlobals:
                        this.TextDisplayGlobals = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Filter:
                        this.Filter = ex;
                        break;
                    case Quest_FieldIndex.DialogConditions:
                        this.DialogConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.EventConditions:
                        this.EventConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Stages:
                        this.Stages = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Objectives:
                        this.Objectives = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.NextAliasID:
                        this.NextAliasID = ex;
                        break;
                    case Quest_FieldIndex.Aliases:
                        this.Aliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestAlias.ErrorMask?>>?>(ex, null);
                        break;
                    case Quest_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Quest_FieldIndex enu = (Quest_FieldIndex)index;
                switch (enu)
                {
                    case Quest_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, QuestAdapter.ErrorMask?>?)obj;
                        break;
                    case Quest_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Priority:
                        this.Priority = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.QuestFormVersion:
                        this.QuestFormVersion = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Event:
                        this.Event = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.TextDisplayGlobals:
                        this.TextDisplayGlobals = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Quest_FieldIndex.Filter:
                        this.Filter = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.DialogConditions:
                        this.DialogConditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.EventConditions:
                        this.EventConditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Stages:
                        this.Stages = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Objectives:
                        this.Objectives = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.NextAliasID:
                        this.NextAliasID = (Exception?)obj;
                        break;
                    case Quest_FieldIndex.Aliases:
                        this.Aliases = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestAlias.ErrorMask?>>?>)obj;
                        break;
                    case Quest_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (Priority != null) return true;
                if (QuestFormVersion != null) return true;
                if (Unknown != null) return true;
                if (Type != null) return true;
                if (Event != null) return true;
                if (TextDisplayGlobals != null) return true;
                if (Filter != null) return true;
                if (DialogConditions != null) return true;
                if (EventConditions != null) return true;
                if (Stages != null) return true;
                if (Objectives != null) return true;
                if (NextAliasID != null) return true;
                if (Aliases != null) return true;
                if (Description != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Priority, "Priority");
                }
                {
                    sb.AppendItem(QuestFormVersion, "QuestFormVersion");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(Event, "Event");
                }
                if (TextDisplayGlobals is {} TextDisplayGlobalsItem)
                {
                    sb.AppendLine("TextDisplayGlobals =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TextDisplayGlobalsItem.Overall);
                        if (TextDisplayGlobalsItem.Specific != null)
                        {
                            foreach (var subItem in TextDisplayGlobalsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Filter, "Filter");
                }
                if (DialogConditions is {} DialogConditionsItem)
                {
                    sb.AppendLine("DialogConditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(DialogConditionsItem.Overall);
                        if (DialogConditionsItem.Specific != null)
                        {
                            foreach (var subItem in DialogConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (EventConditions is {} EventConditionsItem)
                {
                    sb.AppendLine("EventConditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EventConditionsItem.Overall);
                        if (EventConditionsItem.Specific != null)
                        {
                            foreach (var subItem in EventConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Stages is {} StagesItem)
                {
                    sb.AppendLine("Stages =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(StagesItem.Overall);
                        if (StagesItem.Specific != null)
                        {
                            foreach (var subItem in StagesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Objectives is {} ObjectivesItem)
                {
                    sb.AppendLine("Objectives =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ObjectivesItem.Overall);
                        if (ObjectivesItem.Specific != null)
                        {
                            foreach (var subItem in ObjectivesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(NextAliasID, "NextAliasID");
                }
                if (Aliases is {} AliasesItem)
                {
                    sb.AppendLine("Aliases =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AliasesItem.Overall);
                        if (AliasesItem.Specific != null)
                        {
                            foreach (var subItem in AliasesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Description, "Description");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Priority = this.Priority.Combine(rhs.Priority);
                ret.QuestFormVersion = this.QuestFormVersion.Combine(rhs.QuestFormVersion);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Event = this.Event.Combine(rhs.Event);
                ret.TextDisplayGlobals = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.TextDisplayGlobals?.Overall, rhs.TextDisplayGlobals?.Overall), Noggog.ExceptionExt.Combine(this.TextDisplayGlobals?.Specific, rhs.TextDisplayGlobals?.Specific));
                ret.Filter = this.Filter.Combine(rhs.Filter);
                ret.DialogConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.DialogConditions?.Overall, rhs.DialogConditions?.Overall), Noggog.ExceptionExt.Combine(this.DialogConditions?.Specific, rhs.DialogConditions?.Specific));
                ret.EventConditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.EventConditions?.Overall, rhs.EventConditions?.Overall), Noggog.ExceptionExt.Combine(this.EventConditions?.Specific, rhs.EventConditions?.Specific));
                ret.Stages = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestStage.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Stages?.Overall, rhs.Stages?.Overall), Noggog.ExceptionExt.Combine(this.Stages?.Specific, rhs.Stages?.Specific));
                ret.Objectives = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestObjective.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Objectives?.Overall, rhs.Objectives?.Overall), Noggog.ExceptionExt.Combine(this.Objectives?.Specific, rhs.Objectives?.Specific));
                ret.NextAliasID = this.NextAliasID.Combine(rhs.NextAliasID);
                ret.Aliases = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, QuestAlias.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Aliases?.Overall, rhs.Aliases?.Overall), Noggog.ExceptionExt.Combine(this.Aliases?.Specific, rhs.Aliases?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public QuestAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Name;
            public bool Flags;
            public bool Priority;
            public bool QuestFormVersion;
            public bool Unknown;
            public bool Type;
            public bool Event;
            public bool TextDisplayGlobals;
            public bool Filter;
            public Condition.TranslationMask? DialogConditions;
            public Condition.TranslationMask? EventConditions;
            public QuestStage.TranslationMask? Stages;
            public QuestObjective.TranslationMask? Objectives;
            public bool NextAliasID;
            public QuestAlias.TranslationMask? Aliases;
            public bool Description;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Priority = defaultOn;
                this.QuestFormVersion = defaultOn;
                this.Unknown = defaultOn;
                this.Type = defaultOn;
                this.Event = defaultOn;
                this.TextDisplayGlobals = defaultOn;
                this.Filter = defaultOn;
                this.NextAliasID = defaultOn;
                this.Description = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((Priority, null));
                ret.Add((QuestFormVersion, null));
                ret.Add((Unknown, null));
                ret.Add((Type, null));
                ret.Add((Event, null));
                ret.Add((TextDisplayGlobals, null));
                ret.Add((Filter, null));
                ret.Add((DialogConditions == null ? DefaultOn : !DialogConditions.GetCrystal().CopyNothing, DialogConditions?.GetCrystal()));
                ret.Add((EventConditions == null ? DefaultOn : !EventConditions.GetCrystal().CopyNothing, EventConditions?.GetCrystal()));
                ret.Add((Stages == null ? DefaultOn : !Stages.GetCrystal().CopyNothing, Stages?.GetCrystal()));
                ret.Add((Objectives == null ? DefaultOn : !Objectives.GetCrystal().CopyNothing, Objectives?.GetCrystal()));
                ret.Add((NextAliasID, null));
                ret.Add((Aliases == null ? DefaultOn : !Aliases.GetCrystal().CopyNothing, Aliases?.GetCrystal()));
                ret.Add((Description, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Quest_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestSetterCommon.Instance.RemapLinks(this, mapping);
        public Quest(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Quest(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Quest(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Quest(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Quest(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Quest>.ToString(this);
        }

        protected override Type LinkType => typeof(IQuest);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => QuestCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => QuestSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => QuestSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => QuestSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IQuestGetter rhs) return false;
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestGetter? obj)
        {
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestCommon)((IQuestGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Quest CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Quest();
            ((QuestSetterCommon)((IQuestGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Quest item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((QuestSetterCommon)((IQuestGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Quest GetNew()
        {
            return new Quest();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuest :
        IAssetLinkContainer,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        ILoquiObjectSetter<IQuestInternal>,
        INamed,
        INamedRequired,
        IQuestGetter,
        ISkyrimMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        new QuestAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new Quest.Flag Flags { get; set; }
        new Byte Priority { get; set; }
        new Byte QuestFormVersion { get; set; }
        new Int32 Unknown { get; set; }
        new Quest.TypeEnum Type { get; set; }
        new RecordType? Event { get; set; }
        new ExtendedList<IFormLinkGetter<IGlobalGetter>> TextDisplayGlobals { get; }
        new String? Filter { get; set; }
        new ExtendedList<Condition> DialogConditions { get; }
        new ExtendedList<Condition> EventConditions { get; }
        new ExtendedList<QuestStage> Stages { get; }
        new ExtendedList<QuestObjective> Objectives { get; }
        new UInt32? NextAliasID { get; set; }
        new ExtendedList<QuestAlias> Aliases { get; }
        new TranslatedString? Description { get; set; }
    }

    public partial interface IQuestInternal :
        ISkyrimMajorRecordInternal,
        IQuest,
        IQuestGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.QUST)]
    public partial interface IQuestGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        ILoquiObject<IQuestGetter>,
        IMapsToGetter<IQuestGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Quest_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter
        /// </summary>
        IQuestAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        Quest.Flag Flags { get; }
        Byte Priority { get; }
        Byte QuestFormVersion { get; }
        Int32 Unknown { get; }
        Quest.TypeEnum Type { get; }
        RecordType? Event { get; }
        IReadOnlyList<IFormLinkGetter<IGlobalGetter>> TextDisplayGlobals { get; }
        String? Filter { get; }
        IReadOnlyList<IConditionGetter> DialogConditions { get; }
        IReadOnlyList<IConditionGetter> EventConditions { get; }
        IReadOnlyList<IQuestStageGetter> Stages { get; }
        IReadOnlyList<IQuestObjectiveGetter> Objectives { get; }
        UInt32? NextAliasID { get; }
        IReadOnlyList<IQuestAliasGetter> Aliases { get; }
        ITranslatedStringGetter? Description { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class QuestMixIn
    {
        public static void Clear(this IQuestInternal item)
        {
            ((QuestSetterCommon)((IQuestGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Quest.Mask<bool> GetEqualsMask(
            this IQuestGetter item,
            IQuestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IQuestGetter item,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IQuestGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IQuestGetter item,
            IQuestGetter rhs,
            Quest.TranslationMask? equalsMask = null)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IQuestInternal lhs,
            IQuestGetter rhs,
            out Quest.ErrorMask errorMask,
            Quest.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestSetterTranslationCommon)((IQuestGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Quest.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestInternal lhs,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestSetterTranslationCommon)((IQuestGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            Quest.TranslationMask? copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            out Quest.ErrorMask errorMask,
            Quest.TranslationMask? copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Quest DeepCopy(
            this IQuestGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestSetterTranslationCommon)((IQuestGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Quest Duplicate(
            this IQuestGetter item,
            FormKey formKey,
            Quest.TranslationMask? copyMask = null)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Quest Duplicate(
            this IQuestGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((QuestCommon)((IQuestGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IQuestInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((QuestSetterCommon)((IQuestGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Quest_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        Name = 8,
        Flags = 9,
        Priority = 10,
        QuestFormVersion = 11,
        Unknown = 12,
        Type = 13,
        Event = 14,
        TextDisplayGlobals = 15,
        Filter = 16,
        DialogConditions = 17,
        EventConditions = 18,
        Stages = 19,
        Objectives = 20,
        NextAliasID = 21,
        Aliases = 22,
        Description = 23,
    }
    #endregion

    #region Registration
    internal partial class Quest_Registration : ILoquiRegistration
    {
        public static readonly Quest_Registration Instance = new Quest_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 17;

        public const ushort FieldCount = 24;

        public static readonly Type MaskType = typeof(Quest.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Quest.ErrorMask);

        public static readonly Type ClassType = typeof(Quest);

        public static readonly Type GetterType = typeof(IQuestGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuest);

        public static readonly Type? InternalSetterType = typeof(IQuestInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Quest";

        public const string Name = "Quest";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.QUST;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.QUST);
            var all = RecordCollection.Factory(
                RecordTypes.QUST,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.FULL,
                RecordTypes.DNAM,
                RecordTypes.ENAM,
                RecordTypes.QTGL,
                RecordTypes.FLTR,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.NEXT,
                RecordTypes.INDX,
                RecordTypes.QSDT,
                RecordTypes.CNAM,
                RecordTypes.NAM0,
                RecordTypes.SCHR,
                RecordTypes.SCTX,
                RecordTypes.QNAM,
                RecordTypes.QOBJ,
                RecordTypes.FNAM,
                RecordTypes.NNAM,
                RecordTypes.QSTA,
                RecordTypes.ANAM,
                RecordTypes.ALST,
                RecordTypes.ALLS,
                RecordTypes.ALED,
                RecordTypes.ALID,
                RecordTypes.ALFI,
                RecordTypes.ALFL,
                RecordTypes.ALFR,
                RecordTypes.ALUA,
                RecordTypes.ALFA,
                RecordTypes.KNAM,
                RecordTypes.ALRT,
                RecordTypes.ALEQ,
                RecordTypes.ALEA,
                RecordTypes.ALCO,
                RecordTypes.ALNA,
                RecordTypes.ALNT,
                RecordTypes.ALFE,
                RecordTypes.ALFD,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.CNTO,
                RecordTypes.COCT,
                RecordTypes.COED,
                RecordTypes.SPOR,
                RecordTypes.OCOR,
                RecordTypes.GWOR,
                RecordTypes.ECOR,
                RecordTypes.ALDN,
                RecordTypes.ALSP,
                RecordTypes.ALFC,
                RecordTypes.ALPC,
                RecordTypes.VTCK);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(QuestBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class QuestSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly QuestSetterCommon Instance = new QuestSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Name = default;
            item.Flags = default(Quest.Flag);
            item.Priority = default(Byte);
            item.QuestFormVersion = Quest.QuestFormVersionDefault;
            item.Unknown = default(Int32);
            item.Type = default(Quest.TypeEnum);
            item.Event = default;
            item.TextDisplayGlobals.Clear();
            item.Filter = default;
            item.DialogConditions.Clear();
            item.EventConditions.Clear();
            item.Stages.Clear();
            item.Objectives.Clear();
            item.NextAliasID = default;
            item.Aliases.Clear();
            item.Description = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IQuestInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IQuestInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IQuest obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.TextDisplayGlobals.RemapLinks(mapping);
            obj.DialogConditions.RemapLinks(mapping);
            obj.EventConditions.RemapLinks(mapping);
            obj.Stages.RemapLinks(mapping);
            obj.Objectives.RemapLinks(mapping);
            obj.Aliases.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IQuest obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        private static partial void RemapInferredAssetLinks(
            IQuest obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            AssetLinkQuery queryCategories);
        
        public void RemapAssetLinks(
            IQuest obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            RemapInferredAssetLinks(obj, mapping, queryCategories);
            obj.VirtualMachineAdapter?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IQuestInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: QuestBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: QuestBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Quest)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Quest)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class QuestCommon : SkyrimMajorRecordCommon
    {
        public new static readonly QuestCommon Instance = new QuestCommon();

        public Quest.Mask<bool> GetEqualsMask(
            IQuestGetter item,
            IQuestGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Quest.Mask<bool>(false);
            ((QuestCommon)((IQuestGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestGetter item,
            IQuestGetter rhs,
            Quest.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Priority = item.Priority == rhs.Priority;
            ret.QuestFormVersion = item.QuestFormVersion == rhs.QuestFormVersion;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.Type = item.Type == rhs.Type;
            ret.Event = item.Event == rhs.Event;
            ret.TextDisplayGlobals = item.TextDisplayGlobals.CollectionEqualsHelper(
                rhs.TextDisplayGlobals,
                (l, r) => object.Equals(l, r),
                include);
            ret.Filter = string.Equals(item.Filter, rhs.Filter);
            ret.DialogConditions = item.DialogConditions.CollectionEqualsHelper(
                rhs.DialogConditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.EventConditions = item.EventConditions.CollectionEqualsHelper(
                rhs.EventConditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Stages = item.Stages.CollectionEqualsHelper(
                rhs.Stages,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Objectives = item.Objectives.CollectionEqualsHelper(
                rhs.Objectives,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.NextAliasID = item.NextAliasID == rhs.NextAliasID;
            ret.Aliases = item.Aliases.CollectionEqualsHelper(
                rhs.Aliases,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IQuestGetter item,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IQuestGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Quest.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Quest =>");
            }
            else
            {
                sb.AppendLine($"{name} (Quest) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IQuestGetter item,
            StructuredStringBuilder sb,
            Quest.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Priority ?? true)
            {
                sb.AppendItem(item.Priority, "Priority");
            }
            if (printMask?.QuestFormVersion ?? true)
            {
                sb.AppendItem(item.QuestFormVersion, "QuestFormVersion");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if ((printMask?.Event ?? true)
                && item.Event is {} EventItem)
            {
                sb.AppendItem(EventItem, "Event");
            }
            if (printMask?.TextDisplayGlobals?.Overall ?? true)
            {
                sb.AppendLine("TextDisplayGlobals =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TextDisplayGlobals)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Filter ?? true)
                && item.Filter is {} FilterItem)
            {
                sb.AppendItem(FilterItem, "Filter");
            }
            if (printMask?.DialogConditions?.Overall ?? true)
            {
                sb.AppendLine("DialogConditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.DialogConditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.EventConditions?.Overall ?? true)
            {
                sb.AppendLine("EventConditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.EventConditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Stages?.Overall ?? true)
            {
                sb.AppendLine("Stages =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Stages)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Objectives?.Overall ?? true)
            {
                sb.AppendLine("Objectives =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Objectives)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.NextAliasID ?? true)
                && item.NextAliasID is {} NextAliasIDItem)
            {
                sb.AppendItem(NextAliasIDItem, "NextAliasID");
            }
            if (printMask?.Aliases?.Overall ?? true)
            {
                sb.AppendLine("Aliases =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Aliases)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
        }
        
        public static Quest_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Quest_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Quest_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Quest_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Quest_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Quest_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Quest_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Quest_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Quest_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Quest_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Quest_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestGetter? lhs,
            IQuestGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((QuestAdapterCommon)((IQuestAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Priority) ?? true))
            {
                if (lhs.Priority != rhs.Priority) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestFormVersion) ?? true))
            {
                if (lhs.QuestFormVersion != rhs.QuestFormVersion) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Event) ?? true))
            {
                if (lhs.Event != rhs.Event) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.TextDisplayGlobals) ?? true))
            {
                if (!lhs.TextDisplayGlobals.SequenceEqualNullable(rhs.TextDisplayGlobals)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Filter) ?? true))
            {
                if (!string.Equals(lhs.Filter, rhs.Filter)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.DialogConditions) ?? true))
            {
                if (!lhs.DialogConditions.SequenceEqual(rhs.DialogConditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.DialogConditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.EventConditions) ?? true))
            {
                if (!lhs.EventConditions.SequenceEqual(rhs.EventConditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.EventConditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Stages) ?? true))
            {
                if (!lhs.Stages.SequenceEqual(rhs.Stages, (l, r) => ((QuestStageCommon)((IQuestStageGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.Stages)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Objectives) ?? true))
            {
                if (!lhs.Objectives.SequenceEqual(rhs.Objectives, (l, r) => ((QuestObjectiveCommon)((IQuestObjectiveGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.Objectives)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.NextAliasID) ?? true))
            {
                if (lhs.NextAliasID != rhs.NextAliasID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Aliases) ?? true))
            {
                if (!lhs.Aliases.SequenceEqual(rhs.Aliases, (l, r) => ((QuestAliasCommon)((IQuestAliasGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Quest_FieldIndex.Aliases)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Quest_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IQuestGetter?)lhs,
                rhs: rhs as IQuestGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IQuestGetter?)lhs,
                rhs: rhs as IQuestGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IQuestGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Flags);
            hash.Add(item.Priority);
            hash.Add(item.QuestFormVersion);
            hash.Add(item.Unknown);
            hash.Add(item.Type);
            if (item.Event is {} Eventitem)
            {
                hash.Add(Eventitem);
            }
            hash.Add(item.TextDisplayGlobals);
            if (item.Filter is {} Filteritem)
            {
                hash.Add(Filteritem);
            }
            hash.Add(item.DialogConditions);
            hash.Add(item.EventConditions);
            hash.Add(item.Stages);
            hash.Add(item.Objectives);
            if (item.NextAliasID is {} NextAliasIDitem)
            {
                hash.Add(NextAliasIDitem);
            }
            hash.Add(item.Aliases);
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IQuestGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IQuestGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Quest.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IQuestGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.TextDisplayGlobals)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.DialogConditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.EventConditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Stages.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Objectives.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Aliases.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public static partial IEnumerable<IAssetLinkGetter> GetInferredAssetLinks(IQuestGetter obj, Type? assetType);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IQuestGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Inferred))
            {
                foreach (var additional in GetInferredAssetLinks(obj, assetType))
                {
                    yield return additional;
                }
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Quest Duplicate(
            IQuestGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Quest(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IQuestGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IQuestGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class QuestSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly QuestSetterTranslationCommon Instance = new QuestSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IQuestInternal item,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IQuest item,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Quest_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.QuestFormVersion) ?? true))
            {
                item.QuestFormVersion = rhs.QuestFormVersion;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Event) ?? true))
            {
                item.Event = rhs.Event;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.TextDisplayGlobals) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.TextDisplayGlobals);
                try
                {
                    item.TextDisplayGlobals.SetTo(
                        rhs.TextDisplayGlobals
                            .Select(b => (IFormLinkGetter<IGlobalGetter>)new FormLink<IGlobalGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Filter) ?? true))
            {
                item.Filter = rhs.Filter;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.DialogConditions) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.DialogConditions);
                try
                {
                    item.DialogConditions.SetTo(
                        rhs.DialogConditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.EventConditions) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.EventConditions);
                try
                {
                    item.EventConditions.SetTo(
                        rhs.EventConditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Stages) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Stages);
                try
                {
                    item.Stages.SetTo(
                        rhs.Stages
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Objectives) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Objectives);
                try
                {
                    item.Objectives.SetTo(
                        rhs.Objectives
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.NextAliasID) ?? true))
            {
                item.NextAliasID = rhs.NextAliasID;
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Aliases) ?? true))
            {
                errorMask?.PushIndex((int)Quest_FieldIndex.Aliases);
                try
                {
                    item.Aliases.SetTo(
                        rhs.Aliases
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Quest_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IQuest item,
            IQuestGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuestInternal)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuest)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuestInternal)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IQuest)item,
                rhs: (IQuestGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Quest DeepCopy(
            IQuestGetter item,
            Quest.TranslationMask? copyMask = null)
        {
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetNew();
            ((QuestSetterTranslationCommon)((IQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Quest DeepCopy(
            IQuestGetter item,
            out Quest.ErrorMask errorMask,
            Quest.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetNew();
            ((QuestSetterTranslationCommon)((IQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Quest.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Quest DeepCopy(
            IQuestGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Quest ret = (Quest)((QuestCommon)((IQuestGetter)item).CommonInstance()!).GetNew();
            ((QuestSetterTranslationCommon)((IQuestGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Quest
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Quest_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Quest_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return QuestSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class QuestBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly QuestBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IQuestGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((QuestAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DNAM)))
            {
                EnumBinaryTranslation<Quest.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 2);
                writer.Write(item.Priority);
                writer.Write(item.QuestFormVersion);
                writer.Write(item.Unknown);
                EnumBinaryTranslation<Quest.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Type,
                    length: 4);
            }
            RecordTypeBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Event,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IGlobalGetter>>.Instance.Write(
                writer: writer,
                items: item.TextDisplayGlobals,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IGlobalGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.QTGL));
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Filter,
                header: translationParams.ConvertToCustom(RecordTypes.FLTR),
                binaryType: StringBinaryType.NullTerminate);
            QuestBinaryWriteTranslation.WriteBinaryDialogConditions(
                writer: writer,
                item: item);
            QuestBinaryWriteTranslation.WriteBinaryUnusedConditionsLogic(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IQuestStageGetter>.Instance.Write(
                writer: writer,
                items: item.Stages,
                transl: (MutagenWriter subWriter, IQuestStageGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((QuestStageBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IQuestObjectiveGetter>.Instance.Write(
                writer: writer,
                items: item.Objectives,
                transl: (MutagenWriter subWriter, IQuestObjectiveGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((QuestObjectiveBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.NextAliasID,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IQuestAliasGetter>.Instance.Write(
                writer: writer,
                items: item.Aliases,
                transl: (MutagenWriter subWriter, IQuestAliasGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((QuestAliasBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
        }

        public static partial void WriteBinaryDialogConditionsCustom(
            MutagenWriter writer,
            IQuestGetter item);

        public static void WriteBinaryDialogConditions(
            MutagenWriter writer,
            IQuestGetter item)
        {
            WriteBinaryDialogConditionsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryUnusedConditionsLogicCustom(
            MutagenWriter writer,
            IQuestGetter item);

        public static void WriteBinaryUnusedConditionsLogic(
            MutagenWriter writer,
            IQuestGetter item)
        {
            WriteBinaryUnusedConditionsLogicCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IQuestGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.QUST,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IQuestGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IQuestGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IQuestGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class QuestBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly QuestBinaryCreateTranslation Instance = new QuestBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.QUST;
        public static ParseResult FillBinaryRecordTypes(
            IQuestInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.QuestAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Quest_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Quest_FieldIndex.Name;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 2) return null;
                    item.Flags = EnumBinaryTranslation<Quest.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 2);
                    if (dataFrame.Remaining < 1) return null;
                    item.Priority = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.QuestFormVersion = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Type = EnumBinaryTranslation<Quest.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    return (int)Quest_FieldIndex.Type;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Event = RecordTypeBinaryTranslation.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Quest_FieldIndex.Event;
                }
                case RecordTypeInts.QTGL:
                {
                    item.TextDisplayGlobals.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IGlobalGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.QTGL),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Quest_FieldIndex.TextDisplayGlobals;
                }
                case RecordTypeInts.FLTR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Filter = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Quest_FieldIndex.Filter;
                }
                case RecordTypeInts.CTDA:
                {
                    QuestBinaryCreateTranslation.FillBinaryDialogConditionsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Quest_FieldIndex.DialogConditions;
                }
                case RecordTypeInts.NEXT:
                {
                    return QuestBinaryCreateTranslation.FillBinaryUnusedConditionsLogicCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.INDX:
                {
                    item.Stages.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<QuestStage>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: QuestStage_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: QuestStage.TryCreateFromBinary));
                    return (int)Quest_FieldIndex.Stages;
                }
                case RecordTypeInts.QOBJ:
                {
                    item.Objectives.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<QuestObjective>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: QuestObjective_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: QuestObjective.TryCreateFromBinary));
                    return (int)Quest_FieldIndex.Objectives;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NextAliasID = frame.ReadUInt32();
                    return (int)Quest_FieldIndex.NextAliasID;
                }
                case RecordTypeInts.ALST:
                case RecordTypeInts.ALLS:
                {
                    item.Aliases.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<QuestAlias>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: QuestAlias_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: QuestAlias.TryCreateFromBinary));
                    return (int)Quest_FieldIndex.Aliases;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Quest_FieldIndex.Description;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryDialogConditionsCustom(
            MutagenFrame frame,
            IQuestInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryUnusedConditionsLogicCustom(
            MutagenFrame frame,
            IQuestInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class QuestBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class QuestBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IQuestGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Quest_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Quest_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => QuestCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => QuestSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => QuestCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => QuestBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IQuest);


        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IQuestAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? QuestAdapterBinaryOverlay.QuestAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        private RangeInt32? _DNAMLocation;
        #region Flags
        private int _FlagsLocation => _DNAMLocation!.Value.Min;
        private bool _Flags_IsSet => _DNAMLocation.HasValue;
        public Quest.Flag Flags => _Flags_IsSet ? (Quest.Flag)BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x2)) : default;
        #endregion
        #region Priority
        private int _PriorityLocation => _DNAMLocation!.Value.Min + 0x2;
        private bool _Priority_IsSet => _DNAMLocation.HasValue;
        public Byte Priority => _Priority_IsSet ? _recordData.Span[_PriorityLocation] : default;
        #endregion
        #region QuestFormVersion
        private int _QuestFormVersionLocation => _DNAMLocation!.Value.Min + 0x3;
        private bool _QuestFormVersion_IsSet => _DNAMLocation.HasValue;
        public Byte QuestFormVersion => _QuestFormVersion_IsSet ? _recordData.Span[_QuestFormVersionLocation] : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _DNAMLocation!.Value.Min + 0x4;
        private bool _Unknown_IsSet => _DNAMLocation.HasValue;
        public Int32 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_UnknownLocation, 4)) : default(Int32);
        #endregion
        #region Type
        private int _TypeLocation => _DNAMLocation!.Value.Min + 0x8;
        private bool _Type_IsSet => _DNAMLocation.HasValue;
        public Quest.TypeEnum Type => _Type_IsSet ? (Quest.TypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_TypeLocation, 0x4)) : default;
        #endregion
        #region Event
        private int? _EventLocation;
        public RecordType? Event => _EventLocation.HasValue ? new RecordType(BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EventLocation.Value, _package.MetaData.Constants))) : default(RecordType?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IGlobalGetter>> TextDisplayGlobals { get; private set; } = Array.Empty<IFormLinkGetter<IGlobalGetter>>();
        #region Filter
        private int? _FilterLocation;
        public String? Filter => _FilterLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FilterLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region DialogConditions
        partial void DialogConditionsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        #region UnusedConditionsLogic
        public partial ParseResult UnusedConditionsLogicCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<IQuestStageGetter> Stages { get; private set; } = Array.Empty<IQuestStageGetter>();
        public IReadOnlyList<IQuestObjectiveGetter> Objectives { get; private set; } = Array.Empty<IQuestObjectiveGetter>();
        #region NextAliasID
        private int? _NextAliasIDLocation;
        public UInt32? NextAliasID => _NextAliasIDLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NextAliasIDLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        public IReadOnlyList<IQuestAliasGetter> Aliases { get; private set; } = Array.Empty<IQuestAliasGetter>();
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IQuestGetter QuestFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new QuestBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IQuestGetter QuestFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return QuestFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Quest_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Name;
                }
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Quest_FieldIndex.Type;
                }
                case RecordTypeInts.ENAM:
                {
                    _EventLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Event;
                }
                case RecordTypeInts.QTGL:
                {
                    this.TextDisplayGlobals = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IGlobalGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IGlobalGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.QTGL,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Quest_FieldIndex.TextDisplayGlobals;
                }
                case RecordTypeInts.FLTR:
                {
                    _FilterLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Filter;
                }
                case RecordTypeInts.CTDA:
                {
                    DialogConditionsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Quest_FieldIndex.DialogConditions;
                }
                case RecordTypeInts.NEXT:
                {
                    return UnusedConditionsLogicCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.INDX:
                {
                    this.Stages = this.ParseRepeatedTypelessSubrecord<IQuestStageGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: QuestStage_Registration.TriggerSpecs,
                        factory: QuestStageBinaryOverlay.QuestStageFactory);
                    return (int)Quest_FieldIndex.Stages;
                }
                case RecordTypeInts.QOBJ:
                {
                    this.Objectives = this.ParseRepeatedTypelessSubrecord<IQuestObjectiveGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: QuestObjective_Registration.TriggerSpecs,
                        factory: QuestObjectiveBinaryOverlay.QuestObjectiveFactory);
                    return (int)Quest_FieldIndex.Objectives;
                }
                case RecordTypeInts.ANAM:
                {
                    _NextAliasIDLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.NextAliasID;
                }
                case RecordTypeInts.ALST:
                case RecordTypeInts.ALLS:
                {
                    this.Aliases = this.ParseRepeatedTypelessSubrecord<IQuestAliasGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: QuestAlias_Registration.TriggerSpecs,
                        factory: QuestAliasBinaryOverlay.QuestAliasFactory);
                    return (int)Quest_FieldIndex.Aliases;
                }
                case RecordTypeInts.NNAM:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Quest_FieldIndex.Description;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Quest>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IQuestGetter rhs) return false;
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestGetter? obj)
        {
            return ((QuestCommon)((IQuestGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestCommon)((IQuestGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

