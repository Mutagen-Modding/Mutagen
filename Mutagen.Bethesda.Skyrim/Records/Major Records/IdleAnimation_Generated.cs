/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Assets;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class IdleAnimation :
        SkyrimMajorRecord,
        IEquatable<IIdleAnimationGetter>,
        IIdleAnimationInternal,
        ILoquiObjectSetter<IdleAnimation>
    {
        #region Ctor
        protected IdleAnimation()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IIdleAnimationGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Filename
        public AssetLink<SkyrimBehaviorAssetType>? Filename { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimBehaviorAssetType>? IIdleAnimationGetter.Filename => this.Filename;
        #endregion
        #region AnimationEvent
        public String? AnimationEvent { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IIdleAnimationGetter.AnimationEvent => this.AnimationEvent;
        #endregion
        #region RelatedIdles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IIdleRelationGetter>> _RelatedIdles = new ExtendedList<IFormLinkGetter<IIdleRelationGetter>>();
        public ExtendedList<IFormLinkGetter<IIdleRelationGetter>> RelatedIdles
        {
            get => this._RelatedIdles;
            init => this._RelatedIdles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IIdleRelationGetter>> IIdleAnimationGetter.RelatedIdles => _RelatedIdles;
        #endregion

        #endregion
        #region LoopingSecondsMin
        public Byte LoopingSecondsMin { get; set; } = default(Byte);
        #endregion
        #region LoopingSecondsMax
        public Byte LoopingSecondsMax { get; set; } = default(Byte);
        #endregion
        #region Flags
        public IdleAnimation.Flag Flags { get; set; } = default(IdleAnimation.Flag);
        #endregion
        #region AnimationGroupSection
        public Byte AnimationGroupSection { get; set; } = default(Byte);
        #endregion
        #region ReplayDelay
        public UInt16 ReplayDelay { get; set; } = default(UInt16);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            IdleAnimationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Filename = initialValue;
                this.AnimationEvent = initialValue;
                this.RelatedIdles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LoopingSecondsMin = initialValue;
                this.LoopingSecondsMax = initialValue;
                this.Flags = initialValue;
                this.AnimationGroupSection = initialValue;
                this.ReplayDelay = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem Conditions,
                TItem Filename,
                TItem AnimationEvent,
                TItem RelatedIdles,
                TItem LoopingSecondsMin,
                TItem LoopingSecondsMax,
                TItem Flags,
                TItem AnimationGroupSection,
                TItem ReplayDelay)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Filename = Filename;
                this.AnimationEvent = AnimationEvent;
                this.RelatedIdles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RelatedIdles, Enumerable.Empty<(int Index, TItem Value)>());
                this.LoopingSecondsMin = LoopingSecondsMin;
                this.LoopingSecondsMax = LoopingSecondsMax;
                this.Flags = Flags;
                this.AnimationGroupSection = AnimationGroupSection;
                this.ReplayDelay = ReplayDelay;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem Filename;
            public TItem AnimationEvent;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RelatedIdles;
            public TItem LoopingSecondsMin;
            public TItem LoopingSecondsMax;
            public TItem Flags;
            public TItem AnimationGroupSection;
            public TItem ReplayDelay;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Filename, rhs.Filename)) return false;
                if (!object.Equals(this.AnimationEvent, rhs.AnimationEvent)) return false;
                if (!object.Equals(this.RelatedIdles, rhs.RelatedIdles)) return false;
                if (!object.Equals(this.LoopingSecondsMin, rhs.LoopingSecondsMin)) return false;
                if (!object.Equals(this.LoopingSecondsMax, rhs.LoopingSecondsMax)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AnimationGroupSection, rhs.AnimationGroupSection)) return false;
                if (!object.Equals(this.ReplayDelay, rhs.ReplayDelay)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Conditions);
                hash.Add(this.Filename);
                hash.Add(this.AnimationEvent);
                hash.Add(this.RelatedIdles);
                hash.Add(this.LoopingSecondsMin);
                hash.Add(this.LoopingSecondsMax);
                hash.Add(this.Flags);
                hash.Add(this.AnimationGroupSection);
                hash.Add(this.ReplayDelay);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Filename)) return false;
                if (!eval(this.AnimationEvent)) return false;
                if (this.RelatedIdles != null)
                {
                    if (!eval(this.RelatedIdles.Overall)) return false;
                    if (this.RelatedIdles.Specific != null)
                    {
                        foreach (var item in this.RelatedIdles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.LoopingSecondsMin)) return false;
                if (!eval(this.LoopingSecondsMax)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AnimationGroupSection)) return false;
                if (!eval(this.ReplayDelay)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Filename)) return true;
                if (eval(this.AnimationEvent)) return true;
                if (this.RelatedIdles != null)
                {
                    if (eval(this.RelatedIdles.Overall)) return true;
                    if (this.RelatedIdles.Specific != null)
                    {
                        foreach (var item in this.RelatedIdles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.LoopingSecondsMin)) return true;
                if (eval(this.LoopingSecondsMax)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AnimationGroupSection)) return true;
                if (eval(this.ReplayDelay)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new IdleAnimation.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Filename = eval(this.Filename);
                obj.AnimationEvent = eval(this.AnimationEvent);
                if (RelatedIdles != null)
                {
                    obj.RelatedIdles = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RelatedIdles.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RelatedIdles.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RelatedIdles.Specific = l;
                        foreach (var item in RelatedIdles.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.LoopingSecondsMin = eval(this.LoopingSecondsMin);
                obj.LoopingSecondsMax = eval(this.LoopingSecondsMax);
                obj.Flags = eval(this.Flags);
                obj.AnimationGroupSection = eval(this.AnimationGroupSection);
                obj.ReplayDelay = eval(this.ReplayDelay);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(IdleAnimation.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, IdleAnimation.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(IdleAnimation.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Filename ?? true)
                    {
                        sb.AppendItem(Filename, "Filename");
                    }
                    if (printMask?.AnimationEvent ?? true)
                    {
                        sb.AppendItem(AnimationEvent, "AnimationEvent");
                    }
                    if ((printMask?.RelatedIdles?.Overall ?? true)
                        && RelatedIdles is {} RelatedIdlesItem)
                    {
                        sb.AppendLine("RelatedIdles =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RelatedIdlesItem.Overall);
                            if (RelatedIdlesItem.Specific != null)
                            {
                                foreach (var subItem in RelatedIdlesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.LoopingSecondsMin ?? true)
                    {
                        sb.AppendItem(LoopingSecondsMin, "LoopingSecondsMin");
                    }
                    if (printMask?.LoopingSecondsMax ?? true)
                    {
                        sb.AppendItem(LoopingSecondsMax, "LoopingSecondsMax");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AnimationGroupSection ?? true)
                    {
                        sb.AppendItem(AnimationGroupSection, "AnimationGroupSection");
                    }
                    if (printMask?.ReplayDelay ?? true)
                    {
                        sb.AppendItem(ReplayDelay, "ReplayDelay");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? Filename;
            public Exception? AnimationEvent;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RelatedIdles;
            public Exception? LoopingSecondsMin;
            public Exception? LoopingSecondsMax;
            public Exception? Flags;
            public Exception? AnimationGroupSection;
            public Exception? ReplayDelay;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Conditions:
                        return Conditions;
                    case IdleAnimation_FieldIndex.Filename:
                        return Filename;
                    case IdleAnimation_FieldIndex.AnimationEvent:
                        return AnimationEvent;
                    case IdleAnimation_FieldIndex.RelatedIdles:
                        return RelatedIdles;
                    case IdleAnimation_FieldIndex.LoopingSecondsMin:
                        return LoopingSecondsMin;
                    case IdleAnimation_FieldIndex.LoopingSecondsMax:
                        return LoopingSecondsMax;
                    case IdleAnimation_FieldIndex.Flags:
                        return Flags;
                    case IdleAnimation_FieldIndex.AnimationGroupSection:
                        return AnimationGroupSection;
                    case IdleAnimation_FieldIndex.ReplayDelay:
                        return ReplayDelay;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case IdleAnimation_FieldIndex.Filename:
                        this.Filename = ex;
                        break;
                    case IdleAnimation_FieldIndex.AnimationEvent:
                        this.AnimationEvent = ex;
                        break;
                    case IdleAnimation_FieldIndex.RelatedIdles:
                        this.RelatedIdles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case IdleAnimation_FieldIndex.LoopingSecondsMin:
                        this.LoopingSecondsMin = ex;
                        break;
                    case IdleAnimation_FieldIndex.LoopingSecondsMax:
                        this.LoopingSecondsMax = ex;
                        break;
                    case IdleAnimation_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case IdleAnimation_FieldIndex.AnimationGroupSection:
                        this.AnimationGroupSection = ex;
                        break;
                    case IdleAnimation_FieldIndex.ReplayDelay:
                        this.ReplayDelay = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                IdleAnimation_FieldIndex enu = (IdleAnimation_FieldIndex)index;
                switch (enu)
                {
                    case IdleAnimation_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case IdleAnimation_FieldIndex.Filename:
                        this.Filename = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.AnimationEvent:
                        this.AnimationEvent = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.RelatedIdles:
                        this.RelatedIdles = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case IdleAnimation_FieldIndex.LoopingSecondsMin:
                        this.LoopingSecondsMin = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.LoopingSecondsMax:
                        this.LoopingSecondsMax = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.AnimationGroupSection:
                        this.AnimationGroupSection = (Exception?)obj;
                        break;
                    case IdleAnimation_FieldIndex.ReplayDelay:
                        this.ReplayDelay = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Conditions != null) return true;
                if (Filename != null) return true;
                if (AnimationEvent != null) return true;
                if (RelatedIdles != null) return true;
                if (LoopingSecondsMin != null) return true;
                if (LoopingSecondsMax != null) return true;
                if (Flags != null) return true;
                if (AnimationGroupSection != null) return true;
                if (ReplayDelay != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Filename, "Filename");
                }
                {
                    sb.AppendItem(AnimationEvent, "AnimationEvent");
                }
                if (RelatedIdles is {} RelatedIdlesItem)
                {
                    sb.AppendLine("RelatedIdles =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RelatedIdlesItem.Overall);
                        if (RelatedIdlesItem.Specific != null)
                        {
                            foreach (var subItem in RelatedIdlesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(LoopingSecondsMin, "LoopingSecondsMin");
                }
                {
                    sb.AppendItem(LoopingSecondsMax, "LoopingSecondsMax");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(AnimationGroupSection, "AnimationGroupSection");
                }
                {
                    sb.AppendItem(ReplayDelay, "ReplayDelay");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Filename = this.Filename.Combine(rhs.Filename);
                ret.AnimationEvent = this.AnimationEvent.Combine(rhs.AnimationEvent);
                ret.RelatedIdles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RelatedIdles?.Overall, rhs.RelatedIdles?.Overall), Noggog.ExceptionExt.Combine(this.RelatedIdles?.Specific, rhs.RelatedIdles?.Specific));
                ret.LoopingSecondsMin = this.LoopingSecondsMin.Combine(rhs.LoopingSecondsMin);
                ret.LoopingSecondsMax = this.LoopingSecondsMax.Combine(rhs.LoopingSecondsMax);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AnimationGroupSection = this.AnimationGroupSection.Combine(rhs.AnimationGroupSection);
                ret.ReplayDelay = this.ReplayDelay.Combine(rhs.ReplayDelay);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public Condition.TranslationMask? Conditions;
            public bool Filename;
            public bool AnimationEvent;
            public bool RelatedIdles;
            public bool LoopingSecondsMin;
            public bool LoopingSecondsMax;
            public bool Flags;
            public bool AnimationGroupSection;
            public bool ReplayDelay;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Filename = defaultOn;
                this.AnimationEvent = defaultOn;
                this.RelatedIdles = defaultOn;
                this.LoopingSecondsMin = defaultOn;
                this.LoopingSecondsMax = defaultOn;
                this.Flags = defaultOn;
                this.AnimationGroupSection = defaultOn;
                this.ReplayDelay = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Filename, null));
                ret.Add((AnimationEvent, null));
                ret.Add((RelatedIdles, null));
                ret.Add((LoopingSecondsMin, null));
                ret.Add((LoopingSecondsMax, null));
                ret.Add((Flags, null));
                ret.Add((AnimationGroupSection, null));
                ret.Add((ReplayDelay, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = IdleAnimation_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => IdleAnimationCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => IdleAnimationSetterCommon.Instance.RemapLinks(this, mapping);
        public IdleAnimation(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private IdleAnimation(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal IdleAnimation(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public IdleAnimation(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public IdleAnimation(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<IdleAnimation>.ToString(this);
        }

        protected override Type LinkType => typeof(IIdleAnimation);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => IdleAnimationCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => IdleAnimationSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => IdleAnimationSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => IdleAnimationSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IIdleAnimationGetter rhs) return false;
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IIdleAnimationGetter? obj)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IdleAnimationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((IdleAnimationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static IdleAnimation CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new IdleAnimation();
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out IdleAnimation item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new IdleAnimation GetNew()
        {
            return new IdleAnimation();
        }

    }
    #endregion

    #region Interface
    public partial interface IIdleAnimation :
        IAssetLinkContainer,
        IFormLinkContainer,
        IIdleAnimationGetter,
        IIdleRelation,
        ILoquiObjectSetter<IIdleAnimationInternal>,
        ISkyrimMajorRecordInternal
    {
        new ExtendedList<Condition> Conditions { get; }
        new AssetLink<SkyrimBehaviorAssetType>? Filename { get; set; }
        new String? AnimationEvent { get; set; }
        new ExtendedList<IFormLinkGetter<IIdleRelationGetter>> RelatedIdles { get; }
        new Byte LoopingSecondsMin { get; set; }
        new Byte LoopingSecondsMax { get; set; }
        new IdleAnimation.Flag Flags { get; set; }
        new Byte AnimationGroupSection { get; set; }
        new UInt16 ReplayDelay { get; set; }
    }

    public partial interface IIdleAnimationInternal :
        ISkyrimMajorRecordInternal,
        IIdleAnimation,
        IIdleAnimationGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.IDLE)]
    public partial interface IIdleAnimationGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IIdleRelationGetter,
        ILoquiObject<IIdleAnimationGetter>,
        IMapsToGetter<IIdleAnimationGetter>
    {
        static new ILoquiRegistration StaticRegistration => IdleAnimation_Registration.Instance;
        IReadOnlyList<IConditionGetter> Conditions { get; }
        AssetLinkGetter<SkyrimBehaviorAssetType>? Filename { get; }
        String? AnimationEvent { get; }
        IReadOnlyList<IFormLinkGetter<IIdleRelationGetter>> RelatedIdles { get; }
        Byte LoopingSecondsMin { get; }
        Byte LoopingSecondsMax { get; }
        IdleAnimation.Flag Flags { get; }
        Byte AnimationGroupSection { get; }
        UInt16 ReplayDelay { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class IdleAnimationMixIn
    {
        public static void Clear(this IIdleAnimationInternal item)
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static IdleAnimation.Mask<bool> GetEqualsMask(
            this IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IIdleAnimationGetter item,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IIdleAnimationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            IdleAnimation.TranslationMask? equalsMask = null)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IIdleAnimationInternal lhs,
            IIdleAnimationGetter rhs,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = IdleAnimation.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IIdleAnimationInternal lhs,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static IdleAnimation DeepCopy(
            this IIdleAnimationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static IdleAnimation Duplicate(
            this IIdleAnimationGetter item,
            FormKey formKey,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static IdleAnimation Duplicate(
            this IIdleAnimationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IIdleAnimationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((IdleAnimationSetterCommon)((IIdleAnimationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum IdleAnimation_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        Conditions = 7,
        Filename = 8,
        AnimationEvent = 9,
        RelatedIdles = 10,
        LoopingSecondsMin = 11,
        LoopingSecondsMax = 12,
        Flags = 13,
        AnimationGroupSection = 14,
        ReplayDelay = 15,
    }
    #endregion

    #region Registration
    internal partial class IdleAnimation_Registration : ILoquiRegistration
    {
        public static readonly IdleAnimation_Registration Instance = new IdleAnimation_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(IdleAnimation.Mask<>);

        public static readonly Type ErrorMaskType = typeof(IdleAnimation.ErrorMask);

        public static readonly Type ClassType = typeof(IdleAnimation);

        public static readonly Type GetterType = typeof(IIdleAnimationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IIdleAnimation);

        public static readonly Type? InternalSetterType = typeof(IIdleAnimationInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.IdleAnimation";

        public const string Name = "IdleAnimation";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.IDLE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.IDLE);
            var all = RecordCollection.Factory(
                RecordTypes.IDLE,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.DNAM,
                RecordTypes.ENAM,
                RecordTypes.ANAM,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(IdleAnimationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class IdleAnimationSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly IdleAnimationSetterCommon Instance = new IdleAnimationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IIdleAnimationInternal item)
        {
            ClearPartial();
            item.Conditions.Clear();
            item.Filename = default;
            item.AnimationEvent = default;
            item.RelatedIdles.Clear();
            item.LoopingSecondsMin = default(Byte);
            item.LoopingSecondsMax = default(Byte);
            item.Flags = default(IdleAnimation.Flag);
            item.AnimationGroupSection = default(Byte);
            item.ReplayDelay = default(UInt16);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IIdleAnimationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IIdleAnimationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IIdleAnimation obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.RelatedIdles.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IIdleAnimation obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.Filename != null)
            {
                yield return obj.Filename;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IIdleAnimation obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                obj.Filename?.Relink(mapping);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IIdleAnimationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IIdleAnimationInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: IdleAnimationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: IdleAnimationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (IdleAnimation)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (IdleAnimation)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class IdleAnimationCommon : SkyrimMajorRecordCommon
    {
        public new static readonly IdleAnimationCommon Instance = new IdleAnimationCommon();

        public IdleAnimation.Mask<bool> GetEqualsMask(
            IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new IdleAnimation.Mask<bool>(false);
            ((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IIdleAnimationGetter item,
            IIdleAnimationGetter rhs,
            IdleAnimation.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Filename = object.Equals(item.Filename, rhs.Filename);
            ret.AnimationEvent = string.Equals(item.AnimationEvent, rhs.AnimationEvent);
            ret.RelatedIdles = item.RelatedIdles.CollectionEqualsHelper(
                rhs.RelatedIdles,
                (l, r) => object.Equals(l, r),
                include);
            ret.LoopingSecondsMin = item.LoopingSecondsMin == rhs.LoopingSecondsMin;
            ret.LoopingSecondsMax = item.LoopingSecondsMax == rhs.LoopingSecondsMax;
            ret.Flags = item.Flags == rhs.Flags;
            ret.AnimationGroupSection = item.AnimationGroupSection == rhs.AnimationGroupSection;
            ret.ReplayDelay = item.ReplayDelay == rhs.ReplayDelay;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IIdleAnimationGetter item,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IIdleAnimationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"IdleAnimation =>");
            }
            else
            {
                sb.AppendLine($"{name} (IdleAnimation) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IIdleAnimationGetter item,
            StructuredStringBuilder sb,
            IdleAnimation.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Filename ?? true)
                && item.Filename is {} FilenameItem)
            {
                sb.AppendItem(FilenameItem, "Filename");
            }
            if ((printMask?.AnimationEvent ?? true)
                && item.AnimationEvent is {} AnimationEventItem)
            {
                sb.AppendItem(AnimationEventItem, "AnimationEvent");
            }
            if (printMask?.RelatedIdles?.Overall ?? true)
            {
                sb.AppendLine("RelatedIdles =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.RelatedIdles)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.LoopingSecondsMin ?? true)
            {
                sb.AppendItem(item.LoopingSecondsMin, "LoopingSecondsMin");
            }
            if (printMask?.LoopingSecondsMax ?? true)
            {
                sb.AppendItem(item.LoopingSecondsMax, "LoopingSecondsMax");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.AnimationGroupSection ?? true)
            {
                sb.AppendItem(item.AnimationGroupSection, "AnimationGroupSection");
            }
            if (printMask?.ReplayDelay ?? true)
            {
                sb.AppendItem(item.ReplayDelay, "ReplayDelay");
            }
        }
        
        public static IdleAnimation_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleAnimation_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (IdleAnimation_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (IdleAnimation_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (IdleAnimation_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (IdleAnimation_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (IdleAnimation_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (IdleAnimation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new IdleAnimation_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (IdleAnimation_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (IdleAnimation_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IIdleAnimationGetter? lhs,
            IIdleAnimationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)IdleAnimation_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Filename) ?? true))
            {
                if (!object.Equals(lhs.Filename, rhs.Filename)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationEvent) ?? true))
            {
                if (!string.Equals(lhs.AnimationEvent, rhs.AnimationEvent)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.RelatedIdles) ?? true))
            {
                if (!lhs.RelatedIdles.SequenceEqualNullable(rhs.RelatedIdles)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.LoopingSecondsMin) ?? true))
            {
                if (lhs.LoopingSecondsMin != rhs.LoopingSecondsMin) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.LoopingSecondsMax) ?? true))
            {
                if (lhs.LoopingSecondsMax != rhs.LoopingSecondsMax) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationGroupSection) ?? true))
            {
                if (lhs.AnimationGroupSection != rhs.AnimationGroupSection) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.ReplayDelay) ?? true))
            {
                if (lhs.ReplayDelay != rhs.ReplayDelay) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IIdleAnimationGetter?)lhs,
                rhs: rhs as IIdleAnimationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IIdleAnimationGetter?)lhs,
                rhs: rhs as IIdleAnimationGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IIdleAnimationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Conditions);
            if (item.Filename is {} Filenameitem)
            {
                hash.Add(Filenameitem);
            }
            if (item.AnimationEvent is {} AnimationEventitem)
            {
                hash.Add(AnimationEventitem);
            }
            hash.Add(item.RelatedIdles);
            hash.Add(item.LoopingSecondsMin);
            hash.Add(item.LoopingSecondsMax);
            hash.Add(item.Flags);
            hash.Add(item.AnimationGroupSection);
            hash.Add(item.ReplayDelay);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IIdleAnimationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IIdleAnimationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return IdleAnimation.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IIdleAnimationGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.RelatedIdles)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IIdleAnimationGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                if (obj.Filename != null)
                {
                    yield return obj.Filename;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public IdleAnimation Duplicate(
            IIdleAnimationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new IdleAnimation(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IIdleAnimationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IIdleAnimationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class IdleAnimationSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly IdleAnimationSetterTranslationCommon Instance = new IdleAnimationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IIdleAnimationInternal item,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IIdleAnimation item,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.Filename = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.Filename, rhs.Filename);
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationEvent) ?? true))
            {
                item.AnimationEvent = rhs.AnimationEvent;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.RelatedIdles) ?? true))
            {
                errorMask?.PushIndex((int)IdleAnimation_FieldIndex.RelatedIdles);
                try
                {
                    item.RelatedIdles.SetTo(
                        rhs.RelatedIdles
                            .Select(b => (IFormLinkGetter<IIdleRelationGetter>)new FormLink<IIdleRelationGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.LoopingSecondsMin) ?? true))
            {
                item.LoopingSecondsMin = rhs.LoopingSecondsMin;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.LoopingSecondsMax) ?? true))
            {
                item.LoopingSecondsMax = rhs.LoopingSecondsMax;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.AnimationGroupSection) ?? true))
            {
                item.AnimationGroupSection = rhs.AnimationGroupSection;
            }
            if ((copyMask?.GetShouldTranslate((int)IdleAnimation_FieldIndex.ReplayDelay) ?? true))
            {
                item.ReplayDelay = rhs.ReplayDelay;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IIdleAnimation item,
            IIdleAnimationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimationInternal)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimation)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimationInternal)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IIdleAnimation)item,
                rhs: (IIdleAnimationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            out IdleAnimation.ErrorMask errorMask,
            IdleAnimation.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = IdleAnimation.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public IdleAnimation DeepCopy(
            IIdleAnimationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            IdleAnimation ret = (IdleAnimation)((IdleAnimationCommon)((IIdleAnimationGetter)item).CommonInstance()!).GetNew();
            ((IdleAnimationSetterTranslationCommon)((IIdleAnimationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class IdleAnimation
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleAnimation_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => IdleAnimation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IdleAnimationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return IdleAnimationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IdleAnimationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class IdleAnimationBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly IdleAnimationBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IIdleAnimationGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Filename?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AnimationEvent,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM),
                binaryType: StringBinaryType.NullTerminate);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IIdleRelationGetter>>.Instance.Write(
                writer: writer,
                items: item.RelatedIdles,
                recordType: translationParams.ConvertToCustom(RecordTypes.ANAM),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IIdleRelationGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.LoopingSecondsMin);
                writer.Write(item.LoopingSecondsMax);
                EnumBinaryTranslation<IdleAnimation.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                writer.Write(item.AnimationGroupSection);
                writer.Write(item.ReplayDelay);
            }
        }

        public void Write(
            MutagenWriter writer,
            IIdleAnimationGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.IDLE,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IIdleAnimationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class IdleAnimationBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly IdleAnimationBinaryCreateTranslation Instance = new IdleAnimationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.IDLE;
        public static ParseResult FillBinaryRecordTypes(
            IIdleAnimationInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)IdleAnimation_FieldIndex.Conditions;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Filename = AssetLinkBinaryTranslation.Instance.Parse<SkyrimBehaviorAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)IdleAnimation_FieldIndex.Filename;
                }
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AnimationEvent = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)IdleAnimation_FieldIndex.AnimationEvent;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RelatedIdles.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IIdleRelationGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)IdleAnimation_FieldIndex.RelatedIdles;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.LoopingSecondsMin = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.LoopingSecondsMax = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.Flags = EnumBinaryTranslation<IdleAnimation.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.AnimationGroupSection = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 2) return null;
                    item.ReplayDelay = dataFrame.ReadUInt16();
                    return (int)IdleAnimation_FieldIndex.ReplayDelay;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class IdleAnimationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class IdleAnimationBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IIdleAnimationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => IdleAnimation_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => IdleAnimation_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => IdleAnimationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => IdleAnimationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => IdleAnimationCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => IdleAnimationCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => IdleAnimationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((IdleAnimationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IIdleAnimation);


        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        #region Filename
        private int? _FilenameLocation;
        public AssetLinkGetter<SkyrimBehaviorAssetType>? Filename => _FilenameLocation.HasValue ? new AssetLinkGetter<SkyrimBehaviorAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FilenameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimBehaviorAssetType>?);
        #endregion
        #region AnimationEvent
        private int? _AnimationEventLocation;
        public String? AnimationEvent => _AnimationEventLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AnimationEventLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IIdleRelationGetter>> RelatedIdles { get; private set; } = [];
        private RangeInt32? _DATALocation;
        #region LoopingSecondsMin
        private int _LoopingSecondsMinLocation => _DATALocation!.Value.Min;
        private bool _LoopingSecondsMin_IsSet => _DATALocation.HasValue;
        public Byte LoopingSecondsMin => _LoopingSecondsMin_IsSet ? _recordData.Span[_LoopingSecondsMinLocation] : default;
        #endregion
        #region LoopingSecondsMax
        private int _LoopingSecondsMaxLocation => _DATALocation!.Value.Min + 0x1;
        private bool _LoopingSecondsMax_IsSet => _DATALocation.HasValue;
        public Byte LoopingSecondsMax => _LoopingSecondsMax_IsSet ? _recordData.Span[_LoopingSecondsMaxLocation] : default;
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value.Min + 0x2;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public IdleAnimation.Flag Flags => _Flags_IsSet ? (IdleAnimation.Flag)_recordData.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region AnimationGroupSection
        private int _AnimationGroupSectionLocation => _DATALocation!.Value.Min + 0x3;
        private bool _AnimationGroupSection_IsSet => _DATALocation.HasValue;
        public Byte AnimationGroupSection => _AnimationGroupSection_IsSet ? _recordData.Span[_AnimationGroupSectionLocation] : default;
        #endregion
        #region ReplayDelay
        private int _ReplayDelayLocation => _DATALocation!.Value.Min + 0x4;
        private bool _ReplayDelay_IsSet => _DATALocation.HasValue;
        public UInt16 ReplayDelay => _ReplayDelay_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_ReplayDelayLocation, 2)) : default(UInt16);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected IdleAnimationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IIdleAnimationGetter IdleAnimationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new IdleAnimationBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IIdleAnimationGetter IdleAnimationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return IdleAnimationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)IdleAnimation_FieldIndex.Conditions;
                }
                case RecordTypeInts.DNAM:
                {
                    _FilenameLocation = (stream.Position - offset);
                    return (int)IdleAnimation_FieldIndex.Filename;
                }
                case RecordTypeInts.ENAM:
                {
                    _AnimationEventLocation = (stream.Position - offset);
                    return (int)IdleAnimation_FieldIndex.AnimationEvent;
                }
                case RecordTypeInts.ANAM:
                {
                    this.RelatedIdles = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IIdleRelationGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IIdleRelationGetter>(p, s));
                    return (int)IdleAnimation_FieldIndex.RelatedIdles;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)IdleAnimation_FieldIndex.ReplayDelay;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            IdleAnimationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<IdleAnimation>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IIdleAnimationGetter rhs) return false;
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IIdleAnimationGetter? obj)
        {
            return ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((IdleAnimationCommon)((IIdleAnimationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

