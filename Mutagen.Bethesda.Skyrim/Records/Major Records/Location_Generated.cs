/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Location :
        SkyrimMajorRecord,
        IEquatable<ILocationGetter>,
        ILocationInternal,
        ILoquiObjectSetter<Location>
    {
        #region Ctor
        protected Location()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ActorCellPersistentReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationReference>? _ActorCellPersistentReferences;
        public ExtendedList<LocationReference>? ActorCellPersistentReferences
        {
            get => this._ActorCellPersistentReferences;
            set => this._ActorCellPersistentReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationReferenceGetter>? ILocationGetter.ActorCellPersistentReferences => _ActorCellPersistentReferences;
        #endregion

        #endregion
        #region LocationCellPersistentReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationReference>? _LocationCellPersistentReferences;
        public ExtendedList<LocationReference>? LocationCellPersistentReferences
        {
            get => this._LocationCellPersistentReferences;
            set => this._LocationCellPersistentReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationReferenceGetter>? ILocationGetter.LocationCellPersistentReferences => _LocationCellPersistentReferences;
        #endregion

        #endregion
        #region ReferenceCellPersistentReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? _ReferenceCellPersistentReferences;
        public ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? ReferenceCellPersistentReferences
        {
            get => this._ReferenceCellPersistentReferences;
            set => this._ReferenceCellPersistentReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? ILocationGetter.ReferenceCellPersistentReferences => _ReferenceCellPersistentReferences;
        #endregion

        #endregion
        #region ActorCellUniques
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellUnique>? _ActorCellUniques;
        public ExtendedList<LocationCellUnique>? ActorCellUniques
        {
            get => this._ActorCellUniques;
            set => this._ActorCellUniques = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellUniqueGetter>? ILocationGetter.ActorCellUniques => _ActorCellUniques;
        #endregion

        #endregion
        #region LocationCellUniques
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellUnique>? _LocationCellUniques;
        public ExtendedList<LocationCellUnique>? LocationCellUniques
        {
            get => this._LocationCellUniques;
            set => this._LocationCellUniques = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellUniqueGetter>? ILocationGetter.LocationCellUniques => _LocationCellUniques;
        #endregion

        #endregion
        #region ReferenceCellUnique
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<INpcGetter>>? _ReferenceCellUnique;
        public ExtendedList<IFormLinkGetter<INpcGetter>>? ReferenceCellUnique
        {
            get => this._ReferenceCellUnique;
            set => this._ReferenceCellUnique = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<INpcGetter>>? ILocationGetter.ReferenceCellUnique => _ReferenceCellUnique;
        #endregion

        #endregion
        #region ActorCellStaticReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellStaticReference>? _ActorCellStaticReferences;
        public ExtendedList<LocationCellStaticReference>? ActorCellStaticReferences
        {
            get => this._ActorCellStaticReferences;
            set => this._ActorCellStaticReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellStaticReferenceGetter>? ILocationGetter.ActorCellStaticReferences => _ActorCellStaticReferences;
        #endregion

        #endregion
        #region LocationCellStaticReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellStaticReference>? _LocationCellStaticReferences;
        public ExtendedList<LocationCellStaticReference>? LocationCellStaticReferences
        {
            get => this._LocationCellStaticReferences;
            set => this._LocationCellStaticReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellStaticReferenceGetter>? ILocationGetter.LocationCellStaticReferences => _LocationCellStaticReferences;
        #endregion

        #endregion
        #region ReferenceCellStaticReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? _ReferenceCellStaticReferences;
        public ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? ReferenceCellStaticReferences
        {
            get => this._ReferenceCellStaticReferences;
            set => this._ReferenceCellStaticReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? ILocationGetter.ReferenceCellStaticReferences => _ReferenceCellStaticReferences;
        #endregion

        #endregion
        #region ActorCellEncounterCell
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCoordinate> _ActorCellEncounterCell = new ExtendedList<LocationCoordinate>();
        public ExtendedList<LocationCoordinate> ActorCellEncounterCell
        {
            get => this._ActorCellEncounterCell;
            init => this._ActorCellEncounterCell = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCoordinateGetter> ILocationGetter.ActorCellEncounterCell => _ActorCellEncounterCell;
        #endregion

        #endregion
        #region LocationCellEncounterCell
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCoordinate> _LocationCellEncounterCell = new ExtendedList<LocationCoordinate>();
        public ExtendedList<LocationCoordinate> LocationCellEncounterCell
        {
            get => this._LocationCellEncounterCell;
            init => this._LocationCellEncounterCell = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCoordinateGetter> ILocationGetter.LocationCellEncounterCell => _LocationCellEncounterCell;
        #endregion

        #endregion
        #region ReferenceCellEncounterCell
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCoordinate> _ReferenceCellEncounterCell = new ExtendedList<LocationCoordinate>();
        public ExtendedList<LocationCoordinate> ReferenceCellEncounterCell
        {
            get => this._ReferenceCellEncounterCell;
            init => this._ReferenceCellEncounterCell = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCoordinateGetter> ILocationGetter.ReferenceCellEncounterCell => _ReferenceCellEncounterCell;
        #endregion

        #endregion
        #region ActorCellMarkerReference
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlacedGetter>>? _ActorCellMarkerReference;
        public ExtendedList<IFormLinkGetter<IPlacedGetter>>? ActorCellMarkerReference
        {
            get => this._ActorCellMarkerReference;
            set => this._ActorCellMarkerReference = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? ILocationGetter.ActorCellMarkerReference => _ActorCellMarkerReference;
        #endregion

        #endregion
        #region LocationCellMarkerReference
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlacedGetter>>? _LocationCellMarkerReference;
        public ExtendedList<IFormLinkGetter<IPlacedGetter>>? LocationCellMarkerReference
        {
            get => this._LocationCellMarkerReference;
            set => this._LocationCellMarkerReference = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? ILocationGetter.LocationCellMarkerReference => _LocationCellMarkerReference;
        #endregion

        #endregion
        #region ActorCellEnablePoint
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellEnablePoint>? _ActorCellEnablePoint;
        public ExtendedList<LocationCellEnablePoint>? ActorCellEnablePoint
        {
            get => this._ActorCellEnablePoint;
            set => this._ActorCellEnablePoint = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellEnablePointGetter>? ILocationGetter.ActorCellEnablePoint => _ActorCellEnablePoint;
        #endregion

        #endregion
        #region LocationCellEnablePoint
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LocationCellEnablePoint>? _LocationCellEnablePoint;
        public ExtendedList<LocationCellEnablePoint>? LocationCellEnablePoint
        {
            get => this._LocationCellEnablePoint;
            set => this._LocationCellEnablePoint = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILocationCellEnablePointGetter>? ILocationGetter.LocationCellEnablePoint => _LocationCellEnablePoint;
        #endregion

        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ILocationGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ILocationGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region ParentLocation
        private readonly IFormLinkNullable<ILocationGetter> _ParentLocation = new FormLinkNullable<ILocationGetter>();
        public IFormLinkNullable<ILocationGetter> ParentLocation
        {
            get => _ParentLocation;
            set => _ParentLocation.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationGetter> ILocationGetter.ParentLocation => this.ParentLocation;
        #endregion
        #region Music
        private readonly IFormLinkNullable<IMusicTypeGetter> _Music = new FormLinkNullable<IMusicTypeGetter>();
        public IFormLinkNullable<IMusicTypeGetter> Music
        {
            get => _Music;
            set => _Music.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMusicTypeGetter> ILocationGetter.Music => this.Music;
        #endregion
        #region UnreportedCrimeFaction
        private readonly IFormLinkNullable<IFactionGetter> _UnreportedCrimeFaction = new FormLinkNullable<IFactionGetter>();
        public IFormLinkNullable<IFactionGetter> UnreportedCrimeFaction
        {
            get => _UnreportedCrimeFaction;
            set => _UnreportedCrimeFaction.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFactionGetter> ILocationGetter.UnreportedCrimeFaction => this.UnreportedCrimeFaction;
        #endregion
        #region WorldLocationMarkerRef
        private readonly IFormLinkNullable<IPlacedSimpleGetter> _WorldLocationMarkerRef = new FormLinkNullable<IPlacedSimpleGetter>();
        public IFormLinkNullable<IPlacedSimpleGetter> WorldLocationMarkerRef
        {
            get => _WorldLocationMarkerRef;
            set => _WorldLocationMarkerRef.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedSimpleGetter> ILocationGetter.WorldLocationMarkerRef => this.WorldLocationMarkerRef;
        #endregion
        #region WorldLocationRadius
        public Single? WorldLocationRadius { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILocationGetter.WorldLocationRadius => this.WorldLocationRadius;
        #endregion
        #region HorseMarkerRef
        private readonly IFormLinkNullable<IPlacedObjectGetter> _HorseMarkerRef = new FormLinkNullable<IPlacedObjectGetter>();
        public IFormLinkNullable<IPlacedObjectGetter> HorseMarkerRef
        {
            get => _HorseMarkerRef;
            set => _HorseMarkerRef.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> ILocationGetter.HorseMarkerRef => this.HorseMarkerRef;
        #endregion
        #region Color
        public Color? Color { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? ILocationGetter.Color => this.Color;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LocationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ActorCellPersistentReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>());
                this.LocationCellPersistentReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>());
                this.ReferenceCellPersistentReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ActorCellUniques = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>());
                this.LocationCellUniques = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>());
                this.ReferenceCellUnique = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ActorCellStaticReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>());
                this.LocationCellStaticReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>());
                this.ReferenceCellStaticReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ActorCellEncounterCell = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>());
                this.LocationCellEncounterCell = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>());
                this.ReferenceCellEncounterCell = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>());
                this.ActorCellMarkerReference = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LocationCellMarkerReference = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ActorCellEnablePoint = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>());
                this.LocationCellEnablePoint = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>());
                this.Name = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ParentLocation = initialValue;
                this.Music = initialValue;
                this.UnreportedCrimeFaction = initialValue;
                this.WorldLocationMarkerRef = initialValue;
                this.WorldLocationRadius = initialValue;
                this.HorseMarkerRef = initialValue;
                this.Color = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem ActorCellPersistentReferences,
                TItem LocationCellPersistentReferences,
                TItem ReferenceCellPersistentReferences,
                TItem ActorCellUniques,
                TItem LocationCellUniques,
                TItem ReferenceCellUnique,
                TItem ActorCellStaticReferences,
                TItem LocationCellStaticReferences,
                TItem ReferenceCellStaticReferences,
                TItem ActorCellEncounterCell,
                TItem LocationCellEncounterCell,
                TItem ReferenceCellEncounterCell,
                TItem ActorCellMarkerReference,
                TItem LocationCellMarkerReference,
                TItem ActorCellEnablePoint,
                TItem LocationCellEnablePoint,
                TItem Name,
                TItem Keywords,
                TItem ParentLocation,
                TItem Music,
                TItem UnreportedCrimeFaction,
                TItem WorldLocationMarkerRef,
                TItem WorldLocationRadius,
                TItem HorseMarkerRef,
                TItem Color)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.ActorCellPersistentReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>(ActorCellPersistentReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>());
                this.LocationCellPersistentReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>(LocationCellPersistentReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>());
                this.ReferenceCellPersistentReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ReferenceCellPersistentReferences, Enumerable.Empty<(int Index, TItem Value)>());
                this.ActorCellUniques = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>(ActorCellUniques, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>());
                this.LocationCellUniques = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>(LocationCellUniques, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>());
                this.ReferenceCellUnique = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ReferenceCellUnique, Enumerable.Empty<(int Index, TItem Value)>());
                this.ActorCellStaticReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>(ActorCellStaticReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>());
                this.LocationCellStaticReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>(LocationCellStaticReferences, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>());
                this.ReferenceCellStaticReferences = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ReferenceCellStaticReferences, Enumerable.Empty<(int Index, TItem Value)>());
                this.ActorCellEncounterCell = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>(ActorCellEncounterCell, Enumerable.Empty<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>());
                this.LocationCellEncounterCell = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>(LocationCellEncounterCell, Enumerable.Empty<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>());
                this.ReferenceCellEncounterCell = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>(ReferenceCellEncounterCell, Enumerable.Empty<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>());
                this.ActorCellMarkerReference = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ActorCellMarkerReference, Enumerable.Empty<(int Index, TItem Value)>());
                this.LocationCellMarkerReference = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LocationCellMarkerReference, Enumerable.Empty<(int Index, TItem Value)>());
                this.ActorCellEnablePoint = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>(ActorCellEnablePoint, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>());
                this.LocationCellEnablePoint = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>(LocationCellEnablePoint, Enumerable.Empty<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>());
                this.Name = Name;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.ParentLocation = ParentLocation;
                this.Music = Music;
                this.UnreportedCrimeFaction = UnreportedCrimeFaction;
                this.WorldLocationMarkerRef = WorldLocationMarkerRef;
                this.WorldLocationRadius = WorldLocationRadius;
                this.HorseMarkerRef = HorseMarkerRef;
                this.Color = Color;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>? ActorCellPersistentReferences;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationReference.Mask<TItem>?>>?>? LocationCellPersistentReferences;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ReferenceCellPersistentReferences;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>? ActorCellUniques;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellUnique.Mask<TItem>?>>?>? LocationCellUniques;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ReferenceCellUnique;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>? ActorCellStaticReferences;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellStaticReference.Mask<TItem>?>>?>? LocationCellStaticReferences;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ReferenceCellStaticReferences;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>? ActorCellEncounterCell;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>? LocationCellEncounterCell;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCoordinate.Mask<TItem>?>>?>? ReferenceCellEncounterCell;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ActorCellMarkerReference;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LocationCellMarkerReference;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>? ActorCellEnablePoint;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LocationCellEnablePoint.Mask<TItem>?>>?>? LocationCellEnablePoint;
            public TItem Name;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem ParentLocation;
            public TItem Music;
            public TItem UnreportedCrimeFaction;
            public TItem WorldLocationMarkerRef;
            public TItem WorldLocationRadius;
            public TItem HorseMarkerRef;
            public TItem Color;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ActorCellPersistentReferences, rhs.ActorCellPersistentReferences)) return false;
                if (!object.Equals(this.LocationCellPersistentReferences, rhs.LocationCellPersistentReferences)) return false;
                if (!object.Equals(this.ReferenceCellPersistentReferences, rhs.ReferenceCellPersistentReferences)) return false;
                if (!object.Equals(this.ActorCellUniques, rhs.ActorCellUniques)) return false;
                if (!object.Equals(this.LocationCellUniques, rhs.LocationCellUniques)) return false;
                if (!object.Equals(this.ReferenceCellUnique, rhs.ReferenceCellUnique)) return false;
                if (!object.Equals(this.ActorCellStaticReferences, rhs.ActorCellStaticReferences)) return false;
                if (!object.Equals(this.LocationCellStaticReferences, rhs.LocationCellStaticReferences)) return false;
                if (!object.Equals(this.ReferenceCellStaticReferences, rhs.ReferenceCellStaticReferences)) return false;
                if (!object.Equals(this.ActorCellEncounterCell, rhs.ActorCellEncounterCell)) return false;
                if (!object.Equals(this.LocationCellEncounterCell, rhs.LocationCellEncounterCell)) return false;
                if (!object.Equals(this.ReferenceCellEncounterCell, rhs.ReferenceCellEncounterCell)) return false;
                if (!object.Equals(this.ActorCellMarkerReference, rhs.ActorCellMarkerReference)) return false;
                if (!object.Equals(this.LocationCellMarkerReference, rhs.LocationCellMarkerReference)) return false;
                if (!object.Equals(this.ActorCellEnablePoint, rhs.ActorCellEnablePoint)) return false;
                if (!object.Equals(this.LocationCellEnablePoint, rhs.LocationCellEnablePoint)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.ParentLocation, rhs.ParentLocation)) return false;
                if (!object.Equals(this.Music, rhs.Music)) return false;
                if (!object.Equals(this.UnreportedCrimeFaction, rhs.UnreportedCrimeFaction)) return false;
                if (!object.Equals(this.WorldLocationMarkerRef, rhs.WorldLocationMarkerRef)) return false;
                if (!object.Equals(this.WorldLocationRadius, rhs.WorldLocationRadius)) return false;
                if (!object.Equals(this.HorseMarkerRef, rhs.HorseMarkerRef)) return false;
                if (!object.Equals(this.Color, rhs.Color)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ActorCellPersistentReferences);
                hash.Add(this.LocationCellPersistentReferences);
                hash.Add(this.ReferenceCellPersistentReferences);
                hash.Add(this.ActorCellUniques);
                hash.Add(this.LocationCellUniques);
                hash.Add(this.ReferenceCellUnique);
                hash.Add(this.ActorCellStaticReferences);
                hash.Add(this.LocationCellStaticReferences);
                hash.Add(this.ReferenceCellStaticReferences);
                hash.Add(this.ActorCellEncounterCell);
                hash.Add(this.LocationCellEncounterCell);
                hash.Add(this.ReferenceCellEncounterCell);
                hash.Add(this.ActorCellMarkerReference);
                hash.Add(this.LocationCellMarkerReference);
                hash.Add(this.ActorCellEnablePoint);
                hash.Add(this.LocationCellEnablePoint);
                hash.Add(this.Name);
                hash.Add(this.Keywords);
                hash.Add(this.ParentLocation);
                hash.Add(this.Music);
                hash.Add(this.UnreportedCrimeFaction);
                hash.Add(this.WorldLocationMarkerRef);
                hash.Add(this.WorldLocationRadius);
                hash.Add(this.HorseMarkerRef);
                hash.Add(this.Color);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.ActorCellPersistentReferences != null)
                {
                    if (!eval(this.ActorCellPersistentReferences.Overall)) return false;
                    if (this.ActorCellPersistentReferences.Specific != null)
                    {
                        foreach (var item in this.ActorCellPersistentReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellPersistentReferences != null)
                {
                    if (!eval(this.LocationCellPersistentReferences.Overall)) return false;
                    if (this.LocationCellPersistentReferences.Specific != null)
                    {
                        foreach (var item in this.LocationCellPersistentReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ReferenceCellPersistentReferences != null)
                {
                    if (!eval(this.ReferenceCellPersistentReferences.Overall)) return false;
                    if (this.ReferenceCellPersistentReferences.Specific != null)
                    {
                        foreach (var item in this.ReferenceCellPersistentReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ActorCellUniques != null)
                {
                    if (!eval(this.ActorCellUniques.Overall)) return false;
                    if (this.ActorCellUniques.Specific != null)
                    {
                        foreach (var item in this.ActorCellUniques.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellUniques != null)
                {
                    if (!eval(this.LocationCellUniques.Overall)) return false;
                    if (this.LocationCellUniques.Specific != null)
                    {
                        foreach (var item in this.LocationCellUniques.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ReferenceCellUnique != null)
                {
                    if (!eval(this.ReferenceCellUnique.Overall)) return false;
                    if (this.ReferenceCellUnique.Specific != null)
                    {
                        foreach (var item in this.ReferenceCellUnique.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ActorCellStaticReferences != null)
                {
                    if (!eval(this.ActorCellStaticReferences.Overall)) return false;
                    if (this.ActorCellStaticReferences.Specific != null)
                    {
                        foreach (var item in this.ActorCellStaticReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellStaticReferences != null)
                {
                    if (!eval(this.LocationCellStaticReferences.Overall)) return false;
                    if (this.LocationCellStaticReferences.Specific != null)
                    {
                        foreach (var item in this.LocationCellStaticReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ReferenceCellStaticReferences != null)
                {
                    if (!eval(this.ReferenceCellStaticReferences.Overall)) return false;
                    if (this.ReferenceCellStaticReferences.Specific != null)
                    {
                        foreach (var item in this.ReferenceCellStaticReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ActorCellEncounterCell != null)
                {
                    if (!eval(this.ActorCellEncounterCell.Overall)) return false;
                    if (this.ActorCellEncounterCell.Specific != null)
                    {
                        foreach (var item in this.ActorCellEncounterCell.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellEncounterCell != null)
                {
                    if (!eval(this.LocationCellEncounterCell.Overall)) return false;
                    if (this.LocationCellEncounterCell.Specific != null)
                    {
                        foreach (var item in this.LocationCellEncounterCell.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ReferenceCellEncounterCell != null)
                {
                    if (!eval(this.ReferenceCellEncounterCell.Overall)) return false;
                    if (this.ReferenceCellEncounterCell.Specific != null)
                    {
                        foreach (var item in this.ReferenceCellEncounterCell.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ActorCellMarkerReference != null)
                {
                    if (!eval(this.ActorCellMarkerReference.Overall)) return false;
                    if (this.ActorCellMarkerReference.Specific != null)
                    {
                        foreach (var item in this.ActorCellMarkerReference.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.LocationCellMarkerReference != null)
                {
                    if (!eval(this.LocationCellMarkerReference.Overall)) return false;
                    if (this.LocationCellMarkerReference.Specific != null)
                    {
                        foreach (var item in this.LocationCellMarkerReference.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ActorCellEnablePoint != null)
                {
                    if (!eval(this.ActorCellEnablePoint.Overall)) return false;
                    if (this.ActorCellEnablePoint.Specific != null)
                    {
                        foreach (var item in this.ActorCellEnablePoint.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellEnablePoint != null)
                {
                    if (!eval(this.LocationCellEnablePoint.Overall)) return false;
                    if (this.LocationCellEnablePoint.Specific != null)
                    {
                        foreach (var item in this.LocationCellEnablePoint.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Name)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ParentLocation)) return false;
                if (!eval(this.Music)) return false;
                if (!eval(this.UnreportedCrimeFaction)) return false;
                if (!eval(this.WorldLocationMarkerRef)) return false;
                if (!eval(this.WorldLocationRadius)) return false;
                if (!eval(this.HorseMarkerRef)) return false;
                if (!eval(this.Color)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.ActorCellPersistentReferences != null)
                {
                    if (eval(this.ActorCellPersistentReferences.Overall)) return true;
                    if (this.ActorCellPersistentReferences.Specific != null)
                    {
                        foreach (var item in this.ActorCellPersistentReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellPersistentReferences != null)
                {
                    if (eval(this.LocationCellPersistentReferences.Overall)) return true;
                    if (this.LocationCellPersistentReferences.Specific != null)
                    {
                        foreach (var item in this.LocationCellPersistentReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ReferenceCellPersistentReferences != null)
                {
                    if (eval(this.ReferenceCellPersistentReferences.Overall)) return true;
                    if (this.ReferenceCellPersistentReferences.Specific != null)
                    {
                        foreach (var item in this.ReferenceCellPersistentReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ActorCellUniques != null)
                {
                    if (eval(this.ActorCellUniques.Overall)) return true;
                    if (this.ActorCellUniques.Specific != null)
                    {
                        foreach (var item in this.ActorCellUniques.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellUniques != null)
                {
                    if (eval(this.LocationCellUniques.Overall)) return true;
                    if (this.LocationCellUniques.Specific != null)
                    {
                        foreach (var item in this.LocationCellUniques.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ReferenceCellUnique != null)
                {
                    if (eval(this.ReferenceCellUnique.Overall)) return true;
                    if (this.ReferenceCellUnique.Specific != null)
                    {
                        foreach (var item in this.ReferenceCellUnique.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ActorCellStaticReferences != null)
                {
                    if (eval(this.ActorCellStaticReferences.Overall)) return true;
                    if (this.ActorCellStaticReferences.Specific != null)
                    {
                        foreach (var item in this.ActorCellStaticReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellStaticReferences != null)
                {
                    if (eval(this.LocationCellStaticReferences.Overall)) return true;
                    if (this.LocationCellStaticReferences.Specific != null)
                    {
                        foreach (var item in this.LocationCellStaticReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ReferenceCellStaticReferences != null)
                {
                    if (eval(this.ReferenceCellStaticReferences.Overall)) return true;
                    if (this.ReferenceCellStaticReferences.Specific != null)
                    {
                        foreach (var item in this.ReferenceCellStaticReferences.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ActorCellEncounterCell != null)
                {
                    if (eval(this.ActorCellEncounterCell.Overall)) return true;
                    if (this.ActorCellEncounterCell.Specific != null)
                    {
                        foreach (var item in this.ActorCellEncounterCell.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellEncounterCell != null)
                {
                    if (eval(this.LocationCellEncounterCell.Overall)) return true;
                    if (this.LocationCellEncounterCell.Specific != null)
                    {
                        foreach (var item in this.LocationCellEncounterCell.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ReferenceCellEncounterCell != null)
                {
                    if (eval(this.ReferenceCellEncounterCell.Overall)) return true;
                    if (this.ReferenceCellEncounterCell.Specific != null)
                    {
                        foreach (var item in this.ReferenceCellEncounterCell.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.ActorCellMarkerReference != null)
                {
                    if (eval(this.ActorCellMarkerReference.Overall)) return true;
                    if (this.ActorCellMarkerReference.Specific != null)
                    {
                        foreach (var item in this.ActorCellMarkerReference.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.LocationCellMarkerReference != null)
                {
                    if (eval(this.LocationCellMarkerReference.Overall)) return true;
                    if (this.LocationCellMarkerReference.Specific != null)
                    {
                        foreach (var item in this.LocationCellMarkerReference.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.ActorCellEnablePoint != null)
                {
                    if (eval(this.ActorCellEnablePoint.Overall)) return true;
                    if (this.ActorCellEnablePoint.Specific != null)
                    {
                        foreach (var item in this.ActorCellEnablePoint.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LocationCellEnablePoint != null)
                {
                    if (eval(this.LocationCellEnablePoint.Overall)) return true;
                    if (this.LocationCellEnablePoint.Specific != null)
                    {
                        foreach (var item in this.LocationCellEnablePoint.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Name)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ParentLocation)) return true;
                if (eval(this.Music)) return true;
                if (eval(this.UnreportedCrimeFaction)) return true;
                if (eval(this.WorldLocationMarkerRef)) return true;
                if (eval(this.WorldLocationRadius)) return true;
                if (eval(this.HorseMarkerRef)) return true;
                if (eval(this.Color)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Location.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (ActorCellPersistentReferences != null)
                {
                    obj.ActorCellPersistentReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationReference.Mask<R>?>>?>(eval(this.ActorCellPersistentReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationReference.Mask<R>?>>());
                    if (ActorCellPersistentReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationReference.Mask<R>?>>();
                        obj.ActorCellPersistentReferences.Specific = l;
                        foreach (var item in ActorCellPersistentReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LocationCellPersistentReferences != null)
                {
                    obj.LocationCellPersistentReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationReference.Mask<R>?>>?>(eval(this.LocationCellPersistentReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationReference.Mask<R>?>>());
                    if (LocationCellPersistentReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationReference.Mask<R>?>>();
                        obj.LocationCellPersistentReferences.Specific = l;
                        foreach (var item in LocationCellPersistentReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ReferenceCellPersistentReferences != null)
                {
                    obj.ReferenceCellPersistentReferences = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ReferenceCellPersistentReferences.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ReferenceCellPersistentReferences.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ReferenceCellPersistentReferences.Specific = l;
                        foreach (var item in ReferenceCellPersistentReferences.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ActorCellUniques != null)
                {
                    obj.ActorCellUniques = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>?>(eval(this.ActorCellUniques.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>());
                    if (ActorCellUniques.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>();
                        obj.ActorCellUniques.Specific = l;
                        foreach (var item in ActorCellUniques.Specific)
                        {
                            MaskItemIndexed<R, LocationCellUnique.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellUnique.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LocationCellUniques != null)
                {
                    obj.LocationCellUniques = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>?>(eval(this.LocationCellUniques.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>());
                    if (LocationCellUniques.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellUnique.Mask<R>?>>();
                        obj.LocationCellUniques.Specific = l;
                        foreach (var item in LocationCellUniques.Specific)
                        {
                            MaskItemIndexed<R, LocationCellUnique.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellUnique.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ReferenceCellUnique != null)
                {
                    obj.ReferenceCellUnique = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ReferenceCellUnique.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ReferenceCellUnique.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ReferenceCellUnique.Specific = l;
                        foreach (var item in ReferenceCellUnique.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ActorCellStaticReferences != null)
                {
                    obj.ActorCellStaticReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>?>(eval(this.ActorCellStaticReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>());
                    if (ActorCellStaticReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>();
                        obj.ActorCellStaticReferences.Specific = l;
                        foreach (var item in ActorCellStaticReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LocationCellStaticReferences != null)
                {
                    obj.LocationCellStaticReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>?>(eval(this.LocationCellStaticReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>());
                    if (LocationCellStaticReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>>();
                        obj.LocationCellStaticReferences.Specific = l;
                        foreach (var item in LocationCellStaticReferences.Specific)
                        {
                            MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellStaticReference.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ReferenceCellStaticReferences != null)
                {
                    obj.ReferenceCellStaticReferences = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ReferenceCellStaticReferences.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ReferenceCellStaticReferences.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ReferenceCellStaticReferences.Specific = l;
                        foreach (var item in ReferenceCellStaticReferences.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ActorCellEncounterCell != null)
                {
                    obj.ActorCellEncounterCell = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>?>(eval(this.ActorCellEncounterCell.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>());
                    if (ActorCellEncounterCell.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>();
                        obj.ActorCellEncounterCell.Specific = l;
                        foreach (var item in ActorCellEncounterCell.Specific)
                        {
                            MaskItemIndexed<R, LocationCoordinate.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCoordinate.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LocationCellEncounterCell != null)
                {
                    obj.LocationCellEncounterCell = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>?>(eval(this.LocationCellEncounterCell.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>());
                    if (LocationCellEncounterCell.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>();
                        obj.LocationCellEncounterCell.Specific = l;
                        foreach (var item in LocationCellEncounterCell.Specific)
                        {
                            MaskItemIndexed<R, LocationCoordinate.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCoordinate.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ReferenceCellEncounterCell != null)
                {
                    obj.ReferenceCellEncounterCell = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>?>(eval(this.ReferenceCellEncounterCell.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>());
                    if (ReferenceCellEncounterCell.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCoordinate.Mask<R>?>>();
                        obj.ReferenceCellEncounterCell.Specific = l;
                        foreach (var item in ReferenceCellEncounterCell.Specific)
                        {
                            MaskItemIndexed<R, LocationCoordinate.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCoordinate.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (ActorCellMarkerReference != null)
                {
                    obj.ActorCellMarkerReference = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ActorCellMarkerReference.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorCellMarkerReference.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorCellMarkerReference.Specific = l;
                        foreach (var item in ActorCellMarkerReference.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (LocationCellMarkerReference != null)
                {
                    obj.LocationCellMarkerReference = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LocationCellMarkerReference.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LocationCellMarkerReference.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LocationCellMarkerReference.Specific = l;
                        foreach (var item in LocationCellMarkerReference.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (ActorCellEnablePoint != null)
                {
                    obj.ActorCellEnablePoint = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>?>(eval(this.ActorCellEnablePoint.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>());
                    if (ActorCellEnablePoint.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>();
                        obj.ActorCellEnablePoint.Specific = l;
                        foreach (var item in ActorCellEnablePoint.Specific)
                        {
                            MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LocationCellEnablePoint != null)
                {
                    obj.LocationCellEnablePoint = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>?>(eval(this.LocationCellEnablePoint.Overall), Enumerable.Empty<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>());
                    if (LocationCellEnablePoint.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>>();
                        obj.LocationCellEnablePoint.Specific = l;
                        foreach (var item in LocationCellEnablePoint.Specific)
                        {
                            MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LocationCellEnablePoint.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Name = eval(this.Name);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ParentLocation = eval(this.ParentLocation);
                obj.Music = eval(this.Music);
                obj.UnreportedCrimeFaction = eval(this.UnreportedCrimeFaction);
                obj.WorldLocationMarkerRef = eval(this.WorldLocationMarkerRef);
                obj.WorldLocationRadius = eval(this.WorldLocationRadius);
                obj.HorseMarkerRef = eval(this.HorseMarkerRef);
                obj.Color = eval(this.Color);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Location.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Location.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Location.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.ActorCellPersistentReferences?.Overall ?? true)
                        && ActorCellPersistentReferences is {} ActorCellPersistentReferencesItem)
                    {
                        sb.AppendLine("ActorCellPersistentReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorCellPersistentReferencesItem.Overall);
                            if (ActorCellPersistentReferencesItem.Specific != null)
                            {
                                foreach (var subItem in ActorCellPersistentReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.LocationCellPersistentReferences?.Overall ?? true)
                        && LocationCellPersistentReferences is {} LocationCellPersistentReferencesItem)
                    {
                        sb.AppendLine("LocationCellPersistentReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocationCellPersistentReferencesItem.Overall);
                            if (LocationCellPersistentReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LocationCellPersistentReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ReferenceCellPersistentReferences?.Overall ?? true)
                        && ReferenceCellPersistentReferences is {} ReferenceCellPersistentReferencesItem)
                    {
                        sb.AppendLine("ReferenceCellPersistentReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ReferenceCellPersistentReferencesItem.Overall);
                            if (ReferenceCellPersistentReferencesItem.Specific != null)
                            {
                                foreach (var subItem in ReferenceCellPersistentReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ActorCellUniques?.Overall ?? true)
                        && ActorCellUniques is {} ActorCellUniquesItem)
                    {
                        sb.AppendLine("ActorCellUniques =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorCellUniquesItem.Overall);
                            if (ActorCellUniquesItem.Specific != null)
                            {
                                foreach (var subItem in ActorCellUniquesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.LocationCellUniques?.Overall ?? true)
                        && LocationCellUniques is {} LocationCellUniquesItem)
                    {
                        sb.AppendLine("LocationCellUniques =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocationCellUniquesItem.Overall);
                            if (LocationCellUniquesItem.Specific != null)
                            {
                                foreach (var subItem in LocationCellUniquesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ReferenceCellUnique?.Overall ?? true)
                        && ReferenceCellUnique is {} ReferenceCellUniqueItem)
                    {
                        sb.AppendLine("ReferenceCellUnique =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ReferenceCellUniqueItem.Overall);
                            if (ReferenceCellUniqueItem.Specific != null)
                            {
                                foreach (var subItem in ReferenceCellUniqueItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ActorCellStaticReferences?.Overall ?? true)
                        && ActorCellStaticReferences is {} ActorCellStaticReferencesItem)
                    {
                        sb.AppendLine("ActorCellStaticReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorCellStaticReferencesItem.Overall);
                            if (ActorCellStaticReferencesItem.Specific != null)
                            {
                                foreach (var subItem in ActorCellStaticReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.LocationCellStaticReferences?.Overall ?? true)
                        && LocationCellStaticReferences is {} LocationCellStaticReferencesItem)
                    {
                        sb.AppendLine("LocationCellStaticReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocationCellStaticReferencesItem.Overall);
                            if (LocationCellStaticReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LocationCellStaticReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ReferenceCellStaticReferences?.Overall ?? true)
                        && ReferenceCellStaticReferences is {} ReferenceCellStaticReferencesItem)
                    {
                        sb.AppendLine("ReferenceCellStaticReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ReferenceCellStaticReferencesItem.Overall);
                            if (ReferenceCellStaticReferencesItem.Specific != null)
                            {
                                foreach (var subItem in ReferenceCellStaticReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ActorCellEncounterCell?.Overall ?? true)
                        && ActorCellEncounterCell is {} ActorCellEncounterCellItem)
                    {
                        sb.AppendLine("ActorCellEncounterCell =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorCellEncounterCellItem.Overall);
                            if (ActorCellEncounterCellItem.Specific != null)
                            {
                                foreach (var subItem in ActorCellEncounterCellItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.LocationCellEncounterCell?.Overall ?? true)
                        && LocationCellEncounterCell is {} LocationCellEncounterCellItem)
                    {
                        sb.AppendLine("LocationCellEncounterCell =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocationCellEncounterCellItem.Overall);
                            if (LocationCellEncounterCellItem.Specific != null)
                            {
                                foreach (var subItem in LocationCellEncounterCellItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ReferenceCellEncounterCell?.Overall ?? true)
                        && ReferenceCellEncounterCell is {} ReferenceCellEncounterCellItem)
                    {
                        sb.AppendLine("ReferenceCellEncounterCell =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ReferenceCellEncounterCellItem.Overall);
                            if (ReferenceCellEncounterCellItem.Specific != null)
                            {
                                foreach (var subItem in ReferenceCellEncounterCellItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ActorCellMarkerReference?.Overall ?? true)
                        && ActorCellMarkerReference is {} ActorCellMarkerReferenceItem)
                    {
                        sb.AppendLine("ActorCellMarkerReference =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorCellMarkerReferenceItem.Overall);
                            if (ActorCellMarkerReferenceItem.Specific != null)
                            {
                                foreach (var subItem in ActorCellMarkerReferenceItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.LocationCellMarkerReference?.Overall ?? true)
                        && LocationCellMarkerReference is {} LocationCellMarkerReferenceItem)
                    {
                        sb.AppendLine("LocationCellMarkerReference =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocationCellMarkerReferenceItem.Overall);
                            if (LocationCellMarkerReferenceItem.Specific != null)
                            {
                                foreach (var subItem in LocationCellMarkerReferenceItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.ActorCellEnablePoint?.Overall ?? true)
                        && ActorCellEnablePoint is {} ActorCellEnablePointItem)
                    {
                        sb.AppendLine("ActorCellEnablePoint =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorCellEnablePointItem.Overall);
                            if (ActorCellEnablePointItem.Specific != null)
                            {
                                foreach (var subItem in ActorCellEnablePointItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.LocationCellEnablePoint?.Overall ?? true)
                        && LocationCellEnablePoint is {} LocationCellEnablePointItem)
                    {
                        sb.AppendLine("LocationCellEnablePoint =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocationCellEnablePointItem.Overall);
                            if (LocationCellEnablePointItem.Specific != null)
                            {
                                foreach (var subItem in LocationCellEnablePointItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ParentLocation ?? true)
                    {
                        sb.AppendItem(ParentLocation, "ParentLocation");
                    }
                    if (printMask?.Music ?? true)
                    {
                        sb.AppendItem(Music, "Music");
                    }
                    if (printMask?.UnreportedCrimeFaction ?? true)
                    {
                        sb.AppendItem(UnreportedCrimeFaction, "UnreportedCrimeFaction");
                    }
                    if (printMask?.WorldLocationMarkerRef ?? true)
                    {
                        sb.AppendItem(WorldLocationMarkerRef, "WorldLocationMarkerRef");
                    }
                    if (printMask?.WorldLocationRadius ?? true)
                    {
                        sb.AppendItem(WorldLocationRadius, "WorldLocationRadius");
                    }
                    if (printMask?.HorseMarkerRef ?? true)
                    {
                        sb.AppendItem(HorseMarkerRef, "HorseMarkerRef");
                    }
                    if (printMask?.Color ?? true)
                    {
                        sb.AppendItem(Color, "Color");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>? ActorCellPersistentReferences;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>? LocationCellPersistentReferences;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ReferenceCellPersistentReferences;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>? ActorCellUniques;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>? LocationCellUniques;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ReferenceCellUnique;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>? ActorCellStaticReferences;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>? LocationCellStaticReferences;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ReferenceCellStaticReferences;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>? ActorCellEncounterCell;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>? LocationCellEncounterCell;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>? ReferenceCellEncounterCell;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorCellMarkerReference;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LocationCellMarkerReference;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>? ActorCellEnablePoint;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>? LocationCellEnablePoint;
            public Exception? Name;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? ParentLocation;
            public Exception? Music;
            public Exception? UnreportedCrimeFaction;
            public Exception? WorldLocationMarkerRef;
            public Exception? WorldLocationRadius;
            public Exception? HorseMarkerRef;
            public Exception? Color;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Location_FieldIndex enu = (Location_FieldIndex)index;
                switch (enu)
                {
                    case Location_FieldIndex.ActorCellPersistentReferences:
                        return ActorCellPersistentReferences;
                    case Location_FieldIndex.LocationCellPersistentReferences:
                        return LocationCellPersistentReferences;
                    case Location_FieldIndex.ReferenceCellPersistentReferences:
                        return ReferenceCellPersistentReferences;
                    case Location_FieldIndex.ActorCellUniques:
                        return ActorCellUniques;
                    case Location_FieldIndex.LocationCellUniques:
                        return LocationCellUniques;
                    case Location_FieldIndex.ReferenceCellUnique:
                        return ReferenceCellUnique;
                    case Location_FieldIndex.ActorCellStaticReferences:
                        return ActorCellStaticReferences;
                    case Location_FieldIndex.LocationCellStaticReferences:
                        return LocationCellStaticReferences;
                    case Location_FieldIndex.ReferenceCellStaticReferences:
                        return ReferenceCellStaticReferences;
                    case Location_FieldIndex.ActorCellEncounterCell:
                        return ActorCellEncounterCell;
                    case Location_FieldIndex.LocationCellEncounterCell:
                        return LocationCellEncounterCell;
                    case Location_FieldIndex.ReferenceCellEncounterCell:
                        return ReferenceCellEncounterCell;
                    case Location_FieldIndex.ActorCellMarkerReference:
                        return ActorCellMarkerReference;
                    case Location_FieldIndex.LocationCellMarkerReference:
                        return LocationCellMarkerReference;
                    case Location_FieldIndex.ActorCellEnablePoint:
                        return ActorCellEnablePoint;
                    case Location_FieldIndex.LocationCellEnablePoint:
                        return LocationCellEnablePoint;
                    case Location_FieldIndex.Name:
                        return Name;
                    case Location_FieldIndex.Keywords:
                        return Keywords;
                    case Location_FieldIndex.ParentLocation:
                        return ParentLocation;
                    case Location_FieldIndex.Music:
                        return Music;
                    case Location_FieldIndex.UnreportedCrimeFaction:
                        return UnreportedCrimeFaction;
                    case Location_FieldIndex.WorldLocationMarkerRef:
                        return WorldLocationMarkerRef;
                    case Location_FieldIndex.WorldLocationRadius:
                        return WorldLocationRadius;
                    case Location_FieldIndex.HorseMarkerRef:
                        return HorseMarkerRef;
                    case Location_FieldIndex.Color:
                        return Color;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Location_FieldIndex enu = (Location_FieldIndex)index;
                switch (enu)
                {
                    case Location_FieldIndex.ActorCellPersistentReferences:
                        this.ActorCellPersistentReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.LocationCellPersistentReferences:
                        this.LocationCellPersistentReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.ReferenceCellPersistentReferences:
                        this.ReferenceCellPersistentReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.ActorCellUniques:
                        this.ActorCellUniques = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.LocationCellUniques:
                        this.LocationCellUniques = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.ReferenceCellUnique:
                        this.ReferenceCellUnique = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.ActorCellStaticReferences:
                        this.ActorCellStaticReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.LocationCellStaticReferences:
                        this.LocationCellStaticReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.ReferenceCellStaticReferences:
                        this.ReferenceCellStaticReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.ActorCellEncounterCell:
                        this.ActorCellEncounterCell = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.LocationCellEncounterCell:
                        this.LocationCellEncounterCell = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.ReferenceCellEncounterCell:
                        this.ReferenceCellEncounterCell = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.ActorCellMarkerReference:
                        this.ActorCellMarkerReference = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.LocationCellMarkerReference:
                        this.LocationCellMarkerReference = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.ActorCellEnablePoint:
                        this.ActorCellEnablePoint = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.LocationCellEnablePoint:
                        this.LocationCellEnablePoint = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>(ex, null);
                        break;
                    case Location_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Location_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Location_FieldIndex.ParentLocation:
                        this.ParentLocation = ex;
                        break;
                    case Location_FieldIndex.Music:
                        this.Music = ex;
                        break;
                    case Location_FieldIndex.UnreportedCrimeFaction:
                        this.UnreportedCrimeFaction = ex;
                        break;
                    case Location_FieldIndex.WorldLocationMarkerRef:
                        this.WorldLocationMarkerRef = ex;
                        break;
                    case Location_FieldIndex.WorldLocationRadius:
                        this.WorldLocationRadius = ex;
                        break;
                    case Location_FieldIndex.HorseMarkerRef:
                        this.HorseMarkerRef = ex;
                        break;
                    case Location_FieldIndex.Color:
                        this.Color = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Location_FieldIndex enu = (Location_FieldIndex)index;
                switch (enu)
                {
                    case Location_FieldIndex.ActorCellPersistentReferences:
                        this.ActorCellPersistentReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.LocationCellPersistentReferences:
                        this.LocationCellPersistentReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.ReferenceCellPersistentReferences:
                        this.ReferenceCellPersistentReferences = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.ActorCellUniques:
                        this.ActorCellUniques = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.LocationCellUniques:
                        this.LocationCellUniques = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.ReferenceCellUnique:
                        this.ReferenceCellUnique = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.ActorCellStaticReferences:
                        this.ActorCellStaticReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.LocationCellStaticReferences:
                        this.LocationCellStaticReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.ReferenceCellStaticReferences:
                        this.ReferenceCellStaticReferences = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.ActorCellEncounterCell:
                        this.ActorCellEncounterCell = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.LocationCellEncounterCell:
                        this.LocationCellEncounterCell = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.ReferenceCellEncounterCell:
                        this.ReferenceCellEncounterCell = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.ActorCellMarkerReference:
                        this.ActorCellMarkerReference = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.LocationCellMarkerReference:
                        this.LocationCellMarkerReference = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.ActorCellEnablePoint:
                        this.ActorCellEnablePoint = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.LocationCellEnablePoint:
                        this.LocationCellEnablePoint = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>)obj;
                        break;
                    case Location_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Location_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Location_FieldIndex.ParentLocation:
                        this.ParentLocation = (Exception?)obj;
                        break;
                    case Location_FieldIndex.Music:
                        this.Music = (Exception?)obj;
                        break;
                    case Location_FieldIndex.UnreportedCrimeFaction:
                        this.UnreportedCrimeFaction = (Exception?)obj;
                        break;
                    case Location_FieldIndex.WorldLocationMarkerRef:
                        this.WorldLocationMarkerRef = (Exception?)obj;
                        break;
                    case Location_FieldIndex.WorldLocationRadius:
                        this.WorldLocationRadius = (Exception?)obj;
                        break;
                    case Location_FieldIndex.HorseMarkerRef:
                        this.HorseMarkerRef = (Exception?)obj;
                        break;
                    case Location_FieldIndex.Color:
                        this.Color = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ActorCellPersistentReferences != null) return true;
                if (LocationCellPersistentReferences != null) return true;
                if (ReferenceCellPersistentReferences != null) return true;
                if (ActorCellUniques != null) return true;
                if (LocationCellUniques != null) return true;
                if (ReferenceCellUnique != null) return true;
                if (ActorCellStaticReferences != null) return true;
                if (LocationCellStaticReferences != null) return true;
                if (ReferenceCellStaticReferences != null) return true;
                if (ActorCellEncounterCell != null) return true;
                if (LocationCellEncounterCell != null) return true;
                if (ReferenceCellEncounterCell != null) return true;
                if (ActorCellMarkerReference != null) return true;
                if (LocationCellMarkerReference != null) return true;
                if (ActorCellEnablePoint != null) return true;
                if (LocationCellEnablePoint != null) return true;
                if (Name != null) return true;
                if (Keywords != null) return true;
                if (ParentLocation != null) return true;
                if (Music != null) return true;
                if (UnreportedCrimeFaction != null) return true;
                if (WorldLocationMarkerRef != null) return true;
                if (WorldLocationRadius != null) return true;
                if (HorseMarkerRef != null) return true;
                if (Color != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (ActorCellPersistentReferences is {} ActorCellPersistentReferencesItem)
                {
                    sb.AppendLine("ActorCellPersistentReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorCellPersistentReferencesItem.Overall);
                        if (ActorCellPersistentReferencesItem.Specific != null)
                        {
                            foreach (var subItem in ActorCellPersistentReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (LocationCellPersistentReferences is {} LocationCellPersistentReferencesItem)
                {
                    sb.AppendLine("LocationCellPersistentReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocationCellPersistentReferencesItem.Overall);
                        if (LocationCellPersistentReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LocationCellPersistentReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ReferenceCellPersistentReferences is {} ReferenceCellPersistentReferencesItem)
                {
                    sb.AppendLine("ReferenceCellPersistentReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ReferenceCellPersistentReferencesItem.Overall);
                        if (ReferenceCellPersistentReferencesItem.Specific != null)
                        {
                            foreach (var subItem in ReferenceCellPersistentReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (ActorCellUniques is {} ActorCellUniquesItem)
                {
                    sb.AppendLine("ActorCellUniques =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorCellUniquesItem.Overall);
                        if (ActorCellUniquesItem.Specific != null)
                        {
                            foreach (var subItem in ActorCellUniquesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (LocationCellUniques is {} LocationCellUniquesItem)
                {
                    sb.AppendLine("LocationCellUniques =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocationCellUniquesItem.Overall);
                        if (LocationCellUniquesItem.Specific != null)
                        {
                            foreach (var subItem in LocationCellUniquesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ReferenceCellUnique is {} ReferenceCellUniqueItem)
                {
                    sb.AppendLine("ReferenceCellUnique =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ReferenceCellUniqueItem.Overall);
                        if (ReferenceCellUniqueItem.Specific != null)
                        {
                            foreach (var subItem in ReferenceCellUniqueItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (ActorCellStaticReferences is {} ActorCellStaticReferencesItem)
                {
                    sb.AppendLine("ActorCellStaticReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorCellStaticReferencesItem.Overall);
                        if (ActorCellStaticReferencesItem.Specific != null)
                        {
                            foreach (var subItem in ActorCellStaticReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (LocationCellStaticReferences is {} LocationCellStaticReferencesItem)
                {
                    sb.AppendLine("LocationCellStaticReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocationCellStaticReferencesItem.Overall);
                        if (LocationCellStaticReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LocationCellStaticReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ReferenceCellStaticReferences is {} ReferenceCellStaticReferencesItem)
                {
                    sb.AppendLine("ReferenceCellStaticReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ReferenceCellStaticReferencesItem.Overall);
                        if (ReferenceCellStaticReferencesItem.Specific != null)
                        {
                            foreach (var subItem in ReferenceCellStaticReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (ActorCellEncounterCell is {} ActorCellEncounterCellItem)
                {
                    sb.AppendLine("ActorCellEncounterCell =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorCellEncounterCellItem.Overall);
                        if (ActorCellEncounterCellItem.Specific != null)
                        {
                            foreach (var subItem in ActorCellEncounterCellItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (LocationCellEncounterCell is {} LocationCellEncounterCellItem)
                {
                    sb.AppendLine("LocationCellEncounterCell =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocationCellEncounterCellItem.Overall);
                        if (LocationCellEncounterCellItem.Specific != null)
                        {
                            foreach (var subItem in LocationCellEncounterCellItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ReferenceCellEncounterCell is {} ReferenceCellEncounterCellItem)
                {
                    sb.AppendLine("ReferenceCellEncounterCell =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ReferenceCellEncounterCellItem.Overall);
                        if (ReferenceCellEncounterCellItem.Specific != null)
                        {
                            foreach (var subItem in ReferenceCellEncounterCellItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (ActorCellMarkerReference is {} ActorCellMarkerReferenceItem)
                {
                    sb.AppendLine("ActorCellMarkerReference =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorCellMarkerReferenceItem.Overall);
                        if (ActorCellMarkerReferenceItem.Specific != null)
                        {
                            foreach (var subItem in ActorCellMarkerReferenceItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (LocationCellMarkerReference is {} LocationCellMarkerReferenceItem)
                {
                    sb.AppendLine("LocationCellMarkerReference =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocationCellMarkerReferenceItem.Overall);
                        if (LocationCellMarkerReferenceItem.Specific != null)
                        {
                            foreach (var subItem in LocationCellMarkerReferenceItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (ActorCellEnablePoint is {} ActorCellEnablePointItem)
                {
                    sb.AppendLine("ActorCellEnablePoint =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorCellEnablePointItem.Overall);
                        if (ActorCellEnablePointItem.Specific != null)
                        {
                            foreach (var subItem in ActorCellEnablePointItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (LocationCellEnablePoint is {} LocationCellEnablePointItem)
                {
                    sb.AppendLine("LocationCellEnablePoint =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocationCellEnablePointItem.Overall);
                        if (LocationCellEnablePointItem.Specific != null)
                        {
                            foreach (var subItem in LocationCellEnablePointItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ParentLocation, "ParentLocation");
                }
                {
                    sb.AppendItem(Music, "Music");
                }
                {
                    sb.AppendItem(UnreportedCrimeFaction, "UnreportedCrimeFaction");
                }
                {
                    sb.AppendItem(WorldLocationMarkerRef, "WorldLocationMarkerRef");
                }
                {
                    sb.AppendItem(WorldLocationRadius, "WorldLocationRadius");
                }
                {
                    sb.AppendItem(HorseMarkerRef, "HorseMarkerRef");
                }
                {
                    sb.AppendItem(Color, "Color");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ActorCellPersistentReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ActorCellPersistentReferences?.Overall, rhs.ActorCellPersistentReferences?.Overall), Noggog.ExceptionExt.Combine(this.ActorCellPersistentReferences?.Specific, rhs.ActorCellPersistentReferences?.Specific));
                ret.LocationCellPersistentReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LocationCellPersistentReferences?.Overall, rhs.LocationCellPersistentReferences?.Overall), Noggog.ExceptionExt.Combine(this.LocationCellPersistentReferences?.Specific, rhs.LocationCellPersistentReferences?.Specific));
                ret.ReferenceCellPersistentReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ReferenceCellPersistentReferences?.Overall, rhs.ReferenceCellPersistentReferences?.Overall), Noggog.ExceptionExt.Combine(this.ReferenceCellPersistentReferences?.Specific, rhs.ReferenceCellPersistentReferences?.Specific));
                ret.ActorCellUniques = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ActorCellUniques?.Overall, rhs.ActorCellUniques?.Overall), Noggog.ExceptionExt.Combine(this.ActorCellUniques?.Specific, rhs.ActorCellUniques?.Specific));
                ret.LocationCellUniques = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellUnique.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LocationCellUniques?.Overall, rhs.LocationCellUniques?.Overall), Noggog.ExceptionExt.Combine(this.LocationCellUniques?.Specific, rhs.LocationCellUniques?.Specific));
                ret.ReferenceCellUnique = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ReferenceCellUnique?.Overall, rhs.ReferenceCellUnique?.Overall), Noggog.ExceptionExt.Combine(this.ReferenceCellUnique?.Specific, rhs.ReferenceCellUnique?.Specific));
                ret.ActorCellStaticReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ActorCellStaticReferences?.Overall, rhs.ActorCellStaticReferences?.Overall), Noggog.ExceptionExt.Combine(this.ActorCellStaticReferences?.Specific, rhs.ActorCellStaticReferences?.Specific));
                ret.LocationCellStaticReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellStaticReference.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LocationCellStaticReferences?.Overall, rhs.LocationCellStaticReferences?.Overall), Noggog.ExceptionExt.Combine(this.LocationCellStaticReferences?.Specific, rhs.LocationCellStaticReferences?.Specific));
                ret.ReferenceCellStaticReferences = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ReferenceCellStaticReferences?.Overall, rhs.ReferenceCellStaticReferences?.Overall), Noggog.ExceptionExt.Combine(this.ReferenceCellStaticReferences?.Specific, rhs.ReferenceCellStaticReferences?.Specific));
                ret.ActorCellEncounterCell = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ActorCellEncounterCell?.Overall, rhs.ActorCellEncounterCell?.Overall), Noggog.ExceptionExt.Combine(this.ActorCellEncounterCell?.Specific, rhs.ActorCellEncounterCell?.Specific));
                ret.LocationCellEncounterCell = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LocationCellEncounterCell?.Overall, rhs.LocationCellEncounterCell?.Overall), Noggog.ExceptionExt.Combine(this.LocationCellEncounterCell?.Specific, rhs.LocationCellEncounterCell?.Specific));
                ret.ReferenceCellEncounterCell = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCoordinate.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ReferenceCellEncounterCell?.Overall, rhs.ReferenceCellEncounterCell?.Overall), Noggog.ExceptionExt.Combine(this.ReferenceCellEncounterCell?.Specific, rhs.ReferenceCellEncounterCell?.Specific));
                ret.ActorCellMarkerReference = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ActorCellMarkerReference?.Overall, rhs.ActorCellMarkerReference?.Overall), Noggog.ExceptionExt.Combine(this.ActorCellMarkerReference?.Specific, rhs.ActorCellMarkerReference?.Specific));
                ret.LocationCellMarkerReference = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.LocationCellMarkerReference?.Overall, rhs.LocationCellMarkerReference?.Overall), Noggog.ExceptionExt.Combine(this.LocationCellMarkerReference?.Specific, rhs.LocationCellMarkerReference?.Specific));
                ret.ActorCellEnablePoint = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.ActorCellEnablePoint?.Overall, rhs.ActorCellEnablePoint?.Overall), Noggog.ExceptionExt.Combine(this.ActorCellEnablePoint?.Specific, rhs.ActorCellEnablePoint?.Specific));
                ret.LocationCellEnablePoint = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LocationCellEnablePoint.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LocationCellEnablePoint?.Overall, rhs.LocationCellEnablePoint?.Overall), Noggog.ExceptionExt.Combine(this.LocationCellEnablePoint?.Specific, rhs.LocationCellEnablePoint?.Specific));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.ParentLocation = this.ParentLocation.Combine(rhs.ParentLocation);
                ret.Music = this.Music.Combine(rhs.Music);
                ret.UnreportedCrimeFaction = this.UnreportedCrimeFaction.Combine(rhs.UnreportedCrimeFaction);
                ret.WorldLocationMarkerRef = this.WorldLocationMarkerRef.Combine(rhs.WorldLocationMarkerRef);
                ret.WorldLocationRadius = this.WorldLocationRadius.Combine(rhs.WorldLocationRadius);
                ret.HorseMarkerRef = this.HorseMarkerRef.Combine(rhs.HorseMarkerRef);
                ret.Color = this.Color.Combine(rhs.Color);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public LocationReference.TranslationMask? ActorCellPersistentReferences;
            public LocationReference.TranslationMask? LocationCellPersistentReferences;
            public bool ReferenceCellPersistentReferences;
            public LocationCellUnique.TranslationMask? ActorCellUniques;
            public LocationCellUnique.TranslationMask? LocationCellUniques;
            public bool ReferenceCellUnique;
            public LocationCellStaticReference.TranslationMask? ActorCellStaticReferences;
            public LocationCellStaticReference.TranslationMask? LocationCellStaticReferences;
            public bool ReferenceCellStaticReferences;
            public LocationCoordinate.TranslationMask? ActorCellEncounterCell;
            public LocationCoordinate.TranslationMask? LocationCellEncounterCell;
            public LocationCoordinate.TranslationMask? ReferenceCellEncounterCell;
            public bool ActorCellMarkerReference;
            public bool LocationCellMarkerReference;
            public LocationCellEnablePoint.TranslationMask? ActorCellEnablePoint;
            public LocationCellEnablePoint.TranslationMask? LocationCellEnablePoint;
            public bool Name;
            public bool Keywords;
            public bool ParentLocation;
            public bool Music;
            public bool UnreportedCrimeFaction;
            public bool WorldLocationMarkerRef;
            public bool WorldLocationRadius;
            public bool HorseMarkerRef;
            public bool Color;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ReferenceCellPersistentReferences = defaultOn;
                this.ReferenceCellUnique = defaultOn;
                this.ReferenceCellStaticReferences = defaultOn;
                this.ActorCellMarkerReference = defaultOn;
                this.LocationCellMarkerReference = defaultOn;
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.ParentLocation = defaultOn;
                this.Music = defaultOn;
                this.UnreportedCrimeFaction = defaultOn;
                this.WorldLocationMarkerRef = defaultOn;
                this.WorldLocationRadius = defaultOn;
                this.HorseMarkerRef = defaultOn;
                this.Color = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ActorCellPersistentReferences == null ? DefaultOn : !ActorCellPersistentReferences.GetCrystal().CopyNothing, ActorCellPersistentReferences?.GetCrystal()));
                ret.Add((LocationCellPersistentReferences == null ? DefaultOn : !LocationCellPersistentReferences.GetCrystal().CopyNothing, LocationCellPersistentReferences?.GetCrystal()));
                ret.Add((ReferenceCellPersistentReferences, null));
                ret.Add((ActorCellUniques == null ? DefaultOn : !ActorCellUniques.GetCrystal().CopyNothing, ActorCellUniques?.GetCrystal()));
                ret.Add((LocationCellUniques == null ? DefaultOn : !LocationCellUniques.GetCrystal().CopyNothing, LocationCellUniques?.GetCrystal()));
                ret.Add((ReferenceCellUnique, null));
                ret.Add((ActorCellStaticReferences == null ? DefaultOn : !ActorCellStaticReferences.GetCrystal().CopyNothing, ActorCellStaticReferences?.GetCrystal()));
                ret.Add((LocationCellStaticReferences == null ? DefaultOn : !LocationCellStaticReferences.GetCrystal().CopyNothing, LocationCellStaticReferences?.GetCrystal()));
                ret.Add((ReferenceCellStaticReferences, null));
                ret.Add((ActorCellEncounterCell == null ? DefaultOn : !ActorCellEncounterCell.GetCrystal().CopyNothing, ActorCellEncounterCell?.GetCrystal()));
                ret.Add((LocationCellEncounterCell == null ? DefaultOn : !LocationCellEncounterCell.GetCrystal().CopyNothing, LocationCellEncounterCell?.GetCrystal()));
                ret.Add((ReferenceCellEncounterCell == null ? DefaultOn : !ReferenceCellEncounterCell.GetCrystal().CopyNothing, ReferenceCellEncounterCell?.GetCrystal()));
                ret.Add((ActorCellMarkerReference, null));
                ret.Add((LocationCellMarkerReference, null));
                ret.Add((ActorCellEnablePoint == null ? DefaultOn : !ActorCellEnablePoint.GetCrystal().CopyNothing, ActorCellEnablePoint?.GetCrystal()));
                ret.Add((LocationCellEnablePoint == null ? DefaultOn : !LocationCellEnablePoint.GetCrystal().CopyNothing, LocationCellEnablePoint?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Keywords, null));
                ret.Add((ParentLocation, null));
                ret.Add((Music, null));
                ret.Add((UnreportedCrimeFaction, null));
                ret.Add((WorldLocationMarkerRef, null));
                ret.Add((WorldLocationRadius, null));
                ret.Add((HorseMarkerRef, null));
                ret.Add((Color, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Location_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LocationCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LocationSetterCommon.Instance.RemapLinks(this, mapping);
        public Location(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Location(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Location(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Location(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Location(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Location>.ToString(this);
        }

        protected override Type LinkType => typeof(ILocation);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILocationGetter rhs) return false;
            return ((LocationCommon)((ILocationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILocationGetter? obj)
        {
            return ((LocationCommon)((ILocationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LocationCommon)((ILocationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LocationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Location CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Location();
            ((LocationSetterCommon)((ILocationGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Location item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LocationSetterCommon)((ILocationGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Location GetNew()
        {
            return new Location();
        }

    }
    #endregion

    #region Interface
    public partial interface ILocation :
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILocationGetter,
        ILocationRecord,
        ILoquiObjectSetter<ILocationInternal>,
        INamed,
        INamedRequired,
        ISkyrimMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        new ExtendedList<LocationReference>? ActorCellPersistentReferences { get; set; }
        new ExtendedList<LocationReference>? LocationCellPersistentReferences { get; set; }
        new ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? ReferenceCellPersistentReferences { get; set; }
        new ExtendedList<LocationCellUnique>? ActorCellUniques { get; set; }
        new ExtendedList<LocationCellUnique>? LocationCellUniques { get; set; }
        new ExtendedList<IFormLinkGetter<INpcGetter>>? ReferenceCellUnique { get; set; }
        new ExtendedList<LocationCellStaticReference>? ActorCellStaticReferences { get; set; }
        new ExtendedList<LocationCellStaticReference>? LocationCellStaticReferences { get; set; }
        new ExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>? ReferenceCellStaticReferences { get; set; }
        new ExtendedList<LocationCoordinate> ActorCellEncounterCell { get; }
        new ExtendedList<LocationCoordinate> LocationCellEncounterCell { get; }
        new ExtendedList<LocationCoordinate> ReferenceCellEncounterCell { get; }
        new ExtendedList<IFormLinkGetter<IPlacedGetter>>? ActorCellMarkerReference { get; set; }
        new ExtendedList<IFormLinkGetter<IPlacedGetter>>? LocationCellMarkerReference { get; set; }
        new ExtendedList<LocationCellEnablePoint>? ActorCellEnablePoint { get; set; }
        new ExtendedList<LocationCellEnablePoint>? LocationCellEnablePoint { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new IFormLinkNullable<ILocationGetter> ParentLocation { get; set; }
        new IFormLinkNullable<IMusicTypeGetter> Music { get; set; }
        new IFormLinkNullable<IFactionGetter> UnreportedCrimeFaction { get; set; }
        new IFormLinkNullable<IPlacedSimpleGetter> WorldLocationMarkerRef { get; set; }
        new Single? WorldLocationRadius { get; set; }
        new IFormLinkNullable<IPlacedObjectGetter> HorseMarkerRef { get; set; }
        new Color? Color { get; set; }
    }

    public partial interface ILocationInternal :
        ISkyrimMajorRecordInternal,
        ILocation,
        ILocationGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.LCTN)]
    public partial interface ILocationGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILocationRecordGetter,
        ILoquiObject<ILocationGetter>,
        IMapsToGetter<ILocationGetter>,
        INamedGetter,
        INamedRequiredGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Location_Registration.Instance;
        IReadOnlyList<ILocationReferenceGetter>? ActorCellPersistentReferences { get; }
        IReadOnlyList<ILocationReferenceGetter>? LocationCellPersistentReferences { get; }
        IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? ReferenceCellPersistentReferences { get; }
        IReadOnlyList<ILocationCellUniqueGetter>? ActorCellUniques { get; }
        IReadOnlyList<ILocationCellUniqueGetter>? LocationCellUniques { get; }
        IReadOnlyList<IFormLinkGetter<INpcGetter>>? ReferenceCellUnique { get; }
        IReadOnlyList<ILocationCellStaticReferenceGetter>? ActorCellStaticReferences { get; }
        IReadOnlyList<ILocationCellStaticReferenceGetter>? LocationCellStaticReferences { get; }
        IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? ReferenceCellStaticReferences { get; }
        IReadOnlyList<ILocationCoordinateGetter> ActorCellEncounterCell { get; }
        IReadOnlyList<ILocationCoordinateGetter> LocationCellEncounterCell { get; }
        IReadOnlyList<ILocationCoordinateGetter> ReferenceCellEncounterCell { get; }
        IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? ActorCellMarkerReference { get; }
        IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? LocationCellMarkerReference { get; }
        IReadOnlyList<ILocationCellEnablePointGetter>? ActorCellEnablePoint { get; }
        IReadOnlyList<ILocationCellEnablePointGetter>? LocationCellEnablePoint { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IFormLinkNullableGetter<ILocationGetter> ParentLocation { get; }
        IFormLinkNullableGetter<IMusicTypeGetter> Music { get; }
        IFormLinkNullableGetter<IFactionGetter> UnreportedCrimeFaction { get; }
        IFormLinkNullableGetter<IPlacedSimpleGetter> WorldLocationMarkerRef { get; }
        Single? WorldLocationRadius { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> HorseMarkerRef { get; }
        Color? Color { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LocationMixIn
    {
        public static void Clear(this ILocationInternal item)
        {
            ((LocationSetterCommon)((ILocationGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Location.Mask<bool> GetEqualsMask(
            this ILocationGetter item,
            ILocationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LocationCommon)((ILocationGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILocationGetter item,
            string? name = null,
            Location.Mask<bool>? printMask = null)
        {
            return ((LocationCommon)((ILocationGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILocationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Location.Mask<bool>? printMask = null)
        {
            ((LocationCommon)((ILocationGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILocationGetter item,
            ILocationGetter rhs,
            Location.TranslationMask? equalsMask = null)
        {
            return ((LocationCommon)((ILocationGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILocationInternal lhs,
            ILocationGetter rhs,
            out Location.ErrorMask errorMask,
            Location.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LocationSetterTranslationCommon)((ILocationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Location.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILocationInternal lhs,
            ILocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LocationSetterTranslationCommon)((ILocationGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Location DeepCopy(
            this ILocationGetter item,
            Location.TranslationMask? copyMask = null)
        {
            return ((LocationSetterTranslationCommon)((ILocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Location DeepCopy(
            this ILocationGetter item,
            out Location.ErrorMask errorMask,
            Location.TranslationMask? copyMask = null)
        {
            return ((LocationSetterTranslationCommon)((ILocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Location DeepCopy(
            this ILocationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LocationSetterTranslationCommon)((ILocationGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Location Duplicate(
            this ILocationGetter item,
            FormKey formKey,
            Location.TranslationMask? copyMask = null)
        {
            return ((LocationCommon)((ILocationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Location Duplicate(
            this ILocationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((LocationCommon)((ILocationGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILocationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LocationSetterCommon)((ILocationGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Location_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        ActorCellPersistentReferences = 7,
        LocationCellPersistentReferences = 8,
        ReferenceCellPersistentReferences = 9,
        ActorCellUniques = 10,
        LocationCellUniques = 11,
        ReferenceCellUnique = 12,
        ActorCellStaticReferences = 13,
        LocationCellStaticReferences = 14,
        ReferenceCellStaticReferences = 15,
        ActorCellEncounterCell = 16,
        LocationCellEncounterCell = 17,
        ReferenceCellEncounterCell = 18,
        ActorCellMarkerReference = 19,
        LocationCellMarkerReference = 20,
        ActorCellEnablePoint = 21,
        LocationCellEnablePoint = 22,
        Name = 23,
        Keywords = 24,
        ParentLocation = 25,
        Music = 26,
        UnreportedCrimeFaction = 27,
        WorldLocationMarkerRef = 28,
        WorldLocationRadius = 29,
        HorseMarkerRef = 30,
        Color = 31,
    }
    #endregion

    #region Registration
    internal partial class Location_Registration : ILoquiRegistration
    {
        public static readonly Location_Registration Instance = new Location_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 25;

        public const ushort FieldCount = 32;

        public static readonly Type MaskType = typeof(Location.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Location.ErrorMask);

        public static readonly Type ClassType = typeof(Location);

        public static readonly Type GetterType = typeof(ILocationGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILocation);

        public static readonly Type? InternalSetterType = typeof(ILocationInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Location";

        public const string Name = "Location";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LCTN;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.LCTN);
            var all = RecordCollection.Factory(
                RecordTypes.LCTN,
                RecordTypes.ACPR,
                RecordTypes.LCPR,
                RecordTypes.RCPR,
                RecordTypes.ACUN,
                RecordTypes.LCUN,
                RecordTypes.RCUN,
                RecordTypes.ACSR,
                RecordTypes.LCSR,
                RecordTypes.RCSR,
                RecordTypes.ACEC,
                RecordTypes.LCEC,
                RecordTypes.RCEC,
                RecordTypes.ACID,
                RecordTypes.LCID,
                RecordTypes.ACEP,
                RecordTypes.LCEP,
                RecordTypes.FULL,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.PNAM,
                RecordTypes.NAM1,
                RecordTypes.FNAM,
                RecordTypes.MNAM,
                RecordTypes.RNAM,
                RecordTypes.NAM0,
                RecordTypes.CNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LocationBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LocationSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly LocationSetterCommon Instance = new LocationSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILocationInternal item)
        {
            ClearPartial();
            item.ActorCellPersistentReferences = null;
            item.LocationCellPersistentReferences = null;
            item.ReferenceCellPersistentReferences = null;
            item.ActorCellUniques = null;
            item.LocationCellUniques = null;
            item.ReferenceCellUnique = null;
            item.ActorCellStaticReferences = null;
            item.LocationCellStaticReferences = null;
            item.ReferenceCellStaticReferences = null;
            item.ActorCellEncounterCell.Clear();
            item.LocationCellEncounterCell.Clear();
            item.ReferenceCellEncounterCell.Clear();
            item.ActorCellMarkerReference = null;
            item.LocationCellMarkerReference = null;
            item.ActorCellEnablePoint = null;
            item.LocationCellEnablePoint = null;
            item.Name = default;
            item.Keywords = null;
            item.ParentLocation.Clear();
            item.Music.Clear();
            item.UnreportedCrimeFaction.Clear();
            item.WorldLocationMarkerRef.Clear();
            item.WorldLocationRadius = default;
            item.HorseMarkerRef.Clear();
            item.Color = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ILocationInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILocationInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILocation obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.ActorCellPersistentReferences?.RemapLinks(mapping);
            obj.LocationCellPersistentReferences?.RemapLinks(mapping);
            obj.ReferenceCellPersistentReferences?.RemapLinks(mapping);
            obj.ActorCellUniques?.RemapLinks(mapping);
            obj.LocationCellUniques?.RemapLinks(mapping);
            obj.ReferenceCellUnique?.RemapLinks(mapping);
            obj.ActorCellStaticReferences?.RemapLinks(mapping);
            obj.LocationCellStaticReferences?.RemapLinks(mapping);
            obj.ReferenceCellStaticReferences?.RemapLinks(mapping);
            obj.ActorCellEncounterCell.RemapLinks(mapping);
            obj.LocationCellEncounterCell.RemapLinks(mapping);
            obj.ReferenceCellEncounterCell.RemapLinks(mapping);
            obj.ActorCellMarkerReference?.RemapLinks(mapping);
            obj.LocationCellMarkerReference?.RemapLinks(mapping);
            obj.ActorCellEnablePoint?.RemapLinks(mapping);
            obj.LocationCellEnablePoint?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.ParentLocation.Relink(mapping);
            obj.Music.Relink(mapping);
            obj.UnreportedCrimeFaction.Relink(mapping);
            obj.WorldLocationMarkerRef.Relink(mapping);
            obj.HorseMarkerRef.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILocationInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ILocationInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LocationBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LocationBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Location)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Location)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class LocationCommon : SkyrimMajorRecordCommon
    {
        public new static readonly LocationCommon Instance = new LocationCommon();

        public Location.Mask<bool> GetEqualsMask(
            ILocationGetter item,
            ILocationGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Location.Mask<bool>(false);
            ((LocationCommon)((ILocationGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILocationGetter item,
            ILocationGetter rhs,
            Location.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ActorCellPersistentReferences = item.ActorCellPersistentReferences.CollectionEqualsHelper(
                rhs.ActorCellPersistentReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LocationCellPersistentReferences = item.LocationCellPersistentReferences.CollectionEqualsHelper(
                rhs.LocationCellPersistentReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ReferenceCellPersistentReferences = item.ReferenceCellPersistentReferences.CollectionEqualsHelper(
                rhs.ReferenceCellPersistentReferences,
                (l, r) => object.Equals(l, r),
                include);
            ret.ActorCellUniques = item.ActorCellUniques.CollectionEqualsHelper(
                rhs.ActorCellUniques,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LocationCellUniques = item.LocationCellUniques.CollectionEqualsHelper(
                rhs.LocationCellUniques,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ReferenceCellUnique = item.ReferenceCellUnique.CollectionEqualsHelper(
                rhs.ReferenceCellUnique,
                (l, r) => object.Equals(l, r),
                include);
            ret.ActorCellStaticReferences = item.ActorCellStaticReferences.CollectionEqualsHelper(
                rhs.ActorCellStaticReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LocationCellStaticReferences = item.LocationCellStaticReferences.CollectionEqualsHelper(
                rhs.LocationCellStaticReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ReferenceCellStaticReferences = item.ReferenceCellStaticReferences.CollectionEqualsHelper(
                rhs.ReferenceCellStaticReferences,
                (l, r) => object.Equals(l, r),
                include);
            ret.ActorCellEncounterCell = item.ActorCellEncounterCell.CollectionEqualsHelper(
                rhs.ActorCellEncounterCell,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LocationCellEncounterCell = item.LocationCellEncounterCell.CollectionEqualsHelper(
                rhs.LocationCellEncounterCell,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ReferenceCellEncounterCell = item.ReferenceCellEncounterCell.CollectionEqualsHelper(
                rhs.ReferenceCellEncounterCell,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ActorCellMarkerReference = item.ActorCellMarkerReference.CollectionEqualsHelper(
                rhs.ActorCellMarkerReference,
                (l, r) => object.Equals(l, r),
                include);
            ret.LocationCellMarkerReference = item.LocationCellMarkerReference.CollectionEqualsHelper(
                rhs.LocationCellMarkerReference,
                (l, r) => object.Equals(l, r),
                include);
            ret.ActorCellEnablePoint = item.ActorCellEnablePoint.CollectionEqualsHelper(
                rhs.ActorCellEnablePoint,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LocationCellEnablePoint = item.LocationCellEnablePoint.CollectionEqualsHelper(
                rhs.LocationCellEnablePoint,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.ParentLocation = item.ParentLocation.Equals(rhs.ParentLocation);
            ret.Music = item.Music.Equals(rhs.Music);
            ret.UnreportedCrimeFaction = item.UnreportedCrimeFaction.Equals(rhs.UnreportedCrimeFaction);
            ret.WorldLocationMarkerRef = item.WorldLocationMarkerRef.Equals(rhs.WorldLocationMarkerRef);
            ret.WorldLocationRadius = item.WorldLocationRadius.EqualsWithin(rhs.WorldLocationRadius);
            ret.HorseMarkerRef = item.HorseMarkerRef.Equals(rhs.HorseMarkerRef);
            ret.Color = item.Color.ColorOnlyEquals(rhs.Color);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ILocationGetter item,
            string? name = null,
            Location.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILocationGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Location.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Location =>");
            }
            else
            {
                sb.AppendLine($"{name} (Location) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILocationGetter item,
            StructuredStringBuilder sb,
            Location.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.ActorCellPersistentReferences?.Overall ?? true)
                && item.ActorCellPersistentReferences is {} ActorCellPersistentReferencesItem)
            {
                sb.AppendLine("ActorCellPersistentReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActorCellPersistentReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.LocationCellPersistentReferences?.Overall ?? true)
                && item.LocationCellPersistentReferences is {} LocationCellPersistentReferencesItem)
            {
                sb.AppendLine("LocationCellPersistentReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LocationCellPersistentReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ReferenceCellPersistentReferences?.Overall ?? true)
                && item.ReferenceCellPersistentReferences is {} ReferenceCellPersistentReferencesItem)
            {
                sb.AppendLine("ReferenceCellPersistentReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ReferenceCellPersistentReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.ActorCellUniques?.Overall ?? true)
                && item.ActorCellUniques is {} ActorCellUniquesItem)
            {
                sb.AppendLine("ActorCellUniques =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActorCellUniquesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.LocationCellUniques?.Overall ?? true)
                && item.LocationCellUniques is {} LocationCellUniquesItem)
            {
                sb.AppendLine("LocationCellUniques =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LocationCellUniquesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ReferenceCellUnique?.Overall ?? true)
                && item.ReferenceCellUnique is {} ReferenceCellUniqueItem)
            {
                sb.AppendLine("ReferenceCellUnique =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ReferenceCellUniqueItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.ActorCellStaticReferences?.Overall ?? true)
                && item.ActorCellStaticReferences is {} ActorCellStaticReferencesItem)
            {
                sb.AppendLine("ActorCellStaticReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActorCellStaticReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.LocationCellStaticReferences?.Overall ?? true)
                && item.LocationCellStaticReferences is {} LocationCellStaticReferencesItem)
            {
                sb.AppendLine("LocationCellStaticReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LocationCellStaticReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ReferenceCellStaticReferences?.Overall ?? true)
                && item.ReferenceCellStaticReferences is {} ReferenceCellStaticReferencesItem)
            {
                sb.AppendLine("ReferenceCellStaticReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ReferenceCellStaticReferencesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.ActorCellEncounterCell?.Overall ?? true)
            {
                sb.AppendLine("ActorCellEncounterCell =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ActorCellEncounterCell)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.LocationCellEncounterCell?.Overall ?? true)
            {
                sb.AppendLine("LocationCellEncounterCell =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.LocationCellEncounterCell)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.ReferenceCellEncounterCell?.Overall ?? true)
            {
                sb.AppendLine("ReferenceCellEncounterCell =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.ReferenceCellEncounterCell)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ActorCellMarkerReference?.Overall ?? true)
                && item.ActorCellMarkerReference is {} ActorCellMarkerReferenceItem)
            {
                sb.AppendLine("ActorCellMarkerReference =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActorCellMarkerReferenceItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.LocationCellMarkerReference?.Overall ?? true)
                && item.LocationCellMarkerReference is {} LocationCellMarkerReferenceItem)
            {
                sb.AppendLine("LocationCellMarkerReference =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LocationCellMarkerReferenceItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.ActorCellEnablePoint?.Overall ?? true)
                && item.ActorCellEnablePoint is {} ActorCellEnablePointItem)
            {
                sb.AppendLine("ActorCellEnablePoint =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActorCellEnablePointItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.LocationCellEnablePoint?.Overall ?? true)
                && item.LocationCellEnablePoint is {} LocationCellEnablePointItem)
            {
                sb.AppendLine("LocationCellEnablePoint =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LocationCellEnablePointItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.ParentLocation ?? true)
            {
                sb.AppendItem(item.ParentLocation.FormKeyNullable, "ParentLocation");
            }
            if (printMask?.Music ?? true)
            {
                sb.AppendItem(item.Music.FormKeyNullable, "Music");
            }
            if (printMask?.UnreportedCrimeFaction ?? true)
            {
                sb.AppendItem(item.UnreportedCrimeFaction.FormKeyNullable, "UnreportedCrimeFaction");
            }
            if (printMask?.WorldLocationMarkerRef ?? true)
            {
                sb.AppendItem(item.WorldLocationMarkerRef.FormKeyNullable, "WorldLocationMarkerRef");
            }
            if ((printMask?.WorldLocationRadius ?? true)
                && item.WorldLocationRadius is {} WorldLocationRadiusItem)
            {
                sb.AppendItem(WorldLocationRadiusItem, "WorldLocationRadius");
            }
            if (printMask?.HorseMarkerRef ?? true)
            {
                sb.AppendItem(item.HorseMarkerRef.FormKeyNullable, "HorseMarkerRef");
            }
            if ((printMask?.Color ?? true)
                && item.Color is {} ColorItem)
            {
                sb.AppendItem(ColorItem, "Color");
            }
        }
        
        public static Location_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Location_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Location_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Location_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Location_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Location_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Location_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Location_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Location_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Location_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Location_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Location_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Location_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILocationGetter? lhs,
            ILocationGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellPersistentReferences) ?? true))
            {
                if (!lhs.ActorCellPersistentReferences.SequenceEqualNullable(rhs.ActorCellPersistentReferences, (l, r) => ((LocationReferenceCommon)((ILocationReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.ActorCellPersistentReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellPersistentReferences) ?? true))
            {
                if (!lhs.LocationCellPersistentReferences.SequenceEqualNullable(rhs.LocationCellPersistentReferences, (l, r) => ((LocationReferenceCommon)((ILocationReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.LocationCellPersistentReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ReferenceCellPersistentReferences) ?? true))
            {
                if (!lhs.ReferenceCellPersistentReferences.SequenceEqualNullable(rhs.ReferenceCellPersistentReferences)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellUniques) ?? true))
            {
                if (!lhs.ActorCellUniques.SequenceEqualNullable(rhs.ActorCellUniques, (l, r) => ((LocationCellUniqueCommon)((ILocationCellUniqueGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.ActorCellUniques)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellUniques) ?? true))
            {
                if (!lhs.LocationCellUniques.SequenceEqualNullable(rhs.LocationCellUniques, (l, r) => ((LocationCellUniqueCommon)((ILocationCellUniqueGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.LocationCellUniques)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ReferenceCellUnique) ?? true))
            {
                if (!lhs.ReferenceCellUnique.SequenceEqualNullable(rhs.ReferenceCellUnique)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellStaticReferences) ?? true))
            {
                if (!lhs.ActorCellStaticReferences.SequenceEqualNullable(rhs.ActorCellStaticReferences, (l, r) => ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.ActorCellStaticReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellStaticReferences) ?? true))
            {
                if (!lhs.LocationCellStaticReferences.SequenceEqualNullable(rhs.LocationCellStaticReferences, (l, r) => ((LocationCellStaticReferenceCommon)((ILocationCellStaticReferenceGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.LocationCellStaticReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ReferenceCellStaticReferences) ?? true))
            {
                if (!lhs.ReferenceCellStaticReferences.SequenceEqualNullable(rhs.ReferenceCellStaticReferences)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellEncounterCell) ?? true))
            {
                if (!lhs.ActorCellEncounterCell.SequenceEqual(rhs.ActorCellEncounterCell, (l, r) => ((LocationCoordinateCommon)((ILocationCoordinateGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.ActorCellEncounterCell)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellEncounterCell) ?? true))
            {
                if (!lhs.LocationCellEncounterCell.SequenceEqual(rhs.LocationCellEncounterCell, (l, r) => ((LocationCoordinateCommon)((ILocationCoordinateGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.LocationCellEncounterCell)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ReferenceCellEncounterCell) ?? true))
            {
                if (!lhs.ReferenceCellEncounterCell.SequenceEqual(rhs.ReferenceCellEncounterCell, (l, r) => ((LocationCoordinateCommon)((ILocationCoordinateGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.ReferenceCellEncounterCell)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellMarkerReference) ?? true))
            {
                if (!lhs.ActorCellMarkerReference.SequenceEqualNullable(rhs.ActorCellMarkerReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellMarkerReference) ?? true))
            {
                if (!lhs.LocationCellMarkerReference.SequenceEqualNullable(rhs.LocationCellMarkerReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellEnablePoint) ?? true))
            {
                if (!lhs.ActorCellEnablePoint.SequenceEqualNullable(rhs.ActorCellEnablePoint, (l, r) => ((LocationCellEnablePointCommon)((ILocationCellEnablePointGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.ActorCellEnablePoint)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellEnablePoint) ?? true))
            {
                if (!lhs.LocationCellEnablePoint.SequenceEqualNullable(rhs.LocationCellEnablePoint, (l, r) => ((LocationCellEnablePointCommon)((ILocationCellEnablePointGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Location_FieldIndex.LocationCellEnablePoint)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.ParentLocation) ?? true))
            {
                if (!lhs.ParentLocation.Equals(rhs.ParentLocation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Music) ?? true))
            {
                if (!lhs.Music.Equals(rhs.Music)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.UnreportedCrimeFaction) ?? true))
            {
                if (!lhs.UnreportedCrimeFaction.Equals(rhs.UnreportedCrimeFaction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.WorldLocationMarkerRef) ?? true))
            {
                if (!lhs.WorldLocationMarkerRef.Equals(rhs.WorldLocationMarkerRef)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.WorldLocationRadius) ?? true))
            {
                if (!lhs.WorldLocationRadius.EqualsWithin(rhs.WorldLocationRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.HorseMarkerRef) ?? true))
            {
                if (!lhs.HorseMarkerRef.Equals(rhs.HorseMarkerRef)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Location_FieldIndex.Color) ?? true))
            {
                if (!lhs.Color.ColorOnlyEquals(rhs.Color)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILocationGetter?)lhs,
                rhs: rhs as ILocationGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILocationGetter?)lhs,
                rhs: rhs as ILocationGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ILocationGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ActorCellPersistentReferences);
            hash.Add(item.LocationCellPersistentReferences);
            hash.Add(item.ReferenceCellPersistentReferences);
            hash.Add(item.ActorCellUniques);
            hash.Add(item.LocationCellUniques);
            hash.Add(item.ReferenceCellUnique);
            hash.Add(item.ActorCellStaticReferences);
            hash.Add(item.LocationCellStaticReferences);
            hash.Add(item.ReferenceCellStaticReferences);
            hash.Add(item.ActorCellEncounterCell);
            hash.Add(item.LocationCellEncounterCell);
            hash.Add(item.ReferenceCellEncounterCell);
            hash.Add(item.ActorCellMarkerReference);
            hash.Add(item.LocationCellMarkerReference);
            hash.Add(item.ActorCellEnablePoint);
            hash.Add(item.LocationCellEnablePoint);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.Keywords);
            hash.Add(item.ParentLocation);
            hash.Add(item.Music);
            hash.Add(item.UnreportedCrimeFaction);
            hash.Add(item.WorldLocationMarkerRef);
            if (item.WorldLocationRadius is {} WorldLocationRadiusitem)
            {
                hash.Add(WorldLocationRadiusitem);
            }
            hash.Add(item.HorseMarkerRef);
            if (item.Color is {} Coloritem)
            {
                hash.Add(Coloritem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ILocationGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILocationGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Location.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILocationGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.ActorCellPersistentReferences is {} ActorCellPersistentReferencesItem)
            {
                foreach (var item in ActorCellPersistentReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.LocationCellPersistentReferences is {} LocationCellPersistentReferencesItem)
            {
                foreach (var item in LocationCellPersistentReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ReferenceCellPersistentReferences is {} ReferenceCellPersistentReferencesItem)
            {
                foreach (var item in ReferenceCellPersistentReferencesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ActorCellUniques is {} ActorCellUniquesItem)
            {
                foreach (var item in ActorCellUniquesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.LocationCellUniques is {} LocationCellUniquesItem)
            {
                foreach (var item in LocationCellUniquesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ReferenceCellUnique is {} ReferenceCellUniqueItem)
            {
                foreach (var item in ReferenceCellUniqueItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ActorCellStaticReferences is {} ActorCellStaticReferencesItem)
            {
                foreach (var item in ActorCellStaticReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.LocationCellStaticReferences is {} LocationCellStaticReferencesItem)
            {
                foreach (var item in LocationCellStaticReferencesItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ReferenceCellStaticReferences is {} ReferenceCellStaticReferencesItem)
            {
                foreach (var item in ReferenceCellStaticReferencesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.ActorCellEncounterCell.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.LocationCellEncounterCell.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.ReferenceCellEncounterCell.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.ActorCellMarkerReference is {} ActorCellMarkerReferenceItem)
            {
                foreach (var item in ActorCellMarkerReferenceItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.LocationCellMarkerReference is {} LocationCellMarkerReferenceItem)
            {
                foreach (var item in LocationCellMarkerReferenceItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.ActorCellEnablePoint is {} ActorCellEnablePointItem)
            {
                foreach (var item in ActorCellEnablePointItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.LocationCellEnablePoint is {} LocationCellEnablePointItem)
            {
                foreach (var item in LocationCellEnablePointItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.ParentLocation, out var ParentLocationInfo))
            {
                yield return ParentLocationInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Music, out var MusicInfo))
            {
                yield return MusicInfo;
            }
            if (FormLinkInformation.TryFactory(obj.UnreportedCrimeFaction, out var UnreportedCrimeFactionInfo))
            {
                yield return UnreportedCrimeFactionInfo;
            }
            if (FormLinkInformation.TryFactory(obj.WorldLocationMarkerRef, out var WorldLocationMarkerRefInfo))
            {
                yield return WorldLocationMarkerRefInfo;
            }
            if (FormLinkInformation.TryFactory(obj.HorseMarkerRef, out var HorseMarkerRefInfo))
            {
                yield return HorseMarkerRefInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public Location Duplicate(
            ILocationGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Location(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILocationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILocationGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class LocationSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly LocationSetterTranslationCommon Instance = new LocationSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILocationInternal item,
            ILocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILocation item,
            ILocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellPersistentReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.ActorCellPersistentReferences);
                try
                {
                    if ((rhs.ActorCellPersistentReferences != null))
                    {
                        item.ActorCellPersistentReferences = 
                            rhs.ActorCellPersistentReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationReference>();
                    }
                    else
                    {
                        item.ActorCellPersistentReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellPersistentReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.LocationCellPersistentReferences);
                try
                {
                    if ((rhs.LocationCellPersistentReferences != null))
                    {
                        item.LocationCellPersistentReferences = 
                            rhs.LocationCellPersistentReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationReference>();
                    }
                    else
                    {
                        item.LocationCellPersistentReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ReferenceCellPersistentReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.ReferenceCellPersistentReferences);
                try
                {
                    if ((rhs.ReferenceCellPersistentReferences != null))
                    {
                        item.ReferenceCellPersistentReferences = 
                            rhs.ReferenceCellPersistentReferences
                                .Select(b => (IFormLinkGetter<IPlacedSimpleGetter>)new FormLink<IPlacedSimpleGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>();
                    }
                    else
                    {
                        item.ReferenceCellPersistentReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellUniques) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.ActorCellUniques);
                try
                {
                    if ((rhs.ActorCellUniques != null))
                    {
                        item.ActorCellUniques = 
                            rhs.ActorCellUniques
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellUnique>();
                    }
                    else
                    {
                        item.ActorCellUniques = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellUniques) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.LocationCellUniques);
                try
                {
                    if ((rhs.LocationCellUniques != null))
                    {
                        item.LocationCellUniques = 
                            rhs.LocationCellUniques
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellUnique>();
                    }
                    else
                    {
                        item.LocationCellUniques = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ReferenceCellUnique) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.ReferenceCellUnique);
                try
                {
                    if ((rhs.ReferenceCellUnique != null))
                    {
                        item.ReferenceCellUnique = 
                            rhs.ReferenceCellUnique
                                .Select(b => (IFormLinkGetter<INpcGetter>)new FormLink<INpcGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<INpcGetter>>();
                    }
                    else
                    {
                        item.ReferenceCellUnique = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellStaticReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.ActorCellStaticReferences);
                try
                {
                    if ((rhs.ActorCellStaticReferences != null))
                    {
                        item.ActorCellStaticReferences = 
                            rhs.ActorCellStaticReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellStaticReference>();
                    }
                    else
                    {
                        item.ActorCellStaticReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellStaticReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.LocationCellStaticReferences);
                try
                {
                    if ((rhs.LocationCellStaticReferences != null))
                    {
                        item.LocationCellStaticReferences = 
                            rhs.LocationCellStaticReferences
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellStaticReference>();
                    }
                    else
                    {
                        item.LocationCellStaticReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ReferenceCellStaticReferences) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.ReferenceCellStaticReferences);
                try
                {
                    if ((rhs.ReferenceCellStaticReferences != null))
                    {
                        item.ReferenceCellStaticReferences = 
                            rhs.ReferenceCellStaticReferences
                                .Select(b => (IFormLinkGetter<IPlacedSimpleGetter>)new FormLink<IPlacedSimpleGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>();
                    }
                    else
                    {
                        item.ReferenceCellStaticReferences = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellEncounterCell) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.ActorCellEncounterCell);
                try
                {
                    item.ActorCellEncounterCell.SetTo(
                        rhs.ActorCellEncounterCell
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellEncounterCell) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.LocationCellEncounterCell);
                try
                {
                    item.LocationCellEncounterCell.SetTo(
                        rhs.LocationCellEncounterCell
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ReferenceCellEncounterCell) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.ReferenceCellEncounterCell);
                try
                {
                    item.ReferenceCellEncounterCell.SetTo(
                        rhs.ReferenceCellEncounterCell
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellMarkerReference) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.ActorCellMarkerReference);
                try
                {
                    if ((rhs.ActorCellMarkerReference != null))
                    {
                        item.ActorCellMarkerReference = 
                            rhs.ActorCellMarkerReference
                                .Select(b => (IFormLinkGetter<IPlacedGetter>)new FormLink<IPlacedGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IPlacedGetter>>();
                    }
                    else
                    {
                        item.ActorCellMarkerReference = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellMarkerReference) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.LocationCellMarkerReference);
                try
                {
                    if ((rhs.LocationCellMarkerReference != null))
                    {
                        item.LocationCellMarkerReference = 
                            rhs.LocationCellMarkerReference
                                .Select(b => (IFormLinkGetter<IPlacedGetter>)new FormLink<IPlacedGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IPlacedGetter>>();
                    }
                    else
                    {
                        item.LocationCellMarkerReference = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ActorCellEnablePoint) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.ActorCellEnablePoint);
                try
                {
                    if ((rhs.ActorCellEnablePoint != null))
                    {
                        item.ActorCellEnablePoint = 
                            rhs.ActorCellEnablePoint
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellEnablePoint>();
                    }
                    else
                    {
                        item.ActorCellEnablePoint = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.LocationCellEnablePoint) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.LocationCellEnablePoint);
                try
                {
                    if ((rhs.LocationCellEnablePoint != null))
                    {
                        item.LocationCellEnablePoint = 
                            rhs.LocationCellEnablePoint
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LocationCellEnablePoint>();
                    }
                    else
                    {
                        item.LocationCellEnablePoint = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Location_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.ParentLocation) ?? true))
            {
                item.ParentLocation.SetTo(rhs.ParentLocation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Music) ?? true))
            {
                item.Music.SetTo(rhs.Music.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.UnreportedCrimeFaction) ?? true))
            {
                item.UnreportedCrimeFaction.SetTo(rhs.UnreportedCrimeFaction.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.WorldLocationMarkerRef) ?? true))
            {
                item.WorldLocationMarkerRef.SetTo(rhs.WorldLocationMarkerRef.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.WorldLocationRadius) ?? true))
            {
                item.WorldLocationRadius = rhs.WorldLocationRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.HorseMarkerRef) ?? true))
            {
                item.HorseMarkerRef.SetTo(rhs.HorseMarkerRef.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Location_FieldIndex.Color) ?? true))
            {
                item.Color = rhs.Color;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ILocation item,
            ILocationGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILocationInternal)item,
                rhs: (ILocationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILocation)item,
                rhs: (ILocationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILocationInternal)item,
                rhs: (ILocationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILocation)item,
                rhs: (ILocationGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Location DeepCopy(
            ILocationGetter item,
            Location.TranslationMask? copyMask = null)
        {
            Location ret = (Location)((LocationCommon)((ILocationGetter)item).CommonInstance()!).GetNew();
            ((LocationSetterTranslationCommon)((ILocationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Location DeepCopy(
            ILocationGetter item,
            out Location.ErrorMask errorMask,
            Location.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Location ret = (Location)((LocationCommon)((ILocationGetter)item).CommonInstance()!).GetNew();
            ((LocationSetterTranslationCommon)((ILocationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Location.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Location DeepCopy(
            ILocationGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Location ret = (Location)((LocationCommon)((ILocationGetter)item).CommonInstance()!).GetNew();
            ((LocationSetterTranslationCommon)((ILocationGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Location
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Location_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Location_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LocationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LocationSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LocationSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class LocationBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly LocationBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ILocationGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.ActorCellPersistentReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACPR),
                transl: (MutagenWriter subWriter, ILocationReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.LocationCellPersistentReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCPR),
                transl: (MutagenWriter subWriter, ILocationReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedSimpleGetter>>.Instance.Write(
                writer: writer,
                items: item.ReferenceCellPersistentReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.RCPR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlacedSimpleGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellUniqueGetter>.Instance.Write(
                writer: writer,
                items: item.ActorCellUniques,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACUN),
                transl: (MutagenWriter subWriter, ILocationCellUniqueGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellUniqueBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellUniqueGetter>.Instance.Write(
                writer: writer,
                items: item.LocationCellUniques,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCUN),
                transl: (MutagenWriter subWriter, ILocationCellUniqueGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellUniqueBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Write(
                writer: writer,
                items: item.ReferenceCellUnique,
                recordType: translationParams.ConvertToCustom(RecordTypes.RCUN),
                transl: (MutagenWriter subWriter, IFormLinkGetter<INpcGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellStaticReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.ActorCellStaticReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACSR),
                transl: (MutagenWriter subWriter, ILocationCellStaticReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellStaticReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellStaticReferenceGetter>.Instance.Write(
                writer: writer,
                items: item.LocationCellStaticReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCSR),
                transl: (MutagenWriter subWriter, ILocationCellStaticReferenceGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellStaticReferenceBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedSimpleGetter>>.Instance.Write(
                writer: writer,
                items: item.ReferenceCellStaticReferences,
                recordType: translationParams.ConvertToCustom(RecordTypes.RCSR),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlacedSimpleGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCoordinateGetter>.Instance.Write(
                writer: writer,
                items: item.ActorCellEncounterCell,
                transl: (MutagenWriter subWriter, ILocationCoordinateGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    using (HeaderExport.Subrecord(writer, RecordTypes.ACEC))
                    {
                        ((LocationCoordinateBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCoordinateGetter>.Instance.Write(
                writer: writer,
                items: item.LocationCellEncounterCell,
                transl: (MutagenWriter subWriter, ILocationCoordinateGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    using (HeaderExport.Subrecord(writer, RecordTypes.LCEC))
                    {
                        ((LocationCoordinateBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCoordinateGetter>.Instance.Write(
                writer: writer,
                items: item.ReferenceCellEncounterCell,
                transl: (MutagenWriter subWriter, ILocationCoordinateGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    using (HeaderExport.Subrecord(writer, RecordTypes.RCEC))
                    {
                        ((LocationCoordinateBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedGetter>>.Instance.Write(
                writer: writer,
                items: item.ActorCellMarkerReference,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACID),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlacedGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedGetter>>.Instance.Write(
                writer: writer,
                items: item.LocationCellMarkerReference,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCID),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlacedGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellEnablePointGetter>.Instance.Write(
                writer: writer,
                items: item.ActorCellEnablePoint,
                recordType: translationParams.ConvertToCustom(RecordTypes.ACEP),
                transl: (MutagenWriter subWriter, ILocationCellEnablePointGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellEnablePointBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILocationCellEnablePointGetter>.Instance.Write(
                writer: writer,
                items: item.LocationCellEnablePoint,
                recordType: translationParams.ConvertToCustom(RecordTypes.LCEP),
                transl: (MutagenWriter subWriter, ILocationCellEnablePointGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LocationCellEnablePointBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ParentLocation,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Music,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UnreportedCrimeFaction,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WorldLocationMarkerRef,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.WorldLocationRadius,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HorseMarkerRef,
                header: translationParams.ConvertToCustom(RecordTypes.NAM0));
            ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Color,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
        }

        public void Write(
            MutagenWriter writer,
            ILocationGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.LCTN,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILocationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILocationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILocationGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LocationBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly LocationBinaryCreateTranslation Instance = new LocationBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LCTN;
        public static ParseResult FillBinaryRecordTypes(
            ILocationInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ACPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActorCellPersistentReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationReference>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationReference.TryCreateFromBinary)
                        .CastExtendedList<LocationReference>();
                    return (int)Location_FieldIndex.ActorCellPersistentReferences;
                }
                case RecordTypeInts.LCPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationCellPersistentReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationReference>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationReference.TryCreateFromBinary)
                        .CastExtendedList<LocationReference>();
                    return (int)Location_FieldIndex.LocationCellPersistentReferences;
                }
                case RecordTypeInts.RCPR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ReferenceCellPersistentReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedSimpleGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>();
                    return (int)Location_FieldIndex.ReferenceCellPersistentReferences;
                }
                case RecordTypeInts.ACUN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActorCellUniques = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellUnique>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellUnique.TryCreateFromBinary)
                        .CastExtendedList<LocationCellUnique>();
                    return (int)Location_FieldIndex.ActorCellUniques;
                }
                case RecordTypeInts.LCUN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationCellUniques = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellUnique>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellUnique.TryCreateFromBinary)
                        .CastExtendedList<LocationCellUnique>();
                    return (int)Location_FieldIndex.LocationCellUniques;
                }
                case RecordTypeInts.RCUN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ReferenceCellUnique = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<INpcGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<INpcGetter>>();
                    return (int)Location_FieldIndex.ReferenceCellUnique;
                }
                case RecordTypeInts.ACSR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActorCellStaticReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellStaticReference>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellStaticReference.TryCreateFromBinary)
                        .CastExtendedList<LocationCellStaticReference>();
                    return (int)Location_FieldIndex.ActorCellStaticReferences;
                }
                case RecordTypeInts.LCSR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationCellStaticReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellStaticReference>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellStaticReference.TryCreateFromBinary)
                        .CastExtendedList<LocationCellStaticReference>();
                    return (int)Location_FieldIndex.LocationCellStaticReferences;
                }
                case RecordTypeInts.RCSR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ReferenceCellStaticReferences = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedSimpleGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IPlacedSimpleGetter>>();
                    return (int)Location_FieldIndex.ReferenceCellStaticReferences;
                }
                case RecordTypeInts.ACEC:
                {
                    item.ActorCellEncounterCell.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCoordinate>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RecordTypes.ACEC,
                            skipHeader: true,
                            translationParams: translationParams,
                            transl: LocationCoordinate.TryCreateFromBinary));
                    return (int)Location_FieldIndex.ActorCellEncounterCell;
                }
                case RecordTypeInts.LCEC:
                {
                    item.LocationCellEncounterCell.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCoordinate>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RecordTypes.LCEC,
                            skipHeader: true,
                            translationParams: translationParams,
                            transl: LocationCoordinate.TryCreateFromBinary));
                    return (int)Location_FieldIndex.LocationCellEncounterCell;
                }
                case RecordTypeInts.RCEC:
                {
                    item.ReferenceCellEncounterCell.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCoordinate>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RecordTypes.RCEC,
                            skipHeader: true,
                            translationParams: translationParams,
                            transl: LocationCoordinate.TryCreateFromBinary));
                    return (int)Location_FieldIndex.ReferenceCellEncounterCell;
                }
                case RecordTypeInts.ACID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActorCellMarkerReference = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IPlacedGetter>>();
                    return (int)Location_FieldIndex.ActorCellMarkerReference;
                }
                case RecordTypeInts.LCID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationCellMarkerReference = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IPlacedGetter>>();
                    return (int)Location_FieldIndex.LocationCellMarkerReference;
                }
                case RecordTypeInts.ACEP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActorCellEnablePoint = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellEnablePoint>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellEnablePoint.TryCreateFromBinary)
                        .CastExtendedList<LocationCellEnablePoint>();
                    return (int)Location_FieldIndex.ActorCellEnablePoint;
                }
                case RecordTypeInts.LCEP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationCellEnablePoint = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LocationCellEnablePoint>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: LocationCellEnablePoint.TryCreateFromBinary)
                        .CastExtendedList<LocationCellEnablePoint>();
                    return (int)Location_FieldIndex.LocationCellEnablePoint;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Location_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Location_FieldIndex.Keywords;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ParentLocation.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Location_FieldIndex.ParentLocation;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Music.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Location_FieldIndex.Music;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UnreportedCrimeFaction.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Location_FieldIndex.UnreportedCrimeFaction;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WorldLocationMarkerRef.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Location_FieldIndex.WorldLocationMarkerRef;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WorldLocationRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Location_FieldIndex.WorldLocationRadius;
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HorseMarkerRef.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Location_FieldIndex.HorseMarkerRef;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Color = frame.ReadColor(ColorBinaryType.Alpha);
                    return (int)Location_FieldIndex.Color;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class LocationBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class LocationBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ILocationGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Location_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Location_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LocationCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LocationSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LocationCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LocationBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LocationBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ILocation);


        public IReadOnlyList<ILocationReferenceGetter>? ActorCellPersistentReferences { get; private set; }
        public IReadOnlyList<ILocationReferenceGetter>? LocationCellPersistentReferences { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? ReferenceCellPersistentReferences { get; private set; }
        public IReadOnlyList<ILocationCellUniqueGetter>? ActorCellUniques { get; private set; }
        public IReadOnlyList<ILocationCellUniqueGetter>? LocationCellUniques { get; private set; }
        public IReadOnlyList<IFormLinkGetter<INpcGetter>>? ReferenceCellUnique { get; private set; }
        public IReadOnlyList<ILocationCellStaticReferenceGetter>? ActorCellStaticReferences { get; private set; }
        public IReadOnlyList<ILocationCellStaticReferenceGetter>? LocationCellStaticReferences { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IPlacedSimpleGetter>>? ReferenceCellStaticReferences { get; private set; }
        public IReadOnlyList<ILocationCoordinateGetter> ActorCellEncounterCell { get; private set; } = Array.Empty<ILocationCoordinateGetter>();
        public IReadOnlyList<ILocationCoordinateGetter> LocationCellEncounterCell { get; private set; } = Array.Empty<ILocationCoordinateGetter>();
        public IReadOnlyList<ILocationCoordinateGetter> ReferenceCellEncounterCell { get; private set; } = Array.Empty<ILocationCoordinateGetter>();
        public IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? ActorCellMarkerReference { get; private set; }
        public IReadOnlyList<IFormLinkGetter<IPlacedGetter>>? LocationCellMarkerReference { get; private set; }
        public IReadOnlyList<ILocationCellEnablePointGetter>? ActorCellEnablePoint { get; private set; }
        public IReadOnlyList<ILocationCellEnablePointGetter>? LocationCellEnablePoint { get; private set; }
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region ParentLocation
        private int? _ParentLocationLocation;
        public IFormLinkNullableGetter<ILocationGetter> ParentLocation => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationGetter>(_package, _recordData, _ParentLocationLocation);
        #endregion
        #region Music
        private int? _MusicLocation;
        public IFormLinkNullableGetter<IMusicTypeGetter> Music => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMusicTypeGetter>(_package, _recordData, _MusicLocation);
        #endregion
        #region UnreportedCrimeFaction
        private int? _UnreportedCrimeFactionLocation;
        public IFormLinkNullableGetter<IFactionGetter> UnreportedCrimeFaction => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFactionGetter>(_package, _recordData, _UnreportedCrimeFactionLocation);
        #endregion
        #region WorldLocationMarkerRef
        private int? _WorldLocationMarkerRefLocation;
        public IFormLinkNullableGetter<IPlacedSimpleGetter> WorldLocationMarkerRef => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedSimpleGetter>(_package, _recordData, _WorldLocationMarkerRefLocation);
        #endregion
        #region WorldLocationRadius
        private int? _WorldLocationRadiusLocation;
        public Single? WorldLocationRadius => _WorldLocationRadiusLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WorldLocationRadiusLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region HorseMarkerRef
        private int? _HorseMarkerRefLocation;
        public IFormLinkNullableGetter<IPlacedObjectGetter> HorseMarkerRef => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedObjectGetter>(_package, _recordData, _HorseMarkerRefLocation);
        #endregion
        #region Color
        private int? _ColorLocation;
        public Color? Color => _ColorLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ColorLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.Alpha) : default(Color?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LocationBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILocationGetter LocationFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new LocationBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ILocationGetter LocationFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LocationFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ACPR:
                {
                    this.ActorCellPersistentReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationReferenceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationReferenceBinaryOverlay.LocationReferenceFactory(s, p));
                    return (int)Location_FieldIndex.ActorCellPersistentReferences;
                }
                case RecordTypeInts.LCPR:
                {
                    this.LocationCellPersistentReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationReferenceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationReferenceBinaryOverlay.LocationReferenceFactory(s, p));
                    return (int)Location_FieldIndex.LocationCellPersistentReferences;
                }
                case RecordTypeInts.RCPR:
                {
                    this.ReferenceCellPersistentReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IPlacedSimpleGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlacedSimpleGetter>(p, s));
                    return (int)Location_FieldIndex.ReferenceCellPersistentReferences;
                }
                case RecordTypeInts.ACUN:
                {
                    this.ActorCellUniques = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellUniqueGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationCellUniqueBinaryOverlay.LocationCellUniqueFactory(s, p));
                    return (int)Location_FieldIndex.ActorCellUniques;
                }
                case RecordTypeInts.LCUN:
                {
                    this.LocationCellUniques = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellUniqueGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationCellUniqueBinaryOverlay.LocationCellUniqueFactory(s, p));
                    return (int)Location_FieldIndex.LocationCellUniques;
                }
                case RecordTypeInts.RCUN:
                {
                    this.ReferenceCellUnique = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<INpcGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<INpcGetter>(p, s));
                    return (int)Location_FieldIndex.ReferenceCellUnique;
                }
                case RecordTypeInts.ACSR:
                {
                    this.ActorCellStaticReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellStaticReferenceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 16,
                        getter: (s, p) => LocationCellStaticReferenceBinaryOverlay.LocationCellStaticReferenceFactory(s, p));
                    return (int)Location_FieldIndex.ActorCellStaticReferences;
                }
                case RecordTypeInts.LCSR:
                {
                    this.LocationCellStaticReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellStaticReferenceGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 16,
                        getter: (s, p) => LocationCellStaticReferenceBinaryOverlay.LocationCellStaticReferenceFactory(s, p));
                    return (int)Location_FieldIndex.LocationCellStaticReferences;
                }
                case RecordTypeInts.RCSR:
                {
                    this.ReferenceCellStaticReferences = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IPlacedSimpleGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlacedSimpleGetter>(p, s));
                    return (int)Location_FieldIndex.ReferenceCellStaticReferences;
                }
                case RecordTypeInts.ACEC:
                {
                    this.ActorCellEncounterCell = this.ParseRepeatedTypelessSubrecord<ILocationCoordinateGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: RecordTypes.ACEC,
                        factory: LocationCoordinateBinaryOverlay.LocationCoordinateFactory,
                        skipHeader: true);
                    return (int)Location_FieldIndex.ActorCellEncounterCell;
                }
                case RecordTypeInts.LCEC:
                {
                    this.LocationCellEncounterCell = this.ParseRepeatedTypelessSubrecord<ILocationCoordinateGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: RecordTypes.LCEC,
                        factory: LocationCoordinateBinaryOverlay.LocationCoordinateFactory,
                        skipHeader: true);
                    return (int)Location_FieldIndex.LocationCellEncounterCell;
                }
                case RecordTypeInts.RCEC:
                {
                    this.ReferenceCellEncounterCell = this.ParseRepeatedTypelessSubrecord<ILocationCoordinateGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: RecordTypes.RCEC,
                        factory: LocationCoordinateBinaryOverlay.LocationCoordinateFactory,
                        skipHeader: true);
                    return (int)Location_FieldIndex.ReferenceCellEncounterCell;
                }
                case RecordTypeInts.ACID:
                {
                    this.ActorCellMarkerReference = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IPlacedGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlacedGetter>(p, s));
                    return (int)Location_FieldIndex.ActorCellMarkerReference;
                }
                case RecordTypeInts.LCID:
                {
                    this.LocationCellMarkerReference = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<IPlacedGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlacedGetter>(p, s));
                    return (int)Location_FieldIndex.LocationCellMarkerReference;
                }
                case RecordTypeInts.ACEP:
                {
                    this.ActorCellEnablePoint = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellEnablePointGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationCellEnablePointBinaryOverlay.LocationCellEnablePointFactory(s, p));
                    return (int)Location_FieldIndex.ActorCellEnablePoint;
                }
                case RecordTypeInts.LCEP:
                {
                    this.LocationCellEnablePoint = BinaryOverlayList.FactoryByStartIndexWithTrigger<ILocationCellEnablePointGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 12,
                        getter: (s, p) => LocationCellEnablePointBinaryOverlay.LocationCellEnablePointFactory(s, p));
                    return (int)Location_FieldIndex.LocationCellEnablePoint;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.Name;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Location_FieldIndex.Keywords;
                }
                case RecordTypeInts.PNAM:
                {
                    _ParentLocationLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.ParentLocation;
                }
                case RecordTypeInts.NAM1:
                {
                    _MusicLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.Music;
                }
                case RecordTypeInts.FNAM:
                {
                    _UnreportedCrimeFactionLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.UnreportedCrimeFaction;
                }
                case RecordTypeInts.MNAM:
                {
                    _WorldLocationMarkerRefLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.WorldLocationMarkerRef;
                }
                case RecordTypeInts.RNAM:
                {
                    _WorldLocationRadiusLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.WorldLocationRadius;
                }
                case RecordTypeInts.NAM0:
                {
                    _HorseMarkerRefLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.HorseMarkerRef;
                }
                case RecordTypeInts.CNAM:
                {
                    _ColorLocation = (stream.Position - offset);
                    return (int)Location_FieldIndex.Color;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LocationMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Location>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILocationGetter rhs) return false;
            return ((LocationCommon)((ILocationGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILocationGetter? obj)
        {
            return ((LocationCommon)((ILocationGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LocationCommon)((ILocationGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

