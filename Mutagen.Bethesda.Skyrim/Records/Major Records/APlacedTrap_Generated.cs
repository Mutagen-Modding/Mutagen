/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    /// <summary>
    /// Implemented by: [PlacedArrow, PlacedBeam, PlacedFlame, PlacedCone, PlacedBarrier, PlacedTrap, PlacedHazard, PlacedMissile]
    /// </summary>
    public abstract partial class APlacedTrap :
        SkyrimMajorRecord,
        IAPlacedTrapInternal,
        IEquatable<IAPlacedTrapGetter>,
        ILoquiObjectSetter<APlacedTrap>
    {
        #region Ctor
        protected APlacedTrap()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IAPlacedTrapGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region EncounterZone
        private readonly IFormLinkNullable<IEncounterZoneGetter> _EncounterZone = new FormLinkNullable<IEncounterZoneGetter>();
        public IFormLinkNullable<IEncounterZoneGetter> EncounterZone
        {
            get => _EncounterZone;
            set => _EncounterZone.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEncounterZoneGetter> IAPlacedTrapGetter.EncounterZone => this.EncounterZone;
        #endregion
        #region Owner
        private readonly IFormLinkNullable<IOwnerGetter> _Owner = new FormLinkNullable<IOwnerGetter>();
        public IFormLinkNullable<IOwnerGetter> Owner
        {
            get => _Owner;
            set => _Owner.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOwnerGetter> IAPlacedTrapGetter.Owner => this.Owner;
        #endregion
        #region FactionRank
        public Int32? FactionRank { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IAPlacedTrapGetter.FactionRank => this.FactionRank;
        #endregion
        #region HeadTrackingWeight
        public Single? HeadTrackingWeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAPlacedTrapGetter.HeadTrackingWeight => this.HeadTrackingWeight;
        #endregion
        #region FavorCost
        public Single? FavorCost { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAPlacedTrapGetter.FavorCost => this.FavorCost;
        #endregion
        #region Reflections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WaterReflection> _Reflections = new ExtendedList<WaterReflection>();
        public ExtendedList<WaterReflection> Reflections
        {
            get => this._Reflections;
            init => this._Reflections = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWaterReflectionGetter> IAPlacedTrapGetter.Reflections => _Reflections;
        #endregion

        #endregion
        #region LinkedReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LinkedReferences> _LinkedReferences = new ExtendedList<LinkedReferences>();
        public ExtendedList<LinkedReferences> LinkedReferences
        {
            get => this._LinkedReferences;
            init => this._LinkedReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILinkedReferencesGetter> IAPlacedTrapGetter.LinkedReferences => _LinkedReferences;
        #endregion

        #endregion
        #region ActivateParents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActivateParents? _ActivateParents;
        public ActivateParents? ActivateParents
        {
            get => _ActivateParents;
            set => _ActivateParents = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IActivateParentsGetter? IAPlacedTrapGetter.ActivateParents => this.ActivateParents;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IAPlacedTrapGetter.EnableParent => this.EnableParent;
        #endregion
        #region Emittance
        private readonly IFormLinkNullable<IEmittanceGetter> _Emittance = new FormLinkNullable<IEmittanceGetter>();
        public IFormLinkNullable<IEmittanceGetter> Emittance
        {
            get => _Emittance;
            set => _Emittance.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEmittanceGetter> IAPlacedTrapGetter.Emittance => this.Emittance;
        #endregion
        #region MultiBoundReference
        private readonly IFormLinkNullable<IPlacedObjectGetter> _MultiBoundReference = new FormLinkNullable<IPlacedObjectGetter>();
        public IFormLinkNullable<IPlacedObjectGetter> MultiBoundReference
        {
            get => _MultiBoundReference;
            set => _MultiBoundReference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IAPlacedTrapGetter.MultiBoundReference => this.MultiBoundReference;
        #endregion
        #region IgnoredBySandbox
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _IgnoredBySandbox;
        public MemorySlice<Byte>? IgnoredBySandbox
        {
            get => this._IgnoredBySandbox;
            set => this._IgnoredBySandbox = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IAPlacedTrapGetter.IgnoredBySandbox => this.IgnoredBySandbox;
        #endregion
        #region LocationRefTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? _LocationRefTypes;
        public ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes
        {
            get => this._LocationRefTypes;
            set => this._LocationRefTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? IAPlacedTrapGetter.LocationRefTypes => _LocationRefTypes;
        #endregion

        #endregion
        #region LocationReference
        private readonly IFormLinkNullable<ILocationRecordGetter> _LocationReference = new FormLinkNullable<ILocationRecordGetter>();
        public IFormLinkNullable<ILocationRecordGetter> LocationReference
        {
            get => _LocationReference;
            set => _LocationReference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationRecordGetter> IAPlacedTrapGetter.LocationReference => this.LocationReference;
        #endregion
        #region DistantLodData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Single>? _DistantLodData;
        public ExtendedList<Single>? DistantLodData
        {
            get => this._DistantLodData;
            set => this._DistantLodData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<Single>? IAPlacedTrapGetter.DistantLodData => _DistantLodData;
        #endregion

        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IAPlacedTrapGetter.Scale => this.Scale;
        #endregion
        #region Placement
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Placement? _Placement;
        public Placement? Placement
        {
            get => _Placement;
            set => _Placement = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlacementGetter? IAPlacedTrapGetter.Placement => this.Placement;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            APlacedTrapMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.EncounterZone = initialValue;
                this.Owner = initialValue;
                this.FactionRank = initialValue;
                this.HeadTrackingWeight = initialValue;
                this.FavorCost = initialValue;
                this.Reflections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>());
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(initialValue, new ActivateParents.Mask<TItem>(initialValue));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.Emittance = initialValue;
                this.MultiBoundReference = initialValue;
                this.IgnoredBySandbox = initialValue;
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.LocationReference = initialValue;
                this.DistantLodData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Scale = initialValue;
                this.Placement = new MaskItem<TItem, Placement.Mask<TItem>?>(initialValue, new Placement.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem EncounterZone,
                TItem Owner,
                TItem FactionRank,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem Reflections,
                TItem LinkedReferences,
                TItem ActivateParents,
                TItem EnableParent,
                TItem Emittance,
                TItem MultiBoundReference,
                TItem IgnoredBySandbox,
                TItem LocationRefTypes,
                TItem LocationReference,
                TItem DistantLodData,
                TItem Scale,
                TItem Placement)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.EncounterZone = EncounterZone;
                this.Owner = Owner;
                this.FactionRank = FactionRank;
                this.HeadTrackingWeight = HeadTrackingWeight;
                this.FavorCost = FavorCost;
                this.Reflections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>(Reflections, Enumerable.Empty<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>());
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(LinkedReferences, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(ActivateParents, new ActivateParents.Mask<TItem>(ActivateParents));
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.Emittance = Emittance;
                this.MultiBoundReference = MultiBoundReference;
                this.IgnoredBySandbox = IgnoredBySandbox;
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LocationRefTypes, Enumerable.Empty<(int Index, TItem Value)>());
                this.LocationReference = LocationReference;
                this.DistantLodData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(DistantLodData, Enumerable.Empty<(int Index, TItem Value)>());
                this.Scale = Scale;
                this.Placement = new MaskItem<TItem, Placement.Mask<TItem>?>(Placement, new Placement.Mask<TItem>(Placement));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem EncounterZone;
            public TItem Owner;
            public TItem FactionRank;
            public TItem HeadTrackingWeight;
            public TItem FavorCost;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>? Reflections;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>? LinkedReferences;
            public MaskItem<TItem, ActivateParents.Mask<TItem>?>? ActivateParents { get; set; }
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public TItem Emittance;
            public TItem MultiBoundReference;
            public TItem IgnoredBySandbox;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LocationRefTypes;
            public TItem LocationReference;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? DistantLodData;
            public TItem Scale;
            public MaskItem<TItem, Placement.Mask<TItem>?>? Placement { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.EncounterZone, rhs.EncounterZone)) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.HeadTrackingWeight, rhs.HeadTrackingWeight)) return false;
                if (!object.Equals(this.FavorCost, rhs.FavorCost)) return false;
                if (!object.Equals(this.Reflections, rhs.Reflections)) return false;
                if (!object.Equals(this.LinkedReferences, rhs.LinkedReferences)) return false;
                if (!object.Equals(this.ActivateParents, rhs.ActivateParents)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.Emittance, rhs.Emittance)) return false;
                if (!object.Equals(this.MultiBoundReference, rhs.MultiBoundReference)) return false;
                if (!object.Equals(this.IgnoredBySandbox, rhs.IgnoredBySandbox)) return false;
                if (!object.Equals(this.LocationRefTypes, rhs.LocationRefTypes)) return false;
                if (!object.Equals(this.LocationReference, rhs.LocationReference)) return false;
                if (!object.Equals(this.DistantLodData, rhs.DistantLodData)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.Placement, rhs.Placement)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.EncounterZone);
                hash.Add(this.Owner);
                hash.Add(this.FactionRank);
                hash.Add(this.HeadTrackingWeight);
                hash.Add(this.FavorCost);
                hash.Add(this.Reflections);
                hash.Add(this.LinkedReferences);
                hash.Add(this.ActivateParents);
                hash.Add(this.EnableParent);
                hash.Add(this.Emittance);
                hash.Add(this.MultiBoundReference);
                hash.Add(this.IgnoredBySandbox);
                hash.Add(this.LocationRefTypes);
                hash.Add(this.LocationReference);
                hash.Add(this.DistantLodData);
                hash.Add(this.Scale);
                hash.Add(this.Placement);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.EncounterZone)) return false;
                if (!eval(this.Owner)) return false;
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.HeadTrackingWeight)) return false;
                if (!eval(this.FavorCost)) return false;
                if (this.Reflections != null)
                {
                    if (!eval(this.Reflections.Overall)) return false;
                    if (this.Reflections.Specific != null)
                    {
                        foreach (var item in this.Reflections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LinkedReferences != null)
                {
                    if (!eval(this.LinkedReferences.Overall)) return false;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (ActivateParents != null)
                {
                    if (!eval(this.ActivateParents.Overall)) return false;
                    if (this.ActivateParents.Specific != null && !this.ActivateParents.Specific.All(eval)) return false;
                }
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (!eval(this.Emittance)) return false;
                if (!eval(this.MultiBoundReference)) return false;
                if (!eval(this.IgnoredBySandbox)) return false;
                if (this.LocationRefTypes != null)
                {
                    if (!eval(this.LocationRefTypes.Overall)) return false;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.LocationReference)) return false;
                if (this.DistantLodData != null)
                {
                    if (!eval(this.DistantLodData.Overall)) return false;
                    if (this.DistantLodData.Specific != null)
                    {
                        foreach (var item in this.DistantLodData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Scale)) return false;
                if (Placement != null)
                {
                    if (!eval(this.Placement.Overall)) return false;
                    if (this.Placement.Specific != null && !this.Placement.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.EncounterZone)) return true;
                if (eval(this.Owner)) return true;
                if (eval(this.FactionRank)) return true;
                if (eval(this.HeadTrackingWeight)) return true;
                if (eval(this.FavorCost)) return true;
                if (this.Reflections != null)
                {
                    if (eval(this.Reflections.Overall)) return true;
                    if (this.Reflections.Specific != null)
                    {
                        foreach (var item in this.Reflections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LinkedReferences != null)
                {
                    if (eval(this.LinkedReferences.Overall)) return true;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (ActivateParents != null)
                {
                    if (eval(this.ActivateParents.Overall)) return true;
                    if (this.ActivateParents.Specific != null && this.ActivateParents.Specific.Any(eval)) return true;
                }
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (eval(this.Emittance)) return true;
                if (eval(this.MultiBoundReference)) return true;
                if (eval(this.IgnoredBySandbox)) return true;
                if (this.LocationRefTypes != null)
                {
                    if (eval(this.LocationRefTypes.Overall)) return true;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.LocationReference)) return true;
                if (this.DistantLodData != null)
                {
                    if (eval(this.DistantLodData.Overall)) return true;
                    if (this.DistantLodData.Specific != null)
                    {
                        foreach (var item in this.DistantLodData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Scale)) return true;
                if (Placement != null)
                {
                    if (eval(this.Placement.Overall)) return true;
                    if (this.Placement.Specific != null && this.Placement.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new APlacedTrap.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.EncounterZone = eval(this.EncounterZone);
                obj.Owner = eval(this.Owner);
                obj.FactionRank = eval(this.FactionRank);
                obj.HeadTrackingWeight = eval(this.HeadTrackingWeight);
                obj.FavorCost = eval(this.FavorCost);
                if (Reflections != null)
                {
                    obj.Reflections = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WaterReflection.Mask<R>?>>?>(eval(this.Reflections.Overall), Enumerable.Empty<MaskItemIndexed<R, WaterReflection.Mask<R>?>>());
                    if (Reflections.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WaterReflection.Mask<R>?>>();
                        obj.Reflections.Specific = l;
                        foreach (var item in Reflections.Specific)
                        {
                            MaskItemIndexed<R, WaterReflection.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, WaterReflection.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LinkedReferences != null)
                {
                    obj.LinkedReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>?>(eval(this.LinkedReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>());
                    if (LinkedReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>();
                        obj.LinkedReferences.Specific = l;
                        foreach (var item in LinkedReferences.Specific)
                        {
                            MaskItemIndexed<R, LinkedReferences.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LinkedReferences.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ActivateParents = this.ActivateParents == null ? null : new MaskItem<R, ActivateParents.Mask<R>?>(eval(this.ActivateParents.Overall), this.ActivateParents.Specific?.Translate(eval));
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                obj.Emittance = eval(this.Emittance);
                obj.MultiBoundReference = eval(this.MultiBoundReference);
                obj.IgnoredBySandbox = eval(this.IgnoredBySandbox);
                if (LocationRefTypes != null)
                {
                    obj.LocationRefTypes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LocationRefTypes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LocationRefTypes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LocationRefTypes.Specific = l;
                        foreach (var item in LocationRefTypes.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.LocationReference = eval(this.LocationReference);
                if (DistantLodData != null)
                {
                    obj.DistantLodData = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.DistantLodData.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (DistantLodData.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.DistantLodData.Specific = l;
                        foreach (var item in DistantLodData.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Scale = eval(this.Scale);
                obj.Placement = this.Placement == null ? null : new MaskItem<R, Placement.Mask<R>?>(eval(this.Placement.Overall), this.Placement.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(APlacedTrap.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, APlacedTrap.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(APlacedTrap.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.EncounterZone ?? true)
                    {
                        sb.AppendItem(EncounterZone, "EncounterZone");
                    }
                    if (printMask?.Owner ?? true)
                    {
                        sb.AppendItem(Owner, "Owner");
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        sb.AppendItem(FactionRank, "FactionRank");
                    }
                    if (printMask?.HeadTrackingWeight ?? true)
                    {
                        sb.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                    }
                    if (printMask?.FavorCost ?? true)
                    {
                        sb.AppendItem(FavorCost, "FavorCost");
                    }
                    if ((printMask?.Reflections?.Overall ?? true)
                        && Reflections is {} ReflectionsItem)
                    {
                        sb.AppendLine("Reflections =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ReflectionsItem.Overall);
                            if (ReflectionsItem.Specific != null)
                            {
                                foreach (var subItem in ReflectionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.LinkedReferences?.Overall ?? true)
                        && LinkedReferences is {} LinkedReferencesItem)
                    {
                        sb.AppendLine("LinkedReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LinkedReferencesItem.Overall);
                            if (LinkedReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LinkedReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ActivateParents?.Overall ?? true)
                    {
                        ActivateParents?.Print(sb);
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.Print(sb);
                    }
                    if (printMask?.Emittance ?? true)
                    {
                        sb.AppendItem(Emittance, "Emittance");
                    }
                    if (printMask?.MultiBoundReference ?? true)
                    {
                        sb.AppendItem(MultiBoundReference, "MultiBoundReference");
                    }
                    if (printMask?.IgnoredBySandbox ?? true)
                    {
                        sb.AppendItem(IgnoredBySandbox, "IgnoredBySandbox");
                    }
                    if ((printMask?.LocationRefTypes?.Overall ?? true)
                        && LocationRefTypes is {} LocationRefTypesItem)
                    {
                        sb.AppendLine("LocationRefTypes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocationRefTypesItem.Overall);
                            if (LocationRefTypesItem.Specific != null)
                            {
                                foreach (var subItem in LocationRefTypesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.LocationReference ?? true)
                    {
                        sb.AppendItem(LocationReference, "LocationReference");
                    }
                    if ((printMask?.DistantLodData?.Overall ?? true)
                        && DistantLodData is {} DistantLodDataItem)
                    {
                        sb.AppendLine("DistantLodData =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(DistantLodDataItem.Overall);
                            if (DistantLodDataItem.Specific != null)
                            {
                                foreach (var subItem in DistantLodDataItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Scale ?? true)
                    {
                        sb.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.Placement?.Overall ?? true)
                    {
                        Placement?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? EncounterZone;
            public Exception? Owner;
            public Exception? FactionRank;
            public Exception? HeadTrackingWeight;
            public Exception? FavorCost;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>? Reflections;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>? LinkedReferences;
            public MaskItem<Exception?, ActivateParents.ErrorMask?>? ActivateParents;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public Exception? Emittance;
            public Exception? MultiBoundReference;
            public Exception? IgnoredBySandbox;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LocationRefTypes;
            public Exception? LocationReference;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? DistantLodData;
            public Exception? Scale;
            public MaskItem<Exception?, Placement.ErrorMask?>? Placement;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case APlacedTrap_FieldIndex.EncounterZone:
                        return EncounterZone;
                    case APlacedTrap_FieldIndex.Owner:
                        return Owner;
                    case APlacedTrap_FieldIndex.FactionRank:
                        return FactionRank;
                    case APlacedTrap_FieldIndex.HeadTrackingWeight:
                        return HeadTrackingWeight;
                    case APlacedTrap_FieldIndex.FavorCost:
                        return FavorCost;
                    case APlacedTrap_FieldIndex.Reflections:
                        return Reflections;
                    case APlacedTrap_FieldIndex.LinkedReferences:
                        return LinkedReferences;
                    case APlacedTrap_FieldIndex.ActivateParents:
                        return ActivateParents;
                    case APlacedTrap_FieldIndex.EnableParent:
                        return EnableParent;
                    case APlacedTrap_FieldIndex.Emittance:
                        return Emittance;
                    case APlacedTrap_FieldIndex.MultiBoundReference:
                        return MultiBoundReference;
                    case APlacedTrap_FieldIndex.IgnoredBySandbox:
                        return IgnoredBySandbox;
                    case APlacedTrap_FieldIndex.LocationRefTypes:
                        return LocationRefTypes;
                    case APlacedTrap_FieldIndex.LocationReference:
                        return LocationReference;
                    case APlacedTrap_FieldIndex.DistantLodData:
                        return DistantLodData;
                    case APlacedTrap_FieldIndex.Scale:
                        return Scale;
                    case APlacedTrap_FieldIndex.Placement:
                        return Placement;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.EncounterZone:
                        this.EncounterZone = ex;
                        break;
                    case APlacedTrap_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case APlacedTrap_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case APlacedTrap_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = ex;
                        break;
                    case APlacedTrap_FieldIndex.FavorCost:
                        this.FavorCost = ex;
                        break;
                    case APlacedTrap_FieldIndex.Reflections:
                        this.Reflections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.LinkedReferences:
                        this.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.ActivateParents:
                        this.ActivateParents = new MaskItem<Exception?, ActivateParents.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.Emittance:
                        this.Emittance = ex;
                        break;
                    case APlacedTrap_FieldIndex.MultiBoundReference:
                        this.MultiBoundReference = ex;
                        break;
                    case APlacedTrap_FieldIndex.IgnoredBySandbox:
                        this.IgnoredBySandbox = ex;
                        break;
                    case APlacedTrap_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.LocationReference:
                        this.LocationReference = ex;
                        break;
                    case APlacedTrap_FieldIndex.DistantLodData:
                        this.DistantLodData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case APlacedTrap_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case APlacedTrap_FieldIndex.Placement:
                        this.Placement = new MaskItem<Exception?, Placement.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                APlacedTrap_FieldIndex enu = (APlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.EncounterZone:
                        this.EncounterZone = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Owner:
                        this.Owner = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.FactionRank:
                        this.FactionRank = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.FavorCost:
                        this.FavorCost = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Reflections:
                        this.Reflections = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.LinkedReferences:
                        this.LinkedReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.ActivateParents:
                        this.ActivateParents = (MaskItem<Exception?, ActivateParents.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Emittance:
                        this.Emittance = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.MultiBoundReference:
                        this.MultiBoundReference = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.IgnoredBySandbox:
                        this.IgnoredBySandbox = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.LocationReference:
                        this.LocationReference = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.DistantLodData:
                        this.DistantLodData = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case APlacedTrap_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case APlacedTrap_FieldIndex.Placement:
                        this.Placement = (MaskItem<Exception?, Placement.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (EncounterZone != null) return true;
                if (Owner != null) return true;
                if (FactionRank != null) return true;
                if (HeadTrackingWeight != null) return true;
                if (FavorCost != null) return true;
                if (Reflections != null) return true;
                if (LinkedReferences != null) return true;
                if (ActivateParents != null) return true;
                if (EnableParent != null) return true;
                if (Emittance != null) return true;
                if (MultiBoundReference != null) return true;
                if (IgnoredBySandbox != null) return true;
                if (LocationRefTypes != null) return true;
                if (LocationReference != null) return true;
                if (DistantLodData != null) return true;
                if (Scale != null) return true;
                if (Placement != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                {
                    sb.AppendItem(EncounterZone, "EncounterZone");
                }
                {
                    sb.AppendItem(Owner, "Owner");
                }
                {
                    sb.AppendItem(FactionRank, "FactionRank");
                }
                {
                    sb.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                }
                {
                    sb.AppendItem(FavorCost, "FavorCost");
                }
                if (Reflections is {} ReflectionsItem)
                {
                    sb.AppendLine("Reflections =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ReflectionsItem.Overall);
                        if (ReflectionsItem.Specific != null)
                        {
                            foreach (var subItem in ReflectionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (LinkedReferences is {} LinkedReferencesItem)
                {
                    sb.AppendLine("LinkedReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LinkedReferencesItem.Overall);
                        if (LinkedReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LinkedReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                ActivateParents?.Print(sb);
                EnableParent?.Print(sb);
                {
                    sb.AppendItem(Emittance, "Emittance");
                }
                {
                    sb.AppendItem(MultiBoundReference, "MultiBoundReference");
                }
                {
                    sb.AppendItem(IgnoredBySandbox, "IgnoredBySandbox");
                }
                if (LocationRefTypes is {} LocationRefTypesItem)
                {
                    sb.AppendLine("LocationRefTypes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocationRefTypesItem.Overall);
                        if (LocationRefTypesItem.Specific != null)
                        {
                            foreach (var subItem in LocationRefTypesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(LocationReference, "LocationReference");
                }
                if (DistantLodData is {} DistantLodDataItem)
                {
                    sb.AppendLine("DistantLodData =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(DistantLodDataItem.Overall);
                        if (DistantLodDataItem.Specific != null)
                        {
                            foreach (var subItem in DistantLodDataItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Scale, "Scale");
                }
                Placement?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.EncounterZone = this.EncounterZone.Combine(rhs.EncounterZone);
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.HeadTrackingWeight = this.HeadTrackingWeight.Combine(rhs.HeadTrackingWeight);
                ret.FavorCost = this.FavorCost.Combine(rhs.FavorCost);
                ret.Reflections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Reflections?.Overall, rhs.Reflections?.Overall), Noggog.ExceptionExt.Combine(this.Reflections?.Specific, rhs.Reflections?.Specific));
                ret.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LinkedReferences?.Overall, rhs.LinkedReferences?.Overall), Noggog.ExceptionExt.Combine(this.LinkedReferences?.Specific, rhs.LinkedReferences?.Specific));
                ret.ActivateParents = this.ActivateParents.Combine(rhs.ActivateParents, (l, r) => l.Combine(r));
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.Emittance = this.Emittance.Combine(rhs.Emittance);
                ret.MultiBoundReference = this.MultiBoundReference.Combine(rhs.MultiBoundReference);
                ret.IgnoredBySandbox = this.IgnoredBySandbox.Combine(rhs.IgnoredBySandbox);
                ret.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.LocationRefTypes?.Overall, rhs.LocationRefTypes?.Overall), Noggog.ExceptionExt.Combine(this.LocationRefTypes?.Specific, rhs.LocationRefTypes?.Specific));
                ret.LocationReference = this.LocationReference.Combine(rhs.LocationReference);
                ret.DistantLodData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.DistantLodData?.Overall, rhs.DistantLodData?.Overall), Noggog.ExceptionExt.Combine(this.DistantLodData?.Specific, rhs.DistantLodData?.Specific));
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.Placement = this.Placement.Combine(rhs.Placement, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public bool EncounterZone;
            public bool Owner;
            public bool FactionRank;
            public bool HeadTrackingWeight;
            public bool FavorCost;
            public WaterReflection.TranslationMask? Reflections;
            public LinkedReferences.TranslationMask? LinkedReferences;
            public ActivateParents.TranslationMask? ActivateParents;
            public EnableParent.TranslationMask? EnableParent;
            public bool Emittance;
            public bool MultiBoundReference;
            public bool IgnoredBySandbox;
            public bool LocationRefTypes;
            public bool LocationReference;
            public bool DistantLodData;
            public bool Scale;
            public Placement.TranslationMask? Placement;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.EncounterZone = defaultOn;
                this.Owner = defaultOn;
                this.FactionRank = defaultOn;
                this.HeadTrackingWeight = defaultOn;
                this.FavorCost = defaultOn;
                this.Emittance = defaultOn;
                this.MultiBoundReference = defaultOn;
                this.IgnoredBySandbox = defaultOn;
                this.LocationRefTypes = defaultOn;
                this.LocationReference = defaultOn;
                this.DistantLodData = defaultOn;
                this.Scale = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((EncounterZone, null));
                ret.Add((Owner, null));
                ret.Add((FactionRank, null));
                ret.Add((HeadTrackingWeight, null));
                ret.Add((FavorCost, null));
                ret.Add((Reflections == null ? DefaultOn : !Reflections.GetCrystal().CopyNothing, Reflections?.GetCrystal()));
                ret.Add((LinkedReferences == null ? DefaultOn : !LinkedReferences.GetCrystal().CopyNothing, LinkedReferences?.GetCrystal()));
                ret.Add((ActivateParents != null ? ActivateParents.OnOverall : DefaultOn, ActivateParents?.GetCrystal()));
                ret.Add((EnableParent != null ? EnableParent.OnOverall : DefaultOn, EnableParent?.GetCrystal()));
                ret.Add((Emittance, null));
                ret.Add((MultiBoundReference, null));
                ret.Add((IgnoredBySandbox, null));
                ret.Add((LocationRefTypes, null));
                ret.Add((LocationReference, null));
                ret.Add((DistantLodData, null));
                ret.Add((Scale, null));
                ret.Add((Placement != null ? Placement.OnOverall : DefaultOn, Placement?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => APlacedTrapCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => APlacedTrapSetterCommon.Instance.RemapLinks(this, mapping);
        public APlacedTrap(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private APlacedTrap(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal APlacedTrap(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public APlacedTrap(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public APlacedTrap(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<APlacedTrap>.ToString(this);
        }

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => APlacedTrapCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => APlacedTrapSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => APlacedTrapSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => APlacedTrapSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAPlacedTrapGetter rhs) return false;
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAPlacedTrapGetter? obj)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => APlacedTrapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((APlacedTrapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new APlacedTrap GetNew()
        {
            throw new ArgumentException("New called on an abstract class.");
        }

    }
    #endregion

    #region Interface
    /// <summary>
    /// Implemented by: [PlacedArrow, PlacedBeam, PlacedFlame, PlacedCone, PlacedBarrier, PlacedTrap, PlacedHazard, PlacedMissile]
    /// </summary>
    public partial interface IAPlacedTrap :
        IAPlacedTrapGetter,
        IAssetLinkContainer,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IKeywordLinkedReference,
        ILinkedReference,
        ILoquiObjectSetter<IAPlacedTrapInternal>,
        IPlaced,
        IPlacedThing,
        IScripted,
        ISkyrimMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new IFormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; }
        new IFormLinkNullable<IOwnerGetter> Owner { get; set; }
        new Int32? FactionRank { get; set; }
        new Single? HeadTrackingWeight { get; set; }
        new Single? FavorCost { get; set; }
        new ExtendedList<WaterReflection> Reflections { get; }
        new ExtendedList<LinkedReferences> LinkedReferences { get; }
        new ActivateParents? ActivateParents { get; set; }
        new EnableParent? EnableParent { get; set; }
        new IFormLinkNullable<IEmittanceGetter> Emittance { get; set; }
        new IFormLinkNullable<IPlacedObjectGetter> MultiBoundReference { get; set; }
        new MemorySlice<Byte>? IgnoredBySandbox { get; set; }
        new ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes { get; set; }
        new IFormLinkNullable<ILocationRecordGetter> LocationReference { get; set; }
        new ExtendedList<Single>? DistantLodData { get; set; }
        new Single? Scale { get; set; }
        new Placement? Placement { get; set; }
        #region Mutagen
        new APlacedTrap.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IAPlacedTrapInternal :
        ISkyrimMajorRecordInternal,
        IAPlacedTrap,
        IAPlacedTrapGetter
    {
    }

    /// <summary>
    /// Implemented by: [PlacedArrow, PlacedBeam, PlacedFlame, PlacedCone, PlacedBarrier, PlacedTrap, PlacedHazard, PlacedMissile]
    /// </summary>
    public partial interface IAPlacedTrapGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordLinkedReferenceGetter,
        ILinkedReferenceGetter,
        ILoquiObject<IAPlacedTrapGetter>,
        IPlacedGetter,
        IPlacedThingGetter,
        IScriptedGetter
    {
        static new ILoquiRegistration StaticRegistration => APlacedTrap_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        IFormLinkNullableGetter<IEncounterZoneGetter> EncounterZone { get; }
        IFormLinkNullableGetter<IOwnerGetter> Owner { get; }
        Int32? FactionRank { get; }
        Single? HeadTrackingWeight { get; }
        Single? FavorCost { get; }
        IReadOnlyList<IWaterReflectionGetter> Reflections { get; }
        IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; }
        IActivateParentsGetter? ActivateParents { get; }
        IEnableParentGetter? EnableParent { get; }
        IFormLinkNullableGetter<IEmittanceGetter> Emittance { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> MultiBoundReference { get; }
        ReadOnlyMemorySlice<Byte>? IgnoredBySandbox { get; }
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes { get; }
        IFormLinkNullableGetter<ILocationRecordGetter> LocationReference { get; }
        IReadOnlyList<Single>? DistantLodData { get; }
        Single? Scale { get; }
        IPlacementGetter? Placement { get; }

        #region Mutagen
        APlacedTrap.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class APlacedTrapMixIn
    {
        public static void Clear(this IAPlacedTrapInternal item)
        {
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static APlacedTrap.Mask<bool> GetEqualsMask(
            this IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAPlacedTrapGetter item,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAPlacedTrapGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs,
            APlacedTrap.TranslationMask? equalsMask = null)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAPlacedTrapInternal lhs,
            IAPlacedTrapGetter rhs,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = APlacedTrap.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAPlacedTrapInternal lhs,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static APlacedTrap DeepCopy(
            this IAPlacedTrapGetter item,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            return ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static APlacedTrap DeepCopy(
            this IAPlacedTrapGetter item,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            return ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static APlacedTrap DeepCopy(
            this IAPlacedTrapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static APlacedTrap Duplicate(
            this IAPlacedTrapGetter item,
            FormKey formKey,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static APlacedTrap Duplicate(
            this IAPlacedTrapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAPlacedTrapInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((APlacedTrapSetterCommon)((IAPlacedTrapGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum APlacedTrap_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        EncounterZone = 8,
        Owner = 9,
        FactionRank = 10,
        HeadTrackingWeight = 11,
        FavorCost = 12,
        Reflections = 13,
        LinkedReferences = 14,
        ActivateParents = 15,
        EnableParent = 16,
        Emittance = 17,
        MultiBoundReference = 18,
        IgnoredBySandbox = 19,
        LocationRefTypes = 20,
        LocationReference = 21,
        DistantLodData = 22,
        Scale = 23,
        Placement = 24,
    }
    #endregion

    #region Registration
    internal partial class APlacedTrap_Registration : ILoquiRegistration
    {
        public static readonly APlacedTrap_Registration Instance = new APlacedTrap_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 18;

        public const ushort FieldCount = 25;

        public static readonly Type MaskType = typeof(APlacedTrap.Mask<>);

        public static readonly Type ErrorMaskType = typeof(APlacedTrap.ErrorMask);

        public static readonly Type ClassType = typeof(APlacedTrap);

        public static readonly Type GetterType = typeof(IAPlacedTrapGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAPlacedTrap);

        public static readonly Type? InternalSetterType = typeof(IAPlacedTrapInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.APlacedTrap";

        public const string Name = "APlacedTrap";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(
                RecordTypes.VMAD,
                RecordTypes.NAME,
                RecordTypes.XEZN,
                RecordTypes.XOWN,
                RecordTypes.XRNK,
                RecordTypes.XHTW,
                RecordTypes.XFVC,
                RecordTypes.XPWR,
                RecordTypes.XLKR,
                RecordTypes.XAPD,
                RecordTypes.XESP,
                RecordTypes.XEMI,
                RecordTypes.XMBR,
                RecordTypes.XIS2,
                RecordTypes.XLRT,
                RecordTypes.XLRL,
                RecordTypes.XLOD,
                RecordTypes.XSCL,
                RecordTypes.DATA,
                RecordTypes.PARW,
                RecordTypes.PBEA,
                RecordTypes.PFLA,
                RecordTypes.PCON,
                RecordTypes.PBAR,
                RecordTypes.PGRE,
                RecordTypes.PHZD,
                RecordTypes.PMIS);
            var all = RecordCollection.Factory(
                RecordTypes.VMAD,
                RecordTypes.NAME,
                RecordTypes.XEZN,
                RecordTypes.XOWN,
                RecordTypes.XRNK,
                RecordTypes.XHTW,
                RecordTypes.XFVC,
                RecordTypes.XPWR,
                RecordTypes.XLKR,
                RecordTypes.XAPD,
                RecordTypes.XESP,
                RecordTypes.XEMI,
                RecordTypes.XMBR,
                RecordTypes.XIS2,
                RecordTypes.XLRT,
                RecordTypes.XLRL,
                RecordTypes.XLOD,
                RecordTypes.XSCL,
                RecordTypes.DATA,
                RecordTypes.PARW,
                RecordTypes.PBEA,
                RecordTypes.PFLA,
                RecordTypes.PCON,
                RecordTypes.PBAR,
                RecordTypes.PGRE,
                RecordTypes.PHZD,
                RecordTypes.PMIS,
                RecordTypes.XXXX);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(APlacedTrapBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class APlacedTrapSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly APlacedTrapSetterCommon Instance = new APlacedTrapSetterCommon();

        partial void ClearPartial();
        
        public virtual void Clear(IAPlacedTrapInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.EncounterZone.Clear();
            item.Owner.Clear();
            item.FactionRank = default;
            item.HeadTrackingWeight = default;
            item.FavorCost = default;
            item.Reflections.Clear();
            item.LinkedReferences.Clear();
            item.ActivateParents = null;
            item.EnableParent = null;
            item.Emittance.Clear();
            item.MultiBoundReference.Clear();
            item.IgnoredBySandbox = default;
            item.LocationRefTypes = null;
            item.LocationReference.Clear();
            item.DistantLodData = null;
            item.Scale = default;
            item.Placement = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IAPlacedTrapInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAPlacedTrapInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAPlacedTrap obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.EncounterZone.Relink(mapping);
            obj.Owner.Relink(mapping);
            obj.Reflections.RemapLinks(mapping);
            obj.LinkedReferences.RemapLinks(mapping);
            obj.ActivateParents?.RemapLinks(mapping);
            obj.EnableParent?.RemapLinks(mapping);
            obj.Emittance.Relink(mapping);
            obj.MultiBoundReference.Relink(mapping);
            obj.LocationRefTypes?.RemapLinks(mapping);
            obj.LocationReference.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IAPlacedTrap obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IAPlacedTrap obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.VirtualMachineAdapter?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IAPlacedTrapInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: APlacedTrapBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: APlacedTrapBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (APlacedTrap)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (APlacedTrap)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class APlacedTrapCommon : SkyrimMajorRecordCommon
    {
        public new static readonly APlacedTrapCommon Instance = new APlacedTrapCommon();

        public APlacedTrap.Mask<bool> GetEqualsMask(
            IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new APlacedTrap.Mask<bool>(false);
            ((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAPlacedTrapGetter item,
            IAPlacedTrapGetter rhs,
            APlacedTrap.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EncounterZone = item.EncounterZone.Equals(rhs.EncounterZone);
            ret.Owner = item.Owner.Equals(rhs.Owner);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.HeadTrackingWeight = item.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight);
            ret.FavorCost = item.FavorCost.EqualsWithin(rhs.FavorCost);
            ret.Reflections = item.Reflections.CollectionEqualsHelper(
                rhs.Reflections,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LinkedReferences = item.LinkedReferences.CollectionEqualsHelper(
                rhs.LinkedReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ActivateParents = EqualsMaskHelper.EqualsHelper(
                item.ActivateParents,
                rhs.ActivateParents,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Emittance = item.Emittance.Equals(rhs.Emittance);
            ret.MultiBoundReference = item.MultiBoundReference.Equals(rhs.MultiBoundReference);
            ret.IgnoredBySandbox = MemorySliceExt.SequenceEqual(item.IgnoredBySandbox, rhs.IgnoredBySandbox);
            ret.LocationRefTypes = item.LocationRefTypes.CollectionEqualsHelper(
                rhs.LocationRefTypes,
                (l, r) => object.Equals(l, r),
                include);
            ret.LocationReference = item.LocationReference.Equals(rhs.LocationReference);
            ret.DistantLodData = item.DistantLodData.CollectionEqualsHelper(
                rhs.DistantLodData,
                (l, r) => l.EqualsWithin(r),
                include);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.Placement = EqualsMaskHelper.EqualsHelper(
                item.Placement,
                rhs.Placement,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAPlacedTrapGetter item,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAPlacedTrapGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"APlacedTrap =>");
            }
            else
            {
                sb.AppendLine($"{name} (APlacedTrap) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAPlacedTrapGetter item,
            StructuredStringBuilder sb,
            APlacedTrap.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.EncounterZone ?? true)
            {
                sb.AppendItem(item.EncounterZone.FormKeyNullable, "EncounterZone");
            }
            if (printMask?.Owner ?? true)
            {
                sb.AppendItem(item.Owner.FormKeyNullable, "Owner");
            }
            if ((printMask?.FactionRank ?? true)
                && item.FactionRank is {} FactionRankItem)
            {
                sb.AppendItem(FactionRankItem, "FactionRank");
            }
            if ((printMask?.HeadTrackingWeight ?? true)
                && item.HeadTrackingWeight is {} HeadTrackingWeightItem)
            {
                sb.AppendItem(HeadTrackingWeightItem, "HeadTrackingWeight");
            }
            if ((printMask?.FavorCost ?? true)
                && item.FavorCost is {} FavorCostItem)
            {
                sb.AppendItem(FavorCostItem, "FavorCost");
            }
            if (printMask?.Reflections?.Overall ?? true)
            {
                sb.AppendLine("Reflections =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Reflections)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.LinkedReferences?.Overall ?? true)
            {
                sb.AppendLine("LinkedReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.LinkedReferences)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.ActivateParents?.Overall ?? true)
                && item.ActivateParents is {} ActivateParentsItem)
            {
                ActivateParentsItem?.Print(sb, "ActivateParents");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent is {} EnableParentItem)
            {
                EnableParentItem?.Print(sb, "EnableParent");
            }
            if (printMask?.Emittance ?? true)
            {
                sb.AppendItem(item.Emittance.FormKeyNullable, "Emittance");
            }
            if (printMask?.MultiBoundReference ?? true)
            {
                sb.AppendItem(item.MultiBoundReference.FormKeyNullable, "MultiBoundReference");
            }
            if ((printMask?.IgnoredBySandbox ?? true)
                && item.IgnoredBySandbox is {} IgnoredBySandboxItem)
            {
                sb.AppendLine($"IgnoredBySandbox => {SpanExt.ToHexString(IgnoredBySandboxItem)}");
            }
            if ((printMask?.LocationRefTypes?.Overall ?? true)
                && item.LocationRefTypes is {} LocationRefTypesItem)
            {
                sb.AppendLine("LocationRefTypes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LocationRefTypesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.LocationReference ?? true)
            {
                sb.AppendItem(item.LocationReference.FormKeyNullable, "LocationReference");
            }
            if ((printMask?.DistantLodData?.Overall ?? true)
                && item.DistantLodData is {} DistantLodDataItem)
            {
                sb.AppendLine("DistantLodData =>");
                using (sb.Brace())
                {
                    foreach (var subItem in DistantLodDataItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if ((printMask?.Scale ?? true)
                && item.Scale is {} ScaleItem)
            {
                sb.AppendItem(ScaleItem, "Scale");
            }
            if ((printMask?.Placement?.Overall ?? true)
                && item.Placement is {} PlacementItem)
            {
                PlacementItem?.Print(sb, "Placement");
            }
        }
        
        public static APlacedTrap_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (APlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (APlacedTrap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new APlacedTrap_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (APlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (APlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (APlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (APlacedTrap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAPlacedTrapGetter? lhs,
            IAPlacedTrapGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.EncounterZone) ?? true))
            {
                if (!lhs.EncounterZone.Equals(rhs.EncounterZone)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Owner) ?? true))
            {
                if (!lhs.Owner.Equals(rhs.Owner)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.FactionRank) ?? true))
            {
                if (lhs.FactionRank != rhs.FactionRank) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.HeadTrackingWeight) ?? true))
            {
                if (!lhs.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.FavorCost) ?? true))
            {
                if (!lhs.FavorCost.EqualsWithin(rhs.FavorCost)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Reflections) ?? true))
            {
                if (!lhs.Reflections.SequenceEqual(rhs.Reflections, (l, r) => ((WaterReflectionCommon)((IWaterReflectionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.Reflections)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LinkedReferences) ?? true))
            {
                if (!lhs.LinkedReferences.SequenceEqual(rhs.LinkedReferences, (l, r) => ((LinkedReferencesCommon)((ILinkedReferencesGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.LinkedReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.ActivateParents) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ActivateParents, rhs.ActivateParents, out var lhsActivateParents, out var rhsActivateParents, out var isActivateParentsEqual))
                {
                    if (!((ActivateParentsCommon)((IActivateParentsGetter)lhsActivateParents).CommonInstance()!).Equals(lhsActivateParents, rhsActivateParents, equalsMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.ActivateParents))) return false;
                }
                else if (!isActivateParentsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.EnableParent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EnableParent, rhs.EnableParent, out var lhsEnableParent, out var rhsEnableParent, out var isEnableParentEqual))
                {
                    if (!((EnableParentCommon)((IEnableParentGetter)lhsEnableParent).CommonInstance()!).Equals(lhsEnableParent, rhsEnableParent, equalsMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.EnableParent))) return false;
                }
                else if (!isEnableParentEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Emittance) ?? true))
            {
                if (!lhs.Emittance.Equals(rhs.Emittance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.MultiBoundReference) ?? true))
            {
                if (!lhs.MultiBoundReference.Equals(rhs.MultiBoundReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.IgnoredBySandbox) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.IgnoredBySandbox, rhs.IgnoredBySandbox)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LocationRefTypes) ?? true))
            {
                if (!lhs.LocationRefTypes.SequenceEqualNullable(rhs.LocationRefTypes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LocationReference) ?? true))
            {
                if (!lhs.LocationReference.Equals(rhs.LocationReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.DistantLodData) ?? true))
            {
                if (!lhs.DistantLodData.SequenceEqualNullable(rhs.DistantLodData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Scale) ?? true))
            {
                if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Placement) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Placement, rhs.Placement, out var lhsPlacement, out var rhsPlacement, out var isPlacementEqual))
                {
                    if (!((PlacementCommon)((IPlacementGetter)lhsPlacement).CommonInstance()!).Equals(lhsPlacement, rhsPlacement, equalsMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.Placement))) return false;
                }
                else if (!isPlacementEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAPlacedTrapGetter?)lhs,
                rhs: rhs as IAPlacedTrapGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAPlacedTrapGetter?)lhs,
                rhs: rhs as IAPlacedTrapGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAPlacedTrapGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.EncounterZone);
            hash.Add(item.Owner);
            if (item.FactionRank is {} FactionRankitem)
            {
                hash.Add(FactionRankitem);
            }
            if (item.HeadTrackingWeight is {} HeadTrackingWeightitem)
            {
                hash.Add(HeadTrackingWeightitem);
            }
            if (item.FavorCost is {} FavorCostitem)
            {
                hash.Add(FavorCostitem);
            }
            hash.Add(item.Reflections);
            hash.Add(item.LinkedReferences);
            if (item.ActivateParents is {} ActivateParentsitem)
            {
                hash.Add(ActivateParentsitem);
            }
            if (item.EnableParent is {} EnableParentitem)
            {
                hash.Add(EnableParentitem);
            }
            hash.Add(item.Emittance);
            hash.Add(item.MultiBoundReference);
            if (item.IgnoredBySandbox is {} IgnoredBySandboxItem)
            {
                hash.Add(IgnoredBySandboxItem);
            }
            hash.Add(item.LocationRefTypes);
            hash.Add(item.LocationReference);
            hash.Add(item.DistantLodData);
            if (item.Scale is {} Scaleitem)
            {
                hash.Add(Scaleitem);
            }
            if (item.Placement is {} Placementitem)
            {
                hash.Add(Placementitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IAPlacedTrapGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAPlacedTrapGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return APlacedTrap.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAPlacedTrapGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.EncounterZone, out var EncounterZoneInfo))
            {
                yield return EncounterZoneInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Owner, out var OwnerInfo))
            {
                yield return OwnerInfo;
            }
            foreach (var item in obj.Reflections.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.LinkedReferences.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.ActivateParents is {} ActivateParentsItems)
            {
                foreach (var item in ActivateParentsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.EnableParent is {} EnableParentItems)
            {
                foreach (var item in EnableParentItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Emittance, out var EmittanceInfo))
            {
                yield return EmittanceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MultiBoundReference, out var MultiBoundReferenceInfo))
            {
                yield return MultiBoundReferenceInfo;
            }
            if (obj.LocationRefTypes is {} LocationRefTypesItem)
            {
                foreach (var item in LocationRefTypesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.LocationReference, out var LocationReferenceInfo))
            {
                yield return LocationReferenceInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IAPlacedTrapGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public virtual APlacedTrap Duplicate(
            IAPlacedTrapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            throw new NotImplementedException();
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAPlacedTrapGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAPlacedTrapGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class APlacedTrapSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly APlacedTrapSetterTranslationCommon Instance = new APlacedTrapSetterTranslationCommon();

        #region DeepCopyIn
        public virtual void DeepCopyIn(
            IAPlacedTrapInternal item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public virtual void DeepCopyIn(
            IAPlacedTrap item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.EncounterZone) ?? true))
            {
                item.EncounterZone.SetTo(rhs.EncounterZone.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Owner) ?? true))
            {
                item.Owner.SetTo(rhs.Owner.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.HeadTrackingWeight) ?? true))
            {
                item.HeadTrackingWeight = rhs.HeadTrackingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.FavorCost) ?? true))
            {
                item.FavorCost = rhs.FavorCost;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Reflections) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Reflections);
                try
                {
                    item.Reflections.SetTo(
                        rhs.Reflections
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LinkedReferences) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.LinkedReferences);
                try
                {
                    item.LinkedReferences.SetTo(
                        rhs.LinkedReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.ActivateParents) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.ActivateParents);
                try
                {
                    if(rhs.ActivateParents is {} rhsActivateParents)
                    {
                        item.ActivateParents = rhsActivateParents.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.ActivateParents));
                    }
                    else
                    {
                        item.ActivateParents = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent is {} rhsEnableParent)
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Emittance) ?? true))
            {
                item.Emittance.SetTo(rhs.Emittance.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.MultiBoundReference) ?? true))
            {
                item.MultiBoundReference.SetTo(rhs.MultiBoundReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.IgnoredBySandbox) ?? true))
            {
                if(rhs.IgnoredBySandbox is {} IgnoredBySandboxrhs)
                {
                    item.IgnoredBySandbox = IgnoredBySandboxrhs.ToArray();
                }
                else
                {
                    item.IgnoredBySandbox = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LocationRefTypes) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.LocationRefTypes);
                try
                {
                    if ((rhs.LocationRefTypes != null))
                    {
                        item.LocationRefTypes = 
                            rhs.LocationRefTypes
                                .Select(b => (IFormLinkGetter<ILocationReferenceTypeGetter>)new FormLink<ILocationReferenceTypeGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    }
                    else
                    {
                        item.LocationRefTypes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.LocationReference) ?? true))
            {
                item.LocationReference.SetTo(rhs.LocationReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.DistantLodData) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.DistantLodData);
                try
                {
                    if ((rhs.DistantLodData != null))
                    {
                        item.DistantLodData = 
                            rhs.DistantLodData
                            .ToExtendedList<Single>();
                    }
                    else
                    {
                        item.DistantLodData = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)APlacedTrap_FieldIndex.Placement) ?? true))
            {
                errorMask?.PushIndex((int)APlacedTrap_FieldIndex.Placement);
                try
                {
                    if(rhs.Placement is {} rhsPlacement)
                    {
                        item.Placement = rhsPlacement.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)APlacedTrap_FieldIndex.Placement));
                    }
                    else
                    {
                        item.Placement = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAPlacedTrap item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrapInternal)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrap)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrapInternal)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAPlacedTrap)item,
                rhs: (IAPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public APlacedTrap DeepCopy(
            IAPlacedTrapGetter item,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            APlacedTrap ret = (APlacedTrap)((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public APlacedTrap DeepCopy(
            IAPlacedTrapGetter item,
            out APlacedTrap.ErrorMask errorMask,
            APlacedTrap.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            APlacedTrap ret = (APlacedTrap)((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = APlacedTrap.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public APlacedTrap DeepCopy(
            IAPlacedTrapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            APlacedTrap ret = (APlacedTrap)((APlacedTrapCommon)((IAPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ((APlacedTrapSetterTranslationCommon)((IAPlacedTrapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class APlacedTrap
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APlacedTrap_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => APlacedTrap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => APlacedTrapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return APlacedTrapSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => APlacedTrapSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class APlacedTrapBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly APlacedTrapBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IAPlacedTrapGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            APlacedTrapBinaryWriteTranslation.WriteBinaryTrapForm(
                writer: writer,
                item: item);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EncounterZone,
                header: translationParams.ConvertToCustom(RecordTypes.XEZN));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Owner,
                header: translationParams.ConvertToCustom(RecordTypes.XOWN));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FactionRank,
                header: translationParams.ConvertToCustom(RecordTypes.XRNK));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.HeadTrackingWeight,
                header: translationParams.ConvertToCustom(RecordTypes.XHTW));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FavorCost,
                header: translationParams.ConvertToCustom(RecordTypes.XFVC));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IWaterReflectionGetter>.Instance.Write(
                writer: writer,
                items: item.Reflections,
                transl: (MutagenWriter subWriter, IWaterReflectionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((WaterReflectionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILinkedReferencesGetter>.Instance.Write(
                writer: writer,
                items: item.LinkedReferences,
                transl: (MutagenWriter subWriter, ILinkedReferencesGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LinkedReferencesBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.ActivateParents is {} ActivateParentsItem)
            {
                ((ActivateParentsBinaryWriteTranslation)((IBinaryItem)ActivateParentsItem).BinaryWriteTranslator).Write(
                    item: ActivateParentsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.EnableParent is {} EnableParentItem)
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Emittance,
                header: translationParams.ConvertToCustom(RecordTypes.XEMI));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MultiBoundReference,
                header: translationParams.ConvertToCustom(RecordTypes.XMBR));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.IgnoredBySandbox,
                header: translationParams.ConvertToCustom(RecordTypes.XIS2));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.LocationRefTypes,
                recordType: translationParams.ConvertToCustom(RecordTypes.XLRT),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ILocationReferenceTypeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LocationReference,
                header: translationParams.ConvertToCustom(RecordTypes.XLRL));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Single>.Instance.Write(
                writer: writer,
                items: item.DistantLodData,
                recordType: translationParams.ConvertToCustom(RecordTypes.XLOD),
                transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: translationParams.ConvertToCustom(RecordTypes.XSCL));
            if (item.Placement is {} PlacementItem)
            {
                ((PlacementBinaryWriteTranslation)((IBinaryItem)PlacementItem).BinaryWriteTranslator).Write(
                    item: PlacementItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public static partial void WriteBinaryTrapFormCustom(
            MutagenWriter writer,
            IAPlacedTrapGetter item);

        public static void WriteBinaryTrapForm(
            MutagenWriter writer,
            IAPlacedTrapGetter item)
        {
            WriteBinaryTrapFormCustom(
                writer: writer,
                item: item);
        }

        public virtual void Write(
            MutagenWriter writer,
            IAPlacedTrapGetter item,
            TypedWriteParams translationParams)
        {
            throw new NotImplementedException();
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAPlacedTrapGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class APlacedTrapBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly APlacedTrapBinaryCreateTranslation Instance = new APlacedTrapBinaryCreateTranslation();

        public override RecordType RecordType => throw new ArgumentException();
        public static ParseResult FillBinaryRecordTypes(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)APlacedTrap_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    return APlacedTrapBinaryCreateTranslation.FillBinaryTrapFormCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.XEZN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EncounterZone.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)APlacedTrap_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XOWN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Owner.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)APlacedTrap_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return (int)APlacedTrap_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XHTW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeadTrackingWeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)APlacedTrap_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XFVC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FavorCost = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)APlacedTrap_FieldIndex.FavorCost;
                }
                case RecordTypeInts.XPWR:
                {
                    item.Reflections.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<WaterReflection>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: WaterReflection_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: WaterReflection.TryCreateFromBinary));
                    return (int)APlacedTrap_FieldIndex.Reflections;
                }
                case RecordTypeInts.XLKR:
                {
                    item.LinkedReferences.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LinkedReferences>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: LinkedReferences_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: LinkedReferences.TryCreateFromBinary));
                    return (int)APlacedTrap_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XAPD:
                {
                    item.ActivateParents = Mutagen.Bethesda.Skyrim.ActivateParents.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)APlacedTrap_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XESP:
                {
                    item.EnableParent = Mutagen.Bethesda.Skyrim.EnableParent.CreateFromBinary(frame: frame);
                    return (int)APlacedTrap_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XEMI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Emittance.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)APlacedTrap_FieldIndex.Emittance;
                }
                case RecordTypeInts.XMBR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MultiBoundReference.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)APlacedTrap_FieldIndex.MultiBoundReference;
                }
                case RecordTypeInts.XIS2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IgnoredBySandbox = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)APlacedTrap_FieldIndex.IgnoredBySandbox;
                }
                case RecordTypeInts.XLRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationRefTypes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    return (int)APlacedTrap_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XLRL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationReference.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)APlacedTrap_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XLOD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DistantLodData = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Single>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse)
                        .CastExtendedList<Single>();
                    return (int)APlacedTrap_FieldIndex.DistantLodData;
                }
                case RecordTypeInts.XSCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)APlacedTrap_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    item.Placement = Mutagen.Bethesda.Skyrim.Placement.CreateFromBinary(frame: frame);
                    return (int)APlacedTrap_FieldIndex.Placement;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial ParseResult FillBinaryTrapFormCustom(
            MutagenFrame frame,
            IAPlacedTrapInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class APlacedTrapBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal abstract partial class APlacedTrapBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IAPlacedTrapGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => APlacedTrap_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => APlacedTrap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => APlacedTrapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => APlacedTrapSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => APlacedTrapCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => APlacedTrapCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => APlacedTrapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((APlacedTrapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        public APlacedTrap.MajorFlag MajorFlags => (APlacedTrap.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region TrapForm
        public partial ParseResult TrapFormCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region EncounterZone
        private int? _EncounterZoneLocation;
        public IFormLinkNullableGetter<IEncounterZoneGetter> EncounterZone => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEncounterZoneGetter>(_package, _recordData, _EncounterZoneLocation);
        #endregion
        #region Owner
        private int? _OwnerLocation;
        public IFormLinkNullableGetter<IOwnerGetter> Owner => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IOwnerGetter>(_package, _recordData, _OwnerLocation);
        #endregion
        #region FactionRank
        private int? _FactionRankLocation;
        public Int32? FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FactionRankLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region HeadTrackingWeight
        private int? _HeadTrackingWeightLocation;
        public Single? HeadTrackingWeight => _HeadTrackingWeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HeadTrackingWeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region FavorCost
        private int? _FavorCostLocation;
        public Single? FavorCost => _FavorCostLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FavorCostLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public IReadOnlyList<IWaterReflectionGetter> Reflections { get; private set; } = Array.Empty<IWaterReflectionGetter>();
        public IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; private set; } = Array.Empty<ILinkedReferencesGetter>();
        public IActivateParentsGetter? ActivateParents { get; private set; }
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(_recordData.Slice(_EnableParentLocation!.Value.Min), _package) : default;
        #endregion
        #region Emittance
        private int? _EmittanceLocation;
        public IFormLinkNullableGetter<IEmittanceGetter> Emittance => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEmittanceGetter>(_package, _recordData, _EmittanceLocation);
        #endregion
        #region MultiBoundReference
        private int? _MultiBoundReferenceLocation;
        public IFormLinkNullableGetter<IPlacedObjectGetter> MultiBoundReference => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedObjectGetter>(_package, _recordData, _MultiBoundReferenceLocation);
        #endregion
        #region IgnoredBySandbox
        private int? _IgnoredBySandboxLocation;
        public ReadOnlyMemorySlice<Byte>? IgnoredBySandbox => _IgnoredBySandboxLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _IgnoredBySandboxLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes { get; private set; }
        #region LocationReference
        private int? _LocationReferenceLocation;
        public IFormLinkNullableGetter<ILocationRecordGetter> LocationReference => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationRecordGetter>(_package, _recordData, _LocationReferenceLocation);
        #endregion
        public IReadOnlyList<Single>? DistantLodData { get; private set; }
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region Placement
        private RangeInt32? _PlacementLocation;
        public IPlacementGetter? Placement => _PlacementLocation.HasValue ? PlacementBinaryOverlay.PlacementFactory(_recordData.Slice(_PlacementLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected APlacedTrapBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }


        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)APlacedTrap_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    return TrapFormCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.XEZN:
                {
                    _EncounterZoneLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XOWN:
                {
                    _OwnerLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    _FactionRankLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XHTW:
                {
                    _HeadTrackingWeightLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XFVC:
                {
                    _FavorCostLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.FavorCost;
                }
                case RecordTypeInts.XPWR:
                {
                    this.Reflections = BinaryOverlayList.FactoryByArray<IWaterReflectionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => WaterReflectionBinaryOverlay.WaterReflectionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: WaterReflection_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)APlacedTrap_FieldIndex.Reflections;
                }
                case RecordTypeInts.XLKR:
                {
                    this.LinkedReferences = BinaryOverlayList.FactoryByArray<ILinkedReferencesGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => LinkedReferencesBinaryOverlay.LinkedReferencesFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: LinkedReferences_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)APlacedTrap_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XAPD:
                {
                    this.ActivateParents = ActivateParentsBinaryOverlay.ActivateParentsFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)APlacedTrap_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XESP:
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)APlacedTrap_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XEMI:
                {
                    _EmittanceLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.Emittance;
                }
                case RecordTypeInts.XMBR:
                {
                    _MultiBoundReferenceLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.MultiBoundReference;
                }
                case RecordTypeInts.XIS2:
                {
                    _IgnoredBySandboxLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.IgnoredBySandbox;
                }
                case RecordTypeInts.XLRT:
                {
                    this.LocationRefTypes = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ILocationReferenceTypeGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ILocationReferenceTypeGetter>(p, s));
                    return (int)APlacedTrap_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XLRL:
                {
                    _LocationReferenceLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XLOD:
                {
                    this.DistantLodData = BinaryOverlayList.FactoryByStartIndexWithTrigger<Single>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => s.Float());
                    return (int)APlacedTrap_FieldIndex.DistantLodData;
                }
                case RecordTypeInts.XSCL:
                {
                    _ScaleLocation = (stream.Position - offset);
                    return (int)APlacedTrap_FieldIndex.Scale;
                }
                case RecordTypeInts.DATA:
                {
                    _PlacementLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)APlacedTrap_FieldIndex.Placement;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            APlacedTrapMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<APlacedTrap>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAPlacedTrapGetter rhs) return false;
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAPlacedTrapGetter? obj)
        {
            return ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((APlacedTrapCommon)((IAPlacedTrapGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

