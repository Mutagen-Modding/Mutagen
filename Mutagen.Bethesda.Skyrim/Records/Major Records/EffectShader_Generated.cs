/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Assets;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class EffectShader :
        SkyrimMajorRecord,
        IEffectShaderInternal,
        IEquatable<IEffectShaderGetter>,
        ILoquiObjectSetter<EffectShader>
    {
        #region Ctor
        protected EffectShader()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region FillTexture
        public AssetLink<SkyrimTextureAssetType>? FillTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? IEffectShaderGetter.FillTexture => this.FillTexture;
        #endregion
        #region ParticleShaderTexture
        public AssetLink<SkyrimTextureAssetType>? ParticleShaderTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? IEffectShaderGetter.ParticleShaderTexture => this.ParticleShaderTexture;
        #endregion
        #region HolesTexture
        public AssetLink<SkyrimTextureAssetType>? HolesTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? IEffectShaderGetter.HolesTexture => this.HolesTexture;
        #endregion
        #region MembranePaletteTexture
        public AssetLink<SkyrimTextureAssetType>? MembranePaletteTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? IEffectShaderGetter.MembranePaletteTexture => this.MembranePaletteTexture;
        #endregion
        #region ParticlePaletteTexture
        public AssetLink<SkyrimTextureAssetType>? ParticlePaletteTexture { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? IEffectShaderGetter.ParticlePaletteTexture => this.ParticlePaletteTexture;
        #endregion
        #region Unknown
        public Int32 Unknown { get; set; } = default(Int32);
        #endregion
        #region MembraneSourceBlendMode
        public static readonly EffectShader.BlendMode MembraneSourceBlendModeDefault = BlendMode.Zero;
        public EffectShader.BlendMode MembraneSourceBlendMode { get; set; } = MembraneSourceBlendModeDefault;
        #endregion
        #region MembraneBlendOperation
        public static readonly EffectShader.BlendOperation MembraneBlendOperationDefault = BlendOperation.Add;
        public EffectShader.BlendOperation MembraneBlendOperation { get; set; } = MembraneBlendOperationDefault;
        #endregion
        #region MembraneZTest
        public static readonly EffectShader.ZTest MembraneZTestDefault = ZTest.Normal;
        public EffectShader.ZTest MembraneZTest { get; set; } = MembraneZTestDefault;
        #endregion
        #region FillColorKey1
        public Color FillColorKey1 { get; set; } = default(Color);
        #endregion
        #region FillAlphaFadeInTime
        public Single FillAlphaFadeInTime { get; set; } = default(Single);
        #endregion
        #region FillFullAlphaTime
        public Single FillFullAlphaTime { get; set; } = default(Single);
        #endregion
        #region FillFadeOutTime
        public Single FillFadeOutTime { get; set; } = default(Single);
        #endregion
        #region FillPersistentAlphaRatio
        public Single FillPersistentAlphaRatio { get; set; } = default(Single);
        #endregion
        #region FillAlphaPulseAmplitude
        public Single FillAlphaPulseAmplitude { get; set; } = default(Single);
        #endregion
        #region FillAlphaPulseFrequency
        public Single FillAlphaPulseFrequency { get; set; } = default(Single);
        #endregion
        #region FillTextureAnimationSpeedU
        public Single FillTextureAnimationSpeedU { get; set; } = default(Single);
        #endregion
        #region FillTextureAnimationSpeedV
        public Single FillTextureAnimationSpeedV { get; set; } = default(Single);
        #endregion
        #region EdgeEffectFallOff
        public Single EdgeEffectFallOff { get; set; } = default(Single);
        #endregion
        #region EdgeEffectColor
        public Color EdgeEffectColor { get; set; } = default(Color);
        #endregion
        #region EdgeEffectAlphaFadeInTime
        public Single EdgeEffectAlphaFadeInTime { get; set; } = default(Single);
        #endregion
        #region EdgeEffectFullAlphaTime
        public Single EdgeEffectFullAlphaTime { get; set; } = default(Single);
        #endregion
        #region EdgeEffectAlphaFadeOutTime
        public Single EdgeEffectAlphaFadeOutTime { get; set; } = default(Single);
        #endregion
        #region EdgeEffectPersistentAlphaRatio
        public Single EdgeEffectPersistentAlphaRatio { get; set; } = default(Single);
        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        public Single EdgeEffectAlphaPulseAmplitude { get; set; } = default(Single);
        #endregion
        #region EdgeEffectAlphaPulseFrequency
        public Single EdgeEffectAlphaPulseFrequency { get; set; } = default(Single);
        #endregion
        #region FillFullAlphaRatio
        public Single FillFullAlphaRatio { get; set; } = default(Single);
        #endregion
        #region EdgeEffectFullAlphaRatio
        public Single EdgeEffectFullAlphaRatio { get; set; } = default(Single);
        #endregion
        #region MembraneDestBlendMode
        public static readonly EffectShader.BlendMode MembraneDestBlendModeDefault = BlendMode.Zero;
        public EffectShader.BlendMode MembraneDestBlendMode { get; set; } = MembraneDestBlendModeDefault;
        #endregion
        #region ParticleSourceBlendMode
        public static readonly EffectShader.BlendMode ParticleSourceBlendModeDefault = BlendMode.Zero;
        public EffectShader.BlendMode ParticleSourceBlendMode { get; set; } = ParticleSourceBlendModeDefault;
        #endregion
        #region ParticleBlendOperation
        public static readonly EffectShader.BlendOperation ParticleBlendOperationDefault = BlendOperation.Add;
        public EffectShader.BlendOperation ParticleBlendOperation { get; set; } = ParticleBlendOperationDefault;
        #endregion
        #region ParticleZTest
        public static readonly EffectShader.ZTest ParticleZTestDefault = ZTest.Normal;
        public EffectShader.ZTest ParticleZTest { get; set; } = ParticleZTestDefault;
        #endregion
        #region ParticleDestBlendMode
        public static readonly EffectShader.BlendMode ParticleDestBlendModeDefault = BlendMode.Zero;
        public EffectShader.BlendMode ParticleDestBlendMode { get; set; } = ParticleDestBlendModeDefault;
        #endregion
        #region ParticleBirthRampUpTime
        public Single ParticleBirthRampUpTime { get; set; } = default(Single);
        #endregion
        #region ParticleFullBirthTime
        public Single ParticleFullBirthTime { get; set; } = default(Single);
        #endregion
        #region ParticleBirthRampDownTime
        public Single ParticleBirthRampDownTime { get; set; } = default(Single);
        #endregion
        #region ParticleFullBirthRatio
        public Single ParticleFullBirthRatio { get; set; } = default(Single);
        #endregion
        #region ParticlePeristentCount
        public Single ParticlePeristentCount { get; set; } = default(Single);
        #endregion
        #region ParticleLifetime
        public Single ParticleLifetime { get; set; } = default(Single);
        #endregion
        #region ParticleLifetimePlusMinus
        public Single ParticleLifetimePlusMinus { get; set; } = default(Single);
        #endregion
        #region ParticleInitialSpeedAlongNormal
        public Single ParticleInitialSpeedAlongNormal { get; set; } = default(Single);
        #endregion
        #region ParticleAccelerationAlongNormal
        public Single ParticleAccelerationAlongNormal { get; set; } = default(Single);
        #endregion
        #region ParticleInitialVelocity1
        public Single ParticleInitialVelocity1 { get; set; } = default(Single);
        #endregion
        #region ParticleInitialVelocity2
        public Single ParticleInitialVelocity2 { get; set; } = default(Single);
        #endregion
        #region ParticleInitialVelocity3
        public Single ParticleInitialVelocity3 { get; set; } = default(Single);
        #endregion
        #region ParticleAcceleration1
        public Single ParticleAcceleration1 { get; set; } = default(Single);
        #endregion
        #region ParticleAcceleration2
        public Single ParticleAcceleration2 { get; set; } = default(Single);
        #endregion
        #region ParticleAcceleration3
        public Single ParticleAcceleration3 { get; set; } = default(Single);
        #endregion
        #region ParticleScaleKey1
        public Single ParticleScaleKey1 { get; set; } = default(Single);
        #endregion
        #region ParticleScaleKey2
        public Single ParticleScaleKey2 { get; set; } = default(Single);
        #endregion
        #region ParticleScaleKey1Time
        public Single ParticleScaleKey1Time { get; set; } = default(Single);
        #endregion
        #region ParticleScaleKey2Time
        public Single ParticleScaleKey2Time { get; set; } = default(Single);
        #endregion
        #region ColorKey1
        public Color ColorKey1 { get; set; } = default(Color);
        #endregion
        #region ColorKey2
        public Color ColorKey2 { get; set; } = default(Color);
        #endregion
        #region ColorKey3
        public Color ColorKey3 { get; set; } = default(Color);
        #endregion
        #region ColorKey1Alpha
        public Single ColorKey1Alpha { get; set; } = default(Single);
        #endregion
        #region ColorKey2Alpha
        public Single ColorKey2Alpha { get; set; } = default(Single);
        #endregion
        #region ColorKey3Alpha
        public Single ColorKey3Alpha { get; set; } = default(Single);
        #endregion
        #region ColorKey1Time
        public Single ColorKey1Time { get; set; } = default(Single);
        #endregion
        #region ColorKey2Time
        public Single ColorKey2Time { get; set; } = default(Single);
        #endregion
        #region ColorKey3Time
        public Single ColorKey3Time { get; set; } = default(Single);
        #endregion
        #region ParticleInitialSpeedAlongNormalPlusMinus
        public Single ParticleInitialSpeedAlongNormalPlusMinus { get; set; } = default(Single);
        #endregion
        #region ParticleInitialRotationDegree
        public Single ParticleInitialRotationDegree { get; set; } = default(Single);
        #endregion
        #region ParticleInitialRotationDegreePlusMinus
        public Single ParticleInitialRotationDegreePlusMinus { get; set; } = default(Single);
        #endregion
        #region ParticleRotationSpeedDegreePerSec
        public Single ParticleRotationSpeedDegreePerSec { get; set; } = default(Single);
        #endregion
        #region ParticleRotationSpeedDegreePerSecPlusMinus
        public Single ParticleRotationSpeedDegreePerSecPlusMinus { get; set; } = default(Single);
        #endregion
        #region AddonModels
        private readonly IFormLink<IDebrisGetter> _AddonModels = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> AddonModels
        {
            get => _AddonModels;
            set => _AddonModels.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IEffectShaderGetter.AddonModels => this.AddonModels;
        #endregion
        #region HolesStartTime
        public Single HolesStartTime { get; set; } = default(Single);
        #endregion
        #region HolesEndTime
        public Single HolesEndTime { get; set; } = default(Single);
        #endregion
        #region HolesStartValue
        public Single HolesStartValue { get; set; } = default(Single);
        #endregion
        #region HolesEndValue
        public Single HolesEndValue { get; set; } = default(Single);
        #endregion
        #region EdgeWidth
        public Single EdgeWidth { get; set; } = default(Single);
        #endregion
        #region EdgeColor
        public Color EdgeColor { get; set; } = default(Color);
        #endregion
        #region ExplosionWindSpeed
        public Single ExplosionWindSpeed { get; set; } = default(Single);
        #endregion
        #region TextureCountU
        public UInt32 TextureCountU { get; set; } = default(UInt32);
        #endregion
        #region TextureCountV
        public UInt32 TextureCountV { get; set; } = default(UInt32);
        #endregion
        #region AddonModelsFadeInTime
        public Single AddonModelsFadeInTime { get; set; } = default(Single);
        #endregion
        #region AddonModelsFadeOutTime
        public Single AddonModelsFadeOutTime { get; set; } = default(Single);
        #endregion
        #region AddonModelsScaleStart
        public Single AddonModelsScaleStart { get; set; } = default(Single);
        #endregion
        #region AddonModelsScaleEnd
        public Single AddonModelsScaleEnd { get; set; } = default(Single);
        #endregion
        #region AddonModelsScaleInTime
        public Single AddonModelsScaleInTime { get; set; } = default(Single);
        #endregion
        #region AddonModelsScaleOutTime
        public Single AddonModelsScaleOutTime { get; set; } = default(Single);
        #endregion
        #region AmbientSound
        private readonly IFormLink<ISoundGetter> _AmbientSound = new FormLink<ISoundGetter>();
        public IFormLink<ISoundGetter> AmbientSound
        {
            get => _AmbientSound;
            set => _AmbientSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundGetter> IEffectShaderGetter.AmbientSound => this.AmbientSound;
        #endregion
        #region FillColorKey2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _FillColorKey2;
        public Color FillColorKey2
        {
            get => this._FillColorKey2;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._FillColorKey2 = value;
            }
        }
        #endregion
        #region FillColorKey3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _FillColorKey3;
        public Color FillColorKey3
        {
            get => this._FillColorKey3;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._FillColorKey3 = value;
            }
        }
        #endregion
        #region FillColorKey1Scale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillColorKey1Scale;
        public Single FillColorKey1Scale
        {
            get => this._FillColorKey1Scale;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._FillColorKey1Scale = value;
            }
        }
        #endregion
        #region FillColorKey2Scale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillColorKey2Scale;
        public Single FillColorKey2Scale
        {
            get => this._FillColorKey2Scale;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._FillColorKey2Scale = value;
            }
        }
        #endregion
        #region FillColorKey3Scale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillColorKey3Scale;
        public Single FillColorKey3Scale
        {
            get => this._FillColorKey3Scale;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._FillColorKey3Scale = value;
            }
        }
        #endregion
        #region FillColorKey1Time
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillColorKey1Time;
        public Single FillColorKey1Time
        {
            get => this._FillColorKey1Time;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._FillColorKey1Time = value;
            }
        }
        #endregion
        #region FillColorKey2Time
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillColorKey2Time;
        public Single FillColorKey2Time
        {
            get => this._FillColorKey2Time;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._FillColorKey2Time = value;
            }
        }
        #endregion
        #region FillColorKey3Time
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillColorKey3Time;
        public Single FillColorKey3Time
        {
            get => this._FillColorKey3Time;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this._FillColorKey3Time = value;
            }
        }
        #endregion
        #region ColorScale
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _ColorScale;
        public Single ColorScale
        {
            get => this._ColorScale;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._ColorScale = value;
            }
        }
        #endregion
        #region BirthPositionOffset
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _BirthPositionOffset;
        public Single BirthPositionOffset
        {
            get => this._BirthPositionOffset;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._BirthPositionOffset = value;
            }
        }
        #endregion
        #region BirthPositionOffsetRangePlusMinus
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _BirthPositionOffsetRangePlusMinus;
        public Single BirthPositionOffsetRangePlusMinus
        {
            get => this._BirthPositionOffsetRangePlusMinus;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._BirthPositionOffsetRangePlusMinus = value;
            }
        }
        #endregion
        #region ParticleAnimatedStartFrame
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _ParticleAnimatedStartFrame;
        public UInt32 ParticleAnimatedStartFrame
        {
            get => this._ParticleAnimatedStartFrame;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._ParticleAnimatedStartFrame = value;
            }
        }
        #endregion
        #region ParticleAnimatedStartFrameVariation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _ParticleAnimatedStartFrameVariation;
        public UInt32 ParticleAnimatedStartFrameVariation
        {
            get => this._ParticleAnimatedStartFrameVariation;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._ParticleAnimatedStartFrameVariation = value;
            }
        }
        #endregion
        #region ParticleAnimatedEndFrame
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _ParticleAnimatedEndFrame;
        public UInt32 ParticleAnimatedEndFrame
        {
            get => this._ParticleAnimatedEndFrame;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._ParticleAnimatedEndFrame = value;
            }
        }
        #endregion
        #region ParticleAnimatedLoopStartFrame
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _ParticleAnimatedLoopStartFrame;
        public UInt32 ParticleAnimatedLoopStartFrame
        {
            get => this._ParticleAnimatedLoopStartFrame;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._ParticleAnimatedLoopStartFrame = value;
            }
        }
        #endregion
        #region ParticleAnimatedLoopStartVariation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _ParticleAnimatedLoopStartVariation;
        public UInt32 ParticleAnimatedLoopStartVariation
        {
            get => this._ParticleAnimatedLoopStartVariation;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._ParticleAnimatedLoopStartVariation = value;
            }
        }
        #endregion
        #region ParticleAnimatedFrameCount
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _ParticleAnimatedFrameCount;
        public UInt32 ParticleAnimatedFrameCount
        {
            get => this._ParticleAnimatedFrameCount;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._ParticleAnimatedFrameCount = value;
            }
        }
        #endregion
        #region ParticleAnimatedFrameCountVariation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _ParticleAnimatedFrameCountVariation;
        public UInt32 ParticleAnimatedFrameCountVariation
        {
            get => this._ParticleAnimatedFrameCountVariation;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._ParticleAnimatedFrameCountVariation = value;
            }
        }
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EffectShader.Flag _Flags;
        public EffectShader.Flag Flags
        {
            get => this._Flags;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._Flags = value;
            }
        }
        #endregion
        #region FillTextureScaleU
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureScaleU;
        public Single FillTextureScaleU
        {
            get => this._FillTextureScaleU;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._FillTextureScaleU = value;
            }
        }
        #endregion
        #region FillTextureScaleV
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FillTextureScaleV;
        public Single FillTextureScaleV
        {
            get => this._FillTextureScaleV;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this._FillTextureScaleV = value;
            }
        }
        #endregion
        #region SceneGraphEmitDepthLimit
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private UInt32 _SceneGraphEmitDepthLimit;
        public UInt32 SceneGraphEmitDepthLimit
        {
            get => this._SceneGraphEmitDepthLimit;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this.DATADataTypeState &= ~DATADataType.Break1;
                this.DATADataTypeState &= ~DATADataType.Break2;
                this.DATADataTypeState &= ~DATADataType.Break3;
                this._SceneGraphEmitDepthLimit = value;
            }
        }
        #endregion
        #region DATADataTypeState
        public EffectShader.DATADataType DATADataTypeState { get; set; } = default(EffectShader.DATADataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            EffectShaderMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.FillTexture = initialValue;
                this.ParticleShaderTexture = initialValue;
                this.HolesTexture = initialValue;
                this.MembranePaletteTexture = initialValue;
                this.ParticlePaletteTexture = initialValue;
                this.Unknown = initialValue;
                this.MembraneSourceBlendMode = initialValue;
                this.MembraneBlendOperation = initialValue;
                this.MembraneZTest = initialValue;
                this.FillColorKey1 = initialValue;
                this.FillAlphaFadeInTime = initialValue;
                this.FillFullAlphaTime = initialValue;
                this.FillFadeOutTime = initialValue;
                this.FillPersistentAlphaRatio = initialValue;
                this.FillAlphaPulseAmplitude = initialValue;
                this.FillAlphaPulseFrequency = initialValue;
                this.FillTextureAnimationSpeedU = initialValue;
                this.FillTextureAnimationSpeedV = initialValue;
                this.EdgeEffectFallOff = initialValue;
                this.EdgeEffectColor = initialValue;
                this.EdgeEffectAlphaFadeInTime = initialValue;
                this.EdgeEffectFullAlphaTime = initialValue;
                this.EdgeEffectAlphaFadeOutTime = initialValue;
                this.EdgeEffectPersistentAlphaRatio = initialValue;
                this.EdgeEffectAlphaPulseAmplitude = initialValue;
                this.EdgeEffectAlphaPulseFrequency = initialValue;
                this.FillFullAlphaRatio = initialValue;
                this.EdgeEffectFullAlphaRatio = initialValue;
                this.MembraneDestBlendMode = initialValue;
                this.ParticleSourceBlendMode = initialValue;
                this.ParticleBlendOperation = initialValue;
                this.ParticleZTest = initialValue;
                this.ParticleDestBlendMode = initialValue;
                this.ParticleBirthRampUpTime = initialValue;
                this.ParticleFullBirthTime = initialValue;
                this.ParticleBirthRampDownTime = initialValue;
                this.ParticleFullBirthRatio = initialValue;
                this.ParticlePeristentCount = initialValue;
                this.ParticleLifetime = initialValue;
                this.ParticleLifetimePlusMinus = initialValue;
                this.ParticleInitialSpeedAlongNormal = initialValue;
                this.ParticleAccelerationAlongNormal = initialValue;
                this.ParticleInitialVelocity1 = initialValue;
                this.ParticleInitialVelocity2 = initialValue;
                this.ParticleInitialVelocity3 = initialValue;
                this.ParticleAcceleration1 = initialValue;
                this.ParticleAcceleration2 = initialValue;
                this.ParticleAcceleration3 = initialValue;
                this.ParticleScaleKey1 = initialValue;
                this.ParticleScaleKey2 = initialValue;
                this.ParticleScaleKey1Time = initialValue;
                this.ParticleScaleKey2Time = initialValue;
                this.ColorKey1 = initialValue;
                this.ColorKey2 = initialValue;
                this.ColorKey3 = initialValue;
                this.ColorKey1Alpha = initialValue;
                this.ColorKey2Alpha = initialValue;
                this.ColorKey3Alpha = initialValue;
                this.ColorKey1Time = initialValue;
                this.ColorKey2Time = initialValue;
                this.ColorKey3Time = initialValue;
                this.ParticleInitialSpeedAlongNormalPlusMinus = initialValue;
                this.ParticleInitialRotationDegree = initialValue;
                this.ParticleInitialRotationDegreePlusMinus = initialValue;
                this.ParticleRotationSpeedDegreePerSec = initialValue;
                this.ParticleRotationSpeedDegreePerSecPlusMinus = initialValue;
                this.AddonModels = initialValue;
                this.HolesStartTime = initialValue;
                this.HolesEndTime = initialValue;
                this.HolesStartValue = initialValue;
                this.HolesEndValue = initialValue;
                this.EdgeWidth = initialValue;
                this.EdgeColor = initialValue;
                this.ExplosionWindSpeed = initialValue;
                this.TextureCountU = initialValue;
                this.TextureCountV = initialValue;
                this.AddonModelsFadeInTime = initialValue;
                this.AddonModelsFadeOutTime = initialValue;
                this.AddonModelsScaleStart = initialValue;
                this.AddonModelsScaleEnd = initialValue;
                this.AddonModelsScaleInTime = initialValue;
                this.AddonModelsScaleOutTime = initialValue;
                this.AmbientSound = initialValue;
                this.FillColorKey2 = initialValue;
                this.FillColorKey3 = initialValue;
                this.FillColorKey1Scale = initialValue;
                this.FillColorKey2Scale = initialValue;
                this.FillColorKey3Scale = initialValue;
                this.FillColorKey1Time = initialValue;
                this.FillColorKey2Time = initialValue;
                this.FillColorKey3Time = initialValue;
                this.ColorScale = initialValue;
                this.BirthPositionOffset = initialValue;
                this.BirthPositionOffsetRangePlusMinus = initialValue;
                this.ParticleAnimatedStartFrame = initialValue;
                this.ParticleAnimatedStartFrameVariation = initialValue;
                this.ParticleAnimatedEndFrame = initialValue;
                this.ParticleAnimatedLoopStartFrame = initialValue;
                this.ParticleAnimatedLoopStartVariation = initialValue;
                this.ParticleAnimatedFrameCount = initialValue;
                this.ParticleAnimatedFrameCountVariation = initialValue;
                this.Flags = initialValue;
                this.FillTextureScaleU = initialValue;
                this.FillTextureScaleV = initialValue;
                this.SceneGraphEmitDepthLimit = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem FillTexture,
                TItem ParticleShaderTexture,
                TItem HolesTexture,
                TItem MembranePaletteTexture,
                TItem ParticlePaletteTexture,
                TItem Unknown,
                TItem MembraneSourceBlendMode,
                TItem MembraneBlendOperation,
                TItem MembraneZTest,
                TItem FillColorKey1,
                TItem FillAlphaFadeInTime,
                TItem FillFullAlphaTime,
                TItem FillFadeOutTime,
                TItem FillPersistentAlphaRatio,
                TItem FillAlphaPulseAmplitude,
                TItem FillAlphaPulseFrequency,
                TItem FillTextureAnimationSpeedU,
                TItem FillTextureAnimationSpeedV,
                TItem EdgeEffectFallOff,
                TItem EdgeEffectColor,
                TItem EdgeEffectAlphaFadeInTime,
                TItem EdgeEffectFullAlphaTime,
                TItem EdgeEffectAlphaFadeOutTime,
                TItem EdgeEffectPersistentAlphaRatio,
                TItem EdgeEffectAlphaPulseAmplitude,
                TItem EdgeEffectAlphaPulseFrequency,
                TItem FillFullAlphaRatio,
                TItem EdgeEffectFullAlphaRatio,
                TItem MembraneDestBlendMode,
                TItem ParticleSourceBlendMode,
                TItem ParticleBlendOperation,
                TItem ParticleZTest,
                TItem ParticleDestBlendMode,
                TItem ParticleBirthRampUpTime,
                TItem ParticleFullBirthTime,
                TItem ParticleBirthRampDownTime,
                TItem ParticleFullBirthRatio,
                TItem ParticlePeristentCount,
                TItem ParticleLifetime,
                TItem ParticleLifetimePlusMinus,
                TItem ParticleInitialSpeedAlongNormal,
                TItem ParticleAccelerationAlongNormal,
                TItem ParticleInitialVelocity1,
                TItem ParticleInitialVelocity2,
                TItem ParticleInitialVelocity3,
                TItem ParticleAcceleration1,
                TItem ParticleAcceleration2,
                TItem ParticleAcceleration3,
                TItem ParticleScaleKey1,
                TItem ParticleScaleKey2,
                TItem ParticleScaleKey1Time,
                TItem ParticleScaleKey2Time,
                TItem ColorKey1,
                TItem ColorKey2,
                TItem ColorKey3,
                TItem ColorKey1Alpha,
                TItem ColorKey2Alpha,
                TItem ColorKey3Alpha,
                TItem ColorKey1Time,
                TItem ColorKey2Time,
                TItem ColorKey3Time,
                TItem ParticleInitialSpeedAlongNormalPlusMinus,
                TItem ParticleInitialRotationDegree,
                TItem ParticleInitialRotationDegreePlusMinus,
                TItem ParticleRotationSpeedDegreePerSec,
                TItem ParticleRotationSpeedDegreePerSecPlusMinus,
                TItem AddonModels,
                TItem HolesStartTime,
                TItem HolesEndTime,
                TItem HolesStartValue,
                TItem HolesEndValue,
                TItem EdgeWidth,
                TItem EdgeColor,
                TItem ExplosionWindSpeed,
                TItem TextureCountU,
                TItem TextureCountV,
                TItem AddonModelsFadeInTime,
                TItem AddonModelsFadeOutTime,
                TItem AddonModelsScaleStart,
                TItem AddonModelsScaleEnd,
                TItem AddonModelsScaleInTime,
                TItem AddonModelsScaleOutTime,
                TItem AmbientSound,
                TItem FillColorKey2,
                TItem FillColorKey3,
                TItem FillColorKey1Scale,
                TItem FillColorKey2Scale,
                TItem FillColorKey3Scale,
                TItem FillColorKey1Time,
                TItem FillColorKey2Time,
                TItem FillColorKey3Time,
                TItem ColorScale,
                TItem BirthPositionOffset,
                TItem BirthPositionOffsetRangePlusMinus,
                TItem ParticleAnimatedStartFrame,
                TItem ParticleAnimatedStartFrameVariation,
                TItem ParticleAnimatedEndFrame,
                TItem ParticleAnimatedLoopStartFrame,
                TItem ParticleAnimatedLoopStartVariation,
                TItem ParticleAnimatedFrameCount,
                TItem ParticleAnimatedFrameCountVariation,
                TItem Flags,
                TItem FillTextureScaleU,
                TItem FillTextureScaleV,
                TItem SceneGraphEmitDepthLimit,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.FillTexture = FillTexture;
                this.ParticleShaderTexture = ParticleShaderTexture;
                this.HolesTexture = HolesTexture;
                this.MembranePaletteTexture = MembranePaletteTexture;
                this.ParticlePaletteTexture = ParticlePaletteTexture;
                this.Unknown = Unknown;
                this.MembraneSourceBlendMode = MembraneSourceBlendMode;
                this.MembraneBlendOperation = MembraneBlendOperation;
                this.MembraneZTest = MembraneZTest;
                this.FillColorKey1 = FillColorKey1;
                this.FillAlphaFadeInTime = FillAlphaFadeInTime;
                this.FillFullAlphaTime = FillFullAlphaTime;
                this.FillFadeOutTime = FillFadeOutTime;
                this.FillPersistentAlphaRatio = FillPersistentAlphaRatio;
                this.FillAlphaPulseAmplitude = FillAlphaPulseAmplitude;
                this.FillAlphaPulseFrequency = FillAlphaPulseFrequency;
                this.FillTextureAnimationSpeedU = FillTextureAnimationSpeedU;
                this.FillTextureAnimationSpeedV = FillTextureAnimationSpeedV;
                this.EdgeEffectFallOff = EdgeEffectFallOff;
                this.EdgeEffectColor = EdgeEffectColor;
                this.EdgeEffectAlphaFadeInTime = EdgeEffectAlphaFadeInTime;
                this.EdgeEffectFullAlphaTime = EdgeEffectFullAlphaTime;
                this.EdgeEffectAlphaFadeOutTime = EdgeEffectAlphaFadeOutTime;
                this.EdgeEffectPersistentAlphaRatio = EdgeEffectPersistentAlphaRatio;
                this.EdgeEffectAlphaPulseAmplitude = EdgeEffectAlphaPulseAmplitude;
                this.EdgeEffectAlphaPulseFrequency = EdgeEffectAlphaPulseFrequency;
                this.FillFullAlphaRatio = FillFullAlphaRatio;
                this.EdgeEffectFullAlphaRatio = EdgeEffectFullAlphaRatio;
                this.MembraneDestBlendMode = MembraneDestBlendMode;
                this.ParticleSourceBlendMode = ParticleSourceBlendMode;
                this.ParticleBlendOperation = ParticleBlendOperation;
                this.ParticleZTest = ParticleZTest;
                this.ParticleDestBlendMode = ParticleDestBlendMode;
                this.ParticleBirthRampUpTime = ParticleBirthRampUpTime;
                this.ParticleFullBirthTime = ParticleFullBirthTime;
                this.ParticleBirthRampDownTime = ParticleBirthRampDownTime;
                this.ParticleFullBirthRatio = ParticleFullBirthRatio;
                this.ParticlePeristentCount = ParticlePeristentCount;
                this.ParticleLifetime = ParticleLifetime;
                this.ParticleLifetimePlusMinus = ParticleLifetimePlusMinus;
                this.ParticleInitialSpeedAlongNormal = ParticleInitialSpeedAlongNormal;
                this.ParticleAccelerationAlongNormal = ParticleAccelerationAlongNormal;
                this.ParticleInitialVelocity1 = ParticleInitialVelocity1;
                this.ParticleInitialVelocity2 = ParticleInitialVelocity2;
                this.ParticleInitialVelocity3 = ParticleInitialVelocity3;
                this.ParticleAcceleration1 = ParticleAcceleration1;
                this.ParticleAcceleration2 = ParticleAcceleration2;
                this.ParticleAcceleration3 = ParticleAcceleration3;
                this.ParticleScaleKey1 = ParticleScaleKey1;
                this.ParticleScaleKey2 = ParticleScaleKey2;
                this.ParticleScaleKey1Time = ParticleScaleKey1Time;
                this.ParticleScaleKey2Time = ParticleScaleKey2Time;
                this.ColorKey1 = ColorKey1;
                this.ColorKey2 = ColorKey2;
                this.ColorKey3 = ColorKey3;
                this.ColorKey1Alpha = ColorKey1Alpha;
                this.ColorKey2Alpha = ColorKey2Alpha;
                this.ColorKey3Alpha = ColorKey3Alpha;
                this.ColorKey1Time = ColorKey1Time;
                this.ColorKey2Time = ColorKey2Time;
                this.ColorKey3Time = ColorKey3Time;
                this.ParticleInitialSpeedAlongNormalPlusMinus = ParticleInitialSpeedAlongNormalPlusMinus;
                this.ParticleInitialRotationDegree = ParticleInitialRotationDegree;
                this.ParticleInitialRotationDegreePlusMinus = ParticleInitialRotationDegreePlusMinus;
                this.ParticleRotationSpeedDegreePerSec = ParticleRotationSpeedDegreePerSec;
                this.ParticleRotationSpeedDegreePerSecPlusMinus = ParticleRotationSpeedDegreePerSecPlusMinus;
                this.AddonModels = AddonModels;
                this.HolesStartTime = HolesStartTime;
                this.HolesEndTime = HolesEndTime;
                this.HolesStartValue = HolesStartValue;
                this.HolesEndValue = HolesEndValue;
                this.EdgeWidth = EdgeWidth;
                this.EdgeColor = EdgeColor;
                this.ExplosionWindSpeed = ExplosionWindSpeed;
                this.TextureCountU = TextureCountU;
                this.TextureCountV = TextureCountV;
                this.AddonModelsFadeInTime = AddonModelsFadeInTime;
                this.AddonModelsFadeOutTime = AddonModelsFadeOutTime;
                this.AddonModelsScaleStart = AddonModelsScaleStart;
                this.AddonModelsScaleEnd = AddonModelsScaleEnd;
                this.AddonModelsScaleInTime = AddonModelsScaleInTime;
                this.AddonModelsScaleOutTime = AddonModelsScaleOutTime;
                this.AmbientSound = AmbientSound;
                this.FillColorKey2 = FillColorKey2;
                this.FillColorKey3 = FillColorKey3;
                this.FillColorKey1Scale = FillColorKey1Scale;
                this.FillColorKey2Scale = FillColorKey2Scale;
                this.FillColorKey3Scale = FillColorKey3Scale;
                this.FillColorKey1Time = FillColorKey1Time;
                this.FillColorKey2Time = FillColorKey2Time;
                this.FillColorKey3Time = FillColorKey3Time;
                this.ColorScale = ColorScale;
                this.BirthPositionOffset = BirthPositionOffset;
                this.BirthPositionOffsetRangePlusMinus = BirthPositionOffsetRangePlusMinus;
                this.ParticleAnimatedStartFrame = ParticleAnimatedStartFrame;
                this.ParticleAnimatedStartFrameVariation = ParticleAnimatedStartFrameVariation;
                this.ParticleAnimatedEndFrame = ParticleAnimatedEndFrame;
                this.ParticleAnimatedLoopStartFrame = ParticleAnimatedLoopStartFrame;
                this.ParticleAnimatedLoopStartVariation = ParticleAnimatedLoopStartVariation;
                this.ParticleAnimatedFrameCount = ParticleAnimatedFrameCount;
                this.ParticleAnimatedFrameCountVariation = ParticleAnimatedFrameCountVariation;
                this.Flags = Flags;
                this.FillTextureScaleU = FillTextureScaleU;
                this.FillTextureScaleV = FillTextureScaleV;
                this.SceneGraphEmitDepthLimit = SceneGraphEmitDepthLimit;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem FillTexture;
            public TItem ParticleShaderTexture;
            public TItem HolesTexture;
            public TItem MembranePaletteTexture;
            public TItem ParticlePaletteTexture;
            public TItem Unknown;
            public TItem MembraneSourceBlendMode;
            public TItem MembraneBlendOperation;
            public TItem MembraneZTest;
            public TItem FillColorKey1;
            public TItem FillAlphaFadeInTime;
            public TItem FillFullAlphaTime;
            public TItem FillFadeOutTime;
            public TItem FillPersistentAlphaRatio;
            public TItem FillAlphaPulseAmplitude;
            public TItem FillAlphaPulseFrequency;
            public TItem FillTextureAnimationSpeedU;
            public TItem FillTextureAnimationSpeedV;
            public TItem EdgeEffectFallOff;
            public TItem EdgeEffectColor;
            public TItem EdgeEffectAlphaFadeInTime;
            public TItem EdgeEffectFullAlphaTime;
            public TItem EdgeEffectAlphaFadeOutTime;
            public TItem EdgeEffectPersistentAlphaRatio;
            public TItem EdgeEffectAlphaPulseAmplitude;
            public TItem EdgeEffectAlphaPulseFrequency;
            public TItem FillFullAlphaRatio;
            public TItem EdgeEffectFullAlphaRatio;
            public TItem MembraneDestBlendMode;
            public TItem ParticleSourceBlendMode;
            public TItem ParticleBlendOperation;
            public TItem ParticleZTest;
            public TItem ParticleDestBlendMode;
            public TItem ParticleBirthRampUpTime;
            public TItem ParticleFullBirthTime;
            public TItem ParticleBirthRampDownTime;
            public TItem ParticleFullBirthRatio;
            public TItem ParticlePeristentCount;
            public TItem ParticleLifetime;
            public TItem ParticleLifetimePlusMinus;
            public TItem ParticleInitialSpeedAlongNormal;
            public TItem ParticleAccelerationAlongNormal;
            public TItem ParticleInitialVelocity1;
            public TItem ParticleInitialVelocity2;
            public TItem ParticleInitialVelocity3;
            public TItem ParticleAcceleration1;
            public TItem ParticleAcceleration2;
            public TItem ParticleAcceleration3;
            public TItem ParticleScaleKey1;
            public TItem ParticleScaleKey2;
            public TItem ParticleScaleKey1Time;
            public TItem ParticleScaleKey2Time;
            public TItem ColorKey1;
            public TItem ColorKey2;
            public TItem ColorKey3;
            public TItem ColorKey1Alpha;
            public TItem ColorKey2Alpha;
            public TItem ColorKey3Alpha;
            public TItem ColorKey1Time;
            public TItem ColorKey2Time;
            public TItem ColorKey3Time;
            public TItem ParticleInitialSpeedAlongNormalPlusMinus;
            public TItem ParticleInitialRotationDegree;
            public TItem ParticleInitialRotationDegreePlusMinus;
            public TItem ParticleRotationSpeedDegreePerSec;
            public TItem ParticleRotationSpeedDegreePerSecPlusMinus;
            public TItem AddonModels;
            public TItem HolesStartTime;
            public TItem HolesEndTime;
            public TItem HolesStartValue;
            public TItem HolesEndValue;
            public TItem EdgeWidth;
            public TItem EdgeColor;
            public TItem ExplosionWindSpeed;
            public TItem TextureCountU;
            public TItem TextureCountV;
            public TItem AddonModelsFadeInTime;
            public TItem AddonModelsFadeOutTime;
            public TItem AddonModelsScaleStart;
            public TItem AddonModelsScaleEnd;
            public TItem AddonModelsScaleInTime;
            public TItem AddonModelsScaleOutTime;
            public TItem AmbientSound;
            public TItem FillColorKey2;
            public TItem FillColorKey3;
            public TItem FillColorKey1Scale;
            public TItem FillColorKey2Scale;
            public TItem FillColorKey3Scale;
            public TItem FillColorKey1Time;
            public TItem FillColorKey2Time;
            public TItem FillColorKey3Time;
            public TItem ColorScale;
            public TItem BirthPositionOffset;
            public TItem BirthPositionOffsetRangePlusMinus;
            public TItem ParticleAnimatedStartFrame;
            public TItem ParticleAnimatedStartFrameVariation;
            public TItem ParticleAnimatedEndFrame;
            public TItem ParticleAnimatedLoopStartFrame;
            public TItem ParticleAnimatedLoopStartVariation;
            public TItem ParticleAnimatedFrameCount;
            public TItem ParticleAnimatedFrameCountVariation;
            public TItem Flags;
            public TItem FillTextureScaleU;
            public TItem FillTextureScaleV;
            public TItem SceneGraphEmitDepthLimit;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.FillTexture, rhs.FillTexture)) return false;
                if (!object.Equals(this.ParticleShaderTexture, rhs.ParticleShaderTexture)) return false;
                if (!object.Equals(this.HolesTexture, rhs.HolesTexture)) return false;
                if (!object.Equals(this.MembranePaletteTexture, rhs.MembranePaletteTexture)) return false;
                if (!object.Equals(this.ParticlePaletteTexture, rhs.ParticlePaletteTexture)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.MembraneSourceBlendMode, rhs.MembraneSourceBlendMode)) return false;
                if (!object.Equals(this.MembraneBlendOperation, rhs.MembraneBlendOperation)) return false;
                if (!object.Equals(this.MembraneZTest, rhs.MembraneZTest)) return false;
                if (!object.Equals(this.FillColorKey1, rhs.FillColorKey1)) return false;
                if (!object.Equals(this.FillAlphaFadeInTime, rhs.FillAlphaFadeInTime)) return false;
                if (!object.Equals(this.FillFullAlphaTime, rhs.FillFullAlphaTime)) return false;
                if (!object.Equals(this.FillFadeOutTime, rhs.FillFadeOutTime)) return false;
                if (!object.Equals(this.FillPersistentAlphaRatio, rhs.FillPersistentAlphaRatio)) return false;
                if (!object.Equals(this.FillAlphaPulseAmplitude, rhs.FillAlphaPulseAmplitude)) return false;
                if (!object.Equals(this.FillAlphaPulseFrequency, rhs.FillAlphaPulseFrequency)) return false;
                if (!object.Equals(this.FillTextureAnimationSpeedU, rhs.FillTextureAnimationSpeedU)) return false;
                if (!object.Equals(this.FillTextureAnimationSpeedV, rhs.FillTextureAnimationSpeedV)) return false;
                if (!object.Equals(this.EdgeEffectFallOff, rhs.EdgeEffectFallOff)) return false;
                if (!object.Equals(this.EdgeEffectColor, rhs.EdgeEffectColor)) return false;
                if (!object.Equals(this.EdgeEffectAlphaFadeInTime, rhs.EdgeEffectAlphaFadeInTime)) return false;
                if (!object.Equals(this.EdgeEffectFullAlphaTime, rhs.EdgeEffectFullAlphaTime)) return false;
                if (!object.Equals(this.EdgeEffectAlphaFadeOutTime, rhs.EdgeEffectAlphaFadeOutTime)) return false;
                if (!object.Equals(this.EdgeEffectPersistentAlphaRatio, rhs.EdgeEffectPersistentAlphaRatio)) return false;
                if (!object.Equals(this.EdgeEffectAlphaPulseAmplitude, rhs.EdgeEffectAlphaPulseAmplitude)) return false;
                if (!object.Equals(this.EdgeEffectAlphaPulseFrequency, rhs.EdgeEffectAlphaPulseFrequency)) return false;
                if (!object.Equals(this.FillFullAlphaRatio, rhs.FillFullAlphaRatio)) return false;
                if (!object.Equals(this.EdgeEffectFullAlphaRatio, rhs.EdgeEffectFullAlphaRatio)) return false;
                if (!object.Equals(this.MembraneDestBlendMode, rhs.MembraneDestBlendMode)) return false;
                if (!object.Equals(this.ParticleSourceBlendMode, rhs.ParticleSourceBlendMode)) return false;
                if (!object.Equals(this.ParticleBlendOperation, rhs.ParticleBlendOperation)) return false;
                if (!object.Equals(this.ParticleZTest, rhs.ParticleZTest)) return false;
                if (!object.Equals(this.ParticleDestBlendMode, rhs.ParticleDestBlendMode)) return false;
                if (!object.Equals(this.ParticleBirthRampUpTime, rhs.ParticleBirthRampUpTime)) return false;
                if (!object.Equals(this.ParticleFullBirthTime, rhs.ParticleFullBirthTime)) return false;
                if (!object.Equals(this.ParticleBirthRampDownTime, rhs.ParticleBirthRampDownTime)) return false;
                if (!object.Equals(this.ParticleFullBirthRatio, rhs.ParticleFullBirthRatio)) return false;
                if (!object.Equals(this.ParticlePeristentCount, rhs.ParticlePeristentCount)) return false;
                if (!object.Equals(this.ParticleLifetime, rhs.ParticleLifetime)) return false;
                if (!object.Equals(this.ParticleLifetimePlusMinus, rhs.ParticleLifetimePlusMinus)) return false;
                if (!object.Equals(this.ParticleInitialSpeedAlongNormal, rhs.ParticleInitialSpeedAlongNormal)) return false;
                if (!object.Equals(this.ParticleAccelerationAlongNormal, rhs.ParticleAccelerationAlongNormal)) return false;
                if (!object.Equals(this.ParticleInitialVelocity1, rhs.ParticleInitialVelocity1)) return false;
                if (!object.Equals(this.ParticleInitialVelocity2, rhs.ParticleInitialVelocity2)) return false;
                if (!object.Equals(this.ParticleInitialVelocity3, rhs.ParticleInitialVelocity3)) return false;
                if (!object.Equals(this.ParticleAcceleration1, rhs.ParticleAcceleration1)) return false;
                if (!object.Equals(this.ParticleAcceleration2, rhs.ParticleAcceleration2)) return false;
                if (!object.Equals(this.ParticleAcceleration3, rhs.ParticleAcceleration3)) return false;
                if (!object.Equals(this.ParticleScaleKey1, rhs.ParticleScaleKey1)) return false;
                if (!object.Equals(this.ParticleScaleKey2, rhs.ParticleScaleKey2)) return false;
                if (!object.Equals(this.ParticleScaleKey1Time, rhs.ParticleScaleKey1Time)) return false;
                if (!object.Equals(this.ParticleScaleKey2Time, rhs.ParticleScaleKey2Time)) return false;
                if (!object.Equals(this.ColorKey1, rhs.ColorKey1)) return false;
                if (!object.Equals(this.ColorKey2, rhs.ColorKey2)) return false;
                if (!object.Equals(this.ColorKey3, rhs.ColorKey3)) return false;
                if (!object.Equals(this.ColorKey1Alpha, rhs.ColorKey1Alpha)) return false;
                if (!object.Equals(this.ColorKey2Alpha, rhs.ColorKey2Alpha)) return false;
                if (!object.Equals(this.ColorKey3Alpha, rhs.ColorKey3Alpha)) return false;
                if (!object.Equals(this.ColorKey1Time, rhs.ColorKey1Time)) return false;
                if (!object.Equals(this.ColorKey2Time, rhs.ColorKey2Time)) return false;
                if (!object.Equals(this.ColorKey3Time, rhs.ColorKey3Time)) return false;
                if (!object.Equals(this.ParticleInitialSpeedAlongNormalPlusMinus, rhs.ParticleInitialSpeedAlongNormalPlusMinus)) return false;
                if (!object.Equals(this.ParticleInitialRotationDegree, rhs.ParticleInitialRotationDegree)) return false;
                if (!object.Equals(this.ParticleInitialRotationDegreePlusMinus, rhs.ParticleInitialRotationDegreePlusMinus)) return false;
                if (!object.Equals(this.ParticleRotationSpeedDegreePerSec, rhs.ParticleRotationSpeedDegreePerSec)) return false;
                if (!object.Equals(this.ParticleRotationSpeedDegreePerSecPlusMinus, rhs.ParticleRotationSpeedDegreePerSecPlusMinus)) return false;
                if (!object.Equals(this.AddonModels, rhs.AddonModels)) return false;
                if (!object.Equals(this.HolesStartTime, rhs.HolesStartTime)) return false;
                if (!object.Equals(this.HolesEndTime, rhs.HolesEndTime)) return false;
                if (!object.Equals(this.HolesStartValue, rhs.HolesStartValue)) return false;
                if (!object.Equals(this.HolesEndValue, rhs.HolesEndValue)) return false;
                if (!object.Equals(this.EdgeWidth, rhs.EdgeWidth)) return false;
                if (!object.Equals(this.EdgeColor, rhs.EdgeColor)) return false;
                if (!object.Equals(this.ExplosionWindSpeed, rhs.ExplosionWindSpeed)) return false;
                if (!object.Equals(this.TextureCountU, rhs.TextureCountU)) return false;
                if (!object.Equals(this.TextureCountV, rhs.TextureCountV)) return false;
                if (!object.Equals(this.AddonModelsFadeInTime, rhs.AddonModelsFadeInTime)) return false;
                if (!object.Equals(this.AddonModelsFadeOutTime, rhs.AddonModelsFadeOutTime)) return false;
                if (!object.Equals(this.AddonModelsScaleStart, rhs.AddonModelsScaleStart)) return false;
                if (!object.Equals(this.AddonModelsScaleEnd, rhs.AddonModelsScaleEnd)) return false;
                if (!object.Equals(this.AddonModelsScaleInTime, rhs.AddonModelsScaleInTime)) return false;
                if (!object.Equals(this.AddonModelsScaleOutTime, rhs.AddonModelsScaleOutTime)) return false;
                if (!object.Equals(this.AmbientSound, rhs.AmbientSound)) return false;
                if (!object.Equals(this.FillColorKey2, rhs.FillColorKey2)) return false;
                if (!object.Equals(this.FillColorKey3, rhs.FillColorKey3)) return false;
                if (!object.Equals(this.FillColorKey1Scale, rhs.FillColorKey1Scale)) return false;
                if (!object.Equals(this.FillColorKey2Scale, rhs.FillColorKey2Scale)) return false;
                if (!object.Equals(this.FillColorKey3Scale, rhs.FillColorKey3Scale)) return false;
                if (!object.Equals(this.FillColorKey1Time, rhs.FillColorKey1Time)) return false;
                if (!object.Equals(this.FillColorKey2Time, rhs.FillColorKey2Time)) return false;
                if (!object.Equals(this.FillColorKey3Time, rhs.FillColorKey3Time)) return false;
                if (!object.Equals(this.ColorScale, rhs.ColorScale)) return false;
                if (!object.Equals(this.BirthPositionOffset, rhs.BirthPositionOffset)) return false;
                if (!object.Equals(this.BirthPositionOffsetRangePlusMinus, rhs.BirthPositionOffsetRangePlusMinus)) return false;
                if (!object.Equals(this.ParticleAnimatedStartFrame, rhs.ParticleAnimatedStartFrame)) return false;
                if (!object.Equals(this.ParticleAnimatedStartFrameVariation, rhs.ParticleAnimatedStartFrameVariation)) return false;
                if (!object.Equals(this.ParticleAnimatedEndFrame, rhs.ParticleAnimatedEndFrame)) return false;
                if (!object.Equals(this.ParticleAnimatedLoopStartFrame, rhs.ParticleAnimatedLoopStartFrame)) return false;
                if (!object.Equals(this.ParticleAnimatedLoopStartVariation, rhs.ParticleAnimatedLoopStartVariation)) return false;
                if (!object.Equals(this.ParticleAnimatedFrameCount, rhs.ParticleAnimatedFrameCount)) return false;
                if (!object.Equals(this.ParticleAnimatedFrameCountVariation, rhs.ParticleAnimatedFrameCountVariation)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.FillTextureScaleU, rhs.FillTextureScaleU)) return false;
                if (!object.Equals(this.FillTextureScaleV, rhs.FillTextureScaleV)) return false;
                if (!object.Equals(this.SceneGraphEmitDepthLimit, rhs.SceneGraphEmitDepthLimit)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.FillTexture);
                hash.Add(this.ParticleShaderTexture);
                hash.Add(this.HolesTexture);
                hash.Add(this.MembranePaletteTexture);
                hash.Add(this.ParticlePaletteTexture);
                hash.Add(this.Unknown);
                hash.Add(this.MembraneSourceBlendMode);
                hash.Add(this.MembraneBlendOperation);
                hash.Add(this.MembraneZTest);
                hash.Add(this.FillColorKey1);
                hash.Add(this.FillAlphaFadeInTime);
                hash.Add(this.FillFullAlphaTime);
                hash.Add(this.FillFadeOutTime);
                hash.Add(this.FillPersistentAlphaRatio);
                hash.Add(this.FillAlphaPulseAmplitude);
                hash.Add(this.FillAlphaPulseFrequency);
                hash.Add(this.FillTextureAnimationSpeedU);
                hash.Add(this.FillTextureAnimationSpeedV);
                hash.Add(this.EdgeEffectFallOff);
                hash.Add(this.EdgeEffectColor);
                hash.Add(this.EdgeEffectAlphaFadeInTime);
                hash.Add(this.EdgeEffectFullAlphaTime);
                hash.Add(this.EdgeEffectAlphaFadeOutTime);
                hash.Add(this.EdgeEffectPersistentAlphaRatio);
                hash.Add(this.EdgeEffectAlphaPulseAmplitude);
                hash.Add(this.EdgeEffectAlphaPulseFrequency);
                hash.Add(this.FillFullAlphaRatio);
                hash.Add(this.EdgeEffectFullAlphaRatio);
                hash.Add(this.MembraneDestBlendMode);
                hash.Add(this.ParticleSourceBlendMode);
                hash.Add(this.ParticleBlendOperation);
                hash.Add(this.ParticleZTest);
                hash.Add(this.ParticleDestBlendMode);
                hash.Add(this.ParticleBirthRampUpTime);
                hash.Add(this.ParticleFullBirthTime);
                hash.Add(this.ParticleBirthRampDownTime);
                hash.Add(this.ParticleFullBirthRatio);
                hash.Add(this.ParticlePeristentCount);
                hash.Add(this.ParticleLifetime);
                hash.Add(this.ParticleLifetimePlusMinus);
                hash.Add(this.ParticleInitialSpeedAlongNormal);
                hash.Add(this.ParticleAccelerationAlongNormal);
                hash.Add(this.ParticleInitialVelocity1);
                hash.Add(this.ParticleInitialVelocity2);
                hash.Add(this.ParticleInitialVelocity3);
                hash.Add(this.ParticleAcceleration1);
                hash.Add(this.ParticleAcceleration2);
                hash.Add(this.ParticleAcceleration3);
                hash.Add(this.ParticleScaleKey1);
                hash.Add(this.ParticleScaleKey2);
                hash.Add(this.ParticleScaleKey1Time);
                hash.Add(this.ParticleScaleKey2Time);
                hash.Add(this.ColorKey1);
                hash.Add(this.ColorKey2);
                hash.Add(this.ColorKey3);
                hash.Add(this.ColorKey1Alpha);
                hash.Add(this.ColorKey2Alpha);
                hash.Add(this.ColorKey3Alpha);
                hash.Add(this.ColorKey1Time);
                hash.Add(this.ColorKey2Time);
                hash.Add(this.ColorKey3Time);
                hash.Add(this.ParticleInitialSpeedAlongNormalPlusMinus);
                hash.Add(this.ParticleInitialRotationDegree);
                hash.Add(this.ParticleInitialRotationDegreePlusMinus);
                hash.Add(this.ParticleRotationSpeedDegreePerSec);
                hash.Add(this.ParticleRotationSpeedDegreePerSecPlusMinus);
                hash.Add(this.AddonModels);
                hash.Add(this.HolesStartTime);
                hash.Add(this.HolesEndTime);
                hash.Add(this.HolesStartValue);
                hash.Add(this.HolesEndValue);
                hash.Add(this.EdgeWidth);
                hash.Add(this.EdgeColor);
                hash.Add(this.ExplosionWindSpeed);
                hash.Add(this.TextureCountU);
                hash.Add(this.TextureCountV);
                hash.Add(this.AddonModelsFadeInTime);
                hash.Add(this.AddonModelsFadeOutTime);
                hash.Add(this.AddonModelsScaleStart);
                hash.Add(this.AddonModelsScaleEnd);
                hash.Add(this.AddonModelsScaleInTime);
                hash.Add(this.AddonModelsScaleOutTime);
                hash.Add(this.AmbientSound);
                hash.Add(this.FillColorKey2);
                hash.Add(this.FillColorKey3);
                hash.Add(this.FillColorKey1Scale);
                hash.Add(this.FillColorKey2Scale);
                hash.Add(this.FillColorKey3Scale);
                hash.Add(this.FillColorKey1Time);
                hash.Add(this.FillColorKey2Time);
                hash.Add(this.FillColorKey3Time);
                hash.Add(this.ColorScale);
                hash.Add(this.BirthPositionOffset);
                hash.Add(this.BirthPositionOffsetRangePlusMinus);
                hash.Add(this.ParticleAnimatedStartFrame);
                hash.Add(this.ParticleAnimatedStartFrameVariation);
                hash.Add(this.ParticleAnimatedEndFrame);
                hash.Add(this.ParticleAnimatedLoopStartFrame);
                hash.Add(this.ParticleAnimatedLoopStartVariation);
                hash.Add(this.ParticleAnimatedFrameCount);
                hash.Add(this.ParticleAnimatedFrameCountVariation);
                hash.Add(this.Flags);
                hash.Add(this.FillTextureScaleU);
                hash.Add(this.FillTextureScaleV);
                hash.Add(this.SceneGraphEmitDepthLimit);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.FillTexture)) return false;
                if (!eval(this.ParticleShaderTexture)) return false;
                if (!eval(this.HolesTexture)) return false;
                if (!eval(this.MembranePaletteTexture)) return false;
                if (!eval(this.ParticlePaletteTexture)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.MembraneSourceBlendMode)) return false;
                if (!eval(this.MembraneBlendOperation)) return false;
                if (!eval(this.MembraneZTest)) return false;
                if (!eval(this.FillColorKey1)) return false;
                if (!eval(this.FillAlphaFadeInTime)) return false;
                if (!eval(this.FillFullAlphaTime)) return false;
                if (!eval(this.FillFadeOutTime)) return false;
                if (!eval(this.FillPersistentAlphaRatio)) return false;
                if (!eval(this.FillAlphaPulseAmplitude)) return false;
                if (!eval(this.FillAlphaPulseFrequency)) return false;
                if (!eval(this.FillTextureAnimationSpeedU)) return false;
                if (!eval(this.FillTextureAnimationSpeedV)) return false;
                if (!eval(this.EdgeEffectFallOff)) return false;
                if (!eval(this.EdgeEffectColor)) return false;
                if (!eval(this.EdgeEffectAlphaFadeInTime)) return false;
                if (!eval(this.EdgeEffectFullAlphaTime)) return false;
                if (!eval(this.EdgeEffectAlphaFadeOutTime)) return false;
                if (!eval(this.EdgeEffectPersistentAlphaRatio)) return false;
                if (!eval(this.EdgeEffectAlphaPulseAmplitude)) return false;
                if (!eval(this.EdgeEffectAlphaPulseFrequency)) return false;
                if (!eval(this.FillFullAlphaRatio)) return false;
                if (!eval(this.EdgeEffectFullAlphaRatio)) return false;
                if (!eval(this.MembraneDestBlendMode)) return false;
                if (!eval(this.ParticleSourceBlendMode)) return false;
                if (!eval(this.ParticleBlendOperation)) return false;
                if (!eval(this.ParticleZTest)) return false;
                if (!eval(this.ParticleDestBlendMode)) return false;
                if (!eval(this.ParticleBirthRampUpTime)) return false;
                if (!eval(this.ParticleFullBirthTime)) return false;
                if (!eval(this.ParticleBirthRampDownTime)) return false;
                if (!eval(this.ParticleFullBirthRatio)) return false;
                if (!eval(this.ParticlePeristentCount)) return false;
                if (!eval(this.ParticleLifetime)) return false;
                if (!eval(this.ParticleLifetimePlusMinus)) return false;
                if (!eval(this.ParticleInitialSpeedAlongNormal)) return false;
                if (!eval(this.ParticleAccelerationAlongNormal)) return false;
                if (!eval(this.ParticleInitialVelocity1)) return false;
                if (!eval(this.ParticleInitialVelocity2)) return false;
                if (!eval(this.ParticleInitialVelocity3)) return false;
                if (!eval(this.ParticleAcceleration1)) return false;
                if (!eval(this.ParticleAcceleration2)) return false;
                if (!eval(this.ParticleAcceleration3)) return false;
                if (!eval(this.ParticleScaleKey1)) return false;
                if (!eval(this.ParticleScaleKey2)) return false;
                if (!eval(this.ParticleScaleKey1Time)) return false;
                if (!eval(this.ParticleScaleKey2Time)) return false;
                if (!eval(this.ColorKey1)) return false;
                if (!eval(this.ColorKey2)) return false;
                if (!eval(this.ColorKey3)) return false;
                if (!eval(this.ColorKey1Alpha)) return false;
                if (!eval(this.ColorKey2Alpha)) return false;
                if (!eval(this.ColorKey3Alpha)) return false;
                if (!eval(this.ColorKey1Time)) return false;
                if (!eval(this.ColorKey2Time)) return false;
                if (!eval(this.ColorKey3Time)) return false;
                if (!eval(this.ParticleInitialSpeedAlongNormalPlusMinus)) return false;
                if (!eval(this.ParticleInitialRotationDegree)) return false;
                if (!eval(this.ParticleInitialRotationDegreePlusMinus)) return false;
                if (!eval(this.ParticleRotationSpeedDegreePerSec)) return false;
                if (!eval(this.ParticleRotationSpeedDegreePerSecPlusMinus)) return false;
                if (!eval(this.AddonModels)) return false;
                if (!eval(this.HolesStartTime)) return false;
                if (!eval(this.HolesEndTime)) return false;
                if (!eval(this.HolesStartValue)) return false;
                if (!eval(this.HolesEndValue)) return false;
                if (!eval(this.EdgeWidth)) return false;
                if (!eval(this.EdgeColor)) return false;
                if (!eval(this.ExplosionWindSpeed)) return false;
                if (!eval(this.TextureCountU)) return false;
                if (!eval(this.TextureCountV)) return false;
                if (!eval(this.AddonModelsFadeInTime)) return false;
                if (!eval(this.AddonModelsFadeOutTime)) return false;
                if (!eval(this.AddonModelsScaleStart)) return false;
                if (!eval(this.AddonModelsScaleEnd)) return false;
                if (!eval(this.AddonModelsScaleInTime)) return false;
                if (!eval(this.AddonModelsScaleOutTime)) return false;
                if (!eval(this.AmbientSound)) return false;
                if (!eval(this.FillColorKey2)) return false;
                if (!eval(this.FillColorKey3)) return false;
                if (!eval(this.FillColorKey1Scale)) return false;
                if (!eval(this.FillColorKey2Scale)) return false;
                if (!eval(this.FillColorKey3Scale)) return false;
                if (!eval(this.FillColorKey1Time)) return false;
                if (!eval(this.FillColorKey2Time)) return false;
                if (!eval(this.FillColorKey3Time)) return false;
                if (!eval(this.ColorScale)) return false;
                if (!eval(this.BirthPositionOffset)) return false;
                if (!eval(this.BirthPositionOffsetRangePlusMinus)) return false;
                if (!eval(this.ParticleAnimatedStartFrame)) return false;
                if (!eval(this.ParticleAnimatedStartFrameVariation)) return false;
                if (!eval(this.ParticleAnimatedEndFrame)) return false;
                if (!eval(this.ParticleAnimatedLoopStartFrame)) return false;
                if (!eval(this.ParticleAnimatedLoopStartVariation)) return false;
                if (!eval(this.ParticleAnimatedFrameCount)) return false;
                if (!eval(this.ParticleAnimatedFrameCountVariation)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.FillTextureScaleU)) return false;
                if (!eval(this.FillTextureScaleV)) return false;
                if (!eval(this.SceneGraphEmitDepthLimit)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.FillTexture)) return true;
                if (eval(this.ParticleShaderTexture)) return true;
                if (eval(this.HolesTexture)) return true;
                if (eval(this.MembranePaletteTexture)) return true;
                if (eval(this.ParticlePaletteTexture)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.MembraneSourceBlendMode)) return true;
                if (eval(this.MembraneBlendOperation)) return true;
                if (eval(this.MembraneZTest)) return true;
                if (eval(this.FillColorKey1)) return true;
                if (eval(this.FillAlphaFadeInTime)) return true;
                if (eval(this.FillFullAlphaTime)) return true;
                if (eval(this.FillFadeOutTime)) return true;
                if (eval(this.FillPersistentAlphaRatio)) return true;
                if (eval(this.FillAlphaPulseAmplitude)) return true;
                if (eval(this.FillAlphaPulseFrequency)) return true;
                if (eval(this.FillTextureAnimationSpeedU)) return true;
                if (eval(this.FillTextureAnimationSpeedV)) return true;
                if (eval(this.EdgeEffectFallOff)) return true;
                if (eval(this.EdgeEffectColor)) return true;
                if (eval(this.EdgeEffectAlphaFadeInTime)) return true;
                if (eval(this.EdgeEffectFullAlphaTime)) return true;
                if (eval(this.EdgeEffectAlphaFadeOutTime)) return true;
                if (eval(this.EdgeEffectPersistentAlphaRatio)) return true;
                if (eval(this.EdgeEffectAlphaPulseAmplitude)) return true;
                if (eval(this.EdgeEffectAlphaPulseFrequency)) return true;
                if (eval(this.FillFullAlphaRatio)) return true;
                if (eval(this.EdgeEffectFullAlphaRatio)) return true;
                if (eval(this.MembraneDestBlendMode)) return true;
                if (eval(this.ParticleSourceBlendMode)) return true;
                if (eval(this.ParticleBlendOperation)) return true;
                if (eval(this.ParticleZTest)) return true;
                if (eval(this.ParticleDestBlendMode)) return true;
                if (eval(this.ParticleBirthRampUpTime)) return true;
                if (eval(this.ParticleFullBirthTime)) return true;
                if (eval(this.ParticleBirthRampDownTime)) return true;
                if (eval(this.ParticleFullBirthRatio)) return true;
                if (eval(this.ParticlePeristentCount)) return true;
                if (eval(this.ParticleLifetime)) return true;
                if (eval(this.ParticleLifetimePlusMinus)) return true;
                if (eval(this.ParticleInitialSpeedAlongNormal)) return true;
                if (eval(this.ParticleAccelerationAlongNormal)) return true;
                if (eval(this.ParticleInitialVelocity1)) return true;
                if (eval(this.ParticleInitialVelocity2)) return true;
                if (eval(this.ParticleInitialVelocity3)) return true;
                if (eval(this.ParticleAcceleration1)) return true;
                if (eval(this.ParticleAcceleration2)) return true;
                if (eval(this.ParticleAcceleration3)) return true;
                if (eval(this.ParticleScaleKey1)) return true;
                if (eval(this.ParticleScaleKey2)) return true;
                if (eval(this.ParticleScaleKey1Time)) return true;
                if (eval(this.ParticleScaleKey2Time)) return true;
                if (eval(this.ColorKey1)) return true;
                if (eval(this.ColorKey2)) return true;
                if (eval(this.ColorKey3)) return true;
                if (eval(this.ColorKey1Alpha)) return true;
                if (eval(this.ColorKey2Alpha)) return true;
                if (eval(this.ColorKey3Alpha)) return true;
                if (eval(this.ColorKey1Time)) return true;
                if (eval(this.ColorKey2Time)) return true;
                if (eval(this.ColorKey3Time)) return true;
                if (eval(this.ParticleInitialSpeedAlongNormalPlusMinus)) return true;
                if (eval(this.ParticleInitialRotationDegree)) return true;
                if (eval(this.ParticleInitialRotationDegreePlusMinus)) return true;
                if (eval(this.ParticleRotationSpeedDegreePerSec)) return true;
                if (eval(this.ParticleRotationSpeedDegreePerSecPlusMinus)) return true;
                if (eval(this.AddonModels)) return true;
                if (eval(this.HolesStartTime)) return true;
                if (eval(this.HolesEndTime)) return true;
                if (eval(this.HolesStartValue)) return true;
                if (eval(this.HolesEndValue)) return true;
                if (eval(this.EdgeWidth)) return true;
                if (eval(this.EdgeColor)) return true;
                if (eval(this.ExplosionWindSpeed)) return true;
                if (eval(this.TextureCountU)) return true;
                if (eval(this.TextureCountV)) return true;
                if (eval(this.AddonModelsFadeInTime)) return true;
                if (eval(this.AddonModelsFadeOutTime)) return true;
                if (eval(this.AddonModelsScaleStart)) return true;
                if (eval(this.AddonModelsScaleEnd)) return true;
                if (eval(this.AddonModelsScaleInTime)) return true;
                if (eval(this.AddonModelsScaleOutTime)) return true;
                if (eval(this.AmbientSound)) return true;
                if (eval(this.FillColorKey2)) return true;
                if (eval(this.FillColorKey3)) return true;
                if (eval(this.FillColorKey1Scale)) return true;
                if (eval(this.FillColorKey2Scale)) return true;
                if (eval(this.FillColorKey3Scale)) return true;
                if (eval(this.FillColorKey1Time)) return true;
                if (eval(this.FillColorKey2Time)) return true;
                if (eval(this.FillColorKey3Time)) return true;
                if (eval(this.ColorScale)) return true;
                if (eval(this.BirthPositionOffset)) return true;
                if (eval(this.BirthPositionOffsetRangePlusMinus)) return true;
                if (eval(this.ParticleAnimatedStartFrame)) return true;
                if (eval(this.ParticleAnimatedStartFrameVariation)) return true;
                if (eval(this.ParticleAnimatedEndFrame)) return true;
                if (eval(this.ParticleAnimatedLoopStartFrame)) return true;
                if (eval(this.ParticleAnimatedLoopStartVariation)) return true;
                if (eval(this.ParticleAnimatedFrameCount)) return true;
                if (eval(this.ParticleAnimatedFrameCountVariation)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.FillTextureScaleU)) return true;
                if (eval(this.FillTextureScaleV)) return true;
                if (eval(this.SceneGraphEmitDepthLimit)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new EffectShader.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.FillTexture = eval(this.FillTexture);
                obj.ParticleShaderTexture = eval(this.ParticleShaderTexture);
                obj.HolesTexture = eval(this.HolesTexture);
                obj.MembranePaletteTexture = eval(this.MembranePaletteTexture);
                obj.ParticlePaletteTexture = eval(this.ParticlePaletteTexture);
                obj.Unknown = eval(this.Unknown);
                obj.MembraneSourceBlendMode = eval(this.MembraneSourceBlendMode);
                obj.MembraneBlendOperation = eval(this.MembraneBlendOperation);
                obj.MembraneZTest = eval(this.MembraneZTest);
                obj.FillColorKey1 = eval(this.FillColorKey1);
                obj.FillAlphaFadeInTime = eval(this.FillAlphaFadeInTime);
                obj.FillFullAlphaTime = eval(this.FillFullAlphaTime);
                obj.FillFadeOutTime = eval(this.FillFadeOutTime);
                obj.FillPersistentAlphaRatio = eval(this.FillPersistentAlphaRatio);
                obj.FillAlphaPulseAmplitude = eval(this.FillAlphaPulseAmplitude);
                obj.FillAlphaPulseFrequency = eval(this.FillAlphaPulseFrequency);
                obj.FillTextureAnimationSpeedU = eval(this.FillTextureAnimationSpeedU);
                obj.FillTextureAnimationSpeedV = eval(this.FillTextureAnimationSpeedV);
                obj.EdgeEffectFallOff = eval(this.EdgeEffectFallOff);
                obj.EdgeEffectColor = eval(this.EdgeEffectColor);
                obj.EdgeEffectAlphaFadeInTime = eval(this.EdgeEffectAlphaFadeInTime);
                obj.EdgeEffectFullAlphaTime = eval(this.EdgeEffectFullAlphaTime);
                obj.EdgeEffectAlphaFadeOutTime = eval(this.EdgeEffectAlphaFadeOutTime);
                obj.EdgeEffectPersistentAlphaRatio = eval(this.EdgeEffectPersistentAlphaRatio);
                obj.EdgeEffectAlphaPulseAmplitude = eval(this.EdgeEffectAlphaPulseAmplitude);
                obj.EdgeEffectAlphaPulseFrequency = eval(this.EdgeEffectAlphaPulseFrequency);
                obj.FillFullAlphaRatio = eval(this.FillFullAlphaRatio);
                obj.EdgeEffectFullAlphaRatio = eval(this.EdgeEffectFullAlphaRatio);
                obj.MembraneDestBlendMode = eval(this.MembraneDestBlendMode);
                obj.ParticleSourceBlendMode = eval(this.ParticleSourceBlendMode);
                obj.ParticleBlendOperation = eval(this.ParticleBlendOperation);
                obj.ParticleZTest = eval(this.ParticleZTest);
                obj.ParticleDestBlendMode = eval(this.ParticleDestBlendMode);
                obj.ParticleBirthRampUpTime = eval(this.ParticleBirthRampUpTime);
                obj.ParticleFullBirthTime = eval(this.ParticleFullBirthTime);
                obj.ParticleBirthRampDownTime = eval(this.ParticleBirthRampDownTime);
                obj.ParticleFullBirthRatio = eval(this.ParticleFullBirthRatio);
                obj.ParticlePeristentCount = eval(this.ParticlePeristentCount);
                obj.ParticleLifetime = eval(this.ParticleLifetime);
                obj.ParticleLifetimePlusMinus = eval(this.ParticleLifetimePlusMinus);
                obj.ParticleInitialSpeedAlongNormal = eval(this.ParticleInitialSpeedAlongNormal);
                obj.ParticleAccelerationAlongNormal = eval(this.ParticleAccelerationAlongNormal);
                obj.ParticleInitialVelocity1 = eval(this.ParticleInitialVelocity1);
                obj.ParticleInitialVelocity2 = eval(this.ParticleInitialVelocity2);
                obj.ParticleInitialVelocity3 = eval(this.ParticleInitialVelocity3);
                obj.ParticleAcceleration1 = eval(this.ParticleAcceleration1);
                obj.ParticleAcceleration2 = eval(this.ParticleAcceleration2);
                obj.ParticleAcceleration3 = eval(this.ParticleAcceleration3);
                obj.ParticleScaleKey1 = eval(this.ParticleScaleKey1);
                obj.ParticleScaleKey2 = eval(this.ParticleScaleKey2);
                obj.ParticleScaleKey1Time = eval(this.ParticleScaleKey1Time);
                obj.ParticleScaleKey2Time = eval(this.ParticleScaleKey2Time);
                obj.ColorKey1 = eval(this.ColorKey1);
                obj.ColorKey2 = eval(this.ColorKey2);
                obj.ColorKey3 = eval(this.ColorKey3);
                obj.ColorKey1Alpha = eval(this.ColorKey1Alpha);
                obj.ColorKey2Alpha = eval(this.ColorKey2Alpha);
                obj.ColorKey3Alpha = eval(this.ColorKey3Alpha);
                obj.ColorKey1Time = eval(this.ColorKey1Time);
                obj.ColorKey2Time = eval(this.ColorKey2Time);
                obj.ColorKey3Time = eval(this.ColorKey3Time);
                obj.ParticleInitialSpeedAlongNormalPlusMinus = eval(this.ParticleInitialSpeedAlongNormalPlusMinus);
                obj.ParticleInitialRotationDegree = eval(this.ParticleInitialRotationDegree);
                obj.ParticleInitialRotationDegreePlusMinus = eval(this.ParticleInitialRotationDegreePlusMinus);
                obj.ParticleRotationSpeedDegreePerSec = eval(this.ParticleRotationSpeedDegreePerSec);
                obj.ParticleRotationSpeedDegreePerSecPlusMinus = eval(this.ParticleRotationSpeedDegreePerSecPlusMinus);
                obj.AddonModels = eval(this.AddonModels);
                obj.HolesStartTime = eval(this.HolesStartTime);
                obj.HolesEndTime = eval(this.HolesEndTime);
                obj.HolesStartValue = eval(this.HolesStartValue);
                obj.HolesEndValue = eval(this.HolesEndValue);
                obj.EdgeWidth = eval(this.EdgeWidth);
                obj.EdgeColor = eval(this.EdgeColor);
                obj.ExplosionWindSpeed = eval(this.ExplosionWindSpeed);
                obj.TextureCountU = eval(this.TextureCountU);
                obj.TextureCountV = eval(this.TextureCountV);
                obj.AddonModelsFadeInTime = eval(this.AddonModelsFadeInTime);
                obj.AddonModelsFadeOutTime = eval(this.AddonModelsFadeOutTime);
                obj.AddonModelsScaleStart = eval(this.AddonModelsScaleStart);
                obj.AddonModelsScaleEnd = eval(this.AddonModelsScaleEnd);
                obj.AddonModelsScaleInTime = eval(this.AddonModelsScaleInTime);
                obj.AddonModelsScaleOutTime = eval(this.AddonModelsScaleOutTime);
                obj.AmbientSound = eval(this.AmbientSound);
                obj.FillColorKey2 = eval(this.FillColorKey2);
                obj.FillColorKey3 = eval(this.FillColorKey3);
                obj.FillColorKey1Scale = eval(this.FillColorKey1Scale);
                obj.FillColorKey2Scale = eval(this.FillColorKey2Scale);
                obj.FillColorKey3Scale = eval(this.FillColorKey3Scale);
                obj.FillColorKey1Time = eval(this.FillColorKey1Time);
                obj.FillColorKey2Time = eval(this.FillColorKey2Time);
                obj.FillColorKey3Time = eval(this.FillColorKey3Time);
                obj.ColorScale = eval(this.ColorScale);
                obj.BirthPositionOffset = eval(this.BirthPositionOffset);
                obj.BirthPositionOffsetRangePlusMinus = eval(this.BirthPositionOffsetRangePlusMinus);
                obj.ParticleAnimatedStartFrame = eval(this.ParticleAnimatedStartFrame);
                obj.ParticleAnimatedStartFrameVariation = eval(this.ParticleAnimatedStartFrameVariation);
                obj.ParticleAnimatedEndFrame = eval(this.ParticleAnimatedEndFrame);
                obj.ParticleAnimatedLoopStartFrame = eval(this.ParticleAnimatedLoopStartFrame);
                obj.ParticleAnimatedLoopStartVariation = eval(this.ParticleAnimatedLoopStartVariation);
                obj.ParticleAnimatedFrameCount = eval(this.ParticleAnimatedFrameCount);
                obj.ParticleAnimatedFrameCountVariation = eval(this.ParticleAnimatedFrameCountVariation);
                obj.Flags = eval(this.Flags);
                obj.FillTextureScaleU = eval(this.FillTextureScaleU);
                obj.FillTextureScaleV = eval(this.FillTextureScaleV);
                obj.SceneGraphEmitDepthLimit = eval(this.SceneGraphEmitDepthLimit);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(EffectShader.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, EffectShader.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(EffectShader.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.FillTexture ?? true)
                    {
                        sb.AppendItem(FillTexture, "FillTexture");
                    }
                    if (printMask?.ParticleShaderTexture ?? true)
                    {
                        sb.AppendItem(ParticleShaderTexture, "ParticleShaderTexture");
                    }
                    if (printMask?.HolesTexture ?? true)
                    {
                        sb.AppendItem(HolesTexture, "HolesTexture");
                    }
                    if (printMask?.MembranePaletteTexture ?? true)
                    {
                        sb.AppendItem(MembranePaletteTexture, "MembranePaletteTexture");
                    }
                    if (printMask?.ParticlePaletteTexture ?? true)
                    {
                        sb.AppendItem(ParticlePaletteTexture, "ParticlePaletteTexture");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.MembraneSourceBlendMode ?? true)
                    {
                        sb.AppendItem(MembraneSourceBlendMode, "MembraneSourceBlendMode");
                    }
                    if (printMask?.MembraneBlendOperation ?? true)
                    {
                        sb.AppendItem(MembraneBlendOperation, "MembraneBlendOperation");
                    }
                    if (printMask?.MembraneZTest ?? true)
                    {
                        sb.AppendItem(MembraneZTest, "MembraneZTest");
                    }
                    if (printMask?.FillColorKey1 ?? true)
                    {
                        sb.AppendItem(FillColorKey1, "FillColorKey1");
                    }
                    if (printMask?.FillAlphaFadeInTime ?? true)
                    {
                        sb.AppendItem(FillAlphaFadeInTime, "FillAlphaFadeInTime");
                    }
                    if (printMask?.FillFullAlphaTime ?? true)
                    {
                        sb.AppendItem(FillFullAlphaTime, "FillFullAlphaTime");
                    }
                    if (printMask?.FillFadeOutTime ?? true)
                    {
                        sb.AppendItem(FillFadeOutTime, "FillFadeOutTime");
                    }
                    if (printMask?.FillPersistentAlphaRatio ?? true)
                    {
                        sb.AppendItem(FillPersistentAlphaRatio, "FillPersistentAlphaRatio");
                    }
                    if (printMask?.FillAlphaPulseAmplitude ?? true)
                    {
                        sb.AppendItem(FillAlphaPulseAmplitude, "FillAlphaPulseAmplitude");
                    }
                    if (printMask?.FillAlphaPulseFrequency ?? true)
                    {
                        sb.AppendItem(FillAlphaPulseFrequency, "FillAlphaPulseFrequency");
                    }
                    if (printMask?.FillTextureAnimationSpeedU ?? true)
                    {
                        sb.AppendItem(FillTextureAnimationSpeedU, "FillTextureAnimationSpeedU");
                    }
                    if (printMask?.FillTextureAnimationSpeedV ?? true)
                    {
                        sb.AppendItem(FillTextureAnimationSpeedV, "FillTextureAnimationSpeedV");
                    }
                    if (printMask?.EdgeEffectFallOff ?? true)
                    {
                        sb.AppendItem(EdgeEffectFallOff, "EdgeEffectFallOff");
                    }
                    if (printMask?.EdgeEffectColor ?? true)
                    {
                        sb.AppendItem(EdgeEffectColor, "EdgeEffectColor");
                    }
                    if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
                    }
                    if (printMask?.EdgeEffectFullAlphaTime ?? true)
                    {
                        sb.AppendItem(EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
                    }
                    if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
                    }
                    if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
                    {
                        sb.AppendItem(EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
                    }
                    if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
                    }
                    if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
                    {
                        sb.AppendItem(EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
                    }
                    if (printMask?.FillFullAlphaRatio ?? true)
                    {
                        sb.AppendItem(FillFullAlphaRatio, "FillFullAlphaRatio");
                    }
                    if (printMask?.EdgeEffectFullAlphaRatio ?? true)
                    {
                        sb.AppendItem(EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
                    }
                    if (printMask?.MembraneDestBlendMode ?? true)
                    {
                        sb.AppendItem(MembraneDestBlendMode, "MembraneDestBlendMode");
                    }
                    if (printMask?.ParticleSourceBlendMode ?? true)
                    {
                        sb.AppendItem(ParticleSourceBlendMode, "ParticleSourceBlendMode");
                    }
                    if (printMask?.ParticleBlendOperation ?? true)
                    {
                        sb.AppendItem(ParticleBlendOperation, "ParticleBlendOperation");
                    }
                    if (printMask?.ParticleZTest ?? true)
                    {
                        sb.AppendItem(ParticleZTest, "ParticleZTest");
                    }
                    if (printMask?.ParticleDestBlendMode ?? true)
                    {
                        sb.AppendItem(ParticleDestBlendMode, "ParticleDestBlendMode");
                    }
                    if (printMask?.ParticleBirthRampUpTime ?? true)
                    {
                        sb.AppendItem(ParticleBirthRampUpTime, "ParticleBirthRampUpTime");
                    }
                    if (printMask?.ParticleFullBirthTime ?? true)
                    {
                        sb.AppendItem(ParticleFullBirthTime, "ParticleFullBirthTime");
                    }
                    if (printMask?.ParticleBirthRampDownTime ?? true)
                    {
                        sb.AppendItem(ParticleBirthRampDownTime, "ParticleBirthRampDownTime");
                    }
                    if (printMask?.ParticleFullBirthRatio ?? true)
                    {
                        sb.AppendItem(ParticleFullBirthRatio, "ParticleFullBirthRatio");
                    }
                    if (printMask?.ParticlePeristentCount ?? true)
                    {
                        sb.AppendItem(ParticlePeristentCount, "ParticlePeristentCount");
                    }
                    if (printMask?.ParticleLifetime ?? true)
                    {
                        sb.AppendItem(ParticleLifetime, "ParticleLifetime");
                    }
                    if (printMask?.ParticleLifetimePlusMinus ?? true)
                    {
                        sb.AppendItem(ParticleLifetimePlusMinus, "ParticleLifetimePlusMinus");
                    }
                    if (printMask?.ParticleInitialSpeedAlongNormal ?? true)
                    {
                        sb.AppendItem(ParticleInitialSpeedAlongNormal, "ParticleInitialSpeedAlongNormal");
                    }
                    if (printMask?.ParticleAccelerationAlongNormal ?? true)
                    {
                        sb.AppendItem(ParticleAccelerationAlongNormal, "ParticleAccelerationAlongNormal");
                    }
                    if (printMask?.ParticleInitialVelocity1 ?? true)
                    {
                        sb.AppendItem(ParticleInitialVelocity1, "ParticleInitialVelocity1");
                    }
                    if (printMask?.ParticleInitialVelocity2 ?? true)
                    {
                        sb.AppendItem(ParticleInitialVelocity2, "ParticleInitialVelocity2");
                    }
                    if (printMask?.ParticleInitialVelocity3 ?? true)
                    {
                        sb.AppendItem(ParticleInitialVelocity3, "ParticleInitialVelocity3");
                    }
                    if (printMask?.ParticleAcceleration1 ?? true)
                    {
                        sb.AppendItem(ParticleAcceleration1, "ParticleAcceleration1");
                    }
                    if (printMask?.ParticleAcceleration2 ?? true)
                    {
                        sb.AppendItem(ParticleAcceleration2, "ParticleAcceleration2");
                    }
                    if (printMask?.ParticleAcceleration3 ?? true)
                    {
                        sb.AppendItem(ParticleAcceleration3, "ParticleAcceleration3");
                    }
                    if (printMask?.ParticleScaleKey1 ?? true)
                    {
                        sb.AppendItem(ParticleScaleKey1, "ParticleScaleKey1");
                    }
                    if (printMask?.ParticleScaleKey2 ?? true)
                    {
                        sb.AppendItem(ParticleScaleKey2, "ParticleScaleKey2");
                    }
                    if (printMask?.ParticleScaleKey1Time ?? true)
                    {
                        sb.AppendItem(ParticleScaleKey1Time, "ParticleScaleKey1Time");
                    }
                    if (printMask?.ParticleScaleKey2Time ?? true)
                    {
                        sb.AppendItem(ParticleScaleKey2Time, "ParticleScaleKey2Time");
                    }
                    if (printMask?.ColorKey1 ?? true)
                    {
                        sb.AppendItem(ColorKey1, "ColorKey1");
                    }
                    if (printMask?.ColorKey2 ?? true)
                    {
                        sb.AppendItem(ColorKey2, "ColorKey2");
                    }
                    if (printMask?.ColorKey3 ?? true)
                    {
                        sb.AppendItem(ColorKey3, "ColorKey3");
                    }
                    if (printMask?.ColorKey1Alpha ?? true)
                    {
                        sb.AppendItem(ColorKey1Alpha, "ColorKey1Alpha");
                    }
                    if (printMask?.ColorKey2Alpha ?? true)
                    {
                        sb.AppendItem(ColorKey2Alpha, "ColorKey2Alpha");
                    }
                    if (printMask?.ColorKey3Alpha ?? true)
                    {
                        sb.AppendItem(ColorKey3Alpha, "ColorKey3Alpha");
                    }
                    if (printMask?.ColorKey1Time ?? true)
                    {
                        sb.AppendItem(ColorKey1Time, "ColorKey1Time");
                    }
                    if (printMask?.ColorKey2Time ?? true)
                    {
                        sb.AppendItem(ColorKey2Time, "ColorKey2Time");
                    }
                    if (printMask?.ColorKey3Time ?? true)
                    {
                        sb.AppendItem(ColorKey3Time, "ColorKey3Time");
                    }
                    if (printMask?.ParticleInitialSpeedAlongNormalPlusMinus ?? true)
                    {
                        sb.AppendItem(ParticleInitialSpeedAlongNormalPlusMinus, "ParticleInitialSpeedAlongNormalPlusMinus");
                    }
                    if (printMask?.ParticleInitialRotationDegree ?? true)
                    {
                        sb.AppendItem(ParticleInitialRotationDegree, "ParticleInitialRotationDegree");
                    }
                    if (printMask?.ParticleInitialRotationDegreePlusMinus ?? true)
                    {
                        sb.AppendItem(ParticleInitialRotationDegreePlusMinus, "ParticleInitialRotationDegreePlusMinus");
                    }
                    if (printMask?.ParticleRotationSpeedDegreePerSec ?? true)
                    {
                        sb.AppendItem(ParticleRotationSpeedDegreePerSec, "ParticleRotationSpeedDegreePerSec");
                    }
                    if (printMask?.ParticleRotationSpeedDegreePerSecPlusMinus ?? true)
                    {
                        sb.AppendItem(ParticleRotationSpeedDegreePerSecPlusMinus, "ParticleRotationSpeedDegreePerSecPlusMinus");
                    }
                    if (printMask?.AddonModels ?? true)
                    {
                        sb.AppendItem(AddonModels, "AddonModels");
                    }
                    if (printMask?.HolesStartTime ?? true)
                    {
                        sb.AppendItem(HolesStartTime, "HolesStartTime");
                    }
                    if (printMask?.HolesEndTime ?? true)
                    {
                        sb.AppendItem(HolesEndTime, "HolesEndTime");
                    }
                    if (printMask?.HolesStartValue ?? true)
                    {
                        sb.AppendItem(HolesStartValue, "HolesStartValue");
                    }
                    if (printMask?.HolesEndValue ?? true)
                    {
                        sb.AppendItem(HolesEndValue, "HolesEndValue");
                    }
                    if (printMask?.EdgeWidth ?? true)
                    {
                        sb.AppendItem(EdgeWidth, "EdgeWidth");
                    }
                    if (printMask?.EdgeColor ?? true)
                    {
                        sb.AppendItem(EdgeColor, "EdgeColor");
                    }
                    if (printMask?.ExplosionWindSpeed ?? true)
                    {
                        sb.AppendItem(ExplosionWindSpeed, "ExplosionWindSpeed");
                    }
                    if (printMask?.TextureCountU ?? true)
                    {
                        sb.AppendItem(TextureCountU, "TextureCountU");
                    }
                    if (printMask?.TextureCountV ?? true)
                    {
                        sb.AppendItem(TextureCountV, "TextureCountV");
                    }
                    if (printMask?.AddonModelsFadeInTime ?? true)
                    {
                        sb.AppendItem(AddonModelsFadeInTime, "AddonModelsFadeInTime");
                    }
                    if (printMask?.AddonModelsFadeOutTime ?? true)
                    {
                        sb.AppendItem(AddonModelsFadeOutTime, "AddonModelsFadeOutTime");
                    }
                    if (printMask?.AddonModelsScaleStart ?? true)
                    {
                        sb.AppendItem(AddonModelsScaleStart, "AddonModelsScaleStart");
                    }
                    if (printMask?.AddonModelsScaleEnd ?? true)
                    {
                        sb.AppendItem(AddonModelsScaleEnd, "AddonModelsScaleEnd");
                    }
                    if (printMask?.AddonModelsScaleInTime ?? true)
                    {
                        sb.AppendItem(AddonModelsScaleInTime, "AddonModelsScaleInTime");
                    }
                    if (printMask?.AddonModelsScaleOutTime ?? true)
                    {
                        sb.AppendItem(AddonModelsScaleOutTime, "AddonModelsScaleOutTime");
                    }
                    if (printMask?.AmbientSound ?? true)
                    {
                        sb.AppendItem(AmbientSound, "AmbientSound");
                    }
                    if (printMask?.FillColorKey2 ?? true)
                    {
                        sb.AppendItem(FillColorKey2, "FillColorKey2");
                    }
                    if (printMask?.FillColorKey3 ?? true)
                    {
                        sb.AppendItem(FillColorKey3, "FillColorKey3");
                    }
                    if (printMask?.FillColorKey1Scale ?? true)
                    {
                        sb.AppendItem(FillColorKey1Scale, "FillColorKey1Scale");
                    }
                    if (printMask?.FillColorKey2Scale ?? true)
                    {
                        sb.AppendItem(FillColorKey2Scale, "FillColorKey2Scale");
                    }
                    if (printMask?.FillColorKey3Scale ?? true)
                    {
                        sb.AppendItem(FillColorKey3Scale, "FillColorKey3Scale");
                    }
                    if (printMask?.FillColorKey1Time ?? true)
                    {
                        sb.AppendItem(FillColorKey1Time, "FillColorKey1Time");
                    }
                    if (printMask?.FillColorKey2Time ?? true)
                    {
                        sb.AppendItem(FillColorKey2Time, "FillColorKey2Time");
                    }
                    if (printMask?.FillColorKey3Time ?? true)
                    {
                        sb.AppendItem(FillColorKey3Time, "FillColorKey3Time");
                    }
                    if (printMask?.ColorScale ?? true)
                    {
                        sb.AppendItem(ColorScale, "ColorScale");
                    }
                    if (printMask?.BirthPositionOffset ?? true)
                    {
                        sb.AppendItem(BirthPositionOffset, "BirthPositionOffset");
                    }
                    if (printMask?.BirthPositionOffsetRangePlusMinus ?? true)
                    {
                        sb.AppendItem(BirthPositionOffsetRangePlusMinus, "BirthPositionOffsetRangePlusMinus");
                    }
                    if (printMask?.ParticleAnimatedStartFrame ?? true)
                    {
                        sb.AppendItem(ParticleAnimatedStartFrame, "ParticleAnimatedStartFrame");
                    }
                    if (printMask?.ParticleAnimatedStartFrameVariation ?? true)
                    {
                        sb.AppendItem(ParticleAnimatedStartFrameVariation, "ParticleAnimatedStartFrameVariation");
                    }
                    if (printMask?.ParticleAnimatedEndFrame ?? true)
                    {
                        sb.AppendItem(ParticleAnimatedEndFrame, "ParticleAnimatedEndFrame");
                    }
                    if (printMask?.ParticleAnimatedLoopStartFrame ?? true)
                    {
                        sb.AppendItem(ParticleAnimatedLoopStartFrame, "ParticleAnimatedLoopStartFrame");
                    }
                    if (printMask?.ParticleAnimatedLoopStartVariation ?? true)
                    {
                        sb.AppendItem(ParticleAnimatedLoopStartVariation, "ParticleAnimatedLoopStartVariation");
                    }
                    if (printMask?.ParticleAnimatedFrameCount ?? true)
                    {
                        sb.AppendItem(ParticleAnimatedFrameCount, "ParticleAnimatedFrameCount");
                    }
                    if (printMask?.ParticleAnimatedFrameCountVariation ?? true)
                    {
                        sb.AppendItem(ParticleAnimatedFrameCountVariation, "ParticleAnimatedFrameCountVariation");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.FillTextureScaleU ?? true)
                    {
                        sb.AppendItem(FillTextureScaleU, "FillTextureScaleU");
                    }
                    if (printMask?.FillTextureScaleV ?? true)
                    {
                        sb.AppendItem(FillTextureScaleV, "FillTextureScaleV");
                    }
                    if (printMask?.SceneGraphEmitDepthLimit ?? true)
                    {
                        sb.AppendItem(SceneGraphEmitDepthLimit, "SceneGraphEmitDepthLimit");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? FillTexture;
            public Exception? ParticleShaderTexture;
            public Exception? HolesTexture;
            public Exception? MembranePaletteTexture;
            public Exception? ParticlePaletteTexture;
            public Exception? Unknown;
            public Exception? MembraneSourceBlendMode;
            public Exception? MembraneBlendOperation;
            public Exception? MembraneZTest;
            public Exception? FillColorKey1;
            public Exception? FillAlphaFadeInTime;
            public Exception? FillFullAlphaTime;
            public Exception? FillFadeOutTime;
            public Exception? FillPersistentAlphaRatio;
            public Exception? FillAlphaPulseAmplitude;
            public Exception? FillAlphaPulseFrequency;
            public Exception? FillTextureAnimationSpeedU;
            public Exception? FillTextureAnimationSpeedV;
            public Exception? EdgeEffectFallOff;
            public Exception? EdgeEffectColor;
            public Exception? EdgeEffectAlphaFadeInTime;
            public Exception? EdgeEffectFullAlphaTime;
            public Exception? EdgeEffectAlphaFadeOutTime;
            public Exception? EdgeEffectPersistentAlphaRatio;
            public Exception? EdgeEffectAlphaPulseAmplitude;
            public Exception? EdgeEffectAlphaPulseFrequency;
            public Exception? FillFullAlphaRatio;
            public Exception? EdgeEffectFullAlphaRatio;
            public Exception? MembraneDestBlendMode;
            public Exception? ParticleSourceBlendMode;
            public Exception? ParticleBlendOperation;
            public Exception? ParticleZTest;
            public Exception? ParticleDestBlendMode;
            public Exception? ParticleBirthRampUpTime;
            public Exception? ParticleFullBirthTime;
            public Exception? ParticleBirthRampDownTime;
            public Exception? ParticleFullBirthRatio;
            public Exception? ParticlePeristentCount;
            public Exception? ParticleLifetime;
            public Exception? ParticleLifetimePlusMinus;
            public Exception? ParticleInitialSpeedAlongNormal;
            public Exception? ParticleAccelerationAlongNormal;
            public Exception? ParticleInitialVelocity1;
            public Exception? ParticleInitialVelocity2;
            public Exception? ParticleInitialVelocity3;
            public Exception? ParticleAcceleration1;
            public Exception? ParticleAcceleration2;
            public Exception? ParticleAcceleration3;
            public Exception? ParticleScaleKey1;
            public Exception? ParticleScaleKey2;
            public Exception? ParticleScaleKey1Time;
            public Exception? ParticleScaleKey2Time;
            public Exception? ColorKey1;
            public Exception? ColorKey2;
            public Exception? ColorKey3;
            public Exception? ColorKey1Alpha;
            public Exception? ColorKey2Alpha;
            public Exception? ColorKey3Alpha;
            public Exception? ColorKey1Time;
            public Exception? ColorKey2Time;
            public Exception? ColorKey3Time;
            public Exception? ParticleInitialSpeedAlongNormalPlusMinus;
            public Exception? ParticleInitialRotationDegree;
            public Exception? ParticleInitialRotationDegreePlusMinus;
            public Exception? ParticleRotationSpeedDegreePerSec;
            public Exception? ParticleRotationSpeedDegreePerSecPlusMinus;
            public Exception? AddonModels;
            public Exception? HolesStartTime;
            public Exception? HolesEndTime;
            public Exception? HolesStartValue;
            public Exception? HolesEndValue;
            public Exception? EdgeWidth;
            public Exception? EdgeColor;
            public Exception? ExplosionWindSpeed;
            public Exception? TextureCountU;
            public Exception? TextureCountV;
            public Exception? AddonModelsFadeInTime;
            public Exception? AddonModelsFadeOutTime;
            public Exception? AddonModelsScaleStart;
            public Exception? AddonModelsScaleEnd;
            public Exception? AddonModelsScaleInTime;
            public Exception? AddonModelsScaleOutTime;
            public Exception? AmbientSound;
            public Exception? FillColorKey2;
            public Exception? FillColorKey3;
            public Exception? FillColorKey1Scale;
            public Exception? FillColorKey2Scale;
            public Exception? FillColorKey3Scale;
            public Exception? FillColorKey1Time;
            public Exception? FillColorKey2Time;
            public Exception? FillColorKey3Time;
            public Exception? ColorScale;
            public Exception? BirthPositionOffset;
            public Exception? BirthPositionOffsetRangePlusMinus;
            public Exception? ParticleAnimatedStartFrame;
            public Exception? ParticleAnimatedStartFrameVariation;
            public Exception? ParticleAnimatedEndFrame;
            public Exception? ParticleAnimatedLoopStartFrame;
            public Exception? ParticleAnimatedLoopStartVariation;
            public Exception? ParticleAnimatedFrameCount;
            public Exception? ParticleAnimatedFrameCountVariation;
            public Exception? Flags;
            public Exception? FillTextureScaleU;
            public Exception? FillTextureScaleV;
            public Exception? SceneGraphEmitDepthLimit;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.FillTexture:
                        return FillTexture;
                    case EffectShader_FieldIndex.ParticleShaderTexture:
                        return ParticleShaderTexture;
                    case EffectShader_FieldIndex.HolesTexture:
                        return HolesTexture;
                    case EffectShader_FieldIndex.MembranePaletteTexture:
                        return MembranePaletteTexture;
                    case EffectShader_FieldIndex.ParticlePaletteTexture:
                        return ParticlePaletteTexture;
                    case EffectShader_FieldIndex.Unknown:
                        return Unknown;
                    case EffectShader_FieldIndex.MembraneSourceBlendMode:
                        return MembraneSourceBlendMode;
                    case EffectShader_FieldIndex.MembraneBlendOperation:
                        return MembraneBlendOperation;
                    case EffectShader_FieldIndex.MembraneZTest:
                        return MembraneZTest;
                    case EffectShader_FieldIndex.FillColorKey1:
                        return FillColorKey1;
                    case EffectShader_FieldIndex.FillAlphaFadeInTime:
                        return FillAlphaFadeInTime;
                    case EffectShader_FieldIndex.FillFullAlphaTime:
                        return FillFullAlphaTime;
                    case EffectShader_FieldIndex.FillFadeOutTime:
                        return FillFadeOutTime;
                    case EffectShader_FieldIndex.FillPersistentAlphaRatio:
                        return FillPersistentAlphaRatio;
                    case EffectShader_FieldIndex.FillAlphaPulseAmplitude:
                        return FillAlphaPulseAmplitude;
                    case EffectShader_FieldIndex.FillAlphaPulseFrequency:
                        return FillAlphaPulseFrequency;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedU:
                        return FillTextureAnimationSpeedU;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedV:
                        return FillTextureAnimationSpeedV;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        return EdgeEffectFallOff;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        return EdgeEffectColor;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        return EdgeEffectAlphaFadeInTime;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        return EdgeEffectFullAlphaTime;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        return EdgeEffectAlphaFadeOutTime;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        return EdgeEffectPersistentAlphaRatio;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        return EdgeEffectAlphaPulseAmplitude;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        return EdgeEffectAlphaPulseFrequency;
                    case EffectShader_FieldIndex.FillFullAlphaRatio:
                        return FillFullAlphaRatio;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        return EdgeEffectFullAlphaRatio;
                    case EffectShader_FieldIndex.MembraneDestBlendMode:
                        return MembraneDestBlendMode;
                    case EffectShader_FieldIndex.ParticleSourceBlendMode:
                        return ParticleSourceBlendMode;
                    case EffectShader_FieldIndex.ParticleBlendOperation:
                        return ParticleBlendOperation;
                    case EffectShader_FieldIndex.ParticleZTest:
                        return ParticleZTest;
                    case EffectShader_FieldIndex.ParticleDestBlendMode:
                        return ParticleDestBlendMode;
                    case EffectShader_FieldIndex.ParticleBirthRampUpTime:
                        return ParticleBirthRampUpTime;
                    case EffectShader_FieldIndex.ParticleFullBirthTime:
                        return ParticleFullBirthTime;
                    case EffectShader_FieldIndex.ParticleBirthRampDownTime:
                        return ParticleBirthRampDownTime;
                    case EffectShader_FieldIndex.ParticleFullBirthRatio:
                        return ParticleFullBirthRatio;
                    case EffectShader_FieldIndex.ParticlePeristentCount:
                        return ParticlePeristentCount;
                    case EffectShader_FieldIndex.ParticleLifetime:
                        return ParticleLifetime;
                    case EffectShader_FieldIndex.ParticleLifetimePlusMinus:
                        return ParticleLifetimePlusMinus;
                    case EffectShader_FieldIndex.ParticleInitialSpeedAlongNormal:
                        return ParticleInitialSpeedAlongNormal;
                    case EffectShader_FieldIndex.ParticleAccelerationAlongNormal:
                        return ParticleAccelerationAlongNormal;
                    case EffectShader_FieldIndex.ParticleInitialVelocity1:
                        return ParticleInitialVelocity1;
                    case EffectShader_FieldIndex.ParticleInitialVelocity2:
                        return ParticleInitialVelocity2;
                    case EffectShader_FieldIndex.ParticleInitialVelocity3:
                        return ParticleInitialVelocity3;
                    case EffectShader_FieldIndex.ParticleAcceleration1:
                        return ParticleAcceleration1;
                    case EffectShader_FieldIndex.ParticleAcceleration2:
                        return ParticleAcceleration2;
                    case EffectShader_FieldIndex.ParticleAcceleration3:
                        return ParticleAcceleration3;
                    case EffectShader_FieldIndex.ParticleScaleKey1:
                        return ParticleScaleKey1;
                    case EffectShader_FieldIndex.ParticleScaleKey2:
                        return ParticleScaleKey2;
                    case EffectShader_FieldIndex.ParticleScaleKey1Time:
                        return ParticleScaleKey1Time;
                    case EffectShader_FieldIndex.ParticleScaleKey2Time:
                        return ParticleScaleKey2Time;
                    case EffectShader_FieldIndex.ColorKey1:
                        return ColorKey1;
                    case EffectShader_FieldIndex.ColorKey2:
                        return ColorKey2;
                    case EffectShader_FieldIndex.ColorKey3:
                        return ColorKey3;
                    case EffectShader_FieldIndex.ColorKey1Alpha:
                        return ColorKey1Alpha;
                    case EffectShader_FieldIndex.ColorKey2Alpha:
                        return ColorKey2Alpha;
                    case EffectShader_FieldIndex.ColorKey3Alpha:
                        return ColorKey3Alpha;
                    case EffectShader_FieldIndex.ColorKey1Time:
                        return ColorKey1Time;
                    case EffectShader_FieldIndex.ColorKey2Time:
                        return ColorKey2Time;
                    case EffectShader_FieldIndex.ColorKey3Time:
                        return ColorKey3Time;
                    case EffectShader_FieldIndex.ParticleInitialSpeedAlongNormalPlusMinus:
                        return ParticleInitialSpeedAlongNormalPlusMinus;
                    case EffectShader_FieldIndex.ParticleInitialRotationDegree:
                        return ParticleInitialRotationDegree;
                    case EffectShader_FieldIndex.ParticleInitialRotationDegreePlusMinus:
                        return ParticleInitialRotationDegreePlusMinus;
                    case EffectShader_FieldIndex.ParticleRotationSpeedDegreePerSec:
                        return ParticleRotationSpeedDegreePerSec;
                    case EffectShader_FieldIndex.ParticleRotationSpeedDegreePerSecPlusMinus:
                        return ParticleRotationSpeedDegreePerSecPlusMinus;
                    case EffectShader_FieldIndex.AddonModels:
                        return AddonModels;
                    case EffectShader_FieldIndex.HolesStartTime:
                        return HolesStartTime;
                    case EffectShader_FieldIndex.HolesEndTime:
                        return HolesEndTime;
                    case EffectShader_FieldIndex.HolesStartValue:
                        return HolesStartValue;
                    case EffectShader_FieldIndex.HolesEndValue:
                        return HolesEndValue;
                    case EffectShader_FieldIndex.EdgeWidth:
                        return EdgeWidth;
                    case EffectShader_FieldIndex.EdgeColor:
                        return EdgeColor;
                    case EffectShader_FieldIndex.ExplosionWindSpeed:
                        return ExplosionWindSpeed;
                    case EffectShader_FieldIndex.TextureCountU:
                        return TextureCountU;
                    case EffectShader_FieldIndex.TextureCountV:
                        return TextureCountV;
                    case EffectShader_FieldIndex.AddonModelsFadeInTime:
                        return AddonModelsFadeInTime;
                    case EffectShader_FieldIndex.AddonModelsFadeOutTime:
                        return AddonModelsFadeOutTime;
                    case EffectShader_FieldIndex.AddonModelsScaleStart:
                        return AddonModelsScaleStart;
                    case EffectShader_FieldIndex.AddonModelsScaleEnd:
                        return AddonModelsScaleEnd;
                    case EffectShader_FieldIndex.AddonModelsScaleInTime:
                        return AddonModelsScaleInTime;
                    case EffectShader_FieldIndex.AddonModelsScaleOutTime:
                        return AddonModelsScaleOutTime;
                    case EffectShader_FieldIndex.AmbientSound:
                        return AmbientSound;
                    case EffectShader_FieldIndex.FillColorKey2:
                        return FillColorKey2;
                    case EffectShader_FieldIndex.FillColorKey3:
                        return FillColorKey3;
                    case EffectShader_FieldIndex.FillColorKey1Scale:
                        return FillColorKey1Scale;
                    case EffectShader_FieldIndex.FillColorKey2Scale:
                        return FillColorKey2Scale;
                    case EffectShader_FieldIndex.FillColorKey3Scale:
                        return FillColorKey3Scale;
                    case EffectShader_FieldIndex.FillColorKey1Time:
                        return FillColorKey1Time;
                    case EffectShader_FieldIndex.FillColorKey2Time:
                        return FillColorKey2Time;
                    case EffectShader_FieldIndex.FillColorKey3Time:
                        return FillColorKey3Time;
                    case EffectShader_FieldIndex.ColorScale:
                        return ColorScale;
                    case EffectShader_FieldIndex.BirthPositionOffset:
                        return BirthPositionOffset;
                    case EffectShader_FieldIndex.BirthPositionOffsetRangePlusMinus:
                        return BirthPositionOffsetRangePlusMinus;
                    case EffectShader_FieldIndex.ParticleAnimatedStartFrame:
                        return ParticleAnimatedStartFrame;
                    case EffectShader_FieldIndex.ParticleAnimatedStartFrameVariation:
                        return ParticleAnimatedStartFrameVariation;
                    case EffectShader_FieldIndex.ParticleAnimatedEndFrame:
                        return ParticleAnimatedEndFrame;
                    case EffectShader_FieldIndex.ParticleAnimatedLoopStartFrame:
                        return ParticleAnimatedLoopStartFrame;
                    case EffectShader_FieldIndex.ParticleAnimatedLoopStartVariation:
                        return ParticleAnimatedLoopStartVariation;
                    case EffectShader_FieldIndex.ParticleAnimatedFrameCount:
                        return ParticleAnimatedFrameCount;
                    case EffectShader_FieldIndex.ParticleAnimatedFrameCountVariation:
                        return ParticleAnimatedFrameCountVariation;
                    case EffectShader_FieldIndex.Flags:
                        return Flags;
                    case EffectShader_FieldIndex.FillTextureScaleU:
                        return FillTextureScaleU;
                    case EffectShader_FieldIndex.FillTextureScaleV:
                        return FillTextureScaleV;
                    case EffectShader_FieldIndex.SceneGraphEmitDepthLimit:
                        return SceneGraphEmitDepthLimit;
                    case EffectShader_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.FillTexture:
                        this.FillTexture = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderTexture:
                        this.ParticleShaderTexture = ex;
                        break;
                    case EffectShader_FieldIndex.HolesTexture:
                        this.HolesTexture = ex;
                        break;
                    case EffectShader_FieldIndex.MembranePaletteTexture:
                        this.MembranePaletteTexture = ex;
                        break;
                    case EffectShader_FieldIndex.ParticlePaletteTexture:
                        this.ParticlePaletteTexture = ex;
                        break;
                    case EffectShader_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneSourceBlendMode:
                        this.MembraneSourceBlendMode = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneBlendOperation:
                        this.MembraneBlendOperation = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneZTest:
                        this.MembraneZTest = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1:
                        this.FillColorKey1 = ex;
                        break;
                    case EffectShader_FieldIndex.FillAlphaFadeInTime:
                        this.FillAlphaFadeInTime = ex;
                        break;
                    case EffectShader_FieldIndex.FillFullAlphaTime:
                        this.FillFullAlphaTime = ex;
                        break;
                    case EffectShader_FieldIndex.FillFadeOutTime:
                        this.FillFadeOutTime = ex;
                        break;
                    case EffectShader_FieldIndex.FillPersistentAlphaRatio:
                        this.FillPersistentAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.FillAlphaPulseAmplitude:
                        this.FillAlphaPulseAmplitude = ex;
                        break;
                    case EffectShader_FieldIndex.FillAlphaPulseFrequency:
                        this.FillAlphaPulseFrequency = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedU:
                        this.FillTextureAnimationSpeedU = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedV:
                        this.FillTextureAnimationSpeedV = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        this.EdgeEffectFallOff = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        this.EdgeEffectColor = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        this.EdgeEffectAlphaFadeInTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        this.EdgeEffectFullAlphaTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        this.EdgeEffectAlphaFadeOutTime = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        this.EdgeEffectPersistentAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        this.EdgeEffectAlphaPulseAmplitude = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        this.EdgeEffectAlphaPulseFrequency = ex;
                        break;
                    case EffectShader_FieldIndex.FillFullAlphaRatio:
                        this.FillFullAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        this.EdgeEffectFullAlphaRatio = ex;
                        break;
                    case EffectShader_FieldIndex.MembraneDestBlendMode:
                        this.MembraneDestBlendMode = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleSourceBlendMode:
                        this.ParticleSourceBlendMode = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleBlendOperation:
                        this.ParticleBlendOperation = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleZTest:
                        this.ParticleZTest = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleDestBlendMode:
                        this.ParticleDestBlendMode = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleBirthRampUpTime:
                        this.ParticleBirthRampUpTime = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleFullBirthTime:
                        this.ParticleFullBirthTime = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleBirthRampDownTime:
                        this.ParticleBirthRampDownTime = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleFullBirthRatio:
                        this.ParticleFullBirthRatio = ex;
                        break;
                    case EffectShader_FieldIndex.ParticlePeristentCount:
                        this.ParticlePeristentCount = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleLifetime:
                        this.ParticleLifetime = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleLifetimePlusMinus:
                        this.ParticleLifetimePlusMinus = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialSpeedAlongNormal:
                        this.ParticleInitialSpeedAlongNormal = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAccelerationAlongNormal:
                        this.ParticleAccelerationAlongNormal = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialVelocity1:
                        this.ParticleInitialVelocity1 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialVelocity2:
                        this.ParticleInitialVelocity2 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialVelocity3:
                        this.ParticleInitialVelocity3 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAcceleration1:
                        this.ParticleAcceleration1 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAcceleration2:
                        this.ParticleAcceleration2 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAcceleration3:
                        this.ParticleAcceleration3 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleScaleKey1:
                        this.ParticleScaleKey1 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleScaleKey2:
                        this.ParticleScaleKey2 = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleScaleKey1Time:
                        this.ParticleScaleKey1Time = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleScaleKey2Time:
                        this.ParticleScaleKey2Time = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey1:
                        this.ColorKey1 = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey2:
                        this.ColorKey2 = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey3:
                        this.ColorKey3 = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey1Alpha:
                        this.ColorKey1Alpha = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey2Alpha:
                        this.ColorKey2Alpha = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey3Alpha:
                        this.ColorKey3Alpha = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey1Time:
                        this.ColorKey1Time = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey2Time:
                        this.ColorKey2Time = ex;
                        break;
                    case EffectShader_FieldIndex.ColorKey3Time:
                        this.ColorKey3Time = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialSpeedAlongNormalPlusMinus:
                        this.ParticleInitialSpeedAlongNormalPlusMinus = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialRotationDegree:
                        this.ParticleInitialRotationDegree = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialRotationDegreePlusMinus:
                        this.ParticleInitialRotationDegreePlusMinus = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleRotationSpeedDegreePerSec:
                        this.ParticleRotationSpeedDegreePerSec = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleRotationSpeedDegreePerSecPlusMinus:
                        this.ParticleRotationSpeedDegreePerSecPlusMinus = ex;
                        break;
                    case EffectShader_FieldIndex.AddonModels:
                        this.AddonModels = ex;
                        break;
                    case EffectShader_FieldIndex.HolesStartTime:
                        this.HolesStartTime = ex;
                        break;
                    case EffectShader_FieldIndex.HolesEndTime:
                        this.HolesEndTime = ex;
                        break;
                    case EffectShader_FieldIndex.HolesStartValue:
                        this.HolesStartValue = ex;
                        break;
                    case EffectShader_FieldIndex.HolesEndValue:
                        this.HolesEndValue = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeWidth:
                        this.EdgeWidth = ex;
                        break;
                    case EffectShader_FieldIndex.EdgeColor:
                        this.EdgeColor = ex;
                        break;
                    case EffectShader_FieldIndex.ExplosionWindSpeed:
                        this.ExplosionWindSpeed = ex;
                        break;
                    case EffectShader_FieldIndex.TextureCountU:
                        this.TextureCountU = ex;
                        break;
                    case EffectShader_FieldIndex.TextureCountV:
                        this.TextureCountV = ex;
                        break;
                    case EffectShader_FieldIndex.AddonModelsFadeInTime:
                        this.AddonModelsFadeInTime = ex;
                        break;
                    case EffectShader_FieldIndex.AddonModelsFadeOutTime:
                        this.AddonModelsFadeOutTime = ex;
                        break;
                    case EffectShader_FieldIndex.AddonModelsScaleStart:
                        this.AddonModelsScaleStart = ex;
                        break;
                    case EffectShader_FieldIndex.AddonModelsScaleEnd:
                        this.AddonModelsScaleEnd = ex;
                        break;
                    case EffectShader_FieldIndex.AddonModelsScaleInTime:
                        this.AddonModelsScaleInTime = ex;
                        break;
                    case EffectShader_FieldIndex.AddonModelsScaleOutTime:
                        this.AddonModelsScaleOutTime = ex;
                        break;
                    case EffectShader_FieldIndex.AmbientSound:
                        this.AmbientSound = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2:
                        this.FillColorKey2 = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3:
                        this.FillColorKey3 = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1Scale:
                        this.FillColorKey1Scale = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2Scale:
                        this.FillColorKey2Scale = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3Scale:
                        this.FillColorKey3Scale = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1Time:
                        this.FillColorKey1Time = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2Time:
                        this.FillColorKey2Time = ex;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3Time:
                        this.FillColorKey3Time = ex;
                        break;
                    case EffectShader_FieldIndex.ColorScale:
                        this.ColorScale = ex;
                        break;
                    case EffectShader_FieldIndex.BirthPositionOffset:
                        this.BirthPositionOffset = ex;
                        break;
                    case EffectShader_FieldIndex.BirthPositionOffsetRangePlusMinus:
                        this.BirthPositionOffsetRangePlusMinus = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedStartFrame:
                        this.ParticleAnimatedStartFrame = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedStartFrameVariation:
                        this.ParticleAnimatedStartFrameVariation = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedEndFrame:
                        this.ParticleAnimatedEndFrame = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedLoopStartFrame:
                        this.ParticleAnimatedLoopStartFrame = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedLoopStartVariation:
                        this.ParticleAnimatedLoopStartVariation = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedFrameCount:
                        this.ParticleAnimatedFrameCount = ex;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedFrameCountVariation:
                        this.ParticleAnimatedFrameCountVariation = ex;
                        break;
                    case EffectShader_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureScaleU:
                        this.FillTextureScaleU = ex;
                        break;
                    case EffectShader_FieldIndex.FillTextureScaleV:
                        this.FillTextureScaleV = ex;
                        break;
                    case EffectShader_FieldIndex.SceneGraphEmitDepthLimit:
                        this.SceneGraphEmitDepthLimit = ex;
                        break;
                    case EffectShader_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                EffectShader_FieldIndex enu = (EffectShader_FieldIndex)index;
                switch (enu)
                {
                    case EffectShader_FieldIndex.FillTexture:
                        this.FillTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleShaderTexture:
                        this.ParticleShaderTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesTexture:
                        this.HolesTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembranePaletteTexture:
                        this.MembranePaletteTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticlePaletteTexture:
                        this.ParticlePaletteTexture = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneSourceBlendMode:
                        this.MembraneSourceBlendMode = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneBlendOperation:
                        this.MembraneBlendOperation = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneZTest:
                        this.MembraneZTest = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1:
                        this.FillColorKey1 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillAlphaFadeInTime:
                        this.FillAlphaFadeInTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillFullAlphaTime:
                        this.FillFullAlphaTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillFadeOutTime:
                        this.FillFadeOutTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillPersistentAlphaRatio:
                        this.FillPersistentAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillAlphaPulseAmplitude:
                        this.FillAlphaPulseAmplitude = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillAlphaPulseFrequency:
                        this.FillAlphaPulseFrequency = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedU:
                        this.FillTextureAnimationSpeedU = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureAnimationSpeedV:
                        this.FillTextureAnimationSpeedV = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFallOff:
                        this.EdgeEffectFallOff = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectColor:
                        this.EdgeEffectColor = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime:
                        this.EdgeEffectAlphaFadeInTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaTime:
                        this.EdgeEffectFullAlphaTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime:
                        this.EdgeEffectAlphaFadeOutTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio:
                        this.EdgeEffectPersistentAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude:
                        this.EdgeEffectAlphaPulseAmplitude = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency:
                        this.EdgeEffectAlphaPulseFrequency = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillFullAlphaRatio:
                        this.FillFullAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeEffectFullAlphaRatio:
                        this.EdgeEffectFullAlphaRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.MembraneDestBlendMode:
                        this.MembraneDestBlendMode = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleSourceBlendMode:
                        this.ParticleSourceBlendMode = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleBlendOperation:
                        this.ParticleBlendOperation = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleZTest:
                        this.ParticleZTest = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleDestBlendMode:
                        this.ParticleDestBlendMode = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleBirthRampUpTime:
                        this.ParticleBirthRampUpTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleFullBirthTime:
                        this.ParticleFullBirthTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleBirthRampDownTime:
                        this.ParticleBirthRampDownTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleFullBirthRatio:
                        this.ParticleFullBirthRatio = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticlePeristentCount:
                        this.ParticlePeristentCount = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleLifetime:
                        this.ParticleLifetime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleLifetimePlusMinus:
                        this.ParticleLifetimePlusMinus = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialSpeedAlongNormal:
                        this.ParticleInitialSpeedAlongNormal = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAccelerationAlongNormal:
                        this.ParticleAccelerationAlongNormal = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialVelocity1:
                        this.ParticleInitialVelocity1 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialVelocity2:
                        this.ParticleInitialVelocity2 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialVelocity3:
                        this.ParticleInitialVelocity3 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAcceleration1:
                        this.ParticleAcceleration1 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAcceleration2:
                        this.ParticleAcceleration2 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAcceleration3:
                        this.ParticleAcceleration3 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleScaleKey1:
                        this.ParticleScaleKey1 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleScaleKey2:
                        this.ParticleScaleKey2 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleScaleKey1Time:
                        this.ParticleScaleKey1Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleScaleKey2Time:
                        this.ParticleScaleKey2Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey1:
                        this.ColorKey1 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey2:
                        this.ColorKey2 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey3:
                        this.ColorKey3 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey1Alpha:
                        this.ColorKey1Alpha = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey2Alpha:
                        this.ColorKey2Alpha = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey3Alpha:
                        this.ColorKey3Alpha = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey1Time:
                        this.ColorKey1Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey2Time:
                        this.ColorKey2Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorKey3Time:
                        this.ColorKey3Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialSpeedAlongNormalPlusMinus:
                        this.ParticleInitialSpeedAlongNormalPlusMinus = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialRotationDegree:
                        this.ParticleInitialRotationDegree = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleInitialRotationDegreePlusMinus:
                        this.ParticleInitialRotationDegreePlusMinus = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleRotationSpeedDegreePerSec:
                        this.ParticleRotationSpeedDegreePerSec = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleRotationSpeedDegreePerSecPlusMinus:
                        this.ParticleRotationSpeedDegreePerSecPlusMinus = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.AddonModels:
                        this.AddonModels = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesStartTime:
                        this.HolesStartTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesEndTime:
                        this.HolesEndTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesStartValue:
                        this.HolesStartValue = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.HolesEndValue:
                        this.HolesEndValue = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeWidth:
                        this.EdgeWidth = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.EdgeColor:
                        this.EdgeColor = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ExplosionWindSpeed:
                        this.ExplosionWindSpeed = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.TextureCountU:
                        this.TextureCountU = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.TextureCountV:
                        this.TextureCountV = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.AddonModelsFadeInTime:
                        this.AddonModelsFadeInTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.AddonModelsFadeOutTime:
                        this.AddonModelsFadeOutTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.AddonModelsScaleStart:
                        this.AddonModelsScaleStart = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.AddonModelsScaleEnd:
                        this.AddonModelsScaleEnd = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.AddonModelsScaleInTime:
                        this.AddonModelsScaleInTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.AddonModelsScaleOutTime:
                        this.AddonModelsScaleOutTime = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.AmbientSound:
                        this.AmbientSound = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2:
                        this.FillColorKey2 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3:
                        this.FillColorKey3 = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1Scale:
                        this.FillColorKey1Scale = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2Scale:
                        this.FillColorKey2Scale = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3Scale:
                        this.FillColorKey3Scale = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey1Time:
                        this.FillColorKey1Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey2Time:
                        this.FillColorKey2Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillColorKey3Time:
                        this.FillColorKey3Time = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ColorScale:
                        this.ColorScale = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.BirthPositionOffset:
                        this.BirthPositionOffset = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.BirthPositionOffsetRangePlusMinus:
                        this.BirthPositionOffsetRangePlusMinus = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedStartFrame:
                        this.ParticleAnimatedStartFrame = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedStartFrameVariation:
                        this.ParticleAnimatedStartFrameVariation = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedEndFrame:
                        this.ParticleAnimatedEndFrame = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedLoopStartFrame:
                        this.ParticleAnimatedLoopStartFrame = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedLoopStartVariation:
                        this.ParticleAnimatedLoopStartVariation = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedFrameCount:
                        this.ParticleAnimatedFrameCount = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.ParticleAnimatedFrameCountVariation:
                        this.ParticleAnimatedFrameCountVariation = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureScaleU:
                        this.FillTextureScaleU = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.FillTextureScaleV:
                        this.FillTextureScaleV = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.SceneGraphEmitDepthLimit:
                        this.SceneGraphEmitDepthLimit = (Exception?)obj;
                        break;
                    case EffectShader_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (FillTexture != null) return true;
                if (ParticleShaderTexture != null) return true;
                if (HolesTexture != null) return true;
                if (MembranePaletteTexture != null) return true;
                if (ParticlePaletteTexture != null) return true;
                if (Unknown != null) return true;
                if (MembraneSourceBlendMode != null) return true;
                if (MembraneBlendOperation != null) return true;
                if (MembraneZTest != null) return true;
                if (FillColorKey1 != null) return true;
                if (FillAlphaFadeInTime != null) return true;
                if (FillFullAlphaTime != null) return true;
                if (FillFadeOutTime != null) return true;
                if (FillPersistentAlphaRatio != null) return true;
                if (FillAlphaPulseAmplitude != null) return true;
                if (FillAlphaPulseFrequency != null) return true;
                if (FillTextureAnimationSpeedU != null) return true;
                if (FillTextureAnimationSpeedV != null) return true;
                if (EdgeEffectFallOff != null) return true;
                if (EdgeEffectColor != null) return true;
                if (EdgeEffectAlphaFadeInTime != null) return true;
                if (EdgeEffectFullAlphaTime != null) return true;
                if (EdgeEffectAlphaFadeOutTime != null) return true;
                if (EdgeEffectPersistentAlphaRatio != null) return true;
                if (EdgeEffectAlphaPulseAmplitude != null) return true;
                if (EdgeEffectAlphaPulseFrequency != null) return true;
                if (FillFullAlphaRatio != null) return true;
                if (EdgeEffectFullAlphaRatio != null) return true;
                if (MembraneDestBlendMode != null) return true;
                if (ParticleSourceBlendMode != null) return true;
                if (ParticleBlendOperation != null) return true;
                if (ParticleZTest != null) return true;
                if (ParticleDestBlendMode != null) return true;
                if (ParticleBirthRampUpTime != null) return true;
                if (ParticleFullBirthTime != null) return true;
                if (ParticleBirthRampDownTime != null) return true;
                if (ParticleFullBirthRatio != null) return true;
                if (ParticlePeristentCount != null) return true;
                if (ParticleLifetime != null) return true;
                if (ParticleLifetimePlusMinus != null) return true;
                if (ParticleInitialSpeedAlongNormal != null) return true;
                if (ParticleAccelerationAlongNormal != null) return true;
                if (ParticleInitialVelocity1 != null) return true;
                if (ParticleInitialVelocity2 != null) return true;
                if (ParticleInitialVelocity3 != null) return true;
                if (ParticleAcceleration1 != null) return true;
                if (ParticleAcceleration2 != null) return true;
                if (ParticleAcceleration3 != null) return true;
                if (ParticleScaleKey1 != null) return true;
                if (ParticleScaleKey2 != null) return true;
                if (ParticleScaleKey1Time != null) return true;
                if (ParticleScaleKey2Time != null) return true;
                if (ColorKey1 != null) return true;
                if (ColorKey2 != null) return true;
                if (ColorKey3 != null) return true;
                if (ColorKey1Alpha != null) return true;
                if (ColorKey2Alpha != null) return true;
                if (ColorKey3Alpha != null) return true;
                if (ColorKey1Time != null) return true;
                if (ColorKey2Time != null) return true;
                if (ColorKey3Time != null) return true;
                if (ParticleInitialSpeedAlongNormalPlusMinus != null) return true;
                if (ParticleInitialRotationDegree != null) return true;
                if (ParticleInitialRotationDegreePlusMinus != null) return true;
                if (ParticleRotationSpeedDegreePerSec != null) return true;
                if (ParticleRotationSpeedDegreePerSecPlusMinus != null) return true;
                if (AddonModels != null) return true;
                if (HolesStartTime != null) return true;
                if (HolesEndTime != null) return true;
                if (HolesStartValue != null) return true;
                if (HolesEndValue != null) return true;
                if (EdgeWidth != null) return true;
                if (EdgeColor != null) return true;
                if (ExplosionWindSpeed != null) return true;
                if (TextureCountU != null) return true;
                if (TextureCountV != null) return true;
                if (AddonModelsFadeInTime != null) return true;
                if (AddonModelsFadeOutTime != null) return true;
                if (AddonModelsScaleStart != null) return true;
                if (AddonModelsScaleEnd != null) return true;
                if (AddonModelsScaleInTime != null) return true;
                if (AddonModelsScaleOutTime != null) return true;
                if (AmbientSound != null) return true;
                if (FillColorKey2 != null) return true;
                if (FillColorKey3 != null) return true;
                if (FillColorKey1Scale != null) return true;
                if (FillColorKey2Scale != null) return true;
                if (FillColorKey3Scale != null) return true;
                if (FillColorKey1Time != null) return true;
                if (FillColorKey2Time != null) return true;
                if (FillColorKey3Time != null) return true;
                if (ColorScale != null) return true;
                if (BirthPositionOffset != null) return true;
                if (BirthPositionOffsetRangePlusMinus != null) return true;
                if (ParticleAnimatedStartFrame != null) return true;
                if (ParticleAnimatedStartFrameVariation != null) return true;
                if (ParticleAnimatedEndFrame != null) return true;
                if (ParticleAnimatedLoopStartFrame != null) return true;
                if (ParticleAnimatedLoopStartVariation != null) return true;
                if (ParticleAnimatedFrameCount != null) return true;
                if (ParticleAnimatedFrameCountVariation != null) return true;
                if (Flags != null) return true;
                if (FillTextureScaleU != null) return true;
                if (FillTextureScaleV != null) return true;
                if (SceneGraphEmitDepthLimit != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(FillTexture, "FillTexture");
                }
                {
                    sb.AppendItem(ParticleShaderTexture, "ParticleShaderTexture");
                }
                {
                    sb.AppendItem(HolesTexture, "HolesTexture");
                }
                {
                    sb.AppendItem(MembranePaletteTexture, "MembranePaletteTexture");
                }
                {
                    sb.AppendItem(ParticlePaletteTexture, "ParticlePaletteTexture");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(MembraneSourceBlendMode, "MembraneSourceBlendMode");
                }
                {
                    sb.AppendItem(MembraneBlendOperation, "MembraneBlendOperation");
                }
                {
                    sb.AppendItem(MembraneZTest, "MembraneZTest");
                }
                {
                    sb.AppendItem(FillColorKey1, "FillColorKey1");
                }
                {
                    sb.AppendItem(FillAlphaFadeInTime, "FillAlphaFadeInTime");
                }
                {
                    sb.AppendItem(FillFullAlphaTime, "FillFullAlphaTime");
                }
                {
                    sb.AppendItem(FillFadeOutTime, "FillFadeOutTime");
                }
                {
                    sb.AppendItem(FillPersistentAlphaRatio, "FillPersistentAlphaRatio");
                }
                {
                    sb.AppendItem(FillAlphaPulseAmplitude, "FillAlphaPulseAmplitude");
                }
                {
                    sb.AppendItem(FillAlphaPulseFrequency, "FillAlphaPulseFrequency");
                }
                {
                    sb.AppendItem(FillTextureAnimationSpeedU, "FillTextureAnimationSpeedU");
                }
                {
                    sb.AppendItem(FillTextureAnimationSpeedV, "FillTextureAnimationSpeedV");
                }
                {
                    sb.AppendItem(EdgeEffectFallOff, "EdgeEffectFallOff");
                }
                {
                    sb.AppendItem(EdgeEffectColor, "EdgeEffectColor");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
                }
                {
                    sb.AppendItem(EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
                }
                {
                    sb.AppendItem(EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
                }
                {
                    sb.AppendItem(EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
                }
                {
                    sb.AppendItem(FillFullAlphaRatio, "FillFullAlphaRatio");
                }
                {
                    sb.AppendItem(EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
                }
                {
                    sb.AppendItem(MembraneDestBlendMode, "MembraneDestBlendMode");
                }
                {
                    sb.AppendItem(ParticleSourceBlendMode, "ParticleSourceBlendMode");
                }
                {
                    sb.AppendItem(ParticleBlendOperation, "ParticleBlendOperation");
                }
                {
                    sb.AppendItem(ParticleZTest, "ParticleZTest");
                }
                {
                    sb.AppendItem(ParticleDestBlendMode, "ParticleDestBlendMode");
                }
                {
                    sb.AppendItem(ParticleBirthRampUpTime, "ParticleBirthRampUpTime");
                }
                {
                    sb.AppendItem(ParticleFullBirthTime, "ParticleFullBirthTime");
                }
                {
                    sb.AppendItem(ParticleBirthRampDownTime, "ParticleBirthRampDownTime");
                }
                {
                    sb.AppendItem(ParticleFullBirthRatio, "ParticleFullBirthRatio");
                }
                {
                    sb.AppendItem(ParticlePeristentCount, "ParticlePeristentCount");
                }
                {
                    sb.AppendItem(ParticleLifetime, "ParticleLifetime");
                }
                {
                    sb.AppendItem(ParticleLifetimePlusMinus, "ParticleLifetimePlusMinus");
                }
                {
                    sb.AppendItem(ParticleInitialSpeedAlongNormal, "ParticleInitialSpeedAlongNormal");
                }
                {
                    sb.AppendItem(ParticleAccelerationAlongNormal, "ParticleAccelerationAlongNormal");
                }
                {
                    sb.AppendItem(ParticleInitialVelocity1, "ParticleInitialVelocity1");
                }
                {
                    sb.AppendItem(ParticleInitialVelocity2, "ParticleInitialVelocity2");
                }
                {
                    sb.AppendItem(ParticleInitialVelocity3, "ParticleInitialVelocity3");
                }
                {
                    sb.AppendItem(ParticleAcceleration1, "ParticleAcceleration1");
                }
                {
                    sb.AppendItem(ParticleAcceleration2, "ParticleAcceleration2");
                }
                {
                    sb.AppendItem(ParticleAcceleration3, "ParticleAcceleration3");
                }
                {
                    sb.AppendItem(ParticleScaleKey1, "ParticleScaleKey1");
                }
                {
                    sb.AppendItem(ParticleScaleKey2, "ParticleScaleKey2");
                }
                {
                    sb.AppendItem(ParticleScaleKey1Time, "ParticleScaleKey1Time");
                }
                {
                    sb.AppendItem(ParticleScaleKey2Time, "ParticleScaleKey2Time");
                }
                {
                    sb.AppendItem(ColorKey1, "ColorKey1");
                }
                {
                    sb.AppendItem(ColorKey2, "ColorKey2");
                }
                {
                    sb.AppendItem(ColorKey3, "ColorKey3");
                }
                {
                    sb.AppendItem(ColorKey1Alpha, "ColorKey1Alpha");
                }
                {
                    sb.AppendItem(ColorKey2Alpha, "ColorKey2Alpha");
                }
                {
                    sb.AppendItem(ColorKey3Alpha, "ColorKey3Alpha");
                }
                {
                    sb.AppendItem(ColorKey1Time, "ColorKey1Time");
                }
                {
                    sb.AppendItem(ColorKey2Time, "ColorKey2Time");
                }
                {
                    sb.AppendItem(ColorKey3Time, "ColorKey3Time");
                }
                {
                    sb.AppendItem(ParticleInitialSpeedAlongNormalPlusMinus, "ParticleInitialSpeedAlongNormalPlusMinus");
                }
                {
                    sb.AppendItem(ParticleInitialRotationDegree, "ParticleInitialRotationDegree");
                }
                {
                    sb.AppendItem(ParticleInitialRotationDegreePlusMinus, "ParticleInitialRotationDegreePlusMinus");
                }
                {
                    sb.AppendItem(ParticleRotationSpeedDegreePerSec, "ParticleRotationSpeedDegreePerSec");
                }
                {
                    sb.AppendItem(ParticleRotationSpeedDegreePerSecPlusMinus, "ParticleRotationSpeedDegreePerSecPlusMinus");
                }
                {
                    sb.AppendItem(AddonModels, "AddonModels");
                }
                {
                    sb.AppendItem(HolesStartTime, "HolesStartTime");
                }
                {
                    sb.AppendItem(HolesEndTime, "HolesEndTime");
                }
                {
                    sb.AppendItem(HolesStartValue, "HolesStartValue");
                }
                {
                    sb.AppendItem(HolesEndValue, "HolesEndValue");
                }
                {
                    sb.AppendItem(EdgeWidth, "EdgeWidth");
                }
                {
                    sb.AppendItem(EdgeColor, "EdgeColor");
                }
                {
                    sb.AppendItem(ExplosionWindSpeed, "ExplosionWindSpeed");
                }
                {
                    sb.AppendItem(TextureCountU, "TextureCountU");
                }
                {
                    sb.AppendItem(TextureCountV, "TextureCountV");
                }
                {
                    sb.AppendItem(AddonModelsFadeInTime, "AddonModelsFadeInTime");
                }
                {
                    sb.AppendItem(AddonModelsFadeOutTime, "AddonModelsFadeOutTime");
                }
                {
                    sb.AppendItem(AddonModelsScaleStart, "AddonModelsScaleStart");
                }
                {
                    sb.AppendItem(AddonModelsScaleEnd, "AddonModelsScaleEnd");
                }
                {
                    sb.AppendItem(AddonModelsScaleInTime, "AddonModelsScaleInTime");
                }
                {
                    sb.AppendItem(AddonModelsScaleOutTime, "AddonModelsScaleOutTime");
                }
                {
                    sb.AppendItem(AmbientSound, "AmbientSound");
                }
                {
                    sb.AppendItem(FillColorKey2, "FillColorKey2");
                }
                {
                    sb.AppendItem(FillColorKey3, "FillColorKey3");
                }
                {
                    sb.AppendItem(FillColorKey1Scale, "FillColorKey1Scale");
                }
                {
                    sb.AppendItem(FillColorKey2Scale, "FillColorKey2Scale");
                }
                {
                    sb.AppendItem(FillColorKey3Scale, "FillColorKey3Scale");
                }
                {
                    sb.AppendItem(FillColorKey1Time, "FillColorKey1Time");
                }
                {
                    sb.AppendItem(FillColorKey2Time, "FillColorKey2Time");
                }
                {
                    sb.AppendItem(FillColorKey3Time, "FillColorKey3Time");
                }
                {
                    sb.AppendItem(ColorScale, "ColorScale");
                }
                {
                    sb.AppendItem(BirthPositionOffset, "BirthPositionOffset");
                }
                {
                    sb.AppendItem(BirthPositionOffsetRangePlusMinus, "BirthPositionOffsetRangePlusMinus");
                }
                {
                    sb.AppendItem(ParticleAnimatedStartFrame, "ParticleAnimatedStartFrame");
                }
                {
                    sb.AppendItem(ParticleAnimatedStartFrameVariation, "ParticleAnimatedStartFrameVariation");
                }
                {
                    sb.AppendItem(ParticleAnimatedEndFrame, "ParticleAnimatedEndFrame");
                }
                {
                    sb.AppendItem(ParticleAnimatedLoopStartFrame, "ParticleAnimatedLoopStartFrame");
                }
                {
                    sb.AppendItem(ParticleAnimatedLoopStartVariation, "ParticleAnimatedLoopStartVariation");
                }
                {
                    sb.AppendItem(ParticleAnimatedFrameCount, "ParticleAnimatedFrameCount");
                }
                {
                    sb.AppendItem(ParticleAnimatedFrameCountVariation, "ParticleAnimatedFrameCountVariation");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(FillTextureScaleU, "FillTextureScaleU");
                }
                {
                    sb.AppendItem(FillTextureScaleV, "FillTextureScaleV");
                }
                {
                    sb.AppendItem(SceneGraphEmitDepthLimit, "SceneGraphEmitDepthLimit");
                }
                {
                    sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.FillTexture = this.FillTexture.Combine(rhs.FillTexture);
                ret.ParticleShaderTexture = this.ParticleShaderTexture.Combine(rhs.ParticleShaderTexture);
                ret.HolesTexture = this.HolesTexture.Combine(rhs.HolesTexture);
                ret.MembranePaletteTexture = this.MembranePaletteTexture.Combine(rhs.MembranePaletteTexture);
                ret.ParticlePaletteTexture = this.ParticlePaletteTexture.Combine(rhs.ParticlePaletteTexture);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.MembraneSourceBlendMode = this.MembraneSourceBlendMode.Combine(rhs.MembraneSourceBlendMode);
                ret.MembraneBlendOperation = this.MembraneBlendOperation.Combine(rhs.MembraneBlendOperation);
                ret.MembraneZTest = this.MembraneZTest.Combine(rhs.MembraneZTest);
                ret.FillColorKey1 = this.FillColorKey1.Combine(rhs.FillColorKey1);
                ret.FillAlphaFadeInTime = this.FillAlphaFadeInTime.Combine(rhs.FillAlphaFadeInTime);
                ret.FillFullAlphaTime = this.FillFullAlphaTime.Combine(rhs.FillFullAlphaTime);
                ret.FillFadeOutTime = this.FillFadeOutTime.Combine(rhs.FillFadeOutTime);
                ret.FillPersistentAlphaRatio = this.FillPersistentAlphaRatio.Combine(rhs.FillPersistentAlphaRatio);
                ret.FillAlphaPulseAmplitude = this.FillAlphaPulseAmplitude.Combine(rhs.FillAlphaPulseAmplitude);
                ret.FillAlphaPulseFrequency = this.FillAlphaPulseFrequency.Combine(rhs.FillAlphaPulseFrequency);
                ret.FillTextureAnimationSpeedU = this.FillTextureAnimationSpeedU.Combine(rhs.FillTextureAnimationSpeedU);
                ret.FillTextureAnimationSpeedV = this.FillTextureAnimationSpeedV.Combine(rhs.FillTextureAnimationSpeedV);
                ret.EdgeEffectFallOff = this.EdgeEffectFallOff.Combine(rhs.EdgeEffectFallOff);
                ret.EdgeEffectColor = this.EdgeEffectColor.Combine(rhs.EdgeEffectColor);
                ret.EdgeEffectAlphaFadeInTime = this.EdgeEffectAlphaFadeInTime.Combine(rhs.EdgeEffectAlphaFadeInTime);
                ret.EdgeEffectFullAlphaTime = this.EdgeEffectFullAlphaTime.Combine(rhs.EdgeEffectFullAlphaTime);
                ret.EdgeEffectAlphaFadeOutTime = this.EdgeEffectAlphaFadeOutTime.Combine(rhs.EdgeEffectAlphaFadeOutTime);
                ret.EdgeEffectPersistentAlphaRatio = this.EdgeEffectPersistentAlphaRatio.Combine(rhs.EdgeEffectPersistentAlphaRatio);
                ret.EdgeEffectAlphaPulseAmplitude = this.EdgeEffectAlphaPulseAmplitude.Combine(rhs.EdgeEffectAlphaPulseAmplitude);
                ret.EdgeEffectAlphaPulseFrequency = this.EdgeEffectAlphaPulseFrequency.Combine(rhs.EdgeEffectAlphaPulseFrequency);
                ret.FillFullAlphaRatio = this.FillFullAlphaRatio.Combine(rhs.FillFullAlphaRatio);
                ret.EdgeEffectFullAlphaRatio = this.EdgeEffectFullAlphaRatio.Combine(rhs.EdgeEffectFullAlphaRatio);
                ret.MembraneDestBlendMode = this.MembraneDestBlendMode.Combine(rhs.MembraneDestBlendMode);
                ret.ParticleSourceBlendMode = this.ParticleSourceBlendMode.Combine(rhs.ParticleSourceBlendMode);
                ret.ParticleBlendOperation = this.ParticleBlendOperation.Combine(rhs.ParticleBlendOperation);
                ret.ParticleZTest = this.ParticleZTest.Combine(rhs.ParticleZTest);
                ret.ParticleDestBlendMode = this.ParticleDestBlendMode.Combine(rhs.ParticleDestBlendMode);
                ret.ParticleBirthRampUpTime = this.ParticleBirthRampUpTime.Combine(rhs.ParticleBirthRampUpTime);
                ret.ParticleFullBirthTime = this.ParticleFullBirthTime.Combine(rhs.ParticleFullBirthTime);
                ret.ParticleBirthRampDownTime = this.ParticleBirthRampDownTime.Combine(rhs.ParticleBirthRampDownTime);
                ret.ParticleFullBirthRatio = this.ParticleFullBirthRatio.Combine(rhs.ParticleFullBirthRatio);
                ret.ParticlePeristentCount = this.ParticlePeristentCount.Combine(rhs.ParticlePeristentCount);
                ret.ParticleLifetime = this.ParticleLifetime.Combine(rhs.ParticleLifetime);
                ret.ParticleLifetimePlusMinus = this.ParticleLifetimePlusMinus.Combine(rhs.ParticleLifetimePlusMinus);
                ret.ParticleInitialSpeedAlongNormal = this.ParticleInitialSpeedAlongNormal.Combine(rhs.ParticleInitialSpeedAlongNormal);
                ret.ParticleAccelerationAlongNormal = this.ParticleAccelerationAlongNormal.Combine(rhs.ParticleAccelerationAlongNormal);
                ret.ParticleInitialVelocity1 = this.ParticleInitialVelocity1.Combine(rhs.ParticleInitialVelocity1);
                ret.ParticleInitialVelocity2 = this.ParticleInitialVelocity2.Combine(rhs.ParticleInitialVelocity2);
                ret.ParticleInitialVelocity3 = this.ParticleInitialVelocity3.Combine(rhs.ParticleInitialVelocity3);
                ret.ParticleAcceleration1 = this.ParticleAcceleration1.Combine(rhs.ParticleAcceleration1);
                ret.ParticleAcceleration2 = this.ParticleAcceleration2.Combine(rhs.ParticleAcceleration2);
                ret.ParticleAcceleration3 = this.ParticleAcceleration3.Combine(rhs.ParticleAcceleration3);
                ret.ParticleScaleKey1 = this.ParticleScaleKey1.Combine(rhs.ParticleScaleKey1);
                ret.ParticleScaleKey2 = this.ParticleScaleKey2.Combine(rhs.ParticleScaleKey2);
                ret.ParticleScaleKey1Time = this.ParticleScaleKey1Time.Combine(rhs.ParticleScaleKey1Time);
                ret.ParticleScaleKey2Time = this.ParticleScaleKey2Time.Combine(rhs.ParticleScaleKey2Time);
                ret.ColorKey1 = this.ColorKey1.Combine(rhs.ColorKey1);
                ret.ColorKey2 = this.ColorKey2.Combine(rhs.ColorKey2);
                ret.ColorKey3 = this.ColorKey3.Combine(rhs.ColorKey3);
                ret.ColorKey1Alpha = this.ColorKey1Alpha.Combine(rhs.ColorKey1Alpha);
                ret.ColorKey2Alpha = this.ColorKey2Alpha.Combine(rhs.ColorKey2Alpha);
                ret.ColorKey3Alpha = this.ColorKey3Alpha.Combine(rhs.ColorKey3Alpha);
                ret.ColorKey1Time = this.ColorKey1Time.Combine(rhs.ColorKey1Time);
                ret.ColorKey2Time = this.ColorKey2Time.Combine(rhs.ColorKey2Time);
                ret.ColorKey3Time = this.ColorKey3Time.Combine(rhs.ColorKey3Time);
                ret.ParticleInitialSpeedAlongNormalPlusMinus = this.ParticleInitialSpeedAlongNormalPlusMinus.Combine(rhs.ParticleInitialSpeedAlongNormalPlusMinus);
                ret.ParticleInitialRotationDegree = this.ParticleInitialRotationDegree.Combine(rhs.ParticleInitialRotationDegree);
                ret.ParticleInitialRotationDegreePlusMinus = this.ParticleInitialRotationDegreePlusMinus.Combine(rhs.ParticleInitialRotationDegreePlusMinus);
                ret.ParticleRotationSpeedDegreePerSec = this.ParticleRotationSpeedDegreePerSec.Combine(rhs.ParticleRotationSpeedDegreePerSec);
                ret.ParticleRotationSpeedDegreePerSecPlusMinus = this.ParticleRotationSpeedDegreePerSecPlusMinus.Combine(rhs.ParticleRotationSpeedDegreePerSecPlusMinus);
                ret.AddonModels = this.AddonModels.Combine(rhs.AddonModels);
                ret.HolesStartTime = this.HolesStartTime.Combine(rhs.HolesStartTime);
                ret.HolesEndTime = this.HolesEndTime.Combine(rhs.HolesEndTime);
                ret.HolesStartValue = this.HolesStartValue.Combine(rhs.HolesStartValue);
                ret.HolesEndValue = this.HolesEndValue.Combine(rhs.HolesEndValue);
                ret.EdgeWidth = this.EdgeWidth.Combine(rhs.EdgeWidth);
                ret.EdgeColor = this.EdgeColor.Combine(rhs.EdgeColor);
                ret.ExplosionWindSpeed = this.ExplosionWindSpeed.Combine(rhs.ExplosionWindSpeed);
                ret.TextureCountU = this.TextureCountU.Combine(rhs.TextureCountU);
                ret.TextureCountV = this.TextureCountV.Combine(rhs.TextureCountV);
                ret.AddonModelsFadeInTime = this.AddonModelsFadeInTime.Combine(rhs.AddonModelsFadeInTime);
                ret.AddonModelsFadeOutTime = this.AddonModelsFadeOutTime.Combine(rhs.AddonModelsFadeOutTime);
                ret.AddonModelsScaleStart = this.AddonModelsScaleStart.Combine(rhs.AddonModelsScaleStart);
                ret.AddonModelsScaleEnd = this.AddonModelsScaleEnd.Combine(rhs.AddonModelsScaleEnd);
                ret.AddonModelsScaleInTime = this.AddonModelsScaleInTime.Combine(rhs.AddonModelsScaleInTime);
                ret.AddonModelsScaleOutTime = this.AddonModelsScaleOutTime.Combine(rhs.AddonModelsScaleOutTime);
                ret.AmbientSound = this.AmbientSound.Combine(rhs.AmbientSound);
                ret.FillColorKey2 = this.FillColorKey2.Combine(rhs.FillColorKey2);
                ret.FillColorKey3 = this.FillColorKey3.Combine(rhs.FillColorKey3);
                ret.FillColorKey1Scale = this.FillColorKey1Scale.Combine(rhs.FillColorKey1Scale);
                ret.FillColorKey2Scale = this.FillColorKey2Scale.Combine(rhs.FillColorKey2Scale);
                ret.FillColorKey3Scale = this.FillColorKey3Scale.Combine(rhs.FillColorKey3Scale);
                ret.FillColorKey1Time = this.FillColorKey1Time.Combine(rhs.FillColorKey1Time);
                ret.FillColorKey2Time = this.FillColorKey2Time.Combine(rhs.FillColorKey2Time);
                ret.FillColorKey3Time = this.FillColorKey3Time.Combine(rhs.FillColorKey3Time);
                ret.ColorScale = this.ColorScale.Combine(rhs.ColorScale);
                ret.BirthPositionOffset = this.BirthPositionOffset.Combine(rhs.BirthPositionOffset);
                ret.BirthPositionOffsetRangePlusMinus = this.BirthPositionOffsetRangePlusMinus.Combine(rhs.BirthPositionOffsetRangePlusMinus);
                ret.ParticleAnimatedStartFrame = this.ParticleAnimatedStartFrame.Combine(rhs.ParticleAnimatedStartFrame);
                ret.ParticleAnimatedStartFrameVariation = this.ParticleAnimatedStartFrameVariation.Combine(rhs.ParticleAnimatedStartFrameVariation);
                ret.ParticleAnimatedEndFrame = this.ParticleAnimatedEndFrame.Combine(rhs.ParticleAnimatedEndFrame);
                ret.ParticleAnimatedLoopStartFrame = this.ParticleAnimatedLoopStartFrame.Combine(rhs.ParticleAnimatedLoopStartFrame);
                ret.ParticleAnimatedLoopStartVariation = this.ParticleAnimatedLoopStartVariation.Combine(rhs.ParticleAnimatedLoopStartVariation);
                ret.ParticleAnimatedFrameCount = this.ParticleAnimatedFrameCount.Combine(rhs.ParticleAnimatedFrameCount);
                ret.ParticleAnimatedFrameCountVariation = this.ParticleAnimatedFrameCountVariation.Combine(rhs.ParticleAnimatedFrameCountVariation);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.FillTextureScaleU = this.FillTextureScaleU.Combine(rhs.FillTextureScaleU);
                ret.FillTextureScaleV = this.FillTextureScaleV.Combine(rhs.FillTextureScaleV);
                ret.SceneGraphEmitDepthLimit = this.SceneGraphEmitDepthLimit.Combine(rhs.SceneGraphEmitDepthLimit);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool FillTexture;
            public bool ParticleShaderTexture;
            public bool HolesTexture;
            public bool MembranePaletteTexture;
            public bool ParticlePaletteTexture;
            public bool Unknown;
            public bool MembraneSourceBlendMode;
            public bool MembraneBlendOperation;
            public bool MembraneZTest;
            public bool FillColorKey1;
            public bool FillAlphaFadeInTime;
            public bool FillFullAlphaTime;
            public bool FillFadeOutTime;
            public bool FillPersistentAlphaRatio;
            public bool FillAlphaPulseAmplitude;
            public bool FillAlphaPulseFrequency;
            public bool FillTextureAnimationSpeedU;
            public bool FillTextureAnimationSpeedV;
            public bool EdgeEffectFallOff;
            public bool EdgeEffectColor;
            public bool EdgeEffectAlphaFadeInTime;
            public bool EdgeEffectFullAlphaTime;
            public bool EdgeEffectAlphaFadeOutTime;
            public bool EdgeEffectPersistentAlphaRatio;
            public bool EdgeEffectAlphaPulseAmplitude;
            public bool EdgeEffectAlphaPulseFrequency;
            public bool FillFullAlphaRatio;
            public bool EdgeEffectFullAlphaRatio;
            public bool MembraneDestBlendMode;
            public bool ParticleSourceBlendMode;
            public bool ParticleBlendOperation;
            public bool ParticleZTest;
            public bool ParticleDestBlendMode;
            public bool ParticleBirthRampUpTime;
            public bool ParticleFullBirthTime;
            public bool ParticleBirthRampDownTime;
            public bool ParticleFullBirthRatio;
            public bool ParticlePeristentCount;
            public bool ParticleLifetime;
            public bool ParticleLifetimePlusMinus;
            public bool ParticleInitialSpeedAlongNormal;
            public bool ParticleAccelerationAlongNormal;
            public bool ParticleInitialVelocity1;
            public bool ParticleInitialVelocity2;
            public bool ParticleInitialVelocity3;
            public bool ParticleAcceleration1;
            public bool ParticleAcceleration2;
            public bool ParticleAcceleration3;
            public bool ParticleScaleKey1;
            public bool ParticleScaleKey2;
            public bool ParticleScaleKey1Time;
            public bool ParticleScaleKey2Time;
            public bool ColorKey1;
            public bool ColorKey2;
            public bool ColorKey3;
            public bool ColorKey1Alpha;
            public bool ColorKey2Alpha;
            public bool ColorKey3Alpha;
            public bool ColorKey1Time;
            public bool ColorKey2Time;
            public bool ColorKey3Time;
            public bool ParticleInitialSpeedAlongNormalPlusMinus;
            public bool ParticleInitialRotationDegree;
            public bool ParticleInitialRotationDegreePlusMinus;
            public bool ParticleRotationSpeedDegreePerSec;
            public bool ParticleRotationSpeedDegreePerSecPlusMinus;
            public bool AddonModels;
            public bool HolesStartTime;
            public bool HolesEndTime;
            public bool HolesStartValue;
            public bool HolesEndValue;
            public bool EdgeWidth;
            public bool EdgeColor;
            public bool ExplosionWindSpeed;
            public bool TextureCountU;
            public bool TextureCountV;
            public bool AddonModelsFadeInTime;
            public bool AddonModelsFadeOutTime;
            public bool AddonModelsScaleStart;
            public bool AddonModelsScaleEnd;
            public bool AddonModelsScaleInTime;
            public bool AddonModelsScaleOutTime;
            public bool AmbientSound;
            public bool FillColorKey2;
            public bool FillColorKey3;
            public bool FillColorKey1Scale;
            public bool FillColorKey2Scale;
            public bool FillColorKey3Scale;
            public bool FillColorKey1Time;
            public bool FillColorKey2Time;
            public bool FillColorKey3Time;
            public bool ColorScale;
            public bool BirthPositionOffset;
            public bool BirthPositionOffsetRangePlusMinus;
            public bool ParticleAnimatedStartFrame;
            public bool ParticleAnimatedStartFrameVariation;
            public bool ParticleAnimatedEndFrame;
            public bool ParticleAnimatedLoopStartFrame;
            public bool ParticleAnimatedLoopStartVariation;
            public bool ParticleAnimatedFrameCount;
            public bool ParticleAnimatedFrameCountVariation;
            public bool Flags;
            public bool FillTextureScaleU;
            public bool FillTextureScaleV;
            public bool SceneGraphEmitDepthLimit;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.FillTexture = defaultOn;
                this.ParticleShaderTexture = defaultOn;
                this.HolesTexture = defaultOn;
                this.MembranePaletteTexture = defaultOn;
                this.ParticlePaletteTexture = defaultOn;
                this.Unknown = defaultOn;
                this.MembraneSourceBlendMode = defaultOn;
                this.MembraneBlendOperation = defaultOn;
                this.MembraneZTest = defaultOn;
                this.FillColorKey1 = defaultOn;
                this.FillAlphaFadeInTime = defaultOn;
                this.FillFullAlphaTime = defaultOn;
                this.FillFadeOutTime = defaultOn;
                this.FillPersistentAlphaRatio = defaultOn;
                this.FillAlphaPulseAmplitude = defaultOn;
                this.FillAlphaPulseFrequency = defaultOn;
                this.FillTextureAnimationSpeedU = defaultOn;
                this.FillTextureAnimationSpeedV = defaultOn;
                this.EdgeEffectFallOff = defaultOn;
                this.EdgeEffectColor = defaultOn;
                this.EdgeEffectAlphaFadeInTime = defaultOn;
                this.EdgeEffectFullAlphaTime = defaultOn;
                this.EdgeEffectAlphaFadeOutTime = defaultOn;
                this.EdgeEffectPersistentAlphaRatio = defaultOn;
                this.EdgeEffectAlphaPulseAmplitude = defaultOn;
                this.EdgeEffectAlphaPulseFrequency = defaultOn;
                this.FillFullAlphaRatio = defaultOn;
                this.EdgeEffectFullAlphaRatio = defaultOn;
                this.MembraneDestBlendMode = defaultOn;
                this.ParticleSourceBlendMode = defaultOn;
                this.ParticleBlendOperation = defaultOn;
                this.ParticleZTest = defaultOn;
                this.ParticleDestBlendMode = defaultOn;
                this.ParticleBirthRampUpTime = defaultOn;
                this.ParticleFullBirthTime = defaultOn;
                this.ParticleBirthRampDownTime = defaultOn;
                this.ParticleFullBirthRatio = defaultOn;
                this.ParticlePeristentCount = defaultOn;
                this.ParticleLifetime = defaultOn;
                this.ParticleLifetimePlusMinus = defaultOn;
                this.ParticleInitialSpeedAlongNormal = defaultOn;
                this.ParticleAccelerationAlongNormal = defaultOn;
                this.ParticleInitialVelocity1 = defaultOn;
                this.ParticleInitialVelocity2 = defaultOn;
                this.ParticleInitialVelocity3 = defaultOn;
                this.ParticleAcceleration1 = defaultOn;
                this.ParticleAcceleration2 = defaultOn;
                this.ParticleAcceleration3 = defaultOn;
                this.ParticleScaleKey1 = defaultOn;
                this.ParticleScaleKey2 = defaultOn;
                this.ParticleScaleKey1Time = defaultOn;
                this.ParticleScaleKey2Time = defaultOn;
                this.ColorKey1 = defaultOn;
                this.ColorKey2 = defaultOn;
                this.ColorKey3 = defaultOn;
                this.ColorKey1Alpha = defaultOn;
                this.ColorKey2Alpha = defaultOn;
                this.ColorKey3Alpha = defaultOn;
                this.ColorKey1Time = defaultOn;
                this.ColorKey2Time = defaultOn;
                this.ColorKey3Time = defaultOn;
                this.ParticleInitialSpeedAlongNormalPlusMinus = defaultOn;
                this.ParticleInitialRotationDegree = defaultOn;
                this.ParticleInitialRotationDegreePlusMinus = defaultOn;
                this.ParticleRotationSpeedDegreePerSec = defaultOn;
                this.ParticleRotationSpeedDegreePerSecPlusMinus = defaultOn;
                this.AddonModels = defaultOn;
                this.HolesStartTime = defaultOn;
                this.HolesEndTime = defaultOn;
                this.HolesStartValue = defaultOn;
                this.HolesEndValue = defaultOn;
                this.EdgeWidth = defaultOn;
                this.EdgeColor = defaultOn;
                this.ExplosionWindSpeed = defaultOn;
                this.TextureCountU = defaultOn;
                this.TextureCountV = defaultOn;
                this.AddonModelsFadeInTime = defaultOn;
                this.AddonModelsFadeOutTime = defaultOn;
                this.AddonModelsScaleStart = defaultOn;
                this.AddonModelsScaleEnd = defaultOn;
                this.AddonModelsScaleInTime = defaultOn;
                this.AddonModelsScaleOutTime = defaultOn;
                this.AmbientSound = defaultOn;
                this.FillColorKey2 = defaultOn;
                this.FillColorKey3 = defaultOn;
                this.FillColorKey1Scale = defaultOn;
                this.FillColorKey2Scale = defaultOn;
                this.FillColorKey3Scale = defaultOn;
                this.FillColorKey1Time = defaultOn;
                this.FillColorKey2Time = defaultOn;
                this.FillColorKey3Time = defaultOn;
                this.ColorScale = defaultOn;
                this.BirthPositionOffset = defaultOn;
                this.BirthPositionOffsetRangePlusMinus = defaultOn;
                this.ParticleAnimatedStartFrame = defaultOn;
                this.ParticleAnimatedStartFrameVariation = defaultOn;
                this.ParticleAnimatedEndFrame = defaultOn;
                this.ParticleAnimatedLoopStartFrame = defaultOn;
                this.ParticleAnimatedLoopStartVariation = defaultOn;
                this.ParticleAnimatedFrameCount = defaultOn;
                this.ParticleAnimatedFrameCountVariation = defaultOn;
                this.Flags = defaultOn;
                this.FillTextureScaleU = defaultOn;
                this.FillTextureScaleV = defaultOn;
                this.SceneGraphEmitDepthLimit = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((FillTexture, null));
                ret.Add((ParticleShaderTexture, null));
                ret.Add((HolesTexture, null));
                ret.Add((MembranePaletteTexture, null));
                ret.Add((ParticlePaletteTexture, null));
                ret.Add((Unknown, null));
                ret.Add((MembraneSourceBlendMode, null));
                ret.Add((MembraneBlendOperation, null));
                ret.Add((MembraneZTest, null));
                ret.Add((FillColorKey1, null));
                ret.Add((FillAlphaFadeInTime, null));
                ret.Add((FillFullAlphaTime, null));
                ret.Add((FillFadeOutTime, null));
                ret.Add((FillPersistentAlphaRatio, null));
                ret.Add((FillAlphaPulseAmplitude, null));
                ret.Add((FillAlphaPulseFrequency, null));
                ret.Add((FillTextureAnimationSpeedU, null));
                ret.Add((FillTextureAnimationSpeedV, null));
                ret.Add((EdgeEffectFallOff, null));
                ret.Add((EdgeEffectColor, null));
                ret.Add((EdgeEffectAlphaFadeInTime, null));
                ret.Add((EdgeEffectFullAlphaTime, null));
                ret.Add((EdgeEffectAlphaFadeOutTime, null));
                ret.Add((EdgeEffectPersistentAlphaRatio, null));
                ret.Add((EdgeEffectAlphaPulseAmplitude, null));
                ret.Add((EdgeEffectAlphaPulseFrequency, null));
                ret.Add((FillFullAlphaRatio, null));
                ret.Add((EdgeEffectFullAlphaRatio, null));
                ret.Add((MembraneDestBlendMode, null));
                ret.Add((ParticleSourceBlendMode, null));
                ret.Add((ParticleBlendOperation, null));
                ret.Add((ParticleZTest, null));
                ret.Add((ParticleDestBlendMode, null));
                ret.Add((ParticleBirthRampUpTime, null));
                ret.Add((ParticleFullBirthTime, null));
                ret.Add((ParticleBirthRampDownTime, null));
                ret.Add((ParticleFullBirthRatio, null));
                ret.Add((ParticlePeristentCount, null));
                ret.Add((ParticleLifetime, null));
                ret.Add((ParticleLifetimePlusMinus, null));
                ret.Add((ParticleInitialSpeedAlongNormal, null));
                ret.Add((ParticleAccelerationAlongNormal, null));
                ret.Add((ParticleInitialVelocity1, null));
                ret.Add((ParticleInitialVelocity2, null));
                ret.Add((ParticleInitialVelocity3, null));
                ret.Add((ParticleAcceleration1, null));
                ret.Add((ParticleAcceleration2, null));
                ret.Add((ParticleAcceleration3, null));
                ret.Add((ParticleScaleKey1, null));
                ret.Add((ParticleScaleKey2, null));
                ret.Add((ParticleScaleKey1Time, null));
                ret.Add((ParticleScaleKey2Time, null));
                ret.Add((ColorKey1, null));
                ret.Add((ColorKey2, null));
                ret.Add((ColorKey3, null));
                ret.Add((ColorKey1Alpha, null));
                ret.Add((ColorKey2Alpha, null));
                ret.Add((ColorKey3Alpha, null));
                ret.Add((ColorKey1Time, null));
                ret.Add((ColorKey2Time, null));
                ret.Add((ColorKey3Time, null));
                ret.Add((ParticleInitialSpeedAlongNormalPlusMinus, null));
                ret.Add((ParticleInitialRotationDegree, null));
                ret.Add((ParticleInitialRotationDegreePlusMinus, null));
                ret.Add((ParticleRotationSpeedDegreePerSec, null));
                ret.Add((ParticleRotationSpeedDegreePerSecPlusMinus, null));
                ret.Add((AddonModels, null));
                ret.Add((HolesStartTime, null));
                ret.Add((HolesEndTime, null));
                ret.Add((HolesStartValue, null));
                ret.Add((HolesEndValue, null));
                ret.Add((EdgeWidth, null));
                ret.Add((EdgeColor, null));
                ret.Add((ExplosionWindSpeed, null));
                ret.Add((TextureCountU, null));
                ret.Add((TextureCountV, null));
                ret.Add((AddonModelsFadeInTime, null));
                ret.Add((AddonModelsFadeOutTime, null));
                ret.Add((AddonModelsScaleStart, null));
                ret.Add((AddonModelsScaleEnd, null));
                ret.Add((AddonModelsScaleInTime, null));
                ret.Add((AddonModelsScaleOutTime, null));
                ret.Add((AmbientSound, null));
                ret.Add((FillColorKey2, null));
                ret.Add((FillColorKey3, null));
                ret.Add((FillColorKey1Scale, null));
                ret.Add((FillColorKey2Scale, null));
                ret.Add((FillColorKey3Scale, null));
                ret.Add((FillColorKey1Time, null));
                ret.Add((FillColorKey2Time, null));
                ret.Add((FillColorKey3Time, null));
                ret.Add((ColorScale, null));
                ret.Add((BirthPositionOffset, null));
                ret.Add((BirthPositionOffsetRangePlusMinus, null));
                ret.Add((ParticleAnimatedStartFrame, null));
                ret.Add((ParticleAnimatedStartFrameVariation, null));
                ret.Add((ParticleAnimatedEndFrame, null));
                ret.Add((ParticleAnimatedLoopStartFrame, null));
                ret.Add((ParticleAnimatedLoopStartVariation, null));
                ret.Add((ParticleAnimatedFrameCount, null));
                ret.Add((ParticleAnimatedFrameCountVariation, null));
                ret.Add((Flags, null));
                ret.Add((FillTextureScaleU, null));
                ret.Add((FillTextureScaleV, null));
                ret.Add((SceneGraphEmitDepthLimit, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = EffectShader_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => EffectShaderCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => EffectShaderSetterCommon.Instance.RemapLinks(this, mapping);
        public EffectShader(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private EffectShader(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal EffectShader(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public EffectShader(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public EffectShader(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<EffectShader>.ToString(this);
        }

        protected override Type LinkType => typeof(IEffectShader);

        [Flags]
        public enum DATADataType
        {
            Break0 = 1,
            Break1 = 2,
            Break2 = 4,
            Break3 = 8
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => EffectShaderCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => EffectShaderSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => EffectShaderSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => EffectShaderSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IEffectShaderGetter rhs) return false;
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IEffectShaderGetter? obj)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EffectShaderBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EffectShaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static EffectShader CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new EffectShader();
            ((EffectShaderSetterCommon)((IEffectShaderGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out EffectShader item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new EffectShader GetNew()
        {
            return new EffectShader();
        }

    }
    #endregion

    #region Interface
    public partial interface IEffectShader :
        IAssetLinkContainer,
        IEffectShaderGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IEffectShaderInternal>,
        ISkyrimMajorRecordInternal
    {
        new AssetLink<SkyrimTextureAssetType>? FillTexture { get; set; }
        new AssetLink<SkyrimTextureAssetType>? ParticleShaderTexture { get; set; }
        new AssetLink<SkyrimTextureAssetType>? HolesTexture { get; set; }
        new AssetLink<SkyrimTextureAssetType>? MembranePaletteTexture { get; set; }
        new AssetLink<SkyrimTextureAssetType>? ParticlePaletteTexture { get; set; }
        new Int32 Unknown { get; set; }
        new EffectShader.BlendMode MembraneSourceBlendMode { get; set; }
        new EffectShader.BlendOperation MembraneBlendOperation { get; set; }
        new EffectShader.ZTest MembraneZTest { get; set; }
        new Color FillColorKey1 { get; set; }
        new Single FillAlphaFadeInTime { get; set; }
        new Single FillFullAlphaTime { get; set; }
        new Single FillFadeOutTime { get; set; }
        new Single FillPersistentAlphaRatio { get; set; }
        new Single FillAlphaPulseAmplitude { get; set; }
        new Single FillAlphaPulseFrequency { get; set; }
        new Single FillTextureAnimationSpeedU { get; set; }
        new Single FillTextureAnimationSpeedV { get; set; }
        new Single EdgeEffectFallOff { get; set; }
        new Color EdgeEffectColor { get; set; }
        new Single EdgeEffectAlphaFadeInTime { get; set; }
        new Single EdgeEffectFullAlphaTime { get; set; }
        new Single EdgeEffectAlphaFadeOutTime { get; set; }
        new Single EdgeEffectPersistentAlphaRatio { get; set; }
        new Single EdgeEffectAlphaPulseAmplitude { get; set; }
        new Single EdgeEffectAlphaPulseFrequency { get; set; }
        new Single FillFullAlphaRatio { get; set; }
        new Single EdgeEffectFullAlphaRatio { get; set; }
        new EffectShader.BlendMode MembraneDestBlendMode { get; set; }
        new EffectShader.BlendMode ParticleSourceBlendMode { get; set; }
        new EffectShader.BlendOperation ParticleBlendOperation { get; set; }
        new EffectShader.ZTest ParticleZTest { get; set; }
        new EffectShader.BlendMode ParticleDestBlendMode { get; set; }
        new Single ParticleBirthRampUpTime { get; set; }
        new Single ParticleFullBirthTime { get; set; }
        new Single ParticleBirthRampDownTime { get; set; }
        new Single ParticleFullBirthRatio { get; set; }
        new Single ParticlePeristentCount { get; set; }
        new Single ParticleLifetime { get; set; }
        new Single ParticleLifetimePlusMinus { get; set; }
        new Single ParticleInitialSpeedAlongNormal { get; set; }
        new Single ParticleAccelerationAlongNormal { get; set; }
        new Single ParticleInitialVelocity1 { get; set; }
        new Single ParticleInitialVelocity2 { get; set; }
        new Single ParticleInitialVelocity3 { get; set; }
        new Single ParticleAcceleration1 { get; set; }
        new Single ParticleAcceleration2 { get; set; }
        new Single ParticleAcceleration3 { get; set; }
        new Single ParticleScaleKey1 { get; set; }
        new Single ParticleScaleKey2 { get; set; }
        new Single ParticleScaleKey1Time { get; set; }
        new Single ParticleScaleKey2Time { get; set; }
        new Color ColorKey1 { get; set; }
        new Color ColorKey2 { get; set; }
        new Color ColorKey3 { get; set; }
        new Single ColorKey1Alpha { get; set; }
        new Single ColorKey2Alpha { get; set; }
        new Single ColorKey3Alpha { get; set; }
        new Single ColorKey1Time { get; set; }
        new Single ColorKey2Time { get; set; }
        new Single ColorKey3Time { get; set; }
        new Single ParticleInitialSpeedAlongNormalPlusMinus { get; set; }
        new Single ParticleInitialRotationDegree { get; set; }
        new Single ParticleInitialRotationDegreePlusMinus { get; set; }
        new Single ParticleRotationSpeedDegreePerSec { get; set; }
        new Single ParticleRotationSpeedDegreePerSecPlusMinus { get; set; }
        new IFormLink<IDebrisGetter> AddonModels { get; set; }
        new Single HolesStartTime { get; set; }
        new Single HolesEndTime { get; set; }
        new Single HolesStartValue { get; set; }
        new Single HolesEndValue { get; set; }
        new Single EdgeWidth { get; set; }
        new Color EdgeColor { get; set; }
        new Single ExplosionWindSpeed { get; set; }
        new UInt32 TextureCountU { get; set; }
        new UInt32 TextureCountV { get; set; }
        new Single AddonModelsFadeInTime { get; set; }
        new Single AddonModelsFadeOutTime { get; set; }
        new Single AddonModelsScaleStart { get; set; }
        new Single AddonModelsScaleEnd { get; set; }
        new Single AddonModelsScaleInTime { get; set; }
        new Single AddonModelsScaleOutTime { get; set; }
        new IFormLink<ISoundGetter> AmbientSound { get; set; }
        new Color FillColorKey2 { get; set; }
        new Color FillColorKey3 { get; set; }
        new Single FillColorKey1Scale { get; set; }
        new Single FillColorKey2Scale { get; set; }
        new Single FillColorKey3Scale { get; set; }
        new Single FillColorKey1Time { get; set; }
        new Single FillColorKey2Time { get; set; }
        new Single FillColorKey3Time { get; set; }
        new Single ColorScale { get; set; }
        new Single BirthPositionOffset { get; set; }
        new Single BirthPositionOffsetRangePlusMinus { get; set; }
        new UInt32 ParticleAnimatedStartFrame { get; set; }
        new UInt32 ParticleAnimatedStartFrameVariation { get; set; }
        new UInt32 ParticleAnimatedEndFrame { get; set; }
        new UInt32 ParticleAnimatedLoopStartFrame { get; set; }
        new UInt32 ParticleAnimatedLoopStartVariation { get; set; }
        new UInt32 ParticleAnimatedFrameCount { get; set; }
        new UInt32 ParticleAnimatedFrameCountVariation { get; set; }
        new EffectShader.Flag Flags { get; set; }
        new Single FillTextureScaleU { get; set; }
        new Single FillTextureScaleV { get; set; }
        new UInt32 SceneGraphEmitDepthLimit { get; set; }
        new EffectShader.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IEffectShaderInternal :
        ISkyrimMajorRecordInternal,
        IEffectShader,
        IEffectShaderGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.EFSH)]
    public partial interface IEffectShaderGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IEffectShaderGetter>,
        IMapsToGetter<IEffectShaderGetter>
    {
        static new ILoquiRegistration StaticRegistration => EffectShader_Registration.Instance;
        AssetLinkGetter<SkyrimTextureAssetType>? FillTexture { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? ParticleShaderTexture { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? HolesTexture { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? MembranePaletteTexture { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? ParticlePaletteTexture { get; }
        Int32 Unknown { get; }
        EffectShader.BlendMode MembraneSourceBlendMode { get; }
        EffectShader.BlendOperation MembraneBlendOperation { get; }
        EffectShader.ZTest MembraneZTest { get; }
        Color FillColorKey1 { get; }
        Single FillAlphaFadeInTime { get; }
        Single FillFullAlphaTime { get; }
        Single FillFadeOutTime { get; }
        Single FillPersistentAlphaRatio { get; }
        Single FillAlphaPulseAmplitude { get; }
        Single FillAlphaPulseFrequency { get; }
        Single FillTextureAnimationSpeedU { get; }
        Single FillTextureAnimationSpeedV { get; }
        Single EdgeEffectFallOff { get; }
        Color EdgeEffectColor { get; }
        Single EdgeEffectAlphaFadeInTime { get; }
        Single EdgeEffectFullAlphaTime { get; }
        Single EdgeEffectAlphaFadeOutTime { get; }
        Single EdgeEffectPersistentAlphaRatio { get; }
        Single EdgeEffectAlphaPulseAmplitude { get; }
        Single EdgeEffectAlphaPulseFrequency { get; }
        Single FillFullAlphaRatio { get; }
        Single EdgeEffectFullAlphaRatio { get; }
        EffectShader.BlendMode MembraneDestBlendMode { get; }
        EffectShader.BlendMode ParticleSourceBlendMode { get; }
        EffectShader.BlendOperation ParticleBlendOperation { get; }
        EffectShader.ZTest ParticleZTest { get; }
        EffectShader.BlendMode ParticleDestBlendMode { get; }
        Single ParticleBirthRampUpTime { get; }
        Single ParticleFullBirthTime { get; }
        Single ParticleBirthRampDownTime { get; }
        Single ParticleFullBirthRatio { get; }
        Single ParticlePeristentCount { get; }
        Single ParticleLifetime { get; }
        Single ParticleLifetimePlusMinus { get; }
        Single ParticleInitialSpeedAlongNormal { get; }
        Single ParticleAccelerationAlongNormal { get; }
        Single ParticleInitialVelocity1 { get; }
        Single ParticleInitialVelocity2 { get; }
        Single ParticleInitialVelocity3 { get; }
        Single ParticleAcceleration1 { get; }
        Single ParticleAcceleration2 { get; }
        Single ParticleAcceleration3 { get; }
        Single ParticleScaleKey1 { get; }
        Single ParticleScaleKey2 { get; }
        Single ParticleScaleKey1Time { get; }
        Single ParticleScaleKey2Time { get; }
        Color ColorKey1 { get; }
        Color ColorKey2 { get; }
        Color ColorKey3 { get; }
        Single ColorKey1Alpha { get; }
        Single ColorKey2Alpha { get; }
        Single ColorKey3Alpha { get; }
        Single ColorKey1Time { get; }
        Single ColorKey2Time { get; }
        Single ColorKey3Time { get; }
        Single ParticleInitialSpeedAlongNormalPlusMinus { get; }
        Single ParticleInitialRotationDegree { get; }
        Single ParticleInitialRotationDegreePlusMinus { get; }
        Single ParticleRotationSpeedDegreePerSec { get; }
        Single ParticleRotationSpeedDegreePerSecPlusMinus { get; }
        IFormLinkGetter<IDebrisGetter> AddonModels { get; }
        Single HolesStartTime { get; }
        Single HolesEndTime { get; }
        Single HolesStartValue { get; }
        Single HolesEndValue { get; }
        Single EdgeWidth { get; }
        Color EdgeColor { get; }
        Single ExplosionWindSpeed { get; }
        UInt32 TextureCountU { get; }
        UInt32 TextureCountV { get; }
        Single AddonModelsFadeInTime { get; }
        Single AddonModelsFadeOutTime { get; }
        Single AddonModelsScaleStart { get; }
        Single AddonModelsScaleEnd { get; }
        Single AddonModelsScaleInTime { get; }
        Single AddonModelsScaleOutTime { get; }
        IFormLinkGetter<ISoundGetter> AmbientSound { get; }
        Color FillColorKey2 { get; }
        Color FillColorKey3 { get; }
        Single FillColorKey1Scale { get; }
        Single FillColorKey2Scale { get; }
        Single FillColorKey3Scale { get; }
        Single FillColorKey1Time { get; }
        Single FillColorKey2Time { get; }
        Single FillColorKey3Time { get; }
        Single ColorScale { get; }
        Single BirthPositionOffset { get; }
        Single BirthPositionOffsetRangePlusMinus { get; }
        UInt32 ParticleAnimatedStartFrame { get; }
        UInt32 ParticleAnimatedStartFrameVariation { get; }
        UInt32 ParticleAnimatedEndFrame { get; }
        UInt32 ParticleAnimatedLoopStartFrame { get; }
        UInt32 ParticleAnimatedLoopStartVariation { get; }
        UInt32 ParticleAnimatedFrameCount { get; }
        UInt32 ParticleAnimatedFrameCountVariation { get; }
        EffectShader.Flag Flags { get; }
        Single FillTextureScaleU { get; }
        Single FillTextureScaleV { get; }
        UInt32 SceneGraphEmitDepthLimit { get; }
        EffectShader.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class EffectShaderMixIn
    {
        public static void Clear(this IEffectShaderInternal item)
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static EffectShader.Mask<bool> GetEqualsMask(
            this IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IEffectShaderGetter item,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IEffectShaderGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EffectShader.TranslationMask? equalsMask = null)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IEffectShaderInternal lhs,
            IEffectShaderGetter rhs,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = EffectShader.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IEffectShaderInternal lhs,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static EffectShader DeepCopy(
            this IEffectShaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static EffectShader Duplicate(
            this IEffectShaderGetter item,
            FormKey formKey,
            EffectShader.TranslationMask? copyMask = null)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static EffectShader Duplicate(
            this IEffectShaderGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IEffectShaderInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((EffectShaderSetterCommon)((IEffectShaderGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum EffectShader_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        FillTexture = 7,
        ParticleShaderTexture = 8,
        HolesTexture = 9,
        MembranePaletteTexture = 10,
        ParticlePaletteTexture = 11,
        Unknown = 12,
        MembraneSourceBlendMode = 13,
        MembraneBlendOperation = 14,
        MembraneZTest = 15,
        FillColorKey1 = 16,
        FillAlphaFadeInTime = 17,
        FillFullAlphaTime = 18,
        FillFadeOutTime = 19,
        FillPersistentAlphaRatio = 20,
        FillAlphaPulseAmplitude = 21,
        FillAlphaPulseFrequency = 22,
        FillTextureAnimationSpeedU = 23,
        FillTextureAnimationSpeedV = 24,
        EdgeEffectFallOff = 25,
        EdgeEffectColor = 26,
        EdgeEffectAlphaFadeInTime = 27,
        EdgeEffectFullAlphaTime = 28,
        EdgeEffectAlphaFadeOutTime = 29,
        EdgeEffectPersistentAlphaRatio = 30,
        EdgeEffectAlphaPulseAmplitude = 31,
        EdgeEffectAlphaPulseFrequency = 32,
        FillFullAlphaRatio = 33,
        EdgeEffectFullAlphaRatio = 34,
        MembraneDestBlendMode = 35,
        ParticleSourceBlendMode = 36,
        ParticleBlendOperation = 37,
        ParticleZTest = 38,
        ParticleDestBlendMode = 39,
        ParticleBirthRampUpTime = 40,
        ParticleFullBirthTime = 41,
        ParticleBirthRampDownTime = 42,
        ParticleFullBirthRatio = 43,
        ParticlePeristentCount = 44,
        ParticleLifetime = 45,
        ParticleLifetimePlusMinus = 46,
        ParticleInitialSpeedAlongNormal = 47,
        ParticleAccelerationAlongNormal = 48,
        ParticleInitialVelocity1 = 49,
        ParticleInitialVelocity2 = 50,
        ParticleInitialVelocity3 = 51,
        ParticleAcceleration1 = 52,
        ParticleAcceleration2 = 53,
        ParticleAcceleration3 = 54,
        ParticleScaleKey1 = 55,
        ParticleScaleKey2 = 56,
        ParticleScaleKey1Time = 57,
        ParticleScaleKey2Time = 58,
        ColorKey1 = 59,
        ColorKey2 = 60,
        ColorKey3 = 61,
        ColorKey1Alpha = 62,
        ColorKey2Alpha = 63,
        ColorKey3Alpha = 64,
        ColorKey1Time = 65,
        ColorKey2Time = 66,
        ColorKey3Time = 67,
        ParticleInitialSpeedAlongNormalPlusMinus = 68,
        ParticleInitialRotationDegree = 69,
        ParticleInitialRotationDegreePlusMinus = 70,
        ParticleRotationSpeedDegreePerSec = 71,
        ParticleRotationSpeedDegreePerSecPlusMinus = 72,
        AddonModels = 73,
        HolesStartTime = 74,
        HolesEndTime = 75,
        HolesStartValue = 76,
        HolesEndValue = 77,
        EdgeWidth = 78,
        EdgeColor = 79,
        ExplosionWindSpeed = 80,
        TextureCountU = 81,
        TextureCountV = 82,
        AddonModelsFadeInTime = 83,
        AddonModelsFadeOutTime = 84,
        AddonModelsScaleStart = 85,
        AddonModelsScaleEnd = 86,
        AddonModelsScaleInTime = 87,
        AddonModelsScaleOutTime = 88,
        AmbientSound = 89,
        FillColorKey2 = 90,
        FillColorKey3 = 91,
        FillColorKey1Scale = 92,
        FillColorKey2Scale = 93,
        FillColorKey3Scale = 94,
        FillColorKey1Time = 95,
        FillColorKey2Time = 96,
        FillColorKey3Time = 97,
        ColorScale = 98,
        BirthPositionOffset = 99,
        BirthPositionOffsetRangePlusMinus = 100,
        ParticleAnimatedStartFrame = 101,
        ParticleAnimatedStartFrameVariation = 102,
        ParticleAnimatedEndFrame = 103,
        ParticleAnimatedLoopStartFrame = 104,
        ParticleAnimatedLoopStartVariation = 105,
        ParticleAnimatedFrameCount = 106,
        ParticleAnimatedFrameCountVariation = 107,
        Flags = 108,
        FillTextureScaleU = 109,
        FillTextureScaleV = 110,
        SceneGraphEmitDepthLimit = 111,
        DATADataTypeState = 112,
    }
    #endregion

    #region Registration
    internal partial class EffectShader_Registration : ILoquiRegistration
    {
        public static readonly EffectShader_Registration Instance = new EffectShader_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 106;

        public const ushort FieldCount = 113;

        public static readonly Type MaskType = typeof(EffectShader.Mask<>);

        public static readonly Type ErrorMaskType = typeof(EffectShader.ErrorMask);

        public static readonly Type ClassType = typeof(EffectShader);

        public static readonly Type GetterType = typeof(IEffectShaderGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IEffectShader);

        public static readonly Type? InternalSetterType = typeof(IEffectShaderInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.EffectShader";

        public const string Name = "EffectShader";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.EFSH;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.EFSH);
            var all = RecordCollection.Factory(
                RecordTypes.EFSH,
                RecordTypes.ICON,
                RecordTypes.ICO2,
                RecordTypes.NAM7,
                RecordTypes.NAM8,
                RecordTypes.NAM9,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(EffectShaderBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class EffectShaderSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly EffectShaderSetterCommon Instance = new EffectShaderSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IEffectShaderInternal item)
        {
            ClearPartial();
            item.FillTexture = default;
            item.ParticleShaderTexture = default;
            item.HolesTexture = default;
            item.MembranePaletteTexture = default;
            item.ParticlePaletteTexture = default;
            item.Unknown = default(Int32);
            item.MembraneSourceBlendMode = EffectShader.MembraneSourceBlendModeDefault;
            item.MembraneBlendOperation = EffectShader.MembraneBlendOperationDefault;
            item.MembraneZTest = EffectShader.MembraneZTestDefault;
            item.FillColorKey1 = default(Color);
            item.FillAlphaFadeInTime = default(Single);
            item.FillFullAlphaTime = default(Single);
            item.FillFadeOutTime = default(Single);
            item.FillPersistentAlphaRatio = default(Single);
            item.FillAlphaPulseAmplitude = default(Single);
            item.FillAlphaPulseFrequency = default(Single);
            item.FillTextureAnimationSpeedU = default(Single);
            item.FillTextureAnimationSpeedV = default(Single);
            item.EdgeEffectFallOff = default(Single);
            item.EdgeEffectColor = default(Color);
            item.EdgeEffectAlphaFadeInTime = default(Single);
            item.EdgeEffectFullAlphaTime = default(Single);
            item.EdgeEffectAlphaFadeOutTime = default(Single);
            item.EdgeEffectPersistentAlphaRatio = default(Single);
            item.EdgeEffectAlphaPulseAmplitude = default(Single);
            item.EdgeEffectAlphaPulseFrequency = default(Single);
            item.FillFullAlphaRatio = default(Single);
            item.EdgeEffectFullAlphaRatio = default(Single);
            item.MembraneDestBlendMode = EffectShader.MembraneDestBlendModeDefault;
            item.ParticleSourceBlendMode = EffectShader.ParticleSourceBlendModeDefault;
            item.ParticleBlendOperation = EffectShader.ParticleBlendOperationDefault;
            item.ParticleZTest = EffectShader.ParticleZTestDefault;
            item.ParticleDestBlendMode = EffectShader.ParticleDestBlendModeDefault;
            item.ParticleBirthRampUpTime = default(Single);
            item.ParticleFullBirthTime = default(Single);
            item.ParticleBirthRampDownTime = default(Single);
            item.ParticleFullBirthRatio = default(Single);
            item.ParticlePeristentCount = default(Single);
            item.ParticleLifetime = default(Single);
            item.ParticleLifetimePlusMinus = default(Single);
            item.ParticleInitialSpeedAlongNormal = default(Single);
            item.ParticleAccelerationAlongNormal = default(Single);
            item.ParticleInitialVelocity1 = default(Single);
            item.ParticleInitialVelocity2 = default(Single);
            item.ParticleInitialVelocity3 = default(Single);
            item.ParticleAcceleration1 = default(Single);
            item.ParticleAcceleration2 = default(Single);
            item.ParticleAcceleration3 = default(Single);
            item.ParticleScaleKey1 = default(Single);
            item.ParticleScaleKey2 = default(Single);
            item.ParticleScaleKey1Time = default(Single);
            item.ParticleScaleKey2Time = default(Single);
            item.ColorKey1 = default(Color);
            item.ColorKey2 = default(Color);
            item.ColorKey3 = default(Color);
            item.ColorKey1Alpha = default(Single);
            item.ColorKey2Alpha = default(Single);
            item.ColorKey3Alpha = default(Single);
            item.ColorKey1Time = default(Single);
            item.ColorKey2Time = default(Single);
            item.ColorKey3Time = default(Single);
            item.ParticleInitialSpeedAlongNormalPlusMinus = default(Single);
            item.ParticleInitialRotationDegree = default(Single);
            item.ParticleInitialRotationDegreePlusMinus = default(Single);
            item.ParticleRotationSpeedDegreePerSec = default(Single);
            item.ParticleRotationSpeedDegreePerSecPlusMinus = default(Single);
            item.AddonModels.Clear();
            item.HolesStartTime = default(Single);
            item.HolesEndTime = default(Single);
            item.HolesStartValue = default(Single);
            item.HolesEndValue = default(Single);
            item.EdgeWidth = default(Single);
            item.EdgeColor = default(Color);
            item.ExplosionWindSpeed = default(Single);
            item.TextureCountU = default(UInt32);
            item.TextureCountV = default(UInt32);
            item.AddonModelsFadeInTime = default(Single);
            item.AddonModelsFadeOutTime = default(Single);
            item.AddonModelsScaleStart = default(Single);
            item.AddonModelsScaleEnd = default(Single);
            item.AddonModelsScaleInTime = default(Single);
            item.AddonModelsScaleOutTime = default(Single);
            item.AmbientSound.Clear();
            item.FillColorKey2 = default(Color);
            item.FillColorKey3 = default(Color);
            item.FillColorKey1Scale = default(Single);
            item.FillColorKey2Scale = default(Single);
            item.FillColorKey3Scale = default(Single);
            item.FillColorKey1Time = default(Single);
            item.FillColorKey2Time = default(Single);
            item.FillColorKey3Time = default(Single);
            item.ColorScale = default(Single);
            item.BirthPositionOffset = default(Single);
            item.BirthPositionOffsetRangePlusMinus = default(Single);
            item.ParticleAnimatedStartFrame = default(UInt32);
            item.ParticleAnimatedStartFrameVariation = default(UInt32);
            item.ParticleAnimatedEndFrame = default(UInt32);
            item.ParticleAnimatedLoopStartFrame = default(UInt32);
            item.ParticleAnimatedLoopStartVariation = default(UInt32);
            item.ParticleAnimatedFrameCount = default(UInt32);
            item.ParticleAnimatedFrameCountVariation = default(UInt32);
            item.Flags = default(EffectShader.Flag);
            item.FillTextureScaleU = default(Single);
            item.FillTextureScaleV = default(Single);
            item.SceneGraphEmitDepthLimit = default(UInt32);
            item.DATADataTypeState = default(EffectShader.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IEffectShaderInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IEffectShaderInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IEffectShader obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.AddonModels.Relink(mapping);
            obj.AmbientSound.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IEffectShader obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.FillTexture != null)
            {
                yield return obj.FillTexture;
            }
            if (obj.ParticleShaderTexture != null)
            {
                yield return obj.ParticleShaderTexture;
            }
            if (obj.HolesTexture != null)
            {
                yield return obj.HolesTexture;
            }
            if (obj.MembranePaletteTexture != null)
            {
                yield return obj.MembranePaletteTexture;
            }
            if (obj.ParticlePaletteTexture != null)
            {
                yield return obj.ParticlePaletteTexture;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IEffectShader obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                obj.FillTexture?.Relink(mapping);
                obj.ParticleShaderTexture?.Relink(mapping);
                obj.HolesTexture?.Relink(mapping);
                obj.MembranePaletteTexture?.Relink(mapping);
                obj.ParticlePaletteTexture?.Relink(mapping);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IEffectShaderInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IEffectShaderInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: EffectShaderBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: EffectShaderBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (EffectShader)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (EffectShader)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class EffectShaderCommon : SkyrimMajorRecordCommon
    {
        public new static readonly EffectShaderCommon Instance = new EffectShaderCommon();

        public EffectShader.Mask<bool> GetEqualsMask(
            IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new EffectShader.Mask<bool>(false);
            ((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IEffectShaderGetter item,
            IEffectShaderGetter rhs,
            EffectShader.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.FillTexture = object.Equals(item.FillTexture, rhs.FillTexture);
            ret.ParticleShaderTexture = object.Equals(item.ParticleShaderTexture, rhs.ParticleShaderTexture);
            ret.HolesTexture = object.Equals(item.HolesTexture, rhs.HolesTexture);
            ret.MembranePaletteTexture = object.Equals(item.MembranePaletteTexture, rhs.MembranePaletteTexture);
            ret.ParticlePaletteTexture = object.Equals(item.ParticlePaletteTexture, rhs.ParticlePaletteTexture);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.MembraneSourceBlendMode = item.MembraneSourceBlendMode == rhs.MembraneSourceBlendMode;
            ret.MembraneBlendOperation = item.MembraneBlendOperation == rhs.MembraneBlendOperation;
            ret.MembraneZTest = item.MembraneZTest == rhs.MembraneZTest;
            ret.FillColorKey1 = item.FillColorKey1.ColorOnlyEquals(rhs.FillColorKey1);
            ret.FillAlphaFadeInTime = item.FillAlphaFadeInTime.EqualsWithin(rhs.FillAlphaFadeInTime);
            ret.FillFullAlphaTime = item.FillFullAlphaTime.EqualsWithin(rhs.FillFullAlphaTime);
            ret.FillFadeOutTime = item.FillFadeOutTime.EqualsWithin(rhs.FillFadeOutTime);
            ret.FillPersistentAlphaRatio = item.FillPersistentAlphaRatio.EqualsWithin(rhs.FillPersistentAlphaRatio);
            ret.FillAlphaPulseAmplitude = item.FillAlphaPulseAmplitude.EqualsWithin(rhs.FillAlphaPulseAmplitude);
            ret.FillAlphaPulseFrequency = item.FillAlphaPulseFrequency.EqualsWithin(rhs.FillAlphaPulseFrequency);
            ret.FillTextureAnimationSpeedU = item.FillTextureAnimationSpeedU.EqualsWithin(rhs.FillTextureAnimationSpeedU);
            ret.FillTextureAnimationSpeedV = item.FillTextureAnimationSpeedV.EqualsWithin(rhs.FillTextureAnimationSpeedV);
            ret.EdgeEffectFallOff = item.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff);
            ret.EdgeEffectColor = item.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor);
            ret.EdgeEffectAlphaFadeInTime = item.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime);
            ret.EdgeEffectFullAlphaTime = item.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime);
            ret.EdgeEffectAlphaFadeOutTime = item.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime);
            ret.EdgeEffectPersistentAlphaRatio = item.EdgeEffectPersistentAlphaRatio.EqualsWithin(rhs.EdgeEffectPersistentAlphaRatio);
            ret.EdgeEffectAlphaPulseAmplitude = item.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude);
            ret.EdgeEffectAlphaPulseFrequency = item.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency);
            ret.FillFullAlphaRatio = item.FillFullAlphaRatio.EqualsWithin(rhs.FillFullAlphaRatio);
            ret.EdgeEffectFullAlphaRatio = item.EdgeEffectFullAlphaRatio.EqualsWithin(rhs.EdgeEffectFullAlphaRatio);
            ret.MembraneDestBlendMode = item.MembraneDestBlendMode == rhs.MembraneDestBlendMode;
            ret.ParticleSourceBlendMode = item.ParticleSourceBlendMode == rhs.ParticleSourceBlendMode;
            ret.ParticleBlendOperation = item.ParticleBlendOperation == rhs.ParticleBlendOperation;
            ret.ParticleZTest = item.ParticleZTest == rhs.ParticleZTest;
            ret.ParticleDestBlendMode = item.ParticleDestBlendMode == rhs.ParticleDestBlendMode;
            ret.ParticleBirthRampUpTime = item.ParticleBirthRampUpTime.EqualsWithin(rhs.ParticleBirthRampUpTime);
            ret.ParticleFullBirthTime = item.ParticleFullBirthTime.EqualsWithin(rhs.ParticleFullBirthTime);
            ret.ParticleBirthRampDownTime = item.ParticleBirthRampDownTime.EqualsWithin(rhs.ParticleBirthRampDownTime);
            ret.ParticleFullBirthRatio = item.ParticleFullBirthRatio.EqualsWithin(rhs.ParticleFullBirthRatio);
            ret.ParticlePeristentCount = item.ParticlePeristentCount.EqualsWithin(rhs.ParticlePeristentCount);
            ret.ParticleLifetime = item.ParticleLifetime.EqualsWithin(rhs.ParticleLifetime);
            ret.ParticleLifetimePlusMinus = item.ParticleLifetimePlusMinus.EqualsWithin(rhs.ParticleLifetimePlusMinus);
            ret.ParticleInitialSpeedAlongNormal = item.ParticleInitialSpeedAlongNormal.EqualsWithin(rhs.ParticleInitialSpeedAlongNormal);
            ret.ParticleAccelerationAlongNormal = item.ParticleAccelerationAlongNormal.EqualsWithin(rhs.ParticleAccelerationAlongNormal);
            ret.ParticleInitialVelocity1 = item.ParticleInitialVelocity1.EqualsWithin(rhs.ParticleInitialVelocity1);
            ret.ParticleInitialVelocity2 = item.ParticleInitialVelocity2.EqualsWithin(rhs.ParticleInitialVelocity2);
            ret.ParticleInitialVelocity3 = item.ParticleInitialVelocity3.EqualsWithin(rhs.ParticleInitialVelocity3);
            ret.ParticleAcceleration1 = item.ParticleAcceleration1.EqualsWithin(rhs.ParticleAcceleration1);
            ret.ParticleAcceleration2 = item.ParticleAcceleration2.EqualsWithin(rhs.ParticleAcceleration2);
            ret.ParticleAcceleration3 = item.ParticleAcceleration3.EqualsWithin(rhs.ParticleAcceleration3);
            ret.ParticleScaleKey1 = item.ParticleScaleKey1.EqualsWithin(rhs.ParticleScaleKey1);
            ret.ParticleScaleKey2 = item.ParticleScaleKey2.EqualsWithin(rhs.ParticleScaleKey2);
            ret.ParticleScaleKey1Time = item.ParticleScaleKey1Time.EqualsWithin(rhs.ParticleScaleKey1Time);
            ret.ParticleScaleKey2Time = item.ParticleScaleKey2Time.EqualsWithin(rhs.ParticleScaleKey2Time);
            ret.ColorKey1 = item.ColorKey1.ColorOnlyEquals(rhs.ColorKey1);
            ret.ColorKey2 = item.ColorKey2.ColorOnlyEquals(rhs.ColorKey2);
            ret.ColorKey3 = item.ColorKey3.ColorOnlyEquals(rhs.ColorKey3);
            ret.ColorKey1Alpha = item.ColorKey1Alpha.EqualsWithin(rhs.ColorKey1Alpha);
            ret.ColorKey2Alpha = item.ColorKey2Alpha.EqualsWithin(rhs.ColorKey2Alpha);
            ret.ColorKey3Alpha = item.ColorKey3Alpha.EqualsWithin(rhs.ColorKey3Alpha);
            ret.ColorKey1Time = item.ColorKey1Time.EqualsWithin(rhs.ColorKey1Time);
            ret.ColorKey2Time = item.ColorKey2Time.EqualsWithin(rhs.ColorKey2Time);
            ret.ColorKey3Time = item.ColorKey3Time.EqualsWithin(rhs.ColorKey3Time);
            ret.ParticleInitialSpeedAlongNormalPlusMinus = item.ParticleInitialSpeedAlongNormalPlusMinus.EqualsWithin(rhs.ParticleInitialSpeedAlongNormalPlusMinus);
            ret.ParticleInitialRotationDegree = item.ParticleInitialRotationDegree.EqualsWithin(rhs.ParticleInitialRotationDegree);
            ret.ParticleInitialRotationDegreePlusMinus = item.ParticleInitialRotationDegreePlusMinus.EqualsWithin(rhs.ParticleInitialRotationDegreePlusMinus);
            ret.ParticleRotationSpeedDegreePerSec = item.ParticleRotationSpeedDegreePerSec.EqualsWithin(rhs.ParticleRotationSpeedDegreePerSec);
            ret.ParticleRotationSpeedDegreePerSecPlusMinus = item.ParticleRotationSpeedDegreePerSecPlusMinus.EqualsWithin(rhs.ParticleRotationSpeedDegreePerSecPlusMinus);
            ret.AddonModels = item.AddonModels.Equals(rhs.AddonModels);
            ret.HolesStartTime = item.HolesStartTime.EqualsWithin(rhs.HolesStartTime);
            ret.HolesEndTime = item.HolesEndTime.EqualsWithin(rhs.HolesEndTime);
            ret.HolesStartValue = item.HolesStartValue.EqualsWithin(rhs.HolesStartValue);
            ret.HolesEndValue = item.HolesEndValue.EqualsWithin(rhs.HolesEndValue);
            ret.EdgeWidth = item.EdgeWidth.EqualsWithin(rhs.EdgeWidth);
            ret.EdgeColor = item.EdgeColor.ColorOnlyEquals(rhs.EdgeColor);
            ret.ExplosionWindSpeed = item.ExplosionWindSpeed.EqualsWithin(rhs.ExplosionWindSpeed);
            ret.TextureCountU = item.TextureCountU == rhs.TextureCountU;
            ret.TextureCountV = item.TextureCountV == rhs.TextureCountV;
            ret.AddonModelsFadeInTime = item.AddonModelsFadeInTime.EqualsWithin(rhs.AddonModelsFadeInTime);
            ret.AddonModelsFadeOutTime = item.AddonModelsFadeOutTime.EqualsWithin(rhs.AddonModelsFadeOutTime);
            ret.AddonModelsScaleStart = item.AddonModelsScaleStart.EqualsWithin(rhs.AddonModelsScaleStart);
            ret.AddonModelsScaleEnd = item.AddonModelsScaleEnd.EqualsWithin(rhs.AddonModelsScaleEnd);
            ret.AddonModelsScaleInTime = item.AddonModelsScaleInTime.EqualsWithin(rhs.AddonModelsScaleInTime);
            ret.AddonModelsScaleOutTime = item.AddonModelsScaleOutTime.EqualsWithin(rhs.AddonModelsScaleOutTime);
            ret.AmbientSound = item.AmbientSound.Equals(rhs.AmbientSound);
            ret.FillColorKey2 = item.FillColorKey2.ColorOnlyEquals(rhs.FillColorKey2);
            ret.FillColorKey3 = item.FillColorKey3.ColorOnlyEquals(rhs.FillColorKey3);
            ret.FillColorKey1Scale = item.FillColorKey1Scale.EqualsWithin(rhs.FillColorKey1Scale);
            ret.FillColorKey2Scale = item.FillColorKey2Scale.EqualsWithin(rhs.FillColorKey2Scale);
            ret.FillColorKey3Scale = item.FillColorKey3Scale.EqualsWithin(rhs.FillColorKey3Scale);
            ret.FillColorKey1Time = item.FillColorKey1Time.EqualsWithin(rhs.FillColorKey1Time);
            ret.FillColorKey2Time = item.FillColorKey2Time.EqualsWithin(rhs.FillColorKey2Time);
            ret.FillColorKey3Time = item.FillColorKey3Time.EqualsWithin(rhs.FillColorKey3Time);
            ret.ColorScale = item.ColorScale.EqualsWithin(rhs.ColorScale);
            ret.BirthPositionOffset = item.BirthPositionOffset.EqualsWithin(rhs.BirthPositionOffset);
            ret.BirthPositionOffsetRangePlusMinus = item.BirthPositionOffsetRangePlusMinus.EqualsWithin(rhs.BirthPositionOffsetRangePlusMinus);
            ret.ParticleAnimatedStartFrame = item.ParticleAnimatedStartFrame == rhs.ParticleAnimatedStartFrame;
            ret.ParticleAnimatedStartFrameVariation = item.ParticleAnimatedStartFrameVariation == rhs.ParticleAnimatedStartFrameVariation;
            ret.ParticleAnimatedEndFrame = item.ParticleAnimatedEndFrame == rhs.ParticleAnimatedEndFrame;
            ret.ParticleAnimatedLoopStartFrame = item.ParticleAnimatedLoopStartFrame == rhs.ParticleAnimatedLoopStartFrame;
            ret.ParticleAnimatedLoopStartVariation = item.ParticleAnimatedLoopStartVariation == rhs.ParticleAnimatedLoopStartVariation;
            ret.ParticleAnimatedFrameCount = item.ParticleAnimatedFrameCount == rhs.ParticleAnimatedFrameCount;
            ret.ParticleAnimatedFrameCountVariation = item.ParticleAnimatedFrameCountVariation == rhs.ParticleAnimatedFrameCountVariation;
            ret.Flags = item.Flags == rhs.Flags;
            ret.FillTextureScaleU = item.FillTextureScaleU.EqualsWithin(rhs.FillTextureScaleU);
            ret.FillTextureScaleV = item.FillTextureScaleV.EqualsWithin(rhs.FillTextureScaleV);
            ret.SceneGraphEmitDepthLimit = item.SceneGraphEmitDepthLimit == rhs.SceneGraphEmitDepthLimit;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IEffectShaderGetter item,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IEffectShaderGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            EffectShader.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"EffectShader =>");
            }
            else
            {
                sb.AppendLine($"{name} (EffectShader) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IEffectShaderGetter item,
            StructuredStringBuilder sb,
            EffectShader.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.FillTexture ?? true)
                && item.FillTexture is {} FillTextureItem)
            {
                sb.AppendItem(FillTextureItem, "FillTexture");
            }
            if ((printMask?.ParticleShaderTexture ?? true)
                && item.ParticleShaderTexture is {} ParticleShaderTextureItem)
            {
                sb.AppendItem(ParticleShaderTextureItem, "ParticleShaderTexture");
            }
            if ((printMask?.HolesTexture ?? true)
                && item.HolesTexture is {} HolesTextureItem)
            {
                sb.AppendItem(HolesTextureItem, "HolesTexture");
            }
            if ((printMask?.MembranePaletteTexture ?? true)
                && item.MembranePaletteTexture is {} MembranePaletteTextureItem)
            {
                sb.AppendItem(MembranePaletteTextureItem, "MembranePaletteTexture");
            }
            if ((printMask?.ParticlePaletteTexture ?? true)
                && item.ParticlePaletteTexture is {} ParticlePaletteTextureItem)
            {
                sb.AppendItem(ParticlePaletteTextureItem, "ParticlePaletteTexture");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.MembraneSourceBlendMode ?? true)
            {
                sb.AppendItem(item.MembraneSourceBlendMode, "MembraneSourceBlendMode");
            }
            if (printMask?.MembraneBlendOperation ?? true)
            {
                sb.AppendItem(item.MembraneBlendOperation, "MembraneBlendOperation");
            }
            if (printMask?.MembraneZTest ?? true)
            {
                sb.AppendItem(item.MembraneZTest, "MembraneZTest");
            }
            if (printMask?.FillColorKey1 ?? true)
            {
                sb.AppendItem(item.FillColorKey1, "FillColorKey1");
            }
            if (printMask?.FillAlphaFadeInTime ?? true)
            {
                sb.AppendItem(item.FillAlphaFadeInTime, "FillAlphaFadeInTime");
            }
            if (printMask?.FillFullAlphaTime ?? true)
            {
                sb.AppendItem(item.FillFullAlphaTime, "FillFullAlphaTime");
            }
            if (printMask?.FillFadeOutTime ?? true)
            {
                sb.AppendItem(item.FillFadeOutTime, "FillFadeOutTime");
            }
            if (printMask?.FillPersistentAlphaRatio ?? true)
            {
                sb.AppendItem(item.FillPersistentAlphaRatio, "FillPersistentAlphaRatio");
            }
            if (printMask?.FillAlphaPulseAmplitude ?? true)
            {
                sb.AppendItem(item.FillAlphaPulseAmplitude, "FillAlphaPulseAmplitude");
            }
            if (printMask?.FillAlphaPulseFrequency ?? true)
            {
                sb.AppendItem(item.FillAlphaPulseFrequency, "FillAlphaPulseFrequency");
            }
            if (printMask?.FillTextureAnimationSpeedU ?? true)
            {
                sb.AppendItem(item.FillTextureAnimationSpeedU, "FillTextureAnimationSpeedU");
            }
            if (printMask?.FillTextureAnimationSpeedV ?? true)
            {
                sb.AppendItem(item.FillTextureAnimationSpeedV, "FillTextureAnimationSpeedV");
            }
            if (printMask?.EdgeEffectFallOff ?? true)
            {
                sb.AppendItem(item.EdgeEffectFallOff, "EdgeEffectFallOff");
            }
            if (printMask?.EdgeEffectColor ?? true)
            {
                sb.AppendItem(item.EdgeEffectColor, "EdgeEffectColor");
            }
            if (printMask?.EdgeEffectAlphaFadeInTime ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaFadeInTime, "EdgeEffectAlphaFadeInTime");
            }
            if (printMask?.EdgeEffectFullAlphaTime ?? true)
            {
                sb.AppendItem(item.EdgeEffectFullAlphaTime, "EdgeEffectFullAlphaTime");
            }
            if (printMask?.EdgeEffectAlphaFadeOutTime ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaFadeOutTime, "EdgeEffectAlphaFadeOutTime");
            }
            if (printMask?.EdgeEffectPersistentAlphaRatio ?? true)
            {
                sb.AppendItem(item.EdgeEffectPersistentAlphaRatio, "EdgeEffectPersistentAlphaRatio");
            }
            if (printMask?.EdgeEffectAlphaPulseAmplitude ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaPulseAmplitude, "EdgeEffectAlphaPulseAmplitude");
            }
            if (printMask?.EdgeEffectAlphaPulseFrequency ?? true)
            {
                sb.AppendItem(item.EdgeEffectAlphaPulseFrequency, "EdgeEffectAlphaPulseFrequency");
            }
            if (printMask?.FillFullAlphaRatio ?? true)
            {
                sb.AppendItem(item.FillFullAlphaRatio, "FillFullAlphaRatio");
            }
            if (printMask?.EdgeEffectFullAlphaRatio ?? true)
            {
                sb.AppendItem(item.EdgeEffectFullAlphaRatio, "EdgeEffectFullAlphaRatio");
            }
            if (printMask?.MembraneDestBlendMode ?? true)
            {
                sb.AppendItem(item.MembraneDestBlendMode, "MembraneDestBlendMode");
            }
            if (printMask?.ParticleSourceBlendMode ?? true)
            {
                sb.AppendItem(item.ParticleSourceBlendMode, "ParticleSourceBlendMode");
            }
            if (printMask?.ParticleBlendOperation ?? true)
            {
                sb.AppendItem(item.ParticleBlendOperation, "ParticleBlendOperation");
            }
            if (printMask?.ParticleZTest ?? true)
            {
                sb.AppendItem(item.ParticleZTest, "ParticleZTest");
            }
            if (printMask?.ParticleDestBlendMode ?? true)
            {
                sb.AppendItem(item.ParticleDestBlendMode, "ParticleDestBlendMode");
            }
            if (printMask?.ParticleBirthRampUpTime ?? true)
            {
                sb.AppendItem(item.ParticleBirthRampUpTime, "ParticleBirthRampUpTime");
            }
            if (printMask?.ParticleFullBirthTime ?? true)
            {
                sb.AppendItem(item.ParticleFullBirthTime, "ParticleFullBirthTime");
            }
            if (printMask?.ParticleBirthRampDownTime ?? true)
            {
                sb.AppendItem(item.ParticleBirthRampDownTime, "ParticleBirthRampDownTime");
            }
            if (printMask?.ParticleFullBirthRatio ?? true)
            {
                sb.AppendItem(item.ParticleFullBirthRatio, "ParticleFullBirthRatio");
            }
            if (printMask?.ParticlePeristentCount ?? true)
            {
                sb.AppendItem(item.ParticlePeristentCount, "ParticlePeristentCount");
            }
            if (printMask?.ParticleLifetime ?? true)
            {
                sb.AppendItem(item.ParticleLifetime, "ParticleLifetime");
            }
            if (printMask?.ParticleLifetimePlusMinus ?? true)
            {
                sb.AppendItem(item.ParticleLifetimePlusMinus, "ParticleLifetimePlusMinus");
            }
            if (printMask?.ParticleInitialSpeedAlongNormal ?? true)
            {
                sb.AppendItem(item.ParticleInitialSpeedAlongNormal, "ParticleInitialSpeedAlongNormal");
            }
            if (printMask?.ParticleAccelerationAlongNormal ?? true)
            {
                sb.AppendItem(item.ParticleAccelerationAlongNormal, "ParticleAccelerationAlongNormal");
            }
            if (printMask?.ParticleInitialVelocity1 ?? true)
            {
                sb.AppendItem(item.ParticleInitialVelocity1, "ParticleInitialVelocity1");
            }
            if (printMask?.ParticleInitialVelocity2 ?? true)
            {
                sb.AppendItem(item.ParticleInitialVelocity2, "ParticleInitialVelocity2");
            }
            if (printMask?.ParticleInitialVelocity3 ?? true)
            {
                sb.AppendItem(item.ParticleInitialVelocity3, "ParticleInitialVelocity3");
            }
            if (printMask?.ParticleAcceleration1 ?? true)
            {
                sb.AppendItem(item.ParticleAcceleration1, "ParticleAcceleration1");
            }
            if (printMask?.ParticleAcceleration2 ?? true)
            {
                sb.AppendItem(item.ParticleAcceleration2, "ParticleAcceleration2");
            }
            if (printMask?.ParticleAcceleration3 ?? true)
            {
                sb.AppendItem(item.ParticleAcceleration3, "ParticleAcceleration3");
            }
            if (printMask?.ParticleScaleKey1 ?? true)
            {
                sb.AppendItem(item.ParticleScaleKey1, "ParticleScaleKey1");
            }
            if (printMask?.ParticleScaleKey2 ?? true)
            {
                sb.AppendItem(item.ParticleScaleKey2, "ParticleScaleKey2");
            }
            if (printMask?.ParticleScaleKey1Time ?? true)
            {
                sb.AppendItem(item.ParticleScaleKey1Time, "ParticleScaleKey1Time");
            }
            if (printMask?.ParticleScaleKey2Time ?? true)
            {
                sb.AppendItem(item.ParticleScaleKey2Time, "ParticleScaleKey2Time");
            }
            if (printMask?.ColorKey1 ?? true)
            {
                sb.AppendItem(item.ColorKey1, "ColorKey1");
            }
            if (printMask?.ColorKey2 ?? true)
            {
                sb.AppendItem(item.ColorKey2, "ColorKey2");
            }
            if (printMask?.ColorKey3 ?? true)
            {
                sb.AppendItem(item.ColorKey3, "ColorKey3");
            }
            if (printMask?.ColorKey1Alpha ?? true)
            {
                sb.AppendItem(item.ColorKey1Alpha, "ColorKey1Alpha");
            }
            if (printMask?.ColorKey2Alpha ?? true)
            {
                sb.AppendItem(item.ColorKey2Alpha, "ColorKey2Alpha");
            }
            if (printMask?.ColorKey3Alpha ?? true)
            {
                sb.AppendItem(item.ColorKey3Alpha, "ColorKey3Alpha");
            }
            if (printMask?.ColorKey1Time ?? true)
            {
                sb.AppendItem(item.ColorKey1Time, "ColorKey1Time");
            }
            if (printMask?.ColorKey2Time ?? true)
            {
                sb.AppendItem(item.ColorKey2Time, "ColorKey2Time");
            }
            if (printMask?.ColorKey3Time ?? true)
            {
                sb.AppendItem(item.ColorKey3Time, "ColorKey3Time");
            }
            if (printMask?.ParticleInitialSpeedAlongNormalPlusMinus ?? true)
            {
                sb.AppendItem(item.ParticleInitialSpeedAlongNormalPlusMinus, "ParticleInitialSpeedAlongNormalPlusMinus");
            }
            if (printMask?.ParticleInitialRotationDegree ?? true)
            {
                sb.AppendItem(item.ParticleInitialRotationDegree, "ParticleInitialRotationDegree");
            }
            if (printMask?.ParticleInitialRotationDegreePlusMinus ?? true)
            {
                sb.AppendItem(item.ParticleInitialRotationDegreePlusMinus, "ParticleInitialRotationDegreePlusMinus");
            }
            if (printMask?.ParticleRotationSpeedDegreePerSec ?? true)
            {
                sb.AppendItem(item.ParticleRotationSpeedDegreePerSec, "ParticleRotationSpeedDegreePerSec");
            }
            if (printMask?.ParticleRotationSpeedDegreePerSecPlusMinus ?? true)
            {
                sb.AppendItem(item.ParticleRotationSpeedDegreePerSecPlusMinus, "ParticleRotationSpeedDegreePerSecPlusMinus");
            }
            if (printMask?.AddonModels ?? true)
            {
                sb.AppendItem(item.AddonModels.FormKey, "AddonModels");
            }
            if (printMask?.HolesStartTime ?? true)
            {
                sb.AppendItem(item.HolesStartTime, "HolesStartTime");
            }
            if (printMask?.HolesEndTime ?? true)
            {
                sb.AppendItem(item.HolesEndTime, "HolesEndTime");
            }
            if (printMask?.HolesStartValue ?? true)
            {
                sb.AppendItem(item.HolesStartValue, "HolesStartValue");
            }
            if (printMask?.HolesEndValue ?? true)
            {
                sb.AppendItem(item.HolesEndValue, "HolesEndValue");
            }
            if (printMask?.EdgeWidth ?? true)
            {
                sb.AppendItem(item.EdgeWidth, "EdgeWidth");
            }
            if (printMask?.EdgeColor ?? true)
            {
                sb.AppendItem(item.EdgeColor, "EdgeColor");
            }
            if (printMask?.ExplosionWindSpeed ?? true)
            {
                sb.AppendItem(item.ExplosionWindSpeed, "ExplosionWindSpeed");
            }
            if (printMask?.TextureCountU ?? true)
            {
                sb.AppendItem(item.TextureCountU, "TextureCountU");
            }
            if (printMask?.TextureCountV ?? true)
            {
                sb.AppendItem(item.TextureCountV, "TextureCountV");
            }
            if (printMask?.AddonModelsFadeInTime ?? true)
            {
                sb.AppendItem(item.AddonModelsFadeInTime, "AddonModelsFadeInTime");
            }
            if (printMask?.AddonModelsFadeOutTime ?? true)
            {
                sb.AppendItem(item.AddonModelsFadeOutTime, "AddonModelsFadeOutTime");
            }
            if (printMask?.AddonModelsScaleStart ?? true)
            {
                sb.AppendItem(item.AddonModelsScaleStart, "AddonModelsScaleStart");
            }
            if (printMask?.AddonModelsScaleEnd ?? true)
            {
                sb.AppendItem(item.AddonModelsScaleEnd, "AddonModelsScaleEnd");
            }
            if (printMask?.AddonModelsScaleInTime ?? true)
            {
                sb.AppendItem(item.AddonModelsScaleInTime, "AddonModelsScaleInTime");
            }
            if (printMask?.AddonModelsScaleOutTime ?? true)
            {
                sb.AppendItem(item.AddonModelsScaleOutTime, "AddonModelsScaleOutTime");
            }
            if (printMask?.AmbientSound ?? true)
            {
                sb.AppendItem(item.AmbientSound.FormKey, "AmbientSound");
            }
            if (printMask?.FillColorKey2 ?? true)
            {
                sb.AppendItem(item.FillColorKey2, "FillColorKey2");
            }
            if (printMask?.FillColorKey3 ?? true)
            {
                sb.AppendItem(item.FillColorKey3, "FillColorKey3");
            }
            if (printMask?.FillColorKey1Scale ?? true)
            {
                sb.AppendItem(item.FillColorKey1Scale, "FillColorKey1Scale");
            }
            if (printMask?.FillColorKey2Scale ?? true)
            {
                sb.AppendItem(item.FillColorKey2Scale, "FillColorKey2Scale");
            }
            if (printMask?.FillColorKey3Scale ?? true)
            {
                sb.AppendItem(item.FillColorKey3Scale, "FillColorKey3Scale");
            }
            if (printMask?.FillColorKey1Time ?? true)
            {
                sb.AppendItem(item.FillColorKey1Time, "FillColorKey1Time");
            }
            if (printMask?.FillColorKey2Time ?? true)
            {
                sb.AppendItem(item.FillColorKey2Time, "FillColorKey2Time");
            }
            if (printMask?.FillColorKey3Time ?? true)
            {
                sb.AppendItem(item.FillColorKey3Time, "FillColorKey3Time");
            }
            if (printMask?.ColorScale ?? true)
            {
                sb.AppendItem(item.ColorScale, "ColorScale");
            }
            if (printMask?.BirthPositionOffset ?? true)
            {
                sb.AppendItem(item.BirthPositionOffset, "BirthPositionOffset");
            }
            if (printMask?.BirthPositionOffsetRangePlusMinus ?? true)
            {
                sb.AppendItem(item.BirthPositionOffsetRangePlusMinus, "BirthPositionOffsetRangePlusMinus");
            }
            if (printMask?.ParticleAnimatedStartFrame ?? true)
            {
                sb.AppendItem(item.ParticleAnimatedStartFrame, "ParticleAnimatedStartFrame");
            }
            if (printMask?.ParticleAnimatedStartFrameVariation ?? true)
            {
                sb.AppendItem(item.ParticleAnimatedStartFrameVariation, "ParticleAnimatedStartFrameVariation");
            }
            if (printMask?.ParticleAnimatedEndFrame ?? true)
            {
                sb.AppendItem(item.ParticleAnimatedEndFrame, "ParticleAnimatedEndFrame");
            }
            if (printMask?.ParticleAnimatedLoopStartFrame ?? true)
            {
                sb.AppendItem(item.ParticleAnimatedLoopStartFrame, "ParticleAnimatedLoopStartFrame");
            }
            if (printMask?.ParticleAnimatedLoopStartVariation ?? true)
            {
                sb.AppendItem(item.ParticleAnimatedLoopStartVariation, "ParticleAnimatedLoopStartVariation");
            }
            if (printMask?.ParticleAnimatedFrameCount ?? true)
            {
                sb.AppendItem(item.ParticleAnimatedFrameCount, "ParticleAnimatedFrameCount");
            }
            if (printMask?.ParticleAnimatedFrameCountVariation ?? true)
            {
                sb.AppendItem(item.ParticleAnimatedFrameCountVariation, "ParticleAnimatedFrameCountVariation");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.FillTextureScaleU ?? true)
            {
                sb.AppendItem(item.FillTextureScaleU, "FillTextureScaleU");
            }
            if (printMask?.FillTextureScaleV ?? true)
            {
                sb.AppendItem(item.FillTextureScaleV, "FillTextureScaleV");
            }
            if (printMask?.SceneGraphEmitDepthLimit ?? true)
            {
                sb.AppendItem(item.SceneGraphEmitDepthLimit, "SceneGraphEmitDepthLimit");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                sb.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static EffectShader_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (EffectShader_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (EffectShader_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (EffectShader_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (EffectShader_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (EffectShader_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (EffectShader_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (EffectShader_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new EffectShader_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (EffectShader_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (EffectShader_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IEffectShaderGetter? lhs,
            IEffectShaderGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTexture) ?? true))
            {
                if (!object.Equals(lhs.FillTexture, rhs.FillTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleShaderTexture) ?? true))
            {
                if (!object.Equals(lhs.ParticleShaderTexture, rhs.ParticleShaderTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesTexture) ?? true))
            {
                if (!object.Equals(lhs.HolesTexture, rhs.HolesTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembranePaletteTexture) ?? true))
            {
                if (!object.Equals(lhs.MembranePaletteTexture, rhs.MembranePaletteTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticlePaletteTexture) ?? true))
            {
                if (!object.Equals(lhs.ParticlePaletteTexture, rhs.ParticlePaletteTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneSourceBlendMode) ?? true))
            {
                if (lhs.MembraneSourceBlendMode != rhs.MembraneSourceBlendMode) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneBlendOperation) ?? true))
            {
                if (lhs.MembraneBlendOperation != rhs.MembraneBlendOperation) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneZTest) ?? true))
            {
                if (lhs.MembraneZTest != rhs.MembraneZTest) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1) ?? true))
            {
                if (!lhs.FillColorKey1.ColorOnlyEquals(rhs.FillColorKey1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaFadeInTime) ?? true))
            {
                if (!lhs.FillAlphaFadeInTime.EqualsWithin(rhs.FillAlphaFadeInTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFullAlphaTime) ?? true))
            {
                if (!lhs.FillFullAlphaTime.EqualsWithin(rhs.FillFullAlphaTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFadeOutTime) ?? true))
            {
                if (!lhs.FillFadeOutTime.EqualsWithin(rhs.FillFadeOutTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillPersistentAlphaRatio) ?? true))
            {
                if (!lhs.FillPersistentAlphaRatio.EqualsWithin(rhs.FillPersistentAlphaRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaPulseAmplitude) ?? true))
            {
                if (!lhs.FillAlphaPulseAmplitude.EqualsWithin(rhs.FillAlphaPulseAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaPulseFrequency) ?? true))
            {
                if (!lhs.FillAlphaPulseFrequency.EqualsWithin(rhs.FillAlphaPulseFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureAnimationSpeedU) ?? true))
            {
                if (!lhs.FillTextureAnimationSpeedU.EqualsWithin(rhs.FillTextureAnimationSpeedU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureAnimationSpeedV) ?? true))
            {
                if (!lhs.FillTextureAnimationSpeedV.EqualsWithin(rhs.FillTextureAnimationSpeedV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFallOff) ?? true))
            {
                if (!lhs.EdgeEffectFallOff.EqualsWithin(rhs.EdgeEffectFallOff)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectColor) ?? true))
            {
                if (!lhs.EdgeEffectColor.ColorOnlyEquals(rhs.EdgeEffectColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
            {
                if (!lhs.EdgeEffectAlphaFadeInTime.EqualsWithin(rhs.EdgeEffectAlphaFadeInTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
            {
                if (!lhs.EdgeEffectFullAlphaTime.EqualsWithin(rhs.EdgeEffectFullAlphaTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
            {
                if (!lhs.EdgeEffectAlphaFadeOutTime.EqualsWithin(rhs.EdgeEffectAlphaFadeOutTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
            {
                if (!lhs.EdgeEffectPersistentAlphaRatio.EqualsWithin(rhs.EdgeEffectPersistentAlphaRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
            {
                if (!lhs.EdgeEffectAlphaPulseAmplitude.EqualsWithin(rhs.EdgeEffectAlphaPulseAmplitude)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
            {
                if (!lhs.EdgeEffectAlphaPulseFrequency.EqualsWithin(rhs.EdgeEffectAlphaPulseFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFullAlphaRatio) ?? true))
            {
                if (!lhs.FillFullAlphaRatio.EqualsWithin(rhs.FillFullAlphaRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
            {
                if (!lhs.EdgeEffectFullAlphaRatio.EqualsWithin(rhs.EdgeEffectFullAlphaRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneDestBlendMode) ?? true))
            {
                if (lhs.MembraneDestBlendMode != rhs.MembraneDestBlendMode) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleSourceBlendMode) ?? true))
            {
                if (lhs.ParticleSourceBlendMode != rhs.ParticleSourceBlendMode) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleBlendOperation) ?? true))
            {
                if (lhs.ParticleBlendOperation != rhs.ParticleBlendOperation) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleZTest) ?? true))
            {
                if (lhs.ParticleZTest != rhs.ParticleZTest) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleDestBlendMode) ?? true))
            {
                if (lhs.ParticleDestBlendMode != rhs.ParticleDestBlendMode) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleBirthRampUpTime) ?? true))
            {
                if (!lhs.ParticleBirthRampUpTime.EqualsWithin(rhs.ParticleBirthRampUpTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleFullBirthTime) ?? true))
            {
                if (!lhs.ParticleFullBirthTime.EqualsWithin(rhs.ParticleFullBirthTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleBirthRampDownTime) ?? true))
            {
                if (!lhs.ParticleBirthRampDownTime.EqualsWithin(rhs.ParticleBirthRampDownTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleFullBirthRatio) ?? true))
            {
                if (!lhs.ParticleFullBirthRatio.EqualsWithin(rhs.ParticleFullBirthRatio)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticlePeristentCount) ?? true))
            {
                if (!lhs.ParticlePeristentCount.EqualsWithin(rhs.ParticlePeristentCount)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleLifetime) ?? true))
            {
                if (!lhs.ParticleLifetime.EqualsWithin(rhs.ParticleLifetime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleLifetimePlusMinus) ?? true))
            {
                if (!lhs.ParticleLifetimePlusMinus.EqualsWithin(rhs.ParticleLifetimePlusMinus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialSpeedAlongNormal) ?? true))
            {
                if (!lhs.ParticleInitialSpeedAlongNormal.EqualsWithin(rhs.ParticleInitialSpeedAlongNormal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAccelerationAlongNormal) ?? true))
            {
                if (!lhs.ParticleAccelerationAlongNormal.EqualsWithin(rhs.ParticleAccelerationAlongNormal)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialVelocity1) ?? true))
            {
                if (!lhs.ParticleInitialVelocity1.EqualsWithin(rhs.ParticleInitialVelocity1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialVelocity2) ?? true))
            {
                if (!lhs.ParticleInitialVelocity2.EqualsWithin(rhs.ParticleInitialVelocity2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialVelocity3) ?? true))
            {
                if (!lhs.ParticleInitialVelocity3.EqualsWithin(rhs.ParticleInitialVelocity3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAcceleration1) ?? true))
            {
                if (!lhs.ParticleAcceleration1.EqualsWithin(rhs.ParticleAcceleration1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAcceleration2) ?? true))
            {
                if (!lhs.ParticleAcceleration2.EqualsWithin(rhs.ParticleAcceleration2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAcceleration3) ?? true))
            {
                if (!lhs.ParticleAcceleration3.EqualsWithin(rhs.ParticleAcceleration3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleScaleKey1) ?? true))
            {
                if (!lhs.ParticleScaleKey1.EqualsWithin(rhs.ParticleScaleKey1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleScaleKey2) ?? true))
            {
                if (!lhs.ParticleScaleKey2.EqualsWithin(rhs.ParticleScaleKey2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleScaleKey1Time) ?? true))
            {
                if (!lhs.ParticleScaleKey1Time.EqualsWithin(rhs.ParticleScaleKey1Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleScaleKey2Time) ?? true))
            {
                if (!lhs.ParticleScaleKey2Time.EqualsWithin(rhs.ParticleScaleKey2Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1) ?? true))
            {
                if (!lhs.ColorKey1.ColorOnlyEquals(rhs.ColorKey1)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2) ?? true))
            {
                if (!lhs.ColorKey2.ColorOnlyEquals(rhs.ColorKey2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3) ?? true))
            {
                if (!lhs.ColorKey3.ColorOnlyEquals(rhs.ColorKey3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1Alpha) ?? true))
            {
                if (!lhs.ColorKey1Alpha.EqualsWithin(rhs.ColorKey1Alpha)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2Alpha) ?? true))
            {
                if (!lhs.ColorKey2Alpha.EqualsWithin(rhs.ColorKey2Alpha)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3Alpha) ?? true))
            {
                if (!lhs.ColorKey3Alpha.EqualsWithin(rhs.ColorKey3Alpha)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1Time) ?? true))
            {
                if (!lhs.ColorKey1Time.EqualsWithin(rhs.ColorKey1Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2Time) ?? true))
            {
                if (!lhs.ColorKey2Time.EqualsWithin(rhs.ColorKey2Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3Time) ?? true))
            {
                if (!lhs.ColorKey3Time.EqualsWithin(rhs.ColorKey3Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialSpeedAlongNormalPlusMinus) ?? true))
            {
                if (!lhs.ParticleInitialSpeedAlongNormalPlusMinus.EqualsWithin(rhs.ParticleInitialSpeedAlongNormalPlusMinus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialRotationDegree) ?? true))
            {
                if (!lhs.ParticleInitialRotationDegree.EqualsWithin(rhs.ParticleInitialRotationDegree)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialRotationDegreePlusMinus) ?? true))
            {
                if (!lhs.ParticleInitialRotationDegreePlusMinus.EqualsWithin(rhs.ParticleInitialRotationDegreePlusMinus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleRotationSpeedDegreePerSec) ?? true))
            {
                if (!lhs.ParticleRotationSpeedDegreePerSec.EqualsWithin(rhs.ParticleRotationSpeedDegreePerSec)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleRotationSpeedDegreePerSecPlusMinus) ?? true))
            {
                if (!lhs.ParticleRotationSpeedDegreePerSecPlusMinus.EqualsWithin(rhs.ParticleRotationSpeedDegreePerSecPlusMinus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModels) ?? true))
            {
                if (!lhs.AddonModels.Equals(rhs.AddonModels)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesStartTime) ?? true))
            {
                if (!lhs.HolesStartTime.EqualsWithin(rhs.HolesStartTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesEndTime) ?? true))
            {
                if (!lhs.HolesEndTime.EqualsWithin(rhs.HolesEndTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesStartValue) ?? true))
            {
                if (!lhs.HolesStartValue.EqualsWithin(rhs.HolesStartValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesEndValue) ?? true))
            {
                if (!lhs.HolesEndValue.EqualsWithin(rhs.HolesEndValue)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeWidth) ?? true))
            {
                if (!lhs.EdgeWidth.EqualsWithin(rhs.EdgeWidth)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeColor) ?? true))
            {
                if (!lhs.EdgeColor.ColorOnlyEquals(rhs.EdgeColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ExplosionWindSpeed) ?? true))
            {
                if (!lhs.ExplosionWindSpeed.EqualsWithin(rhs.ExplosionWindSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.TextureCountU) ?? true))
            {
                if (lhs.TextureCountU != rhs.TextureCountU) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.TextureCountV) ?? true))
            {
                if (lhs.TextureCountV != rhs.TextureCountV) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsFadeInTime) ?? true))
            {
                if (!lhs.AddonModelsFadeInTime.EqualsWithin(rhs.AddonModelsFadeInTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsFadeOutTime) ?? true))
            {
                if (!lhs.AddonModelsFadeOutTime.EqualsWithin(rhs.AddonModelsFadeOutTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsScaleStart) ?? true))
            {
                if (!lhs.AddonModelsScaleStart.EqualsWithin(rhs.AddonModelsScaleStart)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsScaleEnd) ?? true))
            {
                if (!lhs.AddonModelsScaleEnd.EqualsWithin(rhs.AddonModelsScaleEnd)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsScaleInTime) ?? true))
            {
                if (!lhs.AddonModelsScaleInTime.EqualsWithin(rhs.AddonModelsScaleInTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsScaleOutTime) ?? true))
            {
                if (!lhs.AddonModelsScaleOutTime.EqualsWithin(rhs.AddonModelsScaleOutTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AmbientSound) ?? true))
            {
                if (!lhs.AmbientSound.Equals(rhs.AmbientSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2) ?? true))
            {
                if (!lhs.FillColorKey2.ColorOnlyEquals(rhs.FillColorKey2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3) ?? true))
            {
                if (!lhs.FillColorKey3.ColorOnlyEquals(rhs.FillColorKey3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1Scale) ?? true))
            {
                if (!lhs.FillColorKey1Scale.EqualsWithin(rhs.FillColorKey1Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2Scale) ?? true))
            {
                if (!lhs.FillColorKey2Scale.EqualsWithin(rhs.FillColorKey2Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3Scale) ?? true))
            {
                if (!lhs.FillColorKey3Scale.EqualsWithin(rhs.FillColorKey3Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1Time) ?? true))
            {
                if (!lhs.FillColorKey1Time.EqualsWithin(rhs.FillColorKey1Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2Time) ?? true))
            {
                if (!lhs.FillColorKey2Time.EqualsWithin(rhs.FillColorKey2Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3Time) ?? true))
            {
                if (!lhs.FillColorKey3Time.EqualsWithin(rhs.FillColorKey3Time)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorScale) ?? true))
            {
                if (!lhs.ColorScale.EqualsWithin(rhs.ColorScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.BirthPositionOffset) ?? true))
            {
                if (!lhs.BirthPositionOffset.EqualsWithin(rhs.BirthPositionOffset)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.BirthPositionOffsetRangePlusMinus) ?? true))
            {
                if (!lhs.BirthPositionOffsetRangePlusMinus.EqualsWithin(rhs.BirthPositionOffsetRangePlusMinus)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedStartFrame) ?? true))
            {
                if (lhs.ParticleAnimatedStartFrame != rhs.ParticleAnimatedStartFrame) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedStartFrameVariation) ?? true))
            {
                if (lhs.ParticleAnimatedStartFrameVariation != rhs.ParticleAnimatedStartFrameVariation) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedEndFrame) ?? true))
            {
                if (lhs.ParticleAnimatedEndFrame != rhs.ParticleAnimatedEndFrame) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedLoopStartFrame) ?? true))
            {
                if (lhs.ParticleAnimatedLoopStartFrame != rhs.ParticleAnimatedLoopStartFrame) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedLoopStartVariation) ?? true))
            {
                if (lhs.ParticleAnimatedLoopStartVariation != rhs.ParticleAnimatedLoopStartVariation) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedFrameCount) ?? true))
            {
                if (lhs.ParticleAnimatedFrameCount != rhs.ParticleAnimatedFrameCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedFrameCountVariation) ?? true))
            {
                if (lhs.ParticleAnimatedFrameCountVariation != rhs.ParticleAnimatedFrameCountVariation) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureScaleU) ?? true))
            {
                if (!lhs.FillTextureScaleU.EqualsWithin(rhs.FillTextureScaleU)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureScaleV) ?? true))
            {
                if (!lhs.FillTextureScaleV.EqualsWithin(rhs.FillTextureScaleV)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.SceneGraphEmitDepthLimit) ?? true))
            {
                if (lhs.SceneGraphEmitDepthLimit != rhs.SceneGraphEmitDepthLimit) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)EffectShader_FieldIndex.DATADataTypeState) ?? true))
            {
                if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IEffectShaderGetter?)lhs,
                rhs: rhs as IEffectShaderGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IEffectShaderGetter?)lhs,
                rhs: rhs as IEffectShaderGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IEffectShaderGetter item)
        {
            var hash = new HashCode();
            if (item.FillTexture is {} FillTextureitem)
            {
                hash.Add(FillTextureitem);
            }
            if (item.ParticleShaderTexture is {} ParticleShaderTextureitem)
            {
                hash.Add(ParticleShaderTextureitem);
            }
            if (item.HolesTexture is {} HolesTextureitem)
            {
                hash.Add(HolesTextureitem);
            }
            if (item.MembranePaletteTexture is {} MembranePaletteTextureitem)
            {
                hash.Add(MembranePaletteTextureitem);
            }
            if (item.ParticlePaletteTexture is {} ParticlePaletteTextureitem)
            {
                hash.Add(ParticlePaletteTextureitem);
            }
            hash.Add(item.Unknown);
            hash.Add(item.MembraneSourceBlendMode);
            hash.Add(item.MembraneBlendOperation);
            hash.Add(item.MembraneZTest);
            hash.Add(item.FillColorKey1);
            hash.Add(item.FillAlphaFadeInTime);
            hash.Add(item.FillFullAlphaTime);
            hash.Add(item.FillFadeOutTime);
            hash.Add(item.FillPersistentAlphaRatio);
            hash.Add(item.FillAlphaPulseAmplitude);
            hash.Add(item.FillAlphaPulseFrequency);
            hash.Add(item.FillTextureAnimationSpeedU);
            hash.Add(item.FillTextureAnimationSpeedV);
            hash.Add(item.EdgeEffectFallOff);
            hash.Add(item.EdgeEffectColor);
            hash.Add(item.EdgeEffectAlphaFadeInTime);
            hash.Add(item.EdgeEffectFullAlphaTime);
            hash.Add(item.EdgeEffectAlphaFadeOutTime);
            hash.Add(item.EdgeEffectPersistentAlphaRatio);
            hash.Add(item.EdgeEffectAlphaPulseAmplitude);
            hash.Add(item.EdgeEffectAlphaPulseFrequency);
            hash.Add(item.FillFullAlphaRatio);
            hash.Add(item.EdgeEffectFullAlphaRatio);
            hash.Add(item.MembraneDestBlendMode);
            hash.Add(item.ParticleSourceBlendMode);
            hash.Add(item.ParticleBlendOperation);
            hash.Add(item.ParticleZTest);
            hash.Add(item.ParticleDestBlendMode);
            hash.Add(item.ParticleBirthRampUpTime);
            hash.Add(item.ParticleFullBirthTime);
            hash.Add(item.ParticleBirthRampDownTime);
            hash.Add(item.ParticleFullBirthRatio);
            hash.Add(item.ParticlePeristentCount);
            hash.Add(item.ParticleLifetime);
            hash.Add(item.ParticleLifetimePlusMinus);
            hash.Add(item.ParticleInitialSpeedAlongNormal);
            hash.Add(item.ParticleAccelerationAlongNormal);
            hash.Add(item.ParticleInitialVelocity1);
            hash.Add(item.ParticleInitialVelocity2);
            hash.Add(item.ParticleInitialVelocity3);
            hash.Add(item.ParticleAcceleration1);
            hash.Add(item.ParticleAcceleration2);
            hash.Add(item.ParticleAcceleration3);
            hash.Add(item.ParticleScaleKey1);
            hash.Add(item.ParticleScaleKey2);
            hash.Add(item.ParticleScaleKey1Time);
            hash.Add(item.ParticleScaleKey2Time);
            hash.Add(item.ColorKey1);
            hash.Add(item.ColorKey2);
            hash.Add(item.ColorKey3);
            hash.Add(item.ColorKey1Alpha);
            hash.Add(item.ColorKey2Alpha);
            hash.Add(item.ColorKey3Alpha);
            hash.Add(item.ColorKey1Time);
            hash.Add(item.ColorKey2Time);
            hash.Add(item.ColorKey3Time);
            hash.Add(item.ParticleInitialSpeedAlongNormalPlusMinus);
            hash.Add(item.ParticleInitialRotationDegree);
            hash.Add(item.ParticleInitialRotationDegreePlusMinus);
            hash.Add(item.ParticleRotationSpeedDegreePerSec);
            hash.Add(item.ParticleRotationSpeedDegreePerSecPlusMinus);
            hash.Add(item.AddonModels);
            hash.Add(item.HolesStartTime);
            hash.Add(item.HolesEndTime);
            hash.Add(item.HolesStartValue);
            hash.Add(item.HolesEndValue);
            hash.Add(item.EdgeWidth);
            hash.Add(item.EdgeColor);
            hash.Add(item.ExplosionWindSpeed);
            hash.Add(item.TextureCountU);
            hash.Add(item.TextureCountV);
            hash.Add(item.AddonModelsFadeInTime);
            hash.Add(item.AddonModelsFadeOutTime);
            hash.Add(item.AddonModelsScaleStart);
            hash.Add(item.AddonModelsScaleEnd);
            hash.Add(item.AddonModelsScaleInTime);
            hash.Add(item.AddonModelsScaleOutTime);
            hash.Add(item.AmbientSound);
            hash.Add(item.FillColorKey2);
            hash.Add(item.FillColorKey3);
            hash.Add(item.FillColorKey1Scale);
            hash.Add(item.FillColorKey2Scale);
            hash.Add(item.FillColorKey3Scale);
            hash.Add(item.FillColorKey1Time);
            hash.Add(item.FillColorKey2Time);
            hash.Add(item.FillColorKey3Time);
            hash.Add(item.ColorScale);
            hash.Add(item.BirthPositionOffset);
            hash.Add(item.BirthPositionOffsetRangePlusMinus);
            hash.Add(item.ParticleAnimatedStartFrame);
            hash.Add(item.ParticleAnimatedStartFrameVariation);
            hash.Add(item.ParticleAnimatedEndFrame);
            hash.Add(item.ParticleAnimatedLoopStartFrame);
            hash.Add(item.ParticleAnimatedLoopStartVariation);
            hash.Add(item.ParticleAnimatedFrameCount);
            hash.Add(item.ParticleAnimatedFrameCountVariation);
            hash.Add(item.Flags);
            hash.Add(item.FillTextureScaleU);
            hash.Add(item.FillTextureScaleV);
            hash.Add(item.SceneGraphEmitDepthLimit);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IEffectShaderGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IEffectShaderGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return EffectShader.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IEffectShaderGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.AddonModels);
            yield return FormLinkInformation.Factory(obj.AmbientSound);
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IEffectShaderGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                if (obj.FillTexture != null)
                {
                    yield return obj.FillTexture;
                }
                if (obj.ParticleShaderTexture != null)
                {
                    yield return obj.ParticleShaderTexture;
                }
                if (obj.HolesTexture != null)
                {
                    yield return obj.HolesTexture;
                }
                if (obj.MembranePaletteTexture != null)
                {
                    yield return obj.MembranePaletteTexture;
                }
                if (obj.ParticlePaletteTexture != null)
                {
                    yield return obj.ParticlePaletteTexture;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public EffectShader Duplicate(
            IEffectShaderGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new EffectShader(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IEffectShaderGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IEffectShaderGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class EffectShaderSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly EffectShaderSetterTranslationCommon Instance = new EffectShaderSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IEffectShaderInternal item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IEffectShader item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            item.FillTexture = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.FillTexture, rhs.FillTexture);
            item.ParticleShaderTexture = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.ParticleShaderTexture, rhs.ParticleShaderTexture);
            item.HolesTexture = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.HolesTexture, rhs.HolesTexture);
            item.MembranePaletteTexture = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.MembranePaletteTexture, rhs.MembranePaletteTexture);
            item.ParticlePaletteTexture = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.ParticlePaletteTexture, rhs.ParticlePaletteTexture);
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneSourceBlendMode) ?? true))
            {
                item.MembraneSourceBlendMode = rhs.MembraneSourceBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneBlendOperation) ?? true))
            {
                item.MembraneBlendOperation = rhs.MembraneBlendOperation;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneZTest) ?? true))
            {
                item.MembraneZTest = rhs.MembraneZTest;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1) ?? true))
            {
                item.FillColorKey1 = rhs.FillColorKey1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaFadeInTime) ?? true))
            {
                item.FillAlphaFadeInTime = rhs.FillAlphaFadeInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFullAlphaTime) ?? true))
            {
                item.FillFullAlphaTime = rhs.FillFullAlphaTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFadeOutTime) ?? true))
            {
                item.FillFadeOutTime = rhs.FillFadeOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillPersistentAlphaRatio) ?? true))
            {
                item.FillPersistentAlphaRatio = rhs.FillPersistentAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaPulseAmplitude) ?? true))
            {
                item.FillAlphaPulseAmplitude = rhs.FillAlphaPulseAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillAlphaPulseFrequency) ?? true))
            {
                item.FillAlphaPulseFrequency = rhs.FillAlphaPulseFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureAnimationSpeedU) ?? true))
            {
                item.FillTextureAnimationSpeedU = rhs.FillTextureAnimationSpeedU;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureAnimationSpeedV) ?? true))
            {
                item.FillTextureAnimationSpeedV = rhs.FillTextureAnimationSpeedV;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFallOff) ?? true))
            {
                item.EdgeEffectFallOff = rhs.EdgeEffectFallOff;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectColor) ?? true))
            {
                item.EdgeEffectColor = rhs.EdgeEffectColor;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeInTime) ?? true))
            {
                item.EdgeEffectAlphaFadeInTime = rhs.EdgeEffectAlphaFadeInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaTime) ?? true))
            {
                item.EdgeEffectFullAlphaTime = rhs.EdgeEffectFullAlphaTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaFadeOutTime) ?? true))
            {
                item.EdgeEffectAlphaFadeOutTime = rhs.EdgeEffectAlphaFadeOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectPersistentAlphaRatio) ?? true))
            {
                item.EdgeEffectPersistentAlphaRatio = rhs.EdgeEffectPersistentAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseAmplitude) ?? true))
            {
                item.EdgeEffectAlphaPulseAmplitude = rhs.EdgeEffectAlphaPulseAmplitude;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectAlphaPulseFrequency) ?? true))
            {
                item.EdgeEffectAlphaPulseFrequency = rhs.EdgeEffectAlphaPulseFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillFullAlphaRatio) ?? true))
            {
                item.FillFullAlphaRatio = rhs.FillFullAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeEffectFullAlphaRatio) ?? true))
            {
                item.EdgeEffectFullAlphaRatio = rhs.EdgeEffectFullAlphaRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.MembraneDestBlendMode) ?? true))
            {
                item.MembraneDestBlendMode = rhs.MembraneDestBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleSourceBlendMode) ?? true))
            {
                item.ParticleSourceBlendMode = rhs.ParticleSourceBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleBlendOperation) ?? true))
            {
                item.ParticleBlendOperation = rhs.ParticleBlendOperation;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleZTest) ?? true))
            {
                item.ParticleZTest = rhs.ParticleZTest;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleDestBlendMode) ?? true))
            {
                item.ParticleDestBlendMode = rhs.ParticleDestBlendMode;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleBirthRampUpTime) ?? true))
            {
                item.ParticleBirthRampUpTime = rhs.ParticleBirthRampUpTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleFullBirthTime) ?? true))
            {
                item.ParticleFullBirthTime = rhs.ParticleFullBirthTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleBirthRampDownTime) ?? true))
            {
                item.ParticleBirthRampDownTime = rhs.ParticleBirthRampDownTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleFullBirthRatio) ?? true))
            {
                item.ParticleFullBirthRatio = rhs.ParticleFullBirthRatio;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticlePeristentCount) ?? true))
            {
                item.ParticlePeristentCount = rhs.ParticlePeristentCount;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleLifetime) ?? true))
            {
                item.ParticleLifetime = rhs.ParticleLifetime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleLifetimePlusMinus) ?? true))
            {
                item.ParticleLifetimePlusMinus = rhs.ParticleLifetimePlusMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialSpeedAlongNormal) ?? true))
            {
                item.ParticleInitialSpeedAlongNormal = rhs.ParticleInitialSpeedAlongNormal;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAccelerationAlongNormal) ?? true))
            {
                item.ParticleAccelerationAlongNormal = rhs.ParticleAccelerationAlongNormal;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialVelocity1) ?? true))
            {
                item.ParticleInitialVelocity1 = rhs.ParticleInitialVelocity1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialVelocity2) ?? true))
            {
                item.ParticleInitialVelocity2 = rhs.ParticleInitialVelocity2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialVelocity3) ?? true))
            {
                item.ParticleInitialVelocity3 = rhs.ParticleInitialVelocity3;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAcceleration1) ?? true))
            {
                item.ParticleAcceleration1 = rhs.ParticleAcceleration1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAcceleration2) ?? true))
            {
                item.ParticleAcceleration2 = rhs.ParticleAcceleration2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAcceleration3) ?? true))
            {
                item.ParticleAcceleration3 = rhs.ParticleAcceleration3;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleScaleKey1) ?? true))
            {
                item.ParticleScaleKey1 = rhs.ParticleScaleKey1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleScaleKey2) ?? true))
            {
                item.ParticleScaleKey2 = rhs.ParticleScaleKey2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleScaleKey1Time) ?? true))
            {
                item.ParticleScaleKey1Time = rhs.ParticleScaleKey1Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleScaleKey2Time) ?? true))
            {
                item.ParticleScaleKey2Time = rhs.ParticleScaleKey2Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1) ?? true))
            {
                item.ColorKey1 = rhs.ColorKey1;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2) ?? true))
            {
                item.ColorKey2 = rhs.ColorKey2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3) ?? true))
            {
                item.ColorKey3 = rhs.ColorKey3;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1Alpha) ?? true))
            {
                item.ColorKey1Alpha = rhs.ColorKey1Alpha;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2Alpha) ?? true))
            {
                item.ColorKey2Alpha = rhs.ColorKey2Alpha;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3Alpha) ?? true))
            {
                item.ColorKey3Alpha = rhs.ColorKey3Alpha;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey1Time) ?? true))
            {
                item.ColorKey1Time = rhs.ColorKey1Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey2Time) ?? true))
            {
                item.ColorKey2Time = rhs.ColorKey2Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorKey3Time) ?? true))
            {
                item.ColorKey3Time = rhs.ColorKey3Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialSpeedAlongNormalPlusMinus) ?? true))
            {
                item.ParticleInitialSpeedAlongNormalPlusMinus = rhs.ParticleInitialSpeedAlongNormalPlusMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialRotationDegree) ?? true))
            {
                item.ParticleInitialRotationDegree = rhs.ParticleInitialRotationDegree;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleInitialRotationDegreePlusMinus) ?? true))
            {
                item.ParticleInitialRotationDegreePlusMinus = rhs.ParticleInitialRotationDegreePlusMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleRotationSpeedDegreePerSec) ?? true))
            {
                item.ParticleRotationSpeedDegreePerSec = rhs.ParticleRotationSpeedDegreePerSec;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleRotationSpeedDegreePerSecPlusMinus) ?? true))
            {
                item.ParticleRotationSpeedDegreePerSecPlusMinus = rhs.ParticleRotationSpeedDegreePerSecPlusMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModels) ?? true))
            {
                item.AddonModels.SetTo(rhs.AddonModels.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesStartTime) ?? true))
            {
                item.HolesStartTime = rhs.HolesStartTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesEndTime) ?? true))
            {
                item.HolesEndTime = rhs.HolesEndTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesStartValue) ?? true))
            {
                item.HolesStartValue = rhs.HolesStartValue;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.HolesEndValue) ?? true))
            {
                item.HolesEndValue = rhs.HolesEndValue;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeWidth) ?? true))
            {
                item.EdgeWidth = rhs.EdgeWidth;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.EdgeColor) ?? true))
            {
                item.EdgeColor = rhs.EdgeColor;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ExplosionWindSpeed) ?? true))
            {
                item.ExplosionWindSpeed = rhs.ExplosionWindSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.TextureCountU) ?? true))
            {
                item.TextureCountU = rhs.TextureCountU;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.TextureCountV) ?? true))
            {
                item.TextureCountV = rhs.TextureCountV;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsFadeInTime) ?? true))
            {
                item.AddonModelsFadeInTime = rhs.AddonModelsFadeInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsFadeOutTime) ?? true))
            {
                item.AddonModelsFadeOutTime = rhs.AddonModelsFadeOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsScaleStart) ?? true))
            {
                item.AddonModelsScaleStart = rhs.AddonModelsScaleStart;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsScaleEnd) ?? true))
            {
                item.AddonModelsScaleEnd = rhs.AddonModelsScaleEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsScaleInTime) ?? true))
            {
                item.AddonModelsScaleInTime = rhs.AddonModelsScaleInTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AddonModelsScaleOutTime) ?? true))
            {
                item.AddonModelsScaleOutTime = rhs.AddonModelsScaleOutTime;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.AmbientSound) ?? true))
            {
                item.AmbientSound.SetTo(rhs.AmbientSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2) ?? true))
            {
                item.FillColorKey2 = rhs.FillColorKey2;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3) ?? true))
            {
                item.FillColorKey3 = rhs.FillColorKey3;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1Scale) ?? true))
            {
                item.FillColorKey1Scale = rhs.FillColorKey1Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2Scale) ?? true))
            {
                item.FillColorKey2Scale = rhs.FillColorKey2Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3Scale) ?? true))
            {
                item.FillColorKey3Scale = rhs.FillColorKey3Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey1Time) ?? true))
            {
                item.FillColorKey1Time = rhs.FillColorKey1Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey2Time) ?? true))
            {
                item.FillColorKey2Time = rhs.FillColorKey2Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillColorKey3Time) ?? true))
            {
                item.FillColorKey3Time = rhs.FillColorKey3Time;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ColorScale) ?? true))
            {
                item.ColorScale = rhs.ColorScale;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.BirthPositionOffset) ?? true))
            {
                item.BirthPositionOffset = rhs.BirthPositionOffset;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.BirthPositionOffsetRangePlusMinus) ?? true))
            {
                item.BirthPositionOffsetRangePlusMinus = rhs.BirthPositionOffsetRangePlusMinus;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedStartFrame) ?? true))
            {
                item.ParticleAnimatedStartFrame = rhs.ParticleAnimatedStartFrame;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedStartFrameVariation) ?? true))
            {
                item.ParticleAnimatedStartFrameVariation = rhs.ParticleAnimatedStartFrameVariation;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedEndFrame) ?? true))
            {
                item.ParticleAnimatedEndFrame = rhs.ParticleAnimatedEndFrame;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedLoopStartFrame) ?? true))
            {
                item.ParticleAnimatedLoopStartFrame = rhs.ParticleAnimatedLoopStartFrame;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedLoopStartVariation) ?? true))
            {
                item.ParticleAnimatedLoopStartVariation = rhs.ParticleAnimatedLoopStartVariation;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedFrameCount) ?? true))
            {
                item.ParticleAnimatedFrameCount = rhs.ParticleAnimatedFrameCount;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.ParticleAnimatedFrameCountVariation) ?? true))
            {
                item.ParticleAnimatedFrameCountVariation = rhs.ParticleAnimatedFrameCountVariation;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureScaleU) ?? true))
            {
                item.FillTextureScaleU = rhs.FillTextureScaleU;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.FillTextureScaleV) ?? true))
            {
                item.FillTextureScaleV = rhs.FillTextureScaleV;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.SceneGraphEmitDepthLimit) ?? true))
            {
                item.SceneGraphEmitDepthLimit = rhs.SceneGraphEmitDepthLimit;
            }
            if ((copyMask?.GetShouldTranslate((int)EffectShader_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IEffectShader item,
            IEffectShaderGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShaderInternal)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShader)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShaderInternal)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IEffectShader)item,
                rhs: (IEffectShaderGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            EffectShader.TranslationMask? copyMask = null)
        {
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            out EffectShader.ErrorMask errorMask,
            EffectShader.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = EffectShader.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public EffectShader DeepCopy(
            IEffectShaderGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            EffectShader ret = (EffectShader)((EffectShaderCommon)((IEffectShaderGetter)item).CommonInstance()!).GetNew();
            ((EffectShaderSetterTranslationCommon)((IEffectShaderGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class EffectShader
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShader_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => EffectShader_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EffectShaderCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return EffectShaderSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EffectShaderSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class EffectShaderBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly EffectShaderBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IEffectShaderGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IEffectShaderGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FillTexture?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.ICON),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ParticleShaderTexture?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.ICO2),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HolesTexture?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.NAM7),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MembranePaletteTexture?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.NAM8),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ParticlePaletteTexture?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.NAM9),
                binaryType: StringBinaryType.NullTerminate);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Unknown);
                EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.MembraneSourceBlendMode,
                    length: 4);
                EnumBinaryTranslation<EffectShader.BlendOperation, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.MembraneBlendOperation,
                    length: 4);
                EnumBinaryTranslation<EffectShader.ZTest, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.MembraneZTest,
                    length: 4);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FillColorKey1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillAlphaFadeInTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillFullAlphaTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillFadeOutTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillPersistentAlphaRatio);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillAlphaPulseAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillAlphaPulseFrequency);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillTextureAnimationSpeedU);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillTextureAnimationSpeedV);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectFallOff);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectColor);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaFadeInTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectFullAlphaTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaFadeOutTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectPersistentAlphaRatio);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaPulseAmplitude);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectAlphaPulseFrequency);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FillFullAlphaRatio);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeEffectFullAlphaRatio);
                EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.MembraneDestBlendMode,
                    length: 4);
                EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.ParticleSourceBlendMode,
                    length: 4);
                EnumBinaryTranslation<EffectShader.BlendOperation, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.ParticleBlendOperation,
                    length: 4);
                EnumBinaryTranslation<EffectShader.ZTest, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.ParticleZTest,
                    length: 4);
                EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.ParticleDestBlendMode,
                    length: 4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleBirthRampUpTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleFullBirthTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleBirthRampDownTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleFullBirthRatio);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticlePeristentCount);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleLifetime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleLifetimePlusMinus);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleInitialSpeedAlongNormal);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleAccelerationAlongNormal);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleInitialVelocity1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleInitialVelocity2);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleInitialVelocity3);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleAcceleration1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleAcceleration2);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleAcceleration3);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleScaleKey1);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleScaleKey2);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleScaleKey1Time);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleScaleKey2Time);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey1);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey2);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ColorKey3);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ColorKey1Alpha);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ColorKey2Alpha);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ColorKey3Alpha);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ColorKey1Time);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ColorKey2Time);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ColorKey3Time);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleInitialSpeedAlongNormalPlusMinus);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleInitialRotationDegree);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleInitialRotationDegreePlusMinus);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleRotationSpeedDegreePerSec);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ParticleRotationSpeedDegreePerSecPlusMinus);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AddonModels);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesStartTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesEndTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesStartValue);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.HolesEndValue);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.EdgeWidth);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EdgeColor);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ExplosionWindSpeed);
                writer.Write(item.TextureCountU);
                writer.Write(item.TextureCountV);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AddonModelsFadeInTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AddonModelsFadeOutTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AddonModelsScaleStart);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AddonModelsScaleEnd);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AddonModelsScaleInTime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.AddonModelsScaleOutTime);
                if (!item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0))
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.AmbientSound);
                    if (!item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Break1))
                    {
                        ColorBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.FillColorKey2);
                        ColorBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.FillColorKey3);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.FillColorKey1Scale);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.FillColorKey2Scale);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.FillColorKey3Scale);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.FillColorKey1Time);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.FillColorKey2Time);
                        FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                            writer: writer,
                            item: item.FillColorKey3Time);
                        if (!item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2))
                        {
                            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                                writer: writer,
                                item: item.ColorScale);
                            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                                writer: writer,
                                item: item.BirthPositionOffset);
                            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                                writer: writer,
                                item: item.BirthPositionOffsetRangePlusMinus);
                            writer.Write(item.ParticleAnimatedStartFrame);
                            writer.Write(item.ParticleAnimatedStartFrameVariation);
                            writer.Write(item.ParticleAnimatedEndFrame);
                            writer.Write(item.ParticleAnimatedLoopStartFrame);
                            writer.Write(item.ParticleAnimatedLoopStartVariation);
                            writer.Write(item.ParticleAnimatedFrameCount);
                            writer.Write(item.ParticleAnimatedFrameCountVariation);
                            EnumBinaryTranslation<EffectShader.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                                writer,
                                item.Flags,
                                length: 4);
                            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                                writer: writer,
                                item: item.FillTextureScaleU);
                            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                                writer: writer,
                                item: item.FillTextureScaleV);
                            if (!item.DATADataTypeState.HasFlag(EffectShader.DATADataType.Break3))
                            {
                                writer.Write(item.SceneGraphEmitDepthLimit);
                            }
                        }
                    }
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            IEffectShaderGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.EFSH,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IEffectShaderGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class EffectShaderBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly EffectShaderBinaryCreateTranslation Instance = new EffectShaderBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.EFSH;
        public static void FillBinaryStructs(
            IEffectShaderInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IEffectShaderInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FillTexture = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)EffectShader_FieldIndex.FillTexture;
                }
                case RecordTypeInts.ICO2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ParticleShaderTexture = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)EffectShader_FieldIndex.ParticleShaderTexture;
                }
                case RecordTypeInts.NAM7:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HolesTexture = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)EffectShader_FieldIndex.HolesTexture;
                }
                case RecordTypeInts.NAM8:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MembranePaletteTexture = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)EffectShader_FieldIndex.MembranePaletteTexture;
                }
                case RecordTypeInts.NAM9:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ParticlePaletteTexture = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)EffectShader_FieldIndex.ParticlePaletteTexture;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.MembraneSourceBlendMode = EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.MembraneBlendOperation = EnumBinaryTranslation<EffectShader.BlendOperation, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.MembraneZTest = EnumBinaryTranslation<EffectShader.ZTest, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey1 = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillAlphaFadeInTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillFullAlphaTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillFadeOutTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillPersistentAlphaRatio = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillAlphaPulseAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillAlphaPulseFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillTextureAnimationSpeedU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillTextureAnimationSpeedV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectFallOff = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectColor = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaFadeInTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectFullAlphaTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaFadeOutTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectPersistentAlphaRatio = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaPulseAmplitude = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectAlphaPulseFrequency = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillFullAlphaRatio = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeEffectFullAlphaRatio = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.MembraneDestBlendMode = EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleSourceBlendMode = EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleBlendOperation = EnumBinaryTranslation<EffectShader.BlendOperation, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleZTest = EnumBinaryTranslation<EffectShader.ZTest, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleDestBlendMode = EnumBinaryTranslation<EffectShader.BlendMode, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleBirthRampUpTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleFullBirthTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleBirthRampDownTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleFullBirthRatio = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticlePeristentCount = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleLifetime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleLifetimePlusMinus = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleInitialSpeedAlongNormal = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAccelerationAlongNormal = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleInitialVelocity1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleInitialVelocity2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleInitialVelocity3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAcceleration1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAcceleration2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAcceleration3 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleScaleKey1 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleScaleKey2 = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleScaleKey1Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleScaleKey2Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorKey1 = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorKey2 = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorKey3 = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorKey1Alpha = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorKey2Alpha = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorKey3Alpha = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorKey1Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorKey2Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorKey3Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleInitialSpeedAlongNormalPlusMinus = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleInitialRotationDegree = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleInitialRotationDegreePlusMinus = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleRotationSpeedDegreePerSec = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleRotationSpeedDegreePerSecPlusMinus = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AddonModels.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesStartTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesEndTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesStartValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.HolesEndValue = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeWidth = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.EdgeColor = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplosionWindSpeed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.TextureCountU = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.TextureCountV = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.AddonModelsFadeInTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AddonModelsFadeOutTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AddonModelsScaleStart = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AddonModelsScaleEnd = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AddonModelsScaleInTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.AddonModelsScaleOutTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= EffectShader.DATADataType.Break0;
                        return (int)EffectShader_FieldIndex.AddonModelsScaleOutTime;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.AmbientSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= EffectShader.DATADataType.Break1;
                        return (int)EffectShader_FieldIndex.AmbientSound;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey2 = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey3 = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey1Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey2Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey3Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey1Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey2Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillColorKey3Time = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= EffectShader.DATADataType.Break2;
                        return (int)EffectShader_FieldIndex.FillColorKey3Time;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.ColorScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BirthPositionOffset = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BirthPositionOffsetRangePlusMinus = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAnimatedStartFrame = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAnimatedStartFrameVariation = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAnimatedEndFrame = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAnimatedLoopStartFrame = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAnimatedLoopStartVariation = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAnimatedFrameCount = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.ParticleAnimatedFrameCountVariation = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Flags = EnumBinaryTranslation<EffectShader.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillTextureScaleU = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FillTextureScaleV = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= EffectShader.DATADataType.Break3;
                        return (int)EffectShader_FieldIndex.FillTextureScaleV;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.SceneGraphEmitDepthLimit = dataFrame.ReadUInt32();
                    return (int)EffectShader_FieldIndex.SceneGraphEmitDepthLimit;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class EffectShaderBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class EffectShaderBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IEffectShaderGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => EffectShader_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => EffectShader_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => EffectShaderCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => EffectShaderSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => EffectShaderCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => EffectShaderCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => EffectShaderBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((EffectShaderBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IEffectShader);


        #region FillTexture
        private int? _FillTextureLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? FillTexture => _FillTextureLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FillTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region ParticleShaderTexture
        private int? _ParticleShaderTextureLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? ParticleShaderTexture => _ParticleShaderTextureLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ParticleShaderTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region HolesTexture
        private int? _HolesTextureLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? HolesTexture => _HolesTextureLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HolesTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region MembranePaletteTexture
        private int? _MembranePaletteTextureLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? MembranePaletteTexture => _MembranePaletteTextureLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MembranePaletteTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region ParticlePaletteTexture
        private int? _ParticlePaletteTextureLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? ParticlePaletteTexture => _ParticlePaletteTextureLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ParticlePaletteTextureLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        private RangeInt32? _DATALocation;
        public EffectShader.DATADataType DATADataTypeState { get; private set; }
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value.Min;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public Int32 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_UnknownLocation, 4)) : default(Int32);
        #endregion
        #region MembraneSourceBlendMode
        private int _MembraneSourceBlendModeLocation => _DATALocation!.Value.Min + 0x4;
        private bool _MembraneSourceBlendMode_IsSet => _DATALocation.HasValue;
        public EffectShader.BlendMode MembraneSourceBlendMode => _MembraneSourceBlendMode_IsSet ? (EffectShader.BlendMode)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_MembraneSourceBlendModeLocation, 0x4)) : default;
        #endregion
        #region MembraneBlendOperation
        private int _MembraneBlendOperationLocation => _DATALocation!.Value.Min + 0x8;
        private bool _MembraneBlendOperation_IsSet => _DATALocation.HasValue;
        public EffectShader.BlendOperation MembraneBlendOperation => _MembraneBlendOperation_IsSet ? (EffectShader.BlendOperation)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_MembraneBlendOperationLocation, 0x4)) : default;
        #endregion
        #region MembraneZTest
        private int _MembraneZTestLocation => _DATALocation!.Value.Min + 0xC;
        private bool _MembraneZTest_IsSet => _DATALocation.HasValue;
        public EffectShader.ZTest MembraneZTest => _MembraneZTest_IsSet ? (EffectShader.ZTest)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_MembraneZTestLocation, 0x4)) : default;
        #endregion
        #region FillColorKey1
        private int _FillColorKey1Location => _DATALocation!.Value.Min + 0x10;
        private bool _FillColorKey1_IsSet => _DATALocation.HasValue;
        public Color FillColorKey1 => _FillColorKey1_IsSet ? _recordData.Slice(_FillColorKey1Location, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region FillAlphaFadeInTime
        private int _FillAlphaFadeInTimeLocation => _DATALocation!.Value.Min + 0x14;
        private bool _FillAlphaFadeInTime_IsSet => _DATALocation.HasValue;
        public Single FillAlphaFadeInTime => _FillAlphaFadeInTime_IsSet ? _recordData.Slice(_FillAlphaFadeInTimeLocation, 4).Float() : default(Single);
        #endregion
        #region FillFullAlphaTime
        private int _FillFullAlphaTimeLocation => _DATALocation!.Value.Min + 0x18;
        private bool _FillFullAlphaTime_IsSet => _DATALocation.HasValue;
        public Single FillFullAlphaTime => _FillFullAlphaTime_IsSet ? _recordData.Slice(_FillFullAlphaTimeLocation, 4).Float() : default(Single);
        #endregion
        #region FillFadeOutTime
        private int _FillFadeOutTimeLocation => _DATALocation!.Value.Min + 0x1C;
        private bool _FillFadeOutTime_IsSet => _DATALocation.HasValue;
        public Single FillFadeOutTime => _FillFadeOutTime_IsSet ? _recordData.Slice(_FillFadeOutTimeLocation, 4).Float() : default(Single);
        #endregion
        #region FillPersistentAlphaRatio
        private int _FillPersistentAlphaRatioLocation => _DATALocation!.Value.Min + 0x20;
        private bool _FillPersistentAlphaRatio_IsSet => _DATALocation.HasValue;
        public Single FillPersistentAlphaRatio => _FillPersistentAlphaRatio_IsSet ? _recordData.Slice(_FillPersistentAlphaRatioLocation, 4).Float() : default(Single);
        #endregion
        #region FillAlphaPulseAmplitude
        private int _FillAlphaPulseAmplitudeLocation => _DATALocation!.Value.Min + 0x24;
        private bool _FillAlphaPulseAmplitude_IsSet => _DATALocation.HasValue;
        public Single FillAlphaPulseAmplitude => _FillAlphaPulseAmplitude_IsSet ? _recordData.Slice(_FillAlphaPulseAmplitudeLocation, 4).Float() : default(Single);
        #endregion
        #region FillAlphaPulseFrequency
        private int _FillAlphaPulseFrequencyLocation => _DATALocation!.Value.Min + 0x28;
        private bool _FillAlphaPulseFrequency_IsSet => _DATALocation.HasValue;
        public Single FillAlphaPulseFrequency => _FillAlphaPulseFrequency_IsSet ? _recordData.Slice(_FillAlphaPulseFrequencyLocation, 4).Float() : default(Single);
        #endregion
        #region FillTextureAnimationSpeedU
        private int _FillTextureAnimationSpeedULocation => _DATALocation!.Value.Min + 0x2C;
        private bool _FillTextureAnimationSpeedU_IsSet => _DATALocation.HasValue;
        public Single FillTextureAnimationSpeedU => _FillTextureAnimationSpeedU_IsSet ? _recordData.Slice(_FillTextureAnimationSpeedULocation, 4).Float() : default(Single);
        #endregion
        #region FillTextureAnimationSpeedV
        private int _FillTextureAnimationSpeedVLocation => _DATALocation!.Value.Min + 0x30;
        private bool _FillTextureAnimationSpeedV_IsSet => _DATALocation.HasValue;
        public Single FillTextureAnimationSpeedV => _FillTextureAnimationSpeedV_IsSet ? _recordData.Slice(_FillTextureAnimationSpeedVLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectFallOff
        private int _EdgeEffectFallOffLocation => _DATALocation!.Value.Min + 0x34;
        private bool _EdgeEffectFallOff_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectFallOff => _EdgeEffectFallOff_IsSet ? _recordData.Slice(_EdgeEffectFallOffLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectColor
        private int _EdgeEffectColorLocation => _DATALocation!.Value.Min + 0x38;
        private bool _EdgeEffectColor_IsSet => _DATALocation.HasValue;
        public Color EdgeEffectColor => _EdgeEffectColor_IsSet ? _recordData.Slice(_EdgeEffectColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region EdgeEffectAlphaFadeInTime
        private int _EdgeEffectAlphaFadeInTimeLocation => _DATALocation!.Value.Min + 0x3C;
        private bool _EdgeEffectAlphaFadeInTime_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectAlphaFadeInTime => _EdgeEffectAlphaFadeInTime_IsSet ? _recordData.Slice(_EdgeEffectAlphaFadeInTimeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectFullAlphaTime
        private int _EdgeEffectFullAlphaTimeLocation => _DATALocation!.Value.Min + 0x40;
        private bool _EdgeEffectFullAlphaTime_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectFullAlphaTime => _EdgeEffectFullAlphaTime_IsSet ? _recordData.Slice(_EdgeEffectFullAlphaTimeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectAlphaFadeOutTime
        private int _EdgeEffectAlphaFadeOutTimeLocation => _DATALocation!.Value.Min + 0x44;
        private bool _EdgeEffectAlphaFadeOutTime_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectAlphaFadeOutTime => _EdgeEffectAlphaFadeOutTime_IsSet ? _recordData.Slice(_EdgeEffectAlphaFadeOutTimeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectPersistentAlphaRatio
        private int _EdgeEffectPersistentAlphaRatioLocation => _DATALocation!.Value.Min + 0x48;
        private bool _EdgeEffectPersistentAlphaRatio_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectPersistentAlphaRatio => _EdgeEffectPersistentAlphaRatio_IsSet ? _recordData.Slice(_EdgeEffectPersistentAlphaRatioLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectAlphaPulseAmplitude
        private int _EdgeEffectAlphaPulseAmplitudeLocation => _DATALocation!.Value.Min + 0x4C;
        private bool _EdgeEffectAlphaPulseAmplitude_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectAlphaPulseAmplitude => _EdgeEffectAlphaPulseAmplitude_IsSet ? _recordData.Slice(_EdgeEffectAlphaPulseAmplitudeLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectAlphaPulseFrequency
        private int _EdgeEffectAlphaPulseFrequencyLocation => _DATALocation!.Value.Min + 0x50;
        private bool _EdgeEffectAlphaPulseFrequency_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectAlphaPulseFrequency => _EdgeEffectAlphaPulseFrequency_IsSet ? _recordData.Slice(_EdgeEffectAlphaPulseFrequencyLocation, 4).Float() : default(Single);
        #endregion
        #region FillFullAlphaRatio
        private int _FillFullAlphaRatioLocation => _DATALocation!.Value.Min + 0x54;
        private bool _FillFullAlphaRatio_IsSet => _DATALocation.HasValue;
        public Single FillFullAlphaRatio => _FillFullAlphaRatio_IsSet ? _recordData.Slice(_FillFullAlphaRatioLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeEffectFullAlphaRatio
        private int _EdgeEffectFullAlphaRatioLocation => _DATALocation!.Value.Min + 0x58;
        private bool _EdgeEffectFullAlphaRatio_IsSet => _DATALocation.HasValue;
        public Single EdgeEffectFullAlphaRatio => _EdgeEffectFullAlphaRatio_IsSet ? _recordData.Slice(_EdgeEffectFullAlphaRatioLocation, 4).Float() : default(Single);
        #endregion
        #region MembraneDestBlendMode
        private int _MembraneDestBlendModeLocation => _DATALocation!.Value.Min + 0x5C;
        private bool _MembraneDestBlendMode_IsSet => _DATALocation.HasValue;
        public EffectShader.BlendMode MembraneDestBlendMode => _MembraneDestBlendMode_IsSet ? (EffectShader.BlendMode)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_MembraneDestBlendModeLocation, 0x4)) : default;
        #endregion
        #region ParticleSourceBlendMode
        private int _ParticleSourceBlendModeLocation => _DATALocation!.Value.Min + 0x60;
        private bool _ParticleSourceBlendMode_IsSet => _DATALocation.HasValue;
        public EffectShader.BlendMode ParticleSourceBlendMode => _ParticleSourceBlendMode_IsSet ? (EffectShader.BlendMode)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_ParticleSourceBlendModeLocation, 0x4)) : default;
        #endregion
        #region ParticleBlendOperation
        private int _ParticleBlendOperationLocation => _DATALocation!.Value.Min + 0x64;
        private bool _ParticleBlendOperation_IsSet => _DATALocation.HasValue;
        public EffectShader.BlendOperation ParticleBlendOperation => _ParticleBlendOperation_IsSet ? (EffectShader.BlendOperation)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_ParticleBlendOperationLocation, 0x4)) : default;
        #endregion
        #region ParticleZTest
        private int _ParticleZTestLocation => _DATALocation!.Value.Min + 0x68;
        private bool _ParticleZTest_IsSet => _DATALocation.HasValue;
        public EffectShader.ZTest ParticleZTest => _ParticleZTest_IsSet ? (EffectShader.ZTest)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_ParticleZTestLocation, 0x4)) : default;
        #endregion
        #region ParticleDestBlendMode
        private int _ParticleDestBlendModeLocation => _DATALocation!.Value.Min + 0x6C;
        private bool _ParticleDestBlendMode_IsSet => _DATALocation.HasValue;
        public EffectShader.BlendMode ParticleDestBlendMode => _ParticleDestBlendMode_IsSet ? (EffectShader.BlendMode)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_ParticleDestBlendModeLocation, 0x4)) : default;
        #endregion
        #region ParticleBirthRampUpTime
        private int _ParticleBirthRampUpTimeLocation => _DATALocation!.Value.Min + 0x70;
        private bool _ParticleBirthRampUpTime_IsSet => _DATALocation.HasValue;
        public Single ParticleBirthRampUpTime => _ParticleBirthRampUpTime_IsSet ? _recordData.Slice(_ParticleBirthRampUpTimeLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleFullBirthTime
        private int _ParticleFullBirthTimeLocation => _DATALocation!.Value.Min + 0x74;
        private bool _ParticleFullBirthTime_IsSet => _DATALocation.HasValue;
        public Single ParticleFullBirthTime => _ParticleFullBirthTime_IsSet ? _recordData.Slice(_ParticleFullBirthTimeLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleBirthRampDownTime
        private int _ParticleBirthRampDownTimeLocation => _DATALocation!.Value.Min + 0x78;
        private bool _ParticleBirthRampDownTime_IsSet => _DATALocation.HasValue;
        public Single ParticleBirthRampDownTime => _ParticleBirthRampDownTime_IsSet ? _recordData.Slice(_ParticleBirthRampDownTimeLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleFullBirthRatio
        private int _ParticleFullBirthRatioLocation => _DATALocation!.Value.Min + 0x7C;
        private bool _ParticleFullBirthRatio_IsSet => _DATALocation.HasValue;
        public Single ParticleFullBirthRatio => _ParticleFullBirthRatio_IsSet ? _recordData.Slice(_ParticleFullBirthRatioLocation, 4).Float() : default(Single);
        #endregion
        #region ParticlePeristentCount
        private int _ParticlePeristentCountLocation => _DATALocation!.Value.Min + 0x80;
        private bool _ParticlePeristentCount_IsSet => _DATALocation.HasValue;
        public Single ParticlePeristentCount => _ParticlePeristentCount_IsSet ? _recordData.Slice(_ParticlePeristentCountLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleLifetime
        private int _ParticleLifetimeLocation => _DATALocation!.Value.Min + 0x84;
        private bool _ParticleLifetime_IsSet => _DATALocation.HasValue;
        public Single ParticleLifetime => _ParticleLifetime_IsSet ? _recordData.Slice(_ParticleLifetimeLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleLifetimePlusMinus
        private int _ParticleLifetimePlusMinusLocation => _DATALocation!.Value.Min + 0x88;
        private bool _ParticleLifetimePlusMinus_IsSet => _DATALocation.HasValue;
        public Single ParticleLifetimePlusMinus => _ParticleLifetimePlusMinus_IsSet ? _recordData.Slice(_ParticleLifetimePlusMinusLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleInitialSpeedAlongNormal
        private int _ParticleInitialSpeedAlongNormalLocation => _DATALocation!.Value.Min + 0x8C;
        private bool _ParticleInitialSpeedAlongNormal_IsSet => _DATALocation.HasValue;
        public Single ParticleInitialSpeedAlongNormal => _ParticleInitialSpeedAlongNormal_IsSet ? _recordData.Slice(_ParticleInitialSpeedAlongNormalLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleAccelerationAlongNormal
        private int _ParticleAccelerationAlongNormalLocation => _DATALocation!.Value.Min + 0x90;
        private bool _ParticleAccelerationAlongNormal_IsSet => _DATALocation.HasValue;
        public Single ParticleAccelerationAlongNormal => _ParticleAccelerationAlongNormal_IsSet ? _recordData.Slice(_ParticleAccelerationAlongNormalLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleInitialVelocity1
        private int _ParticleInitialVelocity1Location => _DATALocation!.Value.Min + 0x94;
        private bool _ParticleInitialVelocity1_IsSet => _DATALocation.HasValue;
        public Single ParticleInitialVelocity1 => _ParticleInitialVelocity1_IsSet ? _recordData.Slice(_ParticleInitialVelocity1Location, 4).Float() : default(Single);
        #endregion
        #region ParticleInitialVelocity2
        private int _ParticleInitialVelocity2Location => _DATALocation!.Value.Min + 0x98;
        private bool _ParticleInitialVelocity2_IsSet => _DATALocation.HasValue;
        public Single ParticleInitialVelocity2 => _ParticleInitialVelocity2_IsSet ? _recordData.Slice(_ParticleInitialVelocity2Location, 4).Float() : default(Single);
        #endregion
        #region ParticleInitialVelocity3
        private int _ParticleInitialVelocity3Location => _DATALocation!.Value.Min + 0x9C;
        private bool _ParticleInitialVelocity3_IsSet => _DATALocation.HasValue;
        public Single ParticleInitialVelocity3 => _ParticleInitialVelocity3_IsSet ? _recordData.Slice(_ParticleInitialVelocity3Location, 4).Float() : default(Single);
        #endregion
        #region ParticleAcceleration1
        private int _ParticleAcceleration1Location => _DATALocation!.Value.Min + 0xA0;
        private bool _ParticleAcceleration1_IsSet => _DATALocation.HasValue;
        public Single ParticleAcceleration1 => _ParticleAcceleration1_IsSet ? _recordData.Slice(_ParticleAcceleration1Location, 4).Float() : default(Single);
        #endregion
        #region ParticleAcceleration2
        private int _ParticleAcceleration2Location => _DATALocation!.Value.Min + 0xA4;
        private bool _ParticleAcceleration2_IsSet => _DATALocation.HasValue;
        public Single ParticleAcceleration2 => _ParticleAcceleration2_IsSet ? _recordData.Slice(_ParticleAcceleration2Location, 4).Float() : default(Single);
        #endregion
        #region ParticleAcceleration3
        private int _ParticleAcceleration3Location => _DATALocation!.Value.Min + 0xA8;
        private bool _ParticleAcceleration3_IsSet => _DATALocation.HasValue;
        public Single ParticleAcceleration3 => _ParticleAcceleration3_IsSet ? _recordData.Slice(_ParticleAcceleration3Location, 4).Float() : default(Single);
        #endregion
        #region ParticleScaleKey1
        private int _ParticleScaleKey1Location => _DATALocation!.Value.Min + 0xAC;
        private bool _ParticleScaleKey1_IsSet => _DATALocation.HasValue;
        public Single ParticleScaleKey1 => _ParticleScaleKey1_IsSet ? _recordData.Slice(_ParticleScaleKey1Location, 4).Float() : default(Single);
        #endregion
        #region ParticleScaleKey2
        private int _ParticleScaleKey2Location => _DATALocation!.Value.Min + 0xB0;
        private bool _ParticleScaleKey2_IsSet => _DATALocation.HasValue;
        public Single ParticleScaleKey2 => _ParticleScaleKey2_IsSet ? _recordData.Slice(_ParticleScaleKey2Location, 4).Float() : default(Single);
        #endregion
        #region ParticleScaleKey1Time
        private int _ParticleScaleKey1TimeLocation => _DATALocation!.Value.Min + 0xB4;
        private bool _ParticleScaleKey1Time_IsSet => _DATALocation.HasValue;
        public Single ParticleScaleKey1Time => _ParticleScaleKey1Time_IsSet ? _recordData.Slice(_ParticleScaleKey1TimeLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleScaleKey2Time
        private int _ParticleScaleKey2TimeLocation => _DATALocation!.Value.Min + 0xB8;
        private bool _ParticleScaleKey2Time_IsSet => _DATALocation.HasValue;
        public Single ParticleScaleKey2Time => _ParticleScaleKey2Time_IsSet ? _recordData.Slice(_ParticleScaleKey2TimeLocation, 4).Float() : default(Single);
        #endregion
        #region ColorKey1
        private int _ColorKey1Location => _DATALocation!.Value.Min + 0xBC;
        private bool _ColorKey1_IsSet => _DATALocation.HasValue;
        public Color ColorKey1 => _ColorKey1_IsSet ? _recordData.Slice(_ColorKey1Location, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region ColorKey2
        private int _ColorKey2Location => _DATALocation!.Value.Min + 0xC0;
        private bool _ColorKey2_IsSet => _DATALocation.HasValue;
        public Color ColorKey2 => _ColorKey2_IsSet ? _recordData.Slice(_ColorKey2Location, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region ColorKey3
        private int _ColorKey3Location => _DATALocation!.Value.Min + 0xC4;
        private bool _ColorKey3_IsSet => _DATALocation.HasValue;
        public Color ColorKey3 => _ColorKey3_IsSet ? _recordData.Slice(_ColorKey3Location, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region ColorKey1Alpha
        private int _ColorKey1AlphaLocation => _DATALocation!.Value.Min + 0xC8;
        private bool _ColorKey1Alpha_IsSet => _DATALocation.HasValue;
        public Single ColorKey1Alpha => _ColorKey1Alpha_IsSet ? _recordData.Slice(_ColorKey1AlphaLocation, 4).Float() : default(Single);
        #endregion
        #region ColorKey2Alpha
        private int _ColorKey2AlphaLocation => _DATALocation!.Value.Min + 0xCC;
        private bool _ColorKey2Alpha_IsSet => _DATALocation.HasValue;
        public Single ColorKey2Alpha => _ColorKey2Alpha_IsSet ? _recordData.Slice(_ColorKey2AlphaLocation, 4).Float() : default(Single);
        #endregion
        #region ColorKey3Alpha
        private int _ColorKey3AlphaLocation => _DATALocation!.Value.Min + 0xD0;
        private bool _ColorKey3Alpha_IsSet => _DATALocation.HasValue;
        public Single ColorKey3Alpha => _ColorKey3Alpha_IsSet ? _recordData.Slice(_ColorKey3AlphaLocation, 4).Float() : default(Single);
        #endregion
        #region ColorKey1Time
        private int _ColorKey1TimeLocation => _DATALocation!.Value.Min + 0xD4;
        private bool _ColorKey1Time_IsSet => _DATALocation.HasValue;
        public Single ColorKey1Time => _ColorKey1Time_IsSet ? _recordData.Slice(_ColorKey1TimeLocation, 4).Float() : default(Single);
        #endregion
        #region ColorKey2Time
        private int _ColorKey2TimeLocation => _DATALocation!.Value.Min + 0xD8;
        private bool _ColorKey2Time_IsSet => _DATALocation.HasValue;
        public Single ColorKey2Time => _ColorKey2Time_IsSet ? _recordData.Slice(_ColorKey2TimeLocation, 4).Float() : default(Single);
        #endregion
        #region ColorKey3Time
        private int _ColorKey3TimeLocation => _DATALocation!.Value.Min + 0xDC;
        private bool _ColorKey3Time_IsSet => _DATALocation.HasValue;
        public Single ColorKey3Time => _ColorKey3Time_IsSet ? _recordData.Slice(_ColorKey3TimeLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleInitialSpeedAlongNormalPlusMinus
        private int _ParticleInitialSpeedAlongNormalPlusMinusLocation => _DATALocation!.Value.Min + 0xE0;
        private bool _ParticleInitialSpeedAlongNormalPlusMinus_IsSet => _DATALocation.HasValue;
        public Single ParticleInitialSpeedAlongNormalPlusMinus => _ParticleInitialSpeedAlongNormalPlusMinus_IsSet ? _recordData.Slice(_ParticleInitialSpeedAlongNormalPlusMinusLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleInitialRotationDegree
        private int _ParticleInitialRotationDegreeLocation => _DATALocation!.Value.Min + 0xE4;
        private bool _ParticleInitialRotationDegree_IsSet => _DATALocation.HasValue;
        public Single ParticleInitialRotationDegree => _ParticleInitialRotationDegree_IsSet ? _recordData.Slice(_ParticleInitialRotationDegreeLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleInitialRotationDegreePlusMinus
        private int _ParticleInitialRotationDegreePlusMinusLocation => _DATALocation!.Value.Min + 0xE8;
        private bool _ParticleInitialRotationDegreePlusMinus_IsSet => _DATALocation.HasValue;
        public Single ParticleInitialRotationDegreePlusMinus => _ParticleInitialRotationDegreePlusMinus_IsSet ? _recordData.Slice(_ParticleInitialRotationDegreePlusMinusLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleRotationSpeedDegreePerSec
        private int _ParticleRotationSpeedDegreePerSecLocation => _DATALocation!.Value.Min + 0xEC;
        private bool _ParticleRotationSpeedDegreePerSec_IsSet => _DATALocation.HasValue;
        public Single ParticleRotationSpeedDegreePerSec => _ParticleRotationSpeedDegreePerSec_IsSet ? _recordData.Slice(_ParticleRotationSpeedDegreePerSecLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleRotationSpeedDegreePerSecPlusMinus
        private int _ParticleRotationSpeedDegreePerSecPlusMinusLocation => _DATALocation!.Value.Min + 0xF0;
        private bool _ParticleRotationSpeedDegreePerSecPlusMinus_IsSet => _DATALocation.HasValue;
        public Single ParticleRotationSpeedDegreePerSecPlusMinus => _ParticleRotationSpeedDegreePerSecPlusMinus_IsSet ? _recordData.Slice(_ParticleRotationSpeedDegreePerSecPlusMinusLocation, 4).Float() : default(Single);
        #endregion
        #region AddonModels
        private int _AddonModelsLocation => _DATALocation!.Value.Min + 0xF4;
        private bool _AddonModels_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> AddonModels => _AddonModels_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_AddonModelsLocation, 0x4), isSet: _AddonModels_IsSet) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region HolesStartTime
        private int _HolesStartTimeLocation => _DATALocation!.Value.Min + 0xF8;
        private bool _HolesStartTime_IsSet => _DATALocation.HasValue;
        public Single HolesStartTime => _HolesStartTime_IsSet ? _recordData.Slice(_HolesStartTimeLocation, 4).Float() : default(Single);
        #endregion
        #region HolesEndTime
        private int _HolesEndTimeLocation => _DATALocation!.Value.Min + 0xFC;
        private bool _HolesEndTime_IsSet => _DATALocation.HasValue;
        public Single HolesEndTime => _HolesEndTime_IsSet ? _recordData.Slice(_HolesEndTimeLocation, 4).Float() : default(Single);
        #endregion
        #region HolesStartValue
        private int _HolesStartValueLocation => _DATALocation!.Value.Min + 0x100;
        private bool _HolesStartValue_IsSet => _DATALocation.HasValue;
        public Single HolesStartValue => _HolesStartValue_IsSet ? _recordData.Slice(_HolesStartValueLocation, 4).Float() : default(Single);
        #endregion
        #region HolesEndValue
        private int _HolesEndValueLocation => _DATALocation!.Value.Min + 0x104;
        private bool _HolesEndValue_IsSet => _DATALocation.HasValue;
        public Single HolesEndValue => _HolesEndValue_IsSet ? _recordData.Slice(_HolesEndValueLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeWidth
        private int _EdgeWidthLocation => _DATALocation!.Value.Min + 0x108;
        private bool _EdgeWidth_IsSet => _DATALocation.HasValue;
        public Single EdgeWidth => _EdgeWidth_IsSet ? _recordData.Slice(_EdgeWidthLocation, 4).Float() : default(Single);
        #endregion
        #region EdgeColor
        private int _EdgeColorLocation => _DATALocation!.Value.Min + 0x10C;
        private bool _EdgeColor_IsSet => _DATALocation.HasValue;
        public Color EdgeColor => _EdgeColor_IsSet ? _recordData.Slice(_EdgeColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region ExplosionWindSpeed
        private int _ExplosionWindSpeedLocation => _DATALocation!.Value.Min + 0x110;
        private bool _ExplosionWindSpeed_IsSet => _DATALocation.HasValue;
        public Single ExplosionWindSpeed => _ExplosionWindSpeed_IsSet ? _recordData.Slice(_ExplosionWindSpeedLocation, 4).Float() : default(Single);
        #endregion
        #region TextureCountU
        private int _TextureCountULocation => _DATALocation!.Value.Min + 0x114;
        private bool _TextureCountU_IsSet => _DATALocation.HasValue;
        public UInt32 TextureCountU => _TextureCountU_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_TextureCountULocation, 4)) : default(UInt32);
        #endregion
        #region TextureCountV
        private int _TextureCountVLocation => _DATALocation!.Value.Min + 0x118;
        private bool _TextureCountV_IsSet => _DATALocation.HasValue;
        public UInt32 TextureCountV => _TextureCountV_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_TextureCountVLocation, 4)) : default(UInt32);
        #endregion
        #region AddonModelsFadeInTime
        private int _AddonModelsFadeInTimeLocation => _DATALocation!.Value.Min + 0x11C;
        private bool _AddonModelsFadeInTime_IsSet => _DATALocation.HasValue;
        public Single AddonModelsFadeInTime => _AddonModelsFadeInTime_IsSet ? _recordData.Slice(_AddonModelsFadeInTimeLocation, 4).Float() : default(Single);
        #endregion
        #region AddonModelsFadeOutTime
        private int _AddonModelsFadeOutTimeLocation => _DATALocation!.Value.Min + 0x120;
        private bool _AddonModelsFadeOutTime_IsSet => _DATALocation.HasValue;
        public Single AddonModelsFadeOutTime => _AddonModelsFadeOutTime_IsSet ? _recordData.Slice(_AddonModelsFadeOutTimeLocation, 4).Float() : default(Single);
        #endregion
        #region AddonModelsScaleStart
        private int _AddonModelsScaleStartLocation => _DATALocation!.Value.Min + 0x124;
        private bool _AddonModelsScaleStart_IsSet => _DATALocation.HasValue;
        public Single AddonModelsScaleStart => _AddonModelsScaleStart_IsSet ? _recordData.Slice(_AddonModelsScaleStartLocation, 4).Float() : default(Single);
        #endregion
        #region AddonModelsScaleEnd
        private int _AddonModelsScaleEndLocation => _DATALocation!.Value.Min + 0x128;
        private bool _AddonModelsScaleEnd_IsSet => _DATALocation.HasValue;
        public Single AddonModelsScaleEnd => _AddonModelsScaleEnd_IsSet ? _recordData.Slice(_AddonModelsScaleEndLocation, 4).Float() : default(Single);
        #endregion
        #region AddonModelsScaleInTime
        private int _AddonModelsScaleInTimeLocation => _DATALocation!.Value.Min + 0x12C;
        private bool _AddonModelsScaleInTime_IsSet => _DATALocation.HasValue;
        public Single AddonModelsScaleInTime => _AddonModelsScaleInTime_IsSet ? _recordData.Slice(_AddonModelsScaleInTimeLocation, 4).Float() : default(Single);
        #endregion
        #region AddonModelsScaleOutTime
        private int _AddonModelsScaleOutTimeLocation => _DATALocation!.Value.Min + 0x130;
        private bool _AddonModelsScaleOutTime_IsSet => _DATALocation.HasValue;
        public Single AddonModelsScaleOutTime => _AddonModelsScaleOutTime_IsSet ? _recordData.Slice(_AddonModelsScaleOutTimeLocation, 4).Float() : default(Single);
        #endregion
        #region AmbientSound
        private int _AmbientSoundLocation => _DATALocation!.Value.Min + 0x134;
        private bool _AmbientSound_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break0);
        public IFormLinkGetter<ISoundGetter> AmbientSound => _AmbientSound_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundGetter>(_package, _recordData.Span.Slice(_AmbientSoundLocation, 0x4), isSet: _AmbientSound_IsSet) : FormLink<ISoundGetter>.Null;
        #endregion
        #region FillColorKey2
        private int _FillColorKey2Location => _DATALocation!.Value.Min + 0x138;
        private bool _FillColorKey2_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break1);
        public Color FillColorKey2 => _FillColorKey2_IsSet ? _recordData.Slice(_FillColorKey2Location, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region FillColorKey3
        private int _FillColorKey3Location => _DATALocation!.Value.Min + 0x13C;
        private bool _FillColorKey3_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break1);
        public Color FillColorKey3 => _FillColorKey3_IsSet ? _recordData.Slice(_FillColorKey3Location, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region FillColorKey1Scale
        private int _FillColorKey1ScaleLocation => _DATALocation!.Value.Min + 0x140;
        private bool _FillColorKey1Scale_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break1);
        public Single FillColorKey1Scale => _FillColorKey1Scale_IsSet ? _recordData.Slice(_FillColorKey1ScaleLocation, 4).Float() : default(Single);
        #endregion
        #region FillColorKey2Scale
        private int _FillColorKey2ScaleLocation => _DATALocation!.Value.Min + 0x144;
        private bool _FillColorKey2Scale_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break1);
        public Single FillColorKey2Scale => _FillColorKey2Scale_IsSet ? _recordData.Slice(_FillColorKey2ScaleLocation, 4).Float() : default(Single);
        #endregion
        #region FillColorKey3Scale
        private int _FillColorKey3ScaleLocation => _DATALocation!.Value.Min + 0x148;
        private bool _FillColorKey3Scale_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break1);
        public Single FillColorKey3Scale => _FillColorKey3Scale_IsSet ? _recordData.Slice(_FillColorKey3ScaleLocation, 4).Float() : default(Single);
        #endregion
        #region FillColorKey1Time
        private int _FillColorKey1TimeLocation => _DATALocation!.Value.Min + 0x14C;
        private bool _FillColorKey1Time_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break1);
        public Single FillColorKey1Time => _FillColorKey1Time_IsSet ? _recordData.Slice(_FillColorKey1TimeLocation, 4).Float() : default(Single);
        #endregion
        #region FillColorKey2Time
        private int _FillColorKey2TimeLocation => _DATALocation!.Value.Min + 0x150;
        private bool _FillColorKey2Time_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break1);
        public Single FillColorKey2Time => _FillColorKey2Time_IsSet ? _recordData.Slice(_FillColorKey2TimeLocation, 4).Float() : default(Single);
        #endregion
        #region FillColorKey3Time
        private int _FillColorKey3TimeLocation => _DATALocation!.Value.Min + 0x154;
        private bool _FillColorKey3Time_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break1);
        public Single FillColorKey3Time => _FillColorKey3Time_IsSet ? _recordData.Slice(_FillColorKey3TimeLocation, 4).Float() : default(Single);
        #endregion
        #region ColorScale
        private int _ColorScaleLocation => _DATALocation!.Value.Min + 0x158;
        private bool _ColorScale_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public Single ColorScale => _ColorScale_IsSet ? _recordData.Slice(_ColorScaleLocation, 4).Float() : default(Single);
        #endregion
        #region BirthPositionOffset
        private int _BirthPositionOffsetLocation => _DATALocation!.Value.Min + 0x15C;
        private bool _BirthPositionOffset_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public Single BirthPositionOffset => _BirthPositionOffset_IsSet ? _recordData.Slice(_BirthPositionOffsetLocation, 4).Float() : default(Single);
        #endregion
        #region BirthPositionOffsetRangePlusMinus
        private int _BirthPositionOffsetRangePlusMinusLocation => _DATALocation!.Value.Min + 0x160;
        private bool _BirthPositionOffsetRangePlusMinus_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public Single BirthPositionOffsetRangePlusMinus => _BirthPositionOffsetRangePlusMinus_IsSet ? _recordData.Slice(_BirthPositionOffsetRangePlusMinusLocation, 4).Float() : default(Single);
        #endregion
        #region ParticleAnimatedStartFrame
        private int _ParticleAnimatedStartFrameLocation => _DATALocation!.Value.Min + 0x164;
        private bool _ParticleAnimatedStartFrame_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public UInt32 ParticleAnimatedStartFrame => _ParticleAnimatedStartFrame_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ParticleAnimatedStartFrameLocation, 4)) : default(UInt32);
        #endregion
        #region ParticleAnimatedStartFrameVariation
        private int _ParticleAnimatedStartFrameVariationLocation => _DATALocation!.Value.Min + 0x168;
        private bool _ParticleAnimatedStartFrameVariation_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public UInt32 ParticleAnimatedStartFrameVariation => _ParticleAnimatedStartFrameVariation_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ParticleAnimatedStartFrameVariationLocation, 4)) : default(UInt32);
        #endregion
        #region ParticleAnimatedEndFrame
        private int _ParticleAnimatedEndFrameLocation => _DATALocation!.Value.Min + 0x16C;
        private bool _ParticleAnimatedEndFrame_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public UInt32 ParticleAnimatedEndFrame => _ParticleAnimatedEndFrame_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ParticleAnimatedEndFrameLocation, 4)) : default(UInt32);
        #endregion
        #region ParticleAnimatedLoopStartFrame
        private int _ParticleAnimatedLoopStartFrameLocation => _DATALocation!.Value.Min + 0x170;
        private bool _ParticleAnimatedLoopStartFrame_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public UInt32 ParticleAnimatedLoopStartFrame => _ParticleAnimatedLoopStartFrame_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ParticleAnimatedLoopStartFrameLocation, 4)) : default(UInt32);
        #endregion
        #region ParticleAnimatedLoopStartVariation
        private int _ParticleAnimatedLoopStartVariationLocation => _DATALocation!.Value.Min + 0x174;
        private bool _ParticleAnimatedLoopStartVariation_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public UInt32 ParticleAnimatedLoopStartVariation => _ParticleAnimatedLoopStartVariation_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ParticleAnimatedLoopStartVariationLocation, 4)) : default(UInt32);
        #endregion
        #region ParticleAnimatedFrameCount
        private int _ParticleAnimatedFrameCountLocation => _DATALocation!.Value.Min + 0x178;
        private bool _ParticleAnimatedFrameCount_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public UInt32 ParticleAnimatedFrameCount => _ParticleAnimatedFrameCount_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ParticleAnimatedFrameCountLocation, 4)) : default(UInt32);
        #endregion
        #region ParticleAnimatedFrameCountVariation
        private int _ParticleAnimatedFrameCountVariationLocation => _DATALocation!.Value.Min + 0x17C;
        private bool _ParticleAnimatedFrameCountVariation_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public UInt32 ParticleAnimatedFrameCountVariation => _ParticleAnimatedFrameCountVariation_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ParticleAnimatedFrameCountVariationLocation, 4)) : default(UInt32);
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value.Min + 0x180;
        private bool _Flags_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public EffectShader.Flag Flags => _Flags_IsSet ? (EffectShader.Flag)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region FillTextureScaleU
        private int _FillTextureScaleULocation => _DATALocation!.Value.Min + 0x184;
        private bool _FillTextureScaleU_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public Single FillTextureScaleU => _FillTextureScaleU_IsSet ? _recordData.Slice(_FillTextureScaleULocation, 4).Float() : default(Single);
        #endregion
        #region FillTextureScaleV
        private int _FillTextureScaleVLocation => _DATALocation!.Value.Min + 0x188;
        private bool _FillTextureScaleV_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break2);
        public Single FillTextureScaleV => _FillTextureScaleV_IsSet ? _recordData.Slice(_FillTextureScaleVLocation, 4).Float() : default(Single);
        #endregion
        #region SceneGraphEmitDepthLimit
        private int _SceneGraphEmitDepthLimitLocation => _DATALocation!.Value.Min + 0x18C;
        private bool _SceneGraphEmitDepthLimit_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(EffectShader.DATADataType.Break3);
        public UInt32 SceneGraphEmitDepthLimit => _SceneGraphEmitDepthLimit_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_SceneGraphEmitDepthLimitLocation, 4)) : default(UInt32);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected EffectShaderBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IEffectShaderGetter EffectShaderFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new EffectShaderBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IEffectShaderGetter EffectShaderFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return EffectShaderFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    _FillTextureLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.FillTexture;
                }
                case RecordTypeInts.ICO2:
                {
                    _ParticleShaderTextureLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.ParticleShaderTexture;
                }
                case RecordTypeInts.NAM7:
                {
                    _HolesTextureLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.HolesTexture;
                }
                case RecordTypeInts.NAM8:
                {
                    _MembranePaletteTextureLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.MembranePaletteTexture;
                }
                case RecordTypeInts.NAM9:
                {
                    _ParticlePaletteTextureLocation = (stream.Position - offset);
                    return (int)EffectShader_FieldIndex.ParticlePaletteTexture;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x134)
                    {
                        this.DATADataTypeState |= EffectShader.DATADataType.Break0;
                    }
                    if (subLen <= 0x138)
                    {
                        this.DATADataTypeState |= EffectShader.DATADataType.Break1;
                    }
                    if (subLen <= 0x158)
                    {
                        this.DATADataTypeState |= EffectShader.DATADataType.Break2;
                    }
                    if (subLen <= 0x18C)
                    {
                        this.DATADataTypeState |= EffectShader.DATADataType.Break3;
                    }
                    return (int)EffectShader_FieldIndex.SceneGraphEmitDepthLimit;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            EffectShaderMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<EffectShader>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IEffectShaderGetter rhs) return false;
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IEffectShaderGetter? obj)
        {
            return ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((EffectShaderCommon)((IEffectShaderGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

