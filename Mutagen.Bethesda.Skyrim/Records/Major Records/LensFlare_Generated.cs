/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class LensFlare :
        SkyrimMajorRecord,
        IEquatable<ILensFlareGetter>,
        ILensFlareInternal,
        ILoquiObjectSetter<LensFlare>
    {
        #region Ctor
        protected LensFlare()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ColorInfluence
        public Single? ColorInfluence { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILensFlareGetter.ColorInfluence => this.ColorInfluence;
        #endregion
        #region FadeDistanceRadiusScale
        public Single? FadeDistanceRadiusScale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILensFlareGetter.FadeDistanceRadiusScale => this.FadeDistanceRadiusScale;
        #endregion
        #region Sprites
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LensFlareSprite>? _Sprites;
        public ExtendedList<LensFlareSprite>? Sprites
        {
            get => this._Sprites;
            set => this._Sprites = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILensFlareSpriteGetter>? ILensFlareGetter.Sprites => _Sprites;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LensFlareMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ColorInfluence = initialValue;
                this.FadeDistanceRadiusScale = initialValue;
                this.Sprites = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LensFlareSprite.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LensFlareSprite.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem ColorInfluence,
                TItem FadeDistanceRadiusScale,
                TItem Sprites)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.ColorInfluence = ColorInfluence;
                this.FadeDistanceRadiusScale = FadeDistanceRadiusScale;
                this.Sprites = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LensFlareSprite.Mask<TItem>?>>?>(Sprites, Enumerable.Empty<MaskItemIndexed<TItem, LensFlareSprite.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ColorInfluence;
            public TItem FadeDistanceRadiusScale;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LensFlareSprite.Mask<TItem>?>>?>? Sprites;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ColorInfluence, rhs.ColorInfluence)) return false;
                if (!object.Equals(this.FadeDistanceRadiusScale, rhs.FadeDistanceRadiusScale)) return false;
                if (!object.Equals(this.Sprites, rhs.Sprites)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ColorInfluence);
                hash.Add(this.FadeDistanceRadiusScale);
                hash.Add(this.Sprites);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ColorInfluence)) return false;
                if (!eval(this.FadeDistanceRadiusScale)) return false;
                if (this.Sprites != null)
                {
                    if (!eval(this.Sprites.Overall)) return false;
                    if (this.Sprites.Specific != null)
                    {
                        foreach (var item in this.Sprites.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ColorInfluence)) return true;
                if (eval(this.FadeDistanceRadiusScale)) return true;
                if (this.Sprites != null)
                {
                    if (eval(this.Sprites.Overall)) return true;
                    if (this.Sprites.Specific != null)
                    {
                        foreach (var item in this.Sprites.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LensFlare.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ColorInfluence = eval(this.ColorInfluence);
                obj.FadeDistanceRadiusScale = eval(this.FadeDistanceRadiusScale);
                if (Sprites != null)
                {
                    obj.Sprites = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LensFlareSprite.Mask<R>?>>?>(eval(this.Sprites.Overall), Enumerable.Empty<MaskItemIndexed<R, LensFlareSprite.Mask<R>?>>());
                    if (Sprites.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LensFlareSprite.Mask<R>?>>();
                        obj.Sprites.Specific = l;
                        foreach (var item in Sprites.Specific)
                        {
                            MaskItemIndexed<R, LensFlareSprite.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LensFlareSprite.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(LensFlare.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, LensFlare.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(LensFlare.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ColorInfluence ?? true)
                    {
                        sb.AppendItem(ColorInfluence, "ColorInfluence");
                    }
                    if (printMask?.FadeDistanceRadiusScale ?? true)
                    {
                        sb.AppendItem(FadeDistanceRadiusScale, "FadeDistanceRadiusScale");
                    }
                    if ((printMask?.Sprites?.Overall ?? true)
                        && Sprites is {} SpritesItem)
                    {
                        sb.AppendLine("Sprites =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SpritesItem.Overall);
                            if (SpritesItem.Specific != null)
                            {
                                foreach (var subItem in SpritesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ColorInfluence;
            public Exception? FadeDistanceRadiusScale;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LensFlareSprite.ErrorMask?>>?>? Sprites;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LensFlare_FieldIndex enu = (LensFlare_FieldIndex)index;
                switch (enu)
                {
                    case LensFlare_FieldIndex.ColorInfluence:
                        return ColorInfluence;
                    case LensFlare_FieldIndex.FadeDistanceRadiusScale:
                        return FadeDistanceRadiusScale;
                    case LensFlare_FieldIndex.Sprites:
                        return Sprites;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LensFlare_FieldIndex enu = (LensFlare_FieldIndex)index;
                switch (enu)
                {
                    case LensFlare_FieldIndex.ColorInfluence:
                        this.ColorInfluence = ex;
                        break;
                    case LensFlare_FieldIndex.FadeDistanceRadiusScale:
                        this.FadeDistanceRadiusScale = ex;
                        break;
                    case LensFlare_FieldIndex.Sprites:
                        this.Sprites = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LensFlareSprite.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LensFlare_FieldIndex enu = (LensFlare_FieldIndex)index;
                switch (enu)
                {
                    case LensFlare_FieldIndex.ColorInfluence:
                        this.ColorInfluence = (Exception?)obj;
                        break;
                    case LensFlare_FieldIndex.FadeDistanceRadiusScale:
                        this.FadeDistanceRadiusScale = (Exception?)obj;
                        break;
                    case LensFlare_FieldIndex.Sprites:
                        this.Sprites = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LensFlareSprite.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ColorInfluence != null) return true;
                if (FadeDistanceRadiusScale != null) return true;
                if (Sprites != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(ColorInfluence, "ColorInfluence");
                }
                {
                    sb.AppendItem(FadeDistanceRadiusScale, "FadeDistanceRadiusScale");
                }
                if (Sprites is {} SpritesItem)
                {
                    sb.AppendLine("Sprites =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SpritesItem.Overall);
                        if (SpritesItem.Specific != null)
                        {
                            foreach (var subItem in SpritesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ColorInfluence = this.ColorInfluence.Combine(rhs.ColorInfluence);
                ret.FadeDistanceRadiusScale = this.FadeDistanceRadiusScale.Combine(rhs.FadeDistanceRadiusScale);
                ret.Sprites = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LensFlareSprite.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Sprites?.Overall, rhs.Sprites?.Overall), Noggog.ExceptionExt.Combine(this.Sprites?.Specific, rhs.Sprites?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ColorInfluence;
            public bool FadeDistanceRadiusScale;
            public LensFlareSprite.TranslationMask? Sprites;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ColorInfluence = defaultOn;
                this.FadeDistanceRadiusScale = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ColorInfluence, null));
                ret.Add((FadeDistanceRadiusScale, null));
                ret.Add((Sprites == null ? DefaultOn : !Sprites.GetCrystal().CopyNothing, Sprites?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = LensFlare_Registration.TriggeringRecordType;
        public LensFlare(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private LensFlare(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal LensFlare(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public LensFlare(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public LensFlare(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<LensFlare>.ToString(this);
        }

        protected override Type LinkType => typeof(ILensFlare);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => LensFlareCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => LensFlareSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => LensFlareSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => LensFlareSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILensFlareGetter rhs) return false;
            return ((LensFlareCommon)((ILensFlareGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILensFlareGetter? obj)
        {
            return ((LensFlareCommon)((ILensFlareGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LensFlareCommon)((ILensFlareGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LensFlareBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LensFlareBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static LensFlare CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new LensFlare();
            ((LensFlareSetterCommon)((ILensFlareGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LensFlare item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LensFlareSetterCommon)((ILensFlareGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LensFlare GetNew()
        {
            return new LensFlare();
        }

    }
    #endregion

    #region Interface
    public partial interface ILensFlare :
        IAssetLinkContainer,
        ILensFlareGetter,
        ILoquiObjectSetter<ILensFlareInternal>,
        ISkyrimMajorRecordInternal
    {
        new Single? ColorInfluence { get; set; }
        new Single? FadeDistanceRadiusScale { get; set; }
        new ExtendedList<LensFlareSprite>? Sprites { get; set; }
    }

    public partial interface ILensFlareInternal :
        ISkyrimMajorRecordInternal,
        ILensFlare,
        ILensFlareGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.LENS)]
    public partial interface ILensFlareGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        ILoquiObject<ILensFlareGetter>,
        IMapsToGetter<ILensFlareGetter>
    {
        static new ILoquiRegistration StaticRegistration => LensFlare_Registration.Instance;
        Single? ColorInfluence { get; }
        Single? FadeDistanceRadiusScale { get; }
        IReadOnlyList<ILensFlareSpriteGetter>? Sprites { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LensFlareMixIn
    {
        public static void Clear(this ILensFlareInternal item)
        {
            ((LensFlareSetterCommon)((ILensFlareGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LensFlare.Mask<bool> GetEqualsMask(
            this ILensFlareGetter item,
            ILensFlareGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LensFlareCommon)((ILensFlareGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILensFlareGetter item,
            string? name = null,
            LensFlare.Mask<bool>? printMask = null)
        {
            return ((LensFlareCommon)((ILensFlareGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILensFlareGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LensFlare.Mask<bool>? printMask = null)
        {
            ((LensFlareCommon)((ILensFlareGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILensFlareGetter item,
            ILensFlareGetter rhs,
            LensFlare.TranslationMask? equalsMask = null)
        {
            return ((LensFlareCommon)((ILensFlareGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILensFlareInternal lhs,
            ILensFlareGetter rhs,
            out LensFlare.ErrorMask errorMask,
            LensFlare.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LensFlareSetterTranslationCommon)((ILensFlareGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LensFlare.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILensFlareInternal lhs,
            ILensFlareGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LensFlareSetterTranslationCommon)((ILensFlareGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LensFlare DeepCopy(
            this ILensFlareGetter item,
            LensFlare.TranslationMask? copyMask = null)
        {
            return ((LensFlareSetterTranslationCommon)((ILensFlareGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LensFlare DeepCopy(
            this ILensFlareGetter item,
            out LensFlare.ErrorMask errorMask,
            LensFlare.TranslationMask? copyMask = null)
        {
            return ((LensFlareSetterTranslationCommon)((ILensFlareGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LensFlare DeepCopy(
            this ILensFlareGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LensFlareSetterTranslationCommon)((ILensFlareGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static LensFlare Duplicate(
            this ILensFlareGetter item,
            FormKey formKey,
            LensFlare.TranslationMask? copyMask = null)
        {
            return ((LensFlareCommon)((ILensFlareGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static LensFlare Duplicate(
            this ILensFlareGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((LensFlareCommon)((ILensFlareGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILensFlareInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LensFlareSetterCommon)((ILensFlareGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum LensFlare_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        ColorInfluence = 7,
        FadeDistanceRadiusScale = 8,
        Sprites = 9,
    }
    #endregion

    #region Registration
    internal partial class LensFlare_Registration : ILoquiRegistration
    {
        public static readonly LensFlare_Registration Instance = new LensFlare_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 3;

        public const ushort FieldCount = 10;

        public static readonly Type MaskType = typeof(LensFlare.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LensFlare.ErrorMask);

        public static readonly Type ClassType = typeof(LensFlare);

        public static readonly Type GetterType = typeof(ILensFlareGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILensFlare);

        public static readonly Type? InternalSetterType = typeof(ILensFlareInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.LensFlare";

        public const string Name = "LensFlare";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LENS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.LENS);
            var all = RecordCollection.Factory(
                RecordTypes.LENS,
                RecordTypes.CNAM,
                RecordTypes.DNAM,
                RecordTypes.LFSP,
                RecordTypes.FNAM,
                RecordTypes.LFSD);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LensFlareBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LensFlareSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly LensFlareSetterCommon Instance = new LensFlareSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILensFlareInternal item)
        {
            ClearPartial();
            item.ColorInfluence = default;
            item.FadeDistanceRadiusScale = default;
            item.Sprites = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ILensFlareInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILensFlareInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILensFlare obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ILensFlare obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.Sprites is {} SpritesItem)
            {
                foreach (var item in SpritesItem.SelectMany(f => f.EnumerateListedAssetLinks()))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ILensFlare obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Sprites?.ForEach(x => x.RemapAssetLinks(mapping, queryCategories, linkCache));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILensFlareInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ILensFlareInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LensFlareBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LensFlareBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (LensFlare)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (LensFlare)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class LensFlareCommon : SkyrimMajorRecordCommon
    {
        public new static readonly LensFlareCommon Instance = new LensFlareCommon();

        public LensFlare.Mask<bool> GetEqualsMask(
            ILensFlareGetter item,
            ILensFlareGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LensFlare.Mask<bool>(false);
            ((LensFlareCommon)((ILensFlareGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILensFlareGetter item,
            ILensFlareGetter rhs,
            LensFlare.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ColorInfluence = item.ColorInfluence.EqualsWithin(rhs.ColorInfluence);
            ret.FadeDistanceRadiusScale = item.FadeDistanceRadiusScale.EqualsWithin(rhs.FadeDistanceRadiusScale);
            ret.Sprites = item.Sprites.CollectionEqualsHelper(
                rhs.Sprites,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ILensFlareGetter item,
            string? name = null,
            LensFlare.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILensFlareGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LensFlare.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"LensFlare =>");
            }
            else
            {
                sb.AppendLine($"{name} (LensFlare) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILensFlareGetter item,
            StructuredStringBuilder sb,
            LensFlare.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.ColorInfluence ?? true)
                && item.ColorInfluence is {} ColorInfluenceItem)
            {
                sb.AppendItem(ColorInfluenceItem, "ColorInfluence");
            }
            if ((printMask?.FadeDistanceRadiusScale ?? true)
                && item.FadeDistanceRadiusScale is {} FadeDistanceRadiusScaleItem)
            {
                sb.AppendItem(FadeDistanceRadiusScaleItem, "FadeDistanceRadiusScale");
            }
            if ((printMask?.Sprites?.Overall ?? true)
                && item.Sprites is {} SpritesItem)
            {
                sb.AppendLine("Sprites =>");
                using (sb.Brace())
                {
                    foreach (var subItem in SpritesItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static LensFlare_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LensFlare_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (LensFlare_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (LensFlare_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (LensFlare_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (LensFlare_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (LensFlare_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (LensFlare_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new LensFlare_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LensFlare_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LensFlare_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (LensFlare_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LensFlare_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILensFlareGetter? lhs,
            ILensFlareGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)LensFlare_FieldIndex.ColorInfluence) ?? true))
            {
                if (!lhs.ColorInfluence.EqualsWithin(rhs.ColorInfluence)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LensFlare_FieldIndex.FadeDistanceRadiusScale) ?? true))
            {
                if (!lhs.FadeDistanceRadiusScale.EqualsWithin(rhs.FadeDistanceRadiusScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LensFlare_FieldIndex.Sprites) ?? true))
            {
                if (!lhs.Sprites.SequenceEqualNullable(rhs.Sprites, (l, r) => ((LensFlareSpriteCommon)((ILensFlareSpriteGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)LensFlare_FieldIndex.Sprites)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILensFlareGetter?)lhs,
                rhs: rhs as ILensFlareGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILensFlareGetter?)lhs,
                rhs: rhs as ILensFlareGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ILensFlareGetter item)
        {
            var hash = new HashCode();
            if (item.ColorInfluence is {} ColorInfluenceitem)
            {
                hash.Add(ColorInfluenceitem);
            }
            if (item.FadeDistanceRadiusScale is {} FadeDistanceRadiusScaleitem)
            {
                hash.Add(FadeDistanceRadiusScaleitem);
            }
            hash.Add(item.Sprites);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ILensFlareGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILensFlareGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LensFlare.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILensFlareGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ILensFlareGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.Sprites is {} SpritesItem)
            {
                foreach (var item in SpritesItem.SelectMany(f => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public LensFlare Duplicate(
            ILensFlareGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new LensFlare(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILensFlareGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILensFlareGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class LensFlareSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly LensFlareSetterTranslationCommon Instance = new LensFlareSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILensFlareInternal item,
            ILensFlareGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILensFlare item,
            ILensFlareGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)LensFlare_FieldIndex.ColorInfluence) ?? true))
            {
                item.ColorInfluence = rhs.ColorInfluence;
            }
            if ((copyMask?.GetShouldTranslate((int)LensFlare_FieldIndex.FadeDistanceRadiusScale) ?? true))
            {
                item.FadeDistanceRadiusScale = rhs.FadeDistanceRadiusScale;
            }
            if ((copyMask?.GetShouldTranslate((int)LensFlare_FieldIndex.Sprites) ?? true))
            {
                errorMask?.PushIndex((int)LensFlare_FieldIndex.Sprites);
                try
                {
                    if ((rhs.Sprites != null))
                    {
                        item.Sprites = 
                            rhs.Sprites
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<LensFlareSprite>();
                    }
                    else
                    {
                        item.Sprites = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ILensFlare item,
            ILensFlareGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILensFlareInternal)item,
                rhs: (ILensFlareGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILensFlare)item,
                rhs: (ILensFlareGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILensFlareInternal)item,
                rhs: (ILensFlareGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILensFlare)item,
                rhs: (ILensFlareGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public LensFlare DeepCopy(
            ILensFlareGetter item,
            LensFlare.TranslationMask? copyMask = null)
        {
            LensFlare ret = (LensFlare)((LensFlareCommon)((ILensFlareGetter)item).CommonInstance()!).GetNew();
            ((LensFlareSetterTranslationCommon)((ILensFlareGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LensFlare DeepCopy(
            ILensFlareGetter item,
            out LensFlare.ErrorMask errorMask,
            LensFlare.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LensFlare ret = (LensFlare)((LensFlareCommon)((ILensFlareGetter)item).CommonInstance()!).GetNew();
            ((LensFlareSetterTranslationCommon)((ILensFlareGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LensFlare.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LensFlare DeepCopy(
            ILensFlareGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LensFlare ret = (LensFlare)((LensFlareCommon)((ILensFlareGetter)item).CommonInstance()!).GetNew();
            ((LensFlareSetterTranslationCommon)((ILensFlareGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class LensFlare
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LensFlare_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => LensFlare_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LensFlareCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LensFlareSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LensFlareSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class LensFlareBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly LensFlareBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ILensFlareGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ColorInfluence,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FadeDistanceRadiusScale,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILensFlareSpriteGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Sprites,
                counterType: RecordTypes.LFSP,
                counterLength: 4,
                transl: (MutagenWriter subWriter, ILensFlareSpriteGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LensFlareSpriteBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ILensFlareGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.LENS,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILensFlareGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILensFlareGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILensFlareGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LensFlareBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly LensFlareBinaryCreateTranslation Instance = new LensFlareBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LENS;
        public static ParseResult FillBinaryRecordTypes(
            ILensFlareInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ColorInfluence = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)LensFlare_FieldIndex.ColorInfluence;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FadeDistanceRadiusScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)LensFlare_FieldIndex.FadeDistanceRadiusScale;
                }
                case RecordTypeInts.LFSP:
                {
                    item.Sprites = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LensFlareSprite>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.LFSP,
                            triggeringRecord: LensFlareSprite_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: LensFlareSprite.TryCreateFromBinary)
                        .CastExtendedList<LensFlareSprite>();
                    return (int)LensFlare_FieldIndex.Sprites;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class LensFlareBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class LensFlareBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ILensFlareGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LensFlare_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => LensFlare_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LensFlareCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LensFlareSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => LensFlareCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LensFlareBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LensFlareBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ILensFlare);


        #region ColorInfluence
        private int? _ColorInfluenceLocation;
        public Single? ColorInfluence => _ColorInfluenceLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ColorInfluenceLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region FadeDistanceRadiusScale
        private int? _FadeDistanceRadiusScaleLocation;
        public Single? FadeDistanceRadiusScale => _FadeDistanceRadiusScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FadeDistanceRadiusScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public IReadOnlyList<ILensFlareSpriteGetter>? Sprites { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LensFlareBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILensFlareGetter LensFlareFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new LensFlareBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ILensFlareGetter LensFlareFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LensFlareFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    _ColorInfluenceLocation = (stream.Position - offset);
                    return (int)LensFlare_FieldIndex.ColorInfluence;
                }
                case RecordTypeInts.DNAM:
                {
                    _FadeDistanceRadiusScaleLocation = (stream.Position - offset);
                    return (int)LensFlare_FieldIndex.FadeDistanceRadiusScale;
                }
                case RecordTypeInts.LFSP:
                {
                    this.Sprites = BinaryOverlayList.FactoryByCountPerItem<ILensFlareSpriteGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: LensFlareSprite_Registration.TriggerSpecs,
                        countType: RecordTypes.LFSP,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => LensFlareSpriteBinaryOverlay.LensFlareSpriteFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)LensFlare_FieldIndex.Sprites;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LensFlareMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<LensFlare>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILensFlareGetter rhs) return false;
            return ((LensFlareCommon)((ILensFlareGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILensFlareGetter? obj)
        {
            return ((LensFlareCommon)((ILensFlareGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LensFlareCommon)((ILensFlareGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

