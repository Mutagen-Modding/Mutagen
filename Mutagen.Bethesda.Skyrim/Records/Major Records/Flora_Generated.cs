/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Flora :
        SkyrimMajorRecord,
        IEquatable<IFloraGetter>,
        IFloraInternal,
        ILoquiObjectSetter<Flora>
    {
        #region Ctor
        protected Flora()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IFloraGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IFloraGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedRequired, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString Name { get; set; } = string.Empty;
        ITranslatedStringGetter IFloraGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IFloraGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IFloraGetter.Destructible => this.Destructible;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IFloraGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region PNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _PNAM;
        public MemorySlice<Byte>? PNAM
        {
            get => this._PNAM;
            set => this._PNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFloraGetter.PNAM => this.PNAM;
        #endregion
        #region ActivateTextOverride
        public TranslatedString? ActivateTextOverride { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IFloraGetter.ActivateTextOverride => this.ActivateTextOverride;
        #endregion
        #region FNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _FNAM;
        public MemorySlice<Byte>? FNAM
        {
            get => this._FNAM;
            set => this._FNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IFloraGetter.FNAM => this.FNAM;
        #endregion
        #region Ingredient
        private readonly IFormLinkNullable<IHarvestTargetGetter> _Ingredient = new FormLinkNullable<IHarvestTargetGetter>();
        public IFormLinkNullable<IHarvestTargetGetter> Ingredient
        {
            get => _Ingredient;
            set => _Ingredient.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IHarvestTargetGetter> IFloraGetter.Ingredient => this.Ingredient;
        #endregion
        #region HarvestSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _HarvestSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> HarvestSound
        {
            get => _HarvestSound;
            set => _HarvestSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IFloraGetter.HarvestSound => this.HarvestSound;
        #endregion
        #region Production
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SeasonalIngredientProduction? _Production;
        public SeasonalIngredientProduction? Production
        {
            get => _Production;
            set => _Production = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISeasonalIngredientProductionGetter? IFloraGetter.Production => this.Production;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FloraMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.PNAM = initialValue;
                this.ActivateTextOverride = initialValue;
                this.FNAM = initialValue;
                this.Ingredient = initialValue;
                this.HarvestSound = initialValue;
                this.Production = new MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>(initialValue, new SeasonalIngredientProduction.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem Destructible,
                TItem Keywords,
                TItem PNAM,
                TItem ActivateTextOverride,
                TItem FNAM,
                TItem Ingredient,
                TItem HarvestSound,
                TItem Production)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.PNAM = PNAM;
                this.ActivateTextOverride = ActivateTextOverride;
                this.FNAM = FNAM;
                this.Ingredient = Ingredient;
                this.HarvestSound = HarvestSound;
                this.Production = new MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>(Production, new SeasonalIngredientProduction.Mask<TItem>(Production));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem PNAM;
            public TItem ActivateTextOverride;
            public TItem FNAM;
            public TItem Ingredient;
            public TItem HarvestSound;
            public MaskItem<TItem, SeasonalIngredientProduction.Mask<TItem>?>? Production { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.PNAM, rhs.PNAM)) return false;
                if (!object.Equals(this.ActivateTextOverride, rhs.ActivateTextOverride)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.Ingredient, rhs.Ingredient)) return false;
                if (!object.Equals(this.HarvestSound, rhs.HarvestSound)) return false;
                if (!object.Equals(this.Production, rhs.Production)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.Keywords);
                hash.Add(this.PNAM);
                hash.Add(this.ActivateTextOverride);
                hash.Add(this.FNAM);
                hash.Add(this.Ingredient);
                hash.Add(this.HarvestSound);
                hash.Add(this.Production);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.PNAM)) return false;
                if (!eval(this.ActivateTextOverride)) return false;
                if (!eval(this.FNAM)) return false;
                if (!eval(this.Ingredient)) return false;
                if (!eval(this.HarvestSound)) return false;
                if (Production != null)
                {
                    if (!eval(this.Production.Overall)) return false;
                    if (this.Production.Specific != null && !this.Production.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.PNAM)) return true;
                if (eval(this.ActivateTextOverride)) return true;
                if (eval(this.FNAM)) return true;
                if (eval(this.Ingredient)) return true;
                if (eval(this.HarvestSound)) return true;
                if (Production != null)
                {
                    if (eval(this.Production.Overall)) return true;
                    if (this.Production.Specific != null && this.Production.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Flora.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.PNAM = eval(this.PNAM);
                obj.ActivateTextOverride = eval(this.ActivateTextOverride);
                obj.FNAM = eval(this.FNAM);
                obj.Ingredient = eval(this.Ingredient);
                obj.HarvestSound = eval(this.HarvestSound);
                obj.Production = this.Production == null ? null : new MaskItem<R, SeasonalIngredientProduction.Mask<R>?>(eval(this.Production.Overall), this.Production.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Flora.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Flora.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Flora.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.Print(sb);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.PNAM ?? true)
                    {
                        sb.AppendItem(PNAM, "PNAM");
                    }
                    if (printMask?.ActivateTextOverride ?? true)
                    {
                        sb.AppendItem(ActivateTextOverride, "ActivateTextOverride");
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.Ingredient ?? true)
                    {
                        sb.AppendItem(Ingredient, "Ingredient");
                    }
                    if (printMask?.HarvestSound ?? true)
                    {
                        sb.AppendItem(HarvestSound, "HarvestSound");
                    }
                    if (printMask?.Production?.Overall ?? true)
                    {
                        Production?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? PNAM;
            public Exception? ActivateTextOverride;
            public Exception? FNAM;
            public Exception? Ingredient;
            public Exception? HarvestSound;
            public MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>? Production;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Flora_FieldIndex enu = (Flora_FieldIndex)index;
                switch (enu)
                {
                    case Flora_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Flora_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Flora_FieldIndex.Name:
                        return Name;
                    case Flora_FieldIndex.Model:
                        return Model;
                    case Flora_FieldIndex.Destructible:
                        return Destructible;
                    case Flora_FieldIndex.Keywords:
                        return Keywords;
                    case Flora_FieldIndex.PNAM:
                        return PNAM;
                    case Flora_FieldIndex.ActivateTextOverride:
                        return ActivateTextOverride;
                    case Flora_FieldIndex.FNAM:
                        return FNAM;
                    case Flora_FieldIndex.Ingredient:
                        return Ingredient;
                    case Flora_FieldIndex.HarvestSound:
                        return HarvestSound;
                    case Flora_FieldIndex.Production:
                        return Production;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Flora_FieldIndex enu = (Flora_FieldIndex)index;
                switch (enu)
                {
                    case Flora_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Flora_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Flora_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Flora_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Flora_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Flora_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Flora_FieldIndex.PNAM:
                        this.PNAM = ex;
                        break;
                    case Flora_FieldIndex.ActivateTextOverride:
                        this.ActivateTextOverride = ex;
                        break;
                    case Flora_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case Flora_FieldIndex.Ingredient:
                        this.Ingredient = ex;
                        break;
                    case Flora_FieldIndex.HarvestSound:
                        this.HarvestSound = ex;
                        break;
                    case Flora_FieldIndex.Production:
                        this.Production = new MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Flora_FieldIndex enu = (Flora_FieldIndex)index;
                switch (enu)
                {
                    case Flora_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Flora_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Flora_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Flora_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Flora_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Flora_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Flora_FieldIndex.PNAM:
                        this.PNAM = (Exception?)obj;
                        break;
                    case Flora_FieldIndex.ActivateTextOverride:
                        this.ActivateTextOverride = (Exception?)obj;
                        break;
                    case Flora_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case Flora_FieldIndex.Ingredient:
                        this.Ingredient = (Exception?)obj;
                        break;
                    case Flora_FieldIndex.HarvestSound:
                        this.HarvestSound = (Exception?)obj;
                        break;
                    case Flora_FieldIndex.Production:
                        this.Production = (MaskItem<Exception?, SeasonalIngredientProduction.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (Keywords != null) return true;
                if (PNAM != null) return true;
                if (ActivateTextOverride != null) return true;
                if (FNAM != null) return true;
                if (Ingredient != null) return true;
                if (HarvestSound != null) return true;
                if (Production != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                Destructible?.Print(sb);
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(PNAM, "PNAM");
                }
                {
                    sb.AppendItem(ActivateTextOverride, "ActivateTextOverride");
                }
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
                {
                    sb.AppendItem(Ingredient, "Ingredient");
                }
                {
                    sb.AppendItem(HarvestSound, "HarvestSound");
                }
                Production?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.PNAM = this.PNAM.Combine(rhs.PNAM);
                ret.ActivateTextOverride = this.ActivateTextOverride.Combine(rhs.ActivateTextOverride);
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.Ingredient = this.Ingredient.Combine(rhs.Ingredient);
                ret.HarvestSound = this.HarvestSound.Combine(rhs.HarvestSound);
                ret.Production = this.Production.Combine(rhs.Production, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public Model.TranslationMask? Model;
            public Destructible.TranslationMask? Destructible;
            public bool Keywords;
            public bool PNAM;
            public bool ActivateTextOverride;
            public bool FNAM;
            public bool Ingredient;
            public bool HarvestSound;
            public SeasonalIngredientProduction.TranslationMask? Production;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.PNAM = defaultOn;
                this.ActivateTextOverride = defaultOn;
                this.FNAM = defaultOn;
                this.Ingredient = defaultOn;
                this.HarvestSound = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((PNAM, null));
                ret.Add((ActivateTextOverride, null));
                ret.Add((FNAM, null));
                ret.Add((Ingredient, null));
                ret.Add((HarvestSound, null));
                ret.Add((Production != null ? Production.OnOverall : DefaultOn, Production?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Flora_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FloraCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FloraSetterCommon.Instance.RemapLinks(this, mapping);
        public Flora(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Flora(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Flora(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Flora(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Flora(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Flora>.ToString(this);
        }

        protected override Type LinkType => typeof(IFlora);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => FloraCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => FloraSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => FloraSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => FloraSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFloraGetter rhs) return false;
            return ((FloraCommon)((IFloraGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFloraGetter? obj)
        {
            return ((FloraCommon)((IFloraGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FloraCommon)((IFloraGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FloraBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FloraBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Flora CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Flora();
            ((FloraSetterCommon)((IFloraGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Flora item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FloraSetterCommon)((IFloraGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Flora GetNew()
        {
            return new Flora();
        }

    }
    #endregion

    #region Interface
    public partial interface IFlora :
        IAssetLinkContainer,
        IExplodeSpawn,
        IFloraGetter,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IFloraInternal>,
        IModeled,
        INamedRequired,
        IObjectBounded,
        IPlaceableObject,
        IReferenceableObject,
        IRegionTarget,
        IScripted,
        ISkyrimMajorRecordInternal,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        /// <summary>
        /// Aspects: INamedRequired, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new Destructible? Destructible { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new MemorySlice<Byte>? PNAM { get; set; }
        new TranslatedString? ActivateTextOverride { get; set; }
        new MemorySlice<Byte>? FNAM { get; set; }
        new IFormLinkNullable<IHarvestTargetGetter> Ingredient { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> HarvestSound { get; set; }
        new SeasonalIngredientProduction? Production { get; set; }
    }

    public partial interface IFloraInternal :
        ISkyrimMajorRecordInternal,
        IFlora,
        IFloraGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.FLOR)]
    public partial interface IFloraGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IFloraGetter>,
        IMapsToGetter<IFloraGetter>,
        IModeledGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IPlaceableObjectGetter,
        IReferenceableObjectGetter,
        IRegionTargetGetter,
        IScriptedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Flora_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedRequiredGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IDestructibleGetter? Destructible { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        ReadOnlyMemorySlice<Byte>? PNAM { get; }
        ITranslatedStringGetter? ActivateTextOverride { get; }
        ReadOnlyMemorySlice<Byte>? FNAM { get; }
        IFormLinkNullableGetter<IHarvestTargetGetter> Ingredient { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> HarvestSound { get; }
        ISeasonalIngredientProductionGetter? Production { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FloraMixIn
    {
        public static void Clear(this IFloraInternal item)
        {
            ((FloraSetterCommon)((IFloraGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Flora.Mask<bool> GetEqualsMask(
            this IFloraGetter item,
            IFloraGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FloraCommon)((IFloraGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFloraGetter item,
            string? name = null,
            Flora.Mask<bool>? printMask = null)
        {
            return ((FloraCommon)((IFloraGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFloraGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Flora.Mask<bool>? printMask = null)
        {
            ((FloraCommon)((IFloraGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFloraGetter item,
            IFloraGetter rhs,
            Flora.TranslationMask? equalsMask = null)
        {
            return ((FloraCommon)((IFloraGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFloraInternal lhs,
            IFloraGetter rhs,
            out Flora.ErrorMask errorMask,
            Flora.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FloraSetterTranslationCommon)((IFloraGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Flora.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFloraInternal lhs,
            IFloraGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FloraSetterTranslationCommon)((IFloraGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Flora DeepCopy(
            this IFloraGetter item,
            Flora.TranslationMask? copyMask = null)
        {
            return ((FloraSetterTranslationCommon)((IFloraGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Flora DeepCopy(
            this IFloraGetter item,
            out Flora.ErrorMask errorMask,
            Flora.TranslationMask? copyMask = null)
        {
            return ((FloraSetterTranslationCommon)((IFloraGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Flora DeepCopy(
            this IFloraGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FloraSetterTranslationCommon)((IFloraGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Flora Duplicate(
            this IFloraGetter item,
            FormKey formKey,
            Flora.TranslationMask? copyMask = null)
        {
            return ((FloraCommon)((IFloraGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Flora Duplicate(
            this IFloraGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((FloraCommon)((IFloraGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFloraInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FloraSetterCommon)((IFloraGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Flora_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        Name = 9,
        Model = 10,
        Destructible = 11,
        Keywords = 12,
        PNAM = 13,
        ActivateTextOverride = 14,
        FNAM = 15,
        Ingredient = 16,
        HarvestSound = 17,
        Production = 18,
    }
    #endregion

    #region Registration
    internal partial class Flora_Registration : ILoquiRegistration
    {
        public static readonly Flora_Registration Instance = new Flora_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 12;

        public const ushort FieldCount = 19;

        public static readonly Type MaskType = typeof(Flora.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Flora.ErrorMask);

        public static readonly Type ClassType = typeof(Flora);

        public static readonly Type GetterType = typeof(IFloraGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFlora);

        public static readonly Type? InternalSetterType = typeof(IFloraInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Flora";

        public const string Name = "Flora";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FLOR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.FLOR);
            var all = RecordCollection.Factory(
                RecordTypes.FLOR,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.DEST,
                RecordTypes.DSTD,
                RecordTypes.DMDL,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.PNAM,
                RecordTypes.RNAM,
                RecordTypes.FNAM,
                RecordTypes.PFIG,
                RecordTypes.SNAM,
                RecordTypes.PFPC);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FloraBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FloraSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly FloraSetterCommon Instance = new FloraSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFloraInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Name.Clear();
            item.Model = null;
            item.Destructible = null;
            item.Keywords = null;
            item.PNAM = default;
            item.ActivateTextOverride = default;
            item.FNAM = default;
            item.Ingredient.Clear();
            item.HarvestSound.Clear();
            item.Production = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IFloraInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFloraInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFlora obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Ingredient.Relink(mapping);
            obj.HarvestSound.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IFlora obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IFlora obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.VirtualMachineAdapter?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Destructible?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFloraInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IFloraInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FloraBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FloraBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Flora)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Flora)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class FloraCommon : SkyrimMajorRecordCommon
    {
        public new static readonly FloraCommon Instance = new FloraCommon();

        public Flora.Mask<bool> GetEqualsMask(
            IFloraGetter item,
            IFloraGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Flora.Mask<bool>(false);
            ((FloraCommon)((IFloraGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFloraGetter item,
            IFloraGetter rhs,
            Flora.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.PNAM = MemorySliceExt.SequenceEqual(item.PNAM, rhs.PNAM);
            ret.ActivateTextOverride = object.Equals(item.ActivateTextOverride, rhs.ActivateTextOverride);
            ret.FNAM = MemorySliceExt.SequenceEqual(item.FNAM, rhs.FNAM);
            ret.Ingredient = item.Ingredient.Equals(rhs.Ingredient);
            ret.HarvestSound = item.HarvestSound.Equals(rhs.HarvestSound);
            ret.Production = EqualsMaskHelper.EqualsHelper(
                item.Production,
                rhs.Production,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFloraGetter item,
            string? name = null,
            Flora.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFloraGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Flora.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Flora =>");
            }
            else
            {
                sb.AppendLine($"{name} (Flora) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFloraGetter item,
            StructuredStringBuilder sb,
            Flora.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.Name ?? true)
            {
                sb.AppendItem(item.Name, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.Print(sb, "Destructible");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.PNAM ?? true)
                && item.PNAM is {} PNAMItem)
            {
                sb.AppendLine($"PNAM => {SpanExt.ToHexString(PNAMItem)}");
            }
            if ((printMask?.ActivateTextOverride ?? true)
                && item.ActivateTextOverride is {} ActivateTextOverrideItem)
            {
                sb.AppendItem(ActivateTextOverrideItem, "ActivateTextOverride");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendLine($"FNAM => {SpanExt.ToHexString(FNAMItem)}");
            }
            if (printMask?.Ingredient ?? true)
            {
                sb.AppendItem(item.Ingredient.FormKeyNullable, "Ingredient");
            }
            if (printMask?.HarvestSound ?? true)
            {
                sb.AppendItem(item.HarvestSound.FormKeyNullable, "HarvestSound");
            }
            if ((printMask?.Production?.Overall ?? true)
                && item.Production is {} ProductionItem)
            {
                ProductionItem?.Print(sb, "Production");
            }
        }
        
        public static Flora_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Flora_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Flora_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Flora_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Flora_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Flora_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Flora_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Flora_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Flora_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Flora_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Flora_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Flora_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Flora_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFloraGetter? lhs,
            IFloraGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Flora_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Flora_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Flora_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, equalsMask?.GetSubCrystal((int)Flora_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.PNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.PNAM, rhs.PNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.ActivateTextOverride) ?? true))
            {
                if (!object.Equals(lhs.ActivateTextOverride, rhs.ActivateTextOverride)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.FNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.FNAM, rhs.FNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.Ingredient) ?? true))
            {
                if (!lhs.Ingredient.Equals(rhs.Ingredient)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.HarvestSound) ?? true))
            {
                if (!lhs.HarvestSound.Equals(rhs.HarvestSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Flora_FieldIndex.Production) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Production, rhs.Production, out var lhsProduction, out var rhsProduction, out var isProductionEqual))
                {
                    if (!((SeasonalIngredientProductionCommon)((ISeasonalIngredientProductionGetter)lhsProduction).CommonInstance()!).Equals(lhsProduction, rhsProduction, equalsMask?.GetSubCrystal((int)Flora_FieldIndex.Production))) return false;
                }
                else if (!isProductionEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFloraGetter?)lhs,
                rhs: rhs as IFloraGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFloraGetter?)lhs,
                rhs: rhs as IFloraGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFloraGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.Name);
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.Keywords);
            if (item.PNAM is {} PNAMItem)
            {
                hash.Add(PNAMItem);
            }
            if (item.ActivateTextOverride is {} ActivateTextOverrideitem)
            {
                hash.Add(ActivateTextOverrideitem);
            }
            if (item.FNAM is {} FNAMItem)
            {
                hash.Add(FNAMItem);
            }
            hash.Add(item.Ingredient);
            hash.Add(item.HarvestSound);
            if (item.Production is {} Productionitem)
            {
                hash.Add(Productionitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IFloraGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFloraGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Flora.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFloraGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.Ingredient, out var IngredientInfo))
            {
                yield return IngredientInfo;
            }
            if (FormLinkInformation.TryFactory(obj.HarvestSound, out var HarvestSoundInfo))
            {
                yield return HarvestSoundInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IFloraGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Flora Duplicate(
            IFloraGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Flora(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFloraGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFloraGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class FloraSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly FloraSetterTranslationCommon Instance = new FloraSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFloraInternal item,
            IFloraGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IFlora item,
            IFloraGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Flora_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Flora_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Flora_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Flora_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Flora_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Flora_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Flora_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Flora_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Flora_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.PNAM) ?? true))
            {
                if(rhs.PNAM is {} PNAMrhs)
                {
                    item.PNAM = PNAMrhs.ToArray();
                }
                else
                {
                    item.PNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.ActivateTextOverride) ?? true))
            {
                item.ActivateTextOverride = rhs.ActivateTextOverride?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.FNAM) ?? true))
            {
                if(rhs.FNAM is {} FNAMrhs)
                {
                    item.FNAM = FNAMrhs.ToArray();
                }
                else
                {
                    item.FNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Ingredient) ?? true))
            {
                item.Ingredient.SetTo(rhs.Ingredient.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.HarvestSound) ?? true))
            {
                item.HarvestSound.SetTo(rhs.HarvestSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Flora_FieldIndex.Production) ?? true))
            {
                errorMask?.PushIndex((int)Flora_FieldIndex.Production);
                try
                {
                    if(rhs.Production is {} rhsProduction)
                    {
                        item.Production = rhsProduction.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Flora_FieldIndex.Production));
                    }
                    else
                    {
                        item.Production = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFlora item,
            IFloraGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFloraInternal)item,
                rhs: (IFloraGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFlora)item,
                rhs: (IFloraGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFloraInternal)item,
                rhs: (IFloraGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFlora)item,
                rhs: (IFloraGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Flora DeepCopy(
            IFloraGetter item,
            Flora.TranslationMask? copyMask = null)
        {
            Flora ret = (Flora)((FloraCommon)((IFloraGetter)item).CommonInstance()!).GetNew();
            ((FloraSetterTranslationCommon)((IFloraGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Flora DeepCopy(
            IFloraGetter item,
            out Flora.ErrorMask errorMask,
            Flora.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Flora ret = (Flora)((FloraCommon)((IFloraGetter)item).CommonInstance()!).GetNew();
            ((FloraSetterTranslationCommon)((IFloraGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Flora.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Flora DeepCopy(
            IFloraGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Flora ret = (Flora)((FloraCommon)((IFloraGetter)item).CommonInstance()!).GetNew();
            ((FloraSetterTranslationCommon)((IFloraGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Flora
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Flora_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Flora_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FloraCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FloraSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FloraSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class FloraBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly FloraBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IFloraGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.PNAM,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ActivateTextOverride,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Ingredient,
                header: translationParams.ConvertToCustom(RecordTypes.PFIG));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HarvestSound,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            if (item.Production is {} ProductionItem)
            {
                ((SeasonalIngredientProductionBinaryWriteTranslation)((IBinaryItem)ProductionItem).BinaryWriteTranslator).Write(
                    item: ProductionItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            IFloraGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.FLOR,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFloraGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFloraGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFloraGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FloraBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly FloraBinaryCreateTranslation Instance = new FloraBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.FLOR;
        public static ParseResult FillBinaryRecordTypes(
            IFloraInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Flora_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Flora_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Flora_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Flora_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Flora_FieldIndex.Destructible;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Flora_FieldIndex.Keywords;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Flora_FieldIndex.PNAM;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ActivateTextOverride = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Flora_FieldIndex.ActivateTextOverride;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Flora_FieldIndex.FNAM;
                }
                case RecordTypeInts.PFIG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Ingredient.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Flora_FieldIndex.Ingredient;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HarvestSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Flora_FieldIndex.HarvestSound;
                }
                case RecordTypeInts.PFPC:
                {
                    item.Production = Mutagen.Bethesda.Skyrim.SeasonalIngredientProduction.CreateFromBinary(frame: frame);
                    return (int)Flora_FieldIndex.Production;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FloraBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class FloraBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IFloraGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Flora_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Flora_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FloraCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FloraSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FloraCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => FloraCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FloraBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FloraBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IFlora);


        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region PNAM
        private int? _PNAMLocation;
        public ReadOnlyMemorySlice<Byte>? PNAM => _PNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _PNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ActivateTextOverride
        private int? _ActivateTextOverrideLocation;
        public ITranslatedStringGetter? ActivateTextOverride => _ActivateTextOverrideLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ActivateTextOverrideLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public ReadOnlyMemorySlice<Byte>? FNAM => _FNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Ingredient
        private int? _IngredientLocation;
        public IFormLinkNullableGetter<IHarvestTargetGetter> Ingredient => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IHarvestTargetGetter>(_package, _recordData, _IngredientLocation);
        #endregion
        #region HarvestSound
        private int? _HarvestSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> HarvestSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _HarvestSoundLocation);
        #endregion
        #region Production
        private RangeInt32? _ProductionLocation;
        public ISeasonalIngredientProductionGetter? Production => _ProductionLocation.HasValue ? SeasonalIngredientProductionBinaryOverlay.SeasonalIngredientProductionFactory(_recordData.Slice(_ProductionLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FloraBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFloraGetter FloraFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FloraBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFloraGetter FloraFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FloraFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Flora_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Flora_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Flora_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Flora_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Flora_FieldIndex.Destructible;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Flora_FieldIndex.Keywords;
                }
                case RecordTypeInts.PNAM:
                {
                    _PNAMLocation = (stream.Position - offset);
                    return (int)Flora_FieldIndex.PNAM;
                }
                case RecordTypeInts.RNAM:
                {
                    _ActivateTextOverrideLocation = (stream.Position - offset);
                    return (int)Flora_FieldIndex.ActivateTextOverride;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)Flora_FieldIndex.FNAM;
                }
                case RecordTypeInts.PFIG:
                {
                    _IngredientLocation = (stream.Position - offset);
                    return (int)Flora_FieldIndex.Ingredient;
                }
                case RecordTypeInts.SNAM:
                {
                    _HarvestSoundLocation = (stream.Position - offset);
                    return (int)Flora_FieldIndex.HarvestSound;
                }
                case RecordTypeInts.PFPC:
                {
                    _ProductionLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Flora_FieldIndex.Production;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FloraMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Flora>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFloraGetter rhs) return false;
            return ((FloraCommon)((IFloraGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFloraGetter? obj)
        {
            return ((FloraCommon)((IFloraGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FloraCommon)((IFloraGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

