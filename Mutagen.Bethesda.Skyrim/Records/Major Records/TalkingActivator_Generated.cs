/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class TalkingActivator :
        SkyrimMajorRecord,
        IEquatable<ITalkingActivatorGetter>,
        ILoquiObjectSetter<TalkingActivator>,
        ITalkingActivatorInternal
    {
        #region Ctor
        protected TalkingActivator()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? ITalkingActivatorGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ITalkingActivatorGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITalkingActivatorGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? ITalkingActivatorGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        /// <summary>
        /// Aspects: IHasDestructible
        /// </summary>
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? ITalkingActivatorGetter.Destructible => this.Destructible;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IHasDestructibleGetter.Destructible => this.Destructible;
        #endregion
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? ITalkingActivatorGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region PNAM
        public Int32? PNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? ITalkingActivatorGetter.PNAM => this.PNAM;
        #endregion
        #region LoopingSound
        private readonly IFormLinkNullable<ISoundMarkerGetter> _LoopingSound = new FormLinkNullable<ISoundMarkerGetter>();
        public IFormLinkNullable<ISoundMarkerGetter> LoopingSound
        {
            get => _LoopingSound;
            set => _LoopingSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundMarkerGetter> ITalkingActivatorGetter.LoopingSound => this.LoopingSound;
        #endregion
        #region FNAM
        public Int16? FNAM { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int16? ITalkingActivatorGetter.FNAM => this.FNAM;
        #endregion
        #region VoiceType
        private readonly IFormLinkNullable<IVoiceTypeGetter> _VoiceType = new FormLinkNullable<IVoiceTypeGetter>();
        public IFormLinkNullable<IVoiceTypeGetter> VoiceType
        {
            get => _VoiceType;
            set => _VoiceType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IVoiceTypeGetter> ITalkingActivatorGetter.VoiceType => this.VoiceType;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TalkingActivatorMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.PNAM = initialValue;
                this.LoopingSound = initialValue;
                this.FNAM = initialValue;
                this.VoiceType = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem Destructible,
                TItem Keywords,
                TItem PNAM,
                TItem LoopingSound,
                TItem FNAM,
                TItem VoiceType)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.PNAM = PNAM;
                this.LoopingSound = LoopingSound;
                this.FNAM = FNAM;
                this.VoiceType = VoiceType;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem PNAM;
            public TItem LoopingSound;
            public TItem FNAM;
            public TItem VoiceType;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.PNAM, rhs.PNAM)) return false;
                if (!object.Equals(this.LoopingSound, rhs.LoopingSound)) return false;
                if (!object.Equals(this.FNAM, rhs.FNAM)) return false;
                if (!object.Equals(this.VoiceType, rhs.VoiceType)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.Keywords);
                hash.Add(this.PNAM);
                hash.Add(this.LoopingSound);
                hash.Add(this.FNAM);
                hash.Add(this.VoiceType);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.PNAM)) return false;
                if (!eval(this.LoopingSound)) return false;
                if (!eval(this.FNAM)) return false;
                if (!eval(this.VoiceType)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.PNAM)) return true;
                if (eval(this.LoopingSound)) return true;
                if (eval(this.FNAM)) return true;
                if (eval(this.VoiceType)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TalkingActivator.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.PNAM = eval(this.PNAM);
                obj.LoopingSound = eval(this.LoopingSound);
                obj.FNAM = eval(this.FNAM);
                obj.VoiceType = eval(this.VoiceType);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TalkingActivator.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TalkingActivator.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TalkingActivator.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.Print(sb);
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.PNAM ?? true)
                    {
                        sb.AppendItem(PNAM, "PNAM");
                    }
                    if (printMask?.LoopingSound ?? true)
                    {
                        sb.AppendItem(LoopingSound, "LoopingSound");
                    }
                    if (printMask?.FNAM ?? true)
                    {
                        sb.AppendItem(FNAM, "FNAM");
                    }
                    if (printMask?.VoiceType ?? true)
                    {
                        sb.AppendItem(VoiceType, "VoiceType");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? PNAM;
            public Exception? LoopingSound;
            public Exception? FNAM;
            public Exception? VoiceType;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
                switch (enu)
                {
                    case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case TalkingActivator_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case TalkingActivator_FieldIndex.Name:
                        return Name;
                    case TalkingActivator_FieldIndex.Model:
                        return Model;
                    case TalkingActivator_FieldIndex.Destructible:
                        return Destructible;
                    case TalkingActivator_FieldIndex.Keywords:
                        return Keywords;
                    case TalkingActivator_FieldIndex.PNAM:
                        return PNAM;
                    case TalkingActivator_FieldIndex.LoopingSound:
                        return LoopingSound;
                    case TalkingActivator_FieldIndex.FNAM:
                        return FNAM;
                    case TalkingActivator_FieldIndex.VoiceType:
                        return VoiceType;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
                switch (enu)
                {
                    case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case TalkingActivator_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case TalkingActivator_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case TalkingActivator_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case TalkingActivator_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case TalkingActivator_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case TalkingActivator_FieldIndex.PNAM:
                        this.PNAM = ex;
                        break;
                    case TalkingActivator_FieldIndex.LoopingSound:
                        this.LoopingSound = ex;
                        break;
                    case TalkingActivator_FieldIndex.FNAM:
                        this.FNAM = ex;
                        break;
                    case TalkingActivator_FieldIndex.VoiceType:
                        this.VoiceType = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                TalkingActivator_FieldIndex enu = (TalkingActivator_FieldIndex)index;
                switch (enu)
                {
                    case TalkingActivator_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case TalkingActivator_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case TalkingActivator_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case TalkingActivator_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case TalkingActivator_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case TalkingActivator_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case TalkingActivator_FieldIndex.PNAM:
                        this.PNAM = (Exception?)obj;
                        break;
                    case TalkingActivator_FieldIndex.LoopingSound:
                        this.LoopingSound = (Exception?)obj;
                        break;
                    case TalkingActivator_FieldIndex.FNAM:
                        this.FNAM = (Exception?)obj;
                        break;
                    case TalkingActivator_FieldIndex.VoiceType:
                        this.VoiceType = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (Keywords != null) return true;
                if (PNAM != null) return true;
                if (LoopingSound != null) return true;
                if (FNAM != null) return true;
                if (VoiceType != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                Destructible?.Print(sb);
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(PNAM, "PNAM");
                }
                {
                    sb.AppendItem(LoopingSound, "LoopingSound");
                }
                {
                    sb.AppendItem(FNAM, "FNAM");
                }
                {
                    sb.AppendItem(VoiceType, "VoiceType");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.PNAM = this.PNAM.Combine(rhs.PNAM);
                ret.LoopingSound = this.LoopingSound.Combine(rhs.LoopingSound);
                ret.FNAM = this.FNAM.Combine(rhs.FNAM);
                ret.VoiceType = this.VoiceType.Combine(rhs.VoiceType);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public Model.TranslationMask? Model;
            public Destructible.TranslationMask? Destructible;
            public bool Keywords;
            public bool PNAM;
            public bool LoopingSound;
            public bool FNAM;
            public bool VoiceType;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Keywords = defaultOn;
                this.PNAM = defaultOn;
                this.LoopingSound = defaultOn;
                this.FNAM = defaultOn;
                this.VoiceType = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((PNAM, null));
                ret.Add((LoopingSound, null));
                ret.Add((FNAM, null));
                ret.Add((VoiceType, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = TalkingActivator_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TalkingActivatorCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TalkingActivatorSetterCommon.Instance.RemapLinks(this, mapping);
        public TalkingActivator(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private TalkingActivator(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal TalkingActivator(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public TalkingActivator(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public TalkingActivator(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<TalkingActivator>.ToString(this);
        }

        protected override Type LinkType => typeof(ITalkingActivator);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => TalkingActivatorCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => TalkingActivatorSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => TalkingActivatorSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => TalkingActivatorSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITalkingActivatorGetter rhs) return false;
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITalkingActivatorGetter? obj)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TalkingActivatorCommon)((ITalkingActivatorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TalkingActivatorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TalkingActivatorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static TalkingActivator CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TalkingActivator();
            ((TalkingActivatorSetterCommon)((ITalkingActivatorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TalkingActivator item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TalkingActivatorSetterCommon)((ITalkingActivatorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new TalkingActivator GetNew()
        {
            return new TalkingActivator();
        }

    }
    #endregion

    #region Interface
    public partial interface ITalkingActivator :
        IAssetLinkContainer,
        IExplodeSpawn,
        IFormLinkContainer,
        IHasDestructible,
        IHaveVirtualMachineAdapter,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<ITalkingActivatorInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IPlaceableObject,
        IReferenceableObject,
        IScripted,
        ISkyrimMajorRecordInternal,
        ITalkingActivatorGetter,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        /// <summary>
        /// Aspects: IHasDestructible
        /// </summary>
        new Destructible? Destructible { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new Int32? PNAM { get; set; }
        new IFormLinkNullable<ISoundMarkerGetter> LoopingSound { get; set; }
        new Int16? FNAM { get; set; }
        new IFormLinkNullable<IVoiceTypeGetter> VoiceType { get; set; }
        #region Mutagen
        new TalkingActivator.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ITalkingActivatorInternal :
        ISkyrimMajorRecordInternal,
        ITalkingActivator,
        ITalkingActivatorGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.TACT)]
    public partial interface ITalkingActivatorGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        IHasDestructibleGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<ITalkingActivatorGetter>,
        IMapsToGetter<ITalkingActivatorGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IPlaceableObjectGetter,
        IReferenceableObjectGetter,
        IScriptedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => TalkingActivator_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        #region Destructible
        /// <summary>
        /// Aspects: IHasDestructibleGetter
        /// </summary>
        IDestructibleGetter? Destructible { get; }
        #endregion
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        Int32? PNAM { get; }
        IFormLinkNullableGetter<ISoundMarkerGetter> LoopingSound { get; }
        Int16? FNAM { get; }
        IFormLinkNullableGetter<IVoiceTypeGetter> VoiceType { get; }

        #region Mutagen
        TalkingActivator.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class TalkingActivatorMixIn
    {
        public static void Clear(this ITalkingActivatorInternal item)
        {
            ((TalkingActivatorSetterCommon)((ITalkingActivatorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TalkingActivator.Mask<bool> GetEqualsMask(
            this ITalkingActivatorGetter item,
            ITalkingActivatorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITalkingActivatorGetter item,
            string? name = null,
            TalkingActivator.Mask<bool>? printMask = null)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITalkingActivatorGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TalkingActivator.Mask<bool>? printMask = null)
        {
            ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITalkingActivatorGetter item,
            ITalkingActivatorGetter rhs,
            TalkingActivator.TranslationMask? equalsMask = null)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITalkingActivatorInternal lhs,
            ITalkingActivatorGetter rhs,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TalkingActivator.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITalkingActivatorInternal lhs,
            ITalkingActivatorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TalkingActivator DeepCopy(
            this ITalkingActivatorGetter item,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            return ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TalkingActivator DeepCopy(
            this ITalkingActivatorGetter item,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            return ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TalkingActivator DeepCopy(
            this ITalkingActivatorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static TalkingActivator Duplicate(
            this ITalkingActivatorGetter item,
            FormKey formKey,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static TalkingActivator Duplicate(
            this ITalkingActivatorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITalkingActivatorInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TalkingActivatorSetterCommon)((ITalkingActivatorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum TalkingActivator_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        Name = 9,
        Model = 10,
        Destructible = 11,
        Keywords = 12,
        PNAM = 13,
        LoopingSound = 14,
        FNAM = 15,
        VoiceType = 16,
    }
    #endregion

    #region Registration
    internal partial class TalkingActivator_Registration : ILoquiRegistration
    {
        public static readonly TalkingActivator_Registration Instance = new TalkingActivator_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 10;

        public const ushort FieldCount = 17;

        public static readonly Type MaskType = typeof(TalkingActivator.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TalkingActivator.ErrorMask);

        public static readonly Type ClassType = typeof(TalkingActivator);

        public static readonly Type GetterType = typeof(ITalkingActivatorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITalkingActivator);

        public static readonly Type? InternalSetterType = typeof(ITalkingActivatorInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.TalkingActivator";

        public const string Name = "TalkingActivator";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TACT;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TACT);
            var all = RecordCollection.Factory(
                RecordTypes.TACT,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.DEST,
                RecordTypes.DSTD,
                RecordTypes.DMDL,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.PNAM,
                RecordTypes.SNAM,
                RecordTypes.FNAM,
                RecordTypes.VNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TalkingActivatorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TalkingActivatorSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly TalkingActivatorSetterCommon Instance = new TalkingActivatorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITalkingActivatorInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Model = null;
            item.Destructible = null;
            item.Keywords = null;
            item.PNAM = default;
            item.LoopingSound.Clear();
            item.FNAM = default;
            item.VoiceType.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ITalkingActivatorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITalkingActivatorInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ITalkingActivator obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.LoopingSound.Relink(mapping);
            obj.VoiceType.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ITalkingActivator obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ITalkingActivator obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.VirtualMachineAdapter?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Destructible?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITalkingActivatorInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ITalkingActivatorInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TalkingActivatorBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TalkingActivatorBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (TalkingActivator)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (TalkingActivator)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class TalkingActivatorCommon : SkyrimMajorRecordCommon
    {
        public new static readonly TalkingActivatorCommon Instance = new TalkingActivatorCommon();

        public TalkingActivator.Mask<bool> GetEqualsMask(
            ITalkingActivatorGetter item,
            ITalkingActivatorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TalkingActivator.Mask<bool>(false);
            ((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITalkingActivatorGetter item,
            ITalkingActivatorGetter rhs,
            TalkingActivator.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.PNAM = item.PNAM == rhs.PNAM;
            ret.LoopingSound = item.LoopingSound.Equals(rhs.LoopingSound);
            ret.FNAM = item.FNAM == rhs.FNAM;
            ret.VoiceType = item.VoiceType.Equals(rhs.VoiceType);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ITalkingActivatorGetter item,
            string? name = null,
            TalkingActivator.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITalkingActivatorGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TalkingActivator.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TalkingActivator =>");
            }
            else
            {
                sb.AppendLine($"{name} (TalkingActivator) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITalkingActivatorGetter item,
            StructuredStringBuilder sb,
            TalkingActivator.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.Print(sb, "Destructible");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.PNAM ?? true)
                && item.PNAM is {} PNAMItem)
            {
                sb.AppendItem(PNAMItem, "PNAM");
            }
            if (printMask?.LoopingSound ?? true)
            {
                sb.AppendItem(item.LoopingSound.FormKeyNullable, "LoopingSound");
            }
            if ((printMask?.FNAM ?? true)
                && item.FNAM is {} FNAMItem)
            {
                sb.AppendItem(FNAMItem, "FNAM");
            }
            if (printMask?.VoiceType ?? true)
            {
                sb.AppendItem(item.VoiceType.FormKeyNullable, "VoiceType");
            }
        }
        
        public static TalkingActivator_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (TalkingActivator_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (TalkingActivator_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new TalkingActivator_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TalkingActivator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (TalkingActivator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (TalkingActivator_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (TalkingActivator_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITalkingActivatorGetter? lhs,
            ITalkingActivatorGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, equalsMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.PNAM) ?? true))
            {
                if (lhs.PNAM != rhs.PNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.LoopingSound) ?? true))
            {
                if (!lhs.LoopingSound.Equals(rhs.LoopingSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.FNAM) ?? true))
            {
                if (lhs.FNAM != rhs.FNAM) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.VoiceType) ?? true))
            {
                if (!lhs.VoiceType.Equals(rhs.VoiceType)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITalkingActivatorGetter?)lhs,
                rhs: rhs as ITalkingActivatorGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITalkingActivatorGetter?)lhs,
                rhs: rhs as ITalkingActivatorGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ITalkingActivatorGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.Keywords);
            if (item.PNAM is {} PNAMitem)
            {
                hash.Add(PNAMitem);
            }
            hash.Add(item.LoopingSound);
            if (item.FNAM is {} FNAMitem)
            {
                hash.Add(FNAMitem);
            }
            hash.Add(item.VoiceType);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ITalkingActivatorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITalkingActivatorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return TalkingActivator.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITalkingActivatorGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.LoopingSound, out var LoopingSoundInfo))
            {
                yield return LoopingSoundInfo;
            }
            if (FormLinkInformation.TryFactory(obj.VoiceType, out var VoiceTypeInfo))
            {
                yield return VoiceTypeInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ITalkingActivatorGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public TalkingActivator Duplicate(
            ITalkingActivatorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new TalkingActivator(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITalkingActivatorGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITalkingActivatorGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class TalkingActivatorSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly TalkingActivatorSetterTranslationCommon Instance = new TalkingActivatorSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITalkingActivatorInternal item,
            ITalkingActivatorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ITalkingActivator item,
            ITalkingActivatorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)TalkingActivator_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)TalkingActivator_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)TalkingActivator_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)TalkingActivator_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)TalkingActivator_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)TalkingActivator_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.PNAM) ?? true))
            {
                item.PNAM = rhs.PNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.LoopingSound) ?? true))
            {
                item.LoopingSound.SetTo(rhs.LoopingSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.FNAM) ?? true))
            {
                item.FNAM = rhs.FNAM;
            }
            if ((copyMask?.GetShouldTranslate((int)TalkingActivator_FieldIndex.VoiceType) ?? true))
            {
                item.VoiceType.SetTo(rhs.VoiceType.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITalkingActivator item,
            ITalkingActivatorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITalkingActivatorInternal)item,
                rhs: (ITalkingActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITalkingActivator)item,
                rhs: (ITalkingActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITalkingActivatorInternal)item,
                rhs: (ITalkingActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITalkingActivator)item,
                rhs: (ITalkingActivatorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public TalkingActivator DeepCopy(
            ITalkingActivatorGetter item,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            TalkingActivator ret = (TalkingActivator)((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).GetNew();
            ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TalkingActivator DeepCopy(
            ITalkingActivatorGetter item,
            out TalkingActivator.ErrorMask errorMask,
            TalkingActivator.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TalkingActivator ret = (TalkingActivator)((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).GetNew();
            ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TalkingActivator.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TalkingActivator DeepCopy(
            ITalkingActivatorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TalkingActivator ret = (TalkingActivator)((TalkingActivatorCommon)((ITalkingActivatorGetter)item).CommonInstance()!).GetNew();
            ((TalkingActivatorSetterTranslationCommon)((ITalkingActivatorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class TalkingActivator
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TalkingActivator_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => TalkingActivator_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TalkingActivatorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TalkingActivatorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TalkingActivatorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class TalkingActivatorBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly TalkingActivatorBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITalkingActivatorGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.PNAM,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LoopingSound,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FNAM,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VoiceType,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
        }

        public void Write(
            MutagenWriter writer,
            ITalkingActivatorGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.TACT,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITalkingActivatorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITalkingActivatorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITalkingActivatorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TalkingActivatorBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly TalkingActivatorBinaryCreateTranslation Instance = new TalkingActivatorBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.TACT;
        public static ParseResult FillBinaryRecordTypes(
            ITalkingActivatorInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)TalkingActivator_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)TalkingActivator_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)TalkingActivator_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)TalkingActivator_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)TalkingActivator_FieldIndex.Destructible;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)TalkingActivator_FieldIndex.Keywords;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PNAM = frame.ReadInt32();
                    return (int)TalkingActivator_FieldIndex.PNAM;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LoopingSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)TalkingActivator_FieldIndex.LoopingSound;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FNAM = frame.ReadInt16();
                    return (int)TalkingActivator_FieldIndex.FNAM;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VoiceType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)TalkingActivator_FieldIndex.VoiceType;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TalkingActivatorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class TalkingActivatorBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ITalkingActivatorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TalkingActivator_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => TalkingActivator_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TalkingActivatorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TalkingActivatorSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TalkingActivatorCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => TalkingActivatorCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TalkingActivatorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TalkingActivatorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ITalkingActivator);

        public TalkingActivator.MajorFlag MajorFlags => (TalkingActivator.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region PNAM
        private int? _PNAMLocation;
        public Int32? PNAM => _PNAMLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PNAMLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region LoopingSound
        private int? _LoopingSoundLocation;
        public IFormLinkNullableGetter<ISoundMarkerGetter> LoopingSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundMarkerGetter>(_package, _recordData, _LoopingSoundLocation);
        #endregion
        #region FNAM
        private int? _FNAMLocation;
        public Int16? FNAM => _FNAMLocation.HasValue ? BinaryPrimitives.ReadInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FNAMLocation.Value, _package.MetaData.Constants)) : default(Int16?);
        #endregion
        #region VoiceType
        private int? _VoiceTypeLocation;
        public IFormLinkNullableGetter<IVoiceTypeGetter> VoiceType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IVoiceTypeGetter>(_package, _recordData, _VoiceTypeLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TalkingActivatorBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITalkingActivatorGetter TalkingActivatorFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TalkingActivatorBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITalkingActivatorGetter TalkingActivatorFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TalkingActivatorFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)TalkingActivator_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)TalkingActivator_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)TalkingActivator_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)TalkingActivator_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)TalkingActivator_FieldIndex.Destructible;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)TalkingActivator_FieldIndex.Keywords;
                }
                case RecordTypeInts.PNAM:
                {
                    _PNAMLocation = (stream.Position - offset);
                    return (int)TalkingActivator_FieldIndex.PNAM;
                }
                case RecordTypeInts.SNAM:
                {
                    _LoopingSoundLocation = (stream.Position - offset);
                    return (int)TalkingActivator_FieldIndex.LoopingSound;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = (stream.Position - offset);
                    return (int)TalkingActivator_FieldIndex.FNAM;
                }
                case RecordTypeInts.VNAM:
                {
                    _VoiceTypeLocation = (stream.Position - offset);
                    return (int)TalkingActivator_FieldIndex.VoiceType;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TalkingActivatorMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<TalkingActivator>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITalkingActivatorGetter rhs) return false;
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITalkingActivatorGetter? obj)
        {
            return ((TalkingActivatorCommon)((ITalkingActivatorGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TalkingActivatorCommon)((ITalkingActivatorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

