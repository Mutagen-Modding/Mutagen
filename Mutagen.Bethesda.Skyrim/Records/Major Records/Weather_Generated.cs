/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Assets;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Weather :
        SkyrimMajorRecord,
        IEquatable<IWeatherGetter>,
        ILoquiObjectSetter<Weather>,
        IWeatherInternal
    {
        #region Ctor
        protected Weather()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region CloudTextures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IAssetLink<SkyrimTextureAssetType>?[] _CloudTextures = new IAssetLink<SkyrimTextureAssetType>?[29];
        public IAssetLink<SkyrimTextureAssetType>?[] CloudTextures
        {
            get => this._CloudTextures;
            init => this._CloudTextures = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAssetLinkGetter<SkyrimTextureAssetType>?> IWeatherGetter.CloudTextures => _CloudTextures;
        #endregion

        #endregion
        #region DNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DNAM;
        public MemorySlice<Byte>? DNAM
        {
            get => this._DNAM;
            set => this._DNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.DNAM => this.DNAM;
        #endregion
        #region CNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _CNAM;
        public MemorySlice<Byte>? CNAM
        {
            get => this._CNAM;
            set => this._CNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.CNAM => this.CNAM;
        #endregion
        #region ANAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ANAM;
        public MemorySlice<Byte>? ANAM
        {
            get => this._ANAM;
            set => this._ANAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.ANAM => this.ANAM;
        #endregion
        #region BNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _BNAM;
        public MemorySlice<Byte>? BNAM
        {
            get => this._BNAM;
            set => this._BNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.BNAM => this.BNAM;
        #endregion
        #region LNAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _LNAM;
        public MemorySlice<Byte>? LNAM
        {
            get => this._LNAM;
            set => this._LNAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.LNAM => this.LNAM;
        #endregion
        #region Precipitation
        private readonly IFormLinkNullable<IShaderParticleGeometryGetter> _Precipitation = new FormLinkNullable<IShaderParticleGeometryGetter>();
        public IFormLinkNullable<IShaderParticleGeometryGetter> Precipitation
        {
            get => _Precipitation;
            set => _Precipitation.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IShaderParticleGeometryGetter> IWeatherGetter.Precipitation => this.Precipitation;
        #endregion
        #region VisualEffect
        private readonly IFormLink<IVisualEffectGetter> _VisualEffect = new FormLink<IVisualEffectGetter>();
        public IFormLink<IVisualEffectGetter> VisualEffect
        {
            get => _VisualEffect;
            set => _VisualEffect.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IVisualEffectGetter> IWeatherGetter.VisualEffect => this.VisualEffect;
        #endregion
        #region ONAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ONAM;
        public MemorySlice<Byte>? ONAM
        {
            get => this._ONAM;
            set => this._ONAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.ONAM => this.ONAM;
        #endregion
        #region Clouds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CloudLayer[] _Clouds = ArrayExt.Create(32, (i) => new CloudLayer());
        public CloudLayer[] Clouds
        {
            get => this._Clouds;
            init => this._Clouds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ICloudLayerGetter> IWeatherGetter.Clouds => _Clouds;
        #endregion

        #endregion
        #region SkyUpperColor
        public WeatherColor SkyUpperColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SkyUpperColor => SkyUpperColor;
        #endregion
        #region FogNearColor
        public WeatherColor FogNearColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.FogNearColor => FogNearColor;
        #endregion
        #region UnknownColor
        public WeatherColor UnknownColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.UnknownColor => UnknownColor;
        #endregion
        #region AmbientColor
        public WeatherColor AmbientColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.AmbientColor => AmbientColor;
        #endregion
        #region SunlightColor
        public WeatherColor SunlightColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SunlightColor => SunlightColor;
        #endregion
        #region SunColor
        public WeatherColor SunColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SunColor => SunColor;
        #endregion
        #region StarsColor
        public WeatherColor StarsColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.StarsColor => StarsColor;
        #endregion
        #region SkyLowerColor
        public WeatherColor SkyLowerColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SkyLowerColor => SkyLowerColor;
        #endregion
        #region HorizonColor
        public WeatherColor HorizonColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.HorizonColor => HorizonColor;
        #endregion
        #region EffectLightingColor
        public WeatherColor EffectLightingColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.EffectLightingColor => EffectLightingColor;
        #endregion
        #region CloudLodDiffuseColor
        public WeatherColor CloudLodDiffuseColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.CloudLodDiffuseColor => CloudLodDiffuseColor;
        #endregion
        #region CloudLodAmbientColor
        public WeatherColor CloudLodAmbientColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.CloudLodAmbientColor => CloudLodAmbientColor;
        #endregion
        #region FogFarColor
        public WeatherColor FogFarColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.FogFarColor => FogFarColor;
        #endregion
        #region SkyStaticsColor
        public WeatherColor SkyStaticsColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SkyStaticsColor => SkyStaticsColor;
        #endregion
        #region WaterMultiplierColor
        public WeatherColor WaterMultiplierColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.WaterMultiplierColor => WaterMultiplierColor;
        #endregion
        #region SunGlareColor
        public WeatherColor SunGlareColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.SunGlareColor => SunGlareColor;
        #endregion
        #region MoonGlareColor
        public WeatherColor MoonGlareColor { get; set; } = new WeatherColor();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherColorGetter IWeatherGetter.MoonGlareColor => MoonGlareColor;
        #endregion
        #region FogDistanceDayNear
        public Single FogDistanceDayNear { get; set; } = default(Single);
        #endregion
        #region FogDistanceDayFar
        public Single FogDistanceDayFar { get; set; } = default(Single);
        #endregion
        #region FogDistanceNightNear
        public Single FogDistanceNightNear { get; set; } = default(Single);
        #endregion
        #region FogDistanceNightFar
        public Single FogDistanceNightFar { get; set; } = default(Single);
        #endregion
        #region FogDistanceDayPower
        public Single FogDistanceDayPower { get; set; } = default(Single);
        #endregion
        #region FogDistanceNightPower
        public Single FogDistanceNightPower { get; set; } = default(Single);
        #endregion
        #region FogDistanceDayMax
        public Single FogDistanceDayMax { get; set; } = default(Single);
        #endregion
        #region FogDistanceNightMax
        public Single FogDistanceNightMax { get; set; } = default(Single);
        #endregion
        #region WindSpeed
        public Percent WindSpeed { get; set; } = default(Percent);
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; } = default(UInt16);
        #endregion
        #region TransDelta
        public Single TransDelta { get; set; } = default(Single);
        public static RangeFloat TransDelta_Range = new RangeFloat(0, 1020f);
        #endregion
        #region SunGlare
        public Percent SunGlare { get; set; } = default(Percent);
        #endregion
        #region SunDamage
        public Percent SunDamage { get; set; } = default(Percent);
        #endregion
        #region PrecipitationBeginFadeIn
        public Percent PrecipitationBeginFadeIn { get; set; } = default(Percent);
        #endregion
        #region PrecipitationEndFadeOut
        public Percent PrecipitationEndFadeOut { get; set; } = default(Percent);
        #endregion
        #region ThunderLightningBeginFadeIn
        public Percent ThunderLightningBeginFadeIn { get; set; } = default(Percent);
        #endregion
        #region ThunderLightningEndFadeOut
        public Percent ThunderLightningEndFadeOut { get; set; } = default(Percent);
        #endregion
        #region ThunderLightningFrequency
        public Percent ThunderLightningFrequency { get; set; } = default(Percent);
        #endregion
        #region Flags
        public Weather.Flag Flags { get; set; } = default(Weather.Flag);
        #endregion
        #region LightningColor
        public Color LightningColor { get; set; } = default(Color);
        #endregion
        #region VisualEffectBegin
        public Percent VisualEffectBegin { get; set; } = default(Percent);
        #endregion
        #region VisualEffectEnd
        public Percent VisualEffectEnd { get; set; } = default(Percent);
        #endregion
        #region WindDirection
        public Single WindDirection { get; set; } = default(Single);
        public static RangeFloat WindDirection_Range = new RangeFloat(0, 255f);
        #endregion
        #region WindDirectionRange
        public Single WindDirectionRange { get; set; } = default(Single);
        public static RangeFloat WindDirectionRange_Range = new RangeFloat(0, 255f);
        #endregion
        #region Sounds
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WeatherSound> _Sounds = new ExtendedList<WeatherSound>();
        public ExtendedList<WeatherSound> Sounds
        {
            get => this._Sounds;
            init => this._Sounds = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWeatherSoundGetter> IWeatherGetter.Sounds => _Sounds;
        #endregion

        #endregion
        #region SkyStatics
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IStaticGetter>> _SkyStatics = new ExtendedList<IFormLinkGetter<IStaticGetter>>();
        public ExtendedList<IFormLinkGetter<IStaticGetter>> SkyStatics
        {
            get => this._SkyStatics;
            init => this._SkyStatics = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IStaticGetter>> IWeatherGetter.SkyStatics => _SkyStatics;
        #endregion

        #endregion
        #region ImageSpaces
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeatherImageSpaces? _ImageSpaces;
        public WeatherImageSpaces? ImageSpaces
        {
            get => _ImageSpaces;
            set => _ImageSpaces = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherImageSpacesGetter? IWeatherGetter.ImageSpaces => this.ImageSpaces;
        #endregion
        #region VolumetricLighting
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeatherVolumetricLighting? _VolumetricLighting;
        public WeatherVolumetricLighting? VolumetricLighting
        {
            get => _VolumetricLighting;
            set => _VolumetricLighting = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherVolumetricLightingGetter? IWeatherGetter.VolumetricLighting => this.VolumetricLighting;
        #endregion
        #region DirectionalAmbientLightingColors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WeatherAmbientColorSet? _DirectionalAmbientLightingColors;
        public WeatherAmbientColorSet? DirectionalAmbientLightingColors
        {
            get => _DirectionalAmbientLightingColors;
            set => _DirectionalAmbientLightingColors = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWeatherAmbientColorSetGetter? IWeatherGetter.DirectionalAmbientLightingColors => this.DirectionalAmbientLightingColors;
        #endregion
        #region NAM2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NAM2;
        public MemorySlice<Byte>? NAM2
        {
            get => this._NAM2;
            set => this._NAM2 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.NAM2 => this.NAM2;
        #endregion
        #region NAM3
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _NAM3;
        public MemorySlice<Byte>? NAM3
        {
            get => this._NAM3;
            set => this._NAM3 = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IWeatherGetter.NAM3 => this.NAM3;
        #endregion
        #region Aurora
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Aurora;
        public Model? Aurora
        {
            get => _Aurora;
            set => _Aurora = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IWeatherGetter.Aurora => this.Aurora;
        #endregion
        #region SunGlareLensFlare
        private readonly IFormLinkNullable<ILensFlareGetter> _SunGlareLensFlare = new FormLinkNullable<ILensFlareGetter>();
        public IFormLinkNullable<ILensFlareGetter> SunGlareLensFlare
        {
            get => _SunGlareLensFlare;
            set => _SunGlareLensFlare.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILensFlareGetter> IWeatherGetter.SunGlareLensFlare => this.SunGlareLensFlare;
        #endregion
        #region NAM0DataTypeState
        public Weather.NAM0DataType NAM0DataTypeState { get; set; } = default(Weather.NAM0DataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeatherMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.CloudTextures = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.DNAM = initialValue;
                this.CNAM = initialValue;
                this.ANAM = initialValue;
                this.BNAM = initialValue;
                this.LNAM = initialValue;
                this.Precipitation = initialValue;
                this.VisualEffect = initialValue;
                this.ONAM = initialValue;
                this.Clouds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CloudLayer.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, CloudLayer.Mask<TItem>?>>());
                this.SkyUpperColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.FogNearColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.UnknownColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.AmbientColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.SunlightColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.SunColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.StarsColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.SkyLowerColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.HorizonColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.EffectLightingColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.CloudLodDiffuseColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.CloudLodAmbientColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.FogFarColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.SkyStaticsColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.WaterMultiplierColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.SunGlareColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.MoonGlareColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(initialValue, new WeatherColor.Mask<TItem>(initialValue));
                this.FogDistanceDayNear = initialValue;
                this.FogDistanceDayFar = initialValue;
                this.FogDistanceNightNear = initialValue;
                this.FogDistanceNightFar = initialValue;
                this.FogDistanceDayPower = initialValue;
                this.FogDistanceNightPower = initialValue;
                this.FogDistanceDayMax = initialValue;
                this.FogDistanceNightMax = initialValue;
                this.WindSpeed = initialValue;
                this.Unknown = initialValue;
                this.TransDelta = initialValue;
                this.SunGlare = initialValue;
                this.SunDamage = initialValue;
                this.PrecipitationBeginFadeIn = initialValue;
                this.PrecipitationEndFadeOut = initialValue;
                this.ThunderLightningBeginFadeIn = initialValue;
                this.ThunderLightningEndFadeOut = initialValue;
                this.ThunderLightningFrequency = initialValue;
                this.Flags = initialValue;
                this.LightningColor = initialValue;
                this.VisualEffectBegin = initialValue;
                this.VisualEffectEnd = initialValue;
                this.WindDirection = initialValue;
                this.WindDirectionRange = initialValue;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>());
                this.SkyStatics = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ImageSpaces = new MaskItem<TItem, WeatherImageSpaces.Mask<TItem>?>(initialValue, new WeatherImageSpaces.Mask<TItem>(initialValue));
                this.VolumetricLighting = new MaskItem<TItem, WeatherVolumetricLighting.Mask<TItem>?>(initialValue, new WeatherVolumetricLighting.Mask<TItem>(initialValue));
                this.DirectionalAmbientLightingColors = new MaskItem<TItem, WeatherAmbientColorSet.Mask<TItem>?>(initialValue, new WeatherAmbientColorSet.Mask<TItem>(initialValue));
                this.NAM2 = initialValue;
                this.NAM3 = initialValue;
                this.Aurora = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.SunGlareLensFlare = initialValue;
                this.NAM0DataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem CloudTextures,
                TItem DNAM,
                TItem CNAM,
                TItem ANAM,
                TItem BNAM,
                TItem LNAM,
                TItem Precipitation,
                TItem VisualEffect,
                TItem ONAM,
                TItem Clouds,
                TItem SkyUpperColor,
                TItem FogNearColor,
                TItem UnknownColor,
                TItem AmbientColor,
                TItem SunlightColor,
                TItem SunColor,
                TItem StarsColor,
                TItem SkyLowerColor,
                TItem HorizonColor,
                TItem EffectLightingColor,
                TItem CloudLodDiffuseColor,
                TItem CloudLodAmbientColor,
                TItem FogFarColor,
                TItem SkyStaticsColor,
                TItem WaterMultiplierColor,
                TItem SunGlareColor,
                TItem MoonGlareColor,
                TItem FogDistanceDayNear,
                TItem FogDistanceDayFar,
                TItem FogDistanceNightNear,
                TItem FogDistanceNightFar,
                TItem FogDistanceDayPower,
                TItem FogDistanceNightPower,
                TItem FogDistanceDayMax,
                TItem FogDistanceNightMax,
                TItem WindSpeed,
                TItem Unknown,
                TItem TransDelta,
                TItem SunGlare,
                TItem SunDamage,
                TItem PrecipitationBeginFadeIn,
                TItem PrecipitationEndFadeOut,
                TItem ThunderLightningBeginFadeIn,
                TItem ThunderLightningEndFadeOut,
                TItem ThunderLightningFrequency,
                TItem Flags,
                TItem LightningColor,
                TItem VisualEffectBegin,
                TItem VisualEffectEnd,
                TItem WindDirection,
                TItem WindDirectionRange,
                TItem Sounds,
                TItem SkyStatics,
                TItem ImageSpaces,
                TItem VolumetricLighting,
                TItem DirectionalAmbientLightingColors,
                TItem NAM2,
                TItem NAM3,
                TItem Aurora,
                TItem SunGlareLensFlare,
                TItem NAM0DataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.CloudTextures = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(CloudTextures, Enumerable.Empty<(int Index, TItem Value)>());
                this.DNAM = DNAM;
                this.CNAM = CNAM;
                this.ANAM = ANAM;
                this.BNAM = BNAM;
                this.LNAM = LNAM;
                this.Precipitation = Precipitation;
                this.VisualEffect = VisualEffect;
                this.ONAM = ONAM;
                this.Clouds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CloudLayer.Mask<TItem>?>>?>(Clouds, Enumerable.Empty<MaskItemIndexed<TItem, CloudLayer.Mask<TItem>?>>());
                this.SkyUpperColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SkyUpperColor, new WeatherColor.Mask<TItem>(SkyUpperColor));
                this.FogNearColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(FogNearColor, new WeatherColor.Mask<TItem>(FogNearColor));
                this.UnknownColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(UnknownColor, new WeatherColor.Mask<TItem>(UnknownColor));
                this.AmbientColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(AmbientColor, new WeatherColor.Mask<TItem>(AmbientColor));
                this.SunlightColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SunlightColor, new WeatherColor.Mask<TItem>(SunlightColor));
                this.SunColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SunColor, new WeatherColor.Mask<TItem>(SunColor));
                this.StarsColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(StarsColor, new WeatherColor.Mask<TItem>(StarsColor));
                this.SkyLowerColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SkyLowerColor, new WeatherColor.Mask<TItem>(SkyLowerColor));
                this.HorizonColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(HorizonColor, new WeatherColor.Mask<TItem>(HorizonColor));
                this.EffectLightingColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(EffectLightingColor, new WeatherColor.Mask<TItem>(EffectLightingColor));
                this.CloudLodDiffuseColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(CloudLodDiffuseColor, new WeatherColor.Mask<TItem>(CloudLodDiffuseColor));
                this.CloudLodAmbientColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(CloudLodAmbientColor, new WeatherColor.Mask<TItem>(CloudLodAmbientColor));
                this.FogFarColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(FogFarColor, new WeatherColor.Mask<TItem>(FogFarColor));
                this.SkyStaticsColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SkyStaticsColor, new WeatherColor.Mask<TItem>(SkyStaticsColor));
                this.WaterMultiplierColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(WaterMultiplierColor, new WeatherColor.Mask<TItem>(WaterMultiplierColor));
                this.SunGlareColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(SunGlareColor, new WeatherColor.Mask<TItem>(SunGlareColor));
                this.MoonGlareColor = new MaskItem<TItem, WeatherColor.Mask<TItem>?>(MoonGlareColor, new WeatherColor.Mask<TItem>(MoonGlareColor));
                this.FogDistanceDayNear = FogDistanceDayNear;
                this.FogDistanceDayFar = FogDistanceDayFar;
                this.FogDistanceNightNear = FogDistanceNightNear;
                this.FogDistanceNightFar = FogDistanceNightFar;
                this.FogDistanceDayPower = FogDistanceDayPower;
                this.FogDistanceNightPower = FogDistanceNightPower;
                this.FogDistanceDayMax = FogDistanceDayMax;
                this.FogDistanceNightMax = FogDistanceNightMax;
                this.WindSpeed = WindSpeed;
                this.Unknown = Unknown;
                this.TransDelta = TransDelta;
                this.SunGlare = SunGlare;
                this.SunDamage = SunDamage;
                this.PrecipitationBeginFadeIn = PrecipitationBeginFadeIn;
                this.PrecipitationEndFadeOut = PrecipitationEndFadeOut;
                this.ThunderLightningBeginFadeIn = ThunderLightningBeginFadeIn;
                this.ThunderLightningEndFadeOut = ThunderLightningEndFadeOut;
                this.ThunderLightningFrequency = ThunderLightningFrequency;
                this.Flags = Flags;
                this.LightningColor = LightningColor;
                this.VisualEffectBegin = VisualEffectBegin;
                this.VisualEffectEnd = VisualEffectEnd;
                this.WindDirection = WindDirection;
                this.WindDirectionRange = WindDirectionRange;
                this.Sounds = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>?>(Sounds, Enumerable.Empty<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>());
                this.SkyStatics = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SkyStatics, Enumerable.Empty<(int Index, TItem Value)>());
                this.ImageSpaces = new MaskItem<TItem, WeatherImageSpaces.Mask<TItem>?>(ImageSpaces, new WeatherImageSpaces.Mask<TItem>(ImageSpaces));
                this.VolumetricLighting = new MaskItem<TItem, WeatherVolumetricLighting.Mask<TItem>?>(VolumetricLighting, new WeatherVolumetricLighting.Mask<TItem>(VolumetricLighting));
                this.DirectionalAmbientLightingColors = new MaskItem<TItem, WeatherAmbientColorSet.Mask<TItem>?>(DirectionalAmbientLightingColors, new WeatherAmbientColorSet.Mask<TItem>(DirectionalAmbientLightingColors));
                this.NAM2 = NAM2;
                this.NAM3 = NAM3;
                this.Aurora = new MaskItem<TItem, Model.Mask<TItem>?>(Aurora, new Model.Mask<TItem>(Aurora));
                this.SunGlareLensFlare = SunGlareLensFlare;
                this.NAM0DataTypeState = NAM0DataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? CloudTextures;
            public TItem DNAM;
            public TItem CNAM;
            public TItem ANAM;
            public TItem BNAM;
            public TItem LNAM;
            public TItem Precipitation;
            public TItem VisualEffect;
            public TItem ONAM;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, CloudLayer.Mask<TItem>?>>?>? Clouds;
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SkyUpperColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? FogNearColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? UnknownColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? AmbientColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SunlightColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SunColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? StarsColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SkyLowerColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? HorizonColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? EffectLightingColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? CloudLodDiffuseColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? CloudLodAmbientColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? FogFarColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SkyStaticsColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? WaterMultiplierColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? SunGlareColor { get; set; }
            public MaskItem<TItem, WeatherColor.Mask<TItem>?>? MoonGlareColor { get; set; }
            public TItem FogDistanceDayNear;
            public TItem FogDistanceDayFar;
            public TItem FogDistanceNightNear;
            public TItem FogDistanceNightFar;
            public TItem FogDistanceDayPower;
            public TItem FogDistanceNightPower;
            public TItem FogDistanceDayMax;
            public TItem FogDistanceNightMax;
            public TItem WindSpeed;
            public TItem Unknown;
            public TItem TransDelta;
            public TItem SunGlare;
            public TItem SunDamage;
            public TItem PrecipitationBeginFadeIn;
            public TItem PrecipitationEndFadeOut;
            public TItem ThunderLightningBeginFadeIn;
            public TItem ThunderLightningEndFadeOut;
            public TItem ThunderLightningFrequency;
            public TItem Flags;
            public TItem LightningColor;
            public TItem VisualEffectBegin;
            public TItem VisualEffectEnd;
            public TItem WindDirection;
            public TItem WindDirectionRange;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WeatherSound.Mask<TItem>?>>?>? Sounds;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SkyStatics;
            public MaskItem<TItem, WeatherImageSpaces.Mask<TItem>?>? ImageSpaces { get; set; }
            public MaskItem<TItem, WeatherVolumetricLighting.Mask<TItem>?>? VolumetricLighting { get; set; }
            public MaskItem<TItem, WeatherAmbientColorSet.Mask<TItem>?>? DirectionalAmbientLightingColors { get; set; }
            public TItem NAM2;
            public TItem NAM3;
            public MaskItem<TItem, Model.Mask<TItem>?>? Aurora { get; set; }
            public TItem SunGlareLensFlare;
            public TItem NAM0DataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.CloudTextures, rhs.CloudTextures)) return false;
                if (!object.Equals(this.DNAM, rhs.DNAM)) return false;
                if (!object.Equals(this.CNAM, rhs.CNAM)) return false;
                if (!object.Equals(this.ANAM, rhs.ANAM)) return false;
                if (!object.Equals(this.BNAM, rhs.BNAM)) return false;
                if (!object.Equals(this.LNAM, rhs.LNAM)) return false;
                if (!object.Equals(this.Precipitation, rhs.Precipitation)) return false;
                if (!object.Equals(this.VisualEffect, rhs.VisualEffect)) return false;
                if (!object.Equals(this.ONAM, rhs.ONAM)) return false;
                if (!object.Equals(this.Clouds, rhs.Clouds)) return false;
                if (!object.Equals(this.SkyUpperColor, rhs.SkyUpperColor)) return false;
                if (!object.Equals(this.FogNearColor, rhs.FogNearColor)) return false;
                if (!object.Equals(this.UnknownColor, rhs.UnknownColor)) return false;
                if (!object.Equals(this.AmbientColor, rhs.AmbientColor)) return false;
                if (!object.Equals(this.SunlightColor, rhs.SunlightColor)) return false;
                if (!object.Equals(this.SunColor, rhs.SunColor)) return false;
                if (!object.Equals(this.StarsColor, rhs.StarsColor)) return false;
                if (!object.Equals(this.SkyLowerColor, rhs.SkyLowerColor)) return false;
                if (!object.Equals(this.HorizonColor, rhs.HorizonColor)) return false;
                if (!object.Equals(this.EffectLightingColor, rhs.EffectLightingColor)) return false;
                if (!object.Equals(this.CloudLodDiffuseColor, rhs.CloudLodDiffuseColor)) return false;
                if (!object.Equals(this.CloudLodAmbientColor, rhs.CloudLodAmbientColor)) return false;
                if (!object.Equals(this.FogFarColor, rhs.FogFarColor)) return false;
                if (!object.Equals(this.SkyStaticsColor, rhs.SkyStaticsColor)) return false;
                if (!object.Equals(this.WaterMultiplierColor, rhs.WaterMultiplierColor)) return false;
                if (!object.Equals(this.SunGlareColor, rhs.SunGlareColor)) return false;
                if (!object.Equals(this.MoonGlareColor, rhs.MoonGlareColor)) return false;
                if (!object.Equals(this.FogDistanceDayNear, rhs.FogDistanceDayNear)) return false;
                if (!object.Equals(this.FogDistanceDayFar, rhs.FogDistanceDayFar)) return false;
                if (!object.Equals(this.FogDistanceNightNear, rhs.FogDistanceNightNear)) return false;
                if (!object.Equals(this.FogDistanceNightFar, rhs.FogDistanceNightFar)) return false;
                if (!object.Equals(this.FogDistanceDayPower, rhs.FogDistanceDayPower)) return false;
                if (!object.Equals(this.FogDistanceNightPower, rhs.FogDistanceNightPower)) return false;
                if (!object.Equals(this.FogDistanceDayMax, rhs.FogDistanceDayMax)) return false;
                if (!object.Equals(this.FogDistanceNightMax, rhs.FogDistanceNightMax)) return false;
                if (!object.Equals(this.WindSpeed, rhs.WindSpeed)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.TransDelta, rhs.TransDelta)) return false;
                if (!object.Equals(this.SunGlare, rhs.SunGlare)) return false;
                if (!object.Equals(this.SunDamage, rhs.SunDamage)) return false;
                if (!object.Equals(this.PrecipitationBeginFadeIn, rhs.PrecipitationBeginFadeIn)) return false;
                if (!object.Equals(this.PrecipitationEndFadeOut, rhs.PrecipitationEndFadeOut)) return false;
                if (!object.Equals(this.ThunderLightningBeginFadeIn, rhs.ThunderLightningBeginFadeIn)) return false;
                if (!object.Equals(this.ThunderLightningEndFadeOut, rhs.ThunderLightningEndFadeOut)) return false;
                if (!object.Equals(this.ThunderLightningFrequency, rhs.ThunderLightningFrequency)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.LightningColor, rhs.LightningColor)) return false;
                if (!object.Equals(this.VisualEffectBegin, rhs.VisualEffectBegin)) return false;
                if (!object.Equals(this.VisualEffectEnd, rhs.VisualEffectEnd)) return false;
                if (!object.Equals(this.WindDirection, rhs.WindDirection)) return false;
                if (!object.Equals(this.WindDirectionRange, rhs.WindDirectionRange)) return false;
                if (!object.Equals(this.Sounds, rhs.Sounds)) return false;
                if (!object.Equals(this.SkyStatics, rhs.SkyStatics)) return false;
                if (!object.Equals(this.ImageSpaces, rhs.ImageSpaces)) return false;
                if (!object.Equals(this.VolumetricLighting, rhs.VolumetricLighting)) return false;
                if (!object.Equals(this.DirectionalAmbientLightingColors, rhs.DirectionalAmbientLightingColors)) return false;
                if (!object.Equals(this.NAM2, rhs.NAM2)) return false;
                if (!object.Equals(this.NAM3, rhs.NAM3)) return false;
                if (!object.Equals(this.Aurora, rhs.Aurora)) return false;
                if (!object.Equals(this.SunGlareLensFlare, rhs.SunGlareLensFlare)) return false;
                if (!object.Equals(this.NAM0DataTypeState, rhs.NAM0DataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.CloudTextures);
                hash.Add(this.DNAM);
                hash.Add(this.CNAM);
                hash.Add(this.ANAM);
                hash.Add(this.BNAM);
                hash.Add(this.LNAM);
                hash.Add(this.Precipitation);
                hash.Add(this.VisualEffect);
                hash.Add(this.ONAM);
                hash.Add(this.Clouds);
                hash.Add(this.SkyUpperColor);
                hash.Add(this.FogNearColor);
                hash.Add(this.UnknownColor);
                hash.Add(this.AmbientColor);
                hash.Add(this.SunlightColor);
                hash.Add(this.SunColor);
                hash.Add(this.StarsColor);
                hash.Add(this.SkyLowerColor);
                hash.Add(this.HorizonColor);
                hash.Add(this.EffectLightingColor);
                hash.Add(this.CloudLodDiffuseColor);
                hash.Add(this.CloudLodAmbientColor);
                hash.Add(this.FogFarColor);
                hash.Add(this.SkyStaticsColor);
                hash.Add(this.WaterMultiplierColor);
                hash.Add(this.SunGlareColor);
                hash.Add(this.MoonGlareColor);
                hash.Add(this.FogDistanceDayNear);
                hash.Add(this.FogDistanceDayFar);
                hash.Add(this.FogDistanceNightNear);
                hash.Add(this.FogDistanceNightFar);
                hash.Add(this.FogDistanceDayPower);
                hash.Add(this.FogDistanceNightPower);
                hash.Add(this.FogDistanceDayMax);
                hash.Add(this.FogDistanceNightMax);
                hash.Add(this.WindSpeed);
                hash.Add(this.Unknown);
                hash.Add(this.TransDelta);
                hash.Add(this.SunGlare);
                hash.Add(this.SunDamage);
                hash.Add(this.PrecipitationBeginFadeIn);
                hash.Add(this.PrecipitationEndFadeOut);
                hash.Add(this.ThunderLightningBeginFadeIn);
                hash.Add(this.ThunderLightningEndFadeOut);
                hash.Add(this.ThunderLightningFrequency);
                hash.Add(this.Flags);
                hash.Add(this.LightningColor);
                hash.Add(this.VisualEffectBegin);
                hash.Add(this.VisualEffectEnd);
                hash.Add(this.WindDirection);
                hash.Add(this.WindDirectionRange);
                hash.Add(this.Sounds);
                hash.Add(this.SkyStatics);
                hash.Add(this.ImageSpaces);
                hash.Add(this.VolumetricLighting);
                hash.Add(this.DirectionalAmbientLightingColors);
                hash.Add(this.NAM2);
                hash.Add(this.NAM3);
                hash.Add(this.Aurora);
                hash.Add(this.SunGlareLensFlare);
                hash.Add(this.NAM0DataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.CloudTextures != null)
                {
                    if (!eval(this.CloudTextures.Overall)) return false;
                    if (this.CloudTextures.Specific != null)
                    {
                        foreach (var item in this.CloudTextures.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.DNAM)) return false;
                if (!eval(this.CNAM)) return false;
                if (!eval(this.ANAM)) return false;
                if (!eval(this.BNAM)) return false;
                if (!eval(this.LNAM)) return false;
                if (!eval(this.Precipitation)) return false;
                if (!eval(this.VisualEffect)) return false;
                if (!eval(this.ONAM)) return false;
                if (this.Clouds != null)
                {
                    if (!eval(this.Clouds.Overall)) return false;
                    if (this.Clouds.Specific != null)
                    {
                        foreach (var item in this.Clouds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (SkyUpperColor != null)
                {
                    if (!eval(this.SkyUpperColor.Overall)) return false;
                    if (this.SkyUpperColor.Specific != null && !this.SkyUpperColor.Specific.All(eval)) return false;
                }
                if (FogNearColor != null)
                {
                    if (!eval(this.FogNearColor.Overall)) return false;
                    if (this.FogNearColor.Specific != null && !this.FogNearColor.Specific.All(eval)) return false;
                }
                if (UnknownColor != null)
                {
                    if (!eval(this.UnknownColor.Overall)) return false;
                    if (this.UnknownColor.Specific != null && !this.UnknownColor.Specific.All(eval)) return false;
                }
                if (AmbientColor != null)
                {
                    if (!eval(this.AmbientColor.Overall)) return false;
                    if (this.AmbientColor.Specific != null && !this.AmbientColor.Specific.All(eval)) return false;
                }
                if (SunlightColor != null)
                {
                    if (!eval(this.SunlightColor.Overall)) return false;
                    if (this.SunlightColor.Specific != null && !this.SunlightColor.Specific.All(eval)) return false;
                }
                if (SunColor != null)
                {
                    if (!eval(this.SunColor.Overall)) return false;
                    if (this.SunColor.Specific != null && !this.SunColor.Specific.All(eval)) return false;
                }
                if (StarsColor != null)
                {
                    if (!eval(this.StarsColor.Overall)) return false;
                    if (this.StarsColor.Specific != null && !this.StarsColor.Specific.All(eval)) return false;
                }
                if (SkyLowerColor != null)
                {
                    if (!eval(this.SkyLowerColor.Overall)) return false;
                    if (this.SkyLowerColor.Specific != null && !this.SkyLowerColor.Specific.All(eval)) return false;
                }
                if (HorizonColor != null)
                {
                    if (!eval(this.HorizonColor.Overall)) return false;
                    if (this.HorizonColor.Specific != null && !this.HorizonColor.Specific.All(eval)) return false;
                }
                if (EffectLightingColor != null)
                {
                    if (!eval(this.EffectLightingColor.Overall)) return false;
                    if (this.EffectLightingColor.Specific != null && !this.EffectLightingColor.Specific.All(eval)) return false;
                }
                if (CloudLodDiffuseColor != null)
                {
                    if (!eval(this.CloudLodDiffuseColor.Overall)) return false;
                    if (this.CloudLodDiffuseColor.Specific != null && !this.CloudLodDiffuseColor.Specific.All(eval)) return false;
                }
                if (CloudLodAmbientColor != null)
                {
                    if (!eval(this.CloudLodAmbientColor.Overall)) return false;
                    if (this.CloudLodAmbientColor.Specific != null && !this.CloudLodAmbientColor.Specific.All(eval)) return false;
                }
                if (FogFarColor != null)
                {
                    if (!eval(this.FogFarColor.Overall)) return false;
                    if (this.FogFarColor.Specific != null && !this.FogFarColor.Specific.All(eval)) return false;
                }
                if (SkyStaticsColor != null)
                {
                    if (!eval(this.SkyStaticsColor.Overall)) return false;
                    if (this.SkyStaticsColor.Specific != null && !this.SkyStaticsColor.Specific.All(eval)) return false;
                }
                if (WaterMultiplierColor != null)
                {
                    if (!eval(this.WaterMultiplierColor.Overall)) return false;
                    if (this.WaterMultiplierColor.Specific != null && !this.WaterMultiplierColor.Specific.All(eval)) return false;
                }
                if (SunGlareColor != null)
                {
                    if (!eval(this.SunGlareColor.Overall)) return false;
                    if (this.SunGlareColor.Specific != null && !this.SunGlareColor.Specific.All(eval)) return false;
                }
                if (MoonGlareColor != null)
                {
                    if (!eval(this.MoonGlareColor.Overall)) return false;
                    if (this.MoonGlareColor.Specific != null && !this.MoonGlareColor.Specific.All(eval)) return false;
                }
                if (!eval(this.FogDistanceDayNear)) return false;
                if (!eval(this.FogDistanceDayFar)) return false;
                if (!eval(this.FogDistanceNightNear)) return false;
                if (!eval(this.FogDistanceNightFar)) return false;
                if (!eval(this.FogDistanceDayPower)) return false;
                if (!eval(this.FogDistanceNightPower)) return false;
                if (!eval(this.FogDistanceDayMax)) return false;
                if (!eval(this.FogDistanceNightMax)) return false;
                if (!eval(this.WindSpeed)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.TransDelta)) return false;
                if (!eval(this.SunGlare)) return false;
                if (!eval(this.SunDamage)) return false;
                if (!eval(this.PrecipitationBeginFadeIn)) return false;
                if (!eval(this.PrecipitationEndFadeOut)) return false;
                if (!eval(this.ThunderLightningBeginFadeIn)) return false;
                if (!eval(this.ThunderLightningEndFadeOut)) return false;
                if (!eval(this.ThunderLightningFrequency)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.LightningColor)) return false;
                if (!eval(this.VisualEffectBegin)) return false;
                if (!eval(this.VisualEffectEnd)) return false;
                if (!eval(this.WindDirection)) return false;
                if (!eval(this.WindDirectionRange)) return false;
                if (this.Sounds != null)
                {
                    if (!eval(this.Sounds.Overall)) return false;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.SkyStatics != null)
                {
                    if (!eval(this.SkyStatics.Overall)) return false;
                    if (this.SkyStatics.Specific != null)
                    {
                        foreach (var item in this.SkyStatics.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (ImageSpaces != null)
                {
                    if (!eval(this.ImageSpaces.Overall)) return false;
                    if (this.ImageSpaces.Specific != null && !this.ImageSpaces.Specific.All(eval)) return false;
                }
                if (VolumetricLighting != null)
                {
                    if (!eval(this.VolumetricLighting.Overall)) return false;
                    if (this.VolumetricLighting.Specific != null && !this.VolumetricLighting.Specific.All(eval)) return false;
                }
                if (DirectionalAmbientLightingColors != null)
                {
                    if (!eval(this.DirectionalAmbientLightingColors.Overall)) return false;
                    if (this.DirectionalAmbientLightingColors.Specific != null && !this.DirectionalAmbientLightingColors.Specific.All(eval)) return false;
                }
                if (!eval(this.NAM2)) return false;
                if (!eval(this.NAM3)) return false;
                if (Aurora != null)
                {
                    if (!eval(this.Aurora.Overall)) return false;
                    if (this.Aurora.Specific != null && !this.Aurora.Specific.All(eval)) return false;
                }
                if (!eval(this.SunGlareLensFlare)) return false;
                if (!eval(this.NAM0DataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.CloudTextures != null)
                {
                    if (eval(this.CloudTextures.Overall)) return true;
                    if (this.CloudTextures.Specific != null)
                    {
                        foreach (var item in this.CloudTextures.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.DNAM)) return true;
                if (eval(this.CNAM)) return true;
                if (eval(this.ANAM)) return true;
                if (eval(this.BNAM)) return true;
                if (eval(this.LNAM)) return true;
                if (eval(this.Precipitation)) return true;
                if (eval(this.VisualEffect)) return true;
                if (eval(this.ONAM)) return true;
                if (this.Clouds != null)
                {
                    if (eval(this.Clouds.Overall)) return true;
                    if (this.Clouds.Specific != null)
                    {
                        foreach (var item in this.Clouds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (SkyUpperColor != null)
                {
                    if (eval(this.SkyUpperColor.Overall)) return true;
                    if (this.SkyUpperColor.Specific != null && this.SkyUpperColor.Specific.Any(eval)) return true;
                }
                if (FogNearColor != null)
                {
                    if (eval(this.FogNearColor.Overall)) return true;
                    if (this.FogNearColor.Specific != null && this.FogNearColor.Specific.Any(eval)) return true;
                }
                if (UnknownColor != null)
                {
                    if (eval(this.UnknownColor.Overall)) return true;
                    if (this.UnknownColor.Specific != null && this.UnknownColor.Specific.Any(eval)) return true;
                }
                if (AmbientColor != null)
                {
                    if (eval(this.AmbientColor.Overall)) return true;
                    if (this.AmbientColor.Specific != null && this.AmbientColor.Specific.Any(eval)) return true;
                }
                if (SunlightColor != null)
                {
                    if (eval(this.SunlightColor.Overall)) return true;
                    if (this.SunlightColor.Specific != null && this.SunlightColor.Specific.Any(eval)) return true;
                }
                if (SunColor != null)
                {
                    if (eval(this.SunColor.Overall)) return true;
                    if (this.SunColor.Specific != null && this.SunColor.Specific.Any(eval)) return true;
                }
                if (StarsColor != null)
                {
                    if (eval(this.StarsColor.Overall)) return true;
                    if (this.StarsColor.Specific != null && this.StarsColor.Specific.Any(eval)) return true;
                }
                if (SkyLowerColor != null)
                {
                    if (eval(this.SkyLowerColor.Overall)) return true;
                    if (this.SkyLowerColor.Specific != null && this.SkyLowerColor.Specific.Any(eval)) return true;
                }
                if (HorizonColor != null)
                {
                    if (eval(this.HorizonColor.Overall)) return true;
                    if (this.HorizonColor.Specific != null && this.HorizonColor.Specific.Any(eval)) return true;
                }
                if (EffectLightingColor != null)
                {
                    if (eval(this.EffectLightingColor.Overall)) return true;
                    if (this.EffectLightingColor.Specific != null && this.EffectLightingColor.Specific.Any(eval)) return true;
                }
                if (CloudLodDiffuseColor != null)
                {
                    if (eval(this.CloudLodDiffuseColor.Overall)) return true;
                    if (this.CloudLodDiffuseColor.Specific != null && this.CloudLodDiffuseColor.Specific.Any(eval)) return true;
                }
                if (CloudLodAmbientColor != null)
                {
                    if (eval(this.CloudLodAmbientColor.Overall)) return true;
                    if (this.CloudLodAmbientColor.Specific != null && this.CloudLodAmbientColor.Specific.Any(eval)) return true;
                }
                if (FogFarColor != null)
                {
                    if (eval(this.FogFarColor.Overall)) return true;
                    if (this.FogFarColor.Specific != null && this.FogFarColor.Specific.Any(eval)) return true;
                }
                if (SkyStaticsColor != null)
                {
                    if (eval(this.SkyStaticsColor.Overall)) return true;
                    if (this.SkyStaticsColor.Specific != null && this.SkyStaticsColor.Specific.Any(eval)) return true;
                }
                if (WaterMultiplierColor != null)
                {
                    if (eval(this.WaterMultiplierColor.Overall)) return true;
                    if (this.WaterMultiplierColor.Specific != null && this.WaterMultiplierColor.Specific.Any(eval)) return true;
                }
                if (SunGlareColor != null)
                {
                    if (eval(this.SunGlareColor.Overall)) return true;
                    if (this.SunGlareColor.Specific != null && this.SunGlareColor.Specific.Any(eval)) return true;
                }
                if (MoonGlareColor != null)
                {
                    if (eval(this.MoonGlareColor.Overall)) return true;
                    if (this.MoonGlareColor.Specific != null && this.MoonGlareColor.Specific.Any(eval)) return true;
                }
                if (eval(this.FogDistanceDayNear)) return true;
                if (eval(this.FogDistanceDayFar)) return true;
                if (eval(this.FogDistanceNightNear)) return true;
                if (eval(this.FogDistanceNightFar)) return true;
                if (eval(this.FogDistanceDayPower)) return true;
                if (eval(this.FogDistanceNightPower)) return true;
                if (eval(this.FogDistanceDayMax)) return true;
                if (eval(this.FogDistanceNightMax)) return true;
                if (eval(this.WindSpeed)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.TransDelta)) return true;
                if (eval(this.SunGlare)) return true;
                if (eval(this.SunDamage)) return true;
                if (eval(this.PrecipitationBeginFadeIn)) return true;
                if (eval(this.PrecipitationEndFadeOut)) return true;
                if (eval(this.ThunderLightningBeginFadeIn)) return true;
                if (eval(this.ThunderLightningEndFadeOut)) return true;
                if (eval(this.ThunderLightningFrequency)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.LightningColor)) return true;
                if (eval(this.VisualEffectBegin)) return true;
                if (eval(this.VisualEffectEnd)) return true;
                if (eval(this.WindDirection)) return true;
                if (eval(this.WindDirectionRange)) return true;
                if (this.Sounds != null)
                {
                    if (eval(this.Sounds.Overall)) return true;
                    if (this.Sounds.Specific != null)
                    {
                        foreach (var item in this.Sounds.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.SkyStatics != null)
                {
                    if (eval(this.SkyStatics.Overall)) return true;
                    if (this.SkyStatics.Specific != null)
                    {
                        foreach (var item in this.SkyStatics.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (ImageSpaces != null)
                {
                    if (eval(this.ImageSpaces.Overall)) return true;
                    if (this.ImageSpaces.Specific != null && this.ImageSpaces.Specific.Any(eval)) return true;
                }
                if (VolumetricLighting != null)
                {
                    if (eval(this.VolumetricLighting.Overall)) return true;
                    if (this.VolumetricLighting.Specific != null && this.VolumetricLighting.Specific.Any(eval)) return true;
                }
                if (DirectionalAmbientLightingColors != null)
                {
                    if (eval(this.DirectionalAmbientLightingColors.Overall)) return true;
                    if (this.DirectionalAmbientLightingColors.Specific != null && this.DirectionalAmbientLightingColors.Specific.Any(eval)) return true;
                }
                if (eval(this.NAM2)) return true;
                if (eval(this.NAM3)) return true;
                if (Aurora != null)
                {
                    if (eval(this.Aurora.Overall)) return true;
                    if (this.Aurora.Specific != null && this.Aurora.Specific.Any(eval)) return true;
                }
                if (eval(this.SunGlareLensFlare)) return true;
                if (eval(this.NAM0DataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Weather.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (CloudTextures != null)
                {
                    obj.CloudTextures = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.CloudTextures.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (CloudTextures.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.CloudTextures.Specific = l;
                        foreach (var item in CloudTextures.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.DNAM = eval(this.DNAM);
                obj.CNAM = eval(this.CNAM);
                obj.ANAM = eval(this.ANAM);
                obj.BNAM = eval(this.BNAM);
                obj.LNAM = eval(this.LNAM);
                obj.Precipitation = eval(this.Precipitation);
                obj.VisualEffect = eval(this.VisualEffect);
                obj.ONAM = eval(this.ONAM);
                if (Clouds != null)
                {
                    obj.Clouds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, CloudLayer.Mask<R>?>>?>(eval(this.Clouds.Overall), Enumerable.Empty<MaskItemIndexed<R, CloudLayer.Mask<R>?>>());
                    if (Clouds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, CloudLayer.Mask<R>?>>();
                        obj.Clouds.Specific = l;
                        foreach (var item in Clouds.Specific)
                        {
                            MaskItemIndexed<R, CloudLayer.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, CloudLayer.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SkyUpperColor = this.SkyUpperColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SkyUpperColor.Overall), this.SkyUpperColor.Specific?.Translate(eval));
                obj.FogNearColor = this.FogNearColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.FogNearColor.Overall), this.FogNearColor.Specific?.Translate(eval));
                obj.UnknownColor = this.UnknownColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.UnknownColor.Overall), this.UnknownColor.Specific?.Translate(eval));
                obj.AmbientColor = this.AmbientColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.AmbientColor.Overall), this.AmbientColor.Specific?.Translate(eval));
                obj.SunlightColor = this.SunlightColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SunlightColor.Overall), this.SunlightColor.Specific?.Translate(eval));
                obj.SunColor = this.SunColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SunColor.Overall), this.SunColor.Specific?.Translate(eval));
                obj.StarsColor = this.StarsColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.StarsColor.Overall), this.StarsColor.Specific?.Translate(eval));
                obj.SkyLowerColor = this.SkyLowerColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SkyLowerColor.Overall), this.SkyLowerColor.Specific?.Translate(eval));
                obj.HorizonColor = this.HorizonColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.HorizonColor.Overall), this.HorizonColor.Specific?.Translate(eval));
                obj.EffectLightingColor = this.EffectLightingColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.EffectLightingColor.Overall), this.EffectLightingColor.Specific?.Translate(eval));
                obj.CloudLodDiffuseColor = this.CloudLodDiffuseColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.CloudLodDiffuseColor.Overall), this.CloudLodDiffuseColor.Specific?.Translate(eval));
                obj.CloudLodAmbientColor = this.CloudLodAmbientColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.CloudLodAmbientColor.Overall), this.CloudLodAmbientColor.Specific?.Translate(eval));
                obj.FogFarColor = this.FogFarColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.FogFarColor.Overall), this.FogFarColor.Specific?.Translate(eval));
                obj.SkyStaticsColor = this.SkyStaticsColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SkyStaticsColor.Overall), this.SkyStaticsColor.Specific?.Translate(eval));
                obj.WaterMultiplierColor = this.WaterMultiplierColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.WaterMultiplierColor.Overall), this.WaterMultiplierColor.Specific?.Translate(eval));
                obj.SunGlareColor = this.SunGlareColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.SunGlareColor.Overall), this.SunGlareColor.Specific?.Translate(eval));
                obj.MoonGlareColor = this.MoonGlareColor == null ? null : new MaskItem<R, WeatherColor.Mask<R>?>(eval(this.MoonGlareColor.Overall), this.MoonGlareColor.Specific?.Translate(eval));
                obj.FogDistanceDayNear = eval(this.FogDistanceDayNear);
                obj.FogDistanceDayFar = eval(this.FogDistanceDayFar);
                obj.FogDistanceNightNear = eval(this.FogDistanceNightNear);
                obj.FogDistanceNightFar = eval(this.FogDistanceNightFar);
                obj.FogDistanceDayPower = eval(this.FogDistanceDayPower);
                obj.FogDistanceNightPower = eval(this.FogDistanceNightPower);
                obj.FogDistanceDayMax = eval(this.FogDistanceDayMax);
                obj.FogDistanceNightMax = eval(this.FogDistanceNightMax);
                obj.WindSpeed = eval(this.WindSpeed);
                obj.Unknown = eval(this.Unknown);
                obj.TransDelta = eval(this.TransDelta);
                obj.SunGlare = eval(this.SunGlare);
                obj.SunDamage = eval(this.SunDamage);
                obj.PrecipitationBeginFadeIn = eval(this.PrecipitationBeginFadeIn);
                obj.PrecipitationEndFadeOut = eval(this.PrecipitationEndFadeOut);
                obj.ThunderLightningBeginFadeIn = eval(this.ThunderLightningBeginFadeIn);
                obj.ThunderLightningEndFadeOut = eval(this.ThunderLightningEndFadeOut);
                obj.ThunderLightningFrequency = eval(this.ThunderLightningFrequency);
                obj.Flags = eval(this.Flags);
                obj.LightningColor = eval(this.LightningColor);
                obj.VisualEffectBegin = eval(this.VisualEffectBegin);
                obj.VisualEffectEnd = eval(this.VisualEffectEnd);
                obj.WindDirection = eval(this.WindDirection);
                obj.WindDirectionRange = eval(this.WindDirectionRange);
                if (Sounds != null)
                {
                    obj.Sounds = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WeatherSound.Mask<R>?>>?>(eval(this.Sounds.Overall), Enumerable.Empty<MaskItemIndexed<R, WeatherSound.Mask<R>?>>());
                    if (Sounds.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WeatherSound.Mask<R>?>>();
                        obj.Sounds.Specific = l;
                        foreach (var item in Sounds.Specific)
                        {
                            MaskItemIndexed<R, WeatherSound.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, WeatherSound.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (SkyStatics != null)
                {
                    obj.SkyStatics = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SkyStatics.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SkyStatics.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SkyStatics.Specific = l;
                        foreach (var item in SkyStatics.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ImageSpaces = this.ImageSpaces == null ? null : new MaskItem<R, WeatherImageSpaces.Mask<R>?>(eval(this.ImageSpaces.Overall), this.ImageSpaces.Specific?.Translate(eval));
                obj.VolumetricLighting = this.VolumetricLighting == null ? null : new MaskItem<R, WeatherVolumetricLighting.Mask<R>?>(eval(this.VolumetricLighting.Overall), this.VolumetricLighting.Specific?.Translate(eval));
                obj.DirectionalAmbientLightingColors = this.DirectionalAmbientLightingColors == null ? null : new MaskItem<R, WeatherAmbientColorSet.Mask<R>?>(eval(this.DirectionalAmbientLightingColors.Overall), this.DirectionalAmbientLightingColors.Specific?.Translate(eval));
                obj.NAM2 = eval(this.NAM2);
                obj.NAM3 = eval(this.NAM3);
                obj.Aurora = this.Aurora == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Aurora.Overall), this.Aurora.Specific?.Translate(eval));
                obj.SunGlareLensFlare = eval(this.SunGlareLensFlare);
                obj.NAM0DataTypeState = eval(this.NAM0DataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Weather.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Weather.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Weather.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.CloudTextures?.Overall ?? true)
                        && CloudTextures is {} CloudTexturesItem)
                    {
                        sb.AppendLine("CloudTextures =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(CloudTexturesItem.Overall);
                            if (CloudTexturesItem.Specific != null)
                            {
                                foreach (var subItem in CloudTexturesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DNAM ?? true)
                    {
                        sb.AppendItem(DNAM, "DNAM");
                    }
                    if (printMask?.CNAM ?? true)
                    {
                        sb.AppendItem(CNAM, "CNAM");
                    }
                    if (printMask?.ANAM ?? true)
                    {
                        sb.AppendItem(ANAM, "ANAM");
                    }
                    if (printMask?.BNAM ?? true)
                    {
                        sb.AppendItem(BNAM, "BNAM");
                    }
                    if (printMask?.LNAM ?? true)
                    {
                        sb.AppendItem(LNAM, "LNAM");
                    }
                    if (printMask?.Precipitation ?? true)
                    {
                        sb.AppendItem(Precipitation, "Precipitation");
                    }
                    if (printMask?.VisualEffect ?? true)
                    {
                        sb.AppendItem(VisualEffect, "VisualEffect");
                    }
                    if (printMask?.ONAM ?? true)
                    {
                        sb.AppendItem(ONAM, "ONAM");
                    }
                    if ((printMask?.Clouds?.Overall ?? true)
                        && Clouds is {} CloudsItem)
                    {
                        sb.AppendLine("Clouds =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(CloudsItem.Overall);
                            if (CloudsItem.Specific != null)
                            {
                                foreach (var subItem in CloudsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SkyUpperColor?.Overall ?? true)
                    {
                        SkyUpperColor?.Print(sb);
                    }
                    if (printMask?.FogNearColor?.Overall ?? true)
                    {
                        FogNearColor?.Print(sb);
                    }
                    if (printMask?.UnknownColor?.Overall ?? true)
                    {
                        UnknownColor?.Print(sb);
                    }
                    if (printMask?.AmbientColor?.Overall ?? true)
                    {
                        AmbientColor?.Print(sb);
                    }
                    if (printMask?.SunlightColor?.Overall ?? true)
                    {
                        SunlightColor?.Print(sb);
                    }
                    if (printMask?.SunColor?.Overall ?? true)
                    {
                        SunColor?.Print(sb);
                    }
                    if (printMask?.StarsColor?.Overall ?? true)
                    {
                        StarsColor?.Print(sb);
                    }
                    if (printMask?.SkyLowerColor?.Overall ?? true)
                    {
                        SkyLowerColor?.Print(sb);
                    }
                    if (printMask?.HorizonColor?.Overall ?? true)
                    {
                        HorizonColor?.Print(sb);
                    }
                    if (printMask?.EffectLightingColor?.Overall ?? true)
                    {
                        EffectLightingColor?.Print(sb);
                    }
                    if (printMask?.CloudLodDiffuseColor?.Overall ?? true)
                    {
                        CloudLodDiffuseColor?.Print(sb);
                    }
                    if (printMask?.CloudLodAmbientColor?.Overall ?? true)
                    {
                        CloudLodAmbientColor?.Print(sb);
                    }
                    if (printMask?.FogFarColor?.Overall ?? true)
                    {
                        FogFarColor?.Print(sb);
                    }
                    if (printMask?.SkyStaticsColor?.Overall ?? true)
                    {
                        SkyStaticsColor?.Print(sb);
                    }
                    if (printMask?.WaterMultiplierColor?.Overall ?? true)
                    {
                        WaterMultiplierColor?.Print(sb);
                    }
                    if (printMask?.SunGlareColor?.Overall ?? true)
                    {
                        SunGlareColor?.Print(sb);
                    }
                    if (printMask?.MoonGlareColor?.Overall ?? true)
                    {
                        MoonGlareColor?.Print(sb);
                    }
                    if (printMask?.FogDistanceDayNear ?? true)
                    {
                        sb.AppendItem(FogDistanceDayNear, "FogDistanceDayNear");
                    }
                    if (printMask?.FogDistanceDayFar ?? true)
                    {
                        sb.AppendItem(FogDistanceDayFar, "FogDistanceDayFar");
                    }
                    if (printMask?.FogDistanceNightNear ?? true)
                    {
                        sb.AppendItem(FogDistanceNightNear, "FogDistanceNightNear");
                    }
                    if (printMask?.FogDistanceNightFar ?? true)
                    {
                        sb.AppendItem(FogDistanceNightFar, "FogDistanceNightFar");
                    }
                    if (printMask?.FogDistanceDayPower ?? true)
                    {
                        sb.AppendItem(FogDistanceDayPower, "FogDistanceDayPower");
                    }
                    if (printMask?.FogDistanceNightPower ?? true)
                    {
                        sb.AppendItem(FogDistanceNightPower, "FogDistanceNightPower");
                    }
                    if (printMask?.FogDistanceDayMax ?? true)
                    {
                        sb.AppendItem(FogDistanceDayMax, "FogDistanceDayMax");
                    }
                    if (printMask?.FogDistanceNightMax ?? true)
                    {
                        sb.AppendItem(FogDistanceNightMax, "FogDistanceNightMax");
                    }
                    if (printMask?.WindSpeed ?? true)
                    {
                        sb.AppendItem(WindSpeed, "WindSpeed");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.TransDelta ?? true)
                    {
                        sb.AppendItem(TransDelta, "TransDelta");
                    }
                    if (printMask?.SunGlare ?? true)
                    {
                        sb.AppendItem(SunGlare, "SunGlare");
                    }
                    if (printMask?.SunDamage ?? true)
                    {
                        sb.AppendItem(SunDamage, "SunDamage");
                    }
                    if (printMask?.PrecipitationBeginFadeIn ?? true)
                    {
                        sb.AppendItem(PrecipitationBeginFadeIn, "PrecipitationBeginFadeIn");
                    }
                    if (printMask?.PrecipitationEndFadeOut ?? true)
                    {
                        sb.AppendItem(PrecipitationEndFadeOut, "PrecipitationEndFadeOut");
                    }
                    if (printMask?.ThunderLightningBeginFadeIn ?? true)
                    {
                        sb.AppendItem(ThunderLightningBeginFadeIn, "ThunderLightningBeginFadeIn");
                    }
                    if (printMask?.ThunderLightningEndFadeOut ?? true)
                    {
                        sb.AppendItem(ThunderLightningEndFadeOut, "ThunderLightningEndFadeOut");
                    }
                    if (printMask?.ThunderLightningFrequency ?? true)
                    {
                        sb.AppendItem(ThunderLightningFrequency, "ThunderLightningFrequency");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.LightningColor ?? true)
                    {
                        sb.AppendItem(LightningColor, "LightningColor");
                    }
                    if (printMask?.VisualEffectBegin ?? true)
                    {
                        sb.AppendItem(VisualEffectBegin, "VisualEffectBegin");
                    }
                    if (printMask?.VisualEffectEnd ?? true)
                    {
                        sb.AppendItem(VisualEffectEnd, "VisualEffectEnd");
                    }
                    if (printMask?.WindDirection ?? true)
                    {
                        sb.AppendItem(WindDirection, "WindDirection");
                    }
                    if (printMask?.WindDirectionRange ?? true)
                    {
                        sb.AppendItem(WindDirectionRange, "WindDirectionRange");
                    }
                    if ((printMask?.Sounds?.Overall ?? true)
                        && Sounds is {} SoundsItem)
                    {
                        sb.AppendLine("Sounds =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SoundsItem.Overall);
                            if (SoundsItem.Specific != null)
                            {
                                foreach (var subItem in SoundsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.SkyStatics?.Overall ?? true)
                        && SkyStatics is {} SkyStaticsItem)
                    {
                        sb.AppendLine("SkyStatics =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SkyStaticsItem.Overall);
                            if (SkyStaticsItem.Specific != null)
                            {
                                foreach (var subItem in SkyStaticsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ImageSpaces?.Overall ?? true)
                    {
                        ImageSpaces?.Print(sb);
                    }
                    if (printMask?.VolumetricLighting?.Overall ?? true)
                    {
                        VolumetricLighting?.Print(sb);
                    }
                    if (printMask?.DirectionalAmbientLightingColors?.Overall ?? true)
                    {
                        DirectionalAmbientLightingColors?.Print(sb);
                    }
                    if (printMask?.NAM2 ?? true)
                    {
                        sb.AppendItem(NAM2, "NAM2");
                    }
                    if (printMask?.NAM3 ?? true)
                    {
                        sb.AppendItem(NAM3, "NAM3");
                    }
                    if (printMask?.Aurora?.Overall ?? true)
                    {
                        Aurora?.Print(sb);
                    }
                    if (printMask?.SunGlareLensFlare ?? true)
                    {
                        sb.AppendItem(SunGlareLensFlare, "SunGlareLensFlare");
                    }
                    if (printMask?.NAM0DataTypeState ?? true)
                    {
                        sb.AppendItem(NAM0DataTypeState, "NAM0DataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? CloudTextures;
            public Exception? DNAM;
            public Exception? CNAM;
            public Exception? ANAM;
            public Exception? BNAM;
            public Exception? LNAM;
            public Exception? Precipitation;
            public Exception? VisualEffect;
            public Exception? ONAM;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CloudLayer.ErrorMask?>>?>? Clouds;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SkyUpperColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? FogNearColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? UnknownColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? AmbientColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SunlightColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SunColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? StarsColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SkyLowerColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? HorizonColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? EffectLightingColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? CloudLodDiffuseColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? CloudLodAmbientColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? FogFarColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SkyStaticsColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? WaterMultiplierColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? SunGlareColor;
            public MaskItem<Exception?, WeatherColor.ErrorMask?>? MoonGlareColor;
            public Exception? FogDistanceDayNear;
            public Exception? FogDistanceDayFar;
            public Exception? FogDistanceNightNear;
            public Exception? FogDistanceNightFar;
            public Exception? FogDistanceDayPower;
            public Exception? FogDistanceNightPower;
            public Exception? FogDistanceDayMax;
            public Exception? FogDistanceNightMax;
            public Exception? WindSpeed;
            public Exception? Unknown;
            public Exception? TransDelta;
            public Exception? SunGlare;
            public Exception? SunDamage;
            public Exception? PrecipitationBeginFadeIn;
            public Exception? PrecipitationEndFadeOut;
            public Exception? ThunderLightningBeginFadeIn;
            public Exception? ThunderLightningEndFadeOut;
            public Exception? ThunderLightningFrequency;
            public Exception? Flags;
            public Exception? LightningColor;
            public Exception? VisualEffectBegin;
            public Exception? VisualEffectEnd;
            public Exception? WindDirection;
            public Exception? WindDirectionRange;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>? Sounds;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SkyStatics;
            public MaskItem<Exception?, WeatherImageSpaces.ErrorMask?>? ImageSpaces;
            public MaskItem<Exception?, WeatherVolumetricLighting.ErrorMask?>? VolumetricLighting;
            public MaskItem<Exception?, WeatherAmbientColorSet.ErrorMask?>? DirectionalAmbientLightingColors;
            public Exception? NAM2;
            public Exception? NAM3;
            public MaskItem<Exception?, Model.ErrorMask?>? Aurora;
            public Exception? SunGlareLensFlare;
            public Exception? NAM0DataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Weather_FieldIndex enu = (Weather_FieldIndex)index;
                switch (enu)
                {
                    case Weather_FieldIndex.CloudTextures:
                        return CloudTextures;
                    case Weather_FieldIndex.DNAM:
                        return DNAM;
                    case Weather_FieldIndex.CNAM:
                        return CNAM;
                    case Weather_FieldIndex.ANAM:
                        return ANAM;
                    case Weather_FieldIndex.BNAM:
                        return BNAM;
                    case Weather_FieldIndex.LNAM:
                        return LNAM;
                    case Weather_FieldIndex.Precipitation:
                        return Precipitation;
                    case Weather_FieldIndex.VisualEffect:
                        return VisualEffect;
                    case Weather_FieldIndex.ONAM:
                        return ONAM;
                    case Weather_FieldIndex.Clouds:
                        return Clouds;
                    case Weather_FieldIndex.SkyUpperColor:
                        return SkyUpperColor;
                    case Weather_FieldIndex.FogNearColor:
                        return FogNearColor;
                    case Weather_FieldIndex.UnknownColor:
                        return UnknownColor;
                    case Weather_FieldIndex.AmbientColor:
                        return AmbientColor;
                    case Weather_FieldIndex.SunlightColor:
                        return SunlightColor;
                    case Weather_FieldIndex.SunColor:
                        return SunColor;
                    case Weather_FieldIndex.StarsColor:
                        return StarsColor;
                    case Weather_FieldIndex.SkyLowerColor:
                        return SkyLowerColor;
                    case Weather_FieldIndex.HorizonColor:
                        return HorizonColor;
                    case Weather_FieldIndex.EffectLightingColor:
                        return EffectLightingColor;
                    case Weather_FieldIndex.CloudLodDiffuseColor:
                        return CloudLodDiffuseColor;
                    case Weather_FieldIndex.CloudLodAmbientColor:
                        return CloudLodAmbientColor;
                    case Weather_FieldIndex.FogFarColor:
                        return FogFarColor;
                    case Weather_FieldIndex.SkyStaticsColor:
                        return SkyStaticsColor;
                    case Weather_FieldIndex.WaterMultiplierColor:
                        return WaterMultiplierColor;
                    case Weather_FieldIndex.SunGlareColor:
                        return SunGlareColor;
                    case Weather_FieldIndex.MoonGlareColor:
                        return MoonGlareColor;
                    case Weather_FieldIndex.FogDistanceDayNear:
                        return FogDistanceDayNear;
                    case Weather_FieldIndex.FogDistanceDayFar:
                        return FogDistanceDayFar;
                    case Weather_FieldIndex.FogDistanceNightNear:
                        return FogDistanceNightNear;
                    case Weather_FieldIndex.FogDistanceNightFar:
                        return FogDistanceNightFar;
                    case Weather_FieldIndex.FogDistanceDayPower:
                        return FogDistanceDayPower;
                    case Weather_FieldIndex.FogDistanceNightPower:
                        return FogDistanceNightPower;
                    case Weather_FieldIndex.FogDistanceDayMax:
                        return FogDistanceDayMax;
                    case Weather_FieldIndex.FogDistanceNightMax:
                        return FogDistanceNightMax;
                    case Weather_FieldIndex.WindSpeed:
                        return WindSpeed;
                    case Weather_FieldIndex.Unknown:
                        return Unknown;
                    case Weather_FieldIndex.TransDelta:
                        return TransDelta;
                    case Weather_FieldIndex.SunGlare:
                        return SunGlare;
                    case Weather_FieldIndex.SunDamage:
                        return SunDamage;
                    case Weather_FieldIndex.PrecipitationBeginFadeIn:
                        return PrecipitationBeginFadeIn;
                    case Weather_FieldIndex.PrecipitationEndFadeOut:
                        return PrecipitationEndFadeOut;
                    case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                        return ThunderLightningBeginFadeIn;
                    case Weather_FieldIndex.ThunderLightningEndFadeOut:
                        return ThunderLightningEndFadeOut;
                    case Weather_FieldIndex.ThunderLightningFrequency:
                        return ThunderLightningFrequency;
                    case Weather_FieldIndex.Flags:
                        return Flags;
                    case Weather_FieldIndex.LightningColor:
                        return LightningColor;
                    case Weather_FieldIndex.VisualEffectBegin:
                        return VisualEffectBegin;
                    case Weather_FieldIndex.VisualEffectEnd:
                        return VisualEffectEnd;
                    case Weather_FieldIndex.WindDirection:
                        return WindDirection;
                    case Weather_FieldIndex.WindDirectionRange:
                        return WindDirectionRange;
                    case Weather_FieldIndex.Sounds:
                        return Sounds;
                    case Weather_FieldIndex.SkyStatics:
                        return SkyStatics;
                    case Weather_FieldIndex.ImageSpaces:
                        return ImageSpaces;
                    case Weather_FieldIndex.VolumetricLighting:
                        return VolumetricLighting;
                    case Weather_FieldIndex.DirectionalAmbientLightingColors:
                        return DirectionalAmbientLightingColors;
                    case Weather_FieldIndex.NAM2:
                        return NAM2;
                    case Weather_FieldIndex.NAM3:
                        return NAM3;
                    case Weather_FieldIndex.Aurora:
                        return Aurora;
                    case Weather_FieldIndex.SunGlareLensFlare:
                        return SunGlareLensFlare;
                    case Weather_FieldIndex.NAM0DataTypeState:
                        return NAM0DataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Weather_FieldIndex enu = (Weather_FieldIndex)index;
                switch (enu)
                {
                    case Weather_FieldIndex.CloudTextures:
                        this.CloudTextures = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Weather_FieldIndex.DNAM:
                        this.DNAM = ex;
                        break;
                    case Weather_FieldIndex.CNAM:
                        this.CNAM = ex;
                        break;
                    case Weather_FieldIndex.ANAM:
                        this.ANAM = ex;
                        break;
                    case Weather_FieldIndex.BNAM:
                        this.BNAM = ex;
                        break;
                    case Weather_FieldIndex.LNAM:
                        this.LNAM = ex;
                        break;
                    case Weather_FieldIndex.Precipitation:
                        this.Precipitation = ex;
                        break;
                    case Weather_FieldIndex.VisualEffect:
                        this.VisualEffect = ex;
                        break;
                    case Weather_FieldIndex.ONAM:
                        this.ONAM = ex;
                        break;
                    case Weather_FieldIndex.Clouds:
                        this.Clouds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CloudLayer.ErrorMask?>>?>(ex, null);
                        break;
                    case Weather_FieldIndex.SkyUpperColor:
                        this.SkyUpperColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.FogNearColor:
                        this.FogNearColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.UnknownColor:
                        this.UnknownColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.AmbientColor:
                        this.AmbientColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SunlightColor:
                        this.SunlightColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SunColor:
                        this.SunColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.StarsColor:
                        this.StarsColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SkyLowerColor:
                        this.SkyLowerColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.HorizonColor:
                        this.HorizonColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.EffectLightingColor:
                        this.EffectLightingColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.CloudLodDiffuseColor:
                        this.CloudLodDiffuseColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.CloudLodAmbientColor:
                        this.CloudLodAmbientColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.FogFarColor:
                        this.FogFarColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SkyStaticsColor:
                        this.SkyStaticsColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.WaterMultiplierColor:
                        this.WaterMultiplierColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SunGlareColor:
                        this.SunGlareColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.MoonGlareColor:
                        this.MoonGlareColor = new MaskItem<Exception?, WeatherColor.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.FogDistanceDayNear:
                        this.FogDistanceDayNear = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceDayFar:
                        this.FogDistanceDayFar = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceNightNear:
                        this.FogDistanceNightNear = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceNightFar:
                        this.FogDistanceNightFar = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceDayPower:
                        this.FogDistanceDayPower = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceNightPower:
                        this.FogDistanceNightPower = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceDayMax:
                        this.FogDistanceDayMax = ex;
                        break;
                    case Weather_FieldIndex.FogDistanceNightMax:
                        this.FogDistanceNightMax = ex;
                        break;
                    case Weather_FieldIndex.WindSpeed:
                        this.WindSpeed = ex;
                        break;
                    case Weather_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case Weather_FieldIndex.TransDelta:
                        this.TransDelta = ex;
                        break;
                    case Weather_FieldIndex.SunGlare:
                        this.SunGlare = ex;
                        break;
                    case Weather_FieldIndex.SunDamage:
                        this.SunDamage = ex;
                        break;
                    case Weather_FieldIndex.PrecipitationBeginFadeIn:
                        this.PrecipitationBeginFadeIn = ex;
                        break;
                    case Weather_FieldIndex.PrecipitationEndFadeOut:
                        this.PrecipitationEndFadeOut = ex;
                        break;
                    case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                        this.ThunderLightningBeginFadeIn = ex;
                        break;
                    case Weather_FieldIndex.ThunderLightningEndFadeOut:
                        this.ThunderLightningEndFadeOut = ex;
                        break;
                    case Weather_FieldIndex.ThunderLightningFrequency:
                        this.ThunderLightningFrequency = ex;
                        break;
                    case Weather_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Weather_FieldIndex.LightningColor:
                        this.LightningColor = ex;
                        break;
                    case Weather_FieldIndex.VisualEffectBegin:
                        this.VisualEffectBegin = ex;
                        break;
                    case Weather_FieldIndex.VisualEffectEnd:
                        this.VisualEffectEnd = ex;
                        break;
                    case Weather_FieldIndex.WindDirection:
                        this.WindDirection = ex;
                        break;
                    case Weather_FieldIndex.WindDirectionRange:
                        this.WindDirectionRange = ex;
                        break;
                    case Weather_FieldIndex.Sounds:
                        this.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>(ex, null);
                        break;
                    case Weather_FieldIndex.SkyStatics:
                        this.SkyStatics = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Weather_FieldIndex.ImageSpaces:
                        this.ImageSpaces = new MaskItem<Exception?, WeatherImageSpaces.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.VolumetricLighting:
                        this.VolumetricLighting = new MaskItem<Exception?, WeatherVolumetricLighting.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.DirectionalAmbientLightingColors:
                        this.DirectionalAmbientLightingColors = new MaskItem<Exception?, WeatherAmbientColorSet.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.NAM2:
                        this.NAM2 = ex;
                        break;
                    case Weather_FieldIndex.NAM3:
                        this.NAM3 = ex;
                        break;
                    case Weather_FieldIndex.Aurora:
                        this.Aurora = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Weather_FieldIndex.SunGlareLensFlare:
                        this.SunGlareLensFlare = ex;
                        break;
                    case Weather_FieldIndex.NAM0DataTypeState:
                        this.NAM0DataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Weather_FieldIndex enu = (Weather_FieldIndex)index;
                switch (enu)
                {
                    case Weather_FieldIndex.CloudTextures:
                        this.CloudTextures = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Weather_FieldIndex.DNAM:
                        this.DNAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.CNAM:
                        this.CNAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.ANAM:
                        this.ANAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.BNAM:
                        this.BNAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.LNAM:
                        this.LNAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Precipitation:
                        this.Precipitation = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.VisualEffect:
                        this.VisualEffect = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.ONAM:
                        this.ONAM = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Clouds:
                        this.Clouds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CloudLayer.ErrorMask?>>?>)obj;
                        break;
                    case Weather_FieldIndex.SkyUpperColor:
                        this.SkyUpperColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.FogNearColor:
                        this.FogNearColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.UnknownColor:
                        this.UnknownColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.AmbientColor:
                        this.AmbientColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SunlightColor:
                        this.SunlightColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SunColor:
                        this.SunColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.StarsColor:
                        this.StarsColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SkyLowerColor:
                        this.SkyLowerColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.HorizonColor:
                        this.HorizonColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.EffectLightingColor:
                        this.EffectLightingColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.CloudLodDiffuseColor:
                        this.CloudLodDiffuseColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.CloudLodAmbientColor:
                        this.CloudLodAmbientColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.FogFarColor:
                        this.FogFarColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SkyStaticsColor:
                        this.SkyStaticsColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.WaterMultiplierColor:
                        this.WaterMultiplierColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SunGlareColor:
                        this.SunGlareColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.MoonGlareColor:
                        this.MoonGlareColor = (MaskItem<Exception?, WeatherColor.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceDayNear:
                        this.FogDistanceDayNear = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceDayFar:
                        this.FogDistanceDayFar = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceNightNear:
                        this.FogDistanceNightNear = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceNightFar:
                        this.FogDistanceNightFar = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceDayPower:
                        this.FogDistanceDayPower = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceNightPower:
                        this.FogDistanceNightPower = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceDayMax:
                        this.FogDistanceDayMax = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.FogDistanceNightMax:
                        this.FogDistanceNightMax = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.WindSpeed:
                        this.WindSpeed = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.TransDelta:
                        this.TransDelta = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.SunGlare:
                        this.SunGlare = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.SunDamage:
                        this.SunDamage = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.PrecipitationBeginFadeIn:
                        this.PrecipitationBeginFadeIn = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.PrecipitationEndFadeOut:
                        this.PrecipitationEndFadeOut = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.ThunderLightningBeginFadeIn:
                        this.ThunderLightningBeginFadeIn = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.ThunderLightningEndFadeOut:
                        this.ThunderLightningEndFadeOut = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.ThunderLightningFrequency:
                        this.ThunderLightningFrequency = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.LightningColor:
                        this.LightningColor = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.VisualEffectBegin:
                        this.VisualEffectBegin = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.VisualEffectEnd:
                        this.VisualEffectEnd = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.WindDirection:
                        this.WindDirection = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.WindDirectionRange:
                        this.WindDirectionRange = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Sounds:
                        this.Sounds = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>)obj;
                        break;
                    case Weather_FieldIndex.SkyStatics:
                        this.SkyStatics = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Weather_FieldIndex.ImageSpaces:
                        this.ImageSpaces = (MaskItem<Exception?, WeatherImageSpaces.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.VolumetricLighting:
                        this.VolumetricLighting = (MaskItem<Exception?, WeatherVolumetricLighting.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.DirectionalAmbientLightingColors:
                        this.DirectionalAmbientLightingColors = (MaskItem<Exception?, WeatherAmbientColorSet.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.NAM2:
                        this.NAM2 = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.NAM3:
                        this.NAM3 = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.Aurora:
                        this.Aurora = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Weather_FieldIndex.SunGlareLensFlare:
                        this.SunGlareLensFlare = (Exception?)obj;
                        break;
                    case Weather_FieldIndex.NAM0DataTypeState:
                        this.NAM0DataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (CloudTextures != null) return true;
                if (DNAM != null) return true;
                if (CNAM != null) return true;
                if (ANAM != null) return true;
                if (BNAM != null) return true;
                if (LNAM != null) return true;
                if (Precipitation != null) return true;
                if (VisualEffect != null) return true;
                if (ONAM != null) return true;
                if (Clouds != null) return true;
                if (SkyUpperColor != null) return true;
                if (FogNearColor != null) return true;
                if (UnknownColor != null) return true;
                if (AmbientColor != null) return true;
                if (SunlightColor != null) return true;
                if (SunColor != null) return true;
                if (StarsColor != null) return true;
                if (SkyLowerColor != null) return true;
                if (HorizonColor != null) return true;
                if (EffectLightingColor != null) return true;
                if (CloudLodDiffuseColor != null) return true;
                if (CloudLodAmbientColor != null) return true;
                if (FogFarColor != null) return true;
                if (SkyStaticsColor != null) return true;
                if (WaterMultiplierColor != null) return true;
                if (SunGlareColor != null) return true;
                if (MoonGlareColor != null) return true;
                if (FogDistanceDayNear != null) return true;
                if (FogDistanceDayFar != null) return true;
                if (FogDistanceNightNear != null) return true;
                if (FogDistanceNightFar != null) return true;
                if (FogDistanceDayPower != null) return true;
                if (FogDistanceNightPower != null) return true;
                if (FogDistanceDayMax != null) return true;
                if (FogDistanceNightMax != null) return true;
                if (WindSpeed != null) return true;
                if (Unknown != null) return true;
                if (TransDelta != null) return true;
                if (SunGlare != null) return true;
                if (SunDamage != null) return true;
                if (PrecipitationBeginFadeIn != null) return true;
                if (PrecipitationEndFadeOut != null) return true;
                if (ThunderLightningBeginFadeIn != null) return true;
                if (ThunderLightningEndFadeOut != null) return true;
                if (ThunderLightningFrequency != null) return true;
                if (Flags != null) return true;
                if (LightningColor != null) return true;
                if (VisualEffectBegin != null) return true;
                if (VisualEffectEnd != null) return true;
                if (WindDirection != null) return true;
                if (WindDirectionRange != null) return true;
                if (Sounds != null) return true;
                if (SkyStatics != null) return true;
                if (ImageSpaces != null) return true;
                if (VolumetricLighting != null) return true;
                if (DirectionalAmbientLightingColors != null) return true;
                if (NAM2 != null) return true;
                if (NAM3 != null) return true;
                if (Aurora != null) return true;
                if (SunGlareLensFlare != null) return true;
                if (NAM0DataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (CloudTextures is {} CloudTexturesItem)
                {
                    sb.AppendLine("CloudTextures =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(CloudTexturesItem.Overall);
                        if (CloudTexturesItem.Specific != null)
                        {
                            foreach (var subItem in CloudTexturesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DNAM, "DNAM");
                }
                {
                    sb.AppendItem(CNAM, "CNAM");
                }
                {
                    sb.AppendItem(ANAM, "ANAM");
                }
                {
                    sb.AppendItem(BNAM, "BNAM");
                }
                {
                    sb.AppendItem(LNAM, "LNAM");
                }
                {
                    sb.AppendItem(Precipitation, "Precipitation");
                }
                {
                    sb.AppendItem(VisualEffect, "VisualEffect");
                }
                {
                    sb.AppendItem(ONAM, "ONAM");
                }
                if (Clouds is {} CloudsItem)
                {
                    sb.AppendLine("Clouds =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(CloudsItem.Overall);
                        if (CloudsItem.Specific != null)
                        {
                            foreach (var subItem in CloudsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                SkyUpperColor?.Print(sb);
                FogNearColor?.Print(sb);
                UnknownColor?.Print(sb);
                AmbientColor?.Print(sb);
                SunlightColor?.Print(sb);
                SunColor?.Print(sb);
                StarsColor?.Print(sb);
                SkyLowerColor?.Print(sb);
                HorizonColor?.Print(sb);
                EffectLightingColor?.Print(sb);
                CloudLodDiffuseColor?.Print(sb);
                CloudLodAmbientColor?.Print(sb);
                FogFarColor?.Print(sb);
                SkyStaticsColor?.Print(sb);
                WaterMultiplierColor?.Print(sb);
                SunGlareColor?.Print(sb);
                MoonGlareColor?.Print(sb);
                {
                    sb.AppendItem(FogDistanceDayNear, "FogDistanceDayNear");
                }
                {
                    sb.AppendItem(FogDistanceDayFar, "FogDistanceDayFar");
                }
                {
                    sb.AppendItem(FogDistanceNightNear, "FogDistanceNightNear");
                }
                {
                    sb.AppendItem(FogDistanceNightFar, "FogDistanceNightFar");
                }
                {
                    sb.AppendItem(FogDistanceDayPower, "FogDistanceDayPower");
                }
                {
                    sb.AppendItem(FogDistanceNightPower, "FogDistanceNightPower");
                }
                {
                    sb.AppendItem(FogDistanceDayMax, "FogDistanceDayMax");
                }
                {
                    sb.AppendItem(FogDistanceNightMax, "FogDistanceNightMax");
                }
                {
                    sb.AppendItem(WindSpeed, "WindSpeed");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(TransDelta, "TransDelta");
                }
                {
                    sb.AppendItem(SunGlare, "SunGlare");
                }
                {
                    sb.AppendItem(SunDamage, "SunDamage");
                }
                {
                    sb.AppendItem(PrecipitationBeginFadeIn, "PrecipitationBeginFadeIn");
                }
                {
                    sb.AppendItem(PrecipitationEndFadeOut, "PrecipitationEndFadeOut");
                }
                {
                    sb.AppendItem(ThunderLightningBeginFadeIn, "ThunderLightningBeginFadeIn");
                }
                {
                    sb.AppendItem(ThunderLightningEndFadeOut, "ThunderLightningEndFadeOut");
                }
                {
                    sb.AppendItem(ThunderLightningFrequency, "ThunderLightningFrequency");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(LightningColor, "LightningColor");
                }
                {
                    sb.AppendItem(VisualEffectBegin, "VisualEffectBegin");
                }
                {
                    sb.AppendItem(VisualEffectEnd, "VisualEffectEnd");
                }
                {
                    sb.AppendItem(WindDirection, "WindDirection");
                }
                {
                    sb.AppendItem(WindDirectionRange, "WindDirectionRange");
                }
                if (Sounds is {} SoundsItem)
                {
                    sb.AppendLine("Sounds =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SoundsItem.Overall);
                        if (SoundsItem.Specific != null)
                        {
                            foreach (var subItem in SoundsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (SkyStatics is {} SkyStaticsItem)
                {
                    sb.AppendLine("SkyStatics =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SkyStaticsItem.Overall);
                        if (SkyStaticsItem.Specific != null)
                        {
                            foreach (var subItem in SkyStaticsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                ImageSpaces?.Print(sb);
                VolumetricLighting?.Print(sb);
                DirectionalAmbientLightingColors?.Print(sb);
                {
                    sb.AppendItem(NAM2, "NAM2");
                }
                {
                    sb.AppendItem(NAM3, "NAM3");
                }
                Aurora?.Print(sb);
                {
                    sb.AppendItem(SunGlareLensFlare, "SunGlareLensFlare");
                }
                {
                    sb.AppendItem(NAM0DataTypeState, "NAM0DataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.CloudTextures = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.CloudTextures?.Overall, rhs.CloudTextures?.Overall), Noggog.ExceptionExt.Combine(this.CloudTextures?.Specific, rhs.CloudTextures?.Specific));
                ret.DNAM = this.DNAM.Combine(rhs.DNAM);
                ret.CNAM = this.CNAM.Combine(rhs.CNAM);
                ret.ANAM = this.ANAM.Combine(rhs.ANAM);
                ret.BNAM = this.BNAM.Combine(rhs.BNAM);
                ret.LNAM = this.LNAM.Combine(rhs.LNAM);
                ret.Precipitation = this.Precipitation.Combine(rhs.Precipitation);
                ret.VisualEffect = this.VisualEffect.Combine(rhs.VisualEffect);
                ret.ONAM = this.ONAM.Combine(rhs.ONAM);
                ret.Clouds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, CloudLayer.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Clouds?.Overall, rhs.Clouds?.Overall), Noggog.ExceptionExt.Combine(this.Clouds?.Specific, rhs.Clouds?.Specific));
                ret.SkyUpperColor = this.SkyUpperColor.Combine(rhs.SkyUpperColor, (l, r) => l.Combine(r));
                ret.FogNearColor = this.FogNearColor.Combine(rhs.FogNearColor, (l, r) => l.Combine(r));
                ret.UnknownColor = this.UnknownColor.Combine(rhs.UnknownColor, (l, r) => l.Combine(r));
                ret.AmbientColor = this.AmbientColor.Combine(rhs.AmbientColor, (l, r) => l.Combine(r));
                ret.SunlightColor = this.SunlightColor.Combine(rhs.SunlightColor, (l, r) => l.Combine(r));
                ret.SunColor = this.SunColor.Combine(rhs.SunColor, (l, r) => l.Combine(r));
                ret.StarsColor = this.StarsColor.Combine(rhs.StarsColor, (l, r) => l.Combine(r));
                ret.SkyLowerColor = this.SkyLowerColor.Combine(rhs.SkyLowerColor, (l, r) => l.Combine(r));
                ret.HorizonColor = this.HorizonColor.Combine(rhs.HorizonColor, (l, r) => l.Combine(r));
                ret.EffectLightingColor = this.EffectLightingColor.Combine(rhs.EffectLightingColor, (l, r) => l.Combine(r));
                ret.CloudLodDiffuseColor = this.CloudLodDiffuseColor.Combine(rhs.CloudLodDiffuseColor, (l, r) => l.Combine(r));
                ret.CloudLodAmbientColor = this.CloudLodAmbientColor.Combine(rhs.CloudLodAmbientColor, (l, r) => l.Combine(r));
                ret.FogFarColor = this.FogFarColor.Combine(rhs.FogFarColor, (l, r) => l.Combine(r));
                ret.SkyStaticsColor = this.SkyStaticsColor.Combine(rhs.SkyStaticsColor, (l, r) => l.Combine(r));
                ret.WaterMultiplierColor = this.WaterMultiplierColor.Combine(rhs.WaterMultiplierColor, (l, r) => l.Combine(r));
                ret.SunGlareColor = this.SunGlareColor.Combine(rhs.SunGlareColor, (l, r) => l.Combine(r));
                ret.MoonGlareColor = this.MoonGlareColor.Combine(rhs.MoonGlareColor, (l, r) => l.Combine(r));
                ret.FogDistanceDayNear = this.FogDistanceDayNear.Combine(rhs.FogDistanceDayNear);
                ret.FogDistanceDayFar = this.FogDistanceDayFar.Combine(rhs.FogDistanceDayFar);
                ret.FogDistanceNightNear = this.FogDistanceNightNear.Combine(rhs.FogDistanceNightNear);
                ret.FogDistanceNightFar = this.FogDistanceNightFar.Combine(rhs.FogDistanceNightFar);
                ret.FogDistanceDayPower = this.FogDistanceDayPower.Combine(rhs.FogDistanceDayPower);
                ret.FogDistanceNightPower = this.FogDistanceNightPower.Combine(rhs.FogDistanceNightPower);
                ret.FogDistanceDayMax = this.FogDistanceDayMax.Combine(rhs.FogDistanceDayMax);
                ret.FogDistanceNightMax = this.FogDistanceNightMax.Combine(rhs.FogDistanceNightMax);
                ret.WindSpeed = this.WindSpeed.Combine(rhs.WindSpeed);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.TransDelta = this.TransDelta.Combine(rhs.TransDelta);
                ret.SunGlare = this.SunGlare.Combine(rhs.SunGlare);
                ret.SunDamage = this.SunDamage.Combine(rhs.SunDamage);
                ret.PrecipitationBeginFadeIn = this.PrecipitationBeginFadeIn.Combine(rhs.PrecipitationBeginFadeIn);
                ret.PrecipitationEndFadeOut = this.PrecipitationEndFadeOut.Combine(rhs.PrecipitationEndFadeOut);
                ret.ThunderLightningBeginFadeIn = this.ThunderLightningBeginFadeIn.Combine(rhs.ThunderLightningBeginFadeIn);
                ret.ThunderLightningEndFadeOut = this.ThunderLightningEndFadeOut.Combine(rhs.ThunderLightningEndFadeOut);
                ret.ThunderLightningFrequency = this.ThunderLightningFrequency.Combine(rhs.ThunderLightningFrequency);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.LightningColor = this.LightningColor.Combine(rhs.LightningColor);
                ret.VisualEffectBegin = this.VisualEffectBegin.Combine(rhs.VisualEffectBegin);
                ret.VisualEffectEnd = this.VisualEffectEnd.Combine(rhs.VisualEffectEnd);
                ret.WindDirection = this.WindDirection.Combine(rhs.WindDirection);
                ret.WindDirectionRange = this.WindDirectionRange.Combine(rhs.WindDirectionRange);
                ret.Sounds = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WeatherSound.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Sounds?.Overall, rhs.Sounds?.Overall), Noggog.ExceptionExt.Combine(this.Sounds?.Specific, rhs.Sounds?.Specific));
                ret.SkyStatics = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SkyStatics?.Overall, rhs.SkyStatics?.Overall), Noggog.ExceptionExt.Combine(this.SkyStatics?.Specific, rhs.SkyStatics?.Specific));
                ret.ImageSpaces = this.ImageSpaces.Combine(rhs.ImageSpaces, (l, r) => l.Combine(r));
                ret.VolumetricLighting = this.VolumetricLighting.Combine(rhs.VolumetricLighting, (l, r) => l.Combine(r));
                ret.DirectionalAmbientLightingColors = this.DirectionalAmbientLightingColors.Combine(rhs.DirectionalAmbientLightingColors, (l, r) => l.Combine(r));
                ret.NAM2 = this.NAM2.Combine(rhs.NAM2);
                ret.NAM3 = this.NAM3.Combine(rhs.NAM3);
                ret.Aurora = this.Aurora.Combine(rhs.Aurora, (l, r) => l.Combine(r));
                ret.SunGlareLensFlare = this.SunGlareLensFlare.Combine(rhs.SunGlareLensFlare);
                ret.NAM0DataTypeState = this.NAM0DataTypeState.Combine(rhs.NAM0DataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool CloudTextures;
            public bool DNAM;
            public bool CNAM;
            public bool ANAM;
            public bool BNAM;
            public bool LNAM;
            public bool Precipitation;
            public bool VisualEffect;
            public bool ONAM;
            public CloudLayer.TranslationMask? Clouds;
            public WeatherColor.TranslationMask? SkyUpperColor;
            public WeatherColor.TranslationMask? FogNearColor;
            public WeatherColor.TranslationMask? UnknownColor;
            public WeatherColor.TranslationMask? AmbientColor;
            public WeatherColor.TranslationMask? SunlightColor;
            public WeatherColor.TranslationMask? SunColor;
            public WeatherColor.TranslationMask? StarsColor;
            public WeatherColor.TranslationMask? SkyLowerColor;
            public WeatherColor.TranslationMask? HorizonColor;
            public WeatherColor.TranslationMask? EffectLightingColor;
            public WeatherColor.TranslationMask? CloudLodDiffuseColor;
            public WeatherColor.TranslationMask? CloudLodAmbientColor;
            public WeatherColor.TranslationMask? FogFarColor;
            public WeatherColor.TranslationMask? SkyStaticsColor;
            public WeatherColor.TranslationMask? WaterMultiplierColor;
            public WeatherColor.TranslationMask? SunGlareColor;
            public WeatherColor.TranslationMask? MoonGlareColor;
            public bool FogDistanceDayNear;
            public bool FogDistanceDayFar;
            public bool FogDistanceNightNear;
            public bool FogDistanceNightFar;
            public bool FogDistanceDayPower;
            public bool FogDistanceNightPower;
            public bool FogDistanceDayMax;
            public bool FogDistanceNightMax;
            public bool WindSpeed;
            public bool Unknown;
            public bool TransDelta;
            public bool SunGlare;
            public bool SunDamage;
            public bool PrecipitationBeginFadeIn;
            public bool PrecipitationEndFadeOut;
            public bool ThunderLightningBeginFadeIn;
            public bool ThunderLightningEndFadeOut;
            public bool ThunderLightningFrequency;
            public bool Flags;
            public bool LightningColor;
            public bool VisualEffectBegin;
            public bool VisualEffectEnd;
            public bool WindDirection;
            public bool WindDirectionRange;
            public WeatherSound.TranslationMask? Sounds;
            public bool SkyStatics;
            public WeatherImageSpaces.TranslationMask? ImageSpaces;
            public WeatherVolumetricLighting.TranslationMask? VolumetricLighting;
            public WeatherAmbientColorSet.TranslationMask? DirectionalAmbientLightingColors;
            public bool NAM2;
            public bool NAM3;
            public Model.TranslationMask? Aurora;
            public bool SunGlareLensFlare;
            public bool NAM0DataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.CloudTextures = defaultOn;
                this.DNAM = defaultOn;
                this.CNAM = defaultOn;
                this.ANAM = defaultOn;
                this.BNAM = defaultOn;
                this.LNAM = defaultOn;
                this.Precipitation = defaultOn;
                this.VisualEffect = defaultOn;
                this.ONAM = defaultOn;
                this.FogDistanceDayNear = defaultOn;
                this.FogDistanceDayFar = defaultOn;
                this.FogDistanceNightNear = defaultOn;
                this.FogDistanceNightFar = defaultOn;
                this.FogDistanceDayPower = defaultOn;
                this.FogDistanceNightPower = defaultOn;
                this.FogDistanceDayMax = defaultOn;
                this.FogDistanceNightMax = defaultOn;
                this.WindSpeed = defaultOn;
                this.Unknown = defaultOn;
                this.TransDelta = defaultOn;
                this.SunGlare = defaultOn;
                this.SunDamage = defaultOn;
                this.PrecipitationBeginFadeIn = defaultOn;
                this.PrecipitationEndFadeOut = defaultOn;
                this.ThunderLightningBeginFadeIn = defaultOn;
                this.ThunderLightningEndFadeOut = defaultOn;
                this.ThunderLightningFrequency = defaultOn;
                this.Flags = defaultOn;
                this.LightningColor = defaultOn;
                this.VisualEffectBegin = defaultOn;
                this.VisualEffectEnd = defaultOn;
                this.WindDirection = defaultOn;
                this.WindDirectionRange = defaultOn;
                this.SkyStatics = defaultOn;
                this.NAM2 = defaultOn;
                this.NAM3 = defaultOn;
                this.SunGlareLensFlare = defaultOn;
                this.NAM0DataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((CloudTextures, null));
                ret.Add((DNAM, null));
                ret.Add((CNAM, null));
                ret.Add((ANAM, null));
                ret.Add((BNAM, null));
                ret.Add((LNAM, null));
                ret.Add((Precipitation, null));
                ret.Add((VisualEffect, null));
                ret.Add((ONAM, null));
                ret.Add((Clouds == null ? DefaultOn : !Clouds.GetCrystal().CopyNothing, Clouds?.GetCrystal()));
                ret.Add((SkyUpperColor != null ? SkyUpperColor.OnOverall : DefaultOn, SkyUpperColor?.GetCrystal()));
                ret.Add((FogNearColor != null ? FogNearColor.OnOverall : DefaultOn, FogNearColor?.GetCrystal()));
                ret.Add((UnknownColor != null ? UnknownColor.OnOverall : DefaultOn, UnknownColor?.GetCrystal()));
                ret.Add((AmbientColor != null ? AmbientColor.OnOverall : DefaultOn, AmbientColor?.GetCrystal()));
                ret.Add((SunlightColor != null ? SunlightColor.OnOverall : DefaultOn, SunlightColor?.GetCrystal()));
                ret.Add((SunColor != null ? SunColor.OnOverall : DefaultOn, SunColor?.GetCrystal()));
                ret.Add((StarsColor != null ? StarsColor.OnOverall : DefaultOn, StarsColor?.GetCrystal()));
                ret.Add((SkyLowerColor != null ? SkyLowerColor.OnOverall : DefaultOn, SkyLowerColor?.GetCrystal()));
                ret.Add((HorizonColor != null ? HorizonColor.OnOverall : DefaultOn, HorizonColor?.GetCrystal()));
                ret.Add((EffectLightingColor != null ? EffectLightingColor.OnOverall : DefaultOn, EffectLightingColor?.GetCrystal()));
                ret.Add((CloudLodDiffuseColor != null ? CloudLodDiffuseColor.OnOverall : DefaultOn, CloudLodDiffuseColor?.GetCrystal()));
                ret.Add((CloudLodAmbientColor != null ? CloudLodAmbientColor.OnOverall : DefaultOn, CloudLodAmbientColor?.GetCrystal()));
                ret.Add((FogFarColor != null ? FogFarColor.OnOverall : DefaultOn, FogFarColor?.GetCrystal()));
                ret.Add((SkyStaticsColor != null ? SkyStaticsColor.OnOverall : DefaultOn, SkyStaticsColor?.GetCrystal()));
                ret.Add((WaterMultiplierColor != null ? WaterMultiplierColor.OnOverall : DefaultOn, WaterMultiplierColor?.GetCrystal()));
                ret.Add((SunGlareColor != null ? SunGlareColor.OnOverall : DefaultOn, SunGlareColor?.GetCrystal()));
                ret.Add((MoonGlareColor != null ? MoonGlareColor.OnOverall : DefaultOn, MoonGlareColor?.GetCrystal()));
                ret.Add((FogDistanceDayNear, null));
                ret.Add((FogDistanceDayFar, null));
                ret.Add((FogDistanceNightNear, null));
                ret.Add((FogDistanceNightFar, null));
                ret.Add((FogDistanceDayPower, null));
                ret.Add((FogDistanceNightPower, null));
                ret.Add((FogDistanceDayMax, null));
                ret.Add((FogDistanceNightMax, null));
                ret.Add((WindSpeed, null));
                ret.Add((Unknown, null));
                ret.Add((TransDelta, null));
                ret.Add((SunGlare, null));
                ret.Add((SunDamage, null));
                ret.Add((PrecipitationBeginFadeIn, null));
                ret.Add((PrecipitationEndFadeOut, null));
                ret.Add((ThunderLightningBeginFadeIn, null));
                ret.Add((ThunderLightningEndFadeOut, null));
                ret.Add((ThunderLightningFrequency, null));
                ret.Add((Flags, null));
                ret.Add((LightningColor, null));
                ret.Add((VisualEffectBegin, null));
                ret.Add((VisualEffectEnd, null));
                ret.Add((WindDirection, null));
                ret.Add((WindDirectionRange, null));
                ret.Add((Sounds == null ? DefaultOn : !Sounds.GetCrystal().CopyNothing, Sounds?.GetCrystal()));
                ret.Add((SkyStatics, null));
                ret.Add((ImageSpaces != null ? ImageSpaces.OnOverall : DefaultOn, ImageSpaces?.GetCrystal()));
                ret.Add((VolumetricLighting != null ? VolumetricLighting.OnOverall : DefaultOn, VolumetricLighting?.GetCrystal()));
                ret.Add((DirectionalAmbientLightingColors != null ? DirectionalAmbientLightingColors.OnOverall : DefaultOn, DirectionalAmbientLightingColors?.GetCrystal()));
                ret.Add((NAM2, null));
                ret.Add((NAM3, null));
                ret.Add((Aurora != null ? Aurora.OnOverall : DefaultOn, Aurora?.GetCrystal()));
                ret.Add((SunGlareLensFlare, null));
                ret.Add((NAM0DataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Weather_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WeatherCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => WeatherSetterCommon.Instance.RemapLinks(this, mapping);
        public Weather(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Weather(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Weather(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Weather(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Weather(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Weather>.ToString(this);
        }

        protected override Type LinkType => typeof(IWeather);

        [Flags]
        public enum NAM0DataType
        {
            Break0 = 1,
            Break1 = 2
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => WeatherCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => WeatherSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => WeatherSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => WeatherSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWeatherGetter rhs) return false;
            return ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWeatherGetter? obj)
        {
            return ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeatherBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeatherBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Weather CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Weather();
            ((WeatherSetterCommon)((IWeatherGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Weather item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((WeatherSetterCommon)((IWeatherGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Weather GetNew()
        {
            return new Weather();
        }

    }
    #endregion

    #region Interface
    public partial interface IWeather :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<IWeatherInternal>,
        ISkyrimMajorRecordInternal,
        IWeatherGetter
    {
        new IAssetLink<SkyrimTextureAssetType>?[] CloudTextures { get; }
        new MemorySlice<Byte>? DNAM { get; set; }
        new MemorySlice<Byte>? CNAM { get; set; }
        new MemorySlice<Byte>? ANAM { get; set; }
        new MemorySlice<Byte>? BNAM { get; set; }
        new MemorySlice<Byte>? LNAM { get; set; }
        new IFormLinkNullable<IShaderParticleGeometryGetter> Precipitation { get; set; }
        new IFormLink<IVisualEffectGetter> VisualEffect { get; set; }
        new MemorySlice<Byte>? ONAM { get; set; }
        new CloudLayer[] Clouds { get; }
        new WeatherColor SkyUpperColor { get; set; }
        new WeatherColor FogNearColor { get; set; }
        new WeatherColor UnknownColor { get; set; }
        new WeatherColor AmbientColor { get; set; }
        new WeatherColor SunlightColor { get; set; }
        new WeatherColor SunColor { get; set; }
        new WeatherColor StarsColor { get; set; }
        new WeatherColor SkyLowerColor { get; set; }
        new WeatherColor HorizonColor { get; set; }
        new WeatherColor EffectLightingColor { get; set; }
        new WeatherColor CloudLodDiffuseColor { get; set; }
        new WeatherColor CloudLodAmbientColor { get; set; }
        new WeatherColor FogFarColor { get; set; }
        new WeatherColor SkyStaticsColor { get; set; }
        new WeatherColor WaterMultiplierColor { get; set; }
        new WeatherColor SunGlareColor { get; set; }
        new WeatherColor MoonGlareColor { get; set; }
        new Single FogDistanceDayNear { get; set; }
        new Single FogDistanceDayFar { get; set; }
        new Single FogDistanceNightNear { get; set; }
        new Single FogDistanceNightFar { get; set; }
        new Single FogDistanceDayPower { get; set; }
        new Single FogDistanceNightPower { get; set; }
        new Single FogDistanceDayMax { get; set; }
        new Single FogDistanceNightMax { get; set; }
        new Percent WindSpeed { get; set; }
        new UInt16 Unknown { get; set; }
        new Single TransDelta { get; set; }
        new Percent SunGlare { get; set; }
        new Percent SunDamage { get; set; }
        new Percent PrecipitationBeginFadeIn { get; set; }
        new Percent PrecipitationEndFadeOut { get; set; }
        new Percent ThunderLightningBeginFadeIn { get; set; }
        new Percent ThunderLightningEndFadeOut { get; set; }
        new Percent ThunderLightningFrequency { get; set; }
        new Weather.Flag Flags { get; set; }
        new Color LightningColor { get; set; }
        new Percent VisualEffectBegin { get; set; }
        new Percent VisualEffectEnd { get; set; }
        new Single WindDirection { get; set; }
        new Single WindDirectionRange { get; set; }
        new ExtendedList<WeatherSound> Sounds { get; }
        new ExtendedList<IFormLinkGetter<IStaticGetter>> SkyStatics { get; }
        new WeatherImageSpaces? ImageSpaces { get; set; }
        new WeatherVolumetricLighting? VolumetricLighting { get; set; }
        new WeatherAmbientColorSet? DirectionalAmbientLightingColors { get; set; }
        new MemorySlice<Byte>? NAM2 { get; set; }
        new MemorySlice<Byte>? NAM3 { get; set; }
        new Model? Aurora { get; set; }
        new IFormLinkNullable<ILensFlareGetter> SunGlareLensFlare { get; set; }
        new Weather.NAM0DataType NAM0DataTypeState { get; set; }
    }

    public partial interface IWeatherInternal :
        ISkyrimMajorRecordInternal,
        IWeather,
        IWeatherGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.WTHR)]
    public partial interface IWeatherGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IWeatherGetter>,
        IMapsToGetter<IWeatherGetter>
    {
        static new ILoquiRegistration StaticRegistration => Weather_Registration.Instance;
        IReadOnlyList<IAssetLinkGetter<SkyrimTextureAssetType>?> CloudTextures { get; }
        ReadOnlyMemorySlice<Byte>? DNAM { get; }
        ReadOnlyMemorySlice<Byte>? CNAM { get; }
        ReadOnlyMemorySlice<Byte>? ANAM { get; }
        ReadOnlyMemorySlice<Byte>? BNAM { get; }
        ReadOnlyMemorySlice<Byte>? LNAM { get; }
        IFormLinkNullableGetter<IShaderParticleGeometryGetter> Precipitation { get; }
        IFormLinkGetter<IVisualEffectGetter> VisualEffect { get; }
        ReadOnlyMemorySlice<Byte>? ONAM { get; }
        IReadOnlyList<ICloudLayerGetter> Clouds { get; }
        IWeatherColorGetter SkyUpperColor { get; }
        IWeatherColorGetter FogNearColor { get; }
        IWeatherColorGetter UnknownColor { get; }
        IWeatherColorGetter AmbientColor { get; }
        IWeatherColorGetter SunlightColor { get; }
        IWeatherColorGetter SunColor { get; }
        IWeatherColorGetter StarsColor { get; }
        IWeatherColorGetter SkyLowerColor { get; }
        IWeatherColorGetter HorizonColor { get; }
        IWeatherColorGetter EffectLightingColor { get; }
        IWeatherColorGetter CloudLodDiffuseColor { get; }
        IWeatherColorGetter CloudLodAmbientColor { get; }
        IWeatherColorGetter FogFarColor { get; }
        IWeatherColorGetter SkyStaticsColor { get; }
        IWeatherColorGetter WaterMultiplierColor { get; }
        IWeatherColorGetter SunGlareColor { get; }
        IWeatherColorGetter MoonGlareColor { get; }
        Single FogDistanceDayNear { get; }
        Single FogDistanceDayFar { get; }
        Single FogDistanceNightNear { get; }
        Single FogDistanceNightFar { get; }
        Single FogDistanceDayPower { get; }
        Single FogDistanceNightPower { get; }
        Single FogDistanceDayMax { get; }
        Single FogDistanceNightMax { get; }
        Percent WindSpeed { get; }
        UInt16 Unknown { get; }
        Single TransDelta { get; }
        Percent SunGlare { get; }
        Percent SunDamage { get; }
        Percent PrecipitationBeginFadeIn { get; }
        Percent PrecipitationEndFadeOut { get; }
        Percent ThunderLightningBeginFadeIn { get; }
        Percent ThunderLightningEndFadeOut { get; }
        Percent ThunderLightningFrequency { get; }
        Weather.Flag Flags { get; }
        Color LightningColor { get; }
        Percent VisualEffectBegin { get; }
        Percent VisualEffectEnd { get; }
        Single WindDirection { get; }
        Single WindDirectionRange { get; }
        IReadOnlyList<IWeatherSoundGetter> Sounds { get; }
        IReadOnlyList<IFormLinkGetter<IStaticGetter>> SkyStatics { get; }
        IWeatherImageSpacesGetter? ImageSpaces { get; }
        IWeatherVolumetricLightingGetter? VolumetricLighting { get; }
        IWeatherAmbientColorSetGetter? DirectionalAmbientLightingColors { get; }
        ReadOnlyMemorySlice<Byte>? NAM2 { get; }
        ReadOnlyMemorySlice<Byte>? NAM3 { get; }
        IModelGetter? Aurora { get; }
        IFormLinkNullableGetter<ILensFlareGetter> SunGlareLensFlare { get; }
        Weather.NAM0DataType NAM0DataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class WeatherMixIn
    {
        public static void Clear(this IWeatherInternal item)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Weather.Mask<bool> GetEqualsMask(
            this IWeatherGetter item,
            IWeatherGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IWeatherGetter item,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IWeatherGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IWeatherGetter item,
            IWeatherGetter rhs,
            Weather.TranslationMask? equalsMask = null)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IWeatherInternal lhs,
            IWeatherGetter rhs,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((WeatherSetterTranslationCommon)((IWeatherGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Weather.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IWeatherInternal lhs,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((WeatherSetterTranslationCommon)((IWeatherGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            Weather.TranslationMask? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Weather DeepCopy(
            this IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((WeatherSetterTranslationCommon)((IWeatherGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Weather Duplicate(
            this IWeatherGetter item,
            FormKey formKey,
            Weather.TranslationMask? copyMask = null)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Weather Duplicate(
            this IWeatherGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IWeatherInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((WeatherSetterCommon)((IWeatherGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Weather_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        CloudTextures = 7,
        DNAM = 8,
        CNAM = 9,
        ANAM = 10,
        BNAM = 11,
        LNAM = 12,
        Precipitation = 13,
        VisualEffect = 14,
        ONAM = 15,
        Clouds = 16,
        SkyUpperColor = 17,
        FogNearColor = 18,
        UnknownColor = 19,
        AmbientColor = 20,
        SunlightColor = 21,
        SunColor = 22,
        StarsColor = 23,
        SkyLowerColor = 24,
        HorizonColor = 25,
        EffectLightingColor = 26,
        CloudLodDiffuseColor = 27,
        CloudLodAmbientColor = 28,
        FogFarColor = 29,
        SkyStaticsColor = 30,
        WaterMultiplierColor = 31,
        SunGlareColor = 32,
        MoonGlareColor = 33,
        FogDistanceDayNear = 34,
        FogDistanceDayFar = 35,
        FogDistanceNightNear = 36,
        FogDistanceNightFar = 37,
        FogDistanceDayPower = 38,
        FogDistanceNightPower = 39,
        FogDistanceDayMax = 40,
        FogDistanceNightMax = 41,
        WindSpeed = 42,
        Unknown = 43,
        TransDelta = 44,
        SunGlare = 45,
        SunDamage = 46,
        PrecipitationBeginFadeIn = 47,
        PrecipitationEndFadeOut = 48,
        ThunderLightningBeginFadeIn = 49,
        ThunderLightningEndFadeOut = 50,
        ThunderLightningFrequency = 51,
        Flags = 52,
        LightningColor = 53,
        VisualEffectBegin = 54,
        VisualEffectEnd = 55,
        WindDirection = 56,
        WindDirectionRange = 57,
        Sounds = 58,
        SkyStatics = 59,
        ImageSpaces = 60,
        VolumetricLighting = 61,
        DirectionalAmbientLightingColors = 62,
        NAM2 = 63,
        NAM3 = 64,
        Aurora = 65,
        SunGlareLensFlare = 66,
        NAM0DataTypeState = 67,
    }
    #endregion

    #region Registration
    internal partial class Weather_Registration : ILoquiRegistration
    {
        public static readonly Weather_Registration Instance = new Weather_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 61;

        public const ushort FieldCount = 68;

        public static readonly Type MaskType = typeof(Weather.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Weather.ErrorMask);

        public static readonly Type ClassType = typeof(Weather);

        public static readonly Type GetterType = typeof(IWeatherGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IWeather);

        public static readonly Type? InternalSetterType = typeof(IWeatherInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Weather";

        public const string Name = "Weather";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.WTHR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.WTHR);
            var all = RecordCollection.Factory(
                RecordTypes.WTHR,
                RecordTypes.DNAM,
                RecordTypes.CNAM,
                RecordTypes.ANAM,
                RecordTypes.BNAM,
                RecordTypes.LNAM,
                RecordTypes.MNAM,
                RecordTypes.NNAM,
                RecordTypes.ONAM,
                RecordTypes.RNAM,
                RecordTypes.QNAM,
                RecordTypes.PNAM,
                RecordTypes.JNAM,
                RecordTypes.NAM0,
                RecordTypes.FNAM,
                RecordTypes.DATA,
                RecordTypes.NAM1,
                RecordTypes.SNAM,
                RecordTypes.TNAM,
                RecordTypes.IMSP,
                RecordTypes.HNAM,
                RecordTypes.DALC,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.MODL,
                RecordTypes.GNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(WeatherBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class WeatherSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly WeatherSetterCommon Instance = new WeatherSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IWeatherInternal item)
        {
            ClearPartial();
            item.CloudTextures.ResetToNull();
            item.DNAM = default;
            item.CNAM = default;
            item.ANAM = default;
            item.BNAM = default;
            item.LNAM = default;
            item.Precipitation.Clear();
            item.VisualEffect.Clear();
            item.ONAM = default;
            item.Clouds.Fill(() => new CloudLayer());
            item.SkyUpperColor.Clear();
            item.FogNearColor.Clear();
            item.UnknownColor.Clear();
            item.AmbientColor.Clear();
            item.SunlightColor.Clear();
            item.SunColor.Clear();
            item.StarsColor.Clear();
            item.SkyLowerColor.Clear();
            item.HorizonColor.Clear();
            item.EffectLightingColor.Clear();
            item.CloudLodDiffuseColor.Clear();
            item.CloudLodAmbientColor.Clear();
            item.FogFarColor.Clear();
            item.SkyStaticsColor.Clear();
            item.WaterMultiplierColor.Clear();
            item.SunGlareColor.Clear();
            item.MoonGlareColor.Clear();
            item.FogDistanceDayNear = default(Single);
            item.FogDistanceDayFar = default(Single);
            item.FogDistanceNightNear = default(Single);
            item.FogDistanceNightFar = default(Single);
            item.FogDistanceDayPower = default(Single);
            item.FogDistanceNightPower = default(Single);
            item.FogDistanceDayMax = default(Single);
            item.FogDistanceNightMax = default(Single);
            item.WindSpeed = default(Percent);
            item.Unknown = default(UInt16);
            item.TransDelta = default(Single);
            item.SunGlare = default(Percent);
            item.SunDamage = default(Percent);
            item.PrecipitationBeginFadeIn = default(Percent);
            item.PrecipitationEndFadeOut = default(Percent);
            item.ThunderLightningBeginFadeIn = default(Percent);
            item.ThunderLightningEndFadeOut = default(Percent);
            item.ThunderLightningFrequency = default(Percent);
            item.Flags = default(Weather.Flag);
            item.LightningColor = default(Color);
            item.VisualEffectBegin = default(Percent);
            item.VisualEffectEnd = default(Percent);
            item.WindDirection = default(Single);
            item.WindDirectionRange = default(Single);
            item.Sounds.Clear();
            item.SkyStatics.Clear();
            item.ImageSpaces = null;
            item.VolumetricLighting = null;
            item.DirectionalAmbientLightingColors = null;
            item.NAM2 = default;
            item.NAM3 = default;
            item.Aurora = null;
            item.SunGlareLensFlare.Clear();
            item.NAM0DataTypeState = default(Weather.NAM0DataType);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IWeatherInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IWeatherInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IWeather obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Precipitation.Relink(mapping);
            obj.VisualEffect.Relink(mapping);
            obj.Sounds.RemapLinks(mapping);
            obj.SkyStatics.RemapLinks(mapping);
            obj.ImageSpaces?.RemapLinks(mapping);
            obj.VolumetricLighting?.RemapLinks(mapping);
            obj.Aurora?.RemapLinks(mapping);
            obj.SunGlareLensFlare.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IWeather obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.CloudTextures.WhereNotNull())
            {
                yield return item;
            }
            if (obj.Aurora is {} AuroraItems)
            {
                foreach (var item in AuroraItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IWeather obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.CloudTextures.ForEach(x => x?.Relink(mapping));
            obj.Aurora?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IWeatherInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IWeatherInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: WeatherBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: WeatherBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Weather)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Weather)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class WeatherCommon : SkyrimMajorRecordCommon
    {
        public new static readonly WeatherCommon Instance = new WeatherCommon();

        public Weather.Mask<bool> GetEqualsMask(
            IWeatherGetter item,
            IWeatherGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Weather.Mask<bool>(false);
            ((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IWeatherGetter item,
            IWeatherGetter rhs,
            Weather.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.CloudTextures = item.CloudTextures.CollectionEqualsHelper(
                rhs.CloudTextures,
                (l, r) => object.Equals(l, r),
                include);
            ret.DNAM = MemorySliceExt.SequenceEqual(item.DNAM, rhs.DNAM);
            ret.CNAM = MemorySliceExt.SequenceEqual(item.CNAM, rhs.CNAM);
            ret.ANAM = MemorySliceExt.SequenceEqual(item.ANAM, rhs.ANAM);
            ret.BNAM = MemorySliceExt.SequenceEqual(item.BNAM, rhs.BNAM);
            ret.LNAM = MemorySliceExt.SequenceEqual(item.LNAM, rhs.LNAM);
            ret.Precipitation = item.Precipitation.Equals(rhs.Precipitation);
            ret.VisualEffect = item.VisualEffect.Equals(rhs.VisualEffect);
            ret.ONAM = MemorySliceExt.SequenceEqual(item.ONAM, rhs.ONAM);
            ret.Clouds = item.Clouds.CollectionEqualsHelper(
                rhs.Clouds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SkyUpperColor = MaskItemExt.Factory(item.SkyUpperColor.GetEqualsMask(rhs.SkyUpperColor, include), include);
            ret.FogNearColor = MaskItemExt.Factory(item.FogNearColor.GetEqualsMask(rhs.FogNearColor, include), include);
            ret.UnknownColor = MaskItemExt.Factory(item.UnknownColor.GetEqualsMask(rhs.UnknownColor, include), include);
            ret.AmbientColor = MaskItemExt.Factory(item.AmbientColor.GetEqualsMask(rhs.AmbientColor, include), include);
            ret.SunlightColor = MaskItemExt.Factory(item.SunlightColor.GetEqualsMask(rhs.SunlightColor, include), include);
            ret.SunColor = MaskItemExt.Factory(item.SunColor.GetEqualsMask(rhs.SunColor, include), include);
            ret.StarsColor = MaskItemExt.Factory(item.StarsColor.GetEqualsMask(rhs.StarsColor, include), include);
            ret.SkyLowerColor = MaskItemExt.Factory(item.SkyLowerColor.GetEqualsMask(rhs.SkyLowerColor, include), include);
            ret.HorizonColor = MaskItemExt.Factory(item.HorizonColor.GetEqualsMask(rhs.HorizonColor, include), include);
            ret.EffectLightingColor = MaskItemExt.Factory(item.EffectLightingColor.GetEqualsMask(rhs.EffectLightingColor, include), include);
            ret.CloudLodDiffuseColor = MaskItemExt.Factory(item.CloudLodDiffuseColor.GetEqualsMask(rhs.CloudLodDiffuseColor, include), include);
            ret.CloudLodAmbientColor = MaskItemExt.Factory(item.CloudLodAmbientColor.GetEqualsMask(rhs.CloudLodAmbientColor, include), include);
            ret.FogFarColor = MaskItemExt.Factory(item.FogFarColor.GetEqualsMask(rhs.FogFarColor, include), include);
            ret.SkyStaticsColor = MaskItemExt.Factory(item.SkyStaticsColor.GetEqualsMask(rhs.SkyStaticsColor, include), include);
            ret.WaterMultiplierColor = MaskItemExt.Factory(item.WaterMultiplierColor.GetEqualsMask(rhs.WaterMultiplierColor, include), include);
            ret.SunGlareColor = MaskItemExt.Factory(item.SunGlareColor.GetEqualsMask(rhs.SunGlareColor, include), include);
            ret.MoonGlareColor = MaskItemExt.Factory(item.MoonGlareColor.GetEqualsMask(rhs.MoonGlareColor, include), include);
            ret.FogDistanceDayNear = item.FogDistanceDayNear.EqualsWithin(rhs.FogDistanceDayNear);
            ret.FogDistanceDayFar = item.FogDistanceDayFar.EqualsWithin(rhs.FogDistanceDayFar);
            ret.FogDistanceNightNear = item.FogDistanceNightNear.EqualsWithin(rhs.FogDistanceNightNear);
            ret.FogDistanceNightFar = item.FogDistanceNightFar.EqualsWithin(rhs.FogDistanceNightFar);
            ret.FogDistanceDayPower = item.FogDistanceDayPower.EqualsWithin(rhs.FogDistanceDayPower);
            ret.FogDistanceNightPower = item.FogDistanceNightPower.EqualsWithin(rhs.FogDistanceNightPower);
            ret.FogDistanceDayMax = item.FogDistanceDayMax.EqualsWithin(rhs.FogDistanceDayMax);
            ret.FogDistanceNightMax = item.FogDistanceNightMax.EqualsWithin(rhs.FogDistanceNightMax);
            ret.WindSpeed = item.WindSpeed.Equals(rhs.WindSpeed);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.TransDelta = item.TransDelta.EqualsWithin(rhs.TransDelta);
            ret.SunGlare = item.SunGlare.Equals(rhs.SunGlare);
            ret.SunDamage = item.SunDamage.Equals(rhs.SunDamage);
            ret.PrecipitationBeginFadeIn = item.PrecipitationBeginFadeIn.Equals(rhs.PrecipitationBeginFadeIn);
            ret.PrecipitationEndFadeOut = item.PrecipitationEndFadeOut.Equals(rhs.PrecipitationEndFadeOut);
            ret.ThunderLightningBeginFadeIn = item.ThunderLightningBeginFadeIn.Equals(rhs.ThunderLightningBeginFadeIn);
            ret.ThunderLightningEndFadeOut = item.ThunderLightningEndFadeOut.Equals(rhs.ThunderLightningEndFadeOut);
            ret.ThunderLightningFrequency = item.ThunderLightningFrequency.Equals(rhs.ThunderLightningFrequency);
            ret.Flags = item.Flags == rhs.Flags;
            ret.LightningColor = item.LightningColor.ColorOnlyEquals(rhs.LightningColor);
            ret.VisualEffectBegin = item.VisualEffectBegin.Equals(rhs.VisualEffectBegin);
            ret.VisualEffectEnd = item.VisualEffectEnd.Equals(rhs.VisualEffectEnd);
            ret.WindDirection = item.WindDirection.EqualsWithin(rhs.WindDirection);
            ret.WindDirectionRange = item.WindDirectionRange.EqualsWithin(rhs.WindDirectionRange);
            ret.Sounds = item.Sounds.CollectionEqualsHelper(
                rhs.Sounds,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SkyStatics = item.SkyStatics.CollectionEqualsHelper(
                rhs.SkyStatics,
                (l, r) => object.Equals(l, r),
                include);
            ret.ImageSpaces = EqualsMaskHelper.EqualsHelper(
                item.ImageSpaces,
                rhs.ImageSpaces,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.VolumetricLighting = EqualsMaskHelper.EqualsHelper(
                item.VolumetricLighting,
                rhs.VolumetricLighting,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DirectionalAmbientLightingColors = EqualsMaskHelper.EqualsHelper(
                item.DirectionalAmbientLightingColors,
                rhs.DirectionalAmbientLightingColors,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.NAM2 = MemorySliceExt.SequenceEqual(item.NAM2, rhs.NAM2);
            ret.NAM3 = MemorySliceExt.SequenceEqual(item.NAM3, rhs.NAM3);
            ret.Aurora = EqualsMaskHelper.EqualsHelper(
                item.Aurora,
                rhs.Aurora,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.SunGlareLensFlare = item.SunGlareLensFlare.Equals(rhs.SunGlareLensFlare);
            ret.NAM0DataTypeState = item.NAM0DataTypeState == rhs.NAM0DataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IWeatherGetter item,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IWeatherGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Weather.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Weather =>");
            }
            else
            {
                sb.AppendLine($"{name} (Weather) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IWeatherGetter item,
            StructuredStringBuilder sb,
            Weather.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.CloudTextures?.Overall ?? true)
            {
                sb.AppendLine("CloudTextures =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.CloudTextures)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if ((printMask?.DNAM ?? true)
                && item.DNAM is {} DNAMItem)
            {
                sb.AppendLine($"DNAM => {SpanExt.ToHexString(DNAMItem)}");
            }
            if ((printMask?.CNAM ?? true)
                && item.CNAM is {} CNAMItem)
            {
                sb.AppendLine($"CNAM => {SpanExt.ToHexString(CNAMItem)}");
            }
            if ((printMask?.ANAM ?? true)
                && item.ANAM is {} ANAMItem)
            {
                sb.AppendLine($"ANAM => {SpanExt.ToHexString(ANAMItem)}");
            }
            if ((printMask?.BNAM ?? true)
                && item.BNAM is {} BNAMItem)
            {
                sb.AppendLine($"BNAM => {SpanExt.ToHexString(BNAMItem)}");
            }
            if ((printMask?.LNAM ?? true)
                && item.LNAM is {} LNAMItem)
            {
                sb.AppendLine($"LNAM => {SpanExt.ToHexString(LNAMItem)}");
            }
            if (printMask?.Precipitation ?? true)
            {
                sb.AppendItem(item.Precipitation.FormKeyNullable, "Precipitation");
            }
            if (printMask?.VisualEffect ?? true)
            {
                sb.AppendItem(item.VisualEffect.FormKey, "VisualEffect");
            }
            if ((printMask?.ONAM ?? true)
                && item.ONAM is {} ONAMItem)
            {
                sb.AppendLine($"ONAM => {SpanExt.ToHexString(ONAMItem)}");
            }
            if (printMask?.Clouds?.Overall ?? true)
            {
                sb.AppendLine("Clouds =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Clouds)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.SkyUpperColor?.Overall ?? true)
            {
                item.SkyUpperColor?.Print(sb, "SkyUpperColor");
            }
            if (printMask?.FogNearColor?.Overall ?? true)
            {
                item.FogNearColor?.Print(sb, "FogNearColor");
            }
            if (printMask?.UnknownColor?.Overall ?? true)
            {
                item.UnknownColor?.Print(sb, "UnknownColor");
            }
            if (printMask?.AmbientColor?.Overall ?? true)
            {
                item.AmbientColor?.Print(sb, "AmbientColor");
            }
            if (printMask?.SunlightColor?.Overall ?? true)
            {
                item.SunlightColor?.Print(sb, "SunlightColor");
            }
            if (printMask?.SunColor?.Overall ?? true)
            {
                item.SunColor?.Print(sb, "SunColor");
            }
            if (printMask?.StarsColor?.Overall ?? true)
            {
                item.StarsColor?.Print(sb, "StarsColor");
            }
            if (printMask?.SkyLowerColor?.Overall ?? true)
            {
                item.SkyLowerColor?.Print(sb, "SkyLowerColor");
            }
            if (printMask?.HorizonColor?.Overall ?? true)
            {
                item.HorizonColor?.Print(sb, "HorizonColor");
            }
            if (printMask?.EffectLightingColor?.Overall ?? true)
            {
                item.EffectLightingColor?.Print(sb, "EffectLightingColor");
            }
            if (printMask?.CloudLodDiffuseColor?.Overall ?? true)
            {
                item.CloudLodDiffuseColor?.Print(sb, "CloudLodDiffuseColor");
            }
            if (printMask?.CloudLodAmbientColor?.Overall ?? true)
            {
                item.CloudLodAmbientColor?.Print(sb, "CloudLodAmbientColor");
            }
            if (printMask?.FogFarColor?.Overall ?? true)
            {
                item.FogFarColor?.Print(sb, "FogFarColor");
            }
            if (printMask?.SkyStaticsColor?.Overall ?? true)
            {
                item.SkyStaticsColor?.Print(sb, "SkyStaticsColor");
            }
            if (printMask?.WaterMultiplierColor?.Overall ?? true)
            {
                item.WaterMultiplierColor?.Print(sb, "WaterMultiplierColor");
            }
            if (printMask?.SunGlareColor?.Overall ?? true)
            {
                item.SunGlareColor?.Print(sb, "SunGlareColor");
            }
            if (printMask?.MoonGlareColor?.Overall ?? true)
            {
                item.MoonGlareColor?.Print(sb, "MoonGlareColor");
            }
            if (printMask?.FogDistanceDayNear ?? true)
            {
                sb.AppendItem(item.FogDistanceDayNear, "FogDistanceDayNear");
            }
            if (printMask?.FogDistanceDayFar ?? true)
            {
                sb.AppendItem(item.FogDistanceDayFar, "FogDistanceDayFar");
            }
            if (printMask?.FogDistanceNightNear ?? true)
            {
                sb.AppendItem(item.FogDistanceNightNear, "FogDistanceNightNear");
            }
            if (printMask?.FogDistanceNightFar ?? true)
            {
                sb.AppendItem(item.FogDistanceNightFar, "FogDistanceNightFar");
            }
            if (printMask?.FogDistanceDayPower ?? true)
            {
                sb.AppendItem(item.FogDistanceDayPower, "FogDistanceDayPower");
            }
            if (printMask?.FogDistanceNightPower ?? true)
            {
                sb.AppendItem(item.FogDistanceNightPower, "FogDistanceNightPower");
            }
            if (printMask?.FogDistanceDayMax ?? true)
            {
                sb.AppendItem(item.FogDistanceDayMax, "FogDistanceDayMax");
            }
            if (printMask?.FogDistanceNightMax ?? true)
            {
                sb.AppendItem(item.FogDistanceNightMax, "FogDistanceNightMax");
            }
            if (printMask?.WindSpeed ?? true)
            {
                sb.AppendItem(item.WindSpeed, "WindSpeed");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.TransDelta ?? true)
            {
                sb.AppendItem(item.TransDelta, "TransDelta");
            }
            if (printMask?.SunGlare ?? true)
            {
                sb.AppendItem(item.SunGlare, "SunGlare");
            }
            if (printMask?.SunDamage ?? true)
            {
                sb.AppendItem(item.SunDamage, "SunDamage");
            }
            if (printMask?.PrecipitationBeginFadeIn ?? true)
            {
                sb.AppendItem(item.PrecipitationBeginFadeIn, "PrecipitationBeginFadeIn");
            }
            if (printMask?.PrecipitationEndFadeOut ?? true)
            {
                sb.AppendItem(item.PrecipitationEndFadeOut, "PrecipitationEndFadeOut");
            }
            if (printMask?.ThunderLightningBeginFadeIn ?? true)
            {
                sb.AppendItem(item.ThunderLightningBeginFadeIn, "ThunderLightningBeginFadeIn");
            }
            if (printMask?.ThunderLightningEndFadeOut ?? true)
            {
                sb.AppendItem(item.ThunderLightningEndFadeOut, "ThunderLightningEndFadeOut");
            }
            if (printMask?.ThunderLightningFrequency ?? true)
            {
                sb.AppendItem(item.ThunderLightningFrequency, "ThunderLightningFrequency");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.LightningColor ?? true)
            {
                sb.AppendItem(item.LightningColor, "LightningColor");
            }
            if (printMask?.VisualEffectBegin ?? true)
            {
                sb.AppendItem(item.VisualEffectBegin, "VisualEffectBegin");
            }
            if (printMask?.VisualEffectEnd ?? true)
            {
                sb.AppendItem(item.VisualEffectEnd, "VisualEffectEnd");
            }
            if (printMask?.WindDirection ?? true)
            {
                sb.AppendItem(item.WindDirection, "WindDirection");
            }
            if (printMask?.WindDirectionRange ?? true)
            {
                sb.AppendItem(item.WindDirectionRange, "WindDirectionRange");
            }
            if (printMask?.Sounds?.Overall ?? true)
            {
                sb.AppendLine("Sounds =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Sounds)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.SkyStatics?.Overall ?? true)
            {
                sb.AppendLine("SkyStatics =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.SkyStatics)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.ImageSpaces?.Overall ?? true)
                && item.ImageSpaces is {} ImageSpacesItem)
            {
                ImageSpacesItem?.Print(sb, "ImageSpaces");
            }
            if ((printMask?.VolumetricLighting?.Overall ?? true)
                && item.VolumetricLighting is {} VolumetricLightingItem)
            {
                VolumetricLightingItem?.Print(sb, "VolumetricLighting");
            }
            if ((printMask?.DirectionalAmbientLightingColors?.Overall ?? true)
                && item.DirectionalAmbientLightingColors is {} DirectionalAmbientLightingColorsItem)
            {
                DirectionalAmbientLightingColorsItem?.Print(sb, "DirectionalAmbientLightingColors");
            }
            if ((printMask?.NAM2 ?? true)
                && item.NAM2 is {} NAM2Item)
            {
                sb.AppendLine($"NAM2 => {SpanExt.ToHexString(NAM2Item)}");
            }
            if ((printMask?.NAM3 ?? true)
                && item.NAM3 is {} NAM3Item)
            {
                sb.AppendLine($"NAM3 => {SpanExt.ToHexString(NAM3Item)}");
            }
            if ((printMask?.Aurora?.Overall ?? true)
                && item.Aurora is {} AuroraItem)
            {
                AuroraItem?.Print(sb, "Aurora");
            }
            if (printMask?.SunGlareLensFlare ?? true)
            {
                sb.AppendItem(item.SunGlareLensFlare.FormKeyNullable, "SunGlareLensFlare");
            }
            if (printMask?.NAM0DataTypeState ?? true)
            {
                sb.AppendItem(item.NAM0DataTypeState, "NAM0DataTypeState");
            }
        }
        
        public static Weather_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Weather_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Weather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Weather_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Weather_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Weather_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IWeatherGetter? lhs,
            IWeatherGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudTextures) ?? true))
            {
                if (!lhs.CloudTextures.SequenceEqualNullable(rhs.CloudTextures)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.DNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DNAM, rhs.DNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.CNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.CNAM, rhs.CNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.ANAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ANAM, rhs.ANAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.BNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.BNAM, rhs.BNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.LNAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.LNAM, rhs.LNAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.Precipitation) ?? true))
            {
                if (!lhs.Precipitation.Equals(rhs.Precipitation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffect) ?? true))
            {
                if (!lhs.VisualEffect.Equals(rhs.VisualEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.ONAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ONAM, rhs.ONAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.Clouds) ?? true))
            {
                if (!lhs.Clouds.SequenceEqual(rhs.Clouds, (l, r) => ((CloudLayerCommon)((ICloudLayerGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.Clouds)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyUpperColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SkyUpperColor, rhs.SkyUpperColor, out var lhsSkyUpperColor, out var rhsSkyUpperColor, out var isSkyUpperColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsSkyUpperColor).CommonInstance()!).Equals(lhsSkyUpperColor, rhsSkyUpperColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.SkyUpperColor))) return false;
                }
                else if (!isSkyUpperColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNearColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FogNearColor, rhs.FogNearColor, out var lhsFogNearColor, out var rhsFogNearColor, out var isFogNearColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsFogNearColor).CommonInstance()!).Equals(lhsFogNearColor, rhsFogNearColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.FogNearColor))) return false;
                }
                else if (!isFogNearColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.UnknownColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.UnknownColor, rhs.UnknownColor, out var lhsUnknownColor, out var rhsUnknownColor, out var isUnknownColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsUnknownColor).CommonInstance()!).Equals(lhsUnknownColor, rhsUnknownColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.UnknownColor))) return false;
                }
                else if (!isUnknownColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.AmbientColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AmbientColor, rhs.AmbientColor, out var lhsAmbientColor, out var rhsAmbientColor, out var isAmbientColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsAmbientColor).CommonInstance()!).Equals(lhsAmbientColor, rhsAmbientColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.AmbientColor))) return false;
                }
                else if (!isAmbientColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.SunlightColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SunlightColor, rhs.SunlightColor, out var lhsSunlightColor, out var rhsSunlightColor, out var isSunlightColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsSunlightColor).CommonInstance()!).Equals(lhsSunlightColor, rhsSunlightColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.SunlightColor))) return false;
                }
                else if (!isSunlightColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.SunColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SunColor, rhs.SunColor, out var lhsSunColor, out var rhsSunColor, out var isSunColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsSunColor).CommonInstance()!).Equals(lhsSunColor, rhsSunColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.SunColor))) return false;
                }
                else if (!isSunColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.StarsColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.StarsColor, rhs.StarsColor, out var lhsStarsColor, out var rhsStarsColor, out var isStarsColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsStarsColor).CommonInstance()!).Equals(lhsStarsColor, rhsStarsColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.StarsColor))) return false;
                }
                else if (!isStarsColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyLowerColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SkyLowerColor, rhs.SkyLowerColor, out var lhsSkyLowerColor, out var rhsSkyLowerColor, out var isSkyLowerColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsSkyLowerColor).CommonInstance()!).Equals(lhsSkyLowerColor, rhsSkyLowerColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.SkyLowerColor))) return false;
                }
                else if (!isSkyLowerColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.HorizonColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.HorizonColor, rhs.HorizonColor, out var lhsHorizonColor, out var rhsHorizonColor, out var isHorizonColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsHorizonColor).CommonInstance()!).Equals(lhsHorizonColor, rhsHorizonColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.HorizonColor))) return false;
                }
                else if (!isHorizonColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.EffectLightingColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EffectLightingColor, rhs.EffectLightingColor, out var lhsEffectLightingColor, out var rhsEffectLightingColor, out var isEffectLightingColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsEffectLightingColor).CommonInstance()!).Equals(lhsEffectLightingColor, rhsEffectLightingColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.EffectLightingColor))) return false;
                }
                else if (!isEffectLightingColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodDiffuseColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CloudLodDiffuseColor, rhs.CloudLodDiffuseColor, out var lhsCloudLodDiffuseColor, out var rhsCloudLodDiffuseColor, out var isCloudLodDiffuseColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsCloudLodDiffuseColor).CommonInstance()!).Equals(lhsCloudLodDiffuseColor, rhsCloudLodDiffuseColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.CloudLodDiffuseColor))) return false;
                }
                else if (!isCloudLodDiffuseColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodAmbientColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CloudLodAmbientColor, rhs.CloudLodAmbientColor, out var lhsCloudLodAmbientColor, out var rhsCloudLodAmbientColor, out var isCloudLodAmbientColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsCloudLodAmbientColor).CommonInstance()!).Equals(lhsCloudLodAmbientColor, rhsCloudLodAmbientColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.CloudLodAmbientColor))) return false;
                }
                else if (!isCloudLodAmbientColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.FogFarColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FogFarColor, rhs.FogFarColor, out var lhsFogFarColor, out var rhsFogFarColor, out var isFogFarColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsFogFarColor).CommonInstance()!).Equals(lhsFogFarColor, rhsFogFarColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.FogFarColor))) return false;
                }
                else if (!isFogFarColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyStaticsColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SkyStaticsColor, rhs.SkyStaticsColor, out var lhsSkyStaticsColor, out var rhsSkyStaticsColor, out var isSkyStaticsColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsSkyStaticsColor).CommonInstance()!).Equals(lhsSkyStaticsColor, rhsSkyStaticsColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.SkyStaticsColor))) return false;
                }
                else if (!isSkyStaticsColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.WaterMultiplierColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WaterMultiplierColor, rhs.WaterMultiplierColor, out var lhsWaterMultiplierColor, out var rhsWaterMultiplierColor, out var isWaterMultiplierColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsWaterMultiplierColor).CommonInstance()!).Equals(lhsWaterMultiplierColor, rhsWaterMultiplierColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.WaterMultiplierColor))) return false;
                }
                else if (!isWaterMultiplierColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlareColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.SunGlareColor, rhs.SunGlareColor, out var lhsSunGlareColor, out var rhsSunGlareColor, out var isSunGlareColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsSunGlareColor).CommonInstance()!).Equals(lhsSunGlareColor, rhsSunGlareColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.SunGlareColor))) return false;
                }
                else if (!isSunGlareColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.MoonGlareColor) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MoonGlareColor, rhs.MoonGlareColor, out var lhsMoonGlareColor, out var rhsMoonGlareColor, out var isMoonGlareColorEqual))
                {
                    if (!((WeatherColorCommon)((IWeatherColorGetter)lhsMoonGlareColor).CommonInstance()!).Equals(lhsMoonGlareColor, rhsMoonGlareColor, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.MoonGlareColor))) return false;
                }
                else if (!isMoonGlareColorEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayNear) ?? true))
            {
                if (!lhs.FogDistanceDayNear.EqualsWithin(rhs.FogDistanceDayNear)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayFar) ?? true))
            {
                if (!lhs.FogDistanceDayFar.EqualsWithin(rhs.FogDistanceDayFar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightNear) ?? true))
            {
                if (!lhs.FogDistanceNightNear.EqualsWithin(rhs.FogDistanceNightNear)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightFar) ?? true))
            {
                if (!lhs.FogDistanceNightFar.EqualsWithin(rhs.FogDistanceNightFar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayPower) ?? true))
            {
                if (!lhs.FogDistanceDayPower.EqualsWithin(rhs.FogDistanceDayPower)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightPower) ?? true))
            {
                if (!lhs.FogDistanceNightPower.EqualsWithin(rhs.FogDistanceNightPower)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayMax) ?? true))
            {
                if (!lhs.FogDistanceDayMax.EqualsWithin(rhs.FogDistanceDayMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightMax) ?? true))
            {
                if (!lhs.FogDistanceNightMax.EqualsWithin(rhs.FogDistanceNightMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.WindSpeed) ?? true))
            {
                if (!lhs.WindSpeed.Equals(rhs.WindSpeed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.TransDelta) ?? true))
            {
                if (!lhs.TransDelta.EqualsWithin(rhs.TransDelta)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlare) ?? true))
            {
                if (!lhs.SunGlare.Equals(rhs.SunGlare)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.SunDamage) ?? true))
            {
                if (!lhs.SunDamage.Equals(rhs.SunDamage)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationBeginFadeIn) ?? true))
            {
                if (!lhs.PrecipitationBeginFadeIn.Equals(rhs.PrecipitationBeginFadeIn)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationEndFadeOut) ?? true))
            {
                if (!lhs.PrecipitationEndFadeOut.Equals(rhs.PrecipitationEndFadeOut)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningBeginFadeIn) ?? true))
            {
                if (!lhs.ThunderLightningBeginFadeIn.Equals(rhs.ThunderLightningBeginFadeIn)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningEndFadeOut) ?? true))
            {
                if (!lhs.ThunderLightningEndFadeOut.Equals(rhs.ThunderLightningEndFadeOut)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningFrequency) ?? true))
            {
                if (!lhs.ThunderLightningFrequency.Equals(rhs.ThunderLightningFrequency)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.LightningColor) ?? true))
            {
                if (!lhs.LightningColor.ColorOnlyEquals(rhs.LightningColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffectBegin) ?? true))
            {
                if (!lhs.VisualEffectBegin.Equals(rhs.VisualEffectBegin)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffectEnd) ?? true))
            {
                if (!lhs.VisualEffectEnd.Equals(rhs.VisualEffectEnd)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.WindDirection) ?? true))
            {
                if (!lhs.WindDirection.EqualsWithin(rhs.WindDirection)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.WindDirectionRange) ?? true))
            {
                if (!lhs.WindDirectionRange.EqualsWithin(rhs.WindDirectionRange)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.Sounds) ?? true))
            {
                if (!lhs.Sounds.SequenceEqual(rhs.Sounds, (l, r) => ((WeatherSoundCommon)((IWeatherSoundGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.Sounds)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyStatics) ?? true))
            {
                if (!lhs.SkyStatics.SequenceEqualNullable(rhs.SkyStatics)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.ImageSpaces) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ImageSpaces, rhs.ImageSpaces, out var lhsImageSpaces, out var rhsImageSpaces, out var isImageSpacesEqual))
                {
                    if (!((WeatherImageSpacesCommon)((IWeatherImageSpacesGetter)lhsImageSpaces).CommonInstance()!).Equals(lhsImageSpaces, rhsImageSpaces, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.ImageSpaces))) return false;
                }
                else if (!isImageSpacesEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.VolumetricLighting) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VolumetricLighting, rhs.VolumetricLighting, out var lhsVolumetricLighting, out var rhsVolumetricLighting, out var isVolumetricLightingEqual))
                {
                    if (!((WeatherVolumetricLightingCommon)((IWeatherVolumetricLightingGetter)lhsVolumetricLighting).CommonInstance()!).Equals(lhsVolumetricLighting, rhsVolumetricLighting, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.VolumetricLighting))) return false;
                }
                else if (!isVolumetricLightingEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.DirectionalAmbientLightingColors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DirectionalAmbientLightingColors, rhs.DirectionalAmbientLightingColors, out var lhsDirectionalAmbientLightingColors, out var rhsDirectionalAmbientLightingColors, out var isDirectionalAmbientLightingColorsEqual))
                {
                    if (!((WeatherAmbientColorSetCommon)((IWeatherAmbientColorSetGetter)lhsDirectionalAmbientLightingColors).CommonInstance()!).Equals(lhsDirectionalAmbientLightingColors, rhsDirectionalAmbientLightingColors, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.DirectionalAmbientLightingColors))) return false;
                }
                else if (!isDirectionalAmbientLightingColorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM2) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NAM2, rhs.NAM2)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM3) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.NAM3, rhs.NAM3)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.Aurora) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Aurora, rhs.Aurora, out var lhsAurora, out var rhsAurora, out var isAuroraEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsAurora).CommonInstance()!).Equals(lhsAurora, rhsAurora, equalsMask?.GetSubCrystal((int)Weather_FieldIndex.Aurora))) return false;
                }
                else if (!isAuroraEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlareLensFlare) ?? true))
            {
                if (!lhs.SunGlareLensFlare.Equals(rhs.SunGlareLensFlare)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM0DataTypeState) ?? true))
            {
                if (lhs.NAM0DataTypeState != rhs.NAM0DataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWeatherGetter?)lhs,
                rhs: rhs as IWeatherGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IWeatherGetter?)lhs,
                rhs: rhs as IWeatherGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IWeatherGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.CloudTextures);
            if (item.DNAM is {} DNAMItem)
            {
                hash.Add(DNAMItem);
            }
            if (item.CNAM is {} CNAMItem)
            {
                hash.Add(CNAMItem);
            }
            if (item.ANAM is {} ANAMItem)
            {
                hash.Add(ANAMItem);
            }
            if (item.BNAM is {} BNAMItem)
            {
                hash.Add(BNAMItem);
            }
            if (item.LNAM is {} LNAMItem)
            {
                hash.Add(LNAMItem);
            }
            hash.Add(item.Precipitation);
            hash.Add(item.VisualEffect);
            if (item.ONAM is {} ONAMItem)
            {
                hash.Add(ONAMItem);
            }
            hash.Add(item.Clouds);
            hash.Add(item.SkyUpperColor);
            hash.Add(item.FogNearColor);
            hash.Add(item.UnknownColor);
            hash.Add(item.AmbientColor);
            hash.Add(item.SunlightColor);
            hash.Add(item.SunColor);
            hash.Add(item.StarsColor);
            hash.Add(item.SkyLowerColor);
            hash.Add(item.HorizonColor);
            hash.Add(item.EffectLightingColor);
            hash.Add(item.CloudLodDiffuseColor);
            hash.Add(item.CloudLodAmbientColor);
            hash.Add(item.FogFarColor);
            hash.Add(item.SkyStaticsColor);
            hash.Add(item.WaterMultiplierColor);
            hash.Add(item.SunGlareColor);
            hash.Add(item.MoonGlareColor);
            hash.Add(item.FogDistanceDayNear);
            hash.Add(item.FogDistanceDayFar);
            hash.Add(item.FogDistanceNightNear);
            hash.Add(item.FogDistanceNightFar);
            hash.Add(item.FogDistanceDayPower);
            hash.Add(item.FogDistanceNightPower);
            hash.Add(item.FogDistanceDayMax);
            hash.Add(item.FogDistanceNightMax);
            hash.Add(item.WindSpeed);
            hash.Add(item.Unknown);
            hash.Add(item.TransDelta);
            hash.Add(item.SunGlare);
            hash.Add(item.SunDamage);
            hash.Add(item.PrecipitationBeginFadeIn);
            hash.Add(item.PrecipitationEndFadeOut);
            hash.Add(item.ThunderLightningBeginFadeIn);
            hash.Add(item.ThunderLightningEndFadeOut);
            hash.Add(item.ThunderLightningFrequency);
            hash.Add(item.Flags);
            hash.Add(item.LightningColor);
            hash.Add(item.VisualEffectBegin);
            hash.Add(item.VisualEffectEnd);
            hash.Add(item.WindDirection);
            hash.Add(item.WindDirectionRange);
            hash.Add(item.Sounds);
            hash.Add(item.SkyStatics);
            if (item.ImageSpaces is {} ImageSpacesitem)
            {
                hash.Add(ImageSpacesitem);
            }
            if (item.VolumetricLighting is {} VolumetricLightingitem)
            {
                hash.Add(VolumetricLightingitem);
            }
            if (item.DirectionalAmbientLightingColors is {} DirectionalAmbientLightingColorsitem)
            {
                hash.Add(DirectionalAmbientLightingColorsitem);
            }
            if (item.NAM2 is {} NAM2Item)
            {
                hash.Add(NAM2Item);
            }
            if (item.NAM3 is {} NAM3Item)
            {
                hash.Add(NAM3Item);
            }
            if (item.Aurora is {} Auroraitem)
            {
                hash.Add(Auroraitem);
            }
            hash.Add(item.SunGlareLensFlare);
            hash.Add(item.NAM0DataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeatherGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IWeatherGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Weather.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IWeatherGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Precipitation, out var PrecipitationInfo))
            {
                yield return PrecipitationInfo;
            }
            yield return FormLinkInformation.Factory(obj.VisualEffect);
            foreach (var item in obj.Sounds.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.SkyStatics)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.ImageSpaces is {} ImageSpacesItems)
            {
                foreach (var item in ImageSpacesItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.VolumetricLighting is {} VolumetricLightingItems)
            {
                foreach (var item in VolumetricLightingItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Aurora is {} AuroraItems)
            {
                foreach (var item in AuroraItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.SunGlareLensFlare, out var SunGlareLensFlareInfo))
            {
                yield return SunGlareLensFlareInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IWeatherGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                foreach (var item in obj.CloudTextures.WhereNotNull())
                {
                    yield return item;
                }
            }
            if (obj.Aurora is {} AuroraItems)
            {
                foreach (var item in AuroraItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Weather Duplicate(
            IWeatherGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Weather(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWeatherGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IWeatherGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class WeatherSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly WeatherSetterTranslationCommon Instance = new WeatherSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IWeatherInternal item,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IWeather item,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudTextures) ?? true))
            {
                item.CloudTextures.SetTo(rhs.CloudTextures.Select(x => x?.AsSetter()));
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.DNAM) ?? true))
            {
                if(rhs.DNAM is {} DNAMrhs)
                {
                    item.DNAM = DNAMrhs.ToArray();
                }
                else
                {
                    item.DNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CNAM) ?? true))
            {
                if(rhs.CNAM is {} CNAMrhs)
                {
                    item.CNAM = CNAMrhs.ToArray();
                }
                else
                {
                    item.CNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ANAM) ?? true))
            {
                if(rhs.ANAM is {} ANAMrhs)
                {
                    item.ANAM = ANAMrhs.ToArray();
                }
                else
                {
                    item.ANAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.BNAM) ?? true))
            {
                if(rhs.BNAM is {} BNAMrhs)
                {
                    item.BNAM = BNAMrhs.ToArray();
                }
                else
                {
                    item.BNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.LNAM) ?? true))
            {
                if(rhs.LNAM is {} LNAMrhs)
                {
                    item.LNAM = LNAMrhs.ToArray();
                }
                else
                {
                    item.LNAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Precipitation) ?? true))
            {
                item.Precipitation.SetTo(rhs.Precipitation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffect) ?? true))
            {
                item.VisualEffect.SetTo(rhs.VisualEffect.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ONAM) ?? true))
            {
                if(rhs.ONAM is {} ONAMrhs)
                {
                    item.ONAM = ONAMrhs.ToArray();
                }
                else
                {
                    item.ONAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Clouds) ?? true))
            {
                item.Clouds.SetTo(
                    rhs.Clouds
                    .Select(r =>
                    {
                        return r.DeepCopy(
                            errorMask: errorMask,
                            default(TranslationCrystal));
                    }));
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyUpperColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SkyUpperColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyUpperColor) ?? true))
                    {
                        item.SkyUpperColor = rhs.SkyUpperColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SkyUpperColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNearColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.FogNearColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogNearColor) ?? true))
                    {
                        item.FogNearColor = rhs.FogNearColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.FogNearColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.UnknownColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.UnknownColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.UnknownColor) ?? true))
                    {
                        item.UnknownColor = rhs.UnknownColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.UnknownColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.AmbientColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.AmbientColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.AmbientColor) ?? true))
                    {
                        item.AmbientColor = rhs.AmbientColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.AmbientColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunlightColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SunlightColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunlightColor) ?? true))
                    {
                        item.SunlightColor = rhs.SunlightColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SunlightColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SunColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunColor) ?? true))
                    {
                        item.SunColor = rhs.SunColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SunColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.StarsColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.StarsColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.StarsColor) ?? true))
                    {
                        item.StarsColor = rhs.StarsColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.StarsColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyLowerColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SkyLowerColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyLowerColor) ?? true))
                    {
                        item.SkyLowerColor = rhs.SkyLowerColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SkyLowerColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HorizonColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.HorizonColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.HorizonColor) ?? true))
                    {
                        item.HorizonColor = rhs.HorizonColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.HorizonColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.EffectLightingColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.EffectLightingColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.EffectLightingColor) ?? true))
                    {
                        item.EffectLightingColor = rhs.EffectLightingColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.EffectLightingColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodDiffuseColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.CloudLodDiffuseColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodDiffuseColor) ?? true))
                    {
                        item.CloudLodDiffuseColor = rhs.CloudLodDiffuseColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.CloudLodDiffuseColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodAmbientColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.CloudLodAmbientColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.CloudLodAmbientColor) ?? true))
                    {
                        item.CloudLodAmbientColor = rhs.CloudLodAmbientColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.CloudLodAmbientColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogFarColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.FogFarColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogFarColor) ?? true))
                    {
                        item.FogFarColor = rhs.FogFarColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.FogFarColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyStaticsColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SkyStaticsColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyStaticsColor) ?? true))
                    {
                        item.SkyStaticsColor = rhs.SkyStaticsColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SkyStaticsColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WaterMultiplierColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.WaterMultiplierColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WaterMultiplierColor) ?? true))
                    {
                        item.WaterMultiplierColor = rhs.WaterMultiplierColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.WaterMultiplierColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlareColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SunGlareColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlareColor) ?? true))
                    {
                        item.SunGlareColor = rhs.SunGlareColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.SunGlareColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.MoonGlareColor) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.MoonGlareColor);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.MoonGlareColor) ?? true))
                    {
                        item.MoonGlareColor = rhs.MoonGlareColor.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Weather_FieldIndex.MoonGlareColor),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayNear) ?? true))
            {
                item.FogDistanceDayNear = rhs.FogDistanceDayNear;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayFar) ?? true))
            {
                item.FogDistanceDayFar = rhs.FogDistanceDayFar;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightNear) ?? true))
            {
                item.FogDistanceNightNear = rhs.FogDistanceNightNear;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightFar) ?? true))
            {
                item.FogDistanceNightFar = rhs.FogDistanceNightFar;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayPower) ?? true))
            {
                item.FogDistanceDayPower = rhs.FogDistanceDayPower;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightPower) ?? true))
            {
                item.FogDistanceNightPower = rhs.FogDistanceNightPower;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceDayMax) ?? true))
            {
                item.FogDistanceDayMax = rhs.FogDistanceDayMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.FogDistanceNightMax) ?? true))
            {
                item.FogDistanceNightMax = rhs.FogDistanceNightMax;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WindSpeed) ?? true))
            {
                item.WindSpeed = rhs.WindSpeed;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.TransDelta) ?? true))
            {
                item.TransDelta = rhs.TransDelta;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlare) ?? true))
            {
                item.SunGlare = rhs.SunGlare;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunDamage) ?? true))
            {
                item.SunDamage = rhs.SunDamage;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationBeginFadeIn) ?? true))
            {
                item.PrecipitationBeginFadeIn = rhs.PrecipitationBeginFadeIn;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.PrecipitationEndFadeOut) ?? true))
            {
                item.PrecipitationEndFadeOut = rhs.PrecipitationEndFadeOut;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningBeginFadeIn) ?? true))
            {
                item.ThunderLightningBeginFadeIn = rhs.ThunderLightningBeginFadeIn;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningEndFadeOut) ?? true))
            {
                item.ThunderLightningEndFadeOut = rhs.ThunderLightningEndFadeOut;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ThunderLightningFrequency) ?? true))
            {
                item.ThunderLightningFrequency = rhs.ThunderLightningFrequency;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.LightningColor) ?? true))
            {
                item.LightningColor = rhs.LightningColor;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffectBegin) ?? true))
            {
                item.VisualEffectBegin = rhs.VisualEffectBegin;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.VisualEffectEnd) ?? true))
            {
                item.VisualEffectEnd = rhs.VisualEffectEnd;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WindDirection) ?? true))
            {
                item.WindDirection = rhs.WindDirection;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.WindDirectionRange) ?? true))
            {
                item.WindDirectionRange = rhs.WindDirectionRange;
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Sounds) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.Sounds);
                try
                {
                    item.Sounds.SetTo(
                        rhs.Sounds
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SkyStatics) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.SkyStatics);
                try
                {
                    item.SkyStatics.SetTo(
                        rhs.SkyStatics
                            .Select(b => (IFormLinkGetter<IStaticGetter>)new FormLink<IStaticGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.ImageSpaces) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.ImageSpaces);
                try
                {
                    if(rhs.ImageSpaces is {} rhsImageSpaces)
                    {
                        item.ImageSpaces = rhsImageSpaces.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.ImageSpaces));
                    }
                    else
                    {
                        item.ImageSpaces = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.VolumetricLighting) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.VolumetricLighting);
                try
                {
                    if(rhs.VolumetricLighting is {} rhsVolumetricLighting)
                    {
                        item.VolumetricLighting = rhsVolumetricLighting.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.VolumetricLighting));
                    }
                    else
                    {
                        item.VolumetricLighting = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.DirectionalAmbientLightingColors) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.DirectionalAmbientLightingColors);
                try
                {
                    if(rhs.DirectionalAmbientLightingColors is {} rhsDirectionalAmbientLightingColors)
                    {
                        item.DirectionalAmbientLightingColors = rhsDirectionalAmbientLightingColors.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.DirectionalAmbientLightingColors));
                    }
                    else
                    {
                        item.DirectionalAmbientLightingColors = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM2) ?? true))
            {
                if(rhs.NAM2 is {} NAM2rhs)
                {
                    item.NAM2 = NAM2rhs.ToArray();
                }
                else
                {
                    item.NAM2 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM3) ?? true))
            {
                if(rhs.NAM3 is {} NAM3rhs)
                {
                    item.NAM3 = NAM3rhs.ToArray();
                }
                else
                {
                    item.NAM3 = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.Aurora) ?? true))
            {
                errorMask?.PushIndex((int)Weather_FieldIndex.Aurora);
                try
                {
                    if(rhs.Aurora is {} rhsAurora)
                    {
                        item.Aurora = rhsAurora.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Weather_FieldIndex.Aurora));
                    }
                    else
                    {
                        item.Aurora = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.SunGlareLensFlare) ?? true))
            {
                item.SunGlareLensFlare.SetTo(rhs.SunGlareLensFlare.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Weather_FieldIndex.NAM0DataTypeState) ?? true))
            {
                item.NAM0DataTypeState = rhs.NAM0DataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IWeather item,
            IWeatherGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeatherInternal)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeather)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeatherInternal)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IWeather)item,
                rhs: (IWeatherGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Weather DeepCopy(
            IWeatherGetter item,
            Weather.TranslationMask? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ((WeatherSetterTranslationCommon)((IWeatherGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Weather DeepCopy(
            IWeatherGetter item,
            out Weather.ErrorMask errorMask,
            Weather.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ((WeatherSetterTranslationCommon)((IWeatherGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Weather.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Weather DeepCopy(
            IWeatherGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Weather ret = (Weather)((WeatherCommon)((IWeatherGetter)item).CommonInstance()!).GetNew();
            ((WeatherSetterTranslationCommon)((IWeatherGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Weather
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weather_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Weather_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeatherCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return WeatherSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeatherSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class WeatherBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly WeatherBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IWeatherGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IWeatherGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            WeatherBinaryWriteTranslation.WriteBinaryCloudTexturesParse(
                writer: writer,
                item: item);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DNAM,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.CNAM,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ANAM,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.BNAM,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.LNAM,
                header: translationParams.ConvertToCustom(RecordTypes.LNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Precipitation,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VisualEffect,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ONAM,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            WeatherBinaryWriteTranslation.WriteBinaryClouds(
                writer: writer,
                item: item);
            WeatherBinaryWriteTranslation.WriteBinaryCloudXSpeeds(
                writer: writer,
                item: item);
            WeatherBinaryWriteTranslation.WriteBinaryCloudColors(
                writer: writer,
                item: item);
            WeatherBinaryWriteTranslation.WriteBinaryCloudAlphas(
                writer: writer,
                item: item);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.NAM0)))
            {
                var SkyUpperColorItem = item.SkyUpperColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SkyUpperColorItem).BinaryWriteTranslator).Write(
                    item: SkyUpperColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var FogNearColorItem = item.FogNearColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)FogNearColorItem).BinaryWriteTranslator).Write(
                    item: FogNearColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var UnknownColorItem = item.UnknownColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)UnknownColorItem).BinaryWriteTranslator).Write(
                    item: UnknownColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var AmbientColorItem = item.AmbientColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)AmbientColorItem).BinaryWriteTranslator).Write(
                    item: AmbientColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var SunlightColorItem = item.SunlightColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SunlightColorItem).BinaryWriteTranslator).Write(
                    item: SunlightColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var SunColorItem = item.SunColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SunColorItem).BinaryWriteTranslator).Write(
                    item: SunColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var StarsColorItem = item.StarsColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)StarsColorItem).BinaryWriteTranslator).Write(
                    item: StarsColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var SkyLowerColorItem = item.SkyLowerColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SkyLowerColorItem).BinaryWriteTranslator).Write(
                    item: SkyLowerColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var HorizonColorItem = item.HorizonColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)HorizonColorItem).BinaryWriteTranslator).Write(
                    item: HorizonColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var EffectLightingColorItem = item.EffectLightingColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)EffectLightingColorItem).BinaryWriteTranslator).Write(
                    item: EffectLightingColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var CloudLodDiffuseColorItem = item.CloudLodDiffuseColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)CloudLodDiffuseColorItem).BinaryWriteTranslator).Write(
                    item: CloudLodDiffuseColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var CloudLodAmbientColorItem = item.CloudLodAmbientColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)CloudLodAmbientColorItem).BinaryWriteTranslator).Write(
                    item: CloudLodAmbientColorItem,
                    writer: writer,
                    translationParams: translationParams);
                var FogFarColorItem = item.FogFarColor;
                ((WeatherColorBinaryWriteTranslation)((IBinaryItem)FogFarColorItem).BinaryWriteTranslator).Write(
                    item: FogFarColorItem,
                    writer: writer,
                    translationParams: translationParams);
                if (!item.NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break0))
                {
                    var SkyStaticsColorItem = item.SkyStaticsColor;
                    ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SkyStaticsColorItem).BinaryWriteTranslator).Write(
                        item: SkyStaticsColorItem,
                        writer: writer,
                        translationParams: translationParams);
                    if (!item.NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break1))
                    {
                        var WaterMultiplierColorItem = item.WaterMultiplierColor;
                        ((WeatherColorBinaryWriteTranslation)((IBinaryItem)WaterMultiplierColorItem).BinaryWriteTranslator).Write(
                            item: WaterMultiplierColorItem,
                            writer: writer,
                            translationParams: translationParams);
                        var SunGlareColorItem = item.SunGlareColor;
                        ((WeatherColorBinaryWriteTranslation)((IBinaryItem)SunGlareColorItem).BinaryWriteTranslator).Write(
                            item: SunGlareColorItem,
                            writer: writer,
                            translationParams: translationParams);
                        var MoonGlareColorItem = item.MoonGlareColor;
                        ((WeatherColorBinaryWriteTranslation)((IBinaryItem)MoonGlareColorItem).BinaryWriteTranslator).Write(
                            item: MoonGlareColorItem,
                            writer: writer,
                            translationParams: translationParams);
                    }
                }
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.FNAM)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceDayNear);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceDayFar);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceNightNear);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceNightFar);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceDayPower);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceNightPower);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceDayMax);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogDistanceNightMax);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.WindSpeed,
                    integerType: FloatIntegerType.Byte);
                writer.Write(item.Unknown);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TransDelta,
                    integerType: FloatIntegerType.Byte,
                    multiplier: null,
                    divisor: 4f);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SunGlare,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.SunDamage,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.PrecipitationBeginFadeIn,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.PrecipitationEndFadeOut,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.ThunderLightningBeginFadeIn,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.ThunderLightningEndFadeOut,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.ThunderLightningFrequency,
                    integerType: FloatIntegerType.Byte);
                EnumBinaryTranslation<Weather.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.LightningColor,
                    binaryType: ColorBinaryType.NoAlpha);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.VisualEffectBegin,
                    integerType: FloatIntegerType.Byte);
                PercentBinaryTranslation.Write(
                    writer: writer,
                    item: item.VisualEffectEnd,
                    integerType: FloatIntegerType.Byte);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WindDirection,
                    integerType: FloatIntegerType.Byte,
                    multiplier: 360f,
                    divisor: null);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.WindDirectionRange,
                    integerType: FloatIntegerType.Byte,
                    multiplier: 180f,
                    divisor: null);
            }
            WeatherBinaryWriteTranslation.WriteBinaryDisabledCloudLayers(
                writer: writer,
                item: item);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IWeatherSoundGetter>.Instance.Write(
                writer: writer,
                items: item.Sounds,
                transl: (MutagenWriter subWriter, IWeatherSoundGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((WeatherSoundBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IStaticGetter>>.Instance.Write(
                writer: writer,
                items: item.SkyStatics,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IStaticGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.TNAM));
                });
            if (item.ImageSpaces is {} ImageSpacesItem)
            {
                ((WeatherImageSpacesBinaryWriteTranslation)((IBinaryItem)ImageSpacesItem).BinaryWriteTranslator).Write(
                    item: ImageSpacesItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (writer.MetaData.FormVersion!.Value >= 43)
            {
                if (item.VolumetricLighting is {} VolumetricLightingItem)
                {
                    ((WeatherVolumetricLightingBinaryWriteTranslation)((IBinaryItem)VolumetricLightingItem).BinaryWriteTranslator).Write(
                        item: VolumetricLightingItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            WeatherBinaryWriteTranslation.WriteBinaryDirectionalAmbientLightingColors(
                writer: writer,
                item: item);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NAM2,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NAM3,
                header: translationParams.ConvertToCustom(RecordTypes.NAM3));
            if (item.Aurora is {} AuroraItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)AuroraItem).BinaryWriteTranslator).Write(
                    item: AuroraItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (writer.MetaData.FormVersion!.Value >= 44)
            {
                FormLinkBinaryTranslation.Instance.WriteNullable(
                    writer: writer,
                    item: item.SunGlareLensFlare,
                    header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            }
        }

        public static partial void WriteBinaryCloudTexturesParseCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryCloudTexturesParse(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryCloudTexturesParseCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryCloudsCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryClouds(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryCloudsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryCloudXSpeedsCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryCloudXSpeeds(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryCloudXSpeedsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryCloudColorsCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryCloudColors(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryCloudColorsCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryCloudAlphasCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryCloudAlphas(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryCloudAlphasCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryDisabledCloudLayersCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryDisabledCloudLayers(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryDisabledCloudLayersCustom(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryDirectionalAmbientLightingColorsCustom(
            MutagenWriter writer,
            IWeatherGetter item);

        public static void WriteBinaryDirectionalAmbientLightingColors(
            MutagenWriter writer,
            IWeatherGetter item)
        {
            WriteBinaryDirectionalAmbientLightingColorsCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IWeatherGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.WTHR,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IWeatherGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWeatherGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IWeatherGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class WeatherBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly WeatherBinaryCreateTranslation Instance = new WeatherBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.WTHR;
        public static void FillBinaryStructs(
            IWeatherInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IWeatherInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.DNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.CNAM;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ANAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.ANAM;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.BNAM;
                }
                case RecordTypeInts.LNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LNAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.LNAM;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Precipitation.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weather_FieldIndex.Precipitation;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VisualEffect.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Weather_FieldIndex.VisualEffect;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ONAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.ONAM;
                }
                case RecordTypeInts.RNAM:
                {
                    WeatherBinaryCreateTranslation.FillBinaryCloudsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Weather_FieldIndex.Clouds;
                }
                case RecordTypeInts.QNAM:
                {
                    return WeatherBinaryCreateTranslation.FillBinaryCloudXSpeedsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.PNAM:
                {
                    return WeatherBinaryCreateTranslation.FillBinaryCloudColorsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.JNAM:
                {
                    return WeatherBinaryCreateTranslation.FillBinaryCloudAlphasCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.NAM0:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Complete) return null;
                    item.SkyUpperColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.FogNearColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.UnknownColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.AmbientColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SunlightColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SunColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.StarsColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SkyLowerColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.HorizonColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.EffectLightingColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.CloudLodDiffuseColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.CloudLodAmbientColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.FogFarColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.NAM0DataTypeState |= Weather.NAM0DataType.Break0;
                        return (int)Weather_FieldIndex.FogFarColor;
                    }
                    if (dataFrame.Complete) return null;
                    item.SkyStaticsColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.NAM0DataTypeState |= Weather.NAM0DataType.Break1;
                        return (int)Weather_FieldIndex.SkyStaticsColor;
                    }
                    if (dataFrame.Complete) return null;
                    item.WaterMultiplierColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.SunGlareColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.MoonGlareColor = Mutagen.Bethesda.Skyrim.WeatherColor.CreateFromBinary(frame: dataFrame);
                    return (int)Weather_FieldIndex.MoonGlareColor;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogDistanceDayNear = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogDistanceDayFar = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogDistanceNightNear = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogDistanceNightFar = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogDistanceDayPower = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogDistanceNightPower = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogDistanceDayMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogDistanceNightMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Weather_FieldIndex.FogDistanceNightMax;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.WindSpeed = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 2) return null;
                    item.Unknown = dataFrame.ReadUInt16();
                    if (dataFrame.Remaining < 1) return null;
                    item.TransDelta = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte,
                        multiplier: 4f,
                        divisor: null);
                    if (dataFrame.Remaining < 1) return null;
                    item.SunGlare = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.SunDamage = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.PrecipitationBeginFadeIn = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.PrecipitationEndFadeOut = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.ThunderLightningBeginFadeIn = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.ThunderLightningEndFadeOut = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.ThunderLightningFrequency = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.Flags = EnumBinaryTranslation<Weather.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 3) return null;
                    item.LightningColor = dataFrame.ReadColor(ColorBinaryType.NoAlpha);
                    if (dataFrame.Remaining < 1) return null;
                    item.VisualEffectBegin = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.VisualEffectEnd = PercentBinaryTranslation.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte);
                    if (dataFrame.Remaining < 1) return null;
                    item.WindDirection = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte,
                        multiplier: null,
                        divisor: 360f);
                    if (dataFrame.Remaining < 1) return null;
                    item.WindDirectionRange = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.Byte,
                        multiplier: null,
                        divisor: 180f);
                    return (int)Weather_FieldIndex.WindDirectionRange;
                }
                case RecordTypeInts.NAM1:
                {
                    return WeatherBinaryCreateTranslation.FillBinaryDisabledCloudLayersCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.SNAM:
                {
                    item.Sounds.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<WeatherSound>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: WeatherSound_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: WeatherSound.TryCreateFromBinary));
                    return (int)Weather_FieldIndex.Sounds;
                }
                case RecordTypeInts.TNAM:
                {
                    item.SkyStatics.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IStaticGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.TNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Weather_FieldIndex.SkyStatics;
                }
                case RecordTypeInts.IMSP:
                {
                    item.ImageSpaces = Mutagen.Bethesda.Skyrim.WeatherImageSpaces.CreateFromBinary(frame: frame);
                    return (int)Weather_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.HNAM:
                {
                    if (frame.MetaData.FormVersion!.Value >= 43)
                    {
                        item.VolumetricLighting = Mutagen.Bethesda.Skyrim.WeatherVolumetricLighting.CreateFromBinary(frame: frame);
                    }
                    return (int)Weather_FieldIndex.VolumetricLighting;
                }
                case RecordTypeInts.DALC:
                {
                    WeatherBinaryCreateTranslation.FillBinaryDirectionalAmbientLightingColorsCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Weather_FieldIndex.DirectionalAmbientLightingColors;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM2 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM3 = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Weather_FieldIndex.NAM3;
                }
                case RecordTypeInts.MODL:
                {
                    item.Aurora = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Weather_FieldIndex.Aurora;
                }
                case RecordTypeInts.GNAM:
                {
                    if (frame.MetaData.FormVersion!.Value >= 44)
                    {
                        frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                        item.SunGlareLensFlare.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    }
                    return (int)Weather_FieldIndex.SunGlareLensFlare;
                }
                default:
                    return CustomRecordFallback(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams);
            }
        }

        public static partial void FillBinaryCloudTexturesParseCustom(
            MutagenFrame frame,
            IWeatherInternal item);

        public static partial void FillBinaryCloudsCustom(
            MutagenFrame frame,
            IWeatherInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryCloudXSpeedsCustom(
            MutagenFrame frame,
            IWeatherInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryCloudColorsCustom(
            MutagenFrame frame,
            IWeatherInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryCloudAlphasCustom(
            MutagenFrame frame,
            IWeatherInternal item,
            PreviousParse lastParsed);

        public static partial ParseResult FillBinaryDisabledCloudLayersCustom(
            MutagenFrame frame,
            IWeatherInternal item,
            PreviousParse lastParsed);

        public static partial void FillBinaryDirectionalAmbientLightingColorsCustom(
            MutagenFrame frame,
            IWeatherInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class WeatherBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class WeatherBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IWeatherGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Weather_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Weather_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => WeatherCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => WeatherSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => WeatherCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => WeatherCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => WeatherBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((WeatherBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IWeather);


        #region CloudTexturesParse
        partial void CloudTexturesParseCustomParse(
            OverlayStream stream,
            int offset);
        protected int CloudTexturesParseEndingPos;
        #endregion
        #region DNAM
        private int? _DNAMLocation;
        public ReadOnlyMemorySlice<Byte>? DNAM => _DNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region CNAM
        private int? _CNAMLocation;
        public ReadOnlyMemorySlice<Byte>? CNAM => _CNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _CNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region ANAM
        private int? _ANAMLocation;
        public ReadOnlyMemorySlice<Byte>? ANAM => _ANAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ANAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region BNAM
        private int? _BNAMLocation;
        public ReadOnlyMemorySlice<Byte>? BNAM => _BNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _BNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region LNAM
        private int? _LNAMLocation;
        public ReadOnlyMemorySlice<Byte>? LNAM => _LNAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _LNAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Precipitation
        private int? _PrecipitationLocation;
        public IFormLinkNullableGetter<IShaderParticleGeometryGetter> Precipitation => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IShaderParticleGeometryGetter>(_package, _recordData, _PrecipitationLocation);
        #endregion
        #region VisualEffect
        private int? _VisualEffectLocation;
        public IFormLinkGetter<IVisualEffectGetter> VisualEffect => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IVisualEffectGetter>(_package, _recordData, _VisualEffectLocation);
        #endregion
        #region ONAM
        private int? _ONAMLocation;
        public ReadOnlyMemorySlice<Byte>? ONAM => _ONAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ONAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Clouds
        partial void CloudsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed);
        #endregion
        #region CloudXSpeeds
        public partial ParseResult CloudXSpeedsCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region CloudColors
        public partial ParseResult CloudColorsCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region CloudAlphas
        public partial ParseResult CloudAlphasCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        private RangeInt32? _NAM0Location;
        public Weather.NAM0DataType NAM0DataTypeState { get; private set; }
        #region SkyUpperColor
        private int _SkyUpperColorLocation => _NAM0Location!.Value.Min;
        private bool _SkyUpperColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _SkyUpperColor => _SkyUpperColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_SkyUpperColorLocation), _package) : default;
        public IWeatherColorGetter SkyUpperColor => _SkyUpperColor ?? new WeatherColor();
        #endregion
        #region FogNearColor
        private int _FogNearColorLocation => _NAM0Location!.Value.Min + 0x10;
        private bool _FogNearColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _FogNearColor => _FogNearColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_FogNearColorLocation), _package) : default;
        public IWeatherColorGetter FogNearColor => _FogNearColor ?? new WeatherColor();
        #endregion
        #region UnknownColor
        private int _UnknownColorLocation => _NAM0Location!.Value.Min + 0x20;
        private bool _UnknownColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _UnknownColor => _UnknownColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_UnknownColorLocation), _package) : default;
        public IWeatherColorGetter UnknownColor => _UnknownColor ?? new WeatherColor();
        #endregion
        #region AmbientColor
        private int _AmbientColorLocation => _NAM0Location!.Value.Min + 0x30;
        private bool _AmbientColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _AmbientColor => _AmbientColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_AmbientColorLocation), _package) : default;
        public IWeatherColorGetter AmbientColor => _AmbientColor ?? new WeatherColor();
        #endregion
        #region SunlightColor
        private int _SunlightColorLocation => _NAM0Location!.Value.Min + 0x40;
        private bool _SunlightColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _SunlightColor => _SunlightColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_SunlightColorLocation), _package) : default;
        public IWeatherColorGetter SunlightColor => _SunlightColor ?? new WeatherColor();
        #endregion
        #region SunColor
        private int _SunColorLocation => _NAM0Location!.Value.Min + 0x50;
        private bool _SunColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _SunColor => _SunColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_SunColorLocation), _package) : default;
        public IWeatherColorGetter SunColor => _SunColor ?? new WeatherColor();
        #endregion
        #region StarsColor
        private int _StarsColorLocation => _NAM0Location!.Value.Min + 0x60;
        private bool _StarsColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _StarsColor => _StarsColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_StarsColorLocation), _package) : default;
        public IWeatherColorGetter StarsColor => _StarsColor ?? new WeatherColor();
        #endregion
        #region SkyLowerColor
        private int _SkyLowerColorLocation => _NAM0Location!.Value.Min + 0x70;
        private bool _SkyLowerColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _SkyLowerColor => _SkyLowerColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_SkyLowerColorLocation), _package) : default;
        public IWeatherColorGetter SkyLowerColor => _SkyLowerColor ?? new WeatherColor();
        #endregion
        #region HorizonColor
        private int _HorizonColorLocation => _NAM0Location!.Value.Min + 0x80;
        private bool _HorizonColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _HorizonColor => _HorizonColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_HorizonColorLocation), _package) : default;
        public IWeatherColorGetter HorizonColor => _HorizonColor ?? new WeatherColor();
        #endregion
        #region EffectLightingColor
        private int _EffectLightingColorLocation => _NAM0Location!.Value.Min + 0x90;
        private bool _EffectLightingColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _EffectLightingColor => _EffectLightingColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_EffectLightingColorLocation), _package) : default;
        public IWeatherColorGetter EffectLightingColor => _EffectLightingColor ?? new WeatherColor();
        #endregion
        #region CloudLodDiffuseColor
        private int _CloudLodDiffuseColorLocation => _NAM0Location!.Value.Min + 0xA0;
        private bool _CloudLodDiffuseColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _CloudLodDiffuseColor => _CloudLodDiffuseColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_CloudLodDiffuseColorLocation), _package) : default;
        public IWeatherColorGetter CloudLodDiffuseColor => _CloudLodDiffuseColor ?? new WeatherColor();
        #endregion
        #region CloudLodAmbientColor
        private int _CloudLodAmbientColorLocation => _NAM0Location!.Value.Min + 0xB0;
        private bool _CloudLodAmbientColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _CloudLodAmbientColor => _CloudLodAmbientColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_CloudLodAmbientColorLocation), _package) : default;
        public IWeatherColorGetter CloudLodAmbientColor => _CloudLodAmbientColor ?? new WeatherColor();
        #endregion
        #region FogFarColor
        private int _FogFarColorLocation => _NAM0Location!.Value.Min + 0xC0;
        private bool _FogFarColor_IsSet => _NAM0Location.HasValue;
        private IWeatherColorGetter? _FogFarColor => _FogFarColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_FogFarColorLocation), _package) : default;
        public IWeatherColorGetter FogFarColor => _FogFarColor ?? new WeatherColor();
        #endregion
        #region SkyStaticsColor
        private int _SkyStaticsColorLocation => _NAM0Location!.Value.Min + 0xD0;
        private bool _SkyStaticsColor_IsSet => _NAM0Location.HasValue && !NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break0);
        private IWeatherColorGetter? _SkyStaticsColor => _SkyStaticsColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_SkyStaticsColorLocation), _package) : default;
        public IWeatherColorGetter SkyStaticsColor => _SkyStaticsColor ?? new WeatherColor();
        #endregion
        #region WaterMultiplierColor
        private int _WaterMultiplierColorLocation => _NAM0Location!.Value.Min + 0xE0;
        private bool _WaterMultiplierColor_IsSet => _NAM0Location.HasValue && !NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break1);
        private IWeatherColorGetter? _WaterMultiplierColor => _WaterMultiplierColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_WaterMultiplierColorLocation), _package) : default;
        public IWeatherColorGetter WaterMultiplierColor => _WaterMultiplierColor ?? new WeatherColor();
        #endregion
        #region SunGlareColor
        private int _SunGlareColorLocation => _NAM0Location!.Value.Min + 0xF0;
        private bool _SunGlareColor_IsSet => _NAM0Location.HasValue && !NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break1);
        private IWeatherColorGetter? _SunGlareColor => _SunGlareColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_SunGlareColorLocation), _package) : default;
        public IWeatherColorGetter SunGlareColor => _SunGlareColor ?? new WeatherColor();
        #endregion
        #region MoonGlareColor
        private int _MoonGlareColorLocation => _NAM0Location!.Value.Min + 0x100;
        private bool _MoonGlareColor_IsSet => _NAM0Location.HasValue && !NAM0DataTypeState.HasFlag(Weather.NAM0DataType.Break1);
        private IWeatherColorGetter? _MoonGlareColor => _MoonGlareColor_IsSet ? WeatherColorBinaryOverlay.WeatherColorFactory(_recordData.Slice(_MoonGlareColorLocation), _package) : default;
        public IWeatherColorGetter MoonGlareColor => _MoonGlareColor ?? new WeatherColor();
        #endregion
        private RangeInt32? _FNAMLocation;
        #region FogDistanceDayNear
        private int _FogDistanceDayNearLocation => _FNAMLocation!.Value.Min;
        private bool _FogDistanceDayNear_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceDayNear => _FogDistanceDayNear_IsSet ? _recordData.Slice(_FogDistanceDayNearLocation, 4).Float() : default(Single);
        #endregion
        #region FogDistanceDayFar
        private int _FogDistanceDayFarLocation => _FNAMLocation!.Value.Min + 0x4;
        private bool _FogDistanceDayFar_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceDayFar => _FogDistanceDayFar_IsSet ? _recordData.Slice(_FogDistanceDayFarLocation, 4).Float() : default(Single);
        #endregion
        #region FogDistanceNightNear
        private int _FogDistanceNightNearLocation => _FNAMLocation!.Value.Min + 0x8;
        private bool _FogDistanceNightNear_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceNightNear => _FogDistanceNightNear_IsSet ? _recordData.Slice(_FogDistanceNightNearLocation, 4).Float() : default(Single);
        #endregion
        #region FogDistanceNightFar
        private int _FogDistanceNightFarLocation => _FNAMLocation!.Value.Min + 0xC;
        private bool _FogDistanceNightFar_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceNightFar => _FogDistanceNightFar_IsSet ? _recordData.Slice(_FogDistanceNightFarLocation, 4).Float() : default(Single);
        #endregion
        #region FogDistanceDayPower
        private int _FogDistanceDayPowerLocation => _FNAMLocation!.Value.Min + 0x10;
        private bool _FogDistanceDayPower_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceDayPower => _FogDistanceDayPower_IsSet ? _recordData.Slice(_FogDistanceDayPowerLocation, 4).Float() : default(Single);
        #endregion
        #region FogDistanceNightPower
        private int _FogDistanceNightPowerLocation => _FNAMLocation!.Value.Min + 0x14;
        private bool _FogDistanceNightPower_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceNightPower => _FogDistanceNightPower_IsSet ? _recordData.Slice(_FogDistanceNightPowerLocation, 4).Float() : default(Single);
        #endregion
        #region FogDistanceDayMax
        private int _FogDistanceDayMaxLocation => _FNAMLocation!.Value.Min + 0x18;
        private bool _FogDistanceDayMax_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceDayMax => _FogDistanceDayMax_IsSet ? _recordData.Slice(_FogDistanceDayMaxLocation, 4).Float() : default(Single);
        #endregion
        #region FogDistanceNightMax
        private int _FogDistanceNightMaxLocation => _FNAMLocation!.Value.Min + 0x1C;
        private bool _FogDistanceNightMax_IsSet => _FNAMLocation.HasValue;
        public Single FogDistanceNightMax => _FogDistanceNightMax_IsSet ? _recordData.Slice(_FogDistanceNightMaxLocation, 4).Float() : default(Single);
        #endregion
        private RangeInt32? _DATALocation;
        #region WindSpeed
        private int _WindSpeedLocation => _DATALocation!.Value.Min;
        private bool _WindSpeed_IsSet => _DATALocation.HasValue;
        public Percent WindSpeed => _WindSpeed_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_WindSpeedLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value.Min + 0x1;
        private bool _Unknown_IsSet => _DATALocation.HasValue;
        public UInt16 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_UnknownLocation, 2)) : default(UInt16);
        #endregion
        #region TransDelta
        private int _TransDeltaLocation => _DATALocation!.Value.Min + 0x3;
        private bool _TransDelta_IsSet => _DATALocation.HasValue;
        public Single TransDelta => _TransDelta_IsSet ? FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(_recordData.Slice(_TransDeltaLocation, 1), FloatIntegerType.Byte, multiplier: 4f, divisor: null) : default(Single);
        #endregion
        #region SunGlare
        private int _SunGlareLocation => _DATALocation!.Value.Min + 0x4;
        private bool _SunGlare_IsSet => _DATALocation.HasValue;
        public Percent SunGlare => _SunGlare_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SunGlareLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region SunDamage
        private int _SunDamageLocation => _DATALocation!.Value.Min + 0x5;
        private bool _SunDamage_IsSet => _DATALocation.HasValue;
        public Percent SunDamage => _SunDamage_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_SunDamageLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region PrecipitationBeginFadeIn
        private int _PrecipitationBeginFadeInLocation => _DATALocation!.Value.Min + 0x6;
        private bool _PrecipitationBeginFadeIn_IsSet => _DATALocation.HasValue;
        public Percent PrecipitationBeginFadeIn => _PrecipitationBeginFadeIn_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_PrecipitationBeginFadeInLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region PrecipitationEndFadeOut
        private int _PrecipitationEndFadeOutLocation => _DATALocation!.Value.Min + 0x7;
        private bool _PrecipitationEndFadeOut_IsSet => _DATALocation.HasValue;
        public Percent PrecipitationEndFadeOut => _PrecipitationEndFadeOut_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_PrecipitationEndFadeOutLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region ThunderLightningBeginFadeIn
        private int _ThunderLightningBeginFadeInLocation => _DATALocation!.Value.Min + 0x8;
        private bool _ThunderLightningBeginFadeIn_IsSet => _DATALocation.HasValue;
        public Percent ThunderLightningBeginFadeIn => _ThunderLightningBeginFadeIn_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_ThunderLightningBeginFadeInLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region ThunderLightningEndFadeOut
        private int _ThunderLightningEndFadeOutLocation => _DATALocation!.Value.Min + 0x9;
        private bool _ThunderLightningEndFadeOut_IsSet => _DATALocation.HasValue;
        public Percent ThunderLightningEndFadeOut => _ThunderLightningEndFadeOut_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_ThunderLightningEndFadeOutLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region ThunderLightningFrequency
        private int _ThunderLightningFrequencyLocation => _DATALocation!.Value.Min + 0xA;
        private bool _ThunderLightningFrequency_IsSet => _DATALocation.HasValue;
        public Percent ThunderLightningFrequency => _ThunderLightningFrequency_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_ThunderLightningFrequencyLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value.Min + 0xB;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Weather.Flag Flags => _Flags_IsSet ? (Weather.Flag)_recordData.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region LightningColor
        private int _LightningColorLocation => _DATALocation!.Value.Min + 0xC;
        private bool _LightningColor_IsSet => _DATALocation.HasValue;
        public Color LightningColor => _LightningColor_IsSet ? _recordData.Slice(_LightningColorLocation, 3).ReadColor(ColorBinaryType.NoAlpha) : default(Color);
        #endregion
        #region VisualEffectBegin
        private int _VisualEffectBeginLocation => _DATALocation!.Value.Min + 0xF;
        private bool _VisualEffectBegin_IsSet => _DATALocation.HasValue;
        public Percent VisualEffectBegin => _VisualEffectBegin_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_VisualEffectBeginLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region VisualEffectEnd
        private int _VisualEffectEndLocation => _DATALocation!.Value.Min + 0x10;
        private bool _VisualEffectEnd_IsSet => _DATALocation.HasValue;
        public Percent VisualEffectEnd => _VisualEffectEnd_IsSet ? PercentBinaryTranslation.GetPercent(_recordData.Slice(_VisualEffectEndLocation, 1), FloatIntegerType.Byte) : default(Percent);
        #endregion
        #region WindDirection
        private int _WindDirectionLocation => _DATALocation!.Value.Min + 0x11;
        private bool _WindDirection_IsSet => _DATALocation.HasValue;
        public Single WindDirection => _WindDirection_IsSet ? FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(_recordData.Slice(_WindDirectionLocation, 1), FloatIntegerType.Byte, multiplier: null, divisor: 360f) : default(Single);
        #endregion
        #region WindDirectionRange
        private int _WindDirectionRangeLocation => _DATALocation!.Value.Min + 0x12;
        private bool _WindDirectionRange_IsSet => _DATALocation.HasValue;
        public Single WindDirectionRange => _WindDirectionRange_IsSet ? FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(_recordData.Slice(_WindDirectionRangeLocation, 1), FloatIntegerType.Byte, multiplier: null, divisor: 180f) : default(Single);
        #endregion
        #region DisabledCloudLayers
        public partial ParseResult DisabledCloudLayersCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        public IReadOnlyList<IWeatherSoundGetter> Sounds { get; private set; } = Array.Empty<IWeatherSoundGetter>();
        public IReadOnlyList<IFormLinkGetter<IStaticGetter>> SkyStatics { get; private set; } = Array.Empty<IFormLinkGetter<IStaticGetter>>();
        #region ImageSpaces
        private RangeInt32? _ImageSpacesLocation;
        public IWeatherImageSpacesGetter? ImageSpaces => _ImageSpacesLocation.HasValue ? WeatherImageSpacesBinaryOverlay.WeatherImageSpacesFactory(_recordData.Slice(_ImageSpacesLocation!.Value.Min), _package) : default;
        #endregion
        #region VolumetricLighting
        private RangeInt32? _VolumetricLightingLocation;
        public IWeatherVolumetricLightingGetter? VolumetricLighting => _VolumetricLightingLocation.HasValue ? WeatherVolumetricLightingBinaryOverlay.WeatherVolumetricLightingFactory(_recordData.Slice(_VolumetricLightingLocation!.Value.Min), _package) : default;
        #endregion
        #region DirectionalAmbientLightingColors
        partial void DirectionalAmbientLightingColorsCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset);
        public partial IWeatherAmbientColorSetGetter? GetDirectionalAmbientLightingColorsCustom();
        public IWeatherAmbientColorSetGetter? DirectionalAmbientLightingColors => GetDirectionalAmbientLightingColorsCustom();
        #endregion
        #region NAM2
        private int? _NAM2Location;
        public ReadOnlyMemorySlice<Byte>? NAM2 => _NAM2Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM2Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region NAM3
        private int? _NAM3Location;
        public ReadOnlyMemorySlice<Byte>? NAM3 => _NAM3Location.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM3Location.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IModelGetter? Aurora { get; private set; }
        #region SunGlareLensFlare
        private int? _SunGlareLensFlareLocation;
        public IFormLinkNullableGetter<ILensFlareGetter> SunGlareLensFlare => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILensFlareGetter>(_package, _recordData, _SunGlareLensFlareLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected WeatherBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IWeatherGetter WeatherFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new WeatherBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IWeatherGetter WeatherFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return WeatherFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DNAM:
                {
                    _DNAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.DNAM;
                }
                case RecordTypeInts.CNAM:
                {
                    _CNAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.CNAM;
                }
                case RecordTypeInts.ANAM:
                {
                    _ANAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.ANAM;
                }
                case RecordTypeInts.BNAM:
                {
                    _BNAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.BNAM;
                }
                case RecordTypeInts.LNAM:
                {
                    _LNAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.LNAM;
                }
                case RecordTypeInts.MNAM:
                {
                    _PrecipitationLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.Precipitation;
                }
                case RecordTypeInts.NNAM:
                {
                    _VisualEffectLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.VisualEffect;
                }
                case RecordTypeInts.ONAM:
                {
                    _ONAMLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.ONAM;
                }
                case RecordTypeInts.RNAM:
                {
                    CloudsCustomParse(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
                    return (int)Weather_FieldIndex.Clouds;
                }
                case RecordTypeInts.QNAM:
                {
                    return CloudXSpeedsCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.PNAM:
                {
                    return CloudColorsCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.JNAM:
                {
                    return CloudAlphasCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.NAM0:
                {
                    _NAM0Location = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0xD0)
                    {
                        this.NAM0DataTypeState |= Weather.NAM0DataType.Break0;
                    }
                    if (subLen <= 0xE0)
                    {
                        this.NAM0DataTypeState |= Weather.NAM0DataType.Break1;
                    }
                    return (int)Weather_FieldIndex.MoonGlareColor;
                }
                case RecordTypeInts.FNAM:
                {
                    _FNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weather_FieldIndex.FogDistanceNightMax;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Weather_FieldIndex.WindDirectionRange;
                }
                case RecordTypeInts.NAM1:
                {
                    return DisabledCloudLayersCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.SNAM:
                {
                    this.Sounds = BinaryOverlayList.FactoryByArray<IWeatherSoundGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => WeatherSoundBinaryOverlay.WeatherSoundFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: WeatherSound_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Weather_FieldIndex.Sounds;
                }
                case RecordTypeInts.TNAM:
                {
                    this.SkyStatics = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IStaticGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IStaticGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.TNAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Weather_FieldIndex.SkyStatics;
                }
                case RecordTypeInts.IMSP:
                {
                    _ImageSpacesLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Weather_FieldIndex.ImageSpaces;
                }
                case RecordTypeInts.HNAM:
                {
                    _VolumetricLightingLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Weather_FieldIndex.VolumetricLighting;
                }
                case RecordTypeInts.DALC:
                {
                    DirectionalAmbientLightingColorsCustomParse(
                        stream,
                        finalPos,
                        offset);
                    return (int)Weather_FieldIndex.DirectionalAmbientLightingColors;
                }
                case RecordTypeInts.NAM2:
                {
                    _NAM2Location = (stream.Position - offset);
                    return (int)Weather_FieldIndex.NAM2;
                }
                case RecordTypeInts.NAM3:
                {
                    _NAM3Location = (stream.Position - offset);
                    return (int)Weather_FieldIndex.NAM3;
                }
                case RecordTypeInts.MODL:
                {
                    this.Aurora = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Weather_FieldIndex.Aurora;
                }
                case RecordTypeInts.GNAM:
                {
                    _SunGlareLensFlareLocation = (stream.Position - offset);
                    return (int)Weather_FieldIndex.SunGlareLensFlare;
                }
                default:
                    return CustomRecordFallback(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed);
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            WeatherMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Weather>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IWeatherGetter rhs) return false;
            return ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IWeatherGetter? obj)
        {
            return ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((WeatherCommon)((IWeatherGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

