/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class AcousticSpace :
        SkyrimMajorRecord,
        IAcousticSpaceInternal,
        IEquatable<IAcousticSpaceGetter>,
        ILoquiObjectSetter<AcousticSpace>
    {
        #region Ctor
        protected AcousticSpace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IAcousticSpaceGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region AmbientSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _AmbientSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> AmbientSound
        {
            get => _AmbientSound;
            set => _AmbientSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IAcousticSpaceGetter.AmbientSound => this.AmbientSound;
        #endregion
        #region UseSoundFromRegion
        private readonly IFormLinkNullable<IRegionGetter> _UseSoundFromRegion = new FormLinkNullable<IRegionGetter>();
        public IFormLinkNullable<IRegionGetter> UseSoundFromRegion
        {
            get => _UseSoundFromRegion;
            set => _UseSoundFromRegion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRegionGetter> IAcousticSpaceGetter.UseSoundFromRegion => this.UseSoundFromRegion;
        #endregion
        #region EnvironmentType
        private readonly IFormLinkNullable<IReverbParametersGetter> _EnvironmentType = new FormLinkNullable<IReverbParametersGetter>();
        public IFormLinkNullable<IReverbParametersGetter> EnvironmentType
        {
            get => _EnvironmentType;
            set => _EnvironmentType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IReverbParametersGetter> IAcousticSpaceGetter.EnvironmentType => this.EnvironmentType;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AcousticSpaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.AmbientSound = initialValue;
                this.UseSoundFromRegion = initialValue;
                this.EnvironmentType = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem ObjectBounds,
                TItem AmbientSound,
                TItem UseSoundFromRegion,
                TItem EnvironmentType)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.AmbientSound = AmbientSound;
                this.UseSoundFromRegion = UseSoundFromRegion;
                this.EnvironmentType = EnvironmentType;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem AmbientSound;
            public TItem UseSoundFromRegion;
            public TItem EnvironmentType;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.AmbientSound, rhs.AmbientSound)) return false;
                if (!object.Equals(this.UseSoundFromRegion, rhs.UseSoundFromRegion)) return false;
                if (!object.Equals(this.EnvironmentType, rhs.EnvironmentType)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.AmbientSound);
                hash.Add(this.UseSoundFromRegion);
                hash.Add(this.EnvironmentType);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.AmbientSound)) return false;
                if (!eval(this.UseSoundFromRegion)) return false;
                if (!eval(this.EnvironmentType)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.AmbientSound)) return true;
                if (eval(this.UseSoundFromRegion)) return true;
                if (eval(this.EnvironmentType)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new AcousticSpace.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.AmbientSound = eval(this.AmbientSound);
                obj.UseSoundFromRegion = eval(this.UseSoundFromRegion);
                obj.EnvironmentType = eval(this.EnvironmentType);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(AcousticSpace.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, AcousticSpace.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(AcousticSpace.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.AmbientSound ?? true)
                    {
                        sb.AppendItem(AmbientSound, "AmbientSound");
                    }
                    if (printMask?.UseSoundFromRegion ?? true)
                    {
                        sb.AppendItem(UseSoundFromRegion, "UseSoundFromRegion");
                    }
                    if (printMask?.EnvironmentType ?? true)
                    {
                        sb.AppendItem(EnvironmentType, "EnvironmentType");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? AmbientSound;
            public Exception? UseSoundFromRegion;
            public Exception? EnvironmentType;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                AcousticSpace_FieldIndex enu = (AcousticSpace_FieldIndex)index;
                switch (enu)
                {
                    case AcousticSpace_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case AcousticSpace_FieldIndex.AmbientSound:
                        return AmbientSound;
                    case AcousticSpace_FieldIndex.UseSoundFromRegion:
                        return UseSoundFromRegion;
                    case AcousticSpace_FieldIndex.EnvironmentType:
                        return EnvironmentType;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                AcousticSpace_FieldIndex enu = (AcousticSpace_FieldIndex)index;
                switch (enu)
                {
                    case AcousticSpace_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case AcousticSpace_FieldIndex.AmbientSound:
                        this.AmbientSound = ex;
                        break;
                    case AcousticSpace_FieldIndex.UseSoundFromRegion:
                        this.UseSoundFromRegion = ex;
                        break;
                    case AcousticSpace_FieldIndex.EnvironmentType:
                        this.EnvironmentType = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                AcousticSpace_FieldIndex enu = (AcousticSpace_FieldIndex)index;
                switch (enu)
                {
                    case AcousticSpace_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case AcousticSpace_FieldIndex.AmbientSound:
                        this.AmbientSound = (Exception?)obj;
                        break;
                    case AcousticSpace_FieldIndex.UseSoundFromRegion:
                        this.UseSoundFromRegion = (Exception?)obj;
                        break;
                    case AcousticSpace_FieldIndex.EnvironmentType:
                        this.EnvironmentType = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (AmbientSound != null) return true;
                if (UseSoundFromRegion != null) return true;
                if (EnvironmentType != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(AmbientSound, "AmbientSound");
                }
                {
                    sb.AppendItem(UseSoundFromRegion, "UseSoundFromRegion");
                }
                {
                    sb.AppendItem(EnvironmentType, "EnvironmentType");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.AmbientSound = this.AmbientSound.Combine(rhs.AmbientSound);
                ret.UseSoundFromRegion = this.UseSoundFromRegion.Combine(rhs.UseSoundFromRegion);
                ret.EnvironmentType = this.EnvironmentType.Combine(rhs.EnvironmentType);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool AmbientSound;
            public bool UseSoundFromRegion;
            public bool EnvironmentType;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.AmbientSound = defaultOn;
                this.UseSoundFromRegion = defaultOn;
                this.EnvironmentType = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((AmbientSound, null));
                ret.Add((UseSoundFromRegion, null));
                ret.Add((EnvironmentType, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = AcousticSpace_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AcousticSpaceCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => AcousticSpaceSetterCommon.Instance.RemapLinks(this, mapping);
        public AcousticSpace(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private AcousticSpace(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal AcousticSpace(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public AcousticSpace(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public AcousticSpace(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<AcousticSpace>.ToString(this);
        }

        protected override Type LinkType => typeof(IAcousticSpace);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAcousticSpaceGetter rhs) return false;
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAcousticSpaceGetter? obj)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AcousticSpaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AcousticSpaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static AcousticSpace CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new AcousticSpace();
            ((AcousticSpaceSetterCommon)((IAcousticSpaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out AcousticSpace item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((AcousticSpaceSetterCommon)((IAcousticSpaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new AcousticSpace GetNew()
        {
            return new AcousticSpace();
        }

    }
    #endregion

    #region Interface
    public partial interface IAcousticSpace :
        IAcousticSpaceGetter,
        IExplodeSpawn,
        IFormLinkContainer,
        ILoquiObjectSetter<IAcousticSpaceInternal>,
        IObjectBounded,
        IPlaceableObject,
        IReferenceableObject,
        ISkyrimMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> AmbientSound { get; set; }
        new IFormLinkNullable<IRegionGetter> UseSoundFromRegion { get; set; }
        new IFormLinkNullable<IReverbParametersGetter> EnvironmentType { get; set; }
    }

    public partial interface IAcousticSpaceInternal :
        ISkyrimMajorRecordInternal,
        IAcousticSpace,
        IAcousticSpaceGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.ASPC)]
    public partial interface IAcousticSpaceGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        ILoquiObject<IAcousticSpaceGetter>,
        IMapsToGetter<IAcousticSpaceGetter>,
        IObjectBoundedGetter,
        IPlaceableObjectGetter,
        IReferenceableObjectGetter
    {
        static new ILoquiRegistration StaticRegistration => AcousticSpace_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        IFormLinkNullableGetter<ISoundDescriptorGetter> AmbientSound { get; }
        IFormLinkNullableGetter<IRegionGetter> UseSoundFromRegion { get; }
        IFormLinkNullableGetter<IReverbParametersGetter> EnvironmentType { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class AcousticSpaceMixIn
    {
        public static void Clear(this IAcousticSpaceInternal item)
        {
            ((AcousticSpaceSetterCommon)((IAcousticSpaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static AcousticSpace.Mask<bool> GetEqualsMask(
            this IAcousticSpaceGetter item,
            IAcousticSpaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IAcousticSpaceGetter item,
            string? name = null,
            AcousticSpace.Mask<bool>? printMask = null)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IAcousticSpaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AcousticSpace.Mask<bool>? printMask = null)
        {
            ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IAcousticSpaceGetter item,
            IAcousticSpaceGetter rhs,
            AcousticSpace.TranslationMask? equalsMask = null)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IAcousticSpaceInternal lhs,
            IAcousticSpaceGetter rhs,
            out AcousticSpace.ErrorMask errorMask,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = AcousticSpace.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IAcousticSpaceInternal lhs,
            IAcousticSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static AcousticSpace DeepCopy(
            this IAcousticSpaceGetter item,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            return ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static AcousticSpace DeepCopy(
            this IAcousticSpaceGetter item,
            out AcousticSpace.ErrorMask errorMask,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            return ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static AcousticSpace DeepCopy(
            this IAcousticSpaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static AcousticSpace Duplicate(
            this IAcousticSpaceGetter item,
            FormKey formKey,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static AcousticSpace Duplicate(
            this IAcousticSpaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IAcousticSpaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((AcousticSpaceSetterCommon)((IAcousticSpaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum AcousticSpace_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        ObjectBounds = 7,
        AmbientSound = 8,
        UseSoundFromRegion = 9,
        EnvironmentType = 10,
    }
    #endregion

    #region Registration
    internal partial class AcousticSpace_Registration : ILoquiRegistration
    {
        public static readonly AcousticSpace_Registration Instance = new AcousticSpace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 4;

        public const ushort FieldCount = 11;

        public static readonly Type MaskType = typeof(AcousticSpace.Mask<>);

        public static readonly Type ErrorMaskType = typeof(AcousticSpace.ErrorMask);

        public static readonly Type ClassType = typeof(AcousticSpace);

        public static readonly Type GetterType = typeof(IAcousticSpaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IAcousticSpace);

        public static readonly Type? InternalSetterType = typeof(IAcousticSpaceInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.AcousticSpace";

        public const string Name = "AcousticSpace";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ASPC;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ASPC);
            var all = RecordCollection.Factory(
                RecordTypes.ASPC,
                RecordTypes.OBND,
                RecordTypes.SNAM,
                RecordTypes.RDAT,
                RecordTypes.BNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(AcousticSpaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class AcousticSpaceSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly AcousticSpaceSetterCommon Instance = new AcousticSpaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IAcousticSpaceInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.AmbientSound.Clear();
            item.UseSoundFromRegion.Clear();
            item.EnvironmentType.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IAcousticSpaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IAcousticSpaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IAcousticSpace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.AmbientSound.Relink(mapping);
            obj.UseSoundFromRegion.Relink(mapping);
            obj.EnvironmentType.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IAcousticSpaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IAcousticSpaceInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: AcousticSpaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: AcousticSpaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AcousticSpace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (AcousticSpace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class AcousticSpaceCommon : SkyrimMajorRecordCommon
    {
        public new static readonly AcousticSpaceCommon Instance = new AcousticSpaceCommon();

        public AcousticSpace.Mask<bool> GetEqualsMask(
            IAcousticSpaceGetter item,
            IAcousticSpaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new AcousticSpace.Mask<bool>(false);
            ((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IAcousticSpaceGetter item,
            IAcousticSpaceGetter rhs,
            AcousticSpace.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.AmbientSound = item.AmbientSound.Equals(rhs.AmbientSound);
            ret.UseSoundFromRegion = item.UseSoundFromRegion.Equals(rhs.UseSoundFromRegion);
            ret.EnvironmentType = item.EnvironmentType.Equals(rhs.EnvironmentType);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IAcousticSpaceGetter item,
            string? name = null,
            AcousticSpace.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IAcousticSpaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            AcousticSpace.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"AcousticSpace =>");
            }
            else
            {
                sb.AppendLine($"{name} (AcousticSpace) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IAcousticSpaceGetter item,
            StructuredStringBuilder sb,
            AcousticSpace.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.AmbientSound ?? true)
            {
                sb.AppendItem(item.AmbientSound.FormKeyNullable, "AmbientSound");
            }
            if (printMask?.UseSoundFromRegion ?? true)
            {
                sb.AppendItem(item.UseSoundFromRegion.FormKeyNullable, "UseSoundFromRegion");
            }
            if (printMask?.EnvironmentType ?? true)
            {
                sb.AppendItem(item.EnvironmentType.FormKeyNullable, "EnvironmentType");
            }
        }
        
        public static AcousticSpace_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AcousticSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (AcousticSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (AcousticSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (AcousticSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (AcousticSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (AcousticSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (AcousticSpace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new AcousticSpace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (AcousticSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (AcousticSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (AcousticSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (AcousticSpace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IAcousticSpaceGetter? lhs,
            IAcousticSpaceGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)AcousticSpace_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.AmbientSound) ?? true))
            {
                if (!lhs.AmbientSound.Equals(rhs.AmbientSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.UseSoundFromRegion) ?? true))
            {
                if (!lhs.UseSoundFromRegion.Equals(rhs.UseSoundFromRegion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.EnvironmentType) ?? true))
            {
                if (!lhs.EnvironmentType.Equals(rhs.EnvironmentType)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAcousticSpaceGetter?)lhs,
                rhs: rhs as IAcousticSpaceGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IAcousticSpaceGetter?)lhs,
                rhs: rhs as IAcousticSpaceGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IAcousticSpaceGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            hash.Add(item.AmbientSound);
            hash.Add(item.UseSoundFromRegion);
            hash.Add(item.EnvironmentType);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IAcousticSpaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IAcousticSpaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return AcousticSpace.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IAcousticSpaceGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.AmbientSound, out var AmbientSoundInfo))
            {
                yield return AmbientSoundInfo;
            }
            if (FormLinkInformation.TryFactory(obj.UseSoundFromRegion, out var UseSoundFromRegionInfo))
            {
                yield return UseSoundFromRegionInfo;
            }
            if (FormLinkInformation.TryFactory(obj.EnvironmentType, out var EnvironmentTypeInfo))
            {
                yield return EnvironmentTypeInfo;
            }
            yield break;
        }
        
        #region Duplicate
        public AcousticSpace Duplicate(
            IAcousticSpaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new AcousticSpace(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAcousticSpaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IAcousticSpaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class AcousticSpaceSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly AcousticSpaceSetterTranslationCommon Instance = new AcousticSpaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IAcousticSpaceInternal item,
            IAcousticSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IAcousticSpace item,
            IAcousticSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)AcousticSpace_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)AcousticSpace_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.AmbientSound) ?? true))
            {
                item.AmbientSound.SetTo(rhs.AmbientSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.UseSoundFromRegion) ?? true))
            {
                item.UseSoundFromRegion.SetTo(rhs.UseSoundFromRegion.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)AcousticSpace_FieldIndex.EnvironmentType) ?? true))
            {
                item.EnvironmentType.SetTo(rhs.EnvironmentType.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IAcousticSpace item,
            IAcousticSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAcousticSpaceInternal)item,
                rhs: (IAcousticSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAcousticSpace)item,
                rhs: (IAcousticSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAcousticSpaceInternal)item,
                rhs: (IAcousticSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IAcousticSpace)item,
                rhs: (IAcousticSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public AcousticSpace DeepCopy(
            IAcousticSpaceGetter item,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            AcousticSpace ret = (AcousticSpace)((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).GetNew();
            ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public AcousticSpace DeepCopy(
            IAcousticSpaceGetter item,
            out AcousticSpace.ErrorMask errorMask,
            AcousticSpace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            AcousticSpace ret = (AcousticSpace)((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).GetNew();
            ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = AcousticSpace.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public AcousticSpace DeepCopy(
            IAcousticSpaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            AcousticSpace ret = (AcousticSpace)((AcousticSpaceCommon)((IAcousticSpaceGetter)item).CommonInstance()!).GetNew();
            ((AcousticSpaceSetterTranslationCommon)((IAcousticSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class AcousticSpace
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AcousticSpace_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AcousticSpace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AcousticSpaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return AcousticSpaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AcousticSpaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class AcousticSpaceBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly AcousticSpaceBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IAcousticSpaceGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AmbientSound,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UseSoundFromRegion,
                header: translationParams.ConvertToCustom(RecordTypes.RDAT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnvironmentType,
                header: translationParams.ConvertToCustom(RecordTypes.BNAM));
        }

        public void Write(
            MutagenWriter writer,
            IAcousticSpaceGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ASPC,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IAcousticSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAcousticSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IAcousticSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class AcousticSpaceBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly AcousticSpaceBinaryCreateTranslation Instance = new AcousticSpaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ASPC;
        public static ParseResult FillBinaryRecordTypes(
            IAcousticSpaceInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)AcousticSpace_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AmbientSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AcousticSpace_FieldIndex.AmbientSound;
                }
                case RecordTypeInts.RDAT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UseSoundFromRegion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AcousticSpace_FieldIndex.UseSoundFromRegion;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnvironmentType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)AcousticSpace_FieldIndex.EnvironmentType;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class AcousticSpaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class AcousticSpaceBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IAcousticSpaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => AcousticSpace_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => AcousticSpace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => AcousticSpaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => AcousticSpaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => AcousticSpaceCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => AcousticSpaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((AcousticSpaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IAcousticSpace);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region AmbientSound
        private int? _AmbientSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> AmbientSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _AmbientSoundLocation);
        #endregion
        #region UseSoundFromRegion
        private int? _UseSoundFromRegionLocation;
        public IFormLinkNullableGetter<IRegionGetter> UseSoundFromRegion => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRegionGetter>(_package, _recordData, _UseSoundFromRegionLocation);
        #endregion
        #region EnvironmentType
        private int? _EnvironmentTypeLocation;
        public IFormLinkNullableGetter<IReverbParametersGetter> EnvironmentType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IReverbParametersGetter>(_package, _recordData, _EnvironmentTypeLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected AcousticSpaceBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IAcousticSpaceGetter AcousticSpaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new AcousticSpaceBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IAcousticSpaceGetter AcousticSpaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return AcousticSpaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)AcousticSpace_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.SNAM:
                {
                    _AmbientSoundLocation = (stream.Position - offset);
                    return (int)AcousticSpace_FieldIndex.AmbientSound;
                }
                case RecordTypeInts.RDAT:
                {
                    _UseSoundFromRegionLocation = (stream.Position - offset);
                    return (int)AcousticSpace_FieldIndex.UseSoundFromRegion;
                }
                case RecordTypeInts.BNAM:
                {
                    _EnvironmentTypeLocation = (stream.Position - offset);
                    return (int)AcousticSpace_FieldIndex.EnvironmentType;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            AcousticSpaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<AcousticSpace>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IAcousticSpaceGetter rhs) return false;
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IAcousticSpaceGetter? obj)
        {
            return ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((AcousticSpaceCommon)((IAcousticSpaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

