/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Assets;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Projectile :
        SkyrimMajorRecord,
        IEquatable<IProjectileGetter>,
        ILoquiObjectSetter<Projectile>,
        IProjectileInternal
    {
        #region Ctor
        protected Projectile()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IProjectileGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IProjectileGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IProjectileGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        /// <summary>
        /// Aspects: IHasDestructible
        /// </summary>
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IProjectileGetter.Destructible => this.Destructible;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IHasDestructibleGetter.Destructible => this.Destructible;
        #endregion
        #endregion
        #region Flags
        public Projectile.Flag Flags { get; set; } = default(Projectile.Flag);
        #endregion
        #region Type
        public Projectile.TypeEnum Type { get; set; } = default(Projectile.TypeEnum);
        #endregion
        #region Gravity
        public Single Gravity { get; set; } = default(Single);
        #endregion
        #region Speed
        public Single Speed { get; set; } = default(Single);
        #endregion
        #region Range
        public Single Range { get; set; } = default(Single);
        #endregion
        #region Light
        private readonly IFormLink<ILightGetter> _Light = new FormLink<ILightGetter>();
        public IFormLink<ILightGetter> Light
        {
            get => _Light;
            set => _Light.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILightGetter> IProjectileGetter.Light => this.Light;
        #endregion
        #region MuzzleFlash
        private readonly IFormLink<ILightGetter> _MuzzleFlash = new FormLink<ILightGetter>();
        public IFormLink<ILightGetter> MuzzleFlash
        {
            get => _MuzzleFlash;
            set => _MuzzleFlash.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILightGetter> IProjectileGetter.MuzzleFlash => this.MuzzleFlash;
        #endregion
        #region TracerChance
        public Single TracerChance { get; set; } = default(Single);
        #endregion
        #region ExplosionAltTriggerProximity
        public Single ExplosionAltTriggerProximity { get; set; } = default(Single);
        #endregion
        #region ExplosionAltTriggerTimer
        public Single ExplosionAltTriggerTimer { get; set; } = default(Single);
        #endregion
        #region Explosion
        private readonly IFormLink<IExplosionGetter> _Explosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> Explosion
        {
            get => _Explosion;
            set => _Explosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IProjectileGetter.Explosion => this.Explosion;
        #endregion
        #region Sound
        private readonly IFormLink<ISoundDescriptorGetter> _Sound = new FormLink<ISoundDescriptorGetter>();
        public IFormLink<ISoundDescriptorGetter> Sound
        {
            get => _Sound;
            set => _Sound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundDescriptorGetter> IProjectileGetter.Sound => this.Sound;
        #endregion
        #region MuzzleFlashDuration
        public Single MuzzleFlashDuration { get; set; } = default(Single);
        #endregion
        #region FadeDuration
        public Single FadeDuration { get; set; } = default(Single);
        #endregion
        #region ImpactForce
        public Single ImpactForce { get; set; } = default(Single);
        #endregion
        #region CountdownSound
        private readonly IFormLink<ISoundDescriptorGetter> _CountdownSound = new FormLink<ISoundDescriptorGetter>();
        public IFormLink<ISoundDescriptorGetter> CountdownSound
        {
            get => _CountdownSound;
            set => _CountdownSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundDescriptorGetter> IProjectileGetter.CountdownSound => this.CountdownSound;
        #endregion
        #region DisaleSound
        private readonly IFormLink<ISoundDescriptorGetter> _DisaleSound = new FormLink<ISoundDescriptorGetter>();
        public IFormLink<ISoundDescriptorGetter> DisaleSound
        {
            get => _DisaleSound;
            set => _DisaleSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundDescriptorGetter> IProjectileGetter.DisaleSound => this.DisaleSound;
        #endregion
        #region DefaultWeaponSource
        private readonly IFormLink<IWeaponGetter> _DefaultWeaponSource = new FormLink<IWeaponGetter>();
        public IFormLink<IWeaponGetter> DefaultWeaponSource
        {
            get => _DefaultWeaponSource;
            set => _DefaultWeaponSource.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IWeaponGetter> IProjectileGetter.DefaultWeaponSource => this.DefaultWeaponSource;
        #endregion
        #region ConeSpread
        public Single ConeSpread { get; set; } = default(Single);
        #endregion
        #region CollisionRadius
        public Single CollisionRadius { get; set; } = default(Single);
        #endregion
        #region Lifetime
        public Single Lifetime { get; set; } = default(Single);
        #endregion
        #region RelaunchInterval
        public Single RelaunchInterval { get; set; } = default(Single);
        #endregion
        #region DecalData
        private readonly IFormLink<ITextureSetGetter> _DecalData = new FormLink<ITextureSetGetter>();
        public IFormLink<ITextureSetGetter> DecalData
        {
            get => _DecalData;
            set => _DecalData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ITextureSetGetter> IProjectileGetter.DecalData => this.DecalData;
        #endregion
        #region CollisionLayer
        private readonly IFormLink<ICollisionLayerGetter> _CollisionLayer = new FormLink<ICollisionLayerGetter>();
        public IFormLink<ICollisionLayerGetter> CollisionLayer
        {
            get => _CollisionLayer;
            set => _CollisionLayer.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ICollisionLayerGetter> IProjectileGetter.CollisionLayer => this.CollisionLayer;
        #endregion
        #region MuzzleFlashModel
        public AssetLink<SkyrimModelAssetType> MuzzleFlashModel { get; set; } = new AssetLink<SkyrimModelAssetType>();
        AssetLinkGetter<SkyrimModelAssetType> IProjectileGetter.MuzzleFlashModel => this.MuzzleFlashModel;
        #endregion
        #region TextureFilesHashes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextureFilesHashes;
        public MemorySlice<Byte>? TextureFilesHashes
        {
            get => this._TextureFilesHashes;
            set => this._TextureFilesHashes = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IProjectileGetter.TextureFilesHashes => this.TextureFilesHashes;
        #endregion
        #region SoundLevel
        public UInt32 SoundLevel { get; set; } = default(UInt32);
        #endregion
        #region DATADataTypeState
        public Projectile.DATADataType DATADataTypeState { get; set; } = default(Projectile.DATADataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ProjectileMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.Flags = initialValue;
                this.Type = initialValue;
                this.Gravity = initialValue;
                this.Speed = initialValue;
                this.Range = initialValue;
                this.Light = initialValue;
                this.MuzzleFlash = initialValue;
                this.TracerChance = initialValue;
                this.ExplosionAltTriggerProximity = initialValue;
                this.ExplosionAltTriggerTimer = initialValue;
                this.Explosion = initialValue;
                this.Sound = initialValue;
                this.MuzzleFlashDuration = initialValue;
                this.FadeDuration = initialValue;
                this.ImpactForce = initialValue;
                this.CountdownSound = initialValue;
                this.DisaleSound = initialValue;
                this.DefaultWeaponSource = initialValue;
                this.ConeSpread = initialValue;
                this.CollisionRadius = initialValue;
                this.Lifetime = initialValue;
                this.RelaunchInterval = initialValue;
                this.DecalData = initialValue;
                this.CollisionLayer = initialValue;
                this.MuzzleFlashModel = initialValue;
                this.TextureFilesHashes = initialValue;
                this.SoundLevel = initialValue;
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem Destructible,
                TItem Flags,
                TItem Type,
                TItem Gravity,
                TItem Speed,
                TItem Range,
                TItem Light,
                TItem MuzzleFlash,
                TItem TracerChance,
                TItem ExplosionAltTriggerProximity,
                TItem ExplosionAltTriggerTimer,
                TItem Explosion,
                TItem Sound,
                TItem MuzzleFlashDuration,
                TItem FadeDuration,
                TItem ImpactForce,
                TItem CountdownSound,
                TItem DisaleSound,
                TItem DefaultWeaponSource,
                TItem ConeSpread,
                TItem CollisionRadius,
                TItem Lifetime,
                TItem RelaunchInterval,
                TItem DecalData,
                TItem CollisionLayer,
                TItem MuzzleFlashModel,
                TItem TextureFilesHashes,
                TItem SoundLevel,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.Flags = Flags;
                this.Type = Type;
                this.Gravity = Gravity;
                this.Speed = Speed;
                this.Range = Range;
                this.Light = Light;
                this.MuzzleFlash = MuzzleFlash;
                this.TracerChance = TracerChance;
                this.ExplosionAltTriggerProximity = ExplosionAltTriggerProximity;
                this.ExplosionAltTriggerTimer = ExplosionAltTriggerTimer;
                this.Explosion = Explosion;
                this.Sound = Sound;
                this.MuzzleFlashDuration = MuzzleFlashDuration;
                this.FadeDuration = FadeDuration;
                this.ImpactForce = ImpactForce;
                this.CountdownSound = CountdownSound;
                this.DisaleSound = DisaleSound;
                this.DefaultWeaponSource = DefaultWeaponSource;
                this.ConeSpread = ConeSpread;
                this.CollisionRadius = CollisionRadius;
                this.Lifetime = Lifetime;
                this.RelaunchInterval = RelaunchInterval;
                this.DecalData = DecalData;
                this.CollisionLayer = CollisionLayer;
                this.MuzzleFlashModel = MuzzleFlashModel;
                this.TextureFilesHashes = TextureFilesHashes;
                this.SoundLevel = SoundLevel;
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem Flags;
            public TItem Type;
            public TItem Gravity;
            public TItem Speed;
            public TItem Range;
            public TItem Light;
            public TItem MuzzleFlash;
            public TItem TracerChance;
            public TItem ExplosionAltTriggerProximity;
            public TItem ExplosionAltTriggerTimer;
            public TItem Explosion;
            public TItem Sound;
            public TItem MuzzleFlashDuration;
            public TItem FadeDuration;
            public TItem ImpactForce;
            public TItem CountdownSound;
            public TItem DisaleSound;
            public TItem DefaultWeaponSource;
            public TItem ConeSpread;
            public TItem CollisionRadius;
            public TItem Lifetime;
            public TItem RelaunchInterval;
            public TItem DecalData;
            public TItem CollisionLayer;
            public TItem MuzzleFlashModel;
            public TItem TextureFilesHashes;
            public TItem SoundLevel;
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Gravity, rhs.Gravity)) return false;
                if (!object.Equals(this.Speed, rhs.Speed)) return false;
                if (!object.Equals(this.Range, rhs.Range)) return false;
                if (!object.Equals(this.Light, rhs.Light)) return false;
                if (!object.Equals(this.MuzzleFlash, rhs.MuzzleFlash)) return false;
                if (!object.Equals(this.TracerChance, rhs.TracerChance)) return false;
                if (!object.Equals(this.ExplosionAltTriggerProximity, rhs.ExplosionAltTriggerProximity)) return false;
                if (!object.Equals(this.ExplosionAltTriggerTimer, rhs.ExplosionAltTriggerTimer)) return false;
                if (!object.Equals(this.Explosion, rhs.Explosion)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.MuzzleFlashDuration, rhs.MuzzleFlashDuration)) return false;
                if (!object.Equals(this.FadeDuration, rhs.FadeDuration)) return false;
                if (!object.Equals(this.ImpactForce, rhs.ImpactForce)) return false;
                if (!object.Equals(this.CountdownSound, rhs.CountdownSound)) return false;
                if (!object.Equals(this.DisaleSound, rhs.DisaleSound)) return false;
                if (!object.Equals(this.DefaultWeaponSource, rhs.DefaultWeaponSource)) return false;
                if (!object.Equals(this.ConeSpread, rhs.ConeSpread)) return false;
                if (!object.Equals(this.CollisionRadius, rhs.CollisionRadius)) return false;
                if (!object.Equals(this.Lifetime, rhs.Lifetime)) return false;
                if (!object.Equals(this.RelaunchInterval, rhs.RelaunchInterval)) return false;
                if (!object.Equals(this.DecalData, rhs.DecalData)) return false;
                if (!object.Equals(this.CollisionLayer, rhs.CollisionLayer)) return false;
                if (!object.Equals(this.MuzzleFlashModel, rhs.MuzzleFlashModel)) return false;
                if (!object.Equals(this.TextureFilesHashes, rhs.TextureFilesHashes)) return false;
                if (!object.Equals(this.SoundLevel, rhs.SoundLevel)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.Destructible);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.Gravity);
                hash.Add(this.Speed);
                hash.Add(this.Range);
                hash.Add(this.Light);
                hash.Add(this.MuzzleFlash);
                hash.Add(this.TracerChance);
                hash.Add(this.ExplosionAltTriggerProximity);
                hash.Add(this.ExplosionAltTriggerTimer);
                hash.Add(this.Explosion);
                hash.Add(this.Sound);
                hash.Add(this.MuzzleFlashDuration);
                hash.Add(this.FadeDuration);
                hash.Add(this.ImpactForce);
                hash.Add(this.CountdownSound);
                hash.Add(this.DisaleSound);
                hash.Add(this.DefaultWeaponSource);
                hash.Add(this.ConeSpread);
                hash.Add(this.CollisionRadius);
                hash.Add(this.Lifetime);
                hash.Add(this.RelaunchInterval);
                hash.Add(this.DecalData);
                hash.Add(this.CollisionLayer);
                hash.Add(this.MuzzleFlashModel);
                hash.Add(this.TextureFilesHashes);
                hash.Add(this.SoundLevel);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Gravity)) return false;
                if (!eval(this.Speed)) return false;
                if (!eval(this.Range)) return false;
                if (!eval(this.Light)) return false;
                if (!eval(this.MuzzleFlash)) return false;
                if (!eval(this.TracerChance)) return false;
                if (!eval(this.ExplosionAltTriggerProximity)) return false;
                if (!eval(this.ExplosionAltTriggerTimer)) return false;
                if (!eval(this.Explosion)) return false;
                if (!eval(this.Sound)) return false;
                if (!eval(this.MuzzleFlashDuration)) return false;
                if (!eval(this.FadeDuration)) return false;
                if (!eval(this.ImpactForce)) return false;
                if (!eval(this.CountdownSound)) return false;
                if (!eval(this.DisaleSound)) return false;
                if (!eval(this.DefaultWeaponSource)) return false;
                if (!eval(this.ConeSpread)) return false;
                if (!eval(this.CollisionRadius)) return false;
                if (!eval(this.Lifetime)) return false;
                if (!eval(this.RelaunchInterval)) return false;
                if (!eval(this.DecalData)) return false;
                if (!eval(this.CollisionLayer)) return false;
                if (!eval(this.MuzzleFlashModel)) return false;
                if (!eval(this.TextureFilesHashes)) return false;
                if (!eval(this.SoundLevel)) return false;
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Gravity)) return true;
                if (eval(this.Speed)) return true;
                if (eval(this.Range)) return true;
                if (eval(this.Light)) return true;
                if (eval(this.MuzzleFlash)) return true;
                if (eval(this.TracerChance)) return true;
                if (eval(this.ExplosionAltTriggerProximity)) return true;
                if (eval(this.ExplosionAltTriggerTimer)) return true;
                if (eval(this.Explosion)) return true;
                if (eval(this.Sound)) return true;
                if (eval(this.MuzzleFlashDuration)) return true;
                if (eval(this.FadeDuration)) return true;
                if (eval(this.ImpactForce)) return true;
                if (eval(this.CountdownSound)) return true;
                if (eval(this.DisaleSound)) return true;
                if (eval(this.DefaultWeaponSource)) return true;
                if (eval(this.ConeSpread)) return true;
                if (eval(this.CollisionRadius)) return true;
                if (eval(this.Lifetime)) return true;
                if (eval(this.RelaunchInterval)) return true;
                if (eval(this.DecalData)) return true;
                if (eval(this.CollisionLayer)) return true;
                if (eval(this.MuzzleFlashModel)) return true;
                if (eval(this.TextureFilesHashes)) return true;
                if (eval(this.SoundLevel)) return true;
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Projectile.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.Gravity = eval(this.Gravity);
                obj.Speed = eval(this.Speed);
                obj.Range = eval(this.Range);
                obj.Light = eval(this.Light);
                obj.MuzzleFlash = eval(this.MuzzleFlash);
                obj.TracerChance = eval(this.TracerChance);
                obj.ExplosionAltTriggerProximity = eval(this.ExplosionAltTriggerProximity);
                obj.ExplosionAltTriggerTimer = eval(this.ExplosionAltTriggerTimer);
                obj.Explosion = eval(this.Explosion);
                obj.Sound = eval(this.Sound);
                obj.MuzzleFlashDuration = eval(this.MuzzleFlashDuration);
                obj.FadeDuration = eval(this.FadeDuration);
                obj.ImpactForce = eval(this.ImpactForce);
                obj.CountdownSound = eval(this.CountdownSound);
                obj.DisaleSound = eval(this.DisaleSound);
                obj.DefaultWeaponSource = eval(this.DefaultWeaponSource);
                obj.ConeSpread = eval(this.ConeSpread);
                obj.CollisionRadius = eval(this.CollisionRadius);
                obj.Lifetime = eval(this.Lifetime);
                obj.RelaunchInterval = eval(this.RelaunchInterval);
                obj.DecalData = eval(this.DecalData);
                obj.CollisionLayer = eval(this.CollisionLayer);
                obj.MuzzleFlashModel = eval(this.MuzzleFlashModel);
                obj.TextureFilesHashes = eval(this.TextureFilesHashes);
                obj.SoundLevel = eval(this.SoundLevel);
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Projectile.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Projectile.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Projectile.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.Print(sb);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.Gravity ?? true)
                    {
                        sb.AppendItem(Gravity, "Gravity");
                    }
                    if (printMask?.Speed ?? true)
                    {
                        sb.AppendItem(Speed, "Speed");
                    }
                    if (printMask?.Range ?? true)
                    {
                        sb.AppendItem(Range, "Range");
                    }
                    if (printMask?.Light ?? true)
                    {
                        sb.AppendItem(Light, "Light");
                    }
                    if (printMask?.MuzzleFlash ?? true)
                    {
                        sb.AppendItem(MuzzleFlash, "MuzzleFlash");
                    }
                    if (printMask?.TracerChance ?? true)
                    {
                        sb.AppendItem(TracerChance, "TracerChance");
                    }
                    if (printMask?.ExplosionAltTriggerProximity ?? true)
                    {
                        sb.AppendItem(ExplosionAltTriggerProximity, "ExplosionAltTriggerProximity");
                    }
                    if (printMask?.ExplosionAltTriggerTimer ?? true)
                    {
                        sb.AppendItem(ExplosionAltTriggerTimer, "ExplosionAltTriggerTimer");
                    }
                    if (printMask?.Explosion ?? true)
                    {
                        sb.AppendItem(Explosion, "Explosion");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        sb.AppendItem(Sound, "Sound");
                    }
                    if (printMask?.MuzzleFlashDuration ?? true)
                    {
                        sb.AppendItem(MuzzleFlashDuration, "MuzzleFlashDuration");
                    }
                    if (printMask?.FadeDuration ?? true)
                    {
                        sb.AppendItem(FadeDuration, "FadeDuration");
                    }
                    if (printMask?.ImpactForce ?? true)
                    {
                        sb.AppendItem(ImpactForce, "ImpactForce");
                    }
                    if (printMask?.CountdownSound ?? true)
                    {
                        sb.AppendItem(CountdownSound, "CountdownSound");
                    }
                    if (printMask?.DisaleSound ?? true)
                    {
                        sb.AppendItem(DisaleSound, "DisaleSound");
                    }
                    if (printMask?.DefaultWeaponSource ?? true)
                    {
                        sb.AppendItem(DefaultWeaponSource, "DefaultWeaponSource");
                    }
                    if (printMask?.ConeSpread ?? true)
                    {
                        sb.AppendItem(ConeSpread, "ConeSpread");
                    }
                    if (printMask?.CollisionRadius ?? true)
                    {
                        sb.AppendItem(CollisionRadius, "CollisionRadius");
                    }
                    if (printMask?.Lifetime ?? true)
                    {
                        sb.AppendItem(Lifetime, "Lifetime");
                    }
                    if (printMask?.RelaunchInterval ?? true)
                    {
                        sb.AppendItem(RelaunchInterval, "RelaunchInterval");
                    }
                    if (printMask?.DecalData ?? true)
                    {
                        sb.AppendItem(DecalData, "DecalData");
                    }
                    if (printMask?.CollisionLayer ?? true)
                    {
                        sb.AppendItem(CollisionLayer, "CollisionLayer");
                    }
                    if (printMask?.MuzzleFlashModel ?? true)
                    {
                        sb.AppendItem(MuzzleFlashModel, "MuzzleFlashModel");
                    }
                    if (printMask?.TextureFilesHashes ?? true)
                    {
                        sb.AppendItem(TextureFilesHashes, "TextureFilesHashes");
                    }
                    if (printMask?.SoundLevel ?? true)
                    {
                        sb.AppendItem(SoundLevel, "SoundLevel");
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? Flags;
            public Exception? Type;
            public Exception? Gravity;
            public Exception? Speed;
            public Exception? Range;
            public Exception? Light;
            public Exception? MuzzleFlash;
            public Exception? TracerChance;
            public Exception? ExplosionAltTriggerProximity;
            public Exception? ExplosionAltTriggerTimer;
            public Exception? Explosion;
            public Exception? Sound;
            public Exception? MuzzleFlashDuration;
            public Exception? FadeDuration;
            public Exception? ImpactForce;
            public Exception? CountdownSound;
            public Exception? DisaleSound;
            public Exception? DefaultWeaponSource;
            public Exception? ConeSpread;
            public Exception? CollisionRadius;
            public Exception? Lifetime;
            public Exception? RelaunchInterval;
            public Exception? DecalData;
            public Exception? CollisionLayer;
            public Exception? MuzzleFlashModel;
            public Exception? TextureFilesHashes;
            public Exception? SoundLevel;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
                switch (enu)
                {
                    case Projectile_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Projectile_FieldIndex.Name:
                        return Name;
                    case Projectile_FieldIndex.Model:
                        return Model;
                    case Projectile_FieldIndex.Destructible:
                        return Destructible;
                    case Projectile_FieldIndex.Flags:
                        return Flags;
                    case Projectile_FieldIndex.Type:
                        return Type;
                    case Projectile_FieldIndex.Gravity:
                        return Gravity;
                    case Projectile_FieldIndex.Speed:
                        return Speed;
                    case Projectile_FieldIndex.Range:
                        return Range;
                    case Projectile_FieldIndex.Light:
                        return Light;
                    case Projectile_FieldIndex.MuzzleFlash:
                        return MuzzleFlash;
                    case Projectile_FieldIndex.TracerChance:
                        return TracerChance;
                    case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                        return ExplosionAltTriggerProximity;
                    case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                        return ExplosionAltTriggerTimer;
                    case Projectile_FieldIndex.Explosion:
                        return Explosion;
                    case Projectile_FieldIndex.Sound:
                        return Sound;
                    case Projectile_FieldIndex.MuzzleFlashDuration:
                        return MuzzleFlashDuration;
                    case Projectile_FieldIndex.FadeDuration:
                        return FadeDuration;
                    case Projectile_FieldIndex.ImpactForce:
                        return ImpactForce;
                    case Projectile_FieldIndex.CountdownSound:
                        return CountdownSound;
                    case Projectile_FieldIndex.DisaleSound:
                        return DisaleSound;
                    case Projectile_FieldIndex.DefaultWeaponSource:
                        return DefaultWeaponSource;
                    case Projectile_FieldIndex.ConeSpread:
                        return ConeSpread;
                    case Projectile_FieldIndex.CollisionRadius:
                        return CollisionRadius;
                    case Projectile_FieldIndex.Lifetime:
                        return Lifetime;
                    case Projectile_FieldIndex.RelaunchInterval:
                        return RelaunchInterval;
                    case Projectile_FieldIndex.DecalData:
                        return DecalData;
                    case Projectile_FieldIndex.CollisionLayer:
                        return CollisionLayer;
                    case Projectile_FieldIndex.MuzzleFlashModel:
                        return MuzzleFlashModel;
                    case Projectile_FieldIndex.TextureFilesHashes:
                        return TextureFilesHashes;
                    case Projectile_FieldIndex.SoundLevel:
                        return SoundLevel;
                    case Projectile_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
                switch (enu)
                {
                    case Projectile_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Projectile_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Projectile_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Projectile_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Projectile_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Projectile_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case Projectile_FieldIndex.Gravity:
                        this.Gravity = ex;
                        break;
                    case Projectile_FieldIndex.Speed:
                        this.Speed = ex;
                        break;
                    case Projectile_FieldIndex.Range:
                        this.Range = ex;
                        break;
                    case Projectile_FieldIndex.Light:
                        this.Light = ex;
                        break;
                    case Projectile_FieldIndex.MuzzleFlash:
                        this.MuzzleFlash = ex;
                        break;
                    case Projectile_FieldIndex.TracerChance:
                        this.TracerChance = ex;
                        break;
                    case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                        this.ExplosionAltTriggerProximity = ex;
                        break;
                    case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                        this.ExplosionAltTriggerTimer = ex;
                        break;
                    case Projectile_FieldIndex.Explosion:
                        this.Explosion = ex;
                        break;
                    case Projectile_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    case Projectile_FieldIndex.MuzzleFlashDuration:
                        this.MuzzleFlashDuration = ex;
                        break;
                    case Projectile_FieldIndex.FadeDuration:
                        this.FadeDuration = ex;
                        break;
                    case Projectile_FieldIndex.ImpactForce:
                        this.ImpactForce = ex;
                        break;
                    case Projectile_FieldIndex.CountdownSound:
                        this.CountdownSound = ex;
                        break;
                    case Projectile_FieldIndex.DisaleSound:
                        this.DisaleSound = ex;
                        break;
                    case Projectile_FieldIndex.DefaultWeaponSource:
                        this.DefaultWeaponSource = ex;
                        break;
                    case Projectile_FieldIndex.ConeSpread:
                        this.ConeSpread = ex;
                        break;
                    case Projectile_FieldIndex.CollisionRadius:
                        this.CollisionRadius = ex;
                        break;
                    case Projectile_FieldIndex.Lifetime:
                        this.Lifetime = ex;
                        break;
                    case Projectile_FieldIndex.RelaunchInterval:
                        this.RelaunchInterval = ex;
                        break;
                    case Projectile_FieldIndex.DecalData:
                        this.DecalData = ex;
                        break;
                    case Projectile_FieldIndex.CollisionLayer:
                        this.CollisionLayer = ex;
                        break;
                    case Projectile_FieldIndex.MuzzleFlashModel:
                        this.MuzzleFlashModel = ex;
                        break;
                    case Projectile_FieldIndex.TextureFilesHashes:
                        this.TextureFilesHashes = ex;
                        break;
                    case Projectile_FieldIndex.SoundLevel:
                        this.SoundLevel = ex;
                        break;
                    case Projectile_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Projectile_FieldIndex enu = (Projectile_FieldIndex)index;
                switch (enu)
                {
                    case Projectile_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Projectile_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Projectile_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Projectile_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Gravity:
                        this.Gravity = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Speed:
                        this.Speed = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Range:
                        this.Range = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Light:
                        this.Light = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.MuzzleFlash:
                        this.MuzzleFlash = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.TracerChance:
                        this.TracerChance = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.ExplosionAltTriggerProximity:
                        this.ExplosionAltTriggerProximity = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.ExplosionAltTriggerTimer:
                        this.ExplosionAltTriggerTimer = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Explosion:
                        this.Explosion = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.MuzzleFlashDuration:
                        this.MuzzleFlashDuration = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.FadeDuration:
                        this.FadeDuration = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.ImpactForce:
                        this.ImpactForce = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.CountdownSound:
                        this.CountdownSound = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.DisaleSound:
                        this.DisaleSound = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.DefaultWeaponSource:
                        this.DefaultWeaponSource = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.ConeSpread:
                        this.ConeSpread = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.CollisionRadius:
                        this.CollisionRadius = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.Lifetime:
                        this.Lifetime = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.RelaunchInterval:
                        this.RelaunchInterval = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.DecalData:
                        this.DecalData = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.CollisionLayer:
                        this.CollisionLayer = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.MuzzleFlashModel:
                        this.MuzzleFlashModel = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.TextureFilesHashes:
                        this.TextureFilesHashes = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.SoundLevel:
                        this.SoundLevel = (Exception?)obj;
                        break;
                    case Projectile_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (Destructible != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (Gravity != null) return true;
                if (Speed != null) return true;
                if (Range != null) return true;
                if (Light != null) return true;
                if (MuzzleFlash != null) return true;
                if (TracerChance != null) return true;
                if (ExplosionAltTriggerProximity != null) return true;
                if (ExplosionAltTriggerTimer != null) return true;
                if (Explosion != null) return true;
                if (Sound != null) return true;
                if (MuzzleFlashDuration != null) return true;
                if (FadeDuration != null) return true;
                if (ImpactForce != null) return true;
                if (CountdownSound != null) return true;
                if (DisaleSound != null) return true;
                if (DefaultWeaponSource != null) return true;
                if (ConeSpread != null) return true;
                if (CollisionRadius != null) return true;
                if (Lifetime != null) return true;
                if (RelaunchInterval != null) return true;
                if (DecalData != null) return true;
                if (CollisionLayer != null) return true;
                if (MuzzleFlashModel != null) return true;
                if (TextureFilesHashes != null) return true;
                if (SoundLevel != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                Destructible?.Print(sb);
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(Gravity, "Gravity");
                }
                {
                    sb.AppendItem(Speed, "Speed");
                }
                {
                    sb.AppendItem(Range, "Range");
                }
                {
                    sb.AppendItem(Light, "Light");
                }
                {
                    sb.AppendItem(MuzzleFlash, "MuzzleFlash");
                }
                {
                    sb.AppendItem(TracerChance, "TracerChance");
                }
                {
                    sb.AppendItem(ExplosionAltTriggerProximity, "ExplosionAltTriggerProximity");
                }
                {
                    sb.AppendItem(ExplosionAltTriggerTimer, "ExplosionAltTriggerTimer");
                }
                {
                    sb.AppendItem(Explosion, "Explosion");
                }
                {
                    sb.AppendItem(Sound, "Sound");
                }
                {
                    sb.AppendItem(MuzzleFlashDuration, "MuzzleFlashDuration");
                }
                {
                    sb.AppendItem(FadeDuration, "FadeDuration");
                }
                {
                    sb.AppendItem(ImpactForce, "ImpactForce");
                }
                {
                    sb.AppendItem(CountdownSound, "CountdownSound");
                }
                {
                    sb.AppendItem(DisaleSound, "DisaleSound");
                }
                {
                    sb.AppendItem(DefaultWeaponSource, "DefaultWeaponSource");
                }
                {
                    sb.AppendItem(ConeSpread, "ConeSpread");
                }
                {
                    sb.AppendItem(CollisionRadius, "CollisionRadius");
                }
                {
                    sb.AppendItem(Lifetime, "Lifetime");
                }
                {
                    sb.AppendItem(RelaunchInterval, "RelaunchInterval");
                }
                {
                    sb.AppendItem(DecalData, "DecalData");
                }
                {
                    sb.AppendItem(CollisionLayer, "CollisionLayer");
                }
                {
                    sb.AppendItem(MuzzleFlashModel, "MuzzleFlashModel");
                }
                {
                    sb.AppendItem(TextureFilesHashes, "TextureFilesHashes");
                }
                {
                    sb.AppendItem(SoundLevel, "SoundLevel");
                }
                {
                    sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Gravity = this.Gravity.Combine(rhs.Gravity);
                ret.Speed = this.Speed.Combine(rhs.Speed);
                ret.Range = this.Range.Combine(rhs.Range);
                ret.Light = this.Light.Combine(rhs.Light);
                ret.MuzzleFlash = this.MuzzleFlash.Combine(rhs.MuzzleFlash);
                ret.TracerChance = this.TracerChance.Combine(rhs.TracerChance);
                ret.ExplosionAltTriggerProximity = this.ExplosionAltTriggerProximity.Combine(rhs.ExplosionAltTriggerProximity);
                ret.ExplosionAltTriggerTimer = this.ExplosionAltTriggerTimer.Combine(rhs.ExplosionAltTriggerTimer);
                ret.Explosion = this.Explosion.Combine(rhs.Explosion);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                ret.MuzzleFlashDuration = this.MuzzleFlashDuration.Combine(rhs.MuzzleFlashDuration);
                ret.FadeDuration = this.FadeDuration.Combine(rhs.FadeDuration);
                ret.ImpactForce = this.ImpactForce.Combine(rhs.ImpactForce);
                ret.CountdownSound = this.CountdownSound.Combine(rhs.CountdownSound);
                ret.DisaleSound = this.DisaleSound.Combine(rhs.DisaleSound);
                ret.DefaultWeaponSource = this.DefaultWeaponSource.Combine(rhs.DefaultWeaponSource);
                ret.ConeSpread = this.ConeSpread.Combine(rhs.ConeSpread);
                ret.CollisionRadius = this.CollisionRadius.Combine(rhs.CollisionRadius);
                ret.Lifetime = this.Lifetime.Combine(rhs.Lifetime);
                ret.RelaunchInterval = this.RelaunchInterval.Combine(rhs.RelaunchInterval);
                ret.DecalData = this.DecalData.Combine(rhs.DecalData);
                ret.CollisionLayer = this.CollisionLayer.Combine(rhs.CollisionLayer);
                ret.MuzzleFlashModel = this.MuzzleFlashModel.Combine(rhs.MuzzleFlashModel);
                ret.TextureFilesHashes = this.TextureFilesHashes.Combine(rhs.TextureFilesHashes);
                ret.SoundLevel = this.SoundLevel.Combine(rhs.SoundLevel);
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public Model.TranslationMask? Model;
            public Destructible.TranslationMask? Destructible;
            public bool Flags;
            public bool Type;
            public bool Gravity;
            public bool Speed;
            public bool Range;
            public bool Light;
            public bool MuzzleFlash;
            public bool TracerChance;
            public bool ExplosionAltTriggerProximity;
            public bool ExplosionAltTriggerTimer;
            public bool Explosion;
            public bool Sound;
            public bool MuzzleFlashDuration;
            public bool FadeDuration;
            public bool ImpactForce;
            public bool CountdownSound;
            public bool DisaleSound;
            public bool DefaultWeaponSource;
            public bool ConeSpread;
            public bool CollisionRadius;
            public bool Lifetime;
            public bool RelaunchInterval;
            public bool DecalData;
            public bool CollisionLayer;
            public bool MuzzleFlashModel;
            public bool TextureFilesHashes;
            public bool SoundLevel;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.Gravity = defaultOn;
                this.Speed = defaultOn;
                this.Range = defaultOn;
                this.Light = defaultOn;
                this.MuzzleFlash = defaultOn;
                this.TracerChance = defaultOn;
                this.ExplosionAltTriggerProximity = defaultOn;
                this.ExplosionAltTriggerTimer = defaultOn;
                this.Explosion = defaultOn;
                this.Sound = defaultOn;
                this.MuzzleFlashDuration = defaultOn;
                this.FadeDuration = defaultOn;
                this.ImpactForce = defaultOn;
                this.CountdownSound = defaultOn;
                this.DisaleSound = defaultOn;
                this.DefaultWeaponSource = defaultOn;
                this.ConeSpread = defaultOn;
                this.CollisionRadius = defaultOn;
                this.Lifetime = defaultOn;
                this.RelaunchInterval = defaultOn;
                this.DecalData = defaultOn;
                this.CollisionLayer = defaultOn;
                this.MuzzleFlashModel = defaultOn;
                this.TextureFilesHashes = defaultOn;
                this.SoundLevel = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((Gravity, null));
                ret.Add((Speed, null));
                ret.Add((Range, null));
                ret.Add((Light, null));
                ret.Add((MuzzleFlash, null));
                ret.Add((TracerChance, null));
                ret.Add((ExplosionAltTriggerProximity, null));
                ret.Add((ExplosionAltTriggerTimer, null));
                ret.Add((Explosion, null));
                ret.Add((Sound, null));
                ret.Add((MuzzleFlashDuration, null));
                ret.Add((FadeDuration, null));
                ret.Add((ImpactForce, null));
                ret.Add((CountdownSound, null));
                ret.Add((DisaleSound, null));
                ret.Add((DefaultWeaponSource, null));
                ret.Add((ConeSpread, null));
                ret.Add((CollisionRadius, null));
                ret.Add((Lifetime, null));
                ret.Add((RelaunchInterval, null));
                ret.Add((DecalData, null));
                ret.Add((CollisionLayer, null));
                ret.Add((MuzzleFlashModel, null));
                ret.Add((TextureFilesHashes, null));
                ret.Add((SoundLevel, null));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Projectile_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ProjectileCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ProjectileSetterCommon.Instance.RemapLinks(this, mapping);
        public Projectile(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Projectile(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Projectile(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Projectile(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Projectile(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Projectile>.ToString(this);
        }

        protected override Type LinkType => typeof(IProjectile);

        [Flags]
        public enum DATADataType
        {
            Break0 = 1,
            Break1 = 2
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ProjectileCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => ProjectileSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => ProjectileSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => ProjectileSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IProjectileGetter rhs) return false;
            return ((ProjectileCommon)((IProjectileGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IProjectileGetter? obj)
        {
            return ((ProjectileCommon)((IProjectileGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ProjectileCommon)((IProjectileGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ProjectileBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ProjectileBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Projectile CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Projectile();
            ((ProjectileSetterCommon)((IProjectileGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Projectile item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ProjectileSetterCommon)((IProjectileGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Projectile GetNew()
        {
            return new Projectile();
        }

    }
    #endregion

    #region Interface
    public partial interface IProjectile :
        IAssetLinkContainer,
        IExplodeSpawn,
        IFormLinkContainer,
        IHasDestructible,
        ILoquiObjectSetter<IProjectileInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IObjectId,
        IPlacedTrapTarget,
        IProjectileGetter,
        ISkyrimMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        /// <summary>
        /// Aspects: IHasDestructible
        /// </summary>
        new Destructible? Destructible { get; set; }
        new Projectile.Flag Flags { get; set; }
        new Projectile.TypeEnum Type { get; set; }
        new Single Gravity { get; set; }
        new Single Speed { get; set; }
        new Single Range { get; set; }
        new IFormLink<ILightGetter> Light { get; set; }
        new IFormLink<ILightGetter> MuzzleFlash { get; set; }
        new Single TracerChance { get; set; }
        new Single ExplosionAltTriggerProximity { get; set; }
        new Single ExplosionAltTriggerTimer { get; set; }
        new IFormLink<IExplosionGetter> Explosion { get; set; }
        new IFormLink<ISoundDescriptorGetter> Sound { get; set; }
        new Single MuzzleFlashDuration { get; set; }
        new Single FadeDuration { get; set; }
        new Single ImpactForce { get; set; }
        new IFormLink<ISoundDescriptorGetter> CountdownSound { get; set; }
        new IFormLink<ISoundDescriptorGetter> DisaleSound { get; set; }
        new IFormLink<IWeaponGetter> DefaultWeaponSource { get; set; }
        new Single ConeSpread { get; set; }
        new Single CollisionRadius { get; set; }
        new Single Lifetime { get; set; }
        new Single RelaunchInterval { get; set; }
        new IFormLink<ITextureSetGetter> DecalData { get; set; }
        new IFormLink<ICollisionLayerGetter> CollisionLayer { get; set; }
        new AssetLink<SkyrimModelAssetType> MuzzleFlashModel { get; set; }
        new MemorySlice<Byte>? TextureFilesHashes { get; set; }
        new UInt32 SoundLevel { get; set; }
        new Projectile.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface IProjectileInternal :
        ISkyrimMajorRecordInternal,
        IProjectile,
        IProjectileGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.PROJ)]
    public partial interface IProjectileGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        IHasDestructibleGetter,
        ILoquiObject<IProjectileGetter>,
        IMapsToGetter<IProjectileGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IObjectIdGetter,
        IPlacedTrapTargetGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Projectile_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        #region Destructible
        /// <summary>
        /// Aspects: IHasDestructibleGetter
        /// </summary>
        IDestructibleGetter? Destructible { get; }
        #endregion
        Projectile.Flag Flags { get; }
        Projectile.TypeEnum Type { get; }
        Single Gravity { get; }
        Single Speed { get; }
        Single Range { get; }
        IFormLinkGetter<ILightGetter> Light { get; }
        IFormLinkGetter<ILightGetter> MuzzleFlash { get; }
        Single TracerChance { get; }
        Single ExplosionAltTriggerProximity { get; }
        Single ExplosionAltTriggerTimer { get; }
        IFormLinkGetter<IExplosionGetter> Explosion { get; }
        IFormLinkGetter<ISoundDescriptorGetter> Sound { get; }
        Single MuzzleFlashDuration { get; }
        Single FadeDuration { get; }
        Single ImpactForce { get; }
        IFormLinkGetter<ISoundDescriptorGetter> CountdownSound { get; }
        IFormLinkGetter<ISoundDescriptorGetter> DisaleSound { get; }
        IFormLinkGetter<IWeaponGetter> DefaultWeaponSource { get; }
        Single ConeSpread { get; }
        Single CollisionRadius { get; }
        Single Lifetime { get; }
        Single RelaunchInterval { get; }
        IFormLinkGetter<ITextureSetGetter> DecalData { get; }
        IFormLinkGetter<ICollisionLayerGetter> CollisionLayer { get; }
        AssetLinkGetter<SkyrimModelAssetType> MuzzleFlashModel { get; }
        ReadOnlyMemorySlice<Byte>? TextureFilesHashes { get; }
        UInt32 SoundLevel { get; }
        Projectile.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ProjectileMixIn
    {
        public static void Clear(this IProjectileInternal item)
        {
            ((ProjectileSetterCommon)((IProjectileGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Projectile.Mask<bool> GetEqualsMask(
            this IProjectileGetter item,
            IProjectileGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IProjectileGetter item,
            string? name = null,
            Projectile.Mask<bool>? printMask = null)
        {
            return ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IProjectileGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Projectile.Mask<bool>? printMask = null)
        {
            ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IProjectileGetter item,
            IProjectileGetter rhs,
            Projectile.TranslationMask? equalsMask = null)
        {
            return ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IProjectileInternal lhs,
            IProjectileGetter rhs,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ProjectileSetterTranslationCommon)((IProjectileGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Projectile.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IProjectileInternal lhs,
            IProjectileGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ProjectileSetterTranslationCommon)((IProjectileGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Projectile DeepCopy(
            this IProjectileGetter item,
            Projectile.TranslationMask? copyMask = null)
        {
            return ((ProjectileSetterTranslationCommon)((IProjectileGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Projectile DeepCopy(
            this IProjectileGetter item,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? copyMask = null)
        {
            return ((ProjectileSetterTranslationCommon)((IProjectileGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Projectile DeepCopy(
            this IProjectileGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ProjectileSetterTranslationCommon)((IProjectileGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Projectile Duplicate(
            this IProjectileGetter item,
            FormKey formKey,
            Projectile.TranslationMask? copyMask = null)
        {
            return ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Projectile Duplicate(
            this IProjectileGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IProjectileInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ProjectileSetterCommon)((IProjectileGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Projectile_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        ObjectBounds = 7,
        Name = 8,
        Model = 9,
        Destructible = 10,
        Flags = 11,
        Type = 12,
        Gravity = 13,
        Speed = 14,
        Range = 15,
        Light = 16,
        MuzzleFlash = 17,
        TracerChance = 18,
        ExplosionAltTriggerProximity = 19,
        ExplosionAltTriggerTimer = 20,
        Explosion = 21,
        Sound = 22,
        MuzzleFlashDuration = 23,
        FadeDuration = 24,
        ImpactForce = 25,
        CountdownSound = 26,
        DisaleSound = 27,
        DefaultWeaponSource = 28,
        ConeSpread = 29,
        CollisionRadius = 30,
        Lifetime = 31,
        RelaunchInterval = 32,
        DecalData = 33,
        CollisionLayer = 34,
        MuzzleFlashModel = 35,
        TextureFilesHashes = 36,
        SoundLevel = 37,
        DATADataTypeState = 38,
    }
    #endregion

    #region Registration
    internal partial class Projectile_Registration : ILoquiRegistration
    {
        public static readonly Projectile_Registration Instance = new Projectile_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 32;

        public const ushort FieldCount = 39;

        public static readonly Type MaskType = typeof(Projectile.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Projectile.ErrorMask);

        public static readonly Type ClassType = typeof(Projectile);

        public static readonly Type GetterType = typeof(IProjectileGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IProjectile);

        public static readonly Type? InternalSetterType = typeof(IProjectileInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Projectile";

        public const string Name = "Projectile";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PROJ;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.PROJ);
            var all = RecordCollection.Factory(
                RecordTypes.PROJ,
                RecordTypes.OBND,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.DEST,
                RecordTypes.DSTD,
                RecordTypes.DMDL,
                RecordTypes.DATA,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.VNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ProjectileBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ProjectileSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ProjectileSetterCommon Instance = new ProjectileSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IProjectileInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Model = null;
            item.Destructible = null;
            item.Flags = default(Projectile.Flag);
            item.Type = default(Projectile.TypeEnum);
            item.Gravity = default(Single);
            item.Speed = default(Single);
            item.Range = default(Single);
            item.Light.Clear();
            item.MuzzleFlash.Clear();
            item.TracerChance = default(Single);
            item.ExplosionAltTriggerProximity = default(Single);
            item.ExplosionAltTriggerTimer = default(Single);
            item.Explosion.Clear();
            item.Sound.Clear();
            item.MuzzleFlashDuration = default(Single);
            item.FadeDuration = default(Single);
            item.ImpactForce = default(Single);
            item.CountdownSound.Clear();
            item.DisaleSound.Clear();
            item.DefaultWeaponSource.Clear();
            item.ConeSpread = default(Single);
            item.CollisionRadius = default(Single);
            item.Lifetime = default(Single);
            item.RelaunchInterval = default(Single);
            item.DecalData.Clear();
            item.CollisionLayer.Clear();
            item.MuzzleFlashModel.SetToNull();
            item.TextureFilesHashes = default;
            item.SoundLevel = default(UInt32);
            item.DATADataTypeState = default(Projectile.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IProjectileInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IProjectileInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IProjectile obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Model?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.Light.Relink(mapping);
            obj.MuzzleFlash.Relink(mapping);
            obj.Explosion.Relink(mapping);
            obj.Sound.Relink(mapping);
            obj.CountdownSound.Relink(mapping);
            obj.DisaleSound.Relink(mapping);
            obj.DefaultWeaponSource.Relink(mapping);
            obj.DecalData.Relink(mapping);
            obj.CollisionLayer.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IProjectile obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield return obj.MuzzleFlashModel;
            yield break;
        }
        
        public void RemapAssetLinks(
            IProjectile obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                obj.MuzzleFlashModel.Relink(mapping);
            }
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Destructible?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IProjectileInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IProjectileInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ProjectileBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ProjectileBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Projectile)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Projectile)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ProjectileCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ProjectileCommon Instance = new ProjectileCommon();

        public Projectile.Mask<bool> GetEqualsMask(
            IProjectileGetter item,
            IProjectileGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Projectile.Mask<bool>(false);
            ((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IProjectileGetter item,
            IProjectileGetter rhs,
            Projectile.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.Gravity = item.Gravity.EqualsWithin(rhs.Gravity);
            ret.Speed = item.Speed.EqualsWithin(rhs.Speed);
            ret.Range = item.Range.EqualsWithin(rhs.Range);
            ret.Light = item.Light.Equals(rhs.Light);
            ret.MuzzleFlash = item.MuzzleFlash.Equals(rhs.MuzzleFlash);
            ret.TracerChance = item.TracerChance.EqualsWithin(rhs.TracerChance);
            ret.ExplosionAltTriggerProximity = item.ExplosionAltTriggerProximity.EqualsWithin(rhs.ExplosionAltTriggerProximity);
            ret.ExplosionAltTriggerTimer = item.ExplosionAltTriggerTimer.EqualsWithin(rhs.ExplosionAltTriggerTimer);
            ret.Explosion = item.Explosion.Equals(rhs.Explosion);
            ret.Sound = item.Sound.Equals(rhs.Sound);
            ret.MuzzleFlashDuration = item.MuzzleFlashDuration.EqualsWithin(rhs.MuzzleFlashDuration);
            ret.FadeDuration = item.FadeDuration.EqualsWithin(rhs.FadeDuration);
            ret.ImpactForce = item.ImpactForce.EqualsWithin(rhs.ImpactForce);
            ret.CountdownSound = item.CountdownSound.Equals(rhs.CountdownSound);
            ret.DisaleSound = item.DisaleSound.Equals(rhs.DisaleSound);
            ret.DefaultWeaponSource = item.DefaultWeaponSource.Equals(rhs.DefaultWeaponSource);
            ret.ConeSpread = item.ConeSpread.EqualsWithin(rhs.ConeSpread);
            ret.CollisionRadius = item.CollisionRadius.EqualsWithin(rhs.CollisionRadius);
            ret.Lifetime = item.Lifetime.EqualsWithin(rhs.Lifetime);
            ret.RelaunchInterval = item.RelaunchInterval.EqualsWithin(rhs.RelaunchInterval);
            ret.DecalData = item.DecalData.Equals(rhs.DecalData);
            ret.CollisionLayer = item.CollisionLayer.Equals(rhs.CollisionLayer);
            ret.MuzzleFlashModel = object.Equals(item.MuzzleFlashModel, rhs.MuzzleFlashModel);
            ret.TextureFilesHashes = MemorySliceExt.SequenceEqual(item.TextureFilesHashes, rhs.TextureFilesHashes);
            ret.SoundLevel = item.SoundLevel == rhs.SoundLevel;
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IProjectileGetter item,
            string? name = null,
            Projectile.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IProjectileGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Projectile.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Projectile =>");
            }
            else
            {
                sb.AppendLine($"{name} (Projectile) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IProjectileGetter item,
            StructuredStringBuilder sb,
            Projectile.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.Print(sb, "Destructible");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if (printMask?.Gravity ?? true)
            {
                sb.AppendItem(item.Gravity, "Gravity");
            }
            if (printMask?.Speed ?? true)
            {
                sb.AppendItem(item.Speed, "Speed");
            }
            if (printMask?.Range ?? true)
            {
                sb.AppendItem(item.Range, "Range");
            }
            if (printMask?.Light ?? true)
            {
                sb.AppendItem(item.Light.FormKey, "Light");
            }
            if (printMask?.MuzzleFlash ?? true)
            {
                sb.AppendItem(item.MuzzleFlash.FormKey, "MuzzleFlash");
            }
            if (printMask?.TracerChance ?? true)
            {
                sb.AppendItem(item.TracerChance, "TracerChance");
            }
            if (printMask?.ExplosionAltTriggerProximity ?? true)
            {
                sb.AppendItem(item.ExplosionAltTriggerProximity, "ExplosionAltTriggerProximity");
            }
            if (printMask?.ExplosionAltTriggerTimer ?? true)
            {
                sb.AppendItem(item.ExplosionAltTriggerTimer, "ExplosionAltTriggerTimer");
            }
            if (printMask?.Explosion ?? true)
            {
                sb.AppendItem(item.Explosion.FormKey, "Explosion");
            }
            if (printMask?.Sound ?? true)
            {
                sb.AppendItem(item.Sound.FormKey, "Sound");
            }
            if (printMask?.MuzzleFlashDuration ?? true)
            {
                sb.AppendItem(item.MuzzleFlashDuration, "MuzzleFlashDuration");
            }
            if (printMask?.FadeDuration ?? true)
            {
                sb.AppendItem(item.FadeDuration, "FadeDuration");
            }
            if (printMask?.ImpactForce ?? true)
            {
                sb.AppendItem(item.ImpactForce, "ImpactForce");
            }
            if (printMask?.CountdownSound ?? true)
            {
                sb.AppendItem(item.CountdownSound.FormKey, "CountdownSound");
            }
            if (printMask?.DisaleSound ?? true)
            {
                sb.AppendItem(item.DisaleSound.FormKey, "DisaleSound");
            }
            if (printMask?.DefaultWeaponSource ?? true)
            {
                sb.AppendItem(item.DefaultWeaponSource.FormKey, "DefaultWeaponSource");
            }
            if (printMask?.ConeSpread ?? true)
            {
                sb.AppendItem(item.ConeSpread, "ConeSpread");
            }
            if (printMask?.CollisionRadius ?? true)
            {
                sb.AppendItem(item.CollisionRadius, "CollisionRadius");
            }
            if (printMask?.Lifetime ?? true)
            {
                sb.AppendItem(item.Lifetime, "Lifetime");
            }
            if (printMask?.RelaunchInterval ?? true)
            {
                sb.AppendItem(item.RelaunchInterval, "RelaunchInterval");
            }
            if (printMask?.DecalData ?? true)
            {
                sb.AppendItem(item.DecalData.FormKey, "DecalData");
            }
            if (printMask?.CollisionLayer ?? true)
            {
                sb.AppendItem(item.CollisionLayer.FormKey, "CollisionLayer");
            }
            if (printMask?.MuzzleFlashModel ?? true)
            {
                sb.AppendItem(item.MuzzleFlashModel, "MuzzleFlashModel");
            }
            if ((printMask?.TextureFilesHashes ?? true)
                && item.TextureFilesHashes is {} TextureFilesHashesItem)
            {
                sb.AppendLine($"TextureFilesHashes => {SpanExt.ToHexString(TextureFilesHashesItem)}");
            }
            if (printMask?.SoundLevel ?? true)
            {
                sb.AppendItem(item.SoundLevel, "SoundLevel");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                sb.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static Projectile_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Projectile_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Projectile_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Projectile_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Projectile_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Projectile_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Projectile_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Projectile_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IProjectileGetter? lhs,
            IProjectileGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Projectile_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Projectile_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, equalsMask?.GetSubCrystal((int)Projectile_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Gravity) ?? true))
            {
                if (!lhs.Gravity.EqualsWithin(rhs.Gravity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Speed) ?? true))
            {
                if (!lhs.Speed.EqualsWithin(rhs.Speed)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Range) ?? true))
            {
                if (!lhs.Range.EqualsWithin(rhs.Range)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Light) ?? true))
            {
                if (!lhs.Light.Equals(rhs.Light)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlash) ?? true))
            {
                if (!lhs.MuzzleFlash.Equals(rhs.MuzzleFlash)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.TracerChance) ?? true))
            {
                if (!lhs.TracerChance.EqualsWithin(rhs.TracerChance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.ExplosionAltTriggerProximity) ?? true))
            {
                if (!lhs.ExplosionAltTriggerProximity.EqualsWithin(rhs.ExplosionAltTriggerProximity)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.ExplosionAltTriggerTimer) ?? true))
            {
                if (!lhs.ExplosionAltTriggerTimer.EqualsWithin(rhs.ExplosionAltTriggerTimer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Explosion) ?? true))
            {
                if (!lhs.Explosion.Equals(rhs.Explosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Sound) ?? true))
            {
                if (!lhs.Sound.Equals(rhs.Sound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlashDuration) ?? true))
            {
                if (!lhs.MuzzleFlashDuration.EqualsWithin(rhs.MuzzleFlashDuration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.FadeDuration) ?? true))
            {
                if (!lhs.FadeDuration.EqualsWithin(rhs.FadeDuration)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.ImpactForce) ?? true))
            {
                if (!lhs.ImpactForce.EqualsWithin(rhs.ImpactForce)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.CountdownSound) ?? true))
            {
                if (!lhs.CountdownSound.Equals(rhs.CountdownSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.DisaleSound) ?? true))
            {
                if (!lhs.DisaleSound.Equals(rhs.DisaleSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.DefaultWeaponSource) ?? true))
            {
                if (!lhs.DefaultWeaponSource.Equals(rhs.DefaultWeaponSource)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.ConeSpread) ?? true))
            {
                if (!lhs.ConeSpread.EqualsWithin(rhs.ConeSpread)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.CollisionRadius) ?? true))
            {
                if (!lhs.CollisionRadius.EqualsWithin(rhs.CollisionRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.Lifetime) ?? true))
            {
                if (!lhs.Lifetime.EqualsWithin(rhs.Lifetime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.RelaunchInterval) ?? true))
            {
                if (!lhs.RelaunchInterval.EqualsWithin(rhs.RelaunchInterval)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.DecalData) ?? true))
            {
                if (!lhs.DecalData.Equals(rhs.DecalData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.CollisionLayer) ?? true))
            {
                if (!lhs.CollisionLayer.Equals(rhs.CollisionLayer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlashModel) ?? true))
            {
                if (!object.Equals(lhs.MuzzleFlashModel, rhs.MuzzleFlashModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.TextureFilesHashes) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TextureFilesHashes, rhs.TextureFilesHashes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.SoundLevel) ?? true))
            {
                if (lhs.SoundLevel != rhs.SoundLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Projectile_FieldIndex.DATADataTypeState) ?? true))
            {
                if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IProjectileGetter?)lhs,
                rhs: rhs as IProjectileGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IProjectileGetter?)lhs,
                rhs: rhs as IProjectileGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IProjectileGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.Gravity);
            hash.Add(item.Speed);
            hash.Add(item.Range);
            hash.Add(item.Light);
            hash.Add(item.MuzzleFlash);
            hash.Add(item.TracerChance);
            hash.Add(item.ExplosionAltTriggerProximity);
            hash.Add(item.ExplosionAltTriggerTimer);
            hash.Add(item.Explosion);
            hash.Add(item.Sound);
            hash.Add(item.MuzzleFlashDuration);
            hash.Add(item.FadeDuration);
            hash.Add(item.ImpactForce);
            hash.Add(item.CountdownSound);
            hash.Add(item.DisaleSound);
            hash.Add(item.DefaultWeaponSource);
            hash.Add(item.ConeSpread);
            hash.Add(item.CollisionRadius);
            hash.Add(item.Lifetime);
            hash.Add(item.RelaunchInterval);
            hash.Add(item.DecalData);
            hash.Add(item.CollisionLayer);
            hash.Add(item.MuzzleFlashModel);
            if (item.TextureFilesHashes is {} TextureFilesHashesItem)
            {
                hash.Add(TextureFilesHashesItem);
            }
            hash.Add(item.SoundLevel);
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IProjectileGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IProjectileGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Projectile.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IProjectileGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            yield return FormLinkInformation.Factory(obj.Light);
            yield return FormLinkInformation.Factory(obj.MuzzleFlash);
            yield return FormLinkInformation.Factory(obj.Explosion);
            yield return FormLinkInformation.Factory(obj.Sound);
            yield return FormLinkInformation.Factory(obj.CountdownSound);
            yield return FormLinkInformation.Factory(obj.DisaleSound);
            yield return FormLinkInformation.Factory(obj.DefaultWeaponSource);
            yield return FormLinkInformation.Factory(obj.DecalData);
            yield return FormLinkInformation.Factory(obj.CollisionLayer);
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IProjectileGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                yield return obj.MuzzleFlashModel;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Projectile Duplicate(
            IProjectileGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Projectile(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IProjectileGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IProjectileGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ProjectileSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ProjectileSetterTranslationCommon Instance = new ProjectileSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IProjectileInternal item,
            IProjectileGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IProjectile item,
            IProjectileGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Projectile_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Projectile_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Projectile_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Projectile_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Projectile_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Projectile_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Gravity) ?? true))
            {
                item.Gravity = rhs.Gravity;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Speed) ?? true))
            {
                item.Speed = rhs.Speed;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Range) ?? true))
            {
                item.Range = rhs.Range;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Light) ?? true))
            {
                item.Light.SetTo(rhs.Light.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlash) ?? true))
            {
                item.MuzzleFlash.SetTo(rhs.MuzzleFlash.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.TracerChance) ?? true))
            {
                item.TracerChance = rhs.TracerChance;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ExplosionAltTriggerProximity) ?? true))
            {
                item.ExplosionAltTriggerProximity = rhs.ExplosionAltTriggerProximity;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ExplosionAltTriggerTimer) ?? true))
            {
                item.ExplosionAltTriggerTimer = rhs.ExplosionAltTriggerTimer;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Explosion) ?? true))
            {
                item.Explosion.SetTo(rhs.Explosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Sound) ?? true))
            {
                item.Sound.SetTo(rhs.Sound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.MuzzleFlashDuration) ?? true))
            {
                item.MuzzleFlashDuration = rhs.MuzzleFlashDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.FadeDuration) ?? true))
            {
                item.FadeDuration = rhs.FadeDuration;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ImpactForce) ?? true))
            {
                item.ImpactForce = rhs.ImpactForce;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.CountdownSound) ?? true))
            {
                item.CountdownSound.SetTo(rhs.CountdownSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.DisaleSound) ?? true))
            {
                item.DisaleSound.SetTo(rhs.DisaleSound.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.DefaultWeaponSource) ?? true))
            {
                item.DefaultWeaponSource.SetTo(rhs.DefaultWeaponSource.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.ConeSpread) ?? true))
            {
                item.ConeSpread = rhs.ConeSpread;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.CollisionRadius) ?? true))
            {
                item.CollisionRadius = rhs.CollisionRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.Lifetime) ?? true))
            {
                item.Lifetime = rhs.Lifetime;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.RelaunchInterval) ?? true))
            {
                item.RelaunchInterval = rhs.RelaunchInterval;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.DecalData) ?? true))
            {
                item.DecalData.SetTo(rhs.DecalData.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.CollisionLayer) ?? true))
            {
                item.CollisionLayer.SetTo(rhs.CollisionLayer.FormKey);
            }
            item.MuzzleFlashModel.GivenPath = rhs.MuzzleFlashModel.GivenPath;
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.TextureFilesHashes) ?? true))
            {
                if(rhs.TextureFilesHashes is {} TextureFilesHashesrhs)
                {
                    item.TextureFilesHashes = TextureFilesHashesrhs.ToArray();
                }
                else
                {
                    item.TextureFilesHashes = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.SoundLevel) ?? true))
            {
                item.SoundLevel = rhs.SoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Projectile_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IProjectile item,
            IProjectileGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IProjectileInternal)item,
                rhs: (IProjectileGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IProjectile)item,
                rhs: (IProjectileGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IProjectileInternal)item,
                rhs: (IProjectileGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IProjectile)item,
                rhs: (IProjectileGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Projectile DeepCopy(
            IProjectileGetter item,
            Projectile.TranslationMask? copyMask = null)
        {
            Projectile ret = (Projectile)((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).GetNew();
            ((ProjectileSetterTranslationCommon)((IProjectileGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Projectile DeepCopy(
            IProjectileGetter item,
            out Projectile.ErrorMask errorMask,
            Projectile.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Projectile ret = (Projectile)((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).GetNew();
            ((ProjectileSetterTranslationCommon)((IProjectileGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Projectile.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Projectile DeepCopy(
            IProjectileGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Projectile ret = (Projectile)((ProjectileCommon)((IProjectileGetter)item).CommonInstance()!).GetNew();
            ((ProjectileSetterTranslationCommon)((IProjectileGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Projectile
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Projectile_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Projectile_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ProjectileCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ProjectileSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ProjectileSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class ProjectileBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ProjectileBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IProjectileGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IProjectileGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                EnumBinaryTranslation<Projectile.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 2);
                EnumBinaryTranslation<Projectile.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Type,
                    length: 2);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Gravity);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Speed);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Range);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Light);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.MuzzleFlash);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TracerChance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ExplosionAltTriggerProximity);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ExplosionAltTriggerTimer);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Explosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.MuzzleFlashDuration);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FadeDuration);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ImpactForce);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.CountdownSound);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DisaleSound);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DefaultWeaponSource);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ConeSpread);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.CollisionRadius);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Lifetime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.RelaunchInterval);
                if (!item.DATADataTypeState.HasFlag(Projectile.DATADataType.Break0))
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.DecalData);
                    if (!item.DATADataTypeState.HasFlag(Projectile.DATADataType.Break1))
                    {
                        FormLinkBinaryTranslation.Instance.Write(
                            writer: writer,
                            item: item.CollisionLayer);
                    }
                }
            }
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.MuzzleFlashModel.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextureFilesHashes,
                header: translationParams.ConvertToCustom(RecordTypes.NAM2));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.SoundLevel,
                header: translationParams.ConvertToCustom(RecordTypes.VNAM));
        }

        public void Write(
            MutagenWriter writer,
            IProjectileGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.PROJ,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IProjectileGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IProjectileGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IProjectileGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ProjectileBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly ProjectileBinaryCreateTranslation Instance = new ProjectileBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PROJ;
        public static void FillBinaryStructs(
            IProjectileInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IProjectileInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Projectile_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Projectile_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Projectile_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Projectile_FieldIndex.Destructible;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 2) return null;
                    item.Flags = EnumBinaryTranslation<Projectile.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 2);
                    if (dataFrame.Remaining < 2) return null;
                    item.Type = EnumBinaryTranslation<Projectile.TypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 2);
                    if (dataFrame.Remaining < 4) return null;
                    item.Gravity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Speed = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Range = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Light.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.MuzzleFlash.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.TracerChance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplosionAltTriggerProximity = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplosionAltTriggerTimer = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Explosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Sound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.MuzzleFlashDuration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FadeDuration = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ImpactForce = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CountdownSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.DisaleSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.DefaultWeaponSource.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ConeSpread = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.CollisionRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Lifetime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.RelaunchInterval = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= Projectile.DATADataType.Break0;
                        return (int)Projectile_FieldIndex.RelaunchInterval;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.DecalData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= Projectile.DATADataType.Break1;
                        return (int)Projectile_FieldIndex.DecalData;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.CollisionLayer.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Projectile_FieldIndex.CollisionLayer;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MuzzleFlashModel.GivenPath = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Projectile_FieldIndex.MuzzleFlashModel;
                }
                case RecordTypeInts.NAM2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureFilesHashes = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Projectile_FieldIndex.TextureFilesHashes;
                }
                case RecordTypeInts.VNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SoundLevel = frame.ReadUInt32();
                    return (int)Projectile_FieldIndex.SoundLevel;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ProjectileBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class ProjectileBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IProjectileGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Projectile_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Projectile_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ProjectileCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ProjectileSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ProjectileCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ProjectileCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ProjectileBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ProjectileBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IProjectile);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        private RangeInt32? _DATALocation;
        public Projectile.DATADataType DATADataTypeState { get; private set; }
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value.Min;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Projectile.Flag Flags => _Flags_IsSet ? (Projectile.Flag)BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x2)) : default;
        #endregion
        #region Type
        private int _TypeLocation => _DATALocation!.Value.Min + 0x2;
        private bool _Type_IsSet => _DATALocation.HasValue;
        public Projectile.TypeEnum Type => _Type_IsSet ? (Projectile.TypeEnum)BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Span.Slice(_TypeLocation, 0x2)) : default;
        #endregion
        #region Gravity
        private int _GravityLocation => _DATALocation!.Value.Min + 0x4;
        private bool _Gravity_IsSet => _DATALocation.HasValue;
        public Single Gravity => _Gravity_IsSet ? _recordData.Slice(_GravityLocation, 4).Float() : default(Single);
        #endregion
        #region Speed
        private int _SpeedLocation => _DATALocation!.Value.Min + 0x8;
        private bool _Speed_IsSet => _DATALocation.HasValue;
        public Single Speed => _Speed_IsSet ? _recordData.Slice(_SpeedLocation, 4).Float() : default(Single);
        #endregion
        #region Range
        private int _RangeLocation => _DATALocation!.Value.Min + 0xC;
        private bool _Range_IsSet => _DATALocation.HasValue;
        public Single Range => _Range_IsSet ? _recordData.Slice(_RangeLocation, 4).Float() : default(Single);
        #endregion
        #region Light
        private int _LightLocation => _DATALocation!.Value.Min + 0x10;
        private bool _Light_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<ILightGetter> Light => _Light_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ILightGetter>(_package, _recordData.Span.Slice(_LightLocation, 0x4), isSet: _Light_IsSet) : FormLink<ILightGetter>.Null;
        #endregion
        #region MuzzleFlash
        private int _MuzzleFlashLocation => _DATALocation!.Value.Min + 0x14;
        private bool _MuzzleFlash_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<ILightGetter> MuzzleFlash => _MuzzleFlash_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ILightGetter>(_package, _recordData.Span.Slice(_MuzzleFlashLocation, 0x4), isSet: _MuzzleFlash_IsSet) : FormLink<ILightGetter>.Null;
        #endregion
        #region TracerChance
        private int _TracerChanceLocation => _DATALocation!.Value.Min + 0x18;
        private bool _TracerChance_IsSet => _DATALocation.HasValue;
        public Single TracerChance => _TracerChance_IsSet ? _recordData.Slice(_TracerChanceLocation, 4).Float() : default(Single);
        #endregion
        #region ExplosionAltTriggerProximity
        private int _ExplosionAltTriggerProximityLocation => _DATALocation!.Value.Min + 0x1C;
        private bool _ExplosionAltTriggerProximity_IsSet => _DATALocation.HasValue;
        public Single ExplosionAltTriggerProximity => _ExplosionAltTriggerProximity_IsSet ? _recordData.Slice(_ExplosionAltTriggerProximityLocation, 4).Float() : default(Single);
        #endregion
        #region ExplosionAltTriggerTimer
        private int _ExplosionAltTriggerTimerLocation => _DATALocation!.Value.Min + 0x20;
        private bool _ExplosionAltTriggerTimer_IsSet => _DATALocation.HasValue;
        public Single ExplosionAltTriggerTimer => _ExplosionAltTriggerTimer_IsSet ? _recordData.Slice(_ExplosionAltTriggerTimerLocation, 4).Float() : default(Single);
        #endregion
        #region Explosion
        private int _ExplosionLocation => _DATALocation!.Value.Min + 0x24;
        private bool _Explosion_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> Explosion => _Explosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_ExplosionLocation, 0x4), isSet: _Explosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region Sound
        private int _SoundLocation => _DATALocation!.Value.Min + 0x28;
        private bool _Sound_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<ISoundDescriptorGetter> Sound => _Sound_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundDescriptorGetter>(_package, _recordData.Span.Slice(_SoundLocation, 0x4), isSet: _Sound_IsSet) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region MuzzleFlashDuration
        private int _MuzzleFlashDurationLocation => _DATALocation!.Value.Min + 0x2C;
        private bool _MuzzleFlashDuration_IsSet => _DATALocation.HasValue;
        public Single MuzzleFlashDuration => _MuzzleFlashDuration_IsSet ? _recordData.Slice(_MuzzleFlashDurationLocation, 4).Float() : default(Single);
        #endregion
        #region FadeDuration
        private int _FadeDurationLocation => _DATALocation!.Value.Min + 0x30;
        private bool _FadeDuration_IsSet => _DATALocation.HasValue;
        public Single FadeDuration => _FadeDuration_IsSet ? _recordData.Slice(_FadeDurationLocation, 4).Float() : default(Single);
        #endregion
        #region ImpactForce
        private int _ImpactForceLocation => _DATALocation!.Value.Min + 0x34;
        private bool _ImpactForce_IsSet => _DATALocation.HasValue;
        public Single ImpactForce => _ImpactForce_IsSet ? _recordData.Slice(_ImpactForceLocation, 4).Float() : default(Single);
        #endregion
        #region CountdownSound
        private int _CountdownSoundLocation => _DATALocation!.Value.Min + 0x38;
        private bool _CountdownSound_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<ISoundDescriptorGetter> CountdownSound => _CountdownSound_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundDescriptorGetter>(_package, _recordData.Span.Slice(_CountdownSoundLocation, 0x4), isSet: _CountdownSound_IsSet) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region DisaleSound
        private int _DisaleSoundLocation => _DATALocation!.Value.Min + 0x3C;
        private bool _DisaleSound_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<ISoundDescriptorGetter> DisaleSound => _DisaleSound_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundDescriptorGetter>(_package, _recordData.Span.Slice(_DisaleSoundLocation, 0x4), isSet: _DisaleSound_IsSet) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        #region DefaultWeaponSource
        private int _DefaultWeaponSourceLocation => _DATALocation!.Value.Min + 0x40;
        private bool _DefaultWeaponSource_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IWeaponGetter> DefaultWeaponSource => _DefaultWeaponSource_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IWeaponGetter>(_package, _recordData.Span.Slice(_DefaultWeaponSourceLocation, 0x4), isSet: _DefaultWeaponSource_IsSet) : FormLink<IWeaponGetter>.Null;
        #endregion
        #region ConeSpread
        private int _ConeSpreadLocation => _DATALocation!.Value.Min + 0x44;
        private bool _ConeSpread_IsSet => _DATALocation.HasValue;
        public Single ConeSpread => _ConeSpread_IsSet ? _recordData.Slice(_ConeSpreadLocation, 4).Float() : default(Single);
        #endregion
        #region CollisionRadius
        private int _CollisionRadiusLocation => _DATALocation!.Value.Min + 0x48;
        private bool _CollisionRadius_IsSet => _DATALocation.HasValue;
        public Single CollisionRadius => _CollisionRadius_IsSet ? _recordData.Slice(_CollisionRadiusLocation, 4).Float() : default(Single);
        #endregion
        #region Lifetime
        private int _LifetimeLocation => _DATALocation!.Value.Min + 0x4C;
        private bool _Lifetime_IsSet => _DATALocation.HasValue;
        public Single Lifetime => _Lifetime_IsSet ? _recordData.Slice(_LifetimeLocation, 4).Float() : default(Single);
        #endregion
        #region RelaunchInterval
        private int _RelaunchIntervalLocation => _DATALocation!.Value.Min + 0x50;
        private bool _RelaunchInterval_IsSet => _DATALocation.HasValue;
        public Single RelaunchInterval => _RelaunchInterval_IsSet ? _recordData.Slice(_RelaunchIntervalLocation, 4).Float() : default(Single);
        #endregion
        #region DecalData
        private int _DecalDataLocation => _DATALocation!.Value.Min + 0x54;
        private bool _DecalData_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Projectile.DATADataType.Break0);
        public IFormLinkGetter<ITextureSetGetter> DecalData => _DecalData_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ITextureSetGetter>(_package, _recordData.Span.Slice(_DecalDataLocation, 0x4), isSet: _DecalData_IsSet) : FormLink<ITextureSetGetter>.Null;
        #endregion
        #region CollisionLayer
        private int _CollisionLayerLocation => _DATALocation!.Value.Min + 0x58;
        private bool _CollisionLayer_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(Projectile.DATADataType.Break1);
        public IFormLinkGetter<ICollisionLayerGetter> CollisionLayer => _CollisionLayer_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ICollisionLayerGetter>(_package, _recordData.Span.Slice(_CollisionLayerLocation, 0x4), isSet: _CollisionLayer_IsSet) : FormLink<ICollisionLayerGetter>.Null;
        #endregion
        #region MuzzleFlashModel
        private int? _MuzzleFlashModelLocation;
        public AssetLinkGetter<SkyrimModelAssetType> MuzzleFlashModel => _MuzzleFlashModelLocation.HasValue ? new AssetLinkGetter<SkyrimModelAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MuzzleFlashModelLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : AssetLinkGetter<SkyrimModelAssetType>.Null;
        #endregion
        #region TextureFilesHashes
        private int? _TextureFilesHashesLocation;
        public ReadOnlyMemorySlice<Byte>? TextureFilesHashes => _TextureFilesHashesLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextureFilesHashesLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region SoundLevel
        private int? _SoundLevelLocation;
        public UInt32 SoundLevel => _SoundLevelLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SoundLevelLocation.Value, _package.MetaData.Constants)) : default(UInt32);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ProjectileBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IProjectileGetter ProjectileFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ProjectileBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IProjectileGetter ProjectileFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ProjectileFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Projectile_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Projectile_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Projectile_FieldIndex.Model;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Projectile_FieldIndex.Destructible;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x54)
                    {
                        this.DATADataTypeState |= Projectile.DATADataType.Break0;
                    }
                    if (subLen <= 0x58)
                    {
                        this.DATADataTypeState |= Projectile.DATADataType.Break1;
                    }
                    return (int)Projectile_FieldIndex.CollisionLayer;
                }
                case RecordTypeInts.NAM1:
                {
                    _MuzzleFlashModelLocation = (stream.Position - offset);
                    return (int)Projectile_FieldIndex.MuzzleFlashModel;
                }
                case RecordTypeInts.NAM2:
                {
                    _TextureFilesHashesLocation = (stream.Position - offset);
                    return (int)Projectile_FieldIndex.TextureFilesHashes;
                }
                case RecordTypeInts.VNAM:
                {
                    _SoundLevelLocation = (stream.Position - offset);
                    return (int)Projectile_FieldIndex.SoundLevel;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ProjectileMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Projectile>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IProjectileGetter rhs) return false;
            return ((ProjectileCommon)((IProjectileGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IProjectileGetter? obj)
        {
            return ((ProjectileCommon)((IProjectileGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ProjectileCommon)((IProjectileGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

