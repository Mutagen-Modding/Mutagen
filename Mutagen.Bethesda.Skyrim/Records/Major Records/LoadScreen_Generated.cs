/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Assets;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class LoadScreen :
        SkyrimMajorRecord,
        IEquatable<ILoadScreenGetter>,
        ILoadScreenInternal,
        ILoquiObjectSetter<LoadScreen>
    {
        #region Ctor
        protected LoadScreen()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Icons
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Icons? _Icons;
        /// <summary>
        /// Aspects: IHasIcons
        /// </summary>
        public Icons? Icons
        {
            get => _Icons;
            set => _Icons = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? ILoadScreenGetter.Icons => this.Icons;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IIconsGetter? IHasIconsGetter.Icons => this.Icons;
        #endregion
        #endregion
        #region Description
        public TranslatedString Description { get; set; } = string.Empty;
        ITranslatedStringGetter ILoadScreenGetter.Description => this.Description;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ILoadScreenGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region LoadingScreenNif
        private readonly IFormLink<IStaticGetter> _LoadingScreenNif = new FormLink<IStaticGetter>();
        public IFormLink<IStaticGetter> LoadingScreenNif
        {
            get => _LoadingScreenNif;
            set => _LoadingScreenNif.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IStaticGetter> ILoadScreenGetter.LoadingScreenNif => this.LoadingScreenNif;
        #endregion
        #region InitialScale
        public Single? InitialScale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? ILoadScreenGetter.InitialScale => this.InitialScale;
        #endregion
        #region InitialRotation
        public P3Int16? InitialRotation { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P3Int16? ILoadScreenGetter.InitialRotation => this.InitialRotation;
        #endregion
        #region RotationOffsetConstraints
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int16MinMax? _RotationOffsetConstraints;
        public Int16MinMax? RotationOffsetConstraints
        {
            get => _RotationOffsetConstraints;
            set => _RotationOffsetConstraints = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IInt16MinMaxGetter? ILoadScreenGetter.RotationOffsetConstraints => this.RotationOffsetConstraints;
        #endregion
        #region InitialTranslationOffset
        public P3Float? InitialTranslationOffset { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P3Float? ILoadScreenGetter.InitialTranslationOffset => this.InitialTranslationOffset;
        #endregion
        #region CameraPath
        public AssetLink<SkyrimModelAssetType>? CameraPath { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimModelAssetType>? ILoadScreenGetter.CameraPath => this.CameraPath;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LoadScreenMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(initialValue, new Icons.Mask<TItem>(initialValue));
                this.Description = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.LoadingScreenNif = initialValue;
                this.InitialScale = initialValue;
                this.InitialRotation = initialValue;
                this.RotationOffsetConstraints = new MaskItem<TItem, Int16MinMax.Mask<TItem>?>(initialValue, new Int16MinMax.Mask<TItem>(initialValue));
                this.InitialTranslationOffset = initialValue;
                this.CameraPath = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem Icons,
                TItem Description,
                TItem Conditions,
                TItem LoadingScreenNif,
                TItem InitialScale,
                TItem InitialRotation,
                TItem RotationOffsetConstraints,
                TItem InitialTranslationOffset,
                TItem CameraPath)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.Icons = new MaskItem<TItem, Icons.Mask<TItem>?>(Icons, new Icons.Mask<TItem>(Icons));
                this.Description = Description;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.LoadingScreenNif = LoadingScreenNif;
                this.InitialScale = InitialScale;
                this.InitialRotation = InitialRotation;
                this.RotationOffsetConstraints = new MaskItem<TItem, Int16MinMax.Mask<TItem>?>(RotationOffsetConstraints, new Int16MinMax.Mask<TItem>(RotationOffsetConstraints));
                this.InitialTranslationOffset = InitialTranslationOffset;
                this.CameraPath = CameraPath;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, Icons.Mask<TItem>?>? Icons { get; set; }
            public TItem Description;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public TItem LoadingScreenNif;
            public TItem InitialScale;
            public TItem InitialRotation;
            public MaskItem<TItem, Int16MinMax.Mask<TItem>?>? RotationOffsetConstraints { get; set; }
            public TItem InitialTranslationOffset;
            public TItem CameraPath;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Icons, rhs.Icons)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.LoadingScreenNif, rhs.LoadingScreenNif)) return false;
                if (!object.Equals(this.InitialScale, rhs.InitialScale)) return false;
                if (!object.Equals(this.InitialRotation, rhs.InitialRotation)) return false;
                if (!object.Equals(this.RotationOffsetConstraints, rhs.RotationOffsetConstraints)) return false;
                if (!object.Equals(this.InitialTranslationOffset, rhs.InitialTranslationOffset)) return false;
                if (!object.Equals(this.CameraPath, rhs.CameraPath)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Icons);
                hash.Add(this.Description);
                hash.Add(this.Conditions);
                hash.Add(this.LoadingScreenNif);
                hash.Add(this.InitialScale);
                hash.Add(this.InitialRotation);
                hash.Add(this.RotationOffsetConstraints);
                hash.Add(this.InitialTranslationOffset);
                hash.Add(this.CameraPath);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (Icons != null)
                {
                    if (!eval(this.Icons.Overall)) return false;
                    if (this.Icons.Specific != null && !this.Icons.Specific.All(eval)) return false;
                }
                if (!eval(this.Description)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.LoadingScreenNif)) return false;
                if (!eval(this.InitialScale)) return false;
                if (!eval(this.InitialRotation)) return false;
                if (RotationOffsetConstraints != null)
                {
                    if (!eval(this.RotationOffsetConstraints.Overall)) return false;
                    if (this.RotationOffsetConstraints.Specific != null && !this.RotationOffsetConstraints.Specific.All(eval)) return false;
                }
                if (!eval(this.InitialTranslationOffset)) return false;
                if (!eval(this.CameraPath)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (Icons != null)
                {
                    if (eval(this.Icons.Overall)) return true;
                    if (this.Icons.Specific != null && this.Icons.Specific.Any(eval)) return true;
                }
                if (eval(this.Description)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.LoadingScreenNif)) return true;
                if (eval(this.InitialScale)) return true;
                if (eval(this.InitialRotation)) return true;
                if (RotationOffsetConstraints != null)
                {
                    if (eval(this.RotationOffsetConstraints.Overall)) return true;
                    if (this.RotationOffsetConstraints.Specific != null && this.RotationOffsetConstraints.Specific.Any(eval)) return true;
                }
                if (eval(this.InitialTranslationOffset)) return true;
                if (eval(this.CameraPath)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LoadScreen.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Icons = this.Icons == null ? null : new MaskItem<R, Icons.Mask<R>?>(eval(this.Icons.Overall), this.Icons.Specific?.Translate(eval));
                obj.Description = eval(this.Description);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.LoadingScreenNif = eval(this.LoadingScreenNif);
                obj.InitialScale = eval(this.InitialScale);
                obj.InitialRotation = eval(this.InitialRotation);
                obj.RotationOffsetConstraints = this.RotationOffsetConstraints == null ? null : new MaskItem<R, Int16MinMax.Mask<R>?>(eval(this.RotationOffsetConstraints.Overall), this.RotationOffsetConstraints.Specific?.Translate(eval));
                obj.InitialTranslationOffset = eval(this.InitialTranslationOffset);
                obj.CameraPath = eval(this.CameraPath);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(LoadScreen.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, LoadScreen.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(LoadScreen.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Icons?.Overall ?? true)
                    {
                        Icons?.Print(sb);
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.LoadingScreenNif ?? true)
                    {
                        sb.AppendItem(LoadingScreenNif, "LoadingScreenNif");
                    }
                    if (printMask?.InitialScale ?? true)
                    {
                        sb.AppendItem(InitialScale, "InitialScale");
                    }
                    if (printMask?.InitialRotation ?? true)
                    {
                        sb.AppendItem(InitialRotation, "InitialRotation");
                    }
                    if (printMask?.RotationOffsetConstraints?.Overall ?? true)
                    {
                        RotationOffsetConstraints?.Print(sb);
                    }
                    if (printMask?.InitialTranslationOffset ?? true)
                    {
                        sb.AppendItem(InitialTranslationOffset, "InitialTranslationOffset");
                    }
                    if (printMask?.CameraPath ?? true)
                    {
                        sb.AppendItem(CameraPath, "CameraPath");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, Icons.ErrorMask?>? Icons;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public Exception? LoadingScreenNif;
            public Exception? InitialScale;
            public Exception? InitialRotation;
            public MaskItem<Exception?, Int16MinMax.ErrorMask?>? RotationOffsetConstraints;
            public Exception? InitialTranslationOffset;
            public Exception? CameraPath;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreen_FieldIndex.Icons:
                        return Icons;
                    case LoadScreen_FieldIndex.Description:
                        return Description;
                    case LoadScreen_FieldIndex.Conditions:
                        return Conditions;
                    case LoadScreen_FieldIndex.LoadingScreenNif:
                        return LoadingScreenNif;
                    case LoadScreen_FieldIndex.InitialScale:
                        return InitialScale;
                    case LoadScreen_FieldIndex.InitialRotation:
                        return InitialRotation;
                    case LoadScreen_FieldIndex.RotationOffsetConstraints:
                        return RotationOffsetConstraints;
                    case LoadScreen_FieldIndex.InitialTranslationOffset:
                        return InitialTranslationOffset;
                    case LoadScreen_FieldIndex.CameraPath:
                        return CameraPath;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreen_FieldIndex.Icons:
                        this.Icons = new MaskItem<Exception?, Icons.ErrorMask?>(ex, null);
                        break;
                    case LoadScreen_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case LoadScreen_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case LoadScreen_FieldIndex.LoadingScreenNif:
                        this.LoadingScreenNif = ex;
                        break;
                    case LoadScreen_FieldIndex.InitialScale:
                        this.InitialScale = ex;
                        break;
                    case LoadScreen_FieldIndex.InitialRotation:
                        this.InitialRotation = ex;
                        break;
                    case LoadScreen_FieldIndex.RotationOffsetConstraints:
                        this.RotationOffsetConstraints = new MaskItem<Exception?, Int16MinMax.ErrorMask?>(ex, null);
                        break;
                    case LoadScreen_FieldIndex.InitialTranslationOffset:
                        this.InitialTranslationOffset = ex;
                        break;
                    case LoadScreen_FieldIndex.CameraPath:
                        this.CameraPath = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LoadScreen_FieldIndex enu = (LoadScreen_FieldIndex)index;
                switch (enu)
                {
                    case LoadScreen_FieldIndex.Icons:
                        this.Icons = (MaskItem<Exception?, Icons.ErrorMask?>?)obj;
                        break;
                    case LoadScreen_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case LoadScreen_FieldIndex.LoadingScreenNif:
                        this.LoadingScreenNif = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.InitialScale:
                        this.InitialScale = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.InitialRotation:
                        this.InitialRotation = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.RotationOffsetConstraints:
                        this.RotationOffsetConstraints = (MaskItem<Exception?, Int16MinMax.ErrorMask?>?)obj;
                        break;
                    case LoadScreen_FieldIndex.InitialTranslationOffset:
                        this.InitialTranslationOffset = (Exception?)obj;
                        break;
                    case LoadScreen_FieldIndex.CameraPath:
                        this.CameraPath = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Icons != null) return true;
                if (Description != null) return true;
                if (Conditions != null) return true;
                if (LoadingScreenNif != null) return true;
                if (InitialScale != null) return true;
                if (InitialRotation != null) return true;
                if (RotationOffsetConstraints != null) return true;
                if (InitialTranslationOffset != null) return true;
                if (CameraPath != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                Icons?.Print(sb);
                {
                    sb.AppendItem(Description, "Description");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(LoadingScreenNif, "LoadingScreenNif");
                }
                {
                    sb.AppendItem(InitialScale, "InitialScale");
                }
                {
                    sb.AppendItem(InitialRotation, "InitialRotation");
                }
                RotationOffsetConstraints?.Print(sb);
                {
                    sb.AppendItem(InitialTranslationOffset, "InitialTranslationOffset");
                }
                {
                    sb.AppendItem(CameraPath, "CameraPath");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Icons = this.Icons.Combine(rhs.Icons, (l, r) => l.Combine(r));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.LoadingScreenNif = this.LoadingScreenNif.Combine(rhs.LoadingScreenNif);
                ret.InitialScale = this.InitialScale.Combine(rhs.InitialScale);
                ret.InitialRotation = this.InitialRotation.Combine(rhs.InitialRotation);
                ret.RotationOffsetConstraints = this.RotationOffsetConstraints.Combine(rhs.RotationOffsetConstraints, (l, r) => l.Combine(r));
                ret.InitialTranslationOffset = this.InitialTranslationOffset.Combine(rhs.InitialTranslationOffset);
                ret.CameraPath = this.CameraPath.Combine(rhs.CameraPath);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public Icons.TranslationMask? Icons;
            public bool Description;
            public Condition.TranslationMask? Conditions;
            public bool LoadingScreenNif;
            public bool InitialScale;
            public bool InitialRotation;
            public Int16MinMax.TranslationMask? RotationOffsetConstraints;
            public bool InitialTranslationOffset;
            public bool CameraPath;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Description = defaultOn;
                this.LoadingScreenNif = defaultOn;
                this.InitialScale = defaultOn;
                this.InitialRotation = defaultOn;
                this.InitialTranslationOffset = defaultOn;
                this.CameraPath = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Icons != null ? Icons.OnOverall : DefaultOn, Icons?.GetCrystal()));
                ret.Add((Description, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((LoadingScreenNif, null));
                ret.Add((InitialScale, null));
                ret.Add((InitialRotation, null));
                ret.Add((RotationOffsetConstraints != null ? RotationOffsetConstraints.OnOverall : DefaultOn, RotationOffsetConstraints?.GetCrystal()));
                ret.Add((InitialTranslationOffset, null));
                ret.Add((CameraPath, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = LoadScreen_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LoadScreenCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LoadScreenSetterCommon.Instance.RemapLinks(this, mapping);
        public LoadScreen(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private LoadScreen(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal LoadScreen(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public LoadScreen(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public LoadScreen(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<LoadScreen>.ToString(this);
        }

        protected override Type LinkType => typeof(ILoadScreen);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => LoadScreenCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => LoadScreenSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => LoadScreenSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => LoadScreenSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILoadScreenGetter rhs) return false;
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILoadScreenGetter? obj)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LoadScreenBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LoadScreenBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static LoadScreen CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new LoadScreen();
            ((LoadScreenSetterCommon)((ILoadScreenGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LoadScreen item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LoadScreen GetNew()
        {
            return new LoadScreen();
        }

    }
    #endregion

    #region Interface
    public partial interface ILoadScreen :
        IAssetLinkContainer,
        IFormLinkContainer,
        IHasIcons,
        ILoadScreenGetter,
        ILoquiObjectSetter<ILoadScreenInternal>,
        ISkyrimMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IHasIcons
        /// </summary>
        new Icons? Icons { get; set; }
        new TranslatedString Description { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new IFormLink<IStaticGetter> LoadingScreenNif { get; set; }
        new Single? InitialScale { get; set; }
        new P3Int16? InitialRotation { get; set; }
        new Int16MinMax? RotationOffsetConstraints { get; set; }
        new P3Float? InitialTranslationOffset { get; set; }
        new AssetLink<SkyrimModelAssetType>? CameraPath { get; set; }
        #region Mutagen
        new LoadScreen.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface ILoadScreenInternal :
        ISkyrimMajorRecordInternal,
        ILoadScreen,
        ILoadScreenGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.LSCR)]
    public partial interface ILoadScreenGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHasIconsGetter,
        ILoquiObject<ILoadScreenGetter>,
        IMapsToGetter<ILoadScreenGetter>
    {
        static new ILoquiRegistration StaticRegistration => LoadScreen_Registration.Instance;
        #region Icons
        /// <summary>
        /// Aspects: IHasIconsGetter
        /// </summary>
        IIconsGetter? Icons { get; }
        #endregion
        ITranslatedStringGetter Description { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IFormLinkGetter<IStaticGetter> LoadingScreenNif { get; }
        Single? InitialScale { get; }
        P3Int16? InitialRotation { get; }
        IInt16MinMaxGetter? RotationOffsetConstraints { get; }
        P3Float? InitialTranslationOffset { get; }
        AssetLinkGetter<SkyrimModelAssetType>? CameraPath { get; }

        #region Mutagen
        LoadScreen.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class LoadScreenMixIn
    {
        public static void Clear(this ILoadScreenInternal item)
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LoadScreen.Mask<bool> GetEqualsMask(
            this ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILoadScreenGetter item,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILoadScreenGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            LoadScreen.TranslationMask? equalsMask = null)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILoadScreenInternal lhs,
            ILoadScreenGetter rhs,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LoadScreen.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILoadScreenInternal lhs,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            LoadScreen.TranslationMask? copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LoadScreen DeepCopy(
            this ILoadScreenGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static LoadScreen Duplicate(
            this ILoadScreenGetter item,
            FormKey formKey,
            LoadScreen.TranslationMask? copyMask = null)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static LoadScreen Duplicate(
            this ILoadScreenGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILoadScreenInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LoadScreenSetterCommon)((ILoadScreenGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum LoadScreen_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        Icons = 7,
        Description = 8,
        Conditions = 9,
        LoadingScreenNif = 10,
        InitialScale = 11,
        InitialRotation = 12,
        RotationOffsetConstraints = 13,
        InitialTranslationOffset = 14,
        CameraPath = 15,
    }
    #endregion

    #region Registration
    internal partial class LoadScreen_Registration : ILoquiRegistration
    {
        public static readonly LoadScreen_Registration Instance = new LoadScreen_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 9;

        public const ushort FieldCount = 16;

        public static readonly Type MaskType = typeof(LoadScreen.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LoadScreen.ErrorMask);

        public static readonly Type ClassType = typeof(LoadScreen);

        public static readonly Type GetterType = typeof(ILoadScreenGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILoadScreen);

        public static readonly Type? InternalSetterType = typeof(ILoadScreenInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.LoadScreen";

        public const string Name = "LoadScreen";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LSCR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.LSCR);
            var all = RecordCollection.Factory(
                RecordTypes.LSCR,
                RecordTypes.ICON,
                RecordTypes.DESC,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.NNAM,
                RecordTypes.SNAM,
                RecordTypes.RNAM,
                RecordTypes.ONAM,
                RecordTypes.XNAM,
                RecordTypes.MOD2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LoadScreenBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LoadScreenSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly LoadScreenSetterCommon Instance = new LoadScreenSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILoadScreenInternal item)
        {
            ClearPartial();
            item.Icons = null;
            item.Description.Clear();
            item.Conditions.Clear();
            item.LoadingScreenNif.Clear();
            item.InitialScale = default;
            item.InitialRotation = default;
            item.RotationOffsetConstraints = null;
            item.InitialTranslationOffset = default;
            item.CameraPath = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ILoadScreenInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILoadScreenInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILoadScreen obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.LoadingScreenNif.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ILoadScreen obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.Icons is {} IconsItems)
            {
                foreach (var item in IconsItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.CameraPath != null)
            {
                yield return obj.CameraPath;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ILoadScreen obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                obj.CameraPath?.Relink(mapping);
            }
            obj.Icons?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILoadScreenInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ILoadScreenInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LoadScreenBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LoadScreenBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (LoadScreen)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (LoadScreen)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class LoadScreenCommon : SkyrimMajorRecordCommon
    {
        public new static readonly LoadScreenCommon Instance = new LoadScreenCommon();

        public LoadScreen.Mask<bool> GetEqualsMask(
            ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LoadScreen.Mask<bool>(false);
            ((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILoadScreenGetter item,
            ILoadScreenGetter rhs,
            LoadScreen.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Icons = EqualsMaskHelper.EqualsHelper(
                item.Icons,
                rhs.Icons,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LoadingScreenNif = item.LoadingScreenNif.Equals(rhs.LoadingScreenNif);
            ret.InitialScale = item.InitialScale.EqualsWithin(rhs.InitialScale);
            ret.InitialRotation = item.InitialRotation.Equals(rhs.InitialRotation);
            ret.RotationOffsetConstraints = EqualsMaskHelper.EqualsHelper(
                item.RotationOffsetConstraints,
                rhs.RotationOffsetConstraints,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.InitialTranslationOffset = item.InitialTranslationOffset.Equals(rhs.InitialTranslationOffset);
            ret.CameraPath = object.Equals(item.CameraPath, rhs.CameraPath);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ILoadScreenGetter item,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILoadScreenGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LoadScreen.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"LoadScreen =>");
            }
            else
            {
                sb.AppendLine($"{name} (LoadScreen) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILoadScreenGetter item,
            StructuredStringBuilder sb,
            LoadScreen.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Icons?.Overall ?? true)
                && item.Icons is {} IconsItem)
            {
                IconsItem?.Print(sb, "Icons");
            }
            if (printMask?.Description ?? true)
            {
                sb.AppendItem(item.Description, "Description");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.LoadingScreenNif ?? true)
            {
                sb.AppendItem(item.LoadingScreenNif.FormKey, "LoadingScreenNif");
            }
            if ((printMask?.InitialScale ?? true)
                && item.InitialScale is {} InitialScaleItem)
            {
                sb.AppendItem(InitialScaleItem, "InitialScale");
            }
            if ((printMask?.InitialRotation ?? true)
                && item.InitialRotation is {} InitialRotationItem)
            {
                sb.AppendItem(InitialRotationItem, "InitialRotation");
            }
            if ((printMask?.RotationOffsetConstraints?.Overall ?? true)
                && item.RotationOffsetConstraints is {} RotationOffsetConstraintsItem)
            {
                RotationOffsetConstraintsItem?.Print(sb, "RotationOffsetConstraints");
            }
            if ((printMask?.InitialTranslationOffset ?? true)
                && item.InitialTranslationOffset is {} InitialTranslationOffsetItem)
            {
                sb.AppendItem(InitialTranslationOffsetItem, "InitialTranslationOffset");
            }
            if ((printMask?.CameraPath ?? true)
                && item.CameraPath is {} CameraPathItem)
            {
                sb.AppendItem(CameraPathItem, "CameraPath");
            }
        }
        
        public static LoadScreen_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LoadScreen_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (LoadScreen_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (LoadScreen_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (LoadScreen_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (LoadScreen_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (LoadScreen_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (LoadScreen_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new LoadScreen_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (LoadScreen_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LoadScreen_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILoadScreenGetter? lhs,
            ILoadScreenGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Icons) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Icons, rhs.Icons, out var lhsIcons, out var rhsIcons, out var isIconsEqual))
                {
                    if (!((IconsCommon)((IIconsGetter)lhsIcons).CommonInstance()!).Equals(lhsIcons, rhsIcons, equalsMask?.GetSubCrystal((int)LoadScreen_FieldIndex.Icons))) return false;
                }
                else if (!isIconsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)LoadScreen_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.LoadingScreenNif) ?? true))
            {
                if (!lhs.LoadingScreenNif.Equals(rhs.LoadingScreenNif)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.InitialScale) ?? true))
            {
                if (!lhs.InitialScale.EqualsWithin(rhs.InitialScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.InitialRotation) ?? true))
            {
                if (!lhs.InitialRotation.Equals(rhs.InitialRotation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.RotationOffsetConstraints) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.RotationOffsetConstraints, rhs.RotationOffsetConstraints, out var lhsRotationOffsetConstraints, out var rhsRotationOffsetConstraints, out var isRotationOffsetConstraintsEqual))
                {
                    if (!((Int16MinMaxCommon)((IInt16MinMaxGetter)lhsRotationOffsetConstraints).CommonInstance()!).Equals(lhsRotationOffsetConstraints, rhsRotationOffsetConstraints, equalsMask?.GetSubCrystal((int)LoadScreen_FieldIndex.RotationOffsetConstraints))) return false;
                }
                else if (!isRotationOffsetConstraintsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.InitialTranslationOffset) ?? true))
            {
                if (!lhs.InitialTranslationOffset.Equals(rhs.InitialTranslationOffset)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.CameraPath) ?? true))
            {
                if (!object.Equals(lhs.CameraPath, rhs.CameraPath)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILoadScreenGetter?)lhs,
                rhs: rhs as ILoadScreenGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILoadScreenGetter?)lhs,
                rhs: rhs as ILoadScreenGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ILoadScreenGetter item)
        {
            var hash = new HashCode();
            if (item.Icons is {} Iconsitem)
            {
                hash.Add(Iconsitem);
            }
            hash.Add(item.Description);
            hash.Add(item.Conditions);
            hash.Add(item.LoadingScreenNif);
            if (item.InitialScale is {} InitialScaleitem)
            {
                hash.Add(InitialScaleitem);
            }
            if (item.InitialRotation is {} InitialRotationitem)
            {
                hash.Add(InitialRotationitem);
            }
            if (item.RotationOffsetConstraints is {} RotationOffsetConstraintsitem)
            {
                hash.Add(RotationOffsetConstraintsitem);
            }
            if (item.InitialTranslationOffset is {} InitialTranslationOffsetitem)
            {
                hash.Add(InitialTranslationOffsetitem);
            }
            if (item.CameraPath is {} CameraPathitem)
            {
                hash.Add(CameraPathitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ILoadScreenGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILoadScreenGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LoadScreen.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILoadScreenGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield return FormLinkInformation.Factory(obj.LoadingScreenNif);
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ILoadScreenGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                if (obj.CameraPath != null)
                {
                    yield return obj.CameraPath;
                }
            }
            if (obj.Icons is {} IconsItems)
            {
                foreach (var item in IconsItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public LoadScreen Duplicate(
            ILoadScreenGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new LoadScreen(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILoadScreenGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILoadScreenGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class LoadScreenSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly LoadScreenSetterTranslationCommon Instance = new LoadScreenSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILoadScreenInternal item,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILoadScreen item,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Icons) ?? true))
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Icons);
                try
                {
                    if(rhs.Icons is {} rhsIcons)
                    {
                        item.Icons = rhsIcons.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LoadScreen_FieldIndex.Icons));
                    }
                    else
                    {
                        item.Icons = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.LoadingScreenNif) ?? true))
            {
                item.LoadingScreenNif.SetTo(rhs.LoadingScreenNif.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.InitialScale) ?? true))
            {
                item.InitialScale = rhs.InitialScale;
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.InitialRotation) ?? true))
            {
                item.InitialRotation = rhs.InitialRotation;
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.RotationOffsetConstraints) ?? true))
            {
                errorMask?.PushIndex((int)LoadScreen_FieldIndex.RotationOffsetConstraints);
                try
                {
                    if(rhs.RotationOffsetConstraints is {} rhsRotationOffsetConstraints)
                    {
                        item.RotationOffsetConstraints = rhsRotationOffsetConstraints.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LoadScreen_FieldIndex.RotationOffsetConstraints));
                    }
                    else
                    {
                        item.RotationOffsetConstraints = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LoadScreen_FieldIndex.InitialTranslationOffset) ?? true))
            {
                item.InitialTranslationOffset = rhs.InitialTranslationOffset;
            }
            item.CameraPath = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.CameraPath, rhs.CameraPath);
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ILoadScreen item,
            ILoadScreenGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILoadScreenInternal)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILoadScreen)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILoadScreenInternal)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILoadScreen)item,
                rhs: (ILoadScreenGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            LoadScreen.TranslationMask? copyMask = null)
        {
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetNew();
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            out LoadScreen.ErrorMask errorMask,
            LoadScreen.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetNew();
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LoadScreen.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LoadScreen DeepCopy(
            ILoadScreenGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LoadScreen ret = (LoadScreen)((LoadScreenCommon)((ILoadScreenGetter)item).CommonInstance()!).GetNew();
            ((LoadScreenSetterTranslationCommon)((ILoadScreenGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class LoadScreen
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreen_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => LoadScreen_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LoadScreenCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LoadScreenSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LoadScreenSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class LoadScreenBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly LoadScreenBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ILoadScreenGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.Icons is {} IconsItem)
            {
                ((IconsBinaryWriteTranslation)((IBinaryItem)IconsItem).BinaryWriteTranslator).Write(
                    item: IconsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LoadingScreenNif,
                header: translationParams.ConvertToCustom(RecordTypes.NNAM));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.InitialScale,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            P3Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.InitialRotation,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            if (item.RotationOffsetConstraints is {} RotationOffsetConstraintsItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.ONAM))
                {
                    ((Int16MinMaxBinaryWriteTranslation)((IBinaryItem)RotationOffsetConstraintsItem).BinaryWriteTranslator).Write(
                        item: RotationOffsetConstraintsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.InitialTranslationOffset,
                header: translationParams.ConvertToCustom(RecordTypes.XNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CameraPath?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.MOD2),
                binaryType: StringBinaryType.NullTerminate);
        }

        public void Write(
            MutagenWriter writer,
            ILoadScreenGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.LSCR,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILoadScreenGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILoadScreenGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILoadScreenGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LoadScreenBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly LoadScreenBinaryCreateTranslation Instance = new LoadScreenBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LSCR;
        public static ParseResult FillBinaryRecordTypes(
            ILoadScreenInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    item.Icons = Mutagen.Bethesda.Skyrim.Icons.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)LoadScreen_FieldIndex.Icons;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)LoadScreen_FieldIndex.Description;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)LoadScreen_FieldIndex.Conditions;
                }
                case RecordTypeInts.NNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LoadingScreenNif.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)LoadScreen_FieldIndex.LoadingScreenNif;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InitialScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)LoadScreen_FieldIndex.InitialScale;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InitialRotation = P3Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)LoadScreen_FieldIndex.InitialRotation;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.RotationOffsetConstraints = Mutagen.Bethesda.Skyrim.Int16MinMax.CreateFromBinary(frame: frame);
                    return (int)LoadScreen_FieldIndex.RotationOffsetConstraints;
                }
                case RecordTypeInts.XNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.InitialTranslationOffset = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)LoadScreen_FieldIndex.InitialTranslationOffset;
                }
                case RecordTypeInts.MOD2:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CameraPath = AssetLinkBinaryTranslation.Instance.Parse<SkyrimModelAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)LoadScreen_FieldIndex.CameraPath;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class LoadScreenBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class LoadScreenBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ILoadScreenGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LoadScreen_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => LoadScreen_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LoadScreenCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LoadScreenSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LoadScreenCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => LoadScreenCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LoadScreenBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LoadScreenBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ILoadScreen);

        public LoadScreen.MajorFlag MajorFlags => (LoadScreen.MajorFlag)this.MajorRecordFlagsRaw;

        public IIconsGetter? Icons { get; private set; }
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : TranslatedString.Empty;
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = Array.Empty<IConditionGetter>();
        #region LoadingScreenNif
        private int? _LoadingScreenNifLocation;
        public IFormLinkGetter<IStaticGetter> LoadingScreenNif => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IStaticGetter>(_package, _recordData, _LoadingScreenNifLocation);
        #endregion
        #region InitialScale
        private int? _InitialScaleLocation;
        public Single? InitialScale => _InitialScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _InitialScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region InitialRotation
        private int? _InitialRotationLocation;
        public P3Int16? InitialRotation => _InitialRotationLocation.HasValue ? P3Int16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(HeaderTranslation.ExtractSubrecordMemory(_recordData, _InitialRotationLocation.Value, _package.MetaData.Constants)) : default(P3Int16?);
        #endregion
        public IInt16MinMaxGetter? RotationOffsetConstraints { get; private set; }
        #region InitialTranslationOffset
        private int? _InitialTranslationOffsetLocation;
        public P3Float? InitialTranslationOffset => _InitialTranslationOffsetLocation.HasValue ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(HeaderTranslation.ExtractSubrecordMemory(_recordData, _InitialTranslationOffsetLocation.Value, _package.MetaData.Constants)) : default(P3Float?);
        #endregion
        #region CameraPath
        private int? _CameraPathLocation;
        public AssetLinkGetter<SkyrimModelAssetType>? CameraPath => _CameraPathLocation.HasValue ? new AssetLinkGetter<SkyrimModelAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _CameraPathLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimModelAssetType>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LoadScreenBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILoadScreenGetter LoadScreenFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new LoadScreenBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ILoadScreenGetter LoadScreenFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LoadScreenFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ICON:
                {
                    this.Icons = IconsBinaryOverlay.IconsFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)LoadScreen_FieldIndex.Icons;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.Description;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)LoadScreen_FieldIndex.Conditions;
                }
                case RecordTypeInts.NNAM:
                {
                    _LoadingScreenNifLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.LoadingScreenNif;
                }
                case RecordTypeInts.SNAM:
                {
                    _InitialScaleLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.InitialScale;
                }
                case RecordTypeInts.RNAM:
                {
                    _InitialRotationLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.InitialRotation;
                }
                case RecordTypeInts.ONAM:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.RotationOffsetConstraints = Int16MinMaxBinaryOverlay.Int16MinMaxFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)LoadScreen_FieldIndex.RotationOffsetConstraints;
                }
                case RecordTypeInts.XNAM:
                {
                    _InitialTranslationOffsetLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.InitialTranslationOffset;
                }
                case RecordTypeInts.MOD2:
                {
                    _CameraPathLocation = (stream.Position - offset);
                    return (int)LoadScreen_FieldIndex.CameraPath;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LoadScreenMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<LoadScreen>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILoadScreenGetter rhs) return false;
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILoadScreenGetter? obj)
        {
            return ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LoadScreenCommon)((ILoadScreenGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

