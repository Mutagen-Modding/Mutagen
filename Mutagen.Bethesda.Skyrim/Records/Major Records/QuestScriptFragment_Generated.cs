/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class QuestScriptFragment :
        IEquatable<IQuestScriptFragmentGetter>,
        ILoquiObjectSetter<QuestScriptFragment>,
        IQuestScriptFragment
    {
        #region Ctor
        public QuestScriptFragment()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Stage
        public UInt16 Stage { get; set; } = default(UInt16);
        #endregion
        #region Unknown
        public Int16 Unknown { get; set; } = default(Int16);
        #endregion
        #region StageIndex
        public Int32 StageIndex { get; set; } = default(Int32);
        #endregion
        #region Unknown2
        public SByte Unknown2 { get; set; } = default(SByte);
        #endregion
        #region ScriptName
        public String ScriptName { get; set; } = string.Empty;
        #endregion
        #region FragmentName
        public String FragmentName { get; set; } = string.Empty;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestScriptFragmentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestScriptFragmentGetter rhs) return false;
            return ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestScriptFragmentGetter? obj)
        {
            return ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Stage = initialValue;
                this.Unknown = initialValue;
                this.StageIndex = initialValue;
                this.Unknown2 = initialValue;
                this.ScriptName = initialValue;
                this.FragmentName = initialValue;
            }

            public Mask(
                TItem Stage,
                TItem Unknown,
                TItem StageIndex,
                TItem Unknown2,
                TItem ScriptName,
                TItem FragmentName)
            {
                this.Stage = Stage;
                this.Unknown = Unknown;
                this.StageIndex = StageIndex;
                this.Unknown2 = Unknown2;
                this.ScriptName = ScriptName;
                this.FragmentName = FragmentName;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Stage;
            public TItem Unknown;
            public TItem StageIndex;
            public TItem Unknown2;
            public TItem ScriptName;
            public TItem FragmentName;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Stage, rhs.Stage)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.StageIndex, rhs.StageIndex)) return false;
                if (!object.Equals(this.Unknown2, rhs.Unknown2)) return false;
                if (!object.Equals(this.ScriptName, rhs.ScriptName)) return false;
                if (!object.Equals(this.FragmentName, rhs.FragmentName)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Stage);
                hash.Add(this.Unknown);
                hash.Add(this.StageIndex);
                hash.Add(this.Unknown2);
                hash.Add(this.ScriptName);
                hash.Add(this.FragmentName);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Stage)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.StageIndex)) return false;
                if (!eval(this.Unknown2)) return false;
                if (!eval(this.ScriptName)) return false;
                if (!eval(this.FragmentName)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Stage)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.StageIndex)) return true;
                if (eval(this.Unknown2)) return true;
                if (eval(this.ScriptName)) return true;
                if (eval(this.FragmentName)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new QuestScriptFragment.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Stage = eval(this.Stage);
                obj.Unknown = eval(this.Unknown);
                obj.StageIndex = eval(this.StageIndex);
                obj.Unknown2 = eval(this.Unknown2);
                obj.ScriptName = eval(this.ScriptName);
                obj.FragmentName = eval(this.FragmentName);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(QuestScriptFragment.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, QuestScriptFragment.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(QuestScriptFragment.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Stage ?? true)
                    {
                        sb.AppendItem(Stage, "Stage");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.StageIndex ?? true)
                    {
                        sb.AppendItem(StageIndex, "StageIndex");
                    }
                    if (printMask?.Unknown2 ?? true)
                    {
                        sb.AppendItem(Unknown2, "Unknown2");
                    }
                    if (printMask?.ScriptName ?? true)
                    {
                        sb.AppendItem(ScriptName, "ScriptName");
                    }
                    if (printMask?.FragmentName ?? true)
                    {
                        sb.AppendItem(FragmentName, "FragmentName");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Stage;
            public Exception? Unknown;
            public Exception? StageIndex;
            public Exception? Unknown2;
            public Exception? ScriptName;
            public Exception? FragmentName;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                QuestScriptFragment_FieldIndex enu = (QuestScriptFragment_FieldIndex)index;
                switch (enu)
                {
                    case QuestScriptFragment_FieldIndex.Stage:
                        return Stage;
                    case QuestScriptFragment_FieldIndex.Unknown:
                        return Unknown;
                    case QuestScriptFragment_FieldIndex.StageIndex:
                        return StageIndex;
                    case QuestScriptFragment_FieldIndex.Unknown2:
                        return Unknown2;
                    case QuestScriptFragment_FieldIndex.ScriptName:
                        return ScriptName;
                    case QuestScriptFragment_FieldIndex.FragmentName:
                        return FragmentName;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                QuestScriptFragment_FieldIndex enu = (QuestScriptFragment_FieldIndex)index;
                switch (enu)
                {
                    case QuestScriptFragment_FieldIndex.Stage:
                        this.Stage = ex;
                        break;
                    case QuestScriptFragment_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case QuestScriptFragment_FieldIndex.StageIndex:
                        this.StageIndex = ex;
                        break;
                    case QuestScriptFragment_FieldIndex.Unknown2:
                        this.Unknown2 = ex;
                        break;
                    case QuestScriptFragment_FieldIndex.ScriptName:
                        this.ScriptName = ex;
                        break;
                    case QuestScriptFragment_FieldIndex.FragmentName:
                        this.FragmentName = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                QuestScriptFragment_FieldIndex enu = (QuestScriptFragment_FieldIndex)index;
                switch (enu)
                {
                    case QuestScriptFragment_FieldIndex.Stage:
                        this.Stage = (Exception?)obj;
                        break;
                    case QuestScriptFragment_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case QuestScriptFragment_FieldIndex.StageIndex:
                        this.StageIndex = (Exception?)obj;
                        break;
                    case QuestScriptFragment_FieldIndex.Unknown2:
                        this.Unknown2 = (Exception?)obj;
                        break;
                    case QuestScriptFragment_FieldIndex.ScriptName:
                        this.ScriptName = (Exception?)obj;
                        break;
                    case QuestScriptFragment_FieldIndex.FragmentName:
                        this.FragmentName = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Stage != null) return true;
                if (Unknown != null) return true;
                if (StageIndex != null) return true;
                if (Unknown2 != null) return true;
                if (ScriptName != null) return true;
                if (FragmentName != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Stage, "Stage");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(StageIndex, "StageIndex");
                }
                {
                    sb.AppendItem(Unknown2, "Unknown2");
                }
                {
                    sb.AppendItem(ScriptName, "ScriptName");
                }
                {
                    sb.AppendItem(FragmentName, "FragmentName");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Stage = this.Stage.Combine(rhs.Stage);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.StageIndex = this.StageIndex.Combine(rhs.StageIndex);
                ret.Unknown2 = this.Unknown2.Combine(rhs.Unknown2);
                ret.ScriptName = this.ScriptName.Combine(rhs.ScriptName);
                ret.FragmentName = this.FragmentName.Combine(rhs.FragmentName);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Stage;
            public bool Unknown;
            public bool StageIndex;
            public bool Unknown2;
            public bool ScriptName;
            public bool FragmentName;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Stage = defaultOn;
                this.Unknown = defaultOn;
                this.StageIndex = defaultOn;
                this.Unknown2 = defaultOn;
                this.ScriptName = defaultOn;
                this.FragmentName = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Stage, null));
                ret.Add((Unknown, null));
                ret.Add((StageIndex, null));
                ret.Add((Unknown2, null));
                ret.Add((ScriptName, null));
                ret.Add((FragmentName, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => QuestScriptFragmentBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestScriptFragmentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static QuestScriptFragment CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new QuestScriptFragment();
            ((QuestScriptFragmentSetterCommon)((IQuestScriptFragmentGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out QuestScriptFragment item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((QuestScriptFragmentSetterCommon)((IQuestScriptFragmentGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static QuestScriptFragment GetNew()
        {
            return new QuestScriptFragment();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestScriptFragment :
        ILoquiObjectSetter<IQuestScriptFragment>,
        IQuestScriptFragmentGetter
    {
        new UInt16 Stage { get; set; }
        new Int16 Unknown { get; set; }
        new Int32 StageIndex { get; set; }
        new SByte Unknown2 { get; set; }
        new String ScriptName { get; set; }
        new String FragmentName { get; set; }
    }

    public partial interface IQuestScriptFragmentGetter :
        ILoquiObject,
        IBinaryItem,
        ILoquiObject<IQuestScriptFragmentGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => QuestScriptFragment_Registration.Instance;
        UInt16 Stage { get; }
        Int16 Unknown { get; }
        Int32 StageIndex { get; }
        SByte Unknown2 { get; }
        String ScriptName { get; }
        String FragmentName { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class QuestScriptFragmentMixIn
    {
        public static void Clear(this IQuestScriptFragment item)
        {
            ((QuestScriptFragmentSetterCommon)((IQuestScriptFragmentGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static QuestScriptFragment.Mask<bool> GetEqualsMask(
            this IQuestScriptFragmentGetter item,
            IQuestScriptFragmentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IQuestScriptFragmentGetter item,
            string? name = null,
            QuestScriptFragment.Mask<bool>? printMask = null)
        {
            return ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IQuestScriptFragmentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestScriptFragment.Mask<bool>? printMask = null)
        {
            ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IQuestScriptFragmentGetter item,
            IQuestScriptFragmentGetter rhs,
            QuestScriptFragment.TranslationMask? equalsMask = null)
        {
            return ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IQuestScriptFragment lhs,
            IQuestScriptFragmentGetter rhs)
        {
            ((QuestScriptFragmentSetterTranslationCommon)((IQuestScriptFragmentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IQuestScriptFragment lhs,
            IQuestScriptFragmentGetter rhs,
            QuestScriptFragment.TranslationMask? copyMask = null)
        {
            ((QuestScriptFragmentSetterTranslationCommon)((IQuestScriptFragmentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IQuestScriptFragment lhs,
            IQuestScriptFragmentGetter rhs,
            out QuestScriptFragment.ErrorMask errorMask,
            QuestScriptFragment.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestScriptFragmentSetterTranslationCommon)((IQuestScriptFragmentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = QuestScriptFragment.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestScriptFragment lhs,
            IQuestScriptFragmentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestScriptFragmentSetterTranslationCommon)((IQuestScriptFragmentGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static QuestScriptFragment DeepCopy(
            this IQuestScriptFragmentGetter item,
            QuestScriptFragment.TranslationMask? copyMask = null)
        {
            return ((QuestScriptFragmentSetterTranslationCommon)((IQuestScriptFragmentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static QuestScriptFragment DeepCopy(
            this IQuestScriptFragmentGetter item,
            out QuestScriptFragment.ErrorMask errorMask,
            QuestScriptFragment.TranslationMask? copyMask = null)
        {
            return ((QuestScriptFragmentSetterTranslationCommon)((IQuestScriptFragmentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static QuestScriptFragment DeepCopy(
            this IQuestScriptFragmentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestScriptFragmentSetterTranslationCommon)((IQuestScriptFragmentGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IQuestScriptFragment item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((QuestScriptFragmentSetterCommon)((IQuestScriptFragmentGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum QuestScriptFragment_FieldIndex
    {
        Stage = 0,
        Unknown = 1,
        StageIndex = 2,
        Unknown2 = 3,
        ScriptName = 4,
        FragmentName = 5,
    }
    #endregion

    #region Registration
    internal partial class QuestScriptFragment_Registration : ILoquiRegistration
    {
        public static readonly QuestScriptFragment_Registration Instance = new QuestScriptFragment_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 6;

        public static readonly Type MaskType = typeof(QuestScriptFragment.Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestScriptFragment.ErrorMask);

        public static readonly Type ClassType = typeof(QuestScriptFragment);

        public static readonly Type GetterType = typeof(IQuestScriptFragmentGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuestScriptFragment);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.QuestScriptFragment";

        public const string Name = "QuestScriptFragment";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly Type BinaryWriteTranslation = typeof(QuestScriptFragmentBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class QuestScriptFragmentSetterCommon
    {
        public static readonly QuestScriptFragmentSetterCommon Instance = new QuestScriptFragmentSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestScriptFragment item)
        {
            ClearPartial();
            item.Stage = default(UInt16);
            item.Unknown = default(Int16);
            item.StageIndex = default(Int32);
            item.Unknown2 = default(SByte);
            item.ScriptName = string.Empty;
            item.FragmentName = string.Empty;
        }
        
        #region Mutagen
        public void RemapLinks(IQuestScriptFragment obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestScriptFragment item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: QuestScriptFragmentBinaryCreateTranslation.FillBinaryStructs);
        }
        
        #endregion
        
    }
    internal partial class QuestScriptFragmentCommon
    {
        public static readonly QuestScriptFragmentCommon Instance = new QuestScriptFragmentCommon();

        public QuestScriptFragment.Mask<bool> GetEqualsMask(
            IQuestScriptFragmentGetter item,
            IQuestScriptFragmentGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new QuestScriptFragment.Mask<bool>(false);
            ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestScriptFragmentGetter item,
            IQuestScriptFragmentGetter rhs,
            QuestScriptFragment.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Stage = item.Stage == rhs.Stage;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.StageIndex = item.StageIndex == rhs.StageIndex;
            ret.Unknown2 = item.Unknown2 == rhs.Unknown2;
            ret.ScriptName = string.Equals(item.ScriptName, rhs.ScriptName);
            ret.FragmentName = string.Equals(item.FragmentName, rhs.FragmentName);
        }
        
        public string Print(
            IQuestScriptFragmentGetter item,
            string? name = null,
            QuestScriptFragment.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IQuestScriptFragmentGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestScriptFragment.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"QuestScriptFragment =>");
            }
            else
            {
                sb.AppendLine($"{name} (QuestScriptFragment) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IQuestScriptFragmentGetter item,
            StructuredStringBuilder sb,
            QuestScriptFragment.Mask<bool>? printMask = null)
        {
            if (printMask?.Stage ?? true)
            {
                sb.AppendItem(item.Stage, "Stage");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.StageIndex ?? true)
            {
                sb.AppendItem(item.StageIndex, "StageIndex");
            }
            if (printMask?.Unknown2 ?? true)
            {
                sb.AppendItem(item.Unknown2, "Unknown2");
            }
            if (printMask?.ScriptName ?? true)
            {
                sb.AppendItem(item.ScriptName, "ScriptName");
            }
            if (printMask?.FragmentName ?? true)
            {
                sb.AppendItem(item.FragmentName, "FragmentName");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestScriptFragmentGetter? lhs,
            IQuestScriptFragmentGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.Stage) ?? true))
            {
                if (lhs.Stage != rhs.Stage) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.StageIndex) ?? true))
            {
                if (lhs.StageIndex != rhs.StageIndex) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.Unknown2) ?? true))
            {
                if (lhs.Unknown2 != rhs.Unknown2) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.ScriptName) ?? true))
            {
                if (!string.Equals(lhs.ScriptName, rhs.ScriptName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.FragmentName) ?? true))
            {
                if (!string.Equals(lhs.FragmentName, rhs.FragmentName)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IQuestScriptFragmentGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Stage);
            hash.Add(item.Unknown);
            hash.Add(item.StageIndex);
            hash.Add(item.Unknown2);
            hash.Add(item.ScriptName);
            hash.Add(item.FragmentName);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return QuestScriptFragment.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IQuestScriptFragmentGetter obj)
        {
            yield break;
        }
        
        #endregion
        
    }
    internal partial class QuestScriptFragmentSetterTranslationCommon
    {
        public static readonly QuestScriptFragmentSetterTranslationCommon Instance = new QuestScriptFragmentSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IQuestScriptFragment item,
            IQuestScriptFragmentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.Stage) ?? true))
            {
                item.Stage = rhs.Stage;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.StageIndex) ?? true))
            {
                item.StageIndex = rhs.StageIndex;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.Unknown2) ?? true))
            {
                item.Unknown2 = rhs.Unknown2;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.ScriptName) ?? true))
            {
                item.ScriptName = rhs.ScriptName;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestScriptFragment_FieldIndex.FragmentName) ?? true))
            {
                item.FragmentName = rhs.FragmentName;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IQuestScriptFragment item,
            IQuestScriptFragmentGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public QuestScriptFragment DeepCopy(
            IQuestScriptFragmentGetter item,
            QuestScriptFragment.TranslationMask? copyMask = null)
        {
            QuestScriptFragment ret = (QuestScriptFragment)((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)item).CommonInstance()!).GetNew();
            ((QuestScriptFragmentSetterTranslationCommon)((IQuestScriptFragmentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public QuestScriptFragment DeepCopy(
            IQuestScriptFragmentGetter item,
            out QuestScriptFragment.ErrorMask errorMask,
            QuestScriptFragment.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestScriptFragment ret = (QuestScriptFragment)((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)item).CommonInstance()!).GetNew();
            ((QuestScriptFragmentSetterTranslationCommon)((IQuestScriptFragmentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = QuestScriptFragment.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public QuestScriptFragment DeepCopy(
            IQuestScriptFragmentGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            QuestScriptFragment ret = (QuestScriptFragment)((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)item).CommonInstance()!).GetNew();
            ((QuestScriptFragmentSetterTranslationCommon)((IQuestScriptFragmentGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class QuestScriptFragment
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestScriptFragment_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => QuestScriptFragment_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => QuestScriptFragmentCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return QuestScriptFragmentSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => QuestScriptFragmentSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IQuestScriptFragmentGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IQuestScriptFragmentGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IQuestScriptFragmentGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class QuestScriptFragmentBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly QuestScriptFragmentBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IQuestScriptFragmentGetter item,
            MutagenWriter writer)
        {
            writer.Write(item.Stage);
            writer.Write(item.Unknown);
            writer.Write(item.StageIndex);
            writer.Write(item.Unknown2);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.ScriptName,
                binaryType: StringBinaryType.PrependLengthUShort);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.FragmentName,
                binaryType: StringBinaryType.PrependLengthUShort);
        }

        public void Write(
            MutagenWriter writer,
            IQuestScriptFragmentGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IQuestScriptFragmentGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class QuestScriptFragmentBinaryCreateTranslation
    {
        public static readonly QuestScriptFragmentBinaryCreateTranslation Instance = new QuestScriptFragmentBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IQuestScriptFragment item,
            MutagenFrame frame)
        {
            item.Stage = frame.ReadUInt16();
            item.Unknown = frame.ReadInt16();
            item.StageIndex = frame.ReadInt32();
            item.Unknown2 = frame.ReadInt8();
            item.ScriptName = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthUShort,
                parseWhole: true);
            item.FragmentName = StringBinaryTranslation.Instance.Parse(
                reader: frame,
                stringBinaryType: StringBinaryType.PrependLengthUShort,
                parseWhole: true);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class QuestScriptFragmentBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IQuestScriptFragmentGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestScriptFragmentBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class QuestScriptFragmentBinaryOverlay :
        PluginBinaryOverlay,
        IQuestScriptFragmentGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestScriptFragment_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => QuestScriptFragment_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => QuestScriptFragmentCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => QuestScriptFragmentSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IQuestScriptFragmentGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IQuestScriptFragmentGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IQuestScriptFragmentGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => QuestScriptFragmentBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestScriptFragmentBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        public UInt16 Stage => BinaryPrimitives.ReadUInt16LittleEndian(_structData.Slice(0x0, 0x2));
        public Int16 Unknown => BinaryPrimitives.ReadInt16LittleEndian(_structData.Slice(0x2, 0x2));
        public Int32 StageIndex => BinaryPrimitives.ReadInt32LittleEndian(_structData.Slice(0x4, 0x4));
        public SByte Unknown2 => (sbyte)_structData.Slice(0x8, 0x1)[0];
        #region ScriptName
        public String ScriptName => BinaryStringUtility.ParsePrependedString(_structData.Slice(0x9), lengthLength: 2, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int ScriptNameEndingPos;
        #endregion
        #region FragmentName
        public String FragmentName => BinaryStringUtility.ParsePrependedString(_structData.Slice(ScriptNameEndingPos), lengthLength: 2, encoding: _package.MetaData.Encodings.NonTranslated);
        protected int FragmentNameEndingPos;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestScriptFragmentBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static void QuestScriptFragmentParseEndingPositions(
            QuestScriptFragmentBinaryOverlay ret,
            BinaryOverlayFactoryPackage package)
        {
            ret.ScriptNameEndingPos = 0x9 + BinaryPrimitives.ReadUInt16LittleEndian(ret._structData.Slice(0x9)) + 2;
            ret.FragmentNameEndingPos = ret.ScriptNameEndingPos + BinaryPrimitives.ReadUInt16LittleEndian(ret._structData.Slice(ret.ScriptNameEndingPos)) + 2;
        }

        public static IQuestScriptFragmentGetter QuestScriptFragmentFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordStructMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new QuestScriptFragmentBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            QuestScriptFragmentParseEndingPositions(ret, package);
            stream.Position += ret.FragmentNameEndingPos;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: stream.Length,
                offset: offset);
            return ret;
        }

        public static IQuestScriptFragmentGetter QuestScriptFragmentFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return QuestScriptFragmentFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestScriptFragmentMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestScriptFragmentGetter rhs) return false;
            return ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestScriptFragmentGetter? obj)
        {
            return ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestScriptFragmentCommon)((IQuestScriptFragmentGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

