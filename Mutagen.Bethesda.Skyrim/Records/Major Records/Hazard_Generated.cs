/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Hazard :
        SkyrimMajorRecord,
        IEquatable<IHazardGetter>,
        IHazardInternal,
        ILoquiObjectSetter<Hazard>
    {
        #region Ctor
        protected Hazard()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IHazardGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IHazardGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Model
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Model? _Model;
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        public Model? Model
        {
            get => _Model;
            set => _Model = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IHazardGetter.Model => this.Model;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IModelGetter? IModeledGetter.Model => this.Model;
        #endregion
        #endregion
        #region ImageSpaceModifier
        private readonly IFormLinkNullable<IImageSpaceAdapterGetter> _ImageSpaceModifier = new FormLinkNullable<IImageSpaceAdapterGetter>();
        public IFormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier
        {
            get => _ImageSpaceModifier;
            set => _ImageSpaceModifier.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IImageSpaceAdapterGetter> IHazardGetter.ImageSpaceModifier => this.ImageSpaceModifier;
        #endregion
        #region Limit
        public UInt32 Limit { get; set; } = default(UInt32);
        #endregion
        #region Radius
        public Single Radius { get; set; } = default(Single);
        #endregion
        #region Lifetime
        public Single Lifetime { get; set; } = default(Single);
        #endregion
        #region ImageSpaceRadius
        public Single ImageSpaceRadius { get; set; } = default(Single);
        #endregion
        #region TargetInterval
        public Single TargetInterval { get; set; } = default(Single);
        #endregion
        #region Flags
        public Hazard.Flag Flags { get; set; } = default(Hazard.Flag);
        #endregion
        #region Spell
        private readonly IFormLink<IEffectRecordGetter> _Spell = new FormLink<IEffectRecordGetter>();
        public IFormLink<IEffectRecordGetter> Spell
        {
            get => _Spell;
            set => _Spell.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IEffectRecordGetter> IHazardGetter.Spell => this.Spell;
        #endregion
        #region Light
        private readonly IFormLink<ILightGetter> _Light = new FormLink<ILightGetter>();
        public IFormLink<ILightGetter> Light
        {
            get => _Light;
            set => _Light.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ILightGetter> IHazardGetter.Light => this.Light;
        #endregion
        #region ImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _ImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> ImpactDataSet
        {
            get => _ImpactDataSet;
            set => _ImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IHazardGetter.ImpactDataSet => this.ImpactDataSet;
        #endregion
        #region Sound
        private readonly IFormLink<ISoundDescriptorGetter> _Sound = new FormLink<ISoundDescriptorGetter>();
        public IFormLink<ISoundDescriptorGetter> Sound
        {
            get => _Sound;
            set => _Sound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<ISoundDescriptorGetter> IHazardGetter.Sound => this.Sound;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HazardMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(initialValue, new Model.Mask<TItem>(initialValue));
                this.ImageSpaceModifier = initialValue;
                this.Limit = initialValue;
                this.Radius = initialValue;
                this.Lifetime = initialValue;
                this.ImageSpaceRadius = initialValue;
                this.TargetInterval = initialValue;
                this.Flags = initialValue;
                this.Spell = initialValue;
                this.Light = initialValue;
                this.ImpactDataSet = initialValue;
                this.Sound = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem ObjectBounds,
                TItem Name,
                TItem Model,
                TItem ImageSpaceModifier,
                TItem Limit,
                TItem Radius,
                TItem Lifetime,
                TItem ImageSpaceRadius,
                TItem TargetInterval,
                TItem Flags,
                TItem Spell,
                TItem Light,
                TItem ImpactDataSet,
                TItem Sound)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.Model = new MaskItem<TItem, Model.Mask<TItem>?>(Model, new Model.Mask<TItem>(Model));
                this.ImageSpaceModifier = ImageSpaceModifier;
                this.Limit = Limit;
                this.Radius = Radius;
                this.Lifetime = Lifetime;
                this.ImageSpaceRadius = ImageSpaceRadius;
                this.TargetInterval = TargetInterval;
                this.Flags = Flags;
                this.Spell = Spell;
                this.Light = Light;
                this.ImpactDataSet = ImpactDataSet;
                this.Sound = Sound;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public MaskItem<TItem, Model.Mask<TItem>?>? Model { get; set; }
            public TItem ImageSpaceModifier;
            public TItem Limit;
            public TItem Radius;
            public TItem Lifetime;
            public TItem ImageSpaceRadius;
            public TItem TargetInterval;
            public TItem Flags;
            public TItem Spell;
            public TItem Light;
            public TItem ImpactDataSet;
            public TItem Sound;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Model, rhs.Model)) return false;
                if (!object.Equals(this.ImageSpaceModifier, rhs.ImageSpaceModifier)) return false;
                if (!object.Equals(this.Limit, rhs.Limit)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Lifetime, rhs.Lifetime)) return false;
                if (!object.Equals(this.ImageSpaceRadius, rhs.ImageSpaceRadius)) return false;
                if (!object.Equals(this.TargetInterval, rhs.TargetInterval)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Spell, rhs.Spell)) return false;
                if (!object.Equals(this.Light, rhs.Light)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.Model);
                hash.Add(this.ImageSpaceModifier);
                hash.Add(this.Limit);
                hash.Add(this.Radius);
                hash.Add(this.Lifetime);
                hash.Add(this.ImageSpaceRadius);
                hash.Add(this.TargetInterval);
                hash.Add(this.Flags);
                hash.Add(this.Spell);
                hash.Add(this.Light);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.Sound);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (Model != null)
                {
                    if (!eval(this.Model.Overall)) return false;
                    if (this.Model.Specific != null && !this.Model.Specific.All(eval)) return false;
                }
                if (!eval(this.ImageSpaceModifier)) return false;
                if (!eval(this.Limit)) return false;
                if (!eval(this.Radius)) return false;
                if (!eval(this.Lifetime)) return false;
                if (!eval(this.ImageSpaceRadius)) return false;
                if (!eval(this.TargetInterval)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Spell)) return false;
                if (!eval(this.Light)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.Sound)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (Model != null)
                {
                    if (eval(this.Model.Overall)) return true;
                    if (this.Model.Specific != null && this.Model.Specific.Any(eval)) return true;
                }
                if (eval(this.ImageSpaceModifier)) return true;
                if (eval(this.Limit)) return true;
                if (eval(this.Radius)) return true;
                if (eval(this.Lifetime)) return true;
                if (eval(this.ImageSpaceRadius)) return true;
                if (eval(this.TargetInterval)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Spell)) return true;
                if (eval(this.Light)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.Sound)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Hazard.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.Model = this.Model == null ? null : new MaskItem<R, Model.Mask<R>?>(eval(this.Model.Overall), this.Model.Specific?.Translate(eval));
                obj.ImageSpaceModifier = eval(this.ImageSpaceModifier);
                obj.Limit = eval(this.Limit);
                obj.Radius = eval(this.Radius);
                obj.Lifetime = eval(this.Lifetime);
                obj.ImageSpaceRadius = eval(this.ImageSpaceRadius);
                obj.TargetInterval = eval(this.TargetInterval);
                obj.Flags = eval(this.Flags);
                obj.Spell = eval(this.Spell);
                obj.Light = eval(this.Light);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.Sound = eval(this.Sound);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Hazard.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Hazard.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Hazard.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Model?.Overall ?? true)
                    {
                        Model?.Print(sb);
                    }
                    if (printMask?.ImageSpaceModifier ?? true)
                    {
                        sb.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                    }
                    if (printMask?.Limit ?? true)
                    {
                        sb.AppendItem(Limit, "Limit");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        sb.AppendItem(Radius, "Radius");
                    }
                    if (printMask?.Lifetime ?? true)
                    {
                        sb.AppendItem(Lifetime, "Lifetime");
                    }
                    if (printMask?.ImageSpaceRadius ?? true)
                    {
                        sb.AppendItem(ImageSpaceRadius, "ImageSpaceRadius");
                    }
                    if (printMask?.TargetInterval ?? true)
                    {
                        sb.AppendItem(TargetInterval, "TargetInterval");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Spell ?? true)
                    {
                        sb.AppendItem(Spell, "Spell");
                    }
                    if (printMask?.Light ?? true)
                    {
                        sb.AppendItem(Light, "Light");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.Sound ?? true)
                    {
                        sb.AppendItem(Sound, "Sound");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public MaskItem<Exception?, Model.ErrorMask?>? Model;
            public Exception? ImageSpaceModifier;
            public Exception? Limit;
            public Exception? Radius;
            public Exception? Lifetime;
            public Exception? ImageSpaceRadius;
            public Exception? TargetInterval;
            public Exception? Flags;
            public Exception? Spell;
            public Exception? Light;
            public Exception? ImpactDataSet;
            public Exception? Sound;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Hazard_FieldIndex enu = (Hazard_FieldIndex)index;
                switch (enu)
                {
                    case Hazard_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Hazard_FieldIndex.Name:
                        return Name;
                    case Hazard_FieldIndex.Model:
                        return Model;
                    case Hazard_FieldIndex.ImageSpaceModifier:
                        return ImageSpaceModifier;
                    case Hazard_FieldIndex.Limit:
                        return Limit;
                    case Hazard_FieldIndex.Radius:
                        return Radius;
                    case Hazard_FieldIndex.Lifetime:
                        return Lifetime;
                    case Hazard_FieldIndex.ImageSpaceRadius:
                        return ImageSpaceRadius;
                    case Hazard_FieldIndex.TargetInterval:
                        return TargetInterval;
                    case Hazard_FieldIndex.Flags:
                        return Flags;
                    case Hazard_FieldIndex.Spell:
                        return Spell;
                    case Hazard_FieldIndex.Light:
                        return Light;
                    case Hazard_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case Hazard_FieldIndex.Sound:
                        return Sound;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Hazard_FieldIndex enu = (Hazard_FieldIndex)index;
                switch (enu)
                {
                    case Hazard_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Hazard_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Hazard_FieldIndex.Model:
                        this.Model = new MaskItem<Exception?, Model.ErrorMask?>(ex, null);
                        break;
                    case Hazard_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = ex;
                        break;
                    case Hazard_FieldIndex.Limit:
                        this.Limit = ex;
                        break;
                    case Hazard_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case Hazard_FieldIndex.Lifetime:
                        this.Lifetime = ex;
                        break;
                    case Hazard_FieldIndex.ImageSpaceRadius:
                        this.ImageSpaceRadius = ex;
                        break;
                    case Hazard_FieldIndex.TargetInterval:
                        this.TargetInterval = ex;
                        break;
                    case Hazard_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Hazard_FieldIndex.Spell:
                        this.Spell = ex;
                        break;
                    case Hazard_FieldIndex.Light:
                        this.Light = ex;
                        break;
                    case Hazard_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case Hazard_FieldIndex.Sound:
                        this.Sound = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Hazard_FieldIndex enu = (Hazard_FieldIndex)index;
                switch (enu)
                {
                    case Hazard_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Hazard_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Model:
                        this.Model = (MaskItem<Exception?, Model.ErrorMask?>?)obj;
                        break;
                    case Hazard_FieldIndex.ImageSpaceModifier:
                        this.ImageSpaceModifier = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Limit:
                        this.Limit = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Lifetime:
                        this.Lifetime = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.ImageSpaceRadius:
                        this.ImageSpaceRadius = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.TargetInterval:
                        this.TargetInterval = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Spell:
                        this.Spell = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Light:
                        this.Light = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case Hazard_FieldIndex.Sound:
                        this.Sound = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (Model != null) return true;
                if (ImageSpaceModifier != null) return true;
                if (Limit != null) return true;
                if (Radius != null) return true;
                if (Lifetime != null) return true;
                if (ImageSpaceRadius != null) return true;
                if (TargetInterval != null) return true;
                if (Flags != null) return true;
                if (Spell != null) return true;
                if (Light != null) return true;
                if (ImpactDataSet != null) return true;
                if (Sound != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                Model?.Print(sb);
                {
                    sb.AppendItem(ImageSpaceModifier, "ImageSpaceModifier");
                }
                {
                    sb.AppendItem(Limit, "Limit");
                }
                {
                    sb.AppendItem(Radius, "Radius");
                }
                {
                    sb.AppendItem(Lifetime, "Lifetime");
                }
                {
                    sb.AppendItem(ImageSpaceRadius, "ImageSpaceRadius");
                }
                {
                    sb.AppendItem(TargetInterval, "TargetInterval");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Spell, "Spell");
                }
                {
                    sb.AppendItem(Light, "Light");
                }
                {
                    sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                }
                {
                    sb.AppendItem(Sound, "Sound");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Model = this.Model.Combine(rhs.Model, (l, r) => l.Combine(r));
                ret.ImageSpaceModifier = this.ImageSpaceModifier.Combine(rhs.ImageSpaceModifier);
                ret.Limit = this.Limit.Combine(rhs.Limit);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Lifetime = this.Lifetime.Combine(rhs.Lifetime);
                ret.ImageSpaceRadius = this.ImageSpaceRadius.Combine(rhs.ImageSpaceRadius);
                ret.TargetInterval = this.TargetInterval.Combine(rhs.TargetInterval);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Spell = this.Spell.Combine(rhs.Spell);
                ret.Light = this.Light.Combine(rhs.Light);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.Sound = this.Sound.Combine(rhs.Sound);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public Model.TranslationMask? Model;
            public bool ImageSpaceModifier;
            public bool Limit;
            public bool Radius;
            public bool Lifetime;
            public bool ImageSpaceRadius;
            public bool TargetInterval;
            public bool Flags;
            public bool Spell;
            public bool Light;
            public bool ImpactDataSet;
            public bool Sound;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.ImageSpaceModifier = defaultOn;
                this.Limit = defaultOn;
                this.Radius = defaultOn;
                this.Lifetime = defaultOn;
                this.ImageSpaceRadius = defaultOn;
                this.TargetInterval = defaultOn;
                this.Flags = defaultOn;
                this.Spell = defaultOn;
                this.Light = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.Sound = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((Model != null ? Model.OnOverall : DefaultOn, Model?.GetCrystal()));
                ret.Add((ImageSpaceModifier, null));
                ret.Add((Limit, null));
                ret.Add((Radius, null));
                ret.Add((Lifetime, null));
                ret.Add((ImageSpaceRadius, null));
                ret.Add((TargetInterval, null));
                ret.Add((Flags, null));
                ret.Add((Spell, null));
                ret.Add((Light, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((Sound, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Hazard_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => HazardCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => HazardSetterCommon.Instance.RemapLinks(this, mapping);
        public Hazard(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Hazard(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Hazard(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Hazard(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Hazard(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Hazard>.ToString(this);
        }

        protected override Type LinkType => typeof(IHazard);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => HazardCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => HazardSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => HazardSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => HazardSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IHazardGetter rhs) return false;
            return ((HazardCommon)((IHazardGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHazardGetter? obj)
        {
            return ((HazardCommon)((IHazardGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HazardCommon)((IHazardGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HazardBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HazardBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Hazard CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Hazard();
            ((HazardSetterCommon)((IHazardGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Hazard item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((HazardSetterCommon)((IHazardGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Hazard GetNew()
        {
            return new Hazard();
        }

    }
    #endregion

    #region Interface
    public partial interface IHazard :
        IAssetLinkContainer,
        IExplodeSpawn,
        IFormLinkContainer,
        IHazardGetter,
        ILoquiObjectSetter<IHazardInternal>,
        IModeled,
        INamed,
        INamedRequired,
        IObjectBounded,
        IPlacedTrapTarget,
        IReferenceableObject,
        ISkyrimMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        /// <summary>
        /// Aspects: IModeled
        /// </summary>
        new Model? Model { get; set; }
        new IFormLinkNullable<IImageSpaceAdapterGetter> ImageSpaceModifier { get; set; }
        new UInt32 Limit { get; set; }
        new Single Radius { get; set; }
        new Single Lifetime { get; set; }
        new Single ImageSpaceRadius { get; set; }
        new Single TargetInterval { get; set; }
        new Hazard.Flag Flags { get; set; }
        new IFormLink<IEffectRecordGetter> Spell { get; set; }
        new IFormLink<ILightGetter> Light { get; set; }
        new IFormLink<IImpactDataSetGetter> ImpactDataSet { get; set; }
        new IFormLink<ISoundDescriptorGetter> Sound { get; set; }
    }

    public partial interface IHazardInternal :
        ISkyrimMajorRecordInternal,
        IHazard,
        IHazardGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.HAZD)]
    public partial interface IHazardGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        ILoquiObject<IHazardGetter>,
        IMapsToGetter<IHazardGetter>,
        IModeledGetter,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IPlacedTrapTargetGetter,
        IReferenceableObjectGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Hazard_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        #region Model
        /// <summary>
        /// Aspects: IModeledGetter
        /// </summary>
        IModelGetter? Model { get; }
        #endregion
        IFormLinkNullableGetter<IImageSpaceAdapterGetter> ImageSpaceModifier { get; }
        UInt32 Limit { get; }
        Single Radius { get; }
        Single Lifetime { get; }
        Single ImageSpaceRadius { get; }
        Single TargetInterval { get; }
        Hazard.Flag Flags { get; }
        IFormLinkGetter<IEffectRecordGetter> Spell { get; }
        IFormLinkGetter<ILightGetter> Light { get; }
        IFormLinkGetter<IImpactDataSetGetter> ImpactDataSet { get; }
        IFormLinkGetter<ISoundDescriptorGetter> Sound { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class HazardMixIn
    {
        public static void Clear(this IHazardInternal item)
        {
            ((HazardSetterCommon)((IHazardGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Hazard.Mask<bool> GetEqualsMask(
            this IHazardGetter item,
            IHazardGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((HazardCommon)((IHazardGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IHazardGetter item,
            string? name = null,
            Hazard.Mask<bool>? printMask = null)
        {
            return ((HazardCommon)((IHazardGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IHazardGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Hazard.Mask<bool>? printMask = null)
        {
            ((HazardCommon)((IHazardGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IHazardGetter item,
            IHazardGetter rhs,
            Hazard.TranslationMask? equalsMask = null)
        {
            return ((HazardCommon)((IHazardGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IHazardInternal lhs,
            IHazardGetter rhs,
            out Hazard.ErrorMask errorMask,
            Hazard.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((HazardSetterTranslationCommon)((IHazardGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Hazard.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IHazardInternal lhs,
            IHazardGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((HazardSetterTranslationCommon)((IHazardGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Hazard DeepCopy(
            this IHazardGetter item,
            Hazard.TranslationMask? copyMask = null)
        {
            return ((HazardSetterTranslationCommon)((IHazardGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Hazard DeepCopy(
            this IHazardGetter item,
            out Hazard.ErrorMask errorMask,
            Hazard.TranslationMask? copyMask = null)
        {
            return ((HazardSetterTranslationCommon)((IHazardGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Hazard DeepCopy(
            this IHazardGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((HazardSetterTranslationCommon)((IHazardGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Hazard Duplicate(
            this IHazardGetter item,
            FormKey formKey,
            Hazard.TranslationMask? copyMask = null)
        {
            return ((HazardCommon)((IHazardGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Hazard Duplicate(
            this IHazardGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((HazardCommon)((IHazardGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IHazardInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((HazardSetterCommon)((IHazardGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Hazard_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        ObjectBounds = 7,
        Name = 8,
        Model = 9,
        ImageSpaceModifier = 10,
        Limit = 11,
        Radius = 12,
        Lifetime = 13,
        ImageSpaceRadius = 14,
        TargetInterval = 15,
        Flags = 16,
        Spell = 17,
        Light = 18,
        ImpactDataSet = 19,
        Sound = 20,
    }
    #endregion

    #region Registration
    internal partial class Hazard_Registration : ILoquiRegistration
    {
        public static readonly Hazard_Registration Instance = new Hazard_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 14;

        public const ushort FieldCount = 21;

        public static readonly Type MaskType = typeof(Hazard.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Hazard.ErrorMask);

        public static readonly Type ClassType = typeof(Hazard);

        public static readonly Type GetterType = typeof(IHazardGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IHazard);

        public static readonly Type? InternalSetterType = typeof(IHazardInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Hazard";

        public const string Name = "Hazard";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.HAZD;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.HAZD);
            var all = RecordCollection.Factory(
                RecordTypes.HAZD,
                RecordTypes.OBND,
                RecordTypes.FULL,
                RecordTypes.MODL,
                RecordTypes.MNAM,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(HazardBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class HazardSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly HazardSetterCommon Instance = new HazardSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IHazardInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Name = default;
            item.Model = null;
            item.ImageSpaceModifier.Clear();
            item.Limit = default(UInt32);
            item.Radius = default(Single);
            item.Lifetime = default(Single);
            item.ImageSpaceRadius = default(Single);
            item.TargetInterval = default(Single);
            item.Flags = default(Hazard.Flag);
            item.Spell.Clear();
            item.Light.Clear();
            item.ImpactDataSet.Clear();
            item.Sound.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IHazardInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IHazardInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IHazard obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Model?.RemapLinks(mapping);
            obj.ImageSpaceModifier.Relink(mapping);
            obj.Spell.Relink(mapping);
            obj.Light.Relink(mapping);
            obj.ImpactDataSet.Relink(mapping);
            obj.Sound.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IHazard obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IHazard obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.Model?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IHazardInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IHazardInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: HazardBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: HazardBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Hazard)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Hazard)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class HazardCommon : SkyrimMajorRecordCommon
    {
        public new static readonly HazardCommon Instance = new HazardCommon();

        public Hazard.Mask<bool> GetEqualsMask(
            IHazardGetter item,
            IHazardGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Hazard.Mask<bool>(false);
            ((HazardCommon)((IHazardGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IHazardGetter item,
            IHazardGetter rhs,
            Hazard.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.Model = EqualsMaskHelper.EqualsHelper(
                item.Model,
                rhs.Model,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ImageSpaceModifier = item.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier);
            ret.Limit = item.Limit == rhs.Limit;
            ret.Radius = item.Radius.EqualsWithin(rhs.Radius);
            ret.Lifetime = item.Lifetime.EqualsWithin(rhs.Lifetime);
            ret.ImageSpaceRadius = item.ImageSpaceRadius.EqualsWithin(rhs.ImageSpaceRadius);
            ret.TargetInterval = item.TargetInterval.EqualsWithin(rhs.TargetInterval);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Spell = item.Spell.Equals(rhs.Spell);
            ret.Light = item.Light.Equals(rhs.Light);
            ret.ImpactDataSet = item.ImpactDataSet.Equals(rhs.ImpactDataSet);
            ret.Sound = item.Sound.Equals(rhs.Sound);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IHazardGetter item,
            string? name = null,
            Hazard.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IHazardGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Hazard.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Hazard =>");
            }
            else
            {
                sb.AppendLine($"{name} (Hazard) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IHazardGetter item,
            StructuredStringBuilder sb,
            Hazard.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Model?.Overall ?? true)
                && item.Model is {} ModelItem)
            {
                ModelItem?.Print(sb, "Model");
            }
            if (printMask?.ImageSpaceModifier ?? true)
            {
                sb.AppendItem(item.ImageSpaceModifier.FormKeyNullable, "ImageSpaceModifier");
            }
            if (printMask?.Limit ?? true)
            {
                sb.AppendItem(item.Limit, "Limit");
            }
            if (printMask?.Radius ?? true)
            {
                sb.AppendItem(item.Radius, "Radius");
            }
            if (printMask?.Lifetime ?? true)
            {
                sb.AppendItem(item.Lifetime, "Lifetime");
            }
            if (printMask?.ImageSpaceRadius ?? true)
            {
                sb.AppendItem(item.ImageSpaceRadius, "ImageSpaceRadius");
            }
            if (printMask?.TargetInterval ?? true)
            {
                sb.AppendItem(item.TargetInterval, "TargetInterval");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Spell ?? true)
            {
                sb.AppendItem(item.Spell.FormKey, "Spell");
            }
            if (printMask?.Light ?? true)
            {
                sb.AppendItem(item.Light.FormKey, "Light");
            }
            if (printMask?.ImpactDataSet ?? true)
            {
                sb.AppendItem(item.ImpactDataSet.FormKey, "ImpactDataSet");
            }
            if (printMask?.Sound ?? true)
            {
                sb.AppendItem(item.Sound.FormKey, "Sound");
            }
        }
        
        public static Hazard_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Hazard_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Hazard_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Hazard_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Hazard_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Hazard_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Hazard_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Hazard_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Hazard_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Hazard_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Hazard_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Hazard_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Hazard_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IHazardGetter? lhs,
            IHazardGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Hazard_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.Model) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Model, rhs.Model, out var lhsModel, out var rhsModel, out var isModelEqual))
                {
                    if (!((ModelCommon)((IModelGetter)lhsModel).CommonInstance()!).Equals(lhsModel, rhsModel, equalsMask?.GetSubCrystal((int)Hazard_FieldIndex.Model))) return false;
                }
                else if (!isModelEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.ImageSpaceModifier) ?? true))
            {
                if (!lhs.ImageSpaceModifier.Equals(rhs.ImageSpaceModifier)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.Limit) ?? true))
            {
                if (lhs.Limit != rhs.Limit) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.Radius) ?? true))
            {
                if (!lhs.Radius.EqualsWithin(rhs.Radius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.Lifetime) ?? true))
            {
                if (!lhs.Lifetime.EqualsWithin(rhs.Lifetime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.ImageSpaceRadius) ?? true))
            {
                if (!lhs.ImageSpaceRadius.EqualsWithin(rhs.ImageSpaceRadius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.TargetInterval) ?? true))
            {
                if (!lhs.TargetInterval.EqualsWithin(rhs.TargetInterval)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.Spell) ?? true))
            {
                if (!lhs.Spell.Equals(rhs.Spell)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.Light) ?? true))
            {
                if (!lhs.Light.Equals(rhs.Light)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.ImpactDataSet) ?? true))
            {
                if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Hazard_FieldIndex.Sound) ?? true))
            {
                if (!lhs.Sound.Equals(rhs.Sound)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IHazardGetter?)lhs,
                rhs: rhs as IHazardGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IHazardGetter?)lhs,
                rhs: rhs as IHazardGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IHazardGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Model is {} Modelitem)
            {
                hash.Add(Modelitem);
            }
            hash.Add(item.ImageSpaceModifier);
            hash.Add(item.Limit);
            hash.Add(item.Radius);
            hash.Add(item.Lifetime);
            hash.Add(item.ImageSpaceRadius);
            hash.Add(item.TargetInterval);
            hash.Add(item.Flags);
            hash.Add(item.Spell);
            hash.Add(item.Light);
            hash.Add(item.ImpactDataSet);
            hash.Add(item.Sound);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IHazardGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IHazardGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Hazard.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IHazardGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.ImageSpaceModifier, out var ImageSpaceModifierInfo))
            {
                yield return ImageSpaceModifierInfo;
            }
            yield return FormLinkInformation.Factory(obj.Spell);
            yield return FormLinkInformation.Factory(obj.Light);
            yield return FormLinkInformation.Factory(obj.ImpactDataSet);
            yield return FormLinkInformation.Factory(obj.Sound);
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IHazardGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.Model is {} ModelItems)
            {
                foreach (var item in ModelItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Hazard Duplicate(
            IHazardGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Hazard(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IHazardGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IHazardGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class HazardSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly HazardSetterTranslationCommon Instance = new HazardSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IHazardInternal item,
            IHazardGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IHazard item,
            IHazardGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Hazard_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Hazard_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Model) ?? true))
            {
                errorMask?.PushIndex((int)Hazard_FieldIndex.Model);
                try
                {
                    if(rhs.Model is {} rhsModel)
                    {
                        item.Model = rhsModel.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Hazard_FieldIndex.Model));
                    }
                    else
                    {
                        item.Model = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.ImageSpaceModifier) ?? true))
            {
                item.ImageSpaceModifier.SetTo(rhs.ImageSpaceModifier.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Limit) ?? true))
            {
                item.Limit = rhs.Limit;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Lifetime) ?? true))
            {
                item.Lifetime = rhs.Lifetime;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.ImageSpaceRadius) ?? true))
            {
                item.ImageSpaceRadius = rhs.ImageSpaceRadius;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.TargetInterval) ?? true))
            {
                item.TargetInterval = rhs.TargetInterval;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Spell) ?? true))
            {
                item.Spell.SetTo(rhs.Spell.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Light) ?? true))
            {
                item.Light.SetTo(rhs.Light.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet.SetTo(rhs.ImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Hazard_FieldIndex.Sound) ?? true))
            {
                item.Sound.SetTo(rhs.Sound.FormKey);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IHazard item,
            IHazardGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHazardInternal)item,
                rhs: (IHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHazard)item,
                rhs: (IHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHazardInternal)item,
                rhs: (IHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IHazard)item,
                rhs: (IHazardGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Hazard DeepCopy(
            IHazardGetter item,
            Hazard.TranslationMask? copyMask = null)
        {
            Hazard ret = (Hazard)((HazardCommon)((IHazardGetter)item).CommonInstance()!).GetNew();
            ((HazardSetterTranslationCommon)((IHazardGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Hazard DeepCopy(
            IHazardGetter item,
            out Hazard.ErrorMask errorMask,
            Hazard.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Hazard ret = (Hazard)((HazardCommon)((IHazardGetter)item).CommonInstance()!).GetNew();
            ((HazardSetterTranslationCommon)((IHazardGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Hazard.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Hazard DeepCopy(
            IHazardGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Hazard ret = (Hazard)((HazardCommon)((IHazardGetter)item).CommonInstance()!).GetNew();
            ((HazardSetterTranslationCommon)((IHazardGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Hazard
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Hazard_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Hazard_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HazardCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return HazardSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HazardSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class HazardBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly HazardBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IHazardGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            if (item.Model is {} ModelItem)
            {
                ((ModelBinaryWriteTranslation)((IBinaryItem)ModelItem).BinaryWriteTranslator).Write(
                    item: ModelItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ImageSpaceModifier,
                header: translationParams.ConvertToCustom(RecordTypes.MNAM));
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Limit);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Radius);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Lifetime);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ImageSpaceRadius);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TargetInterval);
                EnumBinaryTranslation<Hazard.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Spell);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Light);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImpactDataSet);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Sound);
            }
        }

        public void Write(
            MutagenWriter writer,
            IHazardGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.HAZD,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IHazardGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IHazardGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IHazardGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class HazardBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly HazardBinaryCreateTranslation Instance = new HazardBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.HAZD;
        public static ParseResult FillBinaryRecordTypes(
            IHazardInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Hazard_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Hazard_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    item.Model = Mutagen.Bethesda.Skyrim.Model.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Hazard_FieldIndex.Model;
                }
                case RecordTypeInts.MNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ImageSpaceModifier.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Hazard_FieldIndex.ImageSpaceModifier;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Limit = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Radius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Lifetime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ImageSpaceRadius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.TargetInterval = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Flags = EnumBinaryTranslation<Hazard.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.Spell.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Light.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Sound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Hazard_FieldIndex.Sound;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class HazardBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class HazardBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IHazardGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Hazard_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Hazard_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => HazardCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => HazardSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => HazardCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => HazardCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => HazardBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((HazardBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IHazard);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        public IModelGetter? Model { get; private set; }
        #region ImageSpaceModifier
        private int? _ImageSpaceModifierLocation;
        public IFormLinkNullableGetter<IImageSpaceAdapterGetter> ImageSpaceModifier => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IImageSpaceAdapterGetter>(_package, _recordData, _ImageSpaceModifierLocation);
        #endregion
        private RangeInt32? _DATALocation;
        #region Limit
        private int _LimitLocation => _DATALocation!.Value.Min;
        private bool _Limit_IsSet => _DATALocation.HasValue;
        public UInt32 Limit => _Limit_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_LimitLocation, 4)) : default(UInt32);
        #endregion
        #region Radius
        private int _RadiusLocation => _DATALocation!.Value.Min + 0x4;
        private bool _Radius_IsSet => _DATALocation.HasValue;
        public Single Radius => _Radius_IsSet ? _recordData.Slice(_RadiusLocation, 4).Float() : default(Single);
        #endregion
        #region Lifetime
        private int _LifetimeLocation => _DATALocation!.Value.Min + 0x8;
        private bool _Lifetime_IsSet => _DATALocation.HasValue;
        public Single Lifetime => _Lifetime_IsSet ? _recordData.Slice(_LifetimeLocation, 4).Float() : default(Single);
        #endregion
        #region ImageSpaceRadius
        private int _ImageSpaceRadiusLocation => _DATALocation!.Value.Min + 0xC;
        private bool _ImageSpaceRadius_IsSet => _DATALocation.HasValue;
        public Single ImageSpaceRadius => _ImageSpaceRadius_IsSet ? _recordData.Slice(_ImageSpaceRadiusLocation, 4).Float() : default(Single);
        #endregion
        #region TargetInterval
        private int _TargetIntervalLocation => _DATALocation!.Value.Min + 0x10;
        private bool _TargetInterval_IsSet => _DATALocation.HasValue;
        public Single TargetInterval => _TargetInterval_IsSet ? _recordData.Slice(_TargetIntervalLocation, 4).Float() : default(Single);
        #endregion
        #region Flags
        private int _FlagsLocation => _DATALocation!.Value.Min + 0x14;
        private bool _Flags_IsSet => _DATALocation.HasValue;
        public Hazard.Flag Flags => _Flags_IsSet ? (Hazard.Flag)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region Spell
        private int _SpellLocation => _DATALocation!.Value.Min + 0x18;
        private bool _Spell_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IEffectRecordGetter> Spell => _Spell_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IEffectRecordGetter>(_package, _recordData.Span.Slice(_SpellLocation, 0x4), isSet: _Spell_IsSet) : FormLink<IEffectRecordGetter>.Null;
        #endregion
        #region Light
        private int _LightLocation => _DATALocation!.Value.Min + 0x1C;
        private bool _Light_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<ILightGetter> Light => _Light_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ILightGetter>(_package, _recordData.Span.Slice(_LightLocation, 0x4), isSet: _Light_IsSet) : FormLink<ILightGetter>.Null;
        #endregion
        #region ImpactDataSet
        private int _ImpactDataSetLocation => _DATALocation!.Value.Min + 0x20;
        private bool _ImpactDataSet_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> ImpactDataSet => _ImpactDataSet_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_ImpactDataSetLocation, 0x4), isSet: _ImpactDataSet_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region Sound
        private int _SoundLocation => _DATALocation!.Value.Min + 0x24;
        private bool _Sound_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<ISoundDescriptorGetter> Sound => _Sound_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<ISoundDescriptorGetter>(_package, _recordData.Span.Slice(_SoundLocation, 0x4), isSet: _Sound_IsSet) : FormLink<ISoundDescriptorGetter>.Null;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected HazardBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IHazardGetter HazardFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new HazardBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IHazardGetter HazardFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return HazardFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Hazard_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Hazard_FieldIndex.Name;
                }
                case RecordTypeInts.MODL:
                {
                    this.Model = ModelBinaryOverlay.ModelFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Hazard_FieldIndex.Model;
                }
                case RecordTypeInts.MNAM:
                {
                    _ImageSpaceModifierLocation = (stream.Position - offset);
                    return (int)Hazard_FieldIndex.ImageSpaceModifier;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Hazard_FieldIndex.Sound;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            HazardMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Hazard>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IHazardGetter rhs) return false;
            return ((HazardCommon)((IHazardGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IHazardGetter? obj)
        {
            return ((HazardCommon)((IHazardGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((HazardCommon)((IHazardGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

