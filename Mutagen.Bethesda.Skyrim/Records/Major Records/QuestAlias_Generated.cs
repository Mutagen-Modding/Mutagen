/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class QuestAlias :
        IEquatable<IQuestAliasGetter>,
        ILoquiObjectSetter<QuestAlias>,
        IQuestAlias
    {
        #region Ctor
        public QuestAlias()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ID
        public UInt32 ID { get; set; } = default(UInt32);
        #endregion
        #region Type
        public QuestAlias.TypeEnum Type { get; set; } = default(QuestAlias.TypeEnum);
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        public String? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IQuestAliasGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region Flags
        public QuestAlias.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuestAlias.Flag? IQuestAliasGetter.Flags => this.Flags;
        #endregion
        #region AliasIDToForceIntoWhenFilled
        public Int32? AliasIDToForceIntoWhenFilled { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IQuestAliasGetter.AliasIDToForceIntoWhenFilled => this.AliasIDToForceIntoWhenFilled;
        #endregion
        #region SpecificLocation
        private readonly IFormLinkNullable<ILocationGetter> _SpecificLocation = new FormLinkNullable<ILocationGetter>();
        public IFormLinkNullable<ILocationGetter> SpecificLocation
        {
            get => _SpecificLocation;
            set => _SpecificLocation.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationGetter> IQuestAliasGetter.SpecificLocation => this.SpecificLocation;
        #endregion
        #region ForcedReference
        private readonly IFormLinkNullable<IPlacedGetter> _ForcedReference = new FormLinkNullable<IPlacedGetter>();
        public IFormLinkNullable<IPlacedGetter> ForcedReference
        {
            get => _ForcedReference;
            set => _ForcedReference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedGetter> IQuestAliasGetter.ForcedReference => this.ForcedReference;
        #endregion
        #region UniqueActor
        private readonly IFormLinkNullable<INpcGetter> _UniqueActor = new FormLinkNullable<INpcGetter>();
        public IFormLinkNullable<INpcGetter> UniqueActor
        {
            get => _UniqueActor;
            set => _UniqueActor.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<INpcGetter> IQuestAliasGetter.UniqueActor => this.UniqueActor;
        #endregion
        #region Location
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LocationAliasReference? _Location;
        public LocationAliasReference? Location
        {
            get => _Location;
            set => _Location = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILocationAliasReferenceGetter? IQuestAliasGetter.Location => this.Location;
        #endregion
        #region External
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExternalAliasReference? _External;
        public ExternalAliasReference? External
        {
            get => _External;
            set => _External = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IExternalAliasReferenceGetter? IQuestAliasGetter.External => this.External;
        #endregion
        #region CreateReferenceToObject
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CreateReferenceToObject? _CreateReferenceToObject;
        public CreateReferenceToObject? CreateReferenceToObject
        {
            get => _CreateReferenceToObject;
            set => _CreateReferenceToObject = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ICreateReferenceToObjectGetter? IQuestAliasGetter.CreateReferenceToObject => this.CreateReferenceToObject;
        #endregion
        #region FindMatchingRefNearAlias
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FindMatchingRefNearAlias? _FindMatchingRefNearAlias;
        public FindMatchingRefNearAlias? FindMatchingRefNearAlias
        {
            get => _FindMatchingRefNearAlias;
            set => _FindMatchingRefNearAlias = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFindMatchingRefNearAliasGetter? IQuestAliasGetter.FindMatchingRefNearAlias => this.FindMatchingRefNearAlias;
        #endregion
        #region FindMatchingRefFromEvent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FindMatchingRefFromEvent? _FindMatchingRefFromEvent;
        public FindMatchingRefFromEvent? FindMatchingRefFromEvent
        {
            get => _FindMatchingRefFromEvent;
            set => _FindMatchingRefFromEvent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFindMatchingRefFromEventGetter? IQuestAliasGetter.FindMatchingRefFromEvent => this.FindMatchingRefFromEvent;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IQuestAliasGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IQuestAliasGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ContainerEntry>? _Items;
        public ExtendedList<ContainerEntry>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IContainerEntryGetter>? IQuestAliasGetter.Items => _Items;
        #endregion

        #endregion
        #region SpectatorOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _SpectatorOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> SpectatorOverridePackageList
        {
            get => _SpectatorOverridePackageList;
            set => _SpectatorOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IQuestAliasGetter.SpectatorOverridePackageList => this.SpectatorOverridePackageList;
        #endregion
        #region ObserveDeadBodyOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _ObserveDeadBodyOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList
        {
            get => _ObserveDeadBodyOverridePackageList;
            set => _ObserveDeadBodyOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IQuestAliasGetter.ObserveDeadBodyOverridePackageList => this.ObserveDeadBodyOverridePackageList;
        #endregion
        #region GuardWarnOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _GuardWarnOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> GuardWarnOverridePackageList
        {
            get => _GuardWarnOverridePackageList;
            set => _GuardWarnOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IQuestAliasGetter.GuardWarnOverridePackageList => this.GuardWarnOverridePackageList;
        #endregion
        #region CombatOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _CombatOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> CombatOverridePackageList
        {
            get => _CombatOverridePackageList;
            set => _CombatOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> IQuestAliasGetter.CombatOverridePackageList => this.CombatOverridePackageList;
        #endregion
        #region DisplayName
        private readonly IFormLinkNullable<IMessageGetter> _DisplayName = new FormLinkNullable<IMessageGetter>();
        public IFormLinkNullable<IMessageGetter> DisplayName
        {
            get => _DisplayName;
            set => _DisplayName.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMessageGetter> IQuestAliasGetter.DisplayName => this.DisplayName;
        #endregion
        #region Spells
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellGetter>> _Spells = new ExtendedList<IFormLinkGetter<ISpellGetter>>();
        public ExtendedList<IFormLinkGetter<ISpellGetter>> Spells
        {
            get => this._Spells;
            init => this._Spells = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellGetter>> IQuestAliasGetter.Spells => _Spells;
        #endregion

        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IFactionGetter>> _Factions = new ExtendedList<IFormLinkGetter<IFactionGetter>>();
        public ExtendedList<IFormLinkGetter<IFactionGetter>> Factions
        {
            get => this._Factions;
            init => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IFactionGetter>> IQuestAliasGetter.Factions => _Factions;
        #endregion

        #endregion
        #region PackageData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPackageGetter>> _PackageData = new ExtendedList<IFormLinkGetter<IPackageGetter>>();
        public ExtendedList<IFormLinkGetter<IPackageGetter>> PackageData
        {
            get => this._PackageData;
            init => this._PackageData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPackageGetter>> IQuestAliasGetter.PackageData => _PackageData;
        #endregion

        #endregion
        #region VoiceTypes
        private readonly IFormLinkNullable<IAliasVoiceTypeGetter> _VoiceTypes = new FormLinkNullable<IAliasVoiceTypeGetter>();
        public IFormLinkNullable<IAliasVoiceTypeGetter> VoiceTypes
        {
            get => _VoiceTypes;
            set => _VoiceTypes.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IAliasVoiceTypeGetter> IQuestAliasGetter.VoiceTypes => this.VoiceTypes;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestAliasMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestAliasGetter rhs) return false;
            return ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestAliasGetter? obj)
        {
            return ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.ID = initialValue;
                this.Type = initialValue;
                this.Name = initialValue;
                this.Flags = initialValue;
                this.AliasIDToForceIntoWhenFilled = initialValue;
                this.SpecificLocation = initialValue;
                this.ForcedReference = initialValue;
                this.UniqueActor = initialValue;
                this.Location = new MaskItem<TItem, LocationAliasReference.Mask<TItem>?>(initialValue, new LocationAliasReference.Mask<TItem>(initialValue));
                this.External = new MaskItem<TItem, ExternalAliasReference.Mask<TItem>?>(initialValue, new ExternalAliasReference.Mask<TItem>(initialValue));
                this.CreateReferenceToObject = new MaskItem<TItem, CreateReferenceToObject.Mask<TItem>?>(initialValue, new CreateReferenceToObject.Mask<TItem>(initialValue));
                this.FindMatchingRefNearAlias = new MaskItem<TItem, FindMatchingRefNearAlias.Mask<TItem>?>(initialValue, new FindMatchingRefNearAlias.Mask<TItem>(initialValue));
                this.FindMatchingRefFromEvent = new MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>(initialValue, new FindMatchingRefFromEvent.Mask<TItem>(initialValue));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = initialValue;
                this.ObserveDeadBodyOverridePackageList = initialValue;
                this.GuardWarnOverridePackageList = initialValue;
                this.CombatOverridePackageList = initialValue;
                this.DisplayName = initialValue;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Factions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.PackageData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.VoiceTypes = initialValue;
            }

            public Mask(
                TItem ID,
                TItem Type,
                TItem Name,
                TItem Flags,
                TItem AliasIDToForceIntoWhenFilled,
                TItem SpecificLocation,
                TItem ForcedReference,
                TItem UniqueActor,
                TItem Location,
                TItem External,
                TItem CreateReferenceToObject,
                TItem FindMatchingRefNearAlias,
                TItem FindMatchingRefFromEvent,
                TItem Conditions,
                TItem Keywords,
                TItem Items,
                TItem SpectatorOverridePackageList,
                TItem ObserveDeadBodyOverridePackageList,
                TItem GuardWarnOverridePackageList,
                TItem CombatOverridePackageList,
                TItem DisplayName,
                TItem Spells,
                TItem Factions,
                TItem PackageData,
                TItem VoiceTypes)
            {
                this.ID = ID;
                this.Type = Type;
                this.Name = Name;
                this.Flags = Flags;
                this.AliasIDToForceIntoWhenFilled = AliasIDToForceIntoWhenFilled;
                this.SpecificLocation = SpecificLocation;
                this.ForcedReference = ForcedReference;
                this.UniqueActor = UniqueActor;
                this.Location = new MaskItem<TItem, LocationAliasReference.Mask<TItem>?>(Location, new LocationAliasReference.Mask<TItem>(Location));
                this.External = new MaskItem<TItem, ExternalAliasReference.Mask<TItem>?>(External, new ExternalAliasReference.Mask<TItem>(External));
                this.CreateReferenceToObject = new MaskItem<TItem, CreateReferenceToObject.Mask<TItem>?>(CreateReferenceToObject, new CreateReferenceToObject.Mask<TItem>(CreateReferenceToObject));
                this.FindMatchingRefNearAlias = new MaskItem<TItem, FindMatchingRefNearAlias.Mask<TItem>?>(FindMatchingRefNearAlias, new FindMatchingRefNearAlias.Mask<TItem>(FindMatchingRefNearAlias));
                this.FindMatchingRefFromEvent = new MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>(FindMatchingRefFromEvent, new FindMatchingRefFromEvent.Mask<TItem>(FindMatchingRefFromEvent));
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = SpectatorOverridePackageList;
                this.ObserveDeadBodyOverridePackageList = ObserveDeadBodyOverridePackageList;
                this.GuardWarnOverridePackageList = GuardWarnOverridePackageList;
                this.CombatOverridePackageList = CombatOverridePackageList;
                this.DisplayName = DisplayName;
                this.Spells = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Spells, Enumerable.Empty<(int Index, TItem Value)>());
                this.Factions = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Factions, Enumerable.Empty<(int Index, TItem Value)>());
                this.PackageData = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(PackageData, Enumerable.Empty<(int Index, TItem Value)>());
                this.VoiceTypes = VoiceTypes;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ID;
            public TItem Type;
            public TItem Name;
            public TItem Flags;
            public TItem AliasIDToForceIntoWhenFilled;
            public TItem SpecificLocation;
            public TItem ForcedReference;
            public TItem UniqueActor;
            public MaskItem<TItem, LocationAliasReference.Mask<TItem>?>? Location { get; set; }
            public MaskItem<TItem, ExternalAliasReference.Mask<TItem>?>? External { get; set; }
            public MaskItem<TItem, CreateReferenceToObject.Mask<TItem>?>? CreateReferenceToObject { get; set; }
            public MaskItem<TItem, FindMatchingRefNearAlias.Mask<TItem>?>? FindMatchingRefNearAlias { get; set; }
            public MaskItem<TItem, FindMatchingRefFromEvent.Mask<TItem>?>? FindMatchingRefFromEvent { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>? Items;
            public TItem SpectatorOverridePackageList;
            public TItem ObserveDeadBodyOverridePackageList;
            public TItem GuardWarnOverridePackageList;
            public TItem CombatOverridePackageList;
            public TItem DisplayName;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Spells;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Factions;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? PackageData;
            public TItem VoiceTypes;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.ID, rhs.ID)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.AliasIDToForceIntoWhenFilled, rhs.AliasIDToForceIntoWhenFilled)) return false;
                if (!object.Equals(this.SpecificLocation, rhs.SpecificLocation)) return false;
                if (!object.Equals(this.ForcedReference, rhs.ForcedReference)) return false;
                if (!object.Equals(this.UniqueActor, rhs.UniqueActor)) return false;
                if (!object.Equals(this.Location, rhs.Location)) return false;
                if (!object.Equals(this.External, rhs.External)) return false;
                if (!object.Equals(this.CreateReferenceToObject, rhs.CreateReferenceToObject)) return false;
                if (!object.Equals(this.FindMatchingRefNearAlias, rhs.FindMatchingRefNearAlias)) return false;
                if (!object.Equals(this.FindMatchingRefFromEvent, rhs.FindMatchingRefFromEvent)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.SpectatorOverridePackageList, rhs.SpectatorOverridePackageList)) return false;
                if (!object.Equals(this.ObserveDeadBodyOverridePackageList, rhs.ObserveDeadBodyOverridePackageList)) return false;
                if (!object.Equals(this.GuardWarnOverridePackageList, rhs.GuardWarnOverridePackageList)) return false;
                if (!object.Equals(this.CombatOverridePackageList, rhs.CombatOverridePackageList)) return false;
                if (!object.Equals(this.DisplayName, rhs.DisplayName)) return false;
                if (!object.Equals(this.Spells, rhs.Spells)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.PackageData, rhs.PackageData)) return false;
                if (!object.Equals(this.VoiceTypes, rhs.VoiceTypes)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ID);
                hash.Add(this.Type);
                hash.Add(this.Name);
                hash.Add(this.Flags);
                hash.Add(this.AliasIDToForceIntoWhenFilled);
                hash.Add(this.SpecificLocation);
                hash.Add(this.ForcedReference);
                hash.Add(this.UniqueActor);
                hash.Add(this.Location);
                hash.Add(this.External);
                hash.Add(this.CreateReferenceToObject);
                hash.Add(this.FindMatchingRefNearAlias);
                hash.Add(this.FindMatchingRefFromEvent);
                hash.Add(this.Conditions);
                hash.Add(this.Keywords);
                hash.Add(this.Items);
                hash.Add(this.SpectatorOverridePackageList);
                hash.Add(this.ObserveDeadBodyOverridePackageList);
                hash.Add(this.GuardWarnOverridePackageList);
                hash.Add(this.CombatOverridePackageList);
                hash.Add(this.DisplayName);
                hash.Add(this.Spells);
                hash.Add(this.Factions);
                hash.Add(this.PackageData);
                hash.Add(this.VoiceTypes);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.ID)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.AliasIDToForceIntoWhenFilled)) return false;
                if (!eval(this.SpecificLocation)) return false;
                if (!eval(this.ForcedReference)) return false;
                if (!eval(this.UniqueActor)) return false;
                if (Location != null)
                {
                    if (!eval(this.Location.Overall)) return false;
                    if (this.Location.Specific != null && !this.Location.Specific.All(eval)) return false;
                }
                if (External != null)
                {
                    if (!eval(this.External.Overall)) return false;
                    if (this.External.Specific != null && !this.External.Specific.All(eval)) return false;
                }
                if (CreateReferenceToObject != null)
                {
                    if (!eval(this.CreateReferenceToObject.Overall)) return false;
                    if (this.CreateReferenceToObject.Specific != null && !this.CreateReferenceToObject.Specific.All(eval)) return false;
                }
                if (FindMatchingRefNearAlias != null)
                {
                    if (!eval(this.FindMatchingRefNearAlias.Overall)) return false;
                    if (this.FindMatchingRefNearAlias.Specific != null && !this.FindMatchingRefNearAlias.Specific.All(eval)) return false;
                }
                if (FindMatchingRefFromEvent != null)
                {
                    if (!eval(this.FindMatchingRefFromEvent.Overall)) return false;
                    if (this.FindMatchingRefFromEvent.Specific != null && !this.FindMatchingRefFromEvent.Specific.All(eval)) return false;
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SpectatorOverridePackageList)) return false;
                if (!eval(this.ObserveDeadBodyOverridePackageList)) return false;
                if (!eval(this.GuardWarnOverridePackageList)) return false;
                if (!eval(this.CombatOverridePackageList)) return false;
                if (!eval(this.DisplayName)) return false;
                if (this.Spells != null)
                {
                    if (!eval(this.Spells.Overall)) return false;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.PackageData != null)
                {
                    if (!eval(this.PackageData.Overall)) return false;
                    if (this.PackageData.Specific != null)
                    {
                        foreach (var item in this.PackageData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.VoiceTypes)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.ID)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.AliasIDToForceIntoWhenFilled)) return true;
                if (eval(this.SpecificLocation)) return true;
                if (eval(this.ForcedReference)) return true;
                if (eval(this.UniqueActor)) return true;
                if (Location != null)
                {
                    if (eval(this.Location.Overall)) return true;
                    if (this.Location.Specific != null && this.Location.Specific.Any(eval)) return true;
                }
                if (External != null)
                {
                    if (eval(this.External.Overall)) return true;
                    if (this.External.Specific != null && this.External.Specific.Any(eval)) return true;
                }
                if (CreateReferenceToObject != null)
                {
                    if (eval(this.CreateReferenceToObject.Overall)) return true;
                    if (this.CreateReferenceToObject.Specific != null && this.CreateReferenceToObject.Specific.Any(eval)) return true;
                }
                if (FindMatchingRefNearAlias != null)
                {
                    if (eval(this.FindMatchingRefNearAlias.Overall)) return true;
                    if (this.FindMatchingRefNearAlias.Specific != null && this.FindMatchingRefNearAlias.Specific.Any(eval)) return true;
                }
                if (FindMatchingRefFromEvent != null)
                {
                    if (eval(this.FindMatchingRefFromEvent.Overall)) return true;
                    if (this.FindMatchingRefFromEvent.Specific != null && this.FindMatchingRefFromEvent.Specific.Any(eval)) return true;
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SpectatorOverridePackageList)) return true;
                if (eval(this.ObserveDeadBodyOverridePackageList)) return true;
                if (eval(this.GuardWarnOverridePackageList)) return true;
                if (eval(this.CombatOverridePackageList)) return true;
                if (eval(this.DisplayName)) return true;
                if (this.Spells != null)
                {
                    if (eval(this.Spells.Overall)) return true;
                    if (this.Spells.Specific != null)
                    {
                        foreach (var item in this.Spells.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.PackageData != null)
                {
                    if (eval(this.PackageData.Overall)) return true;
                    if (this.PackageData.Specific != null)
                    {
                        foreach (var item in this.PackageData.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.VoiceTypes)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new QuestAlias.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.ID = eval(this.ID);
                obj.Type = eval(this.Type);
                obj.Name = eval(this.Name);
                obj.Flags = eval(this.Flags);
                obj.AliasIDToForceIntoWhenFilled = eval(this.AliasIDToForceIntoWhenFilled);
                obj.SpecificLocation = eval(this.SpecificLocation);
                obj.ForcedReference = eval(this.ForcedReference);
                obj.UniqueActor = eval(this.UniqueActor);
                obj.Location = this.Location == null ? null : new MaskItem<R, LocationAliasReference.Mask<R>?>(eval(this.Location.Overall), this.Location.Specific?.Translate(eval));
                obj.External = this.External == null ? null : new MaskItem<R, ExternalAliasReference.Mask<R>?>(eval(this.External.Overall), this.External.Specific?.Translate(eval));
                obj.CreateReferenceToObject = this.CreateReferenceToObject == null ? null : new MaskItem<R, CreateReferenceToObject.Mask<R>?>(eval(this.CreateReferenceToObject.Overall), this.CreateReferenceToObject.Specific?.Translate(eval));
                obj.FindMatchingRefNearAlias = this.FindMatchingRefNearAlias == null ? null : new MaskItem<R, FindMatchingRefNearAlias.Mask<R>?>(eval(this.FindMatchingRefNearAlias.Overall), this.FindMatchingRefNearAlias.Specific?.Translate(eval));
                obj.FindMatchingRefFromEvent = this.FindMatchingRefFromEvent == null ? null : new MaskItem<R, FindMatchingRefFromEvent.Mask<R>?>(eval(this.FindMatchingRefFromEvent.Overall), this.FindMatchingRefFromEvent.Specific?.Translate(eval));
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, ContainerEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ContainerEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SpectatorOverridePackageList = eval(this.SpectatorOverridePackageList);
                obj.ObserveDeadBodyOverridePackageList = eval(this.ObserveDeadBodyOverridePackageList);
                obj.GuardWarnOverridePackageList = eval(this.GuardWarnOverridePackageList);
                obj.CombatOverridePackageList = eval(this.CombatOverridePackageList);
                obj.DisplayName = eval(this.DisplayName);
                if (Spells != null)
                {
                    obj.Spells = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Spells.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Spells.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Spells.Specific = l;
                        foreach (var item in Spells.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Factions.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (PackageData != null)
                {
                    obj.PackageData = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.PackageData.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (PackageData.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.PackageData.Specific = l;
                        foreach (var item in PackageData.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.VoiceTypes = eval(this.VoiceTypes);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(QuestAlias.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, QuestAlias.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(QuestAlias.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ID ?? true)
                    {
                        sb.AppendItem(ID, "ID");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.AliasIDToForceIntoWhenFilled ?? true)
                    {
                        sb.AppendItem(AliasIDToForceIntoWhenFilled, "AliasIDToForceIntoWhenFilled");
                    }
                    if (printMask?.SpecificLocation ?? true)
                    {
                        sb.AppendItem(SpecificLocation, "SpecificLocation");
                    }
                    if (printMask?.ForcedReference ?? true)
                    {
                        sb.AppendItem(ForcedReference, "ForcedReference");
                    }
                    if (printMask?.UniqueActor ?? true)
                    {
                        sb.AppendItem(UniqueActor, "UniqueActor");
                    }
                    if (printMask?.Location?.Overall ?? true)
                    {
                        Location?.Print(sb);
                    }
                    if (printMask?.External?.Overall ?? true)
                    {
                        External?.Print(sb);
                    }
                    if (printMask?.CreateReferenceToObject?.Overall ?? true)
                    {
                        CreateReferenceToObject?.Print(sb);
                    }
                    if (printMask?.FindMatchingRefNearAlias?.Overall ?? true)
                    {
                        FindMatchingRefNearAlias?.Print(sb);
                    }
                    if (printMask?.FindMatchingRefFromEvent?.Overall ?? true)
                    {
                        FindMatchingRefFromEvent?.Print(sb);
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        sb.AppendLine("Items =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SpectatorOverridePackageList ?? true)
                    {
                        sb.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                    }
                    if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
                    {
                        sb.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                    }
                    if (printMask?.GuardWarnOverridePackageList ?? true)
                    {
                        sb.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                    }
                    if (printMask?.CombatOverridePackageList ?? true)
                    {
                        sb.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                    }
                    if (printMask?.DisplayName ?? true)
                    {
                        sb.AppendItem(DisplayName, "DisplayName");
                    }
                    if ((printMask?.Spells?.Overall ?? true)
                        && Spells is {} SpellsItem)
                    {
                        sb.AppendLine("Spells =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SpellsItem.Overall);
                            if (SpellsItem.Specific != null)
                            {
                                foreach (var subItem in SpellsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions is {} FactionsItem)
                    {
                        sb.AppendLine("Factions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.PackageData?.Overall ?? true)
                        && PackageData is {} PackageDataItem)
                    {
                        sb.AppendLine("PackageData =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PackageDataItem.Overall);
                            if (PackageDataItem.Specific != null)
                            {
                                foreach (var subItem in PackageDataItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.VoiceTypes ?? true)
                    {
                        sb.AppendItem(VoiceTypes, "VoiceTypes");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? ID;
            public Exception? Type;
            public Exception? Name;
            public Exception? Flags;
            public Exception? AliasIDToForceIntoWhenFilled;
            public Exception? SpecificLocation;
            public Exception? ForcedReference;
            public Exception? UniqueActor;
            public MaskItem<Exception?, LocationAliasReference.ErrorMask?>? Location;
            public MaskItem<Exception?, ExternalAliasReference.ErrorMask?>? External;
            public MaskItem<Exception?, CreateReferenceToObject.ErrorMask?>? CreateReferenceToObject;
            public MaskItem<Exception?, FindMatchingRefNearAlias.ErrorMask?>? FindMatchingRefNearAlias;
            public MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>? FindMatchingRefFromEvent;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>? Items;
            public Exception? SpectatorOverridePackageList;
            public Exception? ObserveDeadBodyOverridePackageList;
            public Exception? GuardWarnOverridePackageList;
            public Exception? CombatOverridePackageList;
            public Exception? DisplayName;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Spells;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Factions;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? PackageData;
            public Exception? VoiceTypes;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                QuestAlias_FieldIndex enu = (QuestAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestAlias_FieldIndex.ID:
                        return ID;
                    case QuestAlias_FieldIndex.Type:
                        return Type;
                    case QuestAlias_FieldIndex.Name:
                        return Name;
                    case QuestAlias_FieldIndex.Flags:
                        return Flags;
                    case QuestAlias_FieldIndex.AliasIDToForceIntoWhenFilled:
                        return AliasIDToForceIntoWhenFilled;
                    case QuestAlias_FieldIndex.SpecificLocation:
                        return SpecificLocation;
                    case QuestAlias_FieldIndex.ForcedReference:
                        return ForcedReference;
                    case QuestAlias_FieldIndex.UniqueActor:
                        return UniqueActor;
                    case QuestAlias_FieldIndex.Location:
                        return Location;
                    case QuestAlias_FieldIndex.External:
                        return External;
                    case QuestAlias_FieldIndex.CreateReferenceToObject:
                        return CreateReferenceToObject;
                    case QuestAlias_FieldIndex.FindMatchingRefNearAlias:
                        return FindMatchingRefNearAlias;
                    case QuestAlias_FieldIndex.FindMatchingRefFromEvent:
                        return FindMatchingRefFromEvent;
                    case QuestAlias_FieldIndex.Conditions:
                        return Conditions;
                    case QuestAlias_FieldIndex.Keywords:
                        return Keywords;
                    case QuestAlias_FieldIndex.Items:
                        return Items;
                    case QuestAlias_FieldIndex.SpectatorOverridePackageList:
                        return SpectatorOverridePackageList;
                    case QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList:
                        return ObserveDeadBodyOverridePackageList;
                    case QuestAlias_FieldIndex.GuardWarnOverridePackageList:
                        return GuardWarnOverridePackageList;
                    case QuestAlias_FieldIndex.CombatOverridePackageList:
                        return CombatOverridePackageList;
                    case QuestAlias_FieldIndex.DisplayName:
                        return DisplayName;
                    case QuestAlias_FieldIndex.Spells:
                        return Spells;
                    case QuestAlias_FieldIndex.Factions:
                        return Factions;
                    case QuestAlias_FieldIndex.PackageData:
                        return PackageData;
                    case QuestAlias_FieldIndex.VoiceTypes:
                        return VoiceTypes;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                QuestAlias_FieldIndex enu = (QuestAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestAlias_FieldIndex.ID:
                        this.ID = ex;
                        break;
                    case QuestAlias_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case QuestAlias_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case QuestAlias_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case QuestAlias_FieldIndex.AliasIDToForceIntoWhenFilled:
                        this.AliasIDToForceIntoWhenFilled = ex;
                        break;
                    case QuestAlias_FieldIndex.SpecificLocation:
                        this.SpecificLocation = ex;
                        break;
                    case QuestAlias_FieldIndex.ForcedReference:
                        this.ForcedReference = ex;
                        break;
                    case QuestAlias_FieldIndex.UniqueActor:
                        this.UniqueActor = ex;
                        break;
                    case QuestAlias_FieldIndex.Location:
                        this.Location = new MaskItem<Exception?, LocationAliasReference.ErrorMask?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.External:
                        this.External = new MaskItem<Exception?, ExternalAliasReference.ErrorMask?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.CreateReferenceToObject:
                        this.CreateReferenceToObject = new MaskItem<Exception?, CreateReferenceToObject.ErrorMask?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.FindMatchingRefNearAlias:
                        this.FindMatchingRefNearAlias = new MaskItem<Exception?, FindMatchingRefNearAlias.ErrorMask?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.FindMatchingRefFromEvent:
                        this.FindMatchingRefFromEvent = new MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = ex;
                        break;
                    case QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = ex;
                        break;
                    case QuestAlias_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = ex;
                        break;
                    case QuestAlias_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = ex;
                        break;
                    case QuestAlias_FieldIndex.DisplayName:
                        this.DisplayName = ex;
                        break;
                    case QuestAlias_FieldIndex.Spells:
                        this.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.PackageData:
                        this.PackageData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case QuestAlias_FieldIndex.VoiceTypes:
                        this.VoiceTypes = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                QuestAlias_FieldIndex enu = (QuestAlias_FieldIndex)index;
                switch (enu)
                {
                    case QuestAlias_FieldIndex.ID:
                        this.ID = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.AliasIDToForceIntoWhenFilled:
                        this.AliasIDToForceIntoWhenFilled = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.SpecificLocation:
                        this.SpecificLocation = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.ForcedReference:
                        this.ForcedReference = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.UniqueActor:
                        this.UniqueActor = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.Location:
                        this.Location = (MaskItem<Exception?, LocationAliasReference.ErrorMask?>?)obj;
                        break;
                    case QuestAlias_FieldIndex.External:
                        this.External = (MaskItem<Exception?, ExternalAliasReference.ErrorMask?>?)obj;
                        break;
                    case QuestAlias_FieldIndex.CreateReferenceToObject:
                        this.CreateReferenceToObject = (MaskItem<Exception?, CreateReferenceToObject.ErrorMask?>?)obj;
                        break;
                    case QuestAlias_FieldIndex.FindMatchingRefNearAlias:
                        this.FindMatchingRefNearAlias = (MaskItem<Exception?, FindMatchingRefNearAlias.ErrorMask?>?)obj;
                        break;
                    case QuestAlias_FieldIndex.FindMatchingRefFromEvent:
                        this.FindMatchingRefFromEvent = (MaskItem<Exception?, FindMatchingRefFromEvent.ErrorMask?>?)obj;
                        break;
                    case QuestAlias_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.DisplayName:
                        this.DisplayName = (Exception?)obj;
                        break;
                    case QuestAlias_FieldIndex.Spells:
                        this.Spells = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.PackageData:
                        this.PackageData = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case QuestAlias_FieldIndex.VoiceTypes:
                        this.VoiceTypes = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (ID != null) return true;
                if (Type != null) return true;
                if (Name != null) return true;
                if (Flags != null) return true;
                if (AliasIDToForceIntoWhenFilled != null) return true;
                if (SpecificLocation != null) return true;
                if (ForcedReference != null) return true;
                if (UniqueActor != null) return true;
                if (Location != null) return true;
                if (External != null) return true;
                if (CreateReferenceToObject != null) return true;
                if (FindMatchingRefNearAlias != null) return true;
                if (FindMatchingRefFromEvent != null) return true;
                if (Conditions != null) return true;
                if (Keywords != null) return true;
                if (Items != null) return true;
                if (SpectatorOverridePackageList != null) return true;
                if (ObserveDeadBodyOverridePackageList != null) return true;
                if (GuardWarnOverridePackageList != null) return true;
                if (CombatOverridePackageList != null) return true;
                if (DisplayName != null) return true;
                if (Spells != null) return true;
                if (Factions != null) return true;
                if (PackageData != null) return true;
                if (VoiceTypes != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(ID, "ID");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(AliasIDToForceIntoWhenFilled, "AliasIDToForceIntoWhenFilled");
                }
                {
                    sb.AppendItem(SpecificLocation, "SpecificLocation");
                }
                {
                    sb.AppendItem(ForcedReference, "ForcedReference");
                }
                {
                    sb.AppendItem(UniqueActor, "UniqueActor");
                }
                Location?.Print(sb);
                External?.Print(sb);
                CreateReferenceToObject?.Print(sb);
                FindMatchingRefNearAlias?.Print(sb);
                FindMatchingRefFromEvent?.Print(sb);
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Items is {} ItemsItem)
                {
                    sb.AppendLine("Items =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                }
                {
                    sb.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                }
                {
                    sb.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                }
                {
                    sb.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                }
                {
                    sb.AppendItem(DisplayName, "DisplayName");
                }
                if (Spells is {} SpellsItem)
                {
                    sb.AppendLine("Spells =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SpellsItem.Overall);
                        if (SpellsItem.Specific != null)
                        {
                            foreach (var subItem in SpellsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Factions is {} FactionsItem)
                {
                    sb.AppendLine("Factions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (PackageData is {} PackageDataItem)
                {
                    sb.AppendLine("PackageData =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PackageDataItem.Overall);
                        if (PackageDataItem.Specific != null)
                        {
                            foreach (var subItem in PackageDataItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(VoiceTypes, "VoiceTypes");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ID = this.ID.Combine(rhs.ID);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.AliasIDToForceIntoWhenFilled = this.AliasIDToForceIntoWhenFilled.Combine(rhs.AliasIDToForceIntoWhenFilled);
                ret.SpecificLocation = this.SpecificLocation.Combine(rhs.SpecificLocation);
                ret.ForcedReference = this.ForcedReference.Combine(rhs.ForcedReference);
                ret.UniqueActor = this.UniqueActor.Combine(rhs.UniqueActor);
                ret.Location = this.Location.Combine(rhs.Location, (l, r) => l.Combine(r));
                ret.External = this.External.Combine(rhs.External, (l, r) => l.Combine(r));
                ret.CreateReferenceToObject = this.CreateReferenceToObject.Combine(rhs.CreateReferenceToObject, (l, r) => l.Combine(r));
                ret.FindMatchingRefNearAlias = this.FindMatchingRefNearAlias.Combine(rhs.FindMatchingRefNearAlias, (l, r) => l.Combine(r));
                ret.FindMatchingRefFromEvent = this.FindMatchingRefFromEvent.Combine(rhs.FindMatchingRefFromEvent, (l, r) => l.Combine(r));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), Noggog.ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.SpectatorOverridePackageList = this.SpectatorOverridePackageList.Combine(rhs.SpectatorOverridePackageList);
                ret.ObserveDeadBodyOverridePackageList = this.ObserveDeadBodyOverridePackageList.Combine(rhs.ObserveDeadBodyOverridePackageList);
                ret.GuardWarnOverridePackageList = this.GuardWarnOverridePackageList.Combine(rhs.GuardWarnOverridePackageList);
                ret.CombatOverridePackageList = this.CombatOverridePackageList.Combine(rhs.CombatOverridePackageList);
                ret.DisplayName = this.DisplayName.Combine(rhs.DisplayName);
                ret.Spells = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Spells?.Overall, rhs.Spells?.Overall), Noggog.ExceptionExt.Combine(this.Spells?.Specific, rhs.Spells?.Specific));
                ret.Factions = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), Noggog.ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.PackageData = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.PackageData?.Overall, rhs.PackageData?.Overall), Noggog.ExceptionExt.Combine(this.PackageData?.Specific, rhs.PackageData?.Specific));
                ret.VoiceTypes = this.VoiceTypes.Combine(rhs.VoiceTypes);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool ID;
            public bool Type;
            public bool Name;
            public bool Flags;
            public bool AliasIDToForceIntoWhenFilled;
            public bool SpecificLocation;
            public bool ForcedReference;
            public bool UniqueActor;
            public LocationAliasReference.TranslationMask? Location;
            public ExternalAliasReference.TranslationMask? External;
            public CreateReferenceToObject.TranslationMask? CreateReferenceToObject;
            public FindMatchingRefNearAlias.TranslationMask? FindMatchingRefNearAlias;
            public FindMatchingRefFromEvent.TranslationMask? FindMatchingRefFromEvent;
            public Condition.TranslationMask? Conditions;
            public bool Keywords;
            public ContainerEntry.TranslationMask? Items;
            public bool SpectatorOverridePackageList;
            public bool ObserveDeadBodyOverridePackageList;
            public bool GuardWarnOverridePackageList;
            public bool CombatOverridePackageList;
            public bool DisplayName;
            public bool Spells;
            public bool Factions;
            public bool PackageData;
            public bool VoiceTypes;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.ID = defaultOn;
                this.Type = defaultOn;
                this.Name = defaultOn;
                this.Flags = defaultOn;
                this.AliasIDToForceIntoWhenFilled = defaultOn;
                this.SpecificLocation = defaultOn;
                this.ForcedReference = defaultOn;
                this.UniqueActor = defaultOn;
                this.Keywords = defaultOn;
                this.SpectatorOverridePackageList = defaultOn;
                this.ObserveDeadBodyOverridePackageList = defaultOn;
                this.GuardWarnOverridePackageList = defaultOn;
                this.CombatOverridePackageList = defaultOn;
                this.DisplayName = defaultOn;
                this.Spells = defaultOn;
                this.Factions = defaultOn;
                this.PackageData = defaultOn;
                this.VoiceTypes = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((ID, null));
                ret.Add((Type, null));
                ret.Add((Name, null));
                ret.Add((Flags, null));
                ret.Add((AliasIDToForceIntoWhenFilled, null));
                ret.Add((SpecificLocation, null));
                ret.Add((ForcedReference, null));
                ret.Add((UniqueActor, null));
                ret.Add((Location != null ? Location.OnOverall : DefaultOn, Location?.GetCrystal()));
                ret.Add((External != null ? External.OnOverall : DefaultOn, External?.GetCrystal()));
                ret.Add((CreateReferenceToObject != null ? CreateReferenceToObject.OnOverall : DefaultOn, CreateReferenceToObject?.GetCrystal()));
                ret.Add((FindMatchingRefNearAlias != null ? FindMatchingRefNearAlias.OnOverall : DefaultOn, FindMatchingRefNearAlias?.GetCrystal()));
                ret.Add((FindMatchingRefFromEvent != null ? FindMatchingRefFromEvent.OnOverall : DefaultOn, FindMatchingRefFromEvent?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((Keywords, null));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((SpectatorOverridePackageList, null));
                ret.Add((ObserveDeadBodyOverridePackageList, null));
                ret.Add((GuardWarnOverridePackageList, null));
                ret.Add((CombatOverridePackageList, null));
                ret.Add((DisplayName, null));
                ret.Add((Spells, null));
                ret.Add((Factions, null));
                ret.Add((PackageData, null));
                ret.Add((VoiceTypes, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestAliasCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => QuestAliasSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => QuestAliasBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestAliasBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static QuestAlias CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new QuestAlias();
            ((QuestAliasSetterCommon)((IQuestAliasGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out QuestAlias item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((QuestAliasSetterCommon)((IQuestAliasGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static QuestAlias GetNew()
        {
            return new QuestAlias();
        }

    }
    #endregion

    #region Interface
    public partial interface IQuestAlias :
        IFormLinkContainer,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IQuestAlias>,
        INamed,
        INamedRequired,
        IQuestAliasGetter
    {
        new UInt32 ID { get; set; }
        new QuestAlias.TypeEnum Type { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired
        /// </summary>
        new String? Name { get; set; }
        new QuestAlias.Flag? Flags { get; set; }
        new Int32? AliasIDToForceIntoWhenFilled { get; set; }
        new IFormLinkNullable<ILocationGetter> SpecificLocation { get; set; }
        new IFormLinkNullable<IPlacedGetter> ForcedReference { get; set; }
        new IFormLinkNullable<INpcGetter> UniqueActor { get; set; }
        new LocationAliasReference? Location { get; set; }
        new ExternalAliasReference? External { get; set; }
        new CreateReferenceToObject? CreateReferenceToObject { get; set; }
        new FindMatchingRefNearAlias? FindMatchingRefNearAlias { get; set; }
        new FindMatchingRefFromEvent? FindMatchingRefFromEvent { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new ExtendedList<ContainerEntry>? Items { get; set; }
        new IFormLinkNullable<IFormListGetter> SpectatorOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> GuardWarnOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> CombatOverridePackageList { get; set; }
        new IFormLinkNullable<IMessageGetter> DisplayName { get; set; }
        new ExtendedList<IFormLinkGetter<ISpellGetter>> Spells { get; }
        new ExtendedList<IFormLinkGetter<IFactionGetter>> Factions { get; }
        new ExtendedList<IFormLinkGetter<IPackageGetter>> PackageData { get; }
        new IFormLinkNullable<IAliasVoiceTypeGetter> VoiceTypes { get; set; }
    }

    public partial interface IQuestAliasGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IQuestAliasGetter>,
        INamedGetter,
        INamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => QuestAlias_Registration.Instance;
        UInt32 ID { get; }
        QuestAlias.TypeEnum Type { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter
        /// </summary>
        String? Name { get; }
        #endregion
        QuestAlias.Flag? Flags { get; }
        Int32? AliasIDToForceIntoWhenFilled { get; }
        IFormLinkNullableGetter<ILocationGetter> SpecificLocation { get; }
        IFormLinkNullableGetter<IPlacedGetter> ForcedReference { get; }
        IFormLinkNullableGetter<INpcGetter> UniqueActor { get; }
        ILocationAliasReferenceGetter? Location { get; }
        IExternalAliasReferenceGetter? External { get; }
        ICreateReferenceToObjectGetter? CreateReferenceToObject { get; }
        IFindMatchingRefNearAliasGetter? FindMatchingRefNearAlias { get; }
        IFindMatchingRefFromEventGetter? FindMatchingRefFromEvent { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IReadOnlyList<IContainerEntryGetter>? Items { get; }
        IFormLinkNullableGetter<IFormListGetter> SpectatorOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> ObserveDeadBodyOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> GuardWarnOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> CombatOverridePackageList { get; }
        IFormLinkNullableGetter<IMessageGetter> DisplayName { get; }
        IReadOnlyList<IFormLinkGetter<ISpellGetter>> Spells { get; }
        IReadOnlyList<IFormLinkGetter<IFactionGetter>> Factions { get; }
        IReadOnlyList<IFormLinkGetter<IPackageGetter>> PackageData { get; }
        IFormLinkNullableGetter<IAliasVoiceTypeGetter> VoiceTypes { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class QuestAliasMixIn
    {
        public static void Clear(this IQuestAlias item)
        {
            ((QuestAliasSetterCommon)((IQuestAliasGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static QuestAlias.Mask<bool> GetEqualsMask(
            this IQuestAliasGetter item,
            IQuestAliasGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IQuestAliasGetter item,
            string? name = null,
            QuestAlias.Mask<bool>? printMask = null)
        {
            return ((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IQuestAliasGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestAlias.Mask<bool>? printMask = null)
        {
            ((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IQuestAliasGetter item,
            IQuestAliasGetter rhs,
            QuestAlias.TranslationMask? equalsMask = null)
        {
            return ((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IQuestAlias lhs,
            IQuestAliasGetter rhs)
        {
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IQuestAlias lhs,
            IQuestAliasGetter rhs,
            QuestAlias.TranslationMask? copyMask = null)
        {
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IQuestAlias lhs,
            IQuestAliasGetter rhs,
            out QuestAlias.ErrorMask errorMask,
            QuestAlias.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = QuestAlias.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IQuestAlias lhs,
            IQuestAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static QuestAlias DeepCopy(
            this IQuestAliasGetter item,
            QuestAlias.TranslationMask? copyMask = null)
        {
            return ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static QuestAlias DeepCopy(
            this IQuestAliasGetter item,
            out QuestAlias.ErrorMask errorMask,
            QuestAlias.TranslationMask? copyMask = null)
        {
            return ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static QuestAlias DeepCopy(
            this IQuestAliasGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IQuestAlias item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((QuestAliasSetterCommon)((IQuestAliasGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum QuestAlias_FieldIndex
    {
        ID = 0,
        Type = 1,
        Name = 2,
        Flags = 3,
        AliasIDToForceIntoWhenFilled = 4,
        SpecificLocation = 5,
        ForcedReference = 6,
        UniqueActor = 7,
        Location = 8,
        External = 9,
        CreateReferenceToObject = 10,
        FindMatchingRefNearAlias = 11,
        FindMatchingRefFromEvent = 12,
        Conditions = 13,
        Keywords = 14,
        Items = 15,
        SpectatorOverridePackageList = 16,
        ObserveDeadBodyOverridePackageList = 17,
        GuardWarnOverridePackageList = 18,
        CombatOverridePackageList = 19,
        DisplayName = 20,
        Spells = 21,
        Factions = 22,
        PackageData = 23,
        VoiceTypes = 24,
    }
    #endregion

    #region Registration
    internal partial class QuestAlias_Registration : ILoquiRegistration
    {
        public static readonly QuestAlias_Registration Instance = new QuestAlias_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 25;

        public const ushort FieldCount = 25;

        public static readonly Type MaskType = typeof(QuestAlias.Mask<>);

        public static readonly Type ErrorMaskType = typeof(QuestAlias.ErrorMask);

        public static readonly Type ClassType = typeof(QuestAlias);

        public static readonly Type GetterType = typeof(IQuestAliasGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IQuestAlias);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.QuestAlias";

        public const string Name = "QuestAlias";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var endTriggers = RecordCollection.Factory(RecordTypes.ALED);
            var triggers = RecordCollection.Factory(
                RecordTypes.ALST,
                RecordTypes.ALLS);
            var all = RecordCollection.Factory(
                RecordTypes.ALST,
                RecordTypes.ALLS,
                RecordTypes.ALED,
                RecordTypes.ALID,
                RecordTypes.FNAM,
                RecordTypes.ALFI,
                RecordTypes.ALFL,
                RecordTypes.ALFR,
                RecordTypes.ALUA,
                RecordTypes.ALFA,
                RecordTypes.KNAM,
                RecordTypes.ALRT,
                RecordTypes.ALEQ,
                RecordTypes.ALEA,
                RecordTypes.ALCO,
                RecordTypes.ALNA,
                RecordTypes.ALNT,
                RecordTypes.ALFE,
                RecordTypes.ALFD,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.CNTO,
                RecordTypes.COCT,
                RecordTypes.COED,
                RecordTypes.SPOR,
                RecordTypes.OCOR,
                RecordTypes.GWOR,
                RecordTypes.ECOR,
                RecordTypes.ALDN,
                RecordTypes.ALSP,
                RecordTypes.ALFC,
                RecordTypes.ALPC,
                RecordTypes.VTCK);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers,
                endRecordTypes: endTriggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(QuestAliasBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class QuestAliasSetterCommon
    {
        public static readonly QuestAliasSetterCommon Instance = new QuestAliasSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IQuestAlias item)
        {
            ClearPartial();
            item.ID = default(UInt32);
            item.Type = default(QuestAlias.TypeEnum);
            item.Name = default;
            item.Flags = default;
            item.AliasIDToForceIntoWhenFilled = default;
            item.SpecificLocation.Clear();
            item.ForcedReference.Clear();
            item.UniqueActor.Clear();
            item.Location = null;
            item.External = null;
            item.CreateReferenceToObject = null;
            item.FindMatchingRefNearAlias = null;
            item.FindMatchingRefFromEvent = null;
            item.Conditions.Clear();
            item.Keywords = null;
            item.Items = null;
            item.SpectatorOverridePackageList.Clear();
            item.ObserveDeadBodyOverridePackageList.Clear();
            item.GuardWarnOverridePackageList.Clear();
            item.CombatOverridePackageList.Clear();
            item.DisplayName.Clear();
            item.Spells.Clear();
            item.Factions.Clear();
            item.PackageData.Clear();
            item.VoiceTypes.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(IQuestAlias obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.SpecificLocation.Relink(mapping);
            obj.ForcedReference.Relink(mapping);
            obj.UniqueActor.Relink(mapping);
            obj.Location?.RemapLinks(mapping);
            obj.External?.RemapLinks(mapping);
            obj.CreateReferenceToObject?.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Items?.RemapLinks(mapping);
            obj.SpectatorOverridePackageList.Relink(mapping);
            obj.ObserveDeadBodyOverridePackageList.Relink(mapping);
            obj.GuardWarnOverridePackageList.Relink(mapping);
            obj.CombatOverridePackageList.Relink(mapping);
            obj.DisplayName.Relink(mapping);
            obj.Spells.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.PackageData.RemapLinks(mapping);
            obj.VoiceTypes.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IQuestAlias item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: QuestAliasBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: QuestAliasBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class QuestAliasCommon
    {
        public static readonly QuestAliasCommon Instance = new QuestAliasCommon();

        public QuestAlias.Mask<bool> GetEqualsMask(
            IQuestAliasGetter item,
            IQuestAliasGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new QuestAlias.Mask<bool>(false);
            ((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IQuestAliasGetter item,
            IQuestAliasGetter rhs,
            QuestAlias.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ID = item.ID == rhs.ID;
            ret.Type = item.Type == rhs.Type;
            ret.Name = string.Equals(item.Name, rhs.Name);
            ret.Flags = item.Flags == rhs.Flags;
            ret.AliasIDToForceIntoWhenFilled = item.AliasIDToForceIntoWhenFilled == rhs.AliasIDToForceIntoWhenFilled;
            ret.SpecificLocation = item.SpecificLocation.Equals(rhs.SpecificLocation);
            ret.ForcedReference = item.ForcedReference.Equals(rhs.ForcedReference);
            ret.UniqueActor = item.UniqueActor.Equals(rhs.UniqueActor);
            ret.Location = EqualsMaskHelper.EqualsHelper(
                item.Location,
                rhs.Location,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.External = EqualsMaskHelper.EqualsHelper(
                item.External,
                rhs.External,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.CreateReferenceToObject = EqualsMaskHelper.EqualsHelper(
                item.CreateReferenceToObject,
                rhs.CreateReferenceToObject,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FindMatchingRefNearAlias = EqualsMaskHelper.EqualsHelper(
                item.FindMatchingRefNearAlias,
                rhs.FindMatchingRefNearAlias,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FindMatchingRefFromEvent = EqualsMaskHelper.EqualsHelper(
                item.FindMatchingRefFromEvent,
                rhs.FindMatchingRefFromEvent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SpectatorOverridePackageList = item.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList);
            ret.ObserveDeadBodyOverridePackageList = item.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList);
            ret.GuardWarnOverridePackageList = item.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList);
            ret.CombatOverridePackageList = item.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList);
            ret.DisplayName = item.DisplayName.Equals(rhs.DisplayName);
            ret.Spells = item.Spells.CollectionEqualsHelper(
                rhs.Spells,
                (l, r) => object.Equals(l, r),
                include);
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (l, r) => object.Equals(l, r),
                include);
            ret.PackageData = item.PackageData.CollectionEqualsHelper(
                rhs.PackageData,
                (l, r) => object.Equals(l, r),
                include);
            ret.VoiceTypes = item.VoiceTypes.Equals(rhs.VoiceTypes);
        }
        
        public string Print(
            IQuestAliasGetter item,
            string? name = null,
            QuestAlias.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IQuestAliasGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            QuestAlias.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"QuestAlias =>");
            }
            else
            {
                sb.AppendLine($"{name} (QuestAlias) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IQuestAliasGetter item,
            StructuredStringBuilder sb,
            QuestAlias.Mask<bool>? printMask = null)
        {
            if (printMask?.ID ?? true)
            {
                sb.AppendItem(item.ID, "ID");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.AliasIDToForceIntoWhenFilled ?? true)
                && item.AliasIDToForceIntoWhenFilled is {} AliasIDToForceIntoWhenFilledItem)
            {
                sb.AppendItem(AliasIDToForceIntoWhenFilledItem, "AliasIDToForceIntoWhenFilled");
            }
            if (printMask?.SpecificLocation ?? true)
            {
                sb.AppendItem(item.SpecificLocation.FormKeyNullable, "SpecificLocation");
            }
            if (printMask?.ForcedReference ?? true)
            {
                sb.AppendItem(item.ForcedReference.FormKeyNullable, "ForcedReference");
            }
            if (printMask?.UniqueActor ?? true)
            {
                sb.AppendItem(item.UniqueActor.FormKeyNullable, "UniqueActor");
            }
            if ((printMask?.Location?.Overall ?? true)
                && item.Location is {} LocationItem)
            {
                LocationItem?.Print(sb, "Location");
            }
            if ((printMask?.External?.Overall ?? true)
                && item.External is {} ExternalItem)
            {
                ExternalItem?.Print(sb, "External");
            }
            if ((printMask?.CreateReferenceToObject?.Overall ?? true)
                && item.CreateReferenceToObject is {} CreateReferenceToObjectItem)
            {
                CreateReferenceToObjectItem?.Print(sb, "CreateReferenceToObject");
            }
            if ((printMask?.FindMatchingRefNearAlias?.Overall ?? true)
                && item.FindMatchingRefNearAlias is {} FindMatchingRefNearAliasItem)
            {
                FindMatchingRefNearAliasItem?.Print(sb, "FindMatchingRefNearAlias");
            }
            if ((printMask?.FindMatchingRefFromEvent?.Overall ?? true)
                && item.FindMatchingRefFromEvent is {} FindMatchingRefFromEventItem)
            {
                FindMatchingRefFromEventItem?.Print(sb, "FindMatchingRefFromEvent");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Items?.Overall ?? true)
                && item.Items is {} ItemsItem)
            {
                sb.AppendLine("Items =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ItemsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.SpectatorOverridePackageList ?? true)
            {
                sb.AppendItem(item.SpectatorOverridePackageList.FormKeyNullable, "SpectatorOverridePackageList");
            }
            if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
            {
                sb.AppendItem(item.ObserveDeadBodyOverridePackageList.FormKeyNullable, "ObserveDeadBodyOverridePackageList");
            }
            if (printMask?.GuardWarnOverridePackageList ?? true)
            {
                sb.AppendItem(item.GuardWarnOverridePackageList.FormKeyNullable, "GuardWarnOverridePackageList");
            }
            if (printMask?.CombatOverridePackageList ?? true)
            {
                sb.AppendItem(item.CombatOverridePackageList.FormKeyNullable, "CombatOverridePackageList");
            }
            if (printMask?.DisplayName ?? true)
            {
                sb.AppendItem(item.DisplayName.FormKeyNullable, "DisplayName");
            }
            if (printMask?.Spells?.Overall ?? true)
            {
                sb.AppendLine("Spells =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Spells)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                sb.AppendLine("Factions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Factions)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.PackageData?.Overall ?? true)
            {
                sb.AppendLine("PackageData =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.PackageData)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.VoiceTypes ?? true)
            {
                sb.AppendItem(item.VoiceTypes.FormKeyNullable, "VoiceTypes");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IQuestAliasGetter? lhs,
            IQuestAliasGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.ID) ?? true))
            {
                if (lhs.ID != rhs.ID) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Name) ?? true))
            {
                if (!string.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.AliasIDToForceIntoWhenFilled) ?? true))
            {
                if (lhs.AliasIDToForceIntoWhenFilled != rhs.AliasIDToForceIntoWhenFilled) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.SpecificLocation) ?? true))
            {
                if (!lhs.SpecificLocation.Equals(rhs.SpecificLocation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.ForcedReference) ?? true))
            {
                if (!lhs.ForcedReference.Equals(rhs.ForcedReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.UniqueActor) ?? true))
            {
                if (!lhs.UniqueActor.Equals(rhs.UniqueActor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Location) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Location, rhs.Location, out var lhsLocation, out var rhsLocation, out var isLocationEqual))
                {
                    if (!((LocationAliasReferenceCommon)((ILocationAliasReferenceGetter)lhsLocation).CommonInstance()!).Equals(lhsLocation, rhsLocation, equalsMask?.GetSubCrystal((int)QuestAlias_FieldIndex.Location))) return false;
                }
                else if (!isLocationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.External) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.External, rhs.External, out var lhsExternal, out var rhsExternal, out var isExternalEqual))
                {
                    if (!((ExternalAliasReferenceCommon)((IExternalAliasReferenceGetter)lhsExternal).CommonInstance()!).Equals(lhsExternal, rhsExternal, equalsMask?.GetSubCrystal((int)QuestAlias_FieldIndex.External))) return false;
                }
                else if (!isExternalEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.CreateReferenceToObject) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.CreateReferenceToObject, rhs.CreateReferenceToObject, out var lhsCreateReferenceToObject, out var rhsCreateReferenceToObject, out var isCreateReferenceToObjectEqual))
                {
                    if (!((CreateReferenceToObjectCommon)((ICreateReferenceToObjectGetter)lhsCreateReferenceToObject).CommonInstance()!).Equals(lhsCreateReferenceToObject, rhsCreateReferenceToObject, equalsMask?.GetSubCrystal((int)QuestAlias_FieldIndex.CreateReferenceToObject))) return false;
                }
                else if (!isCreateReferenceToObjectEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.FindMatchingRefNearAlias) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FindMatchingRefNearAlias, rhs.FindMatchingRefNearAlias, out var lhsFindMatchingRefNearAlias, out var rhsFindMatchingRefNearAlias, out var isFindMatchingRefNearAliasEqual))
                {
                    if (!((FindMatchingRefNearAliasCommon)((IFindMatchingRefNearAliasGetter)lhsFindMatchingRefNearAlias).CommonInstance()!).Equals(lhsFindMatchingRefNearAlias, rhsFindMatchingRefNearAlias, equalsMask?.GetSubCrystal((int)QuestAlias_FieldIndex.FindMatchingRefNearAlias))) return false;
                }
                else if (!isFindMatchingRefNearAliasEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.FindMatchingRefFromEvent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FindMatchingRefFromEvent, rhs.FindMatchingRefFromEvent, out var lhsFindMatchingRefFromEvent, out var rhsFindMatchingRefFromEvent, out var isFindMatchingRefFromEventEqual))
                {
                    if (!((FindMatchingRefFromEventCommon)((IFindMatchingRefFromEventGetter)lhsFindMatchingRefFromEvent).CommonInstance()!).Equals(lhsFindMatchingRefFromEvent, rhsFindMatchingRefFromEvent, equalsMask?.GetSubCrystal((int)QuestAlias_FieldIndex.FindMatchingRefFromEvent))) return false;
                }
                else if (!isFindMatchingRefFromEventEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)QuestAlias_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqualNullable(rhs.Items, (l, r) => ((ContainerEntryCommon)((IContainerEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)QuestAlias_FieldIndex.Items)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.SpectatorOverridePackageList) ?? true))
            {
                if (!lhs.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList) ?? true))
            {
                if (!lhs.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.GuardWarnOverridePackageList) ?? true))
            {
                if (!lhs.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.CombatOverridePackageList) ?? true))
            {
                if (!lhs.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.DisplayName) ?? true))
            {
                if (!lhs.DisplayName.Equals(rhs.DisplayName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Spells) ?? true))
            {
                if (!lhs.Spells.SequenceEqualNullable(rhs.Spells)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Factions) ?? true))
            {
                if (!lhs.Factions.SequenceEqualNullable(rhs.Factions)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.PackageData) ?? true))
            {
                if (!lhs.PackageData.SequenceEqualNullable(rhs.PackageData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.VoiceTypes) ?? true))
            {
                if (!lhs.VoiceTypes.Equals(rhs.VoiceTypes)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IQuestAliasGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ID);
            hash.Add(item.Type);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            if (item.AliasIDToForceIntoWhenFilled is {} AliasIDToForceIntoWhenFilleditem)
            {
                hash.Add(AliasIDToForceIntoWhenFilleditem);
            }
            hash.Add(item.SpecificLocation);
            hash.Add(item.ForcedReference);
            hash.Add(item.UniqueActor);
            if (item.Location is {} Locationitem)
            {
                hash.Add(Locationitem);
            }
            if (item.External is {} Externalitem)
            {
                hash.Add(Externalitem);
            }
            if (item.CreateReferenceToObject is {} CreateReferenceToObjectitem)
            {
                hash.Add(CreateReferenceToObjectitem);
            }
            if (item.FindMatchingRefNearAlias is {} FindMatchingRefNearAliasitem)
            {
                hash.Add(FindMatchingRefNearAliasitem);
            }
            if (item.FindMatchingRefFromEvent is {} FindMatchingRefFromEventitem)
            {
                hash.Add(FindMatchingRefFromEventitem);
            }
            hash.Add(item.Conditions);
            hash.Add(item.Keywords);
            hash.Add(item.Items);
            hash.Add(item.SpectatorOverridePackageList);
            hash.Add(item.ObserveDeadBodyOverridePackageList);
            hash.Add(item.GuardWarnOverridePackageList);
            hash.Add(item.CombatOverridePackageList);
            hash.Add(item.DisplayName);
            hash.Add(item.Spells);
            hash.Add(item.Factions);
            hash.Add(item.PackageData);
            hash.Add(item.VoiceTypes);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return QuestAlias.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IQuestAliasGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.SpecificLocation, out var SpecificLocationInfo))
            {
                yield return SpecificLocationInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ForcedReference, out var ForcedReferenceInfo))
            {
                yield return ForcedReferenceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.UniqueActor, out var UniqueActorInfo))
            {
                yield return UniqueActorInfo;
            }
            if (obj.Location is {} LocationItems)
            {
                foreach (var item in LocationItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.External is {} ExternalItems)
            {
                foreach (var item in ExternalItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.CreateReferenceToObject is {} CreateReferenceToObjectItems)
            {
                foreach (var item in CreateReferenceToObjectItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Items is {} ItemsItem)
            {
                foreach (var item in ItemsItem.WhereCastable<IContainerEntryGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.SpectatorOverridePackageList, out var SpectatorOverridePackageListInfo))
            {
                yield return SpectatorOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ObserveDeadBodyOverridePackageList, out var ObserveDeadBodyOverridePackageListInfo))
            {
                yield return ObserveDeadBodyOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.GuardWarnOverridePackageList, out var GuardWarnOverridePackageListInfo))
            {
                yield return GuardWarnOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CombatOverridePackageList, out var CombatOverridePackageListInfo))
            {
                yield return CombatOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DisplayName, out var DisplayNameInfo))
            {
                yield return DisplayNameInfo;
            }
            foreach (var item in obj.Spells)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Factions)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.PackageData)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.VoiceTypes, out var VoiceTypesInfo))
            {
                yield return VoiceTypesInfo;
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class QuestAliasSetterTranslationCommon
    {
        public static readonly QuestAliasSetterTranslationCommon Instance = new QuestAliasSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IQuestAlias item,
            IQuestAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.ID) ?? true))
            {
                item.ID = rhs.ID;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.AliasIDToForceIntoWhenFilled) ?? true))
            {
                item.AliasIDToForceIntoWhenFilled = rhs.AliasIDToForceIntoWhenFilled;
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.SpecificLocation) ?? true))
            {
                item.SpecificLocation.SetTo(rhs.SpecificLocation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.ForcedReference) ?? true))
            {
                item.ForcedReference.SetTo(rhs.ForcedReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.UniqueActor) ?? true))
            {
                item.UniqueActor.SetTo(rhs.UniqueActor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Location) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Location);
                try
                {
                    if(rhs.Location is {} rhsLocation)
                    {
                        item.Location = rhsLocation.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestAlias_FieldIndex.Location));
                    }
                    else
                    {
                        item.Location = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.External) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.External);
                try
                {
                    if(rhs.External is {} rhsExternal)
                    {
                        item.External = rhsExternal.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestAlias_FieldIndex.External));
                    }
                    else
                    {
                        item.External = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.CreateReferenceToObject) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.CreateReferenceToObject);
                try
                {
                    if(rhs.CreateReferenceToObject is {} rhsCreateReferenceToObject)
                    {
                        item.CreateReferenceToObject = rhsCreateReferenceToObject.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestAlias_FieldIndex.CreateReferenceToObject));
                    }
                    else
                    {
                        item.CreateReferenceToObject = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.FindMatchingRefNearAlias) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.FindMatchingRefNearAlias);
                try
                {
                    if(rhs.FindMatchingRefNearAlias is {} rhsFindMatchingRefNearAlias)
                    {
                        item.FindMatchingRefNearAlias = rhsFindMatchingRefNearAlias.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestAlias_FieldIndex.FindMatchingRefNearAlias));
                    }
                    else
                    {
                        item.FindMatchingRefNearAlias = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.FindMatchingRefFromEvent) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.FindMatchingRefFromEvent);
                try
                {
                    if(rhs.FindMatchingRefFromEvent is {} rhsFindMatchingRefFromEvent)
                    {
                        item.FindMatchingRefFromEvent = rhsFindMatchingRefFromEvent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)QuestAlias_FieldIndex.FindMatchingRefFromEvent));
                    }
                    else
                    {
                        item.FindMatchingRefFromEvent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ContainerEntry>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.SpectatorOverridePackageList) ?? true))
            {
                item.SpectatorOverridePackageList.SetTo(rhs.SpectatorOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList) ?? true))
            {
                item.ObserveDeadBodyOverridePackageList.SetTo(rhs.ObserveDeadBodyOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.GuardWarnOverridePackageList) ?? true))
            {
                item.GuardWarnOverridePackageList.SetTo(rhs.GuardWarnOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.CombatOverridePackageList) ?? true))
            {
                item.CombatOverridePackageList.SetTo(rhs.CombatOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.DisplayName) ?? true))
            {
                item.DisplayName.SetTo(rhs.DisplayName.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Spells) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Spells);
                try
                {
                    item.Spells.SetTo(
                        rhs.Spells
                            .Select(b => (IFormLinkGetter<ISpellGetter>)new FormLink<ISpellGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.Factions);
                try
                {
                    item.Factions.SetTo(
                        rhs.Factions
                            .Select(b => (IFormLinkGetter<IFactionGetter>)new FormLink<IFactionGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.PackageData) ?? true))
            {
                errorMask?.PushIndex((int)QuestAlias_FieldIndex.PackageData);
                try
                {
                    item.PackageData.SetTo(
                        rhs.PackageData
                            .Select(b => (IFormLinkGetter<IPackageGetter>)new FormLink<IPackageGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)QuestAlias_FieldIndex.VoiceTypes) ?? true))
            {
                item.VoiceTypes.SetTo(rhs.VoiceTypes.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IQuestAlias item,
            IQuestAliasGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public QuestAlias DeepCopy(
            IQuestAliasGetter item,
            QuestAlias.TranslationMask? copyMask = null)
        {
            QuestAlias ret = (QuestAlias)((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public QuestAlias DeepCopy(
            IQuestAliasGetter item,
            out QuestAlias.ErrorMask errorMask,
            QuestAlias.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            QuestAlias ret = (QuestAlias)((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = QuestAlias.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public QuestAlias DeepCopy(
            IQuestAliasGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            QuestAlias ret = (QuestAlias)((QuestAliasCommon)((IQuestAliasGetter)item).CommonInstance()!).GetNew();
            ((QuestAliasSetterTranslationCommon)((IQuestAliasGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class QuestAlias
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestAlias_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => QuestAlias_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => QuestAliasCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return QuestAliasSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => QuestAliasSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IQuestAliasGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IQuestAliasGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IQuestAliasGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class QuestAliasBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly QuestAliasBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IQuestAliasGetter item,
            MutagenWriter writer)
        {
        }

        public static void WriteRecordTypes(
            IQuestAliasGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            QuestAliasBinaryWriteTranslation.WriteBinaryIDParse(
                writer: writer,
                item: item);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.ALID),
                binaryType: StringBinaryType.NullTerminate);
            EnumBinaryTranslation<QuestAlias.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.AliasIDToForceIntoWhenFilled,
                header: translationParams.ConvertToCustom(RecordTypes.ALFI));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpecificLocation,
                header: translationParams.ConvertToCustom(RecordTypes.ALFL));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ForcedReference,
                header: translationParams.ConvertToCustom(RecordTypes.ALFR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.UniqueActor,
                header: translationParams.ConvertToCustom(RecordTypes.ALUA));
            if (item.Location is {} LocationItem)
            {
                ((LocationAliasReferenceBinaryWriteTranslation)((IBinaryItem)LocationItem).BinaryWriteTranslator).Write(
                    item: LocationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.External is {} ExternalItem)
            {
                ((ExternalAliasReferenceBinaryWriteTranslation)((IBinaryItem)ExternalItem).BinaryWriteTranslator).Write(
                    item: ExternalItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.CreateReferenceToObject is {} CreateReferenceToObjectItem)
            {
                ((CreateReferenceToObjectBinaryWriteTranslation)((IBinaryItem)CreateReferenceToObjectItem).BinaryWriteTranslator).Write(
                    item: CreateReferenceToObjectItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.FindMatchingRefNearAlias is {} FindMatchingRefNearAliasItem)
            {
                ((FindMatchingRefNearAliasBinaryWriteTranslation)((IBinaryItem)FindMatchingRefNearAliasItem).BinaryWriteTranslator).Write(
                    item: FindMatchingRefNearAliasItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.FindMatchingRefFromEvent is {} FindMatchingRefFromEventItem)
            {
                ((FindMatchingRefFromEventBinaryWriteTranslation)((IBinaryItem)FindMatchingRefFromEventItem).BinaryWriteTranslator).Write(
                    item: FindMatchingRefFromEventItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IContainerEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Items,
                counterType: RecordTypes.COCT,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IContainerEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ContainerEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpectatorOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.SPOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObserveDeadBodyOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.OCOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GuardWarnOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.GWOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.ECOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DisplayName,
                header: translationParams.ConvertToCustom(RecordTypes.ALDN));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellGetter>>.Instance.Write(
                writer: writer,
                items: item.Spells,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.ALSP));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IFactionGetter>>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IFactionGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.ALFC));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.PackageData,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPackageGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.ALPC));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.VoiceTypes,
                header: translationParams.ConvertToCustom(RecordTypes.VTCK));
        }

        public static partial void WriteBinaryIDParseCustom(
            MutagenWriter writer,
            IQuestAliasGetter item);

        public static void WriteBinaryIDParse(
            MutagenWriter writer,
            IQuestAliasGetter item)
        {
            WriteBinaryIDParseCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IQuestAliasGetter item,
            TypedWriteParams translationParams)
        {
            WriteEmbedded(
                item: item,
                writer: writer);
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, RecordTypes.ALED)) { } // End Marker
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IQuestAliasGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class QuestAliasBinaryCreateTranslation
    {
        public static readonly QuestAliasBinaryCreateTranslation Instance = new QuestAliasBinaryCreateTranslation();

        public static void FillBinaryStructs(
            IQuestAlias item,
            MutagenFrame frame)
        {
        }

        public static ParseResult FillBinaryRecordTypes(
            IQuestAlias item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ALST:
                case RecordTypeInts.ALLS:
                {
                    if (lastParsed.ShortCircuit((int)QuestAlias_FieldIndex.ID, translationParams)) return ParseResult.Stop;
                    return QuestAliasBinaryCreateTranslation.FillBinaryIDParseCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.ALID:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)QuestAlias_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<QuestAlias.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)QuestAlias_FieldIndex.Flags;
                }
                case RecordTypeInts.ALFI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AliasIDToForceIntoWhenFilled = frame.ReadInt32();
                    return (int)QuestAlias_FieldIndex.AliasIDToForceIntoWhenFilled;
                }
                case RecordTypeInts.ALFL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpecificLocation.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestAlias_FieldIndex.SpecificLocation;
                }
                case RecordTypeInts.ALFR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ForcedReference.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestAlias_FieldIndex.ForcedReference;
                }
                case RecordTypeInts.ALUA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.UniqueActor.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestAlias_FieldIndex.UniqueActor;
                }
                case RecordTypeInts.ALFA:
                case RecordTypeInts.KNAM:
                case RecordTypeInts.ALRT:
                {
                    item.Location = Mutagen.Bethesda.Skyrim.LocationAliasReference.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestAlias_FieldIndex.Location;
                }
                case RecordTypeInts.ALEQ:
                case RecordTypeInts.ALEA:
                {
                    item.External = Mutagen.Bethesda.Skyrim.ExternalAliasReference.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestAlias_FieldIndex.External;
                }
                case RecordTypeInts.ALCO:
                {
                    item.CreateReferenceToObject = Mutagen.Bethesda.Skyrim.CreateReferenceToObject.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestAlias_FieldIndex.CreateReferenceToObject;
                }
                case RecordTypeInts.ALNA:
                case RecordTypeInts.ALNT:
                {
                    item.FindMatchingRefNearAlias = Mutagen.Bethesda.Skyrim.FindMatchingRefNearAlias.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestAlias_FieldIndex.FindMatchingRefNearAlias;
                }
                case RecordTypeInts.ALFE:
                case RecordTypeInts.ALFD:
                {
                    item.FindMatchingRefFromEvent = Mutagen.Bethesda.Skyrim.FindMatchingRefFromEvent.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestAlias_FieldIndex.FindMatchingRefFromEvent;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)QuestAlias_FieldIndex.Conditions;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)QuestAlias_FieldIndex.Keywords;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    item.Items = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ContainerEntry>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.COCT,
                            triggeringRecord: ContainerEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ContainerEntry.TryCreateFromBinary)
                        .CastExtendedList<ContainerEntry>();
                    return (int)QuestAlias_FieldIndex.Items;
                }
                case RecordTypeInts.SPOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpectatorOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestAlias_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObserveDeadBodyOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GuardWarnOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestAlias_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestAlias_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.ALDN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DisplayName.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestAlias_FieldIndex.DisplayName;
                }
                case RecordTypeInts.ALSP:
                {
                    item.Spells.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.ALSP),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)QuestAlias_FieldIndex.Spells;
                }
                case RecordTypeInts.ALFC:
                {
                    item.Factions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IFactionGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.ALFC),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)QuestAlias_FieldIndex.Factions;
                }
                case RecordTypeInts.ALPC:
                {
                    item.PackageData.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPackageGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.ALPC),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)QuestAlias_FieldIndex.PackageData;
                }
                case RecordTypeInts.VTCK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VoiceTypes.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)QuestAlias_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.ALED: // End Marker
                {
                    frame.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }

        public static partial ParseResult FillBinaryIDParseCustom(
            MutagenFrame frame,
            IQuestAlias item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class QuestAliasBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IQuestAliasGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestAliasBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class QuestAliasBinaryOverlay :
        PluginBinaryOverlay,
        IQuestAliasGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => QuestAlias_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => QuestAlias_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => QuestAliasCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => QuestAliasSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IQuestAliasGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IQuestAliasGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IQuestAliasGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => QuestAliasCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => QuestAliasBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((QuestAliasBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region IDParse
        public partial ParseResult IDParseCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region Name
        private int? _NameLocation;
        public String? Name => _NameLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name ?? string.Empty;
        #endregion
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public QuestAlias.Flag? Flags => _FlagsLocation.HasValue ? (QuestAlias.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(QuestAlias.Flag?);
        #endregion
        #region AliasIDToForceIntoWhenFilled
        private int? _AliasIDToForceIntoWhenFilledLocation;
        public Int32? AliasIDToForceIntoWhenFilled => _AliasIDToForceIntoWhenFilledLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _AliasIDToForceIntoWhenFilledLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region SpecificLocation
        private int? _SpecificLocationLocation;
        public IFormLinkNullableGetter<ILocationGetter> SpecificLocation => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationGetter>(_package, _recordData, _SpecificLocationLocation);
        #endregion
        #region ForcedReference
        private int? _ForcedReferenceLocation;
        public IFormLinkNullableGetter<IPlacedGetter> ForcedReference => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedGetter>(_package, _recordData, _ForcedReferenceLocation);
        #endregion
        #region UniqueActor
        private int? _UniqueActorLocation;
        public IFormLinkNullableGetter<INpcGetter> UniqueActor => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<INpcGetter>(_package, _recordData, _UniqueActorLocation);
        #endregion
        public ILocationAliasReferenceGetter? Location { get; private set; }
        public IExternalAliasReferenceGetter? External { get; private set; }
        public ICreateReferenceToObjectGetter? CreateReferenceToObject { get; private set; }
        public IFindMatchingRefNearAliasGetter? FindMatchingRefNearAlias { get; private set; }
        public IFindMatchingRefFromEventGetter? FindMatchingRefFromEvent { get; private set; }
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = [];
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        public IReadOnlyList<IContainerEntryGetter>? Items { get; private set; }
        #region SpectatorOverridePackageList
        private int? _SpectatorOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> SpectatorOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _SpectatorOverridePackageListLocation);
        #endregion
        #region ObserveDeadBodyOverridePackageList
        private int? _ObserveDeadBodyOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> ObserveDeadBodyOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _ObserveDeadBodyOverridePackageListLocation);
        #endregion
        #region GuardWarnOverridePackageList
        private int? _GuardWarnOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> GuardWarnOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _GuardWarnOverridePackageListLocation);
        #endregion
        #region CombatOverridePackageList
        private int? _CombatOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> CombatOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _CombatOverridePackageListLocation);
        #endregion
        #region DisplayName
        private int? _DisplayNameLocation;
        public IFormLinkNullableGetter<IMessageGetter> DisplayName => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMessageGetter>(_package, _recordData, _DisplayNameLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISpellGetter>> Spells { get; private set; } = [];
        public IReadOnlyList<IFormLinkGetter<IFactionGetter>> Factions { get; private set; } = [];
        public IReadOnlyList<IFormLinkGetter<IPackageGetter>> PackageData { get; private set; } = [];
        #region VoiceTypes
        private int? _VoiceTypesLocation;
        public IFormLinkNullableGetter<IAliasVoiceTypeGetter> VoiceTypes => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IAliasVoiceTypeGetter>(_package, _recordData, _VoiceTypesLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected QuestAliasBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IQuestAliasGetter QuestAliasFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new QuestAliasBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IQuestAliasGetter QuestAliasFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return QuestAliasFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ALST:
                case RecordTypeInts.ALLS:
                {
                    if (lastParsed.ShortCircuit((int)QuestAlias_FieldIndex.ID, translationParams)) return ParseResult.Stop;
                    return IDParseCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.ALID:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.Name;
                }
                case RecordTypeInts.FNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.Flags;
                }
                case RecordTypeInts.ALFI:
                {
                    _AliasIDToForceIntoWhenFilledLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.AliasIDToForceIntoWhenFilled;
                }
                case RecordTypeInts.ALFL:
                {
                    _SpecificLocationLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.SpecificLocation;
                }
                case RecordTypeInts.ALFR:
                {
                    _ForcedReferenceLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.ForcedReference;
                }
                case RecordTypeInts.ALUA:
                {
                    _UniqueActorLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.UniqueActor;
                }
                case RecordTypeInts.ALFA:
                case RecordTypeInts.KNAM:
                case RecordTypeInts.ALRT:
                {
                    this.Location = LocationAliasReferenceBinaryOverlay.LocationAliasReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestAlias_FieldIndex.Location;
                }
                case RecordTypeInts.ALEQ:
                case RecordTypeInts.ALEA:
                {
                    this.External = ExternalAliasReferenceBinaryOverlay.ExternalAliasReferenceFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestAlias_FieldIndex.External;
                }
                case RecordTypeInts.ALCO:
                {
                    this.CreateReferenceToObject = CreateReferenceToObjectBinaryOverlay.CreateReferenceToObjectFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestAlias_FieldIndex.CreateReferenceToObject;
                }
                case RecordTypeInts.ALNA:
                case RecordTypeInts.ALNT:
                {
                    this.FindMatchingRefNearAlias = FindMatchingRefNearAliasBinaryOverlay.FindMatchingRefNearAliasFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestAlias_FieldIndex.FindMatchingRefNearAlias;
                }
                case RecordTypeInts.ALFE:
                case RecordTypeInts.ALFD:
                {
                    this.FindMatchingRefFromEvent = FindMatchingRefFromEventBinaryOverlay.FindMatchingRefFromEventFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)QuestAlias_FieldIndex.FindMatchingRefFromEvent;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)QuestAlias_FieldIndex.Conditions;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)QuestAlias_FieldIndex.Keywords;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    this.Items = BinaryOverlayList.FactoryByCountPerItem<IContainerEntryGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ContainerEntry_Registration.TriggerSpecs,
                        countType: RecordTypes.COCT,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ContainerEntryBinaryOverlay.ContainerEntryFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)QuestAlias_FieldIndex.Items;
                }
                case RecordTypeInts.SPOR:
                {
                    _SpectatorOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    _ObserveDeadBodyOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    _GuardWarnOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    _CombatOverridePackageListLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.ALDN:
                {
                    _DisplayNameLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.DisplayName;
                }
                case RecordTypeInts.ALSP:
                {
                    this.Spells = BinaryOverlayList.FactoryByArray<IFormLinkGetter<ISpellGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.ALSP,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)QuestAlias_FieldIndex.Spells;
                }
                case RecordTypeInts.ALFC:
                {
                    this.Factions = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IFactionGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IFactionGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.ALFC,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)QuestAlias_FieldIndex.Factions;
                }
                case RecordTypeInts.ALPC:
                {
                    this.PackageData = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IPackageGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPackageGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.ALPC,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)QuestAlias_FieldIndex.PackageData;
                }
                case RecordTypeInts.VTCK:
                {
                    _VoiceTypesLocation = (stream.Position - offset);
                    return (int)QuestAlias_FieldIndex.VoiceTypes;
                }
                case RecordTypeInts.ALED: // End Marker
                {
                    stream.ReadSubrecord();
                    return ParseResult.Stop;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            QuestAliasMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IQuestAliasGetter rhs) return false;
            return ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IQuestAliasGetter? obj)
        {
            return ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((QuestAliasCommon)((IQuestAliasGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

