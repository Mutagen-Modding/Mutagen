/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class FootstepSet :
        SkyrimMajorRecord,
        IEquatable<IFootstepSetGetter>,
        IFootstepSetInternal,
        ILoquiObjectSetter<FootstepSet>
    {
        #region Ctor
        protected FootstepSet()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region WalkForwardFootsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IFootstepGetter>> _WalkForwardFootsteps = new ExtendedList<IFormLinkGetter<IFootstepGetter>>();
        public ExtendedList<IFormLinkGetter<IFootstepGetter>> WalkForwardFootsteps
        {
            get => this._WalkForwardFootsteps;
            init => this._WalkForwardFootsteps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IFootstepGetter>> IFootstepSetGetter.WalkForwardFootsteps => _WalkForwardFootsteps;
        #endregion

        #endregion
        #region RunForwardFootsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IFootstepGetter>> _RunForwardFootsteps = new ExtendedList<IFormLinkGetter<IFootstepGetter>>();
        public ExtendedList<IFormLinkGetter<IFootstepGetter>> RunForwardFootsteps
        {
            get => this._RunForwardFootsteps;
            init => this._RunForwardFootsteps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IFootstepGetter>> IFootstepSetGetter.RunForwardFootsteps => _RunForwardFootsteps;
        #endregion

        #endregion
        #region WalkForwardAlternateFootsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IFootstepGetter>> _WalkForwardAlternateFootsteps = new ExtendedList<IFormLinkGetter<IFootstepGetter>>();
        public ExtendedList<IFormLinkGetter<IFootstepGetter>> WalkForwardAlternateFootsteps
        {
            get => this._WalkForwardAlternateFootsteps;
            init => this._WalkForwardAlternateFootsteps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IFootstepGetter>> IFootstepSetGetter.WalkForwardAlternateFootsteps => _WalkForwardAlternateFootsteps;
        #endregion

        #endregion
        #region RunForwardAlternateFootsteps
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IFootstepGetter>> _RunForwardAlternateFootsteps = new ExtendedList<IFormLinkGetter<IFootstepGetter>>();
        public ExtendedList<IFormLinkGetter<IFootstepGetter>> RunForwardAlternateFootsteps
        {
            get => this._RunForwardAlternateFootsteps;
            init => this._RunForwardAlternateFootsteps = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IFootstepGetter>> IFootstepSetGetter.RunForwardAlternateFootsteps => _RunForwardAlternateFootsteps;
        #endregion

        #endregion
        #region WalkForwardAlternateFootsteps2
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IFootstepGetter>> _WalkForwardAlternateFootsteps2 = new ExtendedList<IFormLinkGetter<IFootstepGetter>>();
        public ExtendedList<IFormLinkGetter<IFootstepGetter>> WalkForwardAlternateFootsteps2
        {
            get => this._WalkForwardAlternateFootsteps2;
            init => this._WalkForwardAlternateFootsteps2 = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IFootstepGetter>> IFootstepSetGetter.WalkForwardAlternateFootsteps2 => _WalkForwardAlternateFootsteps2;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FootstepSetMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.WalkForwardFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.RunForwardFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.WalkForwardAlternateFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.RunForwardAlternateFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.WalkForwardAlternateFootsteps2 = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem WalkForwardFootsteps,
                TItem RunForwardFootsteps,
                TItem WalkForwardAlternateFootsteps,
                TItem RunForwardAlternateFootsteps,
                TItem WalkForwardAlternateFootsteps2)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.WalkForwardFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(WalkForwardFootsteps, Enumerable.Empty<(int Index, TItem Value)>());
                this.RunForwardFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RunForwardFootsteps, Enumerable.Empty<(int Index, TItem Value)>());
                this.WalkForwardAlternateFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(WalkForwardAlternateFootsteps, Enumerable.Empty<(int Index, TItem Value)>());
                this.RunForwardAlternateFootsteps = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(RunForwardAlternateFootsteps, Enumerable.Empty<(int Index, TItem Value)>());
                this.WalkForwardAlternateFootsteps2 = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(WalkForwardAlternateFootsteps2, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? WalkForwardFootsteps;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RunForwardFootsteps;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? WalkForwardAlternateFootsteps;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? RunForwardAlternateFootsteps;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? WalkForwardAlternateFootsteps2;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.WalkForwardFootsteps, rhs.WalkForwardFootsteps)) return false;
                if (!object.Equals(this.RunForwardFootsteps, rhs.RunForwardFootsteps)) return false;
                if (!object.Equals(this.WalkForwardAlternateFootsteps, rhs.WalkForwardAlternateFootsteps)) return false;
                if (!object.Equals(this.RunForwardAlternateFootsteps, rhs.RunForwardAlternateFootsteps)) return false;
                if (!object.Equals(this.WalkForwardAlternateFootsteps2, rhs.WalkForwardAlternateFootsteps2)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.WalkForwardFootsteps);
                hash.Add(this.RunForwardFootsteps);
                hash.Add(this.WalkForwardAlternateFootsteps);
                hash.Add(this.RunForwardAlternateFootsteps);
                hash.Add(this.WalkForwardAlternateFootsteps2);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (this.WalkForwardFootsteps != null)
                {
                    if (!eval(this.WalkForwardFootsteps.Overall)) return false;
                    if (this.WalkForwardFootsteps.Specific != null)
                    {
                        foreach (var item in this.WalkForwardFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.RunForwardFootsteps != null)
                {
                    if (!eval(this.RunForwardFootsteps.Overall)) return false;
                    if (this.RunForwardFootsteps.Specific != null)
                    {
                        foreach (var item in this.RunForwardFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.WalkForwardAlternateFootsteps != null)
                {
                    if (!eval(this.WalkForwardAlternateFootsteps.Overall)) return false;
                    if (this.WalkForwardAlternateFootsteps.Specific != null)
                    {
                        foreach (var item in this.WalkForwardAlternateFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.RunForwardAlternateFootsteps != null)
                {
                    if (!eval(this.RunForwardAlternateFootsteps.Overall)) return false;
                    if (this.RunForwardAlternateFootsteps.Specific != null)
                    {
                        foreach (var item in this.RunForwardAlternateFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.WalkForwardAlternateFootsteps2 != null)
                {
                    if (!eval(this.WalkForwardAlternateFootsteps2.Overall)) return false;
                    if (this.WalkForwardAlternateFootsteps2.Specific != null)
                    {
                        foreach (var item in this.WalkForwardAlternateFootsteps2.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (this.WalkForwardFootsteps != null)
                {
                    if (eval(this.WalkForwardFootsteps.Overall)) return true;
                    if (this.WalkForwardFootsteps.Specific != null)
                    {
                        foreach (var item in this.WalkForwardFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.RunForwardFootsteps != null)
                {
                    if (eval(this.RunForwardFootsteps.Overall)) return true;
                    if (this.RunForwardFootsteps.Specific != null)
                    {
                        foreach (var item in this.RunForwardFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.WalkForwardAlternateFootsteps != null)
                {
                    if (eval(this.WalkForwardAlternateFootsteps.Overall)) return true;
                    if (this.WalkForwardAlternateFootsteps.Specific != null)
                    {
                        foreach (var item in this.WalkForwardAlternateFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.RunForwardAlternateFootsteps != null)
                {
                    if (eval(this.RunForwardAlternateFootsteps.Overall)) return true;
                    if (this.RunForwardAlternateFootsteps.Specific != null)
                    {
                        foreach (var item in this.RunForwardAlternateFootsteps.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.WalkForwardAlternateFootsteps2 != null)
                {
                    if (eval(this.WalkForwardAlternateFootsteps2.Overall)) return true;
                    if (this.WalkForwardAlternateFootsteps2.Specific != null)
                    {
                        foreach (var item in this.WalkForwardAlternateFootsteps2.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new FootstepSet.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                if (WalkForwardFootsteps != null)
                {
                    obj.WalkForwardFootsteps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.WalkForwardFootsteps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (WalkForwardFootsteps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.WalkForwardFootsteps.Specific = l;
                        foreach (var item in WalkForwardFootsteps.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (RunForwardFootsteps != null)
                {
                    obj.RunForwardFootsteps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RunForwardFootsteps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RunForwardFootsteps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RunForwardFootsteps.Specific = l;
                        foreach (var item in RunForwardFootsteps.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (WalkForwardAlternateFootsteps != null)
                {
                    obj.WalkForwardAlternateFootsteps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.WalkForwardAlternateFootsteps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (WalkForwardAlternateFootsteps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.WalkForwardAlternateFootsteps.Specific = l;
                        foreach (var item in WalkForwardAlternateFootsteps.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (RunForwardAlternateFootsteps != null)
                {
                    obj.RunForwardAlternateFootsteps = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.RunForwardAlternateFootsteps.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (RunForwardAlternateFootsteps.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.RunForwardAlternateFootsteps.Specific = l;
                        foreach (var item in RunForwardAlternateFootsteps.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (WalkForwardAlternateFootsteps2 != null)
                {
                    obj.WalkForwardAlternateFootsteps2 = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.WalkForwardAlternateFootsteps2.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (WalkForwardAlternateFootsteps2.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.WalkForwardAlternateFootsteps2.Specific = l;
                        foreach (var item in WalkForwardAlternateFootsteps2.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(FootstepSet.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, FootstepSet.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(FootstepSet.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if ((printMask?.WalkForwardFootsteps?.Overall ?? true)
                        && WalkForwardFootsteps is {} WalkForwardFootstepsItem)
                    {
                        sb.AppendLine("WalkForwardFootsteps =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(WalkForwardFootstepsItem.Overall);
                            if (WalkForwardFootstepsItem.Specific != null)
                            {
                                foreach (var subItem in WalkForwardFootstepsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.RunForwardFootsteps?.Overall ?? true)
                        && RunForwardFootsteps is {} RunForwardFootstepsItem)
                    {
                        sb.AppendLine("RunForwardFootsteps =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RunForwardFootstepsItem.Overall);
                            if (RunForwardFootstepsItem.Specific != null)
                            {
                                foreach (var subItem in RunForwardFootstepsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.WalkForwardAlternateFootsteps?.Overall ?? true)
                        && WalkForwardAlternateFootsteps is {} WalkForwardAlternateFootstepsItem)
                    {
                        sb.AppendLine("WalkForwardAlternateFootsteps =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(WalkForwardAlternateFootstepsItem.Overall);
                            if (WalkForwardAlternateFootstepsItem.Specific != null)
                            {
                                foreach (var subItem in WalkForwardAlternateFootstepsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.RunForwardAlternateFootsteps?.Overall ?? true)
                        && RunForwardAlternateFootsteps is {} RunForwardAlternateFootstepsItem)
                    {
                        sb.AppendLine("RunForwardAlternateFootsteps =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(RunForwardAlternateFootstepsItem.Overall);
                            if (RunForwardAlternateFootstepsItem.Specific != null)
                            {
                                foreach (var subItem in RunForwardAlternateFootstepsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.WalkForwardAlternateFootsteps2?.Overall ?? true)
                        && WalkForwardAlternateFootsteps2 is {} WalkForwardAlternateFootsteps2Item)
                    {
                        sb.AppendLine("WalkForwardAlternateFootsteps2 =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(WalkForwardAlternateFootsteps2Item.Overall);
                            if (WalkForwardAlternateFootsteps2Item.Specific != null)
                            {
                                foreach (var subItem in WalkForwardAlternateFootsteps2Item.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? WalkForwardFootsteps;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RunForwardFootsteps;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? WalkForwardAlternateFootsteps;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? RunForwardAlternateFootsteps;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? WalkForwardAlternateFootsteps2;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                FootstepSet_FieldIndex enu = (FootstepSet_FieldIndex)index;
                switch (enu)
                {
                    case FootstepSet_FieldIndex.WalkForwardFootsteps:
                        return WalkForwardFootsteps;
                    case FootstepSet_FieldIndex.RunForwardFootsteps:
                        return RunForwardFootsteps;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps:
                        return WalkForwardAlternateFootsteps;
                    case FootstepSet_FieldIndex.RunForwardAlternateFootsteps:
                        return RunForwardAlternateFootsteps;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2:
                        return WalkForwardAlternateFootsteps2;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                FootstepSet_FieldIndex enu = (FootstepSet_FieldIndex)index;
                switch (enu)
                {
                    case FootstepSet_FieldIndex.WalkForwardFootsteps:
                        this.WalkForwardFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case FootstepSet_FieldIndex.RunForwardFootsteps:
                        this.RunForwardFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps:
                        this.WalkForwardAlternateFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case FootstepSet_FieldIndex.RunForwardAlternateFootsteps:
                        this.RunForwardAlternateFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2:
                        this.WalkForwardAlternateFootsteps2 = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                FootstepSet_FieldIndex enu = (FootstepSet_FieldIndex)index;
                switch (enu)
                {
                    case FootstepSet_FieldIndex.WalkForwardFootsteps:
                        this.WalkForwardFootsteps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case FootstepSet_FieldIndex.RunForwardFootsteps:
                        this.RunForwardFootsteps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps:
                        this.WalkForwardAlternateFootsteps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case FootstepSet_FieldIndex.RunForwardAlternateFootsteps:
                        this.RunForwardAlternateFootsteps = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2:
                        this.WalkForwardAlternateFootsteps2 = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (WalkForwardFootsteps != null) return true;
                if (RunForwardFootsteps != null) return true;
                if (WalkForwardAlternateFootsteps != null) return true;
                if (RunForwardAlternateFootsteps != null) return true;
                if (WalkForwardAlternateFootsteps2 != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                if (WalkForwardFootsteps is {} WalkForwardFootstepsItem)
                {
                    sb.AppendLine("WalkForwardFootsteps =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(WalkForwardFootstepsItem.Overall);
                        if (WalkForwardFootstepsItem.Specific != null)
                        {
                            foreach (var subItem in WalkForwardFootstepsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (RunForwardFootsteps is {} RunForwardFootstepsItem)
                {
                    sb.AppendLine("RunForwardFootsteps =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RunForwardFootstepsItem.Overall);
                        if (RunForwardFootstepsItem.Specific != null)
                        {
                            foreach (var subItem in RunForwardFootstepsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (WalkForwardAlternateFootsteps is {} WalkForwardAlternateFootstepsItem)
                {
                    sb.AppendLine("WalkForwardAlternateFootsteps =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(WalkForwardAlternateFootstepsItem.Overall);
                        if (WalkForwardAlternateFootstepsItem.Specific != null)
                        {
                            foreach (var subItem in WalkForwardAlternateFootstepsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (RunForwardAlternateFootsteps is {} RunForwardAlternateFootstepsItem)
                {
                    sb.AppendLine("RunForwardAlternateFootsteps =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(RunForwardAlternateFootstepsItem.Overall);
                        if (RunForwardAlternateFootstepsItem.Specific != null)
                        {
                            foreach (var subItem in RunForwardAlternateFootstepsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (WalkForwardAlternateFootsteps2 is {} WalkForwardAlternateFootsteps2Item)
                {
                    sb.AppendLine("WalkForwardAlternateFootsteps2 =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(WalkForwardAlternateFootsteps2Item.Overall);
                        if (WalkForwardAlternateFootsteps2Item.Specific != null)
                        {
                            foreach (var subItem in WalkForwardAlternateFootsteps2Item.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.WalkForwardFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.WalkForwardFootsteps?.Overall, rhs.WalkForwardFootsteps?.Overall), Noggog.ExceptionExt.Combine(this.WalkForwardFootsteps?.Specific, rhs.WalkForwardFootsteps?.Specific));
                ret.RunForwardFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RunForwardFootsteps?.Overall, rhs.RunForwardFootsteps?.Overall), Noggog.ExceptionExt.Combine(this.RunForwardFootsteps?.Specific, rhs.RunForwardFootsteps?.Specific));
                ret.WalkForwardAlternateFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.WalkForwardAlternateFootsteps?.Overall, rhs.WalkForwardAlternateFootsteps?.Overall), Noggog.ExceptionExt.Combine(this.WalkForwardAlternateFootsteps?.Specific, rhs.WalkForwardAlternateFootsteps?.Specific));
                ret.RunForwardAlternateFootsteps = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.RunForwardAlternateFootsteps?.Overall, rhs.RunForwardAlternateFootsteps?.Overall), Noggog.ExceptionExt.Combine(this.RunForwardAlternateFootsteps?.Specific, rhs.RunForwardAlternateFootsteps?.Specific));
                ret.WalkForwardAlternateFootsteps2 = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.WalkForwardAlternateFootsteps2?.Overall, rhs.WalkForwardAlternateFootsteps2?.Overall), Noggog.ExceptionExt.Combine(this.WalkForwardAlternateFootsteps2?.Specific, rhs.WalkForwardAlternateFootsteps2?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool WalkForwardFootsteps;
            public bool RunForwardFootsteps;
            public bool WalkForwardAlternateFootsteps;
            public bool RunForwardAlternateFootsteps;
            public bool WalkForwardAlternateFootsteps2;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.WalkForwardFootsteps = defaultOn;
                this.RunForwardFootsteps = defaultOn;
                this.WalkForwardAlternateFootsteps = defaultOn;
                this.RunForwardAlternateFootsteps = defaultOn;
                this.WalkForwardAlternateFootsteps2 = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((WalkForwardFootsteps, null));
                ret.Add((RunForwardFootsteps, null));
                ret.Add((WalkForwardAlternateFootsteps, null));
                ret.Add((RunForwardAlternateFootsteps, null));
                ret.Add((WalkForwardAlternateFootsteps2, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = FootstepSet_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FootstepSetCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => FootstepSetSetterCommon.Instance.RemapLinks(this, mapping);
        public FootstepSet(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private FootstepSet(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal FootstepSet(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public FootstepSet(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public FootstepSet(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<FootstepSet>.ToString(this);
        }

        protected override Type LinkType => typeof(IFootstepSet);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFootstepSetGetter rhs) return false;
            return ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFootstepSetGetter? obj)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FootstepSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FootstepSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static FootstepSet CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new FootstepSet();
            ((FootstepSetSetterCommon)((IFootstepSetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out FootstepSet item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((FootstepSetSetterCommon)((IFootstepSetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new FootstepSet GetNew()
        {
            return new FootstepSet();
        }

    }
    #endregion

    #region Interface
    public partial interface IFootstepSet :
        IFootstepSetGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IFootstepSetInternal>,
        ISkyrimMajorRecordInternal
    {
        new ExtendedList<IFormLinkGetter<IFootstepGetter>> WalkForwardFootsteps { get; }
        new ExtendedList<IFormLinkGetter<IFootstepGetter>> RunForwardFootsteps { get; }
        new ExtendedList<IFormLinkGetter<IFootstepGetter>> WalkForwardAlternateFootsteps { get; }
        new ExtendedList<IFormLinkGetter<IFootstepGetter>> RunForwardAlternateFootsteps { get; }
        new ExtendedList<IFormLinkGetter<IFootstepGetter>> WalkForwardAlternateFootsteps2 { get; }
    }

    public partial interface IFootstepSetInternal :
        ISkyrimMajorRecordInternal,
        IFootstepSet,
        IFootstepSetGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.FSTS)]
    public partial interface IFootstepSetGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IFootstepSetGetter>,
        IMapsToGetter<IFootstepSetGetter>
    {
        static new ILoquiRegistration StaticRegistration => FootstepSet_Registration.Instance;
        IReadOnlyList<IFormLinkGetter<IFootstepGetter>> WalkForwardFootsteps { get; }
        IReadOnlyList<IFormLinkGetter<IFootstepGetter>> RunForwardFootsteps { get; }
        IReadOnlyList<IFormLinkGetter<IFootstepGetter>> WalkForwardAlternateFootsteps { get; }
        IReadOnlyList<IFormLinkGetter<IFootstepGetter>> RunForwardAlternateFootsteps { get; }
        IReadOnlyList<IFormLinkGetter<IFootstepGetter>> WalkForwardAlternateFootsteps2 { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class FootstepSetMixIn
    {
        public static void Clear(this IFootstepSetInternal item)
        {
            ((FootstepSetSetterCommon)((IFootstepSetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static FootstepSet.Mask<bool> GetEqualsMask(
            this IFootstepSetGetter item,
            IFootstepSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IFootstepSetGetter item,
            string? name = null,
            FootstepSet.Mask<bool>? printMask = null)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IFootstepSetGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FootstepSet.Mask<bool>? printMask = null)
        {
            ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IFootstepSetGetter item,
            IFootstepSetGetter rhs,
            FootstepSet.TranslationMask? equalsMask = null)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IFootstepSetInternal lhs,
            IFootstepSetGetter rhs,
            out FootstepSet.ErrorMask errorMask,
            FootstepSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = FootstepSet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IFootstepSetInternal lhs,
            IFootstepSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static FootstepSet DeepCopy(
            this IFootstepSetGetter item,
            FootstepSet.TranslationMask? copyMask = null)
        {
            return ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static FootstepSet DeepCopy(
            this IFootstepSetGetter item,
            out FootstepSet.ErrorMask errorMask,
            FootstepSet.TranslationMask? copyMask = null)
        {
            return ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static FootstepSet DeepCopy(
            this IFootstepSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static FootstepSet Duplicate(
            this IFootstepSetGetter item,
            FormKey formKey,
            FootstepSet.TranslationMask? copyMask = null)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static FootstepSet Duplicate(
            this IFootstepSetGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IFootstepSetInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((FootstepSetSetterCommon)((IFootstepSetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum FootstepSet_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        WalkForwardFootsteps = 7,
        RunForwardFootsteps = 8,
        WalkForwardAlternateFootsteps = 9,
        RunForwardAlternateFootsteps = 10,
        WalkForwardAlternateFootsteps2 = 11,
    }
    #endregion

    #region Registration
    internal partial class FootstepSet_Registration : ILoquiRegistration
    {
        public static readonly FootstepSet_Registration Instance = new FootstepSet_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(FootstepSet.Mask<>);

        public static readonly Type ErrorMaskType = typeof(FootstepSet.ErrorMask);

        public static readonly Type ClassType = typeof(FootstepSet);

        public static readonly Type GetterType = typeof(IFootstepSetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IFootstepSet);

        public static readonly Type? InternalSetterType = typeof(IFootstepSetInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.FootstepSet";

        public const string Name = "FootstepSet";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.FSTS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.FSTS);
            var all = RecordCollection.Factory(
                RecordTypes.FSTS,
                RecordTypes.XCNT);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(FootstepSetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class FootstepSetSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly FootstepSetSetterCommon Instance = new FootstepSetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IFootstepSetInternal item)
        {
            ClearPartial();
            item.WalkForwardFootsteps.Clear();
            item.RunForwardFootsteps.Clear();
            item.WalkForwardAlternateFootsteps.Clear();
            item.RunForwardAlternateFootsteps.Clear();
            item.WalkForwardAlternateFootsteps2.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IFootstepSetInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IFootstepSetInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IFootstepSet obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.WalkForwardFootsteps.RemapLinks(mapping);
            obj.RunForwardFootsteps.RemapLinks(mapping);
            obj.WalkForwardAlternateFootsteps.RemapLinks(mapping);
            obj.RunForwardAlternateFootsteps.RemapLinks(mapping);
            obj.WalkForwardAlternateFootsteps2.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IFootstepSetInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IFootstepSetInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: FootstepSetBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: FootstepSetBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (FootstepSet)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (FootstepSet)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class FootstepSetCommon : SkyrimMajorRecordCommon
    {
        public new static readonly FootstepSetCommon Instance = new FootstepSetCommon();

        public FootstepSet.Mask<bool> GetEqualsMask(
            IFootstepSetGetter item,
            IFootstepSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new FootstepSet.Mask<bool>(false);
            ((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IFootstepSetGetter item,
            IFootstepSetGetter rhs,
            FootstepSet.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.WalkForwardFootsteps = item.WalkForwardFootsteps.CollectionEqualsHelper(
                rhs.WalkForwardFootsteps,
                (l, r) => object.Equals(l, r),
                include);
            ret.RunForwardFootsteps = item.RunForwardFootsteps.CollectionEqualsHelper(
                rhs.RunForwardFootsteps,
                (l, r) => object.Equals(l, r),
                include);
            ret.WalkForwardAlternateFootsteps = item.WalkForwardAlternateFootsteps.CollectionEqualsHelper(
                rhs.WalkForwardAlternateFootsteps,
                (l, r) => object.Equals(l, r),
                include);
            ret.RunForwardAlternateFootsteps = item.RunForwardAlternateFootsteps.CollectionEqualsHelper(
                rhs.RunForwardAlternateFootsteps,
                (l, r) => object.Equals(l, r),
                include);
            ret.WalkForwardAlternateFootsteps2 = item.WalkForwardAlternateFootsteps2.CollectionEqualsHelper(
                rhs.WalkForwardAlternateFootsteps2,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IFootstepSetGetter item,
            string? name = null,
            FootstepSet.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IFootstepSetGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            FootstepSet.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"FootstepSet =>");
            }
            else
            {
                sb.AppendLine($"{name} (FootstepSet) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IFootstepSetGetter item,
            StructuredStringBuilder sb,
            FootstepSet.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.WalkForwardFootsteps?.Overall ?? true)
            {
                sb.AppendLine("WalkForwardFootsteps =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.WalkForwardFootsteps)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.RunForwardFootsteps?.Overall ?? true)
            {
                sb.AppendLine("RunForwardFootsteps =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.RunForwardFootsteps)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.WalkForwardAlternateFootsteps?.Overall ?? true)
            {
                sb.AppendLine("WalkForwardAlternateFootsteps =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.WalkForwardAlternateFootsteps)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.RunForwardAlternateFootsteps?.Overall ?? true)
            {
                sb.AppendLine("RunForwardAlternateFootsteps =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.RunForwardAlternateFootsteps)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.WalkForwardAlternateFootsteps2?.Overall ?? true)
            {
                sb.AppendLine("WalkForwardAlternateFootsteps2 =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.WalkForwardAlternateFootsteps2)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
        }
        
        public static FootstepSet_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (FootstepSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (FootstepSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (FootstepSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (FootstepSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (FootstepSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (FootstepSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (FootstepSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new FootstepSet_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (FootstepSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (FootstepSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (FootstepSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (FootstepSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IFootstepSetGetter? lhs,
            IFootstepSetGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.WalkForwardFootsteps) ?? true))
            {
                if (!lhs.WalkForwardFootsteps.SequenceEqualNullable(rhs.WalkForwardFootsteps)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.RunForwardFootsteps) ?? true))
            {
                if (!lhs.RunForwardFootsteps.SequenceEqualNullable(rhs.RunForwardFootsteps)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.WalkForwardAlternateFootsteps) ?? true))
            {
                if (!lhs.WalkForwardAlternateFootsteps.SequenceEqualNullable(rhs.WalkForwardAlternateFootsteps)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.RunForwardAlternateFootsteps) ?? true))
            {
                if (!lhs.RunForwardAlternateFootsteps.SequenceEqualNullable(rhs.RunForwardAlternateFootsteps)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2) ?? true))
            {
                if (!lhs.WalkForwardAlternateFootsteps2.SequenceEqualNullable(rhs.WalkForwardAlternateFootsteps2)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFootstepSetGetter?)lhs,
                rhs: rhs as IFootstepSetGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IFootstepSetGetter?)lhs,
                rhs: rhs as IFootstepSetGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IFootstepSetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.WalkForwardFootsteps);
            hash.Add(item.RunForwardFootsteps);
            hash.Add(item.WalkForwardAlternateFootsteps);
            hash.Add(item.RunForwardAlternateFootsteps);
            hash.Add(item.WalkForwardAlternateFootsteps2);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IFootstepSetGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IFootstepSetGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return FootstepSet.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IFootstepSetGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.WalkForwardFootsteps)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.RunForwardFootsteps)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.WalkForwardAlternateFootsteps)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.RunForwardAlternateFootsteps)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.WalkForwardAlternateFootsteps2)
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public FootstepSet Duplicate(
            IFootstepSetGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new FootstepSet(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFootstepSetGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IFootstepSetGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class FootstepSetSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly FootstepSetSetterTranslationCommon Instance = new FootstepSetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IFootstepSetInternal item,
            IFootstepSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IFootstepSet item,
            IFootstepSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.WalkForwardFootsteps) ?? true))
            {
                errorMask?.PushIndex((int)FootstepSet_FieldIndex.WalkForwardFootsteps);
                try
                {
                    item.WalkForwardFootsteps.SetTo(
                        rhs.WalkForwardFootsteps
                            .Select(b => (IFormLinkGetter<IFootstepGetter>)new FormLink<IFootstepGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.RunForwardFootsteps) ?? true))
            {
                errorMask?.PushIndex((int)FootstepSet_FieldIndex.RunForwardFootsteps);
                try
                {
                    item.RunForwardFootsteps.SetTo(
                        rhs.RunForwardFootsteps
                            .Select(b => (IFormLinkGetter<IFootstepGetter>)new FormLink<IFootstepGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.WalkForwardAlternateFootsteps) ?? true))
            {
                errorMask?.PushIndex((int)FootstepSet_FieldIndex.WalkForwardAlternateFootsteps);
                try
                {
                    item.WalkForwardAlternateFootsteps.SetTo(
                        rhs.WalkForwardAlternateFootsteps
                            .Select(b => (IFormLinkGetter<IFootstepGetter>)new FormLink<IFootstepGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.RunForwardAlternateFootsteps) ?? true))
            {
                errorMask?.PushIndex((int)FootstepSet_FieldIndex.RunForwardAlternateFootsteps);
                try
                {
                    item.RunForwardAlternateFootsteps.SetTo(
                        rhs.RunForwardAlternateFootsteps
                            .Select(b => (IFormLinkGetter<IFootstepGetter>)new FormLink<IFootstepGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2) ?? true))
            {
                errorMask?.PushIndex((int)FootstepSet_FieldIndex.WalkForwardAlternateFootsteps2);
                try
                {
                    item.WalkForwardAlternateFootsteps2.SetTo(
                        rhs.WalkForwardAlternateFootsteps2
                            .Select(b => (IFormLinkGetter<IFootstepGetter>)new FormLink<IFootstepGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IFootstepSet item,
            IFootstepSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFootstepSetInternal)item,
                rhs: (IFootstepSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFootstepSet)item,
                rhs: (IFootstepSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFootstepSetInternal)item,
                rhs: (IFootstepSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IFootstepSet)item,
                rhs: (IFootstepSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public FootstepSet DeepCopy(
            IFootstepSetGetter item,
            FootstepSet.TranslationMask? copyMask = null)
        {
            FootstepSet ret = (FootstepSet)((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).GetNew();
            ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public FootstepSet DeepCopy(
            IFootstepSetGetter item,
            out FootstepSet.ErrorMask errorMask,
            FootstepSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            FootstepSet ret = (FootstepSet)((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).GetNew();
            ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = FootstepSet.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public FootstepSet DeepCopy(
            IFootstepSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            FootstepSet ret = (FootstepSet)((FootstepSetCommon)((IFootstepSetGetter)item).CommonInstance()!).GetNew();
            ((FootstepSetSetterTranslationCommon)((IFootstepSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class FootstepSet
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FootstepSet_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FootstepSet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FootstepSetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return FootstepSetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FootstepSetSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class FootstepSetBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly FootstepSetBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IFootstepSetGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IFootstepSetGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            FootstepSetBinaryWriteTranslation.WriteBinaryCount(
                writer: writer,
                item: item);
        }

        public static partial void WriteBinaryCountCustom(
            MutagenWriter writer,
            IFootstepSetGetter item);

        public static void WriteBinaryCount(
            MutagenWriter writer,
            IFootstepSetGetter item)
        {
            WriteBinaryCountCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IFootstepSetGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.FSTS,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IFootstepSetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFootstepSetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IFootstepSetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class FootstepSetBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly FootstepSetBinaryCreateTranslation Instance = new FootstepSetBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.FSTS;
        public static void FillBinaryStructs(
            IFootstepSetInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IFootstepSetInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.XCNT:
                {
                    return FootstepSetBinaryCreateTranslation.FillBinaryCountCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial ParseResult FillBinaryCountCustom(
            MutagenFrame frame,
            IFootstepSetInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class FootstepSetBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class FootstepSetBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IFootstepSetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => FootstepSet_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => FootstepSet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => FootstepSetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => FootstepSetSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => FootstepSetCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => FootstepSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((FootstepSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IFootstepSet);


        #region Count
        public partial ParseResult CountCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected FootstepSetBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IFootstepSetGetter FootstepSetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new FootstepSetBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IFootstepSetGetter FootstepSetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return FootstepSetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.XCNT:
                {
                    return CountCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            FootstepSetMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<FootstepSet>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IFootstepSetGetter rhs) return false;
            return ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IFootstepSetGetter? obj)
        {
            return ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((FootstepSetCommon)((IFootstepSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

