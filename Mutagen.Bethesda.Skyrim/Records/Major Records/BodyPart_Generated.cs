/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class BodyPart :
        IBodyPart,
        IEquatable<IBodyPartGetter>,
        ILoquiObjectSetter<BodyPart>
    {
        #region Ctor
        public BodyPart()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Name
        /// <summary>
        /// Aspects: INamedRequired, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString Name { get; set; } = string.Empty;
        ITranslatedStringGetter IBodyPartGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region PoseMatching
        public String? PoseMatching { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IBodyPartGetter.PoseMatching => this.PoseMatching;
        #endregion
        #region PartNode
        public String PartNode { get; set; } = string.Empty;
        #endregion
        #region VatsTarget
        public String VatsTarget { get; set; } = string.Empty;
        #endregion
        #region IkStartNode
        public String IkStartNode { get; set; } = string.Empty;
        #endregion
        #region DamageMult
        public Single DamageMult { get; set; } = default(Single);
        #endregion
        #region Flags
        public BodyPart.Flag Flags { get; set; } = default(BodyPart.Flag);
        #endregion
        #region Type
        public BodyPart.PartType Type { get; set; } = default(BodyPart.PartType);
        #endregion
        #region HealthPercent
        public Byte HealthPercent { get; set; } = default(Byte);
        #endregion
        #region ActorValue
        public ActorValue ActorValue { get; set; } = default(ActorValue);
        #endregion
        #region ToHitChance
        public Byte ToHitChance { get; set; } = default(Byte);
        #endregion
        #region ExplodableExplosionChance
        public Byte ExplodableExplosionChance { get; set; } = default(Byte);
        #endregion
        #region ExplodableDebrisCount
        public UInt16 ExplodableDebrisCount { get; set; } = default(UInt16);
        #endregion
        #region ExplodableDebris
        private readonly IFormLink<IDebrisGetter> _ExplodableDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> ExplodableDebris
        {
            get => _ExplodableDebris;
            set => _ExplodableDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IBodyPartGetter.ExplodableDebris => this.ExplodableDebris;
        #endregion
        #region ExplodableExplosion
        private readonly IFormLink<IExplosionGetter> _ExplodableExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> ExplodableExplosion
        {
            get => _ExplodableExplosion;
            set => _ExplodableExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IBodyPartGetter.ExplodableExplosion => this.ExplodableExplosion;
        #endregion
        #region TrackingMaxAngle
        public Single TrackingMaxAngle { get; set; } = default(Single);
        #endregion
        #region ExplodableDebrisScale
        public Single ExplodableDebrisScale { get; set; } = default(Single);
        #endregion
        #region SeverableDebrisCount
        public Int32 SeverableDebrisCount { get; set; } = default(Int32);
        #endregion
        #region SeverableDebris
        private readonly IFormLink<IDebrisGetter> _SeverableDebris = new FormLink<IDebrisGetter>();
        public IFormLink<IDebrisGetter> SeverableDebris
        {
            get => _SeverableDebris;
            set => _SeverableDebris.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IDebrisGetter> IBodyPartGetter.SeverableDebris => this.SeverableDebris;
        #endregion
        #region SeverableExplosion
        private readonly IFormLink<IExplosionGetter> _SeverableExplosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> SeverableExplosion
        {
            get => _SeverableExplosion;
            set => _SeverableExplosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IBodyPartGetter.SeverableExplosion => this.SeverableExplosion;
        #endregion
        #region SeverableDebrisScale
        public Single SeverableDebrisScale { get; set; } = default(Single);
        #endregion
        #region GorePositioning
        public P3Float GorePositioning { get; set; } = default(P3Float);
        #endregion
        #region GoreRotation
        public P3Float GoreRotation { get; set; } = default(P3Float);
        #endregion
        #region SeverableImpactData
        private readonly IFormLink<IImpactDataSetGetter> _SeverableImpactData = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> SeverableImpactData
        {
            get => _SeverableImpactData;
            set => _SeverableImpactData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IBodyPartGetter.SeverableImpactData => this.SeverableImpactData;
        #endregion
        #region ExplodableImpactData
        private readonly IFormLink<IImpactDataSetGetter> _ExplodableImpactData = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> ExplodableImpactData
        {
            get => _ExplodableImpactData;
            set => _ExplodableImpactData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IBodyPartGetter.ExplodableImpactData => this.ExplodableImpactData;
        #endregion
        #region SeverableDecalCount
        public Byte SeverableDecalCount { get; set; } = default(Byte);
        #endregion
        #region ExplodableDecalCount
        public Byte ExplodableDecalCount { get; set; } = default(Byte);
        #endregion
        #region Unknown
        public UInt16 Unknown { get; set; } = default(UInt16);
        #endregion
        #region LimbReplacementScale
        public Single LimbReplacementScale { get; set; } = default(Single);
        #endregion
        #region LimbReplacementModel
        public String LimbReplacementModel { get; set; } = string.Empty;
        #endregion
        #region GoreTargetBone
        public String GoreTargetBone { get; set; } = string.Empty;
        #endregion
        #region TextureFilesHashes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _TextureFilesHashes;
        public MemorySlice<Byte>? TextureFilesHashes
        {
            get => this._TextureFilesHashes;
            set => this._TextureFilesHashes = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IBodyPartGetter.TextureFilesHashes => this.TextureFilesHashes;
        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BodyPartMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBodyPartGetter rhs) return false;
            return ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBodyPartGetter? obj)
        {
            return ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Name = initialValue;
                this.PoseMatching = initialValue;
                this.PartNode = initialValue;
                this.VatsTarget = initialValue;
                this.IkStartNode = initialValue;
                this.DamageMult = initialValue;
                this.Flags = initialValue;
                this.Type = initialValue;
                this.HealthPercent = initialValue;
                this.ActorValue = initialValue;
                this.ToHitChance = initialValue;
                this.ExplodableExplosionChance = initialValue;
                this.ExplodableDebrisCount = initialValue;
                this.ExplodableDebris = initialValue;
                this.ExplodableExplosion = initialValue;
                this.TrackingMaxAngle = initialValue;
                this.ExplodableDebrisScale = initialValue;
                this.SeverableDebrisCount = initialValue;
                this.SeverableDebris = initialValue;
                this.SeverableExplosion = initialValue;
                this.SeverableDebrisScale = initialValue;
                this.GorePositioning = initialValue;
                this.GoreRotation = initialValue;
                this.SeverableImpactData = initialValue;
                this.ExplodableImpactData = initialValue;
                this.SeverableDecalCount = initialValue;
                this.ExplodableDecalCount = initialValue;
                this.Unknown = initialValue;
                this.LimbReplacementScale = initialValue;
                this.LimbReplacementModel = initialValue;
                this.GoreTargetBone = initialValue;
                this.TextureFilesHashes = initialValue;
            }

            public Mask(
                TItem Name,
                TItem PoseMatching,
                TItem PartNode,
                TItem VatsTarget,
                TItem IkStartNode,
                TItem DamageMult,
                TItem Flags,
                TItem Type,
                TItem HealthPercent,
                TItem ActorValue,
                TItem ToHitChance,
                TItem ExplodableExplosionChance,
                TItem ExplodableDebrisCount,
                TItem ExplodableDebris,
                TItem ExplodableExplosion,
                TItem TrackingMaxAngle,
                TItem ExplodableDebrisScale,
                TItem SeverableDebrisCount,
                TItem SeverableDebris,
                TItem SeverableExplosion,
                TItem SeverableDebrisScale,
                TItem GorePositioning,
                TItem GoreRotation,
                TItem SeverableImpactData,
                TItem ExplodableImpactData,
                TItem SeverableDecalCount,
                TItem ExplodableDecalCount,
                TItem Unknown,
                TItem LimbReplacementScale,
                TItem LimbReplacementModel,
                TItem GoreTargetBone,
                TItem TextureFilesHashes)
            {
                this.Name = Name;
                this.PoseMatching = PoseMatching;
                this.PartNode = PartNode;
                this.VatsTarget = VatsTarget;
                this.IkStartNode = IkStartNode;
                this.DamageMult = DamageMult;
                this.Flags = Flags;
                this.Type = Type;
                this.HealthPercent = HealthPercent;
                this.ActorValue = ActorValue;
                this.ToHitChance = ToHitChance;
                this.ExplodableExplosionChance = ExplodableExplosionChance;
                this.ExplodableDebrisCount = ExplodableDebrisCount;
                this.ExplodableDebris = ExplodableDebris;
                this.ExplodableExplosion = ExplodableExplosion;
                this.TrackingMaxAngle = TrackingMaxAngle;
                this.ExplodableDebrisScale = ExplodableDebrisScale;
                this.SeverableDebrisCount = SeverableDebrisCount;
                this.SeverableDebris = SeverableDebris;
                this.SeverableExplosion = SeverableExplosion;
                this.SeverableDebrisScale = SeverableDebrisScale;
                this.GorePositioning = GorePositioning;
                this.GoreRotation = GoreRotation;
                this.SeverableImpactData = SeverableImpactData;
                this.ExplodableImpactData = ExplodableImpactData;
                this.SeverableDecalCount = SeverableDecalCount;
                this.ExplodableDecalCount = ExplodableDecalCount;
                this.Unknown = Unknown;
                this.LimbReplacementScale = LimbReplacementScale;
                this.LimbReplacementModel = LimbReplacementModel;
                this.GoreTargetBone = GoreTargetBone;
                this.TextureFilesHashes = TextureFilesHashes;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Name;
            public TItem PoseMatching;
            public TItem PartNode;
            public TItem VatsTarget;
            public TItem IkStartNode;
            public TItem DamageMult;
            public TItem Flags;
            public TItem Type;
            public TItem HealthPercent;
            public TItem ActorValue;
            public TItem ToHitChance;
            public TItem ExplodableExplosionChance;
            public TItem ExplodableDebrisCount;
            public TItem ExplodableDebris;
            public TItem ExplodableExplosion;
            public TItem TrackingMaxAngle;
            public TItem ExplodableDebrisScale;
            public TItem SeverableDebrisCount;
            public TItem SeverableDebris;
            public TItem SeverableExplosion;
            public TItem SeverableDebrisScale;
            public TItem GorePositioning;
            public TItem GoreRotation;
            public TItem SeverableImpactData;
            public TItem ExplodableImpactData;
            public TItem SeverableDecalCount;
            public TItem ExplodableDecalCount;
            public TItem Unknown;
            public TItem LimbReplacementScale;
            public TItem LimbReplacementModel;
            public TItem GoreTargetBone;
            public TItem TextureFilesHashes;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.PoseMatching, rhs.PoseMatching)) return false;
                if (!object.Equals(this.PartNode, rhs.PartNode)) return false;
                if (!object.Equals(this.VatsTarget, rhs.VatsTarget)) return false;
                if (!object.Equals(this.IkStartNode, rhs.IkStartNode)) return false;
                if (!object.Equals(this.DamageMult, rhs.DamageMult)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.HealthPercent, rhs.HealthPercent)) return false;
                if (!object.Equals(this.ActorValue, rhs.ActorValue)) return false;
                if (!object.Equals(this.ToHitChance, rhs.ToHitChance)) return false;
                if (!object.Equals(this.ExplodableExplosionChance, rhs.ExplodableExplosionChance)) return false;
                if (!object.Equals(this.ExplodableDebrisCount, rhs.ExplodableDebrisCount)) return false;
                if (!object.Equals(this.ExplodableDebris, rhs.ExplodableDebris)) return false;
                if (!object.Equals(this.ExplodableExplosion, rhs.ExplodableExplosion)) return false;
                if (!object.Equals(this.TrackingMaxAngle, rhs.TrackingMaxAngle)) return false;
                if (!object.Equals(this.ExplodableDebrisScale, rhs.ExplodableDebrisScale)) return false;
                if (!object.Equals(this.SeverableDebrisCount, rhs.SeverableDebrisCount)) return false;
                if (!object.Equals(this.SeverableDebris, rhs.SeverableDebris)) return false;
                if (!object.Equals(this.SeverableExplosion, rhs.SeverableExplosion)) return false;
                if (!object.Equals(this.SeverableDebrisScale, rhs.SeverableDebrisScale)) return false;
                if (!object.Equals(this.GorePositioning, rhs.GorePositioning)) return false;
                if (!object.Equals(this.GoreRotation, rhs.GoreRotation)) return false;
                if (!object.Equals(this.SeverableImpactData, rhs.SeverableImpactData)) return false;
                if (!object.Equals(this.ExplodableImpactData, rhs.ExplodableImpactData)) return false;
                if (!object.Equals(this.SeverableDecalCount, rhs.SeverableDecalCount)) return false;
                if (!object.Equals(this.ExplodableDecalCount, rhs.ExplodableDecalCount)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.LimbReplacementScale, rhs.LimbReplacementScale)) return false;
                if (!object.Equals(this.LimbReplacementModel, rhs.LimbReplacementModel)) return false;
                if (!object.Equals(this.GoreTargetBone, rhs.GoreTargetBone)) return false;
                if (!object.Equals(this.TextureFilesHashes, rhs.TextureFilesHashes)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Name);
                hash.Add(this.PoseMatching);
                hash.Add(this.PartNode);
                hash.Add(this.VatsTarget);
                hash.Add(this.IkStartNode);
                hash.Add(this.DamageMult);
                hash.Add(this.Flags);
                hash.Add(this.Type);
                hash.Add(this.HealthPercent);
                hash.Add(this.ActorValue);
                hash.Add(this.ToHitChance);
                hash.Add(this.ExplodableExplosionChance);
                hash.Add(this.ExplodableDebrisCount);
                hash.Add(this.ExplodableDebris);
                hash.Add(this.ExplodableExplosion);
                hash.Add(this.TrackingMaxAngle);
                hash.Add(this.ExplodableDebrisScale);
                hash.Add(this.SeverableDebrisCount);
                hash.Add(this.SeverableDebris);
                hash.Add(this.SeverableExplosion);
                hash.Add(this.SeverableDebrisScale);
                hash.Add(this.GorePositioning);
                hash.Add(this.GoreRotation);
                hash.Add(this.SeverableImpactData);
                hash.Add(this.ExplodableImpactData);
                hash.Add(this.SeverableDecalCount);
                hash.Add(this.ExplodableDecalCount);
                hash.Add(this.Unknown);
                hash.Add(this.LimbReplacementScale);
                hash.Add(this.LimbReplacementModel);
                hash.Add(this.GoreTargetBone);
                hash.Add(this.TextureFilesHashes);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Name)) return false;
                if (!eval(this.PoseMatching)) return false;
                if (!eval(this.PartNode)) return false;
                if (!eval(this.VatsTarget)) return false;
                if (!eval(this.IkStartNode)) return false;
                if (!eval(this.DamageMult)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.HealthPercent)) return false;
                if (!eval(this.ActorValue)) return false;
                if (!eval(this.ToHitChance)) return false;
                if (!eval(this.ExplodableExplosionChance)) return false;
                if (!eval(this.ExplodableDebrisCount)) return false;
                if (!eval(this.ExplodableDebris)) return false;
                if (!eval(this.ExplodableExplosion)) return false;
                if (!eval(this.TrackingMaxAngle)) return false;
                if (!eval(this.ExplodableDebrisScale)) return false;
                if (!eval(this.SeverableDebrisCount)) return false;
                if (!eval(this.SeverableDebris)) return false;
                if (!eval(this.SeverableExplosion)) return false;
                if (!eval(this.SeverableDebrisScale)) return false;
                if (!eval(this.GorePositioning)) return false;
                if (!eval(this.GoreRotation)) return false;
                if (!eval(this.SeverableImpactData)) return false;
                if (!eval(this.ExplodableImpactData)) return false;
                if (!eval(this.SeverableDecalCount)) return false;
                if (!eval(this.ExplodableDecalCount)) return false;
                if (!eval(this.Unknown)) return false;
                if (!eval(this.LimbReplacementScale)) return false;
                if (!eval(this.LimbReplacementModel)) return false;
                if (!eval(this.GoreTargetBone)) return false;
                if (!eval(this.TextureFilesHashes)) return false;
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Name)) return true;
                if (eval(this.PoseMatching)) return true;
                if (eval(this.PartNode)) return true;
                if (eval(this.VatsTarget)) return true;
                if (eval(this.IkStartNode)) return true;
                if (eval(this.DamageMult)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.HealthPercent)) return true;
                if (eval(this.ActorValue)) return true;
                if (eval(this.ToHitChance)) return true;
                if (eval(this.ExplodableExplosionChance)) return true;
                if (eval(this.ExplodableDebrisCount)) return true;
                if (eval(this.ExplodableDebris)) return true;
                if (eval(this.ExplodableExplosion)) return true;
                if (eval(this.TrackingMaxAngle)) return true;
                if (eval(this.ExplodableDebrisScale)) return true;
                if (eval(this.SeverableDebrisCount)) return true;
                if (eval(this.SeverableDebris)) return true;
                if (eval(this.SeverableExplosion)) return true;
                if (eval(this.SeverableDebrisScale)) return true;
                if (eval(this.GorePositioning)) return true;
                if (eval(this.GoreRotation)) return true;
                if (eval(this.SeverableImpactData)) return true;
                if (eval(this.ExplodableImpactData)) return true;
                if (eval(this.SeverableDecalCount)) return true;
                if (eval(this.ExplodableDecalCount)) return true;
                if (eval(this.Unknown)) return true;
                if (eval(this.LimbReplacementScale)) return true;
                if (eval(this.LimbReplacementModel)) return true;
                if (eval(this.GoreTargetBone)) return true;
                if (eval(this.TextureFilesHashes)) return true;
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new BodyPart.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Name = eval(this.Name);
                obj.PoseMatching = eval(this.PoseMatching);
                obj.PartNode = eval(this.PartNode);
                obj.VatsTarget = eval(this.VatsTarget);
                obj.IkStartNode = eval(this.IkStartNode);
                obj.DamageMult = eval(this.DamageMult);
                obj.Flags = eval(this.Flags);
                obj.Type = eval(this.Type);
                obj.HealthPercent = eval(this.HealthPercent);
                obj.ActorValue = eval(this.ActorValue);
                obj.ToHitChance = eval(this.ToHitChance);
                obj.ExplodableExplosionChance = eval(this.ExplodableExplosionChance);
                obj.ExplodableDebrisCount = eval(this.ExplodableDebrisCount);
                obj.ExplodableDebris = eval(this.ExplodableDebris);
                obj.ExplodableExplosion = eval(this.ExplodableExplosion);
                obj.TrackingMaxAngle = eval(this.TrackingMaxAngle);
                obj.ExplodableDebrisScale = eval(this.ExplodableDebrisScale);
                obj.SeverableDebrisCount = eval(this.SeverableDebrisCount);
                obj.SeverableDebris = eval(this.SeverableDebris);
                obj.SeverableExplosion = eval(this.SeverableExplosion);
                obj.SeverableDebrisScale = eval(this.SeverableDebrisScale);
                obj.GorePositioning = eval(this.GorePositioning);
                obj.GoreRotation = eval(this.GoreRotation);
                obj.SeverableImpactData = eval(this.SeverableImpactData);
                obj.ExplodableImpactData = eval(this.ExplodableImpactData);
                obj.SeverableDecalCount = eval(this.SeverableDecalCount);
                obj.ExplodableDecalCount = eval(this.ExplodableDecalCount);
                obj.Unknown = eval(this.Unknown);
                obj.LimbReplacementScale = eval(this.LimbReplacementScale);
                obj.LimbReplacementModel = eval(this.LimbReplacementModel);
                obj.GoreTargetBone = eval(this.GoreTargetBone);
                obj.TextureFilesHashes = eval(this.TextureFilesHashes);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(BodyPart.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, BodyPart.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(BodyPart.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.PoseMatching ?? true)
                    {
                        sb.AppendItem(PoseMatching, "PoseMatching");
                    }
                    if (printMask?.PartNode ?? true)
                    {
                        sb.AppendItem(PartNode, "PartNode");
                    }
                    if (printMask?.VatsTarget ?? true)
                    {
                        sb.AppendItem(VatsTarget, "VatsTarget");
                    }
                    if (printMask?.IkStartNode ?? true)
                    {
                        sb.AppendItem(IkStartNode, "IkStartNode");
                    }
                    if (printMask?.DamageMult ?? true)
                    {
                        sb.AppendItem(DamageMult, "DamageMult");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.HealthPercent ?? true)
                    {
                        sb.AppendItem(HealthPercent, "HealthPercent");
                    }
                    if (printMask?.ActorValue ?? true)
                    {
                        sb.AppendItem(ActorValue, "ActorValue");
                    }
                    if (printMask?.ToHitChance ?? true)
                    {
                        sb.AppendItem(ToHitChance, "ToHitChance");
                    }
                    if (printMask?.ExplodableExplosionChance ?? true)
                    {
                        sb.AppendItem(ExplodableExplosionChance, "ExplodableExplosionChance");
                    }
                    if (printMask?.ExplodableDebrisCount ?? true)
                    {
                        sb.AppendItem(ExplodableDebrisCount, "ExplodableDebrisCount");
                    }
                    if (printMask?.ExplodableDebris ?? true)
                    {
                        sb.AppendItem(ExplodableDebris, "ExplodableDebris");
                    }
                    if (printMask?.ExplodableExplosion ?? true)
                    {
                        sb.AppendItem(ExplodableExplosion, "ExplodableExplosion");
                    }
                    if (printMask?.TrackingMaxAngle ?? true)
                    {
                        sb.AppendItem(TrackingMaxAngle, "TrackingMaxAngle");
                    }
                    if (printMask?.ExplodableDebrisScale ?? true)
                    {
                        sb.AppendItem(ExplodableDebrisScale, "ExplodableDebrisScale");
                    }
                    if (printMask?.SeverableDebrisCount ?? true)
                    {
                        sb.AppendItem(SeverableDebrisCount, "SeverableDebrisCount");
                    }
                    if (printMask?.SeverableDebris ?? true)
                    {
                        sb.AppendItem(SeverableDebris, "SeverableDebris");
                    }
                    if (printMask?.SeverableExplosion ?? true)
                    {
                        sb.AppendItem(SeverableExplosion, "SeverableExplosion");
                    }
                    if (printMask?.SeverableDebrisScale ?? true)
                    {
                        sb.AppendItem(SeverableDebrisScale, "SeverableDebrisScale");
                    }
                    if (printMask?.GorePositioning ?? true)
                    {
                        sb.AppendItem(GorePositioning, "GorePositioning");
                    }
                    if (printMask?.GoreRotation ?? true)
                    {
                        sb.AppendItem(GoreRotation, "GoreRotation");
                    }
                    if (printMask?.SeverableImpactData ?? true)
                    {
                        sb.AppendItem(SeverableImpactData, "SeverableImpactData");
                    }
                    if (printMask?.ExplodableImpactData ?? true)
                    {
                        sb.AppendItem(ExplodableImpactData, "ExplodableImpactData");
                    }
                    if (printMask?.SeverableDecalCount ?? true)
                    {
                        sb.AppendItem(SeverableDecalCount, "SeverableDecalCount");
                    }
                    if (printMask?.ExplodableDecalCount ?? true)
                    {
                        sb.AppendItem(ExplodableDecalCount, "ExplodableDecalCount");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.LimbReplacementScale ?? true)
                    {
                        sb.AppendItem(LimbReplacementScale, "LimbReplacementScale");
                    }
                    if (printMask?.LimbReplacementModel ?? true)
                    {
                        sb.AppendItem(LimbReplacementModel, "LimbReplacementModel");
                    }
                    if (printMask?.GoreTargetBone ?? true)
                    {
                        sb.AppendItem(GoreTargetBone, "GoreTargetBone");
                    }
                    if (printMask?.TextureFilesHashes ?? true)
                    {
                        sb.AppendItem(TextureFilesHashes, "TextureFilesHashes");
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Name;
            public Exception? PoseMatching;
            public Exception? PartNode;
            public Exception? VatsTarget;
            public Exception? IkStartNode;
            public Exception? DamageMult;
            public Exception? Flags;
            public Exception? Type;
            public Exception? HealthPercent;
            public Exception? ActorValue;
            public Exception? ToHitChance;
            public Exception? ExplodableExplosionChance;
            public Exception? ExplodableDebrisCount;
            public Exception? ExplodableDebris;
            public Exception? ExplodableExplosion;
            public Exception? TrackingMaxAngle;
            public Exception? ExplodableDebrisScale;
            public Exception? SeverableDebrisCount;
            public Exception? SeverableDebris;
            public Exception? SeverableExplosion;
            public Exception? SeverableDebrisScale;
            public Exception? GorePositioning;
            public Exception? GoreRotation;
            public Exception? SeverableImpactData;
            public Exception? ExplodableImpactData;
            public Exception? SeverableDecalCount;
            public Exception? ExplodableDecalCount;
            public Exception? Unknown;
            public Exception? LimbReplacementScale;
            public Exception? LimbReplacementModel;
            public Exception? GoreTargetBone;
            public Exception? TextureFilesHashes;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                BodyPart_FieldIndex enu = (BodyPart_FieldIndex)index;
                switch (enu)
                {
                    case BodyPart_FieldIndex.Name:
                        return Name;
                    case BodyPart_FieldIndex.PoseMatching:
                        return PoseMatching;
                    case BodyPart_FieldIndex.PartNode:
                        return PartNode;
                    case BodyPart_FieldIndex.VatsTarget:
                        return VatsTarget;
                    case BodyPart_FieldIndex.IkStartNode:
                        return IkStartNode;
                    case BodyPart_FieldIndex.DamageMult:
                        return DamageMult;
                    case BodyPart_FieldIndex.Flags:
                        return Flags;
                    case BodyPart_FieldIndex.Type:
                        return Type;
                    case BodyPart_FieldIndex.HealthPercent:
                        return HealthPercent;
                    case BodyPart_FieldIndex.ActorValue:
                        return ActorValue;
                    case BodyPart_FieldIndex.ToHitChance:
                        return ToHitChance;
                    case BodyPart_FieldIndex.ExplodableExplosionChance:
                        return ExplodableExplosionChance;
                    case BodyPart_FieldIndex.ExplodableDebrisCount:
                        return ExplodableDebrisCount;
                    case BodyPart_FieldIndex.ExplodableDebris:
                        return ExplodableDebris;
                    case BodyPart_FieldIndex.ExplodableExplosion:
                        return ExplodableExplosion;
                    case BodyPart_FieldIndex.TrackingMaxAngle:
                        return TrackingMaxAngle;
                    case BodyPart_FieldIndex.ExplodableDebrisScale:
                        return ExplodableDebrisScale;
                    case BodyPart_FieldIndex.SeverableDebrisCount:
                        return SeverableDebrisCount;
                    case BodyPart_FieldIndex.SeverableDebris:
                        return SeverableDebris;
                    case BodyPart_FieldIndex.SeverableExplosion:
                        return SeverableExplosion;
                    case BodyPart_FieldIndex.SeverableDebrisScale:
                        return SeverableDebrisScale;
                    case BodyPart_FieldIndex.GorePositioning:
                        return GorePositioning;
                    case BodyPart_FieldIndex.GoreRotation:
                        return GoreRotation;
                    case BodyPart_FieldIndex.SeverableImpactData:
                        return SeverableImpactData;
                    case BodyPart_FieldIndex.ExplodableImpactData:
                        return ExplodableImpactData;
                    case BodyPart_FieldIndex.SeverableDecalCount:
                        return SeverableDecalCount;
                    case BodyPart_FieldIndex.ExplodableDecalCount:
                        return ExplodableDecalCount;
                    case BodyPart_FieldIndex.Unknown:
                        return Unknown;
                    case BodyPart_FieldIndex.LimbReplacementScale:
                        return LimbReplacementScale;
                    case BodyPart_FieldIndex.LimbReplacementModel:
                        return LimbReplacementModel;
                    case BodyPart_FieldIndex.GoreTargetBone:
                        return GoreTargetBone;
                    case BodyPart_FieldIndex.TextureFilesHashes:
                        return TextureFilesHashes;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                BodyPart_FieldIndex enu = (BodyPart_FieldIndex)index;
                switch (enu)
                {
                    case BodyPart_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case BodyPart_FieldIndex.PoseMatching:
                        this.PoseMatching = ex;
                        break;
                    case BodyPart_FieldIndex.PartNode:
                        this.PartNode = ex;
                        break;
                    case BodyPart_FieldIndex.VatsTarget:
                        this.VatsTarget = ex;
                        break;
                    case BodyPart_FieldIndex.IkStartNode:
                        this.IkStartNode = ex;
                        break;
                    case BodyPart_FieldIndex.DamageMult:
                        this.DamageMult = ex;
                        break;
                    case BodyPart_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case BodyPart_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case BodyPart_FieldIndex.HealthPercent:
                        this.HealthPercent = ex;
                        break;
                    case BodyPart_FieldIndex.ActorValue:
                        this.ActorValue = ex;
                        break;
                    case BodyPart_FieldIndex.ToHitChance:
                        this.ToHitChance = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableExplosionChance:
                        this.ExplodableExplosionChance = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebrisCount:
                        this.ExplodableDebrisCount = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebris:
                        this.ExplodableDebris = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableExplosion:
                        this.ExplodableExplosion = ex;
                        break;
                    case BodyPart_FieldIndex.TrackingMaxAngle:
                        this.TrackingMaxAngle = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebrisScale:
                        this.ExplodableDebrisScale = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableDebrisCount:
                        this.SeverableDebrisCount = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableDebris:
                        this.SeverableDebris = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableExplosion:
                        this.SeverableExplosion = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableDebrisScale:
                        this.SeverableDebrisScale = ex;
                        break;
                    case BodyPart_FieldIndex.GorePositioning:
                        this.GorePositioning = ex;
                        break;
                    case BodyPart_FieldIndex.GoreRotation:
                        this.GoreRotation = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableImpactData:
                        this.SeverableImpactData = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableImpactData:
                        this.ExplodableImpactData = ex;
                        break;
                    case BodyPart_FieldIndex.SeverableDecalCount:
                        this.SeverableDecalCount = ex;
                        break;
                    case BodyPart_FieldIndex.ExplodableDecalCount:
                        this.ExplodableDecalCount = ex;
                        break;
                    case BodyPart_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case BodyPart_FieldIndex.LimbReplacementScale:
                        this.LimbReplacementScale = ex;
                        break;
                    case BodyPart_FieldIndex.LimbReplacementModel:
                        this.LimbReplacementModel = ex;
                        break;
                    case BodyPart_FieldIndex.GoreTargetBone:
                        this.GoreTargetBone = ex;
                        break;
                    case BodyPart_FieldIndex.TextureFilesHashes:
                        this.TextureFilesHashes = ex;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                BodyPart_FieldIndex enu = (BodyPart_FieldIndex)index;
                switch (enu)
                {
                    case BodyPart_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.PoseMatching:
                        this.PoseMatching = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.PartNode:
                        this.PartNode = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.VatsTarget:
                        this.VatsTarget = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.IkStartNode:
                        this.IkStartNode = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.DamageMult:
                        this.DamageMult = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.HealthPercent:
                        this.HealthPercent = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ActorValue:
                        this.ActorValue = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ToHitChance:
                        this.ToHitChance = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableExplosionChance:
                        this.ExplodableExplosionChance = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebrisCount:
                        this.ExplodableDebrisCount = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebris:
                        this.ExplodableDebris = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableExplosion:
                        this.ExplodableExplosion = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.TrackingMaxAngle:
                        this.TrackingMaxAngle = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableDebrisScale:
                        this.ExplodableDebrisScale = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableDebrisCount:
                        this.SeverableDebrisCount = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableDebris:
                        this.SeverableDebris = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableExplosion:
                        this.SeverableExplosion = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableDebrisScale:
                        this.SeverableDebrisScale = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.GorePositioning:
                        this.GorePositioning = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.GoreRotation:
                        this.GoreRotation = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableImpactData:
                        this.SeverableImpactData = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableImpactData:
                        this.ExplodableImpactData = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.SeverableDecalCount:
                        this.SeverableDecalCount = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.ExplodableDecalCount:
                        this.ExplodableDecalCount = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.LimbReplacementScale:
                        this.LimbReplacementScale = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.LimbReplacementModel:
                        this.LimbReplacementModel = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.GoreTargetBone:
                        this.GoreTargetBone = (Exception?)obj;
                        break;
                    case BodyPart_FieldIndex.TextureFilesHashes:
                        this.TextureFilesHashes = (Exception?)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Name != null) return true;
                if (PoseMatching != null) return true;
                if (PartNode != null) return true;
                if (VatsTarget != null) return true;
                if (IkStartNode != null) return true;
                if (DamageMult != null) return true;
                if (Flags != null) return true;
                if (Type != null) return true;
                if (HealthPercent != null) return true;
                if (ActorValue != null) return true;
                if (ToHitChance != null) return true;
                if (ExplodableExplosionChance != null) return true;
                if (ExplodableDebrisCount != null) return true;
                if (ExplodableDebris != null) return true;
                if (ExplodableExplosion != null) return true;
                if (TrackingMaxAngle != null) return true;
                if (ExplodableDebrisScale != null) return true;
                if (SeverableDebrisCount != null) return true;
                if (SeverableDebris != null) return true;
                if (SeverableExplosion != null) return true;
                if (SeverableDebrisScale != null) return true;
                if (GorePositioning != null) return true;
                if (GoreRotation != null) return true;
                if (SeverableImpactData != null) return true;
                if (ExplodableImpactData != null) return true;
                if (SeverableDecalCount != null) return true;
                if (ExplodableDecalCount != null) return true;
                if (Unknown != null) return true;
                if (LimbReplacementScale != null) return true;
                if (LimbReplacementModel != null) return true;
                if (GoreTargetBone != null) return true;
                if (TextureFilesHashes != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(PoseMatching, "PoseMatching");
                }
                {
                    sb.AppendItem(PartNode, "PartNode");
                }
                {
                    sb.AppendItem(VatsTarget, "VatsTarget");
                }
                {
                    sb.AppendItem(IkStartNode, "IkStartNode");
                }
                {
                    sb.AppendItem(DamageMult, "DamageMult");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(HealthPercent, "HealthPercent");
                }
                {
                    sb.AppendItem(ActorValue, "ActorValue");
                }
                {
                    sb.AppendItem(ToHitChance, "ToHitChance");
                }
                {
                    sb.AppendItem(ExplodableExplosionChance, "ExplodableExplosionChance");
                }
                {
                    sb.AppendItem(ExplodableDebrisCount, "ExplodableDebrisCount");
                }
                {
                    sb.AppendItem(ExplodableDebris, "ExplodableDebris");
                }
                {
                    sb.AppendItem(ExplodableExplosion, "ExplodableExplosion");
                }
                {
                    sb.AppendItem(TrackingMaxAngle, "TrackingMaxAngle");
                }
                {
                    sb.AppendItem(ExplodableDebrisScale, "ExplodableDebrisScale");
                }
                {
                    sb.AppendItem(SeverableDebrisCount, "SeverableDebrisCount");
                }
                {
                    sb.AppendItem(SeverableDebris, "SeverableDebris");
                }
                {
                    sb.AppendItem(SeverableExplosion, "SeverableExplosion");
                }
                {
                    sb.AppendItem(SeverableDebrisScale, "SeverableDebrisScale");
                }
                {
                    sb.AppendItem(GorePositioning, "GorePositioning");
                }
                {
                    sb.AppendItem(GoreRotation, "GoreRotation");
                }
                {
                    sb.AppendItem(SeverableImpactData, "SeverableImpactData");
                }
                {
                    sb.AppendItem(ExplodableImpactData, "ExplodableImpactData");
                }
                {
                    sb.AppendItem(SeverableDecalCount, "SeverableDecalCount");
                }
                {
                    sb.AppendItem(ExplodableDecalCount, "ExplodableDecalCount");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(LimbReplacementScale, "LimbReplacementScale");
                }
                {
                    sb.AppendItem(LimbReplacementModel, "LimbReplacementModel");
                }
                {
                    sb.AppendItem(GoreTargetBone, "GoreTargetBone");
                }
                {
                    sb.AppendItem(TextureFilesHashes, "TextureFilesHashes");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Name = this.Name.Combine(rhs.Name);
                ret.PoseMatching = this.PoseMatching.Combine(rhs.PoseMatching);
                ret.PartNode = this.PartNode.Combine(rhs.PartNode);
                ret.VatsTarget = this.VatsTarget.Combine(rhs.VatsTarget);
                ret.IkStartNode = this.IkStartNode.Combine(rhs.IkStartNode);
                ret.DamageMult = this.DamageMult.Combine(rhs.DamageMult);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.Type = this.Type.Combine(rhs.Type);
                ret.HealthPercent = this.HealthPercent.Combine(rhs.HealthPercent);
                ret.ActorValue = this.ActorValue.Combine(rhs.ActorValue);
                ret.ToHitChance = this.ToHitChance.Combine(rhs.ToHitChance);
                ret.ExplodableExplosionChance = this.ExplodableExplosionChance.Combine(rhs.ExplodableExplosionChance);
                ret.ExplodableDebrisCount = this.ExplodableDebrisCount.Combine(rhs.ExplodableDebrisCount);
                ret.ExplodableDebris = this.ExplodableDebris.Combine(rhs.ExplodableDebris);
                ret.ExplodableExplosion = this.ExplodableExplosion.Combine(rhs.ExplodableExplosion);
                ret.TrackingMaxAngle = this.TrackingMaxAngle.Combine(rhs.TrackingMaxAngle);
                ret.ExplodableDebrisScale = this.ExplodableDebrisScale.Combine(rhs.ExplodableDebrisScale);
                ret.SeverableDebrisCount = this.SeverableDebrisCount.Combine(rhs.SeverableDebrisCount);
                ret.SeverableDebris = this.SeverableDebris.Combine(rhs.SeverableDebris);
                ret.SeverableExplosion = this.SeverableExplosion.Combine(rhs.SeverableExplosion);
                ret.SeverableDebrisScale = this.SeverableDebrisScale.Combine(rhs.SeverableDebrisScale);
                ret.GorePositioning = this.GorePositioning.Combine(rhs.GorePositioning);
                ret.GoreRotation = this.GoreRotation.Combine(rhs.GoreRotation);
                ret.SeverableImpactData = this.SeverableImpactData.Combine(rhs.SeverableImpactData);
                ret.ExplodableImpactData = this.ExplodableImpactData.Combine(rhs.ExplodableImpactData);
                ret.SeverableDecalCount = this.SeverableDecalCount.Combine(rhs.SeverableDecalCount);
                ret.ExplodableDecalCount = this.ExplodableDecalCount.Combine(rhs.ExplodableDecalCount);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.LimbReplacementScale = this.LimbReplacementScale.Combine(rhs.LimbReplacementScale);
                ret.LimbReplacementModel = this.LimbReplacementModel.Combine(rhs.LimbReplacementModel);
                ret.GoreTargetBone = this.GoreTargetBone.Combine(rhs.GoreTargetBone);
                ret.TextureFilesHashes = this.TextureFilesHashes.Combine(rhs.TextureFilesHashes);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Name;
            public bool PoseMatching;
            public bool PartNode;
            public bool VatsTarget;
            public bool IkStartNode;
            public bool DamageMult;
            public bool Flags;
            public bool Type;
            public bool HealthPercent;
            public bool ActorValue;
            public bool ToHitChance;
            public bool ExplodableExplosionChance;
            public bool ExplodableDebrisCount;
            public bool ExplodableDebris;
            public bool ExplodableExplosion;
            public bool TrackingMaxAngle;
            public bool ExplodableDebrisScale;
            public bool SeverableDebrisCount;
            public bool SeverableDebris;
            public bool SeverableExplosion;
            public bool SeverableDebrisScale;
            public bool GorePositioning;
            public bool GoreRotation;
            public bool SeverableImpactData;
            public bool ExplodableImpactData;
            public bool SeverableDecalCount;
            public bool ExplodableDecalCount;
            public bool Unknown;
            public bool LimbReplacementScale;
            public bool LimbReplacementModel;
            public bool GoreTargetBone;
            public bool TextureFilesHashes;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Name = defaultOn;
                this.PoseMatching = defaultOn;
                this.PartNode = defaultOn;
                this.VatsTarget = defaultOn;
                this.IkStartNode = defaultOn;
                this.DamageMult = defaultOn;
                this.Flags = defaultOn;
                this.Type = defaultOn;
                this.HealthPercent = defaultOn;
                this.ActorValue = defaultOn;
                this.ToHitChance = defaultOn;
                this.ExplodableExplosionChance = defaultOn;
                this.ExplodableDebrisCount = defaultOn;
                this.ExplodableDebris = defaultOn;
                this.ExplodableExplosion = defaultOn;
                this.TrackingMaxAngle = defaultOn;
                this.ExplodableDebrisScale = defaultOn;
                this.SeverableDebrisCount = defaultOn;
                this.SeverableDebris = defaultOn;
                this.SeverableExplosion = defaultOn;
                this.SeverableDebrisScale = defaultOn;
                this.GorePositioning = defaultOn;
                this.GoreRotation = defaultOn;
                this.SeverableImpactData = defaultOn;
                this.ExplodableImpactData = defaultOn;
                this.SeverableDecalCount = defaultOn;
                this.ExplodableDecalCount = defaultOn;
                this.Unknown = defaultOn;
                this.LimbReplacementScale = defaultOn;
                this.LimbReplacementModel = defaultOn;
                this.GoreTargetBone = defaultOn;
                this.TextureFilesHashes = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Name, null));
                ret.Add((PoseMatching, null));
                ret.Add((PartNode, null));
                ret.Add((VatsTarget, null));
                ret.Add((IkStartNode, null));
                ret.Add((DamageMult, null));
                ret.Add((Flags, null));
                ret.Add((Type, null));
                ret.Add((HealthPercent, null));
                ret.Add((ActorValue, null));
                ret.Add((ToHitChance, null));
                ret.Add((ExplodableExplosionChance, null));
                ret.Add((ExplodableDebrisCount, null));
                ret.Add((ExplodableDebris, null));
                ret.Add((ExplodableExplosion, null));
                ret.Add((TrackingMaxAngle, null));
                ret.Add((ExplodableDebrisScale, null));
                ret.Add((SeverableDebrisCount, null));
                ret.Add((SeverableDebris, null));
                ret.Add((SeverableExplosion, null));
                ret.Add((SeverableDebrisScale, null));
                ret.Add((GorePositioning, null));
                ret.Add((GoreRotation, null));
                ret.Add((SeverableImpactData, null));
                ret.Add((ExplodableImpactData, null));
                ret.Add((SeverableDecalCount, null));
                ret.Add((ExplodableDecalCount, null));
                ret.Add((Unknown, null));
                ret.Add((LimbReplacementScale, null));
                ret.Add((LimbReplacementModel, null));
                ret.Add((GoreTargetBone, null));
                ret.Add((TextureFilesHashes, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BodyPartCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => BodyPartSetterCommon.Instance.RemapLinks(this, mapping);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BodyPartBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BodyPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static BodyPart CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new BodyPart();
            ((BodyPartSetterCommon)((IBodyPartGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out BodyPart item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((BodyPartSetterCommon)((IBodyPartGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static BodyPart GetNew()
        {
            return new BodyPart();
        }

    }
    #endregion

    #region Interface
    public partial interface IBodyPart :
        IBodyPartGetter,
        IFormLinkContainer,
        ILoquiObjectSetter<IBodyPart>,
        INamedRequired,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: INamedRequired, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString Name { get; set; }
        new String? PoseMatching { get; set; }
        new String PartNode { get; set; }
        new String VatsTarget { get; set; }
        new String IkStartNode { get; set; }
        new Single DamageMult { get; set; }
        new BodyPart.Flag Flags { get; set; }
        new BodyPart.PartType Type { get; set; }
        new Byte HealthPercent { get; set; }
        new ActorValue ActorValue { get; set; }
        new Byte ToHitChance { get; set; }
        new Byte ExplodableExplosionChance { get; set; }
        new UInt16 ExplodableDebrisCount { get; set; }
        new IFormLink<IDebrisGetter> ExplodableDebris { get; set; }
        new IFormLink<IExplosionGetter> ExplodableExplosion { get; set; }
        new Single TrackingMaxAngle { get; set; }
        new Single ExplodableDebrisScale { get; set; }
        new Int32 SeverableDebrisCount { get; set; }
        new IFormLink<IDebrisGetter> SeverableDebris { get; set; }
        new IFormLink<IExplosionGetter> SeverableExplosion { get; set; }
        new Single SeverableDebrisScale { get; set; }
        new P3Float GorePositioning { get; set; }
        new P3Float GoreRotation { get; set; }
        new IFormLink<IImpactDataSetGetter> SeverableImpactData { get; set; }
        new IFormLink<IImpactDataSetGetter> ExplodableImpactData { get; set; }
        new Byte SeverableDecalCount { get; set; }
        new Byte ExplodableDecalCount { get; set; }
        new UInt16 Unknown { get; set; }
        new Single LimbReplacementScale { get; set; }
        new String LimbReplacementModel { get; set; }
        new String GoreTargetBone { get; set; }
        new MemorySlice<Byte>? TextureFilesHashes { get; set; }
    }

    public partial interface IBodyPartGetter :
        ILoquiObject,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<IBodyPartGetter>,
        INamedRequiredGetter,
        ITranslatedNamedRequiredGetter
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => BodyPart_Registration.Instance;
        #region Name
        /// <summary>
        /// Aspects: INamedRequiredGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter Name { get; }
        #endregion
        String? PoseMatching { get; }
        String PartNode { get; }
        String VatsTarget { get; }
        String IkStartNode { get; }
        Single DamageMult { get; }
        BodyPart.Flag Flags { get; }
        BodyPart.PartType Type { get; }
        Byte HealthPercent { get; }
        ActorValue ActorValue { get; }
        Byte ToHitChance { get; }
        Byte ExplodableExplosionChance { get; }
        UInt16 ExplodableDebrisCount { get; }
        IFormLinkGetter<IDebrisGetter> ExplodableDebris { get; }
        IFormLinkGetter<IExplosionGetter> ExplodableExplosion { get; }
        Single TrackingMaxAngle { get; }
        Single ExplodableDebrisScale { get; }
        Int32 SeverableDebrisCount { get; }
        IFormLinkGetter<IDebrisGetter> SeverableDebris { get; }
        IFormLinkGetter<IExplosionGetter> SeverableExplosion { get; }
        Single SeverableDebrisScale { get; }
        P3Float GorePositioning { get; }
        P3Float GoreRotation { get; }
        IFormLinkGetter<IImpactDataSetGetter> SeverableImpactData { get; }
        IFormLinkGetter<IImpactDataSetGetter> ExplodableImpactData { get; }
        Byte SeverableDecalCount { get; }
        Byte ExplodableDecalCount { get; }
        UInt16 Unknown { get; }
        Single LimbReplacementScale { get; }
        String LimbReplacementModel { get; }
        String GoreTargetBone { get; }
        ReadOnlyMemorySlice<Byte>? TextureFilesHashes { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class BodyPartMixIn
    {
        public static void Clear(this IBodyPart item)
        {
            ((BodyPartSetterCommon)((IBodyPartGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static BodyPart.Mask<bool> GetEqualsMask(
            this IBodyPartGetter item,
            IBodyPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IBodyPartGetter item,
            string? name = null,
            BodyPart.Mask<bool>? printMask = null)
        {
            return ((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IBodyPartGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BodyPart.Mask<bool>? printMask = null)
        {
            ((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IBodyPartGetter item,
            IBodyPartGetter rhs,
            BodyPart.TranslationMask? equalsMask = null)
        {
            return ((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IBodyPart lhs,
            IBodyPartGetter rhs)
        {
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBodyPart lhs,
            IBodyPartGetter rhs,
            BodyPart.TranslationMask? copyMask = null)
        {
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this IBodyPart lhs,
            IBodyPartGetter rhs,
            out BodyPart.ErrorMask errorMask,
            BodyPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = BodyPart.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IBodyPart lhs,
            IBodyPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static BodyPart DeepCopy(
            this IBodyPartGetter item,
            BodyPart.TranslationMask? copyMask = null)
        {
            return ((BodyPartSetterTranslationCommon)((IBodyPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static BodyPart DeepCopy(
            this IBodyPartGetter item,
            out BodyPart.ErrorMask errorMask,
            BodyPart.TranslationMask? copyMask = null)
        {
            return ((BodyPartSetterTranslationCommon)((IBodyPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static BodyPart DeepCopy(
            this IBodyPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((BodyPartSetterTranslationCommon)((IBodyPartGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this IBodyPart item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((BodyPartSetterCommon)((IBodyPartGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum BodyPart_FieldIndex
    {
        Name = 0,
        PoseMatching = 1,
        PartNode = 2,
        VatsTarget = 3,
        IkStartNode = 4,
        DamageMult = 5,
        Flags = 6,
        Type = 7,
        HealthPercent = 8,
        ActorValue = 9,
        ToHitChance = 10,
        ExplodableExplosionChance = 11,
        ExplodableDebrisCount = 12,
        ExplodableDebris = 13,
        ExplodableExplosion = 14,
        TrackingMaxAngle = 15,
        ExplodableDebrisScale = 16,
        SeverableDebrisCount = 17,
        SeverableDebris = 18,
        SeverableExplosion = 19,
        SeverableDebrisScale = 20,
        GorePositioning = 21,
        GoreRotation = 22,
        SeverableImpactData = 23,
        ExplodableImpactData = 24,
        SeverableDecalCount = 25,
        ExplodableDecalCount = 26,
        Unknown = 27,
        LimbReplacementScale = 28,
        LimbReplacementModel = 29,
        GoreTargetBone = 30,
        TextureFilesHashes = 31,
    }
    #endregion

    #region Registration
    internal partial class BodyPart_Registration : ILoquiRegistration
    {
        public static readonly BodyPart_Registration Instance = new BodyPart_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 32;

        public const ushort FieldCount = 32;

        public static readonly Type MaskType = typeof(BodyPart.Mask<>);

        public static readonly Type ErrorMaskType = typeof(BodyPart.ErrorMask);

        public static readonly Type ClassType = typeof(BodyPart);

        public static readonly Type GetterType = typeof(IBodyPartGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IBodyPart);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.BodyPart";

        public const string Name = "BodyPart";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.BPTN;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.BPTN);
            var all = RecordCollection.Factory(
                RecordTypes.BPTN,
                RecordTypes.PNAM,
                RecordTypes.BPNN,
                RecordTypes.BPNT,
                RecordTypes.BPNI,
                RecordTypes.BPND,
                RecordTypes.NAM1,
                RecordTypes.NAM4,
                RecordTypes.NAM5);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(BodyPartBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class BodyPartSetterCommon
    {
        public static readonly BodyPartSetterCommon Instance = new BodyPartSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IBodyPart item)
        {
            ClearPartial();
            item.Name.Clear();
            item.PoseMatching = default;
            item.PartNode = string.Empty;
            item.VatsTarget = string.Empty;
            item.IkStartNode = string.Empty;
            item.DamageMult = default(Single);
            item.Flags = default(BodyPart.Flag);
            item.Type = default(BodyPart.PartType);
            item.HealthPercent = default(Byte);
            item.ActorValue = default(ActorValue);
            item.ToHitChance = default(Byte);
            item.ExplodableExplosionChance = default(Byte);
            item.ExplodableDebrisCount = default(UInt16);
            item.ExplodableDebris.Clear();
            item.ExplodableExplosion.Clear();
            item.TrackingMaxAngle = default(Single);
            item.ExplodableDebrisScale = default(Single);
            item.SeverableDebrisCount = default(Int32);
            item.SeverableDebris.Clear();
            item.SeverableExplosion.Clear();
            item.SeverableDebrisScale = default(Single);
            item.GorePositioning = default(P3Float);
            item.GoreRotation = default(P3Float);
            item.SeverableImpactData.Clear();
            item.ExplodableImpactData.Clear();
            item.SeverableDecalCount = default(Byte);
            item.ExplodableDecalCount = default(Byte);
            item.Unknown = default(UInt16);
            item.LimbReplacementScale = default(Single);
            item.LimbReplacementModel = string.Empty;
            item.GoreTargetBone = string.Empty;
            item.TextureFilesHashes = default;
        }
        
        #region Mutagen
        public void RemapLinks(IBodyPart obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.ExplodableDebris.Relink(mapping);
            obj.ExplodableExplosion.Relink(mapping);
            obj.SeverableDebris.Relink(mapping);
            obj.SeverableExplosion.Relink(mapping);
            obj.SeverableImpactData.Relink(mapping);
            obj.ExplodableImpactData.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IBodyPart item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: BodyPartBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class BodyPartCommon
    {
        public static readonly BodyPartCommon Instance = new BodyPartCommon();

        public BodyPart.Mask<bool> GetEqualsMask(
            IBodyPartGetter item,
            IBodyPartGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new BodyPart.Mask<bool>(false);
            ((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IBodyPartGetter item,
            IBodyPartGetter rhs,
            BodyPart.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.PoseMatching = string.Equals(item.PoseMatching, rhs.PoseMatching);
            ret.PartNode = string.Equals(item.PartNode, rhs.PartNode);
            ret.VatsTarget = string.Equals(item.VatsTarget, rhs.VatsTarget);
            ret.IkStartNode = string.Equals(item.IkStartNode, rhs.IkStartNode);
            ret.DamageMult = item.DamageMult.EqualsWithin(rhs.DamageMult);
            ret.Flags = item.Flags == rhs.Flags;
            ret.Type = item.Type == rhs.Type;
            ret.HealthPercent = item.HealthPercent == rhs.HealthPercent;
            ret.ActorValue = item.ActorValue == rhs.ActorValue;
            ret.ToHitChance = item.ToHitChance == rhs.ToHitChance;
            ret.ExplodableExplosionChance = item.ExplodableExplosionChance == rhs.ExplodableExplosionChance;
            ret.ExplodableDebrisCount = item.ExplodableDebrisCount == rhs.ExplodableDebrisCount;
            ret.ExplodableDebris = item.ExplodableDebris.Equals(rhs.ExplodableDebris);
            ret.ExplodableExplosion = item.ExplodableExplosion.Equals(rhs.ExplodableExplosion);
            ret.TrackingMaxAngle = item.TrackingMaxAngle.EqualsWithin(rhs.TrackingMaxAngle);
            ret.ExplodableDebrisScale = item.ExplodableDebrisScale.EqualsWithin(rhs.ExplodableDebrisScale);
            ret.SeverableDebrisCount = item.SeverableDebrisCount == rhs.SeverableDebrisCount;
            ret.SeverableDebris = item.SeverableDebris.Equals(rhs.SeverableDebris);
            ret.SeverableExplosion = item.SeverableExplosion.Equals(rhs.SeverableExplosion);
            ret.SeverableDebrisScale = item.SeverableDebrisScale.EqualsWithin(rhs.SeverableDebrisScale);
            ret.GorePositioning = item.GorePositioning.Equals(rhs.GorePositioning);
            ret.GoreRotation = item.GoreRotation.Equals(rhs.GoreRotation);
            ret.SeverableImpactData = item.SeverableImpactData.Equals(rhs.SeverableImpactData);
            ret.ExplodableImpactData = item.ExplodableImpactData.Equals(rhs.ExplodableImpactData);
            ret.SeverableDecalCount = item.SeverableDecalCount == rhs.SeverableDecalCount;
            ret.ExplodableDecalCount = item.ExplodableDecalCount == rhs.ExplodableDecalCount;
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.LimbReplacementScale = item.LimbReplacementScale.EqualsWithin(rhs.LimbReplacementScale);
            ret.LimbReplacementModel = string.Equals(item.LimbReplacementModel, rhs.LimbReplacementModel);
            ret.GoreTargetBone = string.Equals(item.GoreTargetBone, rhs.GoreTargetBone);
            ret.TextureFilesHashes = MemorySliceExt.SequenceEqual(item.TextureFilesHashes, rhs.TextureFilesHashes);
        }
        
        public string Print(
            IBodyPartGetter item,
            string? name = null,
            BodyPart.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IBodyPartGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            BodyPart.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"BodyPart =>");
            }
            else
            {
                sb.AppendLine($"{name} (BodyPart) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IBodyPartGetter item,
            StructuredStringBuilder sb,
            BodyPart.Mask<bool>? printMask = null)
        {
            if (printMask?.Name ?? true)
            {
                sb.AppendItem(item.Name, "Name");
            }
            if ((printMask?.PoseMatching ?? true)
                && item.PoseMatching is {} PoseMatchingItem)
            {
                sb.AppendItem(PoseMatchingItem, "PoseMatching");
            }
            if (printMask?.PartNode ?? true)
            {
                sb.AppendItem(item.PartNode, "PartNode");
            }
            if (printMask?.VatsTarget ?? true)
            {
                sb.AppendItem(item.VatsTarget, "VatsTarget");
            }
            if (printMask?.IkStartNode ?? true)
            {
                sb.AppendItem(item.IkStartNode, "IkStartNode");
            }
            if (printMask?.DamageMult ?? true)
            {
                sb.AppendItem(item.DamageMult, "DamageMult");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.Type ?? true)
            {
                sb.AppendItem(item.Type, "Type");
            }
            if (printMask?.HealthPercent ?? true)
            {
                sb.AppendItem(item.HealthPercent, "HealthPercent");
            }
            if (printMask?.ActorValue ?? true)
            {
                sb.AppendItem(item.ActorValue, "ActorValue");
            }
            if (printMask?.ToHitChance ?? true)
            {
                sb.AppendItem(item.ToHitChance, "ToHitChance");
            }
            if (printMask?.ExplodableExplosionChance ?? true)
            {
                sb.AppendItem(item.ExplodableExplosionChance, "ExplodableExplosionChance");
            }
            if (printMask?.ExplodableDebrisCount ?? true)
            {
                sb.AppendItem(item.ExplodableDebrisCount, "ExplodableDebrisCount");
            }
            if (printMask?.ExplodableDebris ?? true)
            {
                sb.AppendItem(item.ExplodableDebris.FormKey, "ExplodableDebris");
            }
            if (printMask?.ExplodableExplosion ?? true)
            {
                sb.AppendItem(item.ExplodableExplosion.FormKey, "ExplodableExplosion");
            }
            if (printMask?.TrackingMaxAngle ?? true)
            {
                sb.AppendItem(item.TrackingMaxAngle, "TrackingMaxAngle");
            }
            if (printMask?.ExplodableDebrisScale ?? true)
            {
                sb.AppendItem(item.ExplodableDebrisScale, "ExplodableDebrisScale");
            }
            if (printMask?.SeverableDebrisCount ?? true)
            {
                sb.AppendItem(item.SeverableDebrisCount, "SeverableDebrisCount");
            }
            if (printMask?.SeverableDebris ?? true)
            {
                sb.AppendItem(item.SeverableDebris.FormKey, "SeverableDebris");
            }
            if (printMask?.SeverableExplosion ?? true)
            {
                sb.AppendItem(item.SeverableExplosion.FormKey, "SeverableExplosion");
            }
            if (printMask?.SeverableDebrisScale ?? true)
            {
                sb.AppendItem(item.SeverableDebrisScale, "SeverableDebrisScale");
            }
            if (printMask?.GorePositioning ?? true)
            {
                sb.AppendItem(item.GorePositioning, "GorePositioning");
            }
            if (printMask?.GoreRotation ?? true)
            {
                sb.AppendItem(item.GoreRotation, "GoreRotation");
            }
            if (printMask?.SeverableImpactData ?? true)
            {
                sb.AppendItem(item.SeverableImpactData.FormKey, "SeverableImpactData");
            }
            if (printMask?.ExplodableImpactData ?? true)
            {
                sb.AppendItem(item.ExplodableImpactData.FormKey, "ExplodableImpactData");
            }
            if (printMask?.SeverableDecalCount ?? true)
            {
                sb.AppendItem(item.SeverableDecalCount, "SeverableDecalCount");
            }
            if (printMask?.ExplodableDecalCount ?? true)
            {
                sb.AppendItem(item.ExplodableDecalCount, "ExplodableDecalCount");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.LimbReplacementScale ?? true)
            {
                sb.AppendItem(item.LimbReplacementScale, "LimbReplacementScale");
            }
            if (printMask?.LimbReplacementModel ?? true)
            {
                sb.AppendItem(item.LimbReplacementModel, "LimbReplacementModel");
            }
            if (printMask?.GoreTargetBone ?? true)
            {
                sb.AppendItem(item.GoreTargetBone, "GoreTargetBone");
            }
            if ((printMask?.TextureFilesHashes ?? true)
                && item.TextureFilesHashes is {} TextureFilesHashesItem)
            {
                sb.AppendLine($"TextureFilesHashes => {SpanExt.ToHexString(TextureFilesHashesItem)}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IBodyPartGetter? lhs,
            IBodyPartGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.PoseMatching) ?? true))
            {
                if (!string.Equals(lhs.PoseMatching, rhs.PoseMatching)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.PartNode) ?? true))
            {
                if (!string.Equals(lhs.PartNode, rhs.PartNode)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.VatsTarget) ?? true))
            {
                if (!string.Equals(lhs.VatsTarget, rhs.VatsTarget)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.IkStartNode) ?? true))
            {
                if (!string.Equals(lhs.IkStartNode, rhs.IkStartNode)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.DamageMult) ?? true))
            {
                if (!lhs.DamageMult.EqualsWithin(rhs.DamageMult)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.HealthPercent) ?? true))
            {
                if (lhs.HealthPercent != rhs.HealthPercent) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ActorValue) ?? true))
            {
                if (lhs.ActorValue != rhs.ActorValue) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ToHitChance) ?? true))
            {
                if (lhs.ToHitChance != rhs.ToHitChance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableExplosionChance) ?? true))
            {
                if (lhs.ExplodableExplosionChance != rhs.ExplodableExplosionChance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebrisCount) ?? true))
            {
                if (lhs.ExplodableDebrisCount != rhs.ExplodableDebrisCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebris) ?? true))
            {
                if (!lhs.ExplodableDebris.Equals(rhs.ExplodableDebris)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableExplosion) ?? true))
            {
                if (!lhs.ExplodableExplosion.Equals(rhs.ExplodableExplosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.TrackingMaxAngle) ?? true))
            {
                if (!lhs.TrackingMaxAngle.EqualsWithin(rhs.TrackingMaxAngle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebrisScale) ?? true))
            {
                if (!lhs.ExplodableDebrisScale.EqualsWithin(rhs.ExplodableDebrisScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebrisCount) ?? true))
            {
                if (lhs.SeverableDebrisCount != rhs.SeverableDebrisCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebris) ?? true))
            {
                if (!lhs.SeverableDebris.Equals(rhs.SeverableDebris)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableExplosion) ?? true))
            {
                if (!lhs.SeverableExplosion.Equals(rhs.SeverableExplosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebrisScale) ?? true))
            {
                if (!lhs.SeverableDebrisScale.EqualsWithin(rhs.SeverableDebrisScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GorePositioning) ?? true))
            {
                if (!lhs.GorePositioning.Equals(rhs.GorePositioning)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreRotation) ?? true))
            {
                if (!lhs.GoreRotation.Equals(rhs.GoreRotation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableImpactData) ?? true))
            {
                if (!lhs.SeverableImpactData.Equals(rhs.SeverableImpactData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableImpactData) ?? true))
            {
                if (!lhs.ExplodableImpactData.Equals(rhs.ExplodableImpactData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDecalCount) ?? true))
            {
                if (lhs.SeverableDecalCount != rhs.SeverableDecalCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDecalCount) ?? true))
            {
                if (lhs.ExplodableDecalCount != rhs.ExplodableDecalCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.LimbReplacementScale) ?? true))
            {
                if (!lhs.LimbReplacementScale.EqualsWithin(rhs.LimbReplacementScale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.LimbReplacementModel) ?? true))
            {
                if (!string.Equals(lhs.LimbReplacementModel, rhs.LimbReplacementModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreTargetBone) ?? true))
            {
                if (!string.Equals(lhs.GoreTargetBone, rhs.GoreTargetBone)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)BodyPart_FieldIndex.TextureFilesHashes) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.TextureFilesHashes, rhs.TextureFilesHashes)) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(IBodyPartGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Name);
            if (item.PoseMatching is {} PoseMatchingitem)
            {
                hash.Add(PoseMatchingitem);
            }
            hash.Add(item.PartNode);
            hash.Add(item.VatsTarget);
            hash.Add(item.IkStartNode);
            hash.Add(item.DamageMult);
            hash.Add(item.Flags);
            hash.Add(item.Type);
            hash.Add(item.HealthPercent);
            hash.Add(item.ActorValue);
            hash.Add(item.ToHitChance);
            hash.Add(item.ExplodableExplosionChance);
            hash.Add(item.ExplodableDebrisCount);
            hash.Add(item.ExplodableDebris);
            hash.Add(item.ExplodableExplosion);
            hash.Add(item.TrackingMaxAngle);
            hash.Add(item.ExplodableDebrisScale);
            hash.Add(item.SeverableDebrisCount);
            hash.Add(item.SeverableDebris);
            hash.Add(item.SeverableExplosion);
            hash.Add(item.SeverableDebrisScale);
            hash.Add(item.GorePositioning);
            hash.Add(item.GoreRotation);
            hash.Add(item.SeverableImpactData);
            hash.Add(item.ExplodableImpactData);
            hash.Add(item.SeverableDecalCount);
            hash.Add(item.ExplodableDecalCount);
            hash.Add(item.Unknown);
            hash.Add(item.LimbReplacementScale);
            hash.Add(item.LimbReplacementModel);
            hash.Add(item.GoreTargetBone);
            if (item.TextureFilesHashes is {} TextureFilesHashesItem)
            {
                hash.Add(TextureFilesHashesItem);
            }
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return BodyPart.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IBodyPartGetter obj)
        {
            yield return FormLinkInformation.Factory(obj.ExplodableDebris);
            yield return FormLinkInformation.Factory(obj.ExplodableExplosion);
            yield return FormLinkInformation.Factory(obj.SeverableDebris);
            yield return FormLinkInformation.Factory(obj.SeverableExplosion);
            yield return FormLinkInformation.Factory(obj.SeverableImpactData);
            yield return FormLinkInformation.Factory(obj.ExplodableImpactData);
            yield break;
        }
        
        #endregion
        
    }
    internal partial class BodyPartSetterTranslationCommon
    {
        public static readonly BodyPartSetterTranslationCommon Instance = new BodyPartSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IBodyPart item,
            IBodyPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.PoseMatching) ?? true))
            {
                item.PoseMatching = rhs.PoseMatching;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.PartNode) ?? true))
            {
                item.PartNode = rhs.PartNode;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.VatsTarget) ?? true))
            {
                item.VatsTarget = rhs.VatsTarget;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.IkStartNode) ?? true))
            {
                item.IkStartNode = rhs.IkStartNode;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.DamageMult) ?? true))
            {
                item.DamageMult = rhs.DamageMult;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.HealthPercent) ?? true))
            {
                item.HealthPercent = rhs.HealthPercent;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ActorValue) ?? true))
            {
                item.ActorValue = rhs.ActorValue;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ToHitChance) ?? true))
            {
                item.ToHitChance = rhs.ToHitChance;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableExplosionChance) ?? true))
            {
                item.ExplodableExplosionChance = rhs.ExplodableExplosionChance;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebrisCount) ?? true))
            {
                item.ExplodableDebrisCount = rhs.ExplodableDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebris) ?? true))
            {
                item.ExplodableDebris.SetTo(rhs.ExplodableDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableExplosion) ?? true))
            {
                item.ExplodableExplosion.SetTo(rhs.ExplodableExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.TrackingMaxAngle) ?? true))
            {
                item.TrackingMaxAngle = rhs.TrackingMaxAngle;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDebrisScale) ?? true))
            {
                item.ExplodableDebrisScale = rhs.ExplodableDebrisScale;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebrisCount) ?? true))
            {
                item.SeverableDebrisCount = rhs.SeverableDebrisCount;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebris) ?? true))
            {
                item.SeverableDebris.SetTo(rhs.SeverableDebris.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableExplosion) ?? true))
            {
                item.SeverableExplosion.SetTo(rhs.SeverableExplosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDebrisScale) ?? true))
            {
                item.SeverableDebrisScale = rhs.SeverableDebrisScale;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GorePositioning) ?? true))
            {
                item.GorePositioning = rhs.GorePositioning;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreRotation) ?? true))
            {
                item.GoreRotation = rhs.GoreRotation;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableImpactData) ?? true))
            {
                item.SeverableImpactData.SetTo(rhs.SeverableImpactData.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableImpactData) ?? true))
            {
                item.ExplodableImpactData.SetTo(rhs.ExplodableImpactData.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.SeverableDecalCount) ?? true))
            {
                item.SeverableDecalCount = rhs.SeverableDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.ExplodableDecalCount) ?? true))
            {
                item.ExplodableDecalCount = rhs.ExplodableDecalCount;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.LimbReplacementScale) ?? true))
            {
                item.LimbReplacementScale = rhs.LimbReplacementScale;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.LimbReplacementModel) ?? true))
            {
                item.LimbReplacementModel = rhs.LimbReplacementModel;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.GoreTargetBone) ?? true))
            {
                item.GoreTargetBone = rhs.GoreTargetBone;
            }
            if ((copyMask?.GetShouldTranslate((int)BodyPart_FieldIndex.TextureFilesHashes) ?? true))
            {
                if(rhs.TextureFilesHashes is {} TextureFilesHashesrhs)
                {
                    item.TextureFilesHashes = TextureFilesHashesrhs.ToArray();
                }
                else
                {
                    item.TextureFilesHashes = default;
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IBodyPart item,
            IBodyPartGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public BodyPart DeepCopy(
            IBodyPartGetter item,
            BodyPart.TranslationMask? copyMask = null)
        {
            BodyPart ret = (BodyPart)((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).GetNew();
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public BodyPart DeepCopy(
            IBodyPartGetter item,
            out BodyPart.ErrorMask errorMask,
            BodyPart.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            BodyPart ret = (BodyPart)((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).GetNew();
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = BodyPart.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public BodyPart DeepCopy(
            IBodyPartGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            BodyPart ret = (BodyPart)((BodyPartCommon)((IBodyPartGetter)item).CommonInstance()!).GetNew();
            ((BodyPartSetterTranslationCommon)((IBodyPartGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class BodyPart
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyPart_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BodyPart_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BodyPartCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return BodyPartSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BodyPartSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBodyPartGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object IBodyPartGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object IBodyPartGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class BodyPartBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly BodyPartBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IBodyPartGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.BPTN),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PoseMatching,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.PartNode,
                header: translationParams.ConvertToCustom(RecordTypes.BPNN),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.VatsTarget,
                header: translationParams.ConvertToCustom(RecordTypes.BPNT),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.IkStartNode,
                header: translationParams.ConvertToCustom(RecordTypes.BPNI),
                binaryType: StringBinaryType.NullTerminate);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.BPND)))
            {
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DamageMult);
                EnumBinaryTranslation<BodyPart.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 1);
                EnumBinaryTranslation<BodyPart.PartType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Type,
                    length: 1);
                writer.Write(item.HealthPercent);
                EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.ActorValue,
                    length: 1);
                writer.Write(item.ToHitChance);
                writer.Write(item.ExplodableExplosionChance);
                writer.Write(item.ExplodableDebrisCount);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableDebris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableExplosion);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.TrackingMaxAngle);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ExplodableDebrisScale);
                writer.Write(item.SeverableDebrisCount);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableDebris);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableExplosion);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.SeverableDebrisScale);
                P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.GorePositioning);
                P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.GoreRotation);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.SeverableImpactData);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ExplodableImpactData);
                writer.Write(item.SeverableDecalCount);
                writer.Write(item.ExplodableDecalCount);
                writer.Write(item.Unknown);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.LimbReplacementScale);
            }
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.LimbReplacementModel,
                header: translationParams.ConvertToCustom(RecordTypes.NAM1),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.GoreTargetBone,
                header: translationParams.ConvertToCustom(RecordTypes.NAM4),
                binaryType: StringBinaryType.NullTerminate);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.TextureFilesHashes,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5));
        }

        public void Write(
            MutagenWriter writer,
            IBodyPartGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IBodyPartGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class BodyPartBinaryCreateTranslation
    {
        public static readonly BodyPartBinaryCreateTranslation Instance = new BodyPartBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            IBodyPart item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.BPTN:
                {
                    if (lastParsed.ShortCircuit((int)BodyPart_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.Name;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PoseMatching = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.PoseMatching;
                }
                case RecordTypeInts.BPNN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PartNode = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.PartNode;
                }
                case RecordTypeInts.BPNT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VatsTarget = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.VatsTarget;
                }
                case RecordTypeInts.BPNI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.IkStartNode = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.IkStartNode;
                }
                case RecordTypeInts.BPND:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.DamageMult = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 1) return null;
                    item.Flags = EnumBinaryTranslation<BodyPart.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.Type = EnumBinaryTranslation<BodyPart.PartType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.HealthPercent = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.ActorValue = EnumBinaryTranslation<ActorValue, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 1);
                    if (dataFrame.Remaining < 1) return null;
                    item.ToHitChance = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.ExplodableExplosionChance = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 2) return null;
                    item.ExplodableDebrisCount = dataFrame.ReadUInt16();
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.TrackingMaxAngle = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableDebrisScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableDebrisCount = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableDebris.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableExplosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableDebrisScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 12) return null;
                    item.GorePositioning = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 12) return null;
                    item.GoreRotation = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.SeverableImpactData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ExplodableImpactData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 1) return null;
                    item.SeverableDecalCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.ExplodableDecalCount = dataFrame.ReadUInt8();
                    if (dataFrame.Remaining < 2) return null;
                    item.Unknown = dataFrame.ReadUInt16();
                    if (dataFrame.Remaining < 4) return null;
                    item.LimbReplacementScale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)BodyPart_FieldIndex.LimbReplacementScale;
                }
                case RecordTypeInts.NAM1:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LimbReplacementModel = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.LimbReplacementModel;
                }
                case RecordTypeInts.NAM4:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GoreTargetBone = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)BodyPart_FieldIndex.GoreTargetBone;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureFilesHashes = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)BodyPart_FieldIndex.TextureFilesHashes;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class BodyPartBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this IBodyPartGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BodyPartBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class BodyPartBinaryOverlay :
        PluginBinaryOverlay,
        IBodyPartGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => BodyPart_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => BodyPart_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => BodyPartCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => BodyPartSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object IBodyPartGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? IBodyPartGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object IBodyPartGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => BodyPartCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => BodyPartBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((BodyPartBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : TranslatedString.Empty;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        #endregion
        #endregion
        #region PoseMatching
        private int? _PoseMatchingLocation;
        public String? PoseMatching => _PoseMatchingLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PoseMatchingLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region PartNode
        private int? _PartNodeLocation;
        public String PartNode => _PartNodeLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PartNodeLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region VatsTarget
        private int? _VatsTargetLocation;
        public String VatsTarget => _VatsTargetLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _VatsTargetLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region IkStartNode
        private int? _IkStartNodeLocation;
        public String IkStartNode => _IkStartNodeLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IkStartNodeLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        private RangeInt32? _BPNDLocation;
        #region DamageMult
        private int _DamageMultLocation => _BPNDLocation!.Value.Min;
        private bool _DamageMult_IsSet => _BPNDLocation.HasValue;
        public Single DamageMult => _DamageMult_IsSet ? _recordData.Slice(_DamageMultLocation, 4).Float() : default(Single);
        #endregion
        #region Flags
        private int _FlagsLocation => _BPNDLocation!.Value.Min + 0x4;
        private bool _Flags_IsSet => _BPNDLocation.HasValue;
        public BodyPart.Flag Flags => _Flags_IsSet ? (BodyPart.Flag)_recordData.Span.Slice(_FlagsLocation, 0x1)[0] : default;
        #endregion
        #region Type
        private int _TypeLocation => _BPNDLocation!.Value.Min + 0x5;
        private bool _Type_IsSet => _BPNDLocation.HasValue;
        public BodyPart.PartType Type => _Type_IsSet ? (BodyPart.PartType)_recordData.Span.Slice(_TypeLocation, 0x1)[0] : default;
        #endregion
        #region HealthPercent
        private int _HealthPercentLocation => _BPNDLocation!.Value.Min + 0x6;
        private bool _HealthPercent_IsSet => _BPNDLocation.HasValue;
        public Byte HealthPercent => _HealthPercent_IsSet ? _recordData.Span[_HealthPercentLocation] : default;
        #endregion
        #region ActorValue
        private int _ActorValueLocation => _BPNDLocation!.Value.Min + 0x7;
        private bool _ActorValue_IsSet => _BPNDLocation.HasValue;
        public ActorValue ActorValue => _ActorValue_IsSet ? (ActorValue)_recordData.Span.Slice(_ActorValueLocation, 0x1)[0] : default;
        #endregion
        #region ToHitChance
        private int _ToHitChanceLocation => _BPNDLocation!.Value.Min + 0x8;
        private bool _ToHitChance_IsSet => _BPNDLocation.HasValue;
        public Byte ToHitChance => _ToHitChance_IsSet ? _recordData.Span[_ToHitChanceLocation] : default;
        #endregion
        #region ExplodableExplosionChance
        private int _ExplodableExplosionChanceLocation => _BPNDLocation!.Value.Min + 0x9;
        private bool _ExplodableExplosionChance_IsSet => _BPNDLocation.HasValue;
        public Byte ExplodableExplosionChance => _ExplodableExplosionChance_IsSet ? _recordData.Span[_ExplodableExplosionChanceLocation] : default;
        #endregion
        #region ExplodableDebrisCount
        private int _ExplodableDebrisCountLocation => _BPNDLocation!.Value.Min + 0xA;
        private bool _ExplodableDebrisCount_IsSet => _BPNDLocation.HasValue;
        public UInt16 ExplodableDebrisCount => _ExplodableDebrisCount_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_ExplodableDebrisCountLocation, 2)) : default(UInt16);
        #endregion
        #region ExplodableDebris
        private int _ExplodableDebrisLocation => _BPNDLocation!.Value.Min + 0xC;
        private bool _ExplodableDebris_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> ExplodableDebris => _ExplodableDebris_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_ExplodableDebrisLocation, 0x4), isSet: _ExplodableDebris_IsSet) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region ExplodableExplosion
        private int _ExplodableExplosionLocation => _BPNDLocation!.Value.Min + 0x10;
        private bool _ExplodableExplosion_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> ExplodableExplosion => _ExplodableExplosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_ExplodableExplosionLocation, 0x4), isSet: _ExplodableExplosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region TrackingMaxAngle
        private int _TrackingMaxAngleLocation => _BPNDLocation!.Value.Min + 0x14;
        private bool _TrackingMaxAngle_IsSet => _BPNDLocation.HasValue;
        public Single TrackingMaxAngle => _TrackingMaxAngle_IsSet ? _recordData.Slice(_TrackingMaxAngleLocation, 4).Float() : default(Single);
        #endregion
        #region ExplodableDebrisScale
        private int _ExplodableDebrisScaleLocation => _BPNDLocation!.Value.Min + 0x18;
        private bool _ExplodableDebrisScale_IsSet => _BPNDLocation.HasValue;
        public Single ExplodableDebrisScale => _ExplodableDebrisScale_IsSet ? _recordData.Slice(_ExplodableDebrisScaleLocation, 4).Float() : default(Single);
        #endregion
        #region SeverableDebrisCount
        private int _SeverableDebrisCountLocation => _BPNDLocation!.Value.Min + 0x1C;
        private bool _SeverableDebrisCount_IsSet => _BPNDLocation.HasValue;
        public Int32 SeverableDebrisCount => _SeverableDebrisCount_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_SeverableDebrisCountLocation, 4)) : default(Int32);
        #endregion
        #region SeverableDebris
        private int _SeverableDebrisLocation => _BPNDLocation!.Value.Min + 0x20;
        private bool _SeverableDebris_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IDebrisGetter> SeverableDebris => _SeverableDebris_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IDebrisGetter>(_package, _recordData.Span.Slice(_SeverableDebrisLocation, 0x4), isSet: _SeverableDebris_IsSet) : FormLink<IDebrisGetter>.Null;
        #endregion
        #region SeverableExplosion
        private int _SeverableExplosionLocation => _BPNDLocation!.Value.Min + 0x24;
        private bool _SeverableExplosion_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> SeverableExplosion => _SeverableExplosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_SeverableExplosionLocation, 0x4), isSet: _SeverableExplosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region SeverableDebrisScale
        private int _SeverableDebrisScaleLocation => _BPNDLocation!.Value.Min + 0x28;
        private bool _SeverableDebrisScale_IsSet => _BPNDLocation.HasValue;
        public Single SeverableDebrisScale => _SeverableDebrisScale_IsSet ? _recordData.Slice(_SeverableDebrisScaleLocation, 4).Float() : default(Single);
        #endregion
        #region GorePositioning
        private int _GorePositioningLocation => _BPNDLocation!.Value.Min + 0x2C;
        private bool _GorePositioning_IsSet => _BPNDLocation.HasValue;
        public P3Float GorePositioning => _GorePositioning_IsSet ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_recordData.Slice(_GorePositioningLocation, 12)) : default(P3Float);
        #endregion
        #region GoreRotation
        private int _GoreRotationLocation => _BPNDLocation!.Value.Min + 0x38;
        private bool _GoreRotation_IsSet => _BPNDLocation.HasValue;
        public P3Float GoreRotation => _GoreRotation_IsSet ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(_recordData.Slice(_GoreRotationLocation, 12)) : default(P3Float);
        #endregion
        #region SeverableImpactData
        private int _SeverableImpactDataLocation => _BPNDLocation!.Value.Min + 0x44;
        private bool _SeverableImpactData_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> SeverableImpactData => _SeverableImpactData_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_SeverableImpactDataLocation, 0x4), isSet: _SeverableImpactData_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region ExplodableImpactData
        private int _ExplodableImpactDataLocation => _BPNDLocation!.Value.Min + 0x48;
        private bool _ExplodableImpactData_IsSet => _BPNDLocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> ExplodableImpactData => _ExplodableImpactData_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_ExplodableImpactDataLocation, 0x4), isSet: _ExplodableImpactData_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region SeverableDecalCount
        private int _SeverableDecalCountLocation => _BPNDLocation!.Value.Min + 0x4C;
        private bool _SeverableDecalCount_IsSet => _BPNDLocation.HasValue;
        public Byte SeverableDecalCount => _SeverableDecalCount_IsSet ? _recordData.Span[_SeverableDecalCountLocation] : default;
        #endregion
        #region ExplodableDecalCount
        private int _ExplodableDecalCountLocation => _BPNDLocation!.Value.Min + 0x4D;
        private bool _ExplodableDecalCount_IsSet => _BPNDLocation.HasValue;
        public Byte ExplodableDecalCount => _ExplodableDecalCount_IsSet ? _recordData.Span[_ExplodableDecalCountLocation] : default;
        #endregion
        #region Unknown
        private int _UnknownLocation => _BPNDLocation!.Value.Min + 0x4E;
        private bool _Unknown_IsSet => _BPNDLocation.HasValue;
        public UInt16 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadUInt16LittleEndian(_recordData.Slice(_UnknownLocation, 2)) : default(UInt16);
        #endregion
        #region LimbReplacementScale
        private int _LimbReplacementScaleLocation => _BPNDLocation!.Value.Min + 0x50;
        private bool _LimbReplacementScale_IsSet => _BPNDLocation.HasValue;
        public Single LimbReplacementScale => _LimbReplacementScale_IsSet ? _recordData.Slice(_LimbReplacementScaleLocation, 4).Float() : default(Single);
        #endregion
        #region LimbReplacementModel
        private int? _LimbReplacementModelLocation;
        public String LimbReplacementModel => _LimbReplacementModelLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LimbReplacementModelLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region GoreTargetBone
        private int? _GoreTargetBoneLocation;
        public String GoreTargetBone => _GoreTargetBoneLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GoreTargetBoneLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : string.Empty;
        #endregion
        #region TextureFilesHashes
        private int? _TextureFilesHashesLocation;
        public ReadOnlyMemorySlice<Byte>? TextureFilesHashes => _TextureFilesHashesLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextureFilesHashesLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected BodyPartBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IBodyPartGetter BodyPartFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new BodyPartBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IBodyPartGetter BodyPartFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return BodyPartFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.BPTN:
                {
                    if (lastParsed.ShortCircuit((int)BodyPart_FieldIndex.Name, translationParams)) return ParseResult.Stop;
                    _NameLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.Name;
                }
                case RecordTypeInts.PNAM:
                {
                    _PoseMatchingLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.PoseMatching;
                }
                case RecordTypeInts.BPNN:
                {
                    _PartNodeLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.PartNode;
                }
                case RecordTypeInts.BPNT:
                {
                    _VatsTargetLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.VatsTarget;
                }
                case RecordTypeInts.BPNI:
                {
                    _IkStartNodeLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.IkStartNode;
                }
                case RecordTypeInts.BPND:
                {
                    _BPNDLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)BodyPart_FieldIndex.LimbReplacementScale;
                }
                case RecordTypeInts.NAM1:
                {
                    _LimbReplacementModelLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.LimbReplacementModel;
                }
                case RecordTypeInts.NAM4:
                {
                    _GoreTargetBoneLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.GoreTargetBone;
                }
                case RecordTypeInts.NAM5:
                {
                    _TextureFilesHashesLocation = (stream.Position - offset);
                    return (int)BodyPart_FieldIndex.TextureFilesHashes;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            BodyPartMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not IBodyPartGetter rhs) return false;
            return ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IBodyPartGetter? obj)
        {
            return ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((BodyPartCommon)((IBodyPartGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

