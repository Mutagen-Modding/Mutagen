/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class DialogResponses :
        SkyrimMajorRecord,
        IDialogResponsesInternal,
        IEquatable<IDialogResponsesGetter>,
        ILoquiObjectSetter<DialogResponses>
    {
        #region Ctor
        protected DialogResponses()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogResponsesAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        public DialogResponsesAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogResponsesAdapterGetter? IDialogResponsesGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region DATA
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DATA;
        public MemorySlice<Byte>? DATA
        {
            get => this._DATA;
            set => this._DATA = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IDialogResponsesGetter.DATA => this.DATA;
        #endregion
        #region Flags
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private DialogResponseFlags? _Flags;
        public DialogResponseFlags? Flags
        {
            get => _Flags;
            set => _Flags = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDialogResponseFlagsGetter? IDialogResponsesGetter.Flags => this.Flags;
        #endregion
        #region Topic
        private readonly IFormLinkNullable<IDialogTopicGetter> _Topic = new FormLinkNullable<IDialogTopicGetter>();
        public IFormLinkNullable<IDialogTopicGetter> Topic
        {
            get => _Topic;
            set => _Topic.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogTopicGetter> IDialogResponsesGetter.Topic => this.Topic;
        #endregion
        #region PreviousDialog
        private readonly IFormLinkNullable<IDialogResponsesGetter> _PreviousDialog = new FormLinkNullable<IDialogResponsesGetter>();
        public IFormLinkNullable<IDialogResponsesGetter> PreviousDialog
        {
            get => _PreviousDialog;
            set => _PreviousDialog.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogResponsesGetter> IDialogResponsesGetter.PreviousDialog => this.PreviousDialog;
        #endregion
        #region FavorLevel
        public FavorLevel? FavorLevel { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        FavorLevel? IDialogResponsesGetter.FavorLevel => this.FavorLevel;
        #endregion
        #region LinkTo
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IDialogGetter>> _LinkTo = new ExtendedList<IFormLinkGetter<IDialogGetter>>();
        public ExtendedList<IFormLinkGetter<IDialogGetter>> LinkTo
        {
            get => this._LinkTo;
            init => this._LinkTo = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IDialogGetter>> IDialogResponsesGetter.LinkTo => _LinkTo;
        #endregion

        #endregion
        #region ResponseData
        private readonly IFormLinkNullable<IDialogResponsesGetter> _ResponseData = new FormLinkNullable<IDialogResponsesGetter>();
        public IFormLinkNullable<IDialogResponsesGetter> ResponseData
        {
            get => _ResponseData;
            set => _ResponseData.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogResponsesGetter> IDialogResponsesGetter.ResponseData => this.ResponseData;
        #endregion
        #region Responses
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponse> _Responses = new ExtendedList<DialogResponse>();
        public ExtendedList<DialogResponse> Responses
        {
            get => this._Responses;
            init => this._Responses = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponseGetter> IDialogResponsesGetter.Responses => _Responses;
        #endregion

        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> IDialogResponsesGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region UnknownData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<DialogResponsesUnknownData> _UnknownData = new ExtendedList<DialogResponsesUnknownData>();
        public ExtendedList<DialogResponsesUnknownData> UnknownData
        {
            get => this._UnknownData;
            init => this._UnknownData = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IDialogResponsesUnknownDataGetter> IDialogResponsesGetter.UnknownData => _UnknownData;
        #endregion

        #endregion
        #region Prompt
        public TranslatedString? Prompt { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IDialogResponsesGetter.Prompt => this.Prompt;
        #endregion
        #region Speaker
        private readonly IFormLinkNullable<INpcGetter> _Speaker = new FormLinkNullable<INpcGetter>();
        public IFormLinkNullable<INpcGetter> Speaker
        {
            get => _Speaker;
            set => _Speaker.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<INpcGetter> IDialogResponsesGetter.Speaker => this.Speaker;
        #endregion
        #region WalkAwayTopic
        private readonly IFormLinkNullable<IDialogTopicGetter> _WalkAwayTopic = new FormLinkNullable<IDialogTopicGetter>();
        public IFormLinkNullable<IDialogTopicGetter> WalkAwayTopic
        {
            get => _WalkAwayTopic;
            set => _WalkAwayTopic.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IDialogTopicGetter> IDialogResponsesGetter.WalkAwayTopic => this.WalkAwayTopic;
        #endregion
        #region AudioOutputOverride
        private readonly IFormLinkNullable<ISoundOutputModelGetter> _AudioOutputOverride = new FormLinkNullable<ISoundOutputModelGetter>();
        public IFormLinkNullable<ISoundOutputModelGetter> AudioOutputOverride
        {
            get => _AudioOutputOverride;
            set => _AudioOutputOverride.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundOutputModelGetter> IDialogResponsesGetter.AudioOutputOverride => this.AudioOutputOverride;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponsesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, DialogResponsesAdapter.Mask<TItem>?>(initialValue, new DialogResponsesAdapter.Mask<TItem>(initialValue));
                this.DATA = initialValue;
                this.Flags = new MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>(initialValue, new DialogResponseFlags.Mask<TItem>(initialValue));
                this.Topic = initialValue;
                this.PreviousDialog = initialValue;
                this.FavorLevel = initialValue;
                this.LinkTo = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.ResponseData = initialValue;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.UnknownData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>());
                this.Prompt = initialValue;
                this.Speaker = initialValue;
                this.WalkAwayTopic = initialValue;
                this.AudioOutputOverride = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem DATA,
                TItem Flags,
                TItem Topic,
                TItem PreviousDialog,
                TItem FavorLevel,
                TItem LinkTo,
                TItem ResponseData,
                TItem Responses,
                TItem Conditions,
                TItem UnknownData,
                TItem Prompt,
                TItem Speaker,
                TItem WalkAwayTopic,
                TItem AudioOutputOverride)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, DialogResponsesAdapter.Mask<TItem>?>(VirtualMachineAdapter, new DialogResponsesAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.DATA = DATA;
                this.Flags = new MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>(Flags, new DialogResponseFlags.Mask<TItem>(Flags));
                this.Topic = Topic;
                this.PreviousDialog = PreviousDialog;
                this.FavorLevel = FavorLevel;
                this.LinkTo = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LinkTo, Enumerable.Empty<(int Index, TItem Value)>());
                this.ResponseData = ResponseData;
                this.Responses = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>(Responses, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>());
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.UnknownData = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>?>(UnknownData, Enumerable.Empty<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>());
                this.Prompt = Prompt;
                this.Speaker = Speaker;
                this.WalkAwayTopic = WalkAwayTopic;
                this.AudioOutputOverride = AudioOutputOverride;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, DialogResponsesAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem DATA;
            public MaskItem<TItem, DialogResponseFlags.Mask<TItem>?>? Flags { get; set; }
            public TItem Topic;
            public TItem PreviousDialog;
            public TItem FavorLevel;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LinkTo;
            public TItem ResponseData;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponse.Mask<TItem>?>>?>? Responses;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, DialogResponsesUnknownData.Mask<TItem>?>>?>? UnknownData;
            public TItem Prompt;
            public TItem Speaker;
            public TItem WalkAwayTopic;
            public TItem AudioOutputOverride;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.DATA, rhs.DATA)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.Topic, rhs.Topic)) return false;
                if (!object.Equals(this.PreviousDialog, rhs.PreviousDialog)) return false;
                if (!object.Equals(this.FavorLevel, rhs.FavorLevel)) return false;
                if (!object.Equals(this.LinkTo, rhs.LinkTo)) return false;
                if (!object.Equals(this.ResponseData, rhs.ResponseData)) return false;
                if (!object.Equals(this.Responses, rhs.Responses)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.UnknownData, rhs.UnknownData)) return false;
                if (!object.Equals(this.Prompt, rhs.Prompt)) return false;
                if (!object.Equals(this.Speaker, rhs.Speaker)) return false;
                if (!object.Equals(this.WalkAwayTopic, rhs.WalkAwayTopic)) return false;
                if (!object.Equals(this.AudioOutputOverride, rhs.AudioOutputOverride)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.DATA);
                hash.Add(this.Flags);
                hash.Add(this.Topic);
                hash.Add(this.PreviousDialog);
                hash.Add(this.FavorLevel);
                hash.Add(this.LinkTo);
                hash.Add(this.ResponseData);
                hash.Add(this.Responses);
                hash.Add(this.Conditions);
                hash.Add(this.UnknownData);
                hash.Add(this.Prompt);
                hash.Add(this.Speaker);
                hash.Add(this.WalkAwayTopic);
                hash.Add(this.AudioOutputOverride);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.DATA)) return false;
                if (Flags != null)
                {
                    if (!eval(this.Flags.Overall)) return false;
                    if (this.Flags.Specific != null && !this.Flags.Specific.All(eval)) return false;
                }
                if (!eval(this.Topic)) return false;
                if (!eval(this.PreviousDialog)) return false;
                if (!eval(this.FavorLevel)) return false;
                if (this.LinkTo != null)
                {
                    if (!eval(this.LinkTo.Overall)) return false;
                    if (this.LinkTo.Specific != null)
                    {
                        foreach (var item in this.LinkTo.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.ResponseData)) return false;
                if (this.Responses != null)
                {
                    if (!eval(this.Responses.Overall)) return false;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnknownData != null)
                {
                    if (!eval(this.UnknownData.Overall)) return false;
                    if (this.UnknownData.Specific != null)
                    {
                        foreach (var item in this.UnknownData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.Prompt)) return false;
                if (!eval(this.Speaker)) return false;
                if (!eval(this.WalkAwayTopic)) return false;
                if (!eval(this.AudioOutputOverride)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.DATA)) return true;
                if (Flags != null)
                {
                    if (eval(this.Flags.Overall)) return true;
                    if (this.Flags.Specific != null && this.Flags.Specific.Any(eval)) return true;
                }
                if (eval(this.Topic)) return true;
                if (eval(this.PreviousDialog)) return true;
                if (eval(this.FavorLevel)) return true;
                if (this.LinkTo != null)
                {
                    if (eval(this.LinkTo.Overall)) return true;
                    if (this.LinkTo.Specific != null)
                    {
                        foreach (var item in this.LinkTo.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.ResponseData)) return true;
                if (this.Responses != null)
                {
                    if (eval(this.Responses.Overall)) return true;
                    if (this.Responses.Specific != null)
                    {
                        foreach (var item in this.Responses.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.UnknownData != null)
                {
                    if (eval(this.UnknownData.Overall)) return true;
                    if (this.UnknownData.Specific != null)
                    {
                        foreach (var item in this.UnknownData.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.Prompt)) return true;
                if (eval(this.Speaker)) return true;
                if (eval(this.WalkAwayTopic)) return true;
                if (eval(this.AudioOutputOverride)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DialogResponses.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, DialogResponsesAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.DATA = eval(this.DATA);
                obj.Flags = this.Flags == null ? null : new MaskItem<R, DialogResponseFlags.Mask<R>?>(eval(this.Flags.Overall), this.Flags.Specific?.Translate(eval));
                obj.Topic = eval(this.Topic);
                obj.PreviousDialog = eval(this.PreviousDialog);
                obj.FavorLevel = eval(this.FavorLevel);
                if (LinkTo != null)
                {
                    obj.LinkTo = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LinkTo.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LinkTo.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LinkTo.Specific = l;
                        foreach (var item in LinkTo.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.ResponseData = eval(this.ResponseData);
                if (Responses != null)
                {
                    obj.Responses = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponse.Mask<R>?>>?>(eval(this.Responses.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponse.Mask<R>?>>());
                    if (Responses.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponse.Mask<R>?>>();
                        obj.Responses.Specific = l;
                        foreach (var item in Responses.Specific)
                        {
                            MaskItemIndexed<R, DialogResponse.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, DialogResponse.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (UnknownData != null)
                {
                    obj.UnknownData = new MaskItem<R, IEnumerable<MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>>?>(eval(this.UnknownData.Overall), Enumerable.Empty<MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>>());
                    if (UnknownData.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>>();
                        obj.UnknownData.Specific = l;
                        foreach (var item in UnknownData.Specific)
                        {
                            MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, DialogResponsesUnknownData.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Prompt = eval(this.Prompt);
                obj.Speaker = eval(this.Speaker);
                obj.WalkAwayTopic = eval(this.WalkAwayTopic);
                obj.AudioOutputOverride = eval(this.AudioOutputOverride);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DialogResponses.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DialogResponses.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DialogResponses.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.DATA ?? true)
                    {
                        sb.AppendItem(DATA, "DATA");
                    }
                    if (printMask?.Flags?.Overall ?? true)
                    {
                        Flags?.Print(sb);
                    }
                    if (printMask?.Topic ?? true)
                    {
                        sb.AppendItem(Topic, "Topic");
                    }
                    if (printMask?.PreviousDialog ?? true)
                    {
                        sb.AppendItem(PreviousDialog, "PreviousDialog");
                    }
                    if (printMask?.FavorLevel ?? true)
                    {
                        sb.AppendItem(FavorLevel, "FavorLevel");
                    }
                    if ((printMask?.LinkTo?.Overall ?? true)
                        && LinkTo is {} LinkToItem)
                    {
                        sb.AppendLine("LinkTo =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LinkToItem.Overall);
                            if (LinkToItem.Specific != null)
                            {
                                foreach (var subItem in LinkToItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ResponseData ?? true)
                    {
                        sb.AppendItem(ResponseData, "ResponseData");
                    }
                    if ((printMask?.Responses?.Overall ?? true)
                        && Responses is {} ResponsesItem)
                    {
                        sb.AppendLine("Responses =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ResponsesItem.Overall);
                            if (ResponsesItem.Specific != null)
                            {
                                foreach (var subItem in ResponsesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.UnknownData?.Overall ?? true)
                        && UnknownData is {} UnknownDataItem)
                    {
                        sb.AppendLine("UnknownData =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(UnknownDataItem.Overall);
                            if (UnknownDataItem.Specific != null)
                            {
                                foreach (var subItem in UnknownDataItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Prompt ?? true)
                    {
                        sb.AppendItem(Prompt, "Prompt");
                    }
                    if (printMask?.Speaker ?? true)
                    {
                        sb.AppendItem(Speaker, "Speaker");
                    }
                    if (printMask?.WalkAwayTopic ?? true)
                    {
                        sb.AppendItem(WalkAwayTopic, "WalkAwayTopic");
                    }
                    if (printMask?.AudioOutputOverride ?? true)
                    {
                        sb.AppendItem(AudioOutputOverride, "AudioOutputOverride");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, DialogResponsesAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? DATA;
            public MaskItem<Exception?, DialogResponseFlags.ErrorMask?>? Flags;
            public Exception? Topic;
            public Exception? PreviousDialog;
            public Exception? FavorLevel;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LinkTo;
            public Exception? ResponseData;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>? Responses;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>? UnknownData;
            public Exception? Prompt;
            public Exception? Speaker;
            public Exception? WalkAwayTopic;
            public Exception? AudioOutputOverride;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case DialogResponses_FieldIndex.DATA:
                        return DATA;
                    case DialogResponses_FieldIndex.Flags:
                        return Flags;
                    case DialogResponses_FieldIndex.Topic:
                        return Topic;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        return PreviousDialog;
                    case DialogResponses_FieldIndex.FavorLevel:
                        return FavorLevel;
                    case DialogResponses_FieldIndex.LinkTo:
                        return LinkTo;
                    case DialogResponses_FieldIndex.ResponseData:
                        return ResponseData;
                    case DialogResponses_FieldIndex.Responses:
                        return Responses;
                    case DialogResponses_FieldIndex.Conditions:
                        return Conditions;
                    case DialogResponses_FieldIndex.UnknownData:
                        return UnknownData;
                    case DialogResponses_FieldIndex.Prompt:
                        return Prompt;
                    case DialogResponses_FieldIndex.Speaker:
                        return Speaker;
                    case DialogResponses_FieldIndex.WalkAwayTopic:
                        return WalkAwayTopic;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        return AudioOutputOverride;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, DialogResponsesAdapter.ErrorMask?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.DATA:
                        this.DATA = ex;
                        break;
                    case DialogResponses_FieldIndex.Flags:
                        this.Flags = new MaskItem<Exception?, DialogResponseFlags.ErrorMask?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Topic:
                        this.Topic = ex;
                        break;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        this.PreviousDialog = ex;
                        break;
                    case DialogResponses_FieldIndex.FavorLevel:
                        this.FavorLevel = ex;
                        break;
                    case DialogResponses_FieldIndex.LinkTo:
                        this.LinkTo = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.ResponseData:
                        this.ResponseData = ex;
                        break;
                    case DialogResponses_FieldIndex.Responses:
                        this.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.UnknownData:
                        this.UnknownData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>(ex, null);
                        break;
                    case DialogResponses_FieldIndex.Prompt:
                        this.Prompt = ex;
                        break;
                    case DialogResponses_FieldIndex.Speaker:
                        this.Speaker = ex;
                        break;
                    case DialogResponses_FieldIndex.WalkAwayTopic:
                        this.WalkAwayTopic = ex;
                        break;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        this.AudioOutputOverride = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DialogResponses_FieldIndex enu = (DialogResponses_FieldIndex)index;
                switch (enu)
                {
                    case DialogResponses_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, DialogResponsesAdapter.ErrorMask?>?)obj;
                        break;
                    case DialogResponses_FieldIndex.DATA:
                        this.DATA = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Flags:
                        this.Flags = (MaskItem<Exception?, DialogResponseFlags.ErrorMask?>?)obj;
                        break;
                    case DialogResponses_FieldIndex.Topic:
                        this.Topic = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.PreviousDialog:
                        this.PreviousDialog = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.FavorLevel:
                        this.FavorLevel = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.LinkTo:
                        this.LinkTo = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.ResponseData:
                        this.ResponseData = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Responses:
                        this.Responses = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.UnknownData:
                        this.UnknownData = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>)obj;
                        break;
                    case DialogResponses_FieldIndex.Prompt:
                        this.Prompt = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.Speaker:
                        this.Speaker = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.WalkAwayTopic:
                        this.WalkAwayTopic = (Exception?)obj;
                        break;
                    case DialogResponses_FieldIndex.AudioOutputOverride:
                        this.AudioOutputOverride = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (DATA != null) return true;
                if (Flags != null) return true;
                if (Topic != null) return true;
                if (PreviousDialog != null) return true;
                if (FavorLevel != null) return true;
                if (LinkTo != null) return true;
                if (ResponseData != null) return true;
                if (Responses != null) return true;
                if (Conditions != null) return true;
                if (UnknownData != null) return true;
                if (Prompt != null) return true;
                if (Speaker != null) return true;
                if (WalkAwayTopic != null) return true;
                if (AudioOutputOverride != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                {
                    sb.AppendItem(DATA, "DATA");
                }
                Flags?.Print(sb);
                {
                    sb.AppendItem(Topic, "Topic");
                }
                {
                    sb.AppendItem(PreviousDialog, "PreviousDialog");
                }
                {
                    sb.AppendItem(FavorLevel, "FavorLevel");
                }
                if (LinkTo is {} LinkToItem)
                {
                    sb.AppendLine("LinkTo =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LinkToItem.Overall);
                        if (LinkToItem.Specific != null)
                        {
                            foreach (var subItem in LinkToItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ResponseData, "ResponseData");
                }
                if (Responses is {} ResponsesItem)
                {
                    sb.AppendLine("Responses =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ResponsesItem.Overall);
                        if (ResponsesItem.Specific != null)
                        {
                            foreach (var subItem in ResponsesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (UnknownData is {} UnknownDataItem)
                {
                    sb.AppendLine("UnknownData =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(UnknownDataItem.Overall);
                        if (UnknownDataItem.Specific != null)
                        {
                            foreach (var subItem in UnknownDataItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Prompt, "Prompt");
                }
                {
                    sb.AppendItem(Speaker, "Speaker");
                }
                {
                    sb.AppendItem(WalkAwayTopic, "WalkAwayTopic");
                }
                {
                    sb.AppendItem(AudioOutputOverride, "AudioOutputOverride");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.DATA = this.DATA.Combine(rhs.DATA);
                ret.Flags = this.Flags.Combine(rhs.Flags, (l, r) => l.Combine(r));
                ret.Topic = this.Topic.Combine(rhs.Topic);
                ret.PreviousDialog = this.PreviousDialog.Combine(rhs.PreviousDialog);
                ret.FavorLevel = this.FavorLevel.Combine(rhs.FavorLevel);
                ret.LinkTo = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.LinkTo?.Overall, rhs.LinkTo?.Overall), Noggog.ExceptionExt.Combine(this.LinkTo?.Specific, rhs.LinkTo?.Specific));
                ret.ResponseData = this.ResponseData.Combine(rhs.ResponseData);
                ret.Responses = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponse.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Responses?.Overall, rhs.Responses?.Overall), Noggog.ExceptionExt.Combine(this.Responses?.Specific, rhs.Responses?.Specific));
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.UnknownData = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, DialogResponsesUnknownData.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.UnknownData?.Overall, rhs.UnknownData?.Overall), Noggog.ExceptionExt.Combine(this.UnknownData?.Specific, rhs.UnknownData?.Specific));
                ret.Prompt = this.Prompt.Combine(rhs.Prompt);
                ret.Speaker = this.Speaker.Combine(rhs.Speaker);
                ret.WalkAwayTopic = this.WalkAwayTopic.Combine(rhs.WalkAwayTopic);
                ret.AudioOutputOverride = this.AudioOutputOverride.Combine(rhs.AudioOutputOverride);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public DialogResponsesAdapter.TranslationMask? VirtualMachineAdapter;
            public bool DATA;
            public DialogResponseFlags.TranslationMask? Flags;
            public bool Topic;
            public bool PreviousDialog;
            public bool FavorLevel;
            public bool LinkTo;
            public bool ResponseData;
            public DialogResponse.TranslationMask? Responses;
            public Condition.TranslationMask? Conditions;
            public DialogResponsesUnknownData.TranslationMask? UnknownData;
            public bool Prompt;
            public bool Speaker;
            public bool WalkAwayTopic;
            public bool AudioOutputOverride;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DATA = defaultOn;
                this.Topic = defaultOn;
                this.PreviousDialog = defaultOn;
                this.FavorLevel = defaultOn;
                this.LinkTo = defaultOn;
                this.ResponseData = defaultOn;
                this.Prompt = defaultOn;
                this.Speaker = defaultOn;
                this.WalkAwayTopic = defaultOn;
                this.AudioOutputOverride = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((DATA, null));
                ret.Add((Flags != null ? Flags.OnOverall : DefaultOn, Flags?.GetCrystal()));
                ret.Add((Topic, null));
                ret.Add((PreviousDialog, null));
                ret.Add((FavorLevel, null));
                ret.Add((LinkTo, null));
                ret.Add((ResponseData, null));
                ret.Add((Responses == null ? DefaultOn : !Responses.GetCrystal().CopyNothing, Responses?.GetCrystal()));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((UnknownData == null ? DefaultOn : !UnknownData.GetCrystal().CopyNothing, UnknownData?.GetCrystal()));
                ret.Add((Prompt, null));
                ret.Add((Speaker, null));
                ret.Add((WalkAwayTopic, null));
                ret.Add((AudioOutputOverride, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DialogResponses_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponsesCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DialogResponsesSetterCommon.Instance.RemapLinks(this, mapping);
        public DialogResponses(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private DialogResponses(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal DialogResponses(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public DialogResponses(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public DialogResponses(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<DialogResponses>.ToString(this);
        }

        protected override Type LinkType => typeof(IDialogResponses);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => DialogResponsesCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => DialogResponsesSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => DialogResponsesSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => DialogResponsesSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDialogResponsesGetter rhs) return false;
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponsesGetter? obj)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogResponsesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponsesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static DialogResponses CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DialogResponses();
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DialogResponses item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DialogResponses GetNew()
        {
            return new DialogResponses();
        }

    }
    #endregion

    #region Interface
    public partial interface IDialogResponses :
        IAssetLinkContainer,
        IDialog,
        IDialogResponsesGetter,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        ILoquiObjectSetter<IDialogResponsesInternal>,
        ISkyrimMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter
        /// </summary>
        new DialogResponsesAdapter? VirtualMachineAdapter { get; set; }
        new MemorySlice<Byte>? DATA { get; set; }
        new DialogResponseFlags? Flags { get; set; }
        new IFormLinkNullable<IDialogTopicGetter> Topic { get; set; }
        new IFormLinkNullable<IDialogResponsesGetter> PreviousDialog { get; set; }
        new FavorLevel? FavorLevel { get; set; }
        new ExtendedList<IFormLinkGetter<IDialogGetter>> LinkTo { get; }
        new IFormLinkNullable<IDialogResponsesGetter> ResponseData { get; set; }
        new ExtendedList<DialogResponse> Responses { get; }
        new ExtendedList<Condition> Conditions { get; }
        new ExtendedList<DialogResponsesUnknownData> UnknownData { get; }
        new TranslatedString? Prompt { get; set; }
        new IFormLinkNullable<INpcGetter> Speaker { get; set; }
        new IFormLinkNullable<IDialogTopicGetter> WalkAwayTopic { get; set; }
        new IFormLinkNullable<ISoundOutputModelGetter> AudioOutputOverride { get; set; }
        #region Mutagen
        new DialogResponses.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IDialogResponsesInternal :
        ISkyrimMajorRecordInternal,
        IDialogResponses,
        IDialogResponsesGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.INFO)]
    public partial interface IDialogResponsesGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IDialogGetter,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        ILoquiObject<IDialogResponsesGetter>,
        IMapsToGetter<IDialogResponsesGetter>
    {
        static new ILoquiRegistration StaticRegistration => DialogResponses_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter
        /// </summary>
        IDialogResponsesAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        ReadOnlyMemorySlice<Byte>? DATA { get; }
        IDialogResponseFlagsGetter? Flags { get; }
        IFormLinkNullableGetter<IDialogTopicGetter> Topic { get; }
        IFormLinkNullableGetter<IDialogResponsesGetter> PreviousDialog { get; }
        FavorLevel? FavorLevel { get; }
        IReadOnlyList<IFormLinkGetter<IDialogGetter>> LinkTo { get; }
        IFormLinkNullableGetter<IDialogResponsesGetter> ResponseData { get; }
        IReadOnlyList<IDialogResponseGetter> Responses { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        IReadOnlyList<IDialogResponsesUnknownDataGetter> UnknownData { get; }
        ITranslatedStringGetter? Prompt { get; }
        IFormLinkNullableGetter<INpcGetter> Speaker { get; }
        IFormLinkNullableGetter<IDialogTopicGetter> WalkAwayTopic { get; }
        IFormLinkNullableGetter<ISoundOutputModelGetter> AudioOutputOverride { get; }

        #region Mutagen
        DialogResponses.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class DialogResponsesMixIn
    {
        public static void Clear(this IDialogResponsesInternal item)
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DialogResponses.Mask<bool> GetEqualsMask(
            this IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDialogResponsesGetter item,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDialogResponsesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            DialogResponses.TranslationMask? equalsMask = null)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDialogResponsesInternal lhs,
            IDialogResponsesGetter rhs,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DialogResponses.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDialogResponsesInternal lhs,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DialogResponses DeepCopy(
            this IDialogResponsesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static DialogResponses Duplicate(
            this IDialogResponsesGetter item,
            FormKey formKey,
            DialogResponses.TranslationMask? copyMask = null)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static DialogResponses Duplicate(
            this IDialogResponsesGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDialogResponsesInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DialogResponsesSetterCommon)((IDialogResponsesGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum DialogResponses_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        DATA = 8,
        Flags = 9,
        Topic = 10,
        PreviousDialog = 11,
        FavorLevel = 12,
        LinkTo = 13,
        ResponseData = 14,
        Responses = 15,
        Conditions = 16,
        UnknownData = 17,
        Prompt = 18,
        Speaker = 19,
        WalkAwayTopic = 20,
        AudioOutputOverride = 21,
    }
    #endregion

    #region Registration
    internal partial class DialogResponses_Registration : ILoquiRegistration
    {
        public static readonly DialogResponses_Registration Instance = new DialogResponses_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 15;

        public const ushort FieldCount = 22;

        public static readonly Type MaskType = typeof(DialogResponses.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DialogResponses.ErrorMask);

        public static readonly Type ClassType = typeof(DialogResponses);

        public static readonly Type GetterType = typeof(IDialogResponsesGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDialogResponses);

        public static readonly Type? InternalSetterType = typeof(IDialogResponsesInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.DialogResponses";

        public const string Name = "DialogResponses";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.INFO;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.INFO);
            var all = RecordCollection.Factory(
                RecordTypes.INFO,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.DATA,
                RecordTypes.ENAM,
                RecordTypes.TPIC,
                RecordTypes.PNAM,
                RecordTypes.CNAM,
                RecordTypes.TCLT,
                RecordTypes.DNAM,
                RecordTypes.TRDT,
                RecordTypes.NAM1,
                RecordTypes.NAM2,
                RecordTypes.NAM3,
                RecordTypes.SNAM,
                RecordTypes.LNAM,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.SCHR,
                RecordTypes.QNAM,
                RecordTypes.NEXT,
                RecordTypes.RNAM,
                RecordTypes.ANAM,
                RecordTypes.TWAT,
                RecordTypes.ONAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DialogResponsesBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DialogResponsesSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly DialogResponsesSetterCommon Instance = new DialogResponsesSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDialogResponsesInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.DATA = default;
            item.Flags = null;
            item.Topic.Clear();
            item.PreviousDialog.Clear();
            item.FavorLevel = default;
            item.LinkTo.Clear();
            item.ResponseData.Clear();
            item.Responses.Clear();
            item.Conditions.Clear();
            item.UnknownData.Clear();
            item.Prompt = default;
            item.Speaker.Clear();
            item.WalkAwayTopic.Clear();
            item.AudioOutputOverride.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IDialogResponsesInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDialogResponsesInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDialogResponses obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Topic.Relink(mapping);
            obj.PreviousDialog.Relink(mapping);
            obj.LinkTo.RemapLinks(mapping);
            obj.ResponseData.Relink(mapping);
            obj.Responses.RemapLinks(mapping);
            obj.Conditions.RemapLinks(mapping);
            obj.UnknownData.RemapLinks(mapping);
            obj.Speaker.Relink(mapping);
            obj.WalkAwayTopic.Relink(mapping);
            obj.AudioOutputOverride.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IDialogResponses obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IDialogResponses obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.VirtualMachineAdapter?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDialogResponsesInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IDialogResponsesInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: DialogResponsesBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DialogResponsesBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DialogResponses)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DialogResponses)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class DialogResponsesCommon : SkyrimMajorRecordCommon
    {
        public new static readonly DialogResponsesCommon Instance = new DialogResponsesCommon();

        public DialogResponses.Mask<bool> GetEqualsMask(
            IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DialogResponses.Mask<bool>(false);
            ((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDialogResponsesGetter item,
            IDialogResponsesGetter rhs,
            DialogResponses.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DATA = MemorySliceExt.SequenceEqual(item.DATA, rhs.DATA);
            ret.Flags = EqualsMaskHelper.EqualsHelper(
                item.Flags,
                rhs.Flags,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Topic = item.Topic.Equals(rhs.Topic);
            ret.PreviousDialog = item.PreviousDialog.Equals(rhs.PreviousDialog);
            ret.FavorLevel = item.FavorLevel == rhs.FavorLevel;
            ret.LinkTo = item.LinkTo.CollectionEqualsHelper(
                rhs.LinkTo,
                (l, r) => object.Equals(l, r),
                include);
            ret.ResponseData = item.ResponseData.Equals(rhs.ResponseData);
            ret.Responses = item.Responses.CollectionEqualsHelper(
                rhs.Responses,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.UnknownData = item.UnknownData.CollectionEqualsHelper(
                rhs.UnknownData,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Prompt = object.Equals(item.Prompt, rhs.Prompt);
            ret.Speaker = item.Speaker.Equals(rhs.Speaker);
            ret.WalkAwayTopic = item.WalkAwayTopic.Equals(rhs.WalkAwayTopic);
            ret.AudioOutputOverride = item.AudioOutputOverride.Equals(rhs.AudioOutputOverride);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IDialogResponsesGetter item,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDialogResponsesGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DialogResponses.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DialogResponses =>");
            }
            else
            {
                sb.AppendLine($"{name} (DialogResponses) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDialogResponsesGetter item,
            StructuredStringBuilder sb,
            DialogResponses.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if ((printMask?.DATA ?? true)
                && item.DATA is {} DATAItem)
            {
                sb.AppendLine($"DATA => {SpanExt.ToHexString(DATAItem)}");
            }
            if ((printMask?.Flags?.Overall ?? true)
                && item.Flags is {} FlagsItem)
            {
                FlagsItem?.Print(sb, "Flags");
            }
            if (printMask?.Topic ?? true)
            {
                sb.AppendItem(item.Topic.FormKeyNullable, "Topic");
            }
            if (printMask?.PreviousDialog ?? true)
            {
                sb.AppendItem(item.PreviousDialog.FormKeyNullable, "PreviousDialog");
            }
            if ((printMask?.FavorLevel ?? true)
                && item.FavorLevel is {} FavorLevelItem)
            {
                sb.AppendItem(FavorLevelItem, "FavorLevel");
            }
            if (printMask?.LinkTo?.Overall ?? true)
            {
                sb.AppendLine("LinkTo =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.LinkTo)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.ResponseData ?? true)
            {
                sb.AppendItem(item.ResponseData.FormKeyNullable, "ResponseData");
            }
            if (printMask?.Responses?.Overall ?? true)
            {
                sb.AppendLine("Responses =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Responses)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.UnknownData?.Overall ?? true)
            {
                sb.AppendLine("UnknownData =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.UnknownData)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Prompt ?? true)
                && item.Prompt is {} PromptItem)
            {
                sb.AppendItem(PromptItem, "Prompt");
            }
            if (printMask?.Speaker ?? true)
            {
                sb.AppendItem(item.Speaker.FormKeyNullable, "Speaker");
            }
            if (printMask?.WalkAwayTopic ?? true)
            {
                sb.AppendItem(item.WalkAwayTopic.FormKeyNullable, "WalkAwayTopic");
            }
            if (printMask?.AudioOutputOverride ?? true)
            {
                sb.AppendItem(item.AudioOutputOverride.FormKeyNullable, "AudioOutputOverride");
            }
        }
        
        public static DialogResponses_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (DialogResponses_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (DialogResponses_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new DialogResponses_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (DialogResponses_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DialogResponses_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDialogResponsesGetter? lhs,
            IDialogResponsesGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((DialogResponsesAdapterCommon)((IDialogResponsesAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)DialogResponses_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.DATA) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DATA, rhs.DATA)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Flags) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Flags, rhs.Flags, out var lhsFlags, out var rhsFlags, out var isFlagsEqual))
                {
                    if (!((DialogResponseFlagsCommon)((IDialogResponseFlagsGetter)lhsFlags).CommonInstance()!).Equals(lhsFlags, rhsFlags, equalsMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Flags))) return false;
                }
                else if (!isFlagsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Topic) ?? true))
            {
                if (!lhs.Topic.Equals(rhs.Topic)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.PreviousDialog) ?? true))
            {
                if (!lhs.PreviousDialog.Equals(rhs.PreviousDialog)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.FavorLevel) ?? true))
            {
                if (lhs.FavorLevel != rhs.FavorLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.LinkTo) ?? true))
            {
                if (!lhs.LinkTo.SequenceEqualNullable(rhs.LinkTo)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.ResponseData) ?? true))
            {
                if (!lhs.ResponseData.Equals(rhs.ResponseData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Responses) ?? true))
            {
                if (!lhs.Responses.SequenceEqual(rhs.Responses, (l, r) => ((DialogResponseCommon)((IDialogResponseGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Responses)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.UnknownData) ?? true))
            {
                if (!lhs.UnknownData.SequenceEqual(rhs.UnknownData, (l, r) => ((DialogResponsesUnknownDataCommon)((IDialogResponsesUnknownDataGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)DialogResponses_FieldIndex.UnknownData)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Prompt) ?? true))
            {
                if (!object.Equals(lhs.Prompt, rhs.Prompt)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Speaker) ?? true))
            {
                if (!lhs.Speaker.Equals(rhs.Speaker)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.WalkAwayTopic) ?? true))
            {
                if (!lhs.WalkAwayTopic.Equals(rhs.WalkAwayTopic)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.AudioOutputOverride) ?? true))
            {
                if (!lhs.AudioOutputOverride.Equals(rhs.AudioOutputOverride)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDialogResponsesGetter?)lhs,
                rhs: rhs as IDialogResponsesGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDialogResponsesGetter?)lhs,
                rhs: rhs as IDialogResponsesGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IDialogResponsesGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            if (item.DATA is {} DATAItem)
            {
                hash.Add(DATAItem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.Topic);
            hash.Add(item.PreviousDialog);
            if (item.FavorLevel is {} FavorLevelitem)
            {
                hash.Add(FavorLevelitem);
            }
            hash.Add(item.LinkTo);
            hash.Add(item.ResponseData);
            hash.Add(item.Responses);
            hash.Add(item.Conditions);
            hash.Add(item.UnknownData);
            if (item.Prompt is {} Promptitem)
            {
                hash.Add(Promptitem);
            }
            hash.Add(item.Speaker);
            hash.Add(item.WalkAwayTopic);
            hash.Add(item.AudioOutputOverride);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogResponsesGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDialogResponsesGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DialogResponses.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDialogResponsesGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Topic, out var TopicInfo))
            {
                yield return TopicInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PreviousDialog, out var PreviousDialogInfo))
            {
                yield return PreviousDialogInfo;
            }
            foreach (var item in obj.LinkTo)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.ResponseData, out var ResponseDataInfo))
            {
                yield return ResponseDataInfo;
            }
            foreach (var item in obj.Responses.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.UnknownData.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Speaker, out var SpeakerInfo))
            {
                yield return SpeakerInfo;
            }
            if (FormLinkInformation.TryFactory(obj.WalkAwayTopic, out var WalkAwayTopicInfo))
            {
                yield return WalkAwayTopicInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AudioOutputOverride, out var AudioOutputOverrideInfo))
            {
                yield return AudioOutputOverrideInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IDialogResponsesGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public DialogResponses Duplicate(
            IDialogResponsesGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new DialogResponses(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogResponsesGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDialogResponsesGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class DialogResponsesSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly DialogResponsesSetterTranslationCommon Instance = new DialogResponsesSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDialogResponsesInternal item,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDialogResponses item,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponses_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.DATA) ?? true))
            {
                if(rhs.DATA is {} DATArhs)
                {
                    item.DATA = DATArhs.ToArray();
                }
                else
                {
                    item.DATA = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Flags) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Flags);
                try
                {
                    if(rhs.Flags is {} rhsFlags)
                    {
                        item.Flags = rhsFlags.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)DialogResponses_FieldIndex.Flags));
                    }
                    else
                    {
                        item.Flags = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Topic) ?? true))
            {
                item.Topic.SetTo(rhs.Topic.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.PreviousDialog) ?? true))
            {
                item.PreviousDialog.SetTo(rhs.PreviousDialog.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.FavorLevel) ?? true))
            {
                item.FavorLevel = rhs.FavorLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.LinkTo) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.LinkTo);
                try
                {
                    item.LinkTo.SetTo(
                        rhs.LinkTo
                            .Select(b => (IFormLinkGetter<IDialogGetter>)new FormLink<IDialogGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.ResponseData) ?? true))
            {
                item.ResponseData.SetTo(rhs.ResponseData.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Responses) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Responses);
                try
                {
                    item.Responses.SetTo(
                        rhs.Responses
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.UnknownData) ?? true))
            {
                errorMask?.PushIndex((int)DialogResponses_FieldIndex.UnknownData);
                try
                {
                    item.UnknownData.SetTo(
                        rhs.UnknownData
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Prompt) ?? true))
            {
                item.Prompt = rhs.Prompt?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.Speaker) ?? true))
            {
                item.Speaker.SetTo(rhs.Speaker.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.WalkAwayTopic) ?? true))
            {
                item.WalkAwayTopic.SetTo(rhs.WalkAwayTopic.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)DialogResponses_FieldIndex.AudioOutputOverride) ?? true))
            {
                item.AudioOutputOverride.SetTo(rhs.AudioOutputOverride.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDialogResponses item,
            IDialogResponsesGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponsesInternal)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponses)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponsesInternal)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDialogResponses)item,
                rhs: (IDialogResponsesGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            DialogResponses.TranslationMask? copyMask = null)
        {
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            out DialogResponses.ErrorMask errorMask,
            DialogResponses.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DialogResponses.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DialogResponses DeepCopy(
            IDialogResponsesGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DialogResponses ret = (DialogResponses)((DialogResponsesCommon)((IDialogResponsesGetter)item).CommonInstance()!).GetNew();
            ((DialogResponsesSetterTranslationCommon)((IDialogResponsesGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class DialogResponses
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponses_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogResponses_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogResponsesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DialogResponsesSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogResponsesSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class DialogResponsesBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly DialogResponsesBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDialogResponsesGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((DialogResponsesAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DATA,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            if (item.Flags is {} FlagsItem)
            {
                ((DialogResponseFlagsBinaryWriteTranslation)((IBinaryItem)FlagsItem).BinaryWriteTranslator).Write(
                    item: FlagsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Topic,
                header: translationParams.ConvertToCustom(RecordTypes.TPIC));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PreviousDialog,
                header: translationParams.ConvertToCustom(RecordTypes.PNAM));
            EnumBinaryTranslation<FavorLevel, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.FavorLevel,
                length: 1,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogGetter>>.Instance.Write(
                writer: writer,
                items: item.LinkTo,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IDialogGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.TCLT));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ResponseData,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IDialogResponseGetter>.Instance.Write(
                writer: writer,
                items: item.Responses,
                transl: (MutagenWriter subWriter, IDialogResponseGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((DialogResponseBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IDialogResponsesUnknownDataGetter>.Instance.Write(
                writer: writer,
                items: item.UnknownData,
                transl: (MutagenWriter subWriter, IDialogResponsesUnknownDataGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((DialogResponsesUnknownDataBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Prompt,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Speaker,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WalkAwayTopic,
                header: translationParams.ConvertToCustom(RecordTypes.TWAT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AudioOutputOverride,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
        }

        public void Write(
            MutagenWriter writer,
            IDialogResponsesGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.INFO,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDialogResponsesGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DialogResponsesBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly DialogResponsesBinaryCreateTranslation Instance = new DialogResponsesBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.INFO;
        public static ParseResult FillBinaryRecordTypes(
            IDialogResponsesInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.DialogResponsesAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)DialogResponses_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DATA = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)DialogResponses_FieldIndex.DATA;
                }
                case RecordTypeInts.ENAM:
                {
                    item.Flags = Mutagen.Bethesda.Skyrim.DialogResponseFlags.CreateFromBinary(frame: frame);
                    return (int)DialogResponses_FieldIndex.Flags;
                }
                case RecordTypeInts.TPIC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Topic.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.Topic;
                }
                case RecordTypeInts.PNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PreviousDialog.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.PreviousDialog;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FavorLevel = EnumBinaryTranslation<FavorLevel, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)DialogResponses_FieldIndex.FavorLevel;
                }
                case RecordTypeInts.TCLT:
                {
                    item.LinkTo.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IDialogGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.TCLT),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)DialogResponses_FieldIndex.LinkTo;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ResponseData.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.ResponseData;
                }
                case RecordTypeInts.TRDT:
                {
                    item.Responses.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<DialogResponse>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: DialogResponse_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: DialogResponse.TryCreateFromBinary));
                    return (int)DialogResponses_FieldIndex.Responses;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)DialogResponses_FieldIndex.Conditions;
                }
                case RecordTypeInts.SCHR:
                case RecordTypeInts.QNAM:
                case RecordTypeInts.NEXT:
                {
                    item.UnknownData.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<DialogResponsesUnknownData>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: DialogResponsesUnknownData_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: DialogResponsesUnknownData.TryCreateFromBinary));
                    return (int)DialogResponses_FieldIndex.UnknownData;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Prompt = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)DialogResponses_FieldIndex.Prompt;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Speaker.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.Speaker;
                }
                case RecordTypeInts.TWAT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WalkAwayTopic.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.WalkAwayTopic;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AudioOutputOverride.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)DialogResponses_FieldIndex.AudioOutputOverride;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class DialogResponsesBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class DialogResponsesBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IDialogResponsesGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DialogResponses_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DialogResponses_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DialogResponsesCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DialogResponsesSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DialogResponsesCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => DialogResponsesCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DialogResponsesBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DialogResponsesBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IDialogResponses);

        public DialogResponses.MajorFlag MajorFlags => (DialogResponses.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IDialogResponsesAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? DialogResponsesAdapterBinaryOverlay.DialogResponsesAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region DATA
        private int? _DATALocation;
        public ReadOnlyMemorySlice<Byte>? DATA => _DATALocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DATALocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Flags
        private RangeInt32? _FlagsLocation;
        public IDialogResponseFlagsGetter? Flags => _FlagsLocation.HasValue ? DialogResponseFlagsBinaryOverlay.DialogResponseFlagsFactory(_recordData.Slice(_FlagsLocation!.Value.Min), _package) : default;
        #endregion
        #region Topic
        private int? _TopicLocation;
        public IFormLinkNullableGetter<IDialogTopicGetter> Topic => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogTopicGetter>(_package, _recordData, _TopicLocation);
        #endregion
        #region PreviousDialog
        private int? _PreviousDialogLocation;
        public IFormLinkNullableGetter<IDialogResponsesGetter> PreviousDialog => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogResponsesGetter>(_package, _recordData, _PreviousDialogLocation);
        #endregion
        #region FavorLevel
        private int? _FavorLevelLocation;
        public FavorLevel? FavorLevel => _FavorLevelLocation.HasValue ? (FavorLevel)HeaderTranslation.ExtractSubrecordMemory(_recordData, _FavorLevelLocation!.Value, _package.MetaData.Constants)[0] : default(FavorLevel?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IDialogGetter>> LinkTo { get; private set; } = Array.Empty<IFormLinkGetter<IDialogGetter>>();
        #region ResponseData
        private int? _ResponseDataLocation;
        public IFormLinkNullableGetter<IDialogResponsesGetter> ResponseData => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogResponsesGetter>(_package, _recordData, _ResponseDataLocation);
        #endregion
        public IReadOnlyList<IDialogResponseGetter> Responses { get; private set; } = Array.Empty<IDialogResponseGetter>();
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = Array.Empty<IConditionGetter>();
        public IReadOnlyList<IDialogResponsesUnknownDataGetter> UnknownData { get; private set; } = Array.Empty<IDialogResponsesUnknownDataGetter>();
        #region Prompt
        private int? _PromptLocation;
        public ITranslatedStringGetter? Prompt => _PromptLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _PromptLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData) : default(TranslatedString?);
        #endregion
        #region Speaker
        private int? _SpeakerLocation;
        public IFormLinkNullableGetter<INpcGetter> Speaker => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<INpcGetter>(_package, _recordData, _SpeakerLocation);
        #endregion
        #region WalkAwayTopic
        private int? _WalkAwayTopicLocation;
        public IFormLinkNullableGetter<IDialogTopicGetter> WalkAwayTopic => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IDialogTopicGetter>(_package, _recordData, _WalkAwayTopicLocation);
        #endregion
        #region AudioOutputOverride
        private int? _AudioOutputOverrideLocation;
        public IFormLinkNullableGetter<ISoundOutputModelGetter> AudioOutputOverride => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundOutputModelGetter>(_package, _recordData, _AudioOutputOverrideLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DialogResponsesBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDialogResponsesGetter DialogResponsesFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DialogResponsesBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IDialogResponsesGetter DialogResponsesFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DialogResponsesFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)DialogResponses_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.DATA;
                }
                case RecordTypeInts.ENAM:
                {
                    _FlagsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)DialogResponses_FieldIndex.Flags;
                }
                case RecordTypeInts.TPIC:
                {
                    _TopicLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.Topic;
                }
                case RecordTypeInts.PNAM:
                {
                    _PreviousDialogLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.PreviousDialog;
                }
                case RecordTypeInts.CNAM:
                {
                    _FavorLevelLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.FavorLevel;
                }
                case RecordTypeInts.TCLT:
                {
                    this.LinkTo = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IDialogGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IDialogGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.TCLT,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)DialogResponses_FieldIndex.LinkTo;
                }
                case RecordTypeInts.DNAM:
                {
                    _ResponseDataLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.ResponseData;
                }
                case RecordTypeInts.TRDT:
                {
                    this.Responses = this.ParseRepeatedTypelessSubrecord<IDialogResponseGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: DialogResponse_Registration.TriggerSpecs,
                        factory: DialogResponseBinaryOverlay.DialogResponseFactory);
                    return (int)DialogResponses_FieldIndex.Responses;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)DialogResponses_FieldIndex.Conditions;
                }
                case RecordTypeInts.SCHR:
                case RecordTypeInts.QNAM:
                case RecordTypeInts.NEXT:
                {
                    this.UnknownData = this.ParseRepeatedTypelessSubrecord<IDialogResponsesUnknownDataGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: DialogResponsesUnknownData_Registration.TriggerSpecs,
                        factory: DialogResponsesUnknownDataBinaryOverlay.DialogResponsesUnknownDataFactory);
                    return (int)DialogResponses_FieldIndex.UnknownData;
                }
                case RecordTypeInts.RNAM:
                {
                    _PromptLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.Prompt;
                }
                case RecordTypeInts.ANAM:
                {
                    _SpeakerLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.Speaker;
                }
                case RecordTypeInts.TWAT:
                {
                    _WalkAwayTopicLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.WalkAwayTopic;
                }
                case RecordTypeInts.ONAM:
                {
                    _AudioOutputOverrideLocation = (stream.Position - offset);
                    return (int)DialogResponses_FieldIndex.AudioOutputOverride;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DialogResponsesMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<DialogResponses>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDialogResponsesGetter rhs) return false;
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDialogResponsesGetter? obj)
        {
            return ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DialogResponsesCommon)((IDialogResponsesGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

