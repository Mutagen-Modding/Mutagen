/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class PlacedTrap :
        APlacedTrap,
        IEquatable<IPlacedTrapGetter>,
        ILoquiObjectSetter<PlacedTrap>,
        IPlacedTrapInternal
    {
        #region Ctor
        protected PlacedTrap()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Projectile
        private readonly IFormLink<IProjectileGetter> _Projectile = new FormLink<IProjectileGetter>();
        public IFormLink<IProjectileGetter> Projectile
        {
            get => _Projectile;
            set => _Projectile.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IProjectileGetter> IPlacedTrapGetter.Projectile => this.Projectile;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedTrapMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APlacedTrap.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Projectile = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem EncounterZone,
                TItem Owner,
                TItem FactionRank,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem Reflections,
                TItem LinkedReferences,
                TItem ActivateParents,
                TItem EnableParent,
                TItem Emittance,
                TItem MultiBoundReference,
                TItem IgnoredBySandbox,
                TItem LocationRefTypes,
                TItem LocationReference,
                TItem DistantLodData,
                TItem Scale,
                TItem Placement,
                TItem Projectile)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags,
                VirtualMachineAdapter: VirtualMachineAdapter,
                EncounterZone: EncounterZone,
                Owner: Owner,
                FactionRank: FactionRank,
                HeadTrackingWeight: HeadTrackingWeight,
                FavorCost: FavorCost,
                Reflections: Reflections,
                LinkedReferences: LinkedReferences,
                ActivateParents: ActivateParents,
                EnableParent: EnableParent,
                Emittance: Emittance,
                MultiBoundReference: MultiBoundReference,
                IgnoredBySandbox: IgnoredBySandbox,
                LocationRefTypes: LocationRefTypes,
                LocationReference: LocationReference,
                DistantLodData: DistantLodData,
                Scale: Scale,
                Placement: Placement)
            {
                this.Projectile = Projectile;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Projectile;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Projectile, rhs.Projectile)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Projectile);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Projectile)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Projectile)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedTrap.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Projectile = eval(this.Projectile);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedTrap.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedTrap.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedTrap.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Projectile ?? true)
                    {
                        sb.AppendItem(Projectile, "Projectile");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            APlacedTrap.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Projectile;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedTrap_FieldIndex enu = (PlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case PlacedTrap_FieldIndex.Projectile:
                        return Projectile;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedTrap_FieldIndex enu = (PlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case PlacedTrap_FieldIndex.Projectile:
                        this.Projectile = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedTrap_FieldIndex enu = (PlacedTrap_FieldIndex)index;
                switch (enu)
                {
                    case PlacedTrap_FieldIndex.Projectile:
                        this.Projectile = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Projectile != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Projectile, "Projectile");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Projectile = this.Projectile.Combine(rhs.Projectile);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APlacedTrap.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Projectile;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Projectile = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Projectile, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PlacedTrap_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedTrapCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedTrapSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedTrap(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private PlacedTrap(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal PlacedTrap(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public PlacedTrap(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public PlacedTrap(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedTrap>.ToString(this);
        }

        protected override Type LinkType => typeof(IPlacedTrap);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedTrapGetter rhs) return false;
            return ((PlacedTrapCommon)((IPlacedTrapGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedTrapGetter? obj)
        {
            return ((PlacedTrapCommon)((IPlacedTrapGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedTrapCommon)((IPlacedTrapGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedTrapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedTrapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlacedTrap CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedTrap();
            ((PlacedTrapSetterCommon)((IPlacedTrapGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedTrap item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedTrapSetterCommon)((IPlacedTrapGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedTrap GetNew()
        {
            return new PlacedTrap();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedTrap :
        IAPlacedTrapInternal,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        ILoquiObjectSetter<IPlacedTrapInternal>,
        IPlacedTrapGetter,
        IScripted
    {
        new IFormLink<IProjectileGetter> Projectile { get; set; }
    }

    public partial interface IPlacedTrapInternal :
        IAPlacedTrapInternal,
        IPlacedTrap,
        IPlacedTrapGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.PGRE)]
    public partial interface IPlacedTrapGetter :
        IAPlacedTrapGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        ILoquiObject<IPlacedTrapGetter>,
        IMapsToGetter<IPlacedTrapGetter>,
        IScriptedGetter
    {
        static new ILoquiRegistration StaticRegistration => PlacedTrap_Registration.Instance;
        IFormLinkGetter<IProjectileGetter> Projectile { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedTrapMixIn
    {
        public static void Clear(this IPlacedTrapInternal item)
        {
            ((PlacedTrapSetterCommon)((IPlacedTrapGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedTrap.Mask<bool> GetEqualsMask(
            this IPlacedTrapGetter item,
            IPlacedTrapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedTrapCommon)((IPlacedTrapGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedTrapGetter item,
            string? name = null,
            PlacedTrap.Mask<bool>? printMask = null)
        {
            return ((PlacedTrapCommon)((IPlacedTrapGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedTrapGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedTrap.Mask<bool>? printMask = null)
        {
            ((PlacedTrapCommon)((IPlacedTrapGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedTrapGetter item,
            IPlacedTrapGetter rhs,
            PlacedTrap.TranslationMask? equalsMask = null)
        {
            return ((PlacedTrapCommon)((IPlacedTrapGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedTrapInternal lhs,
            IPlacedTrapGetter rhs,
            out PlacedTrap.ErrorMask errorMask,
            PlacedTrap.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedTrapSetterTranslationCommon)((IPlacedTrapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedTrap.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedTrapInternal lhs,
            IPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedTrapSetterTranslationCommon)((IPlacedTrapGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedTrap DeepCopy(
            this IPlacedTrapGetter item,
            PlacedTrap.TranslationMask? copyMask = null)
        {
            return ((PlacedTrapSetterTranslationCommon)((IPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedTrap DeepCopy(
            this IPlacedTrapGetter item,
            out PlacedTrap.ErrorMask errorMask,
            PlacedTrap.TranslationMask? copyMask = null)
        {
            return ((PlacedTrapSetterTranslationCommon)((IPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedTrap DeepCopy(
            this IPlacedTrapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedTrapSetterTranslationCommon)((IPlacedTrapGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedTrap Duplicate(
            this IPlacedTrapGetter item,
            FormKey formKey,
            PlacedTrap.TranslationMask? copyMask = null)
        {
            return ((PlacedTrapCommon)((IPlacedTrapGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static PlacedTrap Duplicate(
            this IPlacedTrapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((PlacedTrapCommon)((IPlacedTrapGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedTrapInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedTrapSetterCommon)((IPlacedTrapGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum PlacedTrap_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        EncounterZone = 8,
        Owner = 9,
        FactionRank = 10,
        HeadTrackingWeight = 11,
        FavorCost = 12,
        Reflections = 13,
        LinkedReferences = 14,
        ActivateParents = 15,
        EnableParent = 16,
        Emittance = 17,
        MultiBoundReference = 18,
        IgnoredBySandbox = 19,
        LocationRefTypes = 20,
        LocationReference = 21,
        DistantLodData = 22,
        Scale = 23,
        Placement = 24,
        Projectile = 25,
    }
    #endregion

    #region Registration
    internal partial class PlacedTrap_Registration : ILoquiRegistration
    {
        public static readonly PlacedTrap_Registration Instance = new PlacedTrap_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(PlacedTrap.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedTrap.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedTrap);

        public static readonly Type GetterType = typeof(IPlacedTrapGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedTrap);

        public static readonly Type? InternalSetterType = typeof(IPlacedTrapInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.PlacedTrap";

        public const string Name = "PlacedTrap";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PGRE;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.PGRE);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedTrapBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedTrapSetterCommon : APlacedTrapSetterCommon
    {
        public new static readonly PlacedTrapSetterCommon Instance = new PlacedTrapSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedTrapInternal item)
        {
            ClearPartial();
            item.Projectile.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAPlacedTrapInternal item)
        {
            Clear(item: (IPlacedTrapInternal)item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IPlacedTrapInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedTrapInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedTrap obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Projectile.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedTrapInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IPlacedTrapInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedTrapBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedTrapBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedTrap)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedTrap)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedTrap)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlacedTrapCommon : APlacedTrapCommon
    {
        public new static readonly PlacedTrapCommon Instance = new PlacedTrapCommon();

        public PlacedTrap.Mask<bool> GetEqualsMask(
            IPlacedTrapGetter item,
            IPlacedTrapGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedTrap.Mask<bool>(false);
            ((PlacedTrapCommon)((IPlacedTrapGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedTrapGetter item,
            IPlacedTrapGetter rhs,
            PlacedTrap.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Projectile = item.Projectile.Equals(rhs.Projectile);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlacedTrapGetter item,
            string? name = null,
            PlacedTrap.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedTrapGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedTrap.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedTrap =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedTrap) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedTrapGetter item,
            StructuredStringBuilder sb,
            PlacedTrap.Mask<bool>? printMask = null)
        {
            APlacedTrapCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Projectile ?? true)
            {
                sb.AppendItem(item.Projectile.FormKey, "Projectile");
            }
        }
        
        public static PlacedTrap_FieldIndex ConvertFieldIndex(APlacedTrap_FieldIndex index)
        {
            switch (index)
            {
                case APlacedTrap_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FormKey:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.VersionControl:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EditorID:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FormVersion:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Version2:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.SkyrimMajorRecordFlags:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EncounterZone:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Owner:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FactionRank:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FavorCost:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Reflections:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LinkedReferences:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.ActivateParents:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EnableParent:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Emittance:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.MultiBoundReference:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LocationRefTypes:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LocationReference:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.DistantLodData:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Scale:
                    return (PlacedTrap_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Placement:
                    return (PlacedTrap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new PlacedTrap_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (PlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (PlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (PlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (PlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (PlacedTrap_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (PlacedTrap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new PlacedTrap_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedTrap_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedTrap_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedTrapGetter? lhs,
            IPlacedTrapGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAPlacedTrapGetter)lhs, (IAPlacedTrapGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlacedTrap_FieldIndex.Projectile) ?? true))
            {
                if (!lhs.Projectile.Equals(rhs.Projectile)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAPlacedTrapGetter? lhs,
            IAPlacedTrapGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedTrapGetter?)lhs,
                rhs: rhs as IPlacedTrapGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedTrapGetter?)lhs,
                rhs: rhs as IPlacedTrapGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedTrapGetter?)lhs,
                rhs: rhs as IPlacedTrapGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlacedTrapGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Projectile);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPlacedTrapGetter item)
        {
            return GetHashCode(item: (IPlacedTrapGetter)item);
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedTrapGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedTrapGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedTrap.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedTrapGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Projectile);
            yield break;
        }
        
        #region Duplicate
        public PlacedTrap Duplicate(
            IPlacedTrapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedTrap(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override APlacedTrap Duplicate(
            IAPlacedTrapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedTrapGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedTrapGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedTrapGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class PlacedTrapSetterTranslationCommon : APlacedTrapSetterTranslationCommon
    {
        public new static readonly PlacedTrapSetterTranslationCommon Instance = new PlacedTrapSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedTrapInternal item,
            IPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedTrap item,
            IPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPlacedTrap)item,
                (IAPlacedTrapGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedTrap_FieldIndex.Projectile) ?? true))
            {
                item.Projectile.SetTo(rhs.Projectile.FormKey);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedTrap item,
            IPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IAPlacedTrapInternal item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedTrapInternal)item,
                rhs: (IPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlacedTrap item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedTrap)item,
                rhs: (IPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedTrapInternal)item,
                rhs: (IPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedTrap)item,
                rhs: (IPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedTrapInternal)item,
                rhs: (IPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedTrap)item,
                rhs: (IPlacedTrapGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedTrap DeepCopy(
            IPlacedTrapGetter item,
            PlacedTrap.TranslationMask? copyMask = null)
        {
            PlacedTrap ret = (PlacedTrap)((PlacedTrapCommon)((IPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ((PlacedTrapSetterTranslationCommon)((IPlacedTrapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedTrap DeepCopy(
            IPlacedTrapGetter item,
            out PlacedTrap.ErrorMask errorMask,
            PlacedTrap.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedTrap ret = (PlacedTrap)((PlacedTrapCommon)((IPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ((PlacedTrapSetterTranslationCommon)((IPlacedTrapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedTrap.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedTrap DeepCopy(
            IPlacedTrapGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedTrap ret = (PlacedTrap)((PlacedTrapCommon)((IPlacedTrapGetter)item).CommonInstance()!).GetNew();
            ((PlacedTrapSetterTranslationCommon)((IPlacedTrapGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class PlacedTrap
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedTrap_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedTrap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedTrapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedTrapSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedTrapSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class PlacedTrapBinaryWriteTranslation :
        APlacedTrapBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlacedTrapBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPlacedTrapGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedTrapGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.PGRE,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedTrapGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAPlacedTrapGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedTrapGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedTrapGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedTrapGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedTrapBinaryCreateTranslation : APlacedTrapBinaryCreateTranslation
    {
        public new static readonly PlacedTrapBinaryCreateTranslation Instance = new PlacedTrapBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PGRE;
        public static void FillBinaryStructs(
            IPlacedTrapInternal item,
            MutagenFrame frame)
        {
            APlacedTrapBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PlacedTrapBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class PlacedTrapBinaryOverlay :
        APlacedTrapBinaryOverlay,
        IPlacedTrapGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedTrap_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedTrap_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedTrapCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedTrapSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedTrapCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedTrapBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedTrapBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPlacedTrap);


        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedTrapBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedTrapGetter PlacedTrapFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlacedTrapBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlacedTrapGetter PlacedTrapFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedTrapFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedTrapMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedTrap>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedTrapGetter rhs) return false;
            return ((PlacedTrapCommon)((IPlacedTrapGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedTrapGetter? obj)
        {
            return ((PlacedTrapCommon)((IPlacedTrapGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedTrapCommon)((IPlacedTrapGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

