/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Armor :
        SkyrimMajorRecord,
        IArmorInternal,
        IEquatable<IArmorGetter>,
        ILoquiObjectSetter<Armor>
    {
        #region Ctor
        protected Armor()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IArmorGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IArmorGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IArmorGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region ObjectEffect
        private readonly IFormLinkNullable<IEffectRecordGetter> _ObjectEffect = new FormLinkNullable<IEffectRecordGetter>();
        public IFormLinkNullable<IEffectRecordGetter> ObjectEffect
        {
            get => _ObjectEffect;
            set => _ObjectEffect.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEffectRecordGetter> IArmorGetter.ObjectEffect => this.ObjectEffect;
        #endregion
        #region EnchantmentAmount
        public UInt16? EnchantmentAmount { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? IArmorGetter.EnchantmentAmount => this.EnchantmentAmount;
        #endregion
        #region WorldModel
        public IGenderedItem<ArmorModel?>? WorldModel { get; set; }
        IGenderedItemGetter<IArmorModelGetter?>? IArmorGetter.WorldModel => this.WorldModel;
        #endregion
        #region BodyTemplate
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private BodyTemplate? _BodyTemplate;
        public BodyTemplate? BodyTemplate
        {
            get => _BodyTemplate;
            set => _BodyTemplate = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBodyTemplateGetter? IArmorGetter.BodyTemplate => this.BodyTemplate;
        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IArmorGetter.Destructible => this.Destructible;
        #endregion
        #region PickUpSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _PickUpSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> PickUpSound
        {
            get => _PickUpSound;
            set => _PickUpSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IArmorGetter.PickUpSound => this.PickUpSound;
        #endregion
        #region PutDownSound
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _PutDownSound = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> PutDownSound
        {
            get => _PutDownSound;
            set => _PutDownSound.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> IArmorGetter.PutDownSound => this.PutDownSound;
        #endregion
        #region RagdollConstraintTemplate
        public String? RagdollConstraintTemplate { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        String? IArmorGetter.RagdollConstraintTemplate => this.RagdollConstraintTemplate;
        #endregion
        #region EquipmentType
        private readonly IFormLinkNullable<IEquipTypeGetter> _EquipmentType = new FormLinkNullable<IEquipTypeGetter>();
        public IFormLinkNullable<IEquipTypeGetter> EquipmentType
        {
            get => _EquipmentType;
            set => _EquipmentType.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEquipTypeGetter> IArmorGetter.EquipmentType => this.EquipmentType;
        #endregion
        #region BashImpactDataSet
        private readonly IFormLinkNullable<IImpactDataSetGetter> _BashImpactDataSet = new FormLinkNullable<IImpactDataSetGetter>();
        public IFormLinkNullable<IImpactDataSetGetter> BashImpactDataSet
        {
            get => _BashImpactDataSet;
            set => _BashImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IImpactDataSetGetter> IArmorGetter.BashImpactDataSet => this.BashImpactDataSet;
        #endregion
        #region AlternateBlockMaterial
        private readonly IFormLinkNullable<IMaterialTypeGetter> _AlternateBlockMaterial = new FormLinkNullable<IMaterialTypeGetter>();
        public IFormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial
        {
            get => _AlternateBlockMaterial;
            set => _AlternateBlockMaterial.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMaterialTypeGetter> IArmorGetter.AlternateBlockMaterial => this.AlternateBlockMaterial;
        #endregion
        #region Race
        private readonly IFormLinkNullable<IRaceGetter> _Race = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> Race
        {
            get => _Race;
            set => _Race.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> IArmorGetter.Race => this.Race;
        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IArmorGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Description
        public TranslatedString? Description { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IArmorGetter.Description => this.Description;
        #endregion
        #region Armature
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IArmorAddonGetter>> _Armature = new ExtendedList<IFormLinkGetter<IArmorAddonGetter>>();
        public ExtendedList<IFormLinkGetter<IArmorAddonGetter>> Armature
        {
            get => this._Armature;
            init => this._Armature = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IArmorAddonGetter>> IArmorGetter.Armature => _Armature;
        #endregion

        #endregion
        #region Value
        public UInt32 Value { get; set; } = default(UInt32);
        #endregion
        #region Weight
        public Single Weight { get; set; } = default(Single);
        #endregion
        #region ArmorRating
        public Single ArmorRating { get; set; } = default(Single);
        #endregion
        #region TemplateArmor
        private readonly IFormLinkNullable<IArmorGetter> _TemplateArmor = new FormLinkNullable<IArmorGetter>();
        public IFormLinkNullable<IArmorGetter> TemplateArmor
        {
            get => _TemplateArmor;
            set => _TemplateArmor.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> IArmorGetter.TemplateArmor => this.TemplateArmor;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ArmorMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.ObjectEffect = initialValue;
                this.EnchantmentAmount = initialValue;
                this.WorldModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, ArmorModel.Mask<TItem>?>?>?>(initialValue, default);
                this.BodyTemplate = new MaskItem<TItem, BodyTemplate.Mask<TItem>?>(initialValue, new BodyTemplate.Mask<TItem>(initialValue));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.PickUpSound = initialValue;
                this.PutDownSound = initialValue;
                this.RagdollConstraintTemplate = initialValue;
                this.EquipmentType = initialValue;
                this.BashImpactDataSet = initialValue;
                this.AlternateBlockMaterial = initialValue;
                this.Race = initialValue;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Description = initialValue;
                this.Armature = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Value = initialValue;
                this.Weight = initialValue;
                this.ArmorRating = initialValue;
                this.TemplateArmor = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Name,
                TItem ObjectEffect,
                TItem EnchantmentAmount,
                TItem WorldModel,
                TItem BodyTemplate,
                TItem Destructible,
                TItem PickUpSound,
                TItem PutDownSound,
                TItem RagdollConstraintTemplate,
                TItem EquipmentType,
                TItem BashImpactDataSet,
                TItem AlternateBlockMaterial,
                TItem Race,
                TItem Keywords,
                TItem Description,
                TItem Armature,
                TItem Value,
                TItem Weight,
                TItem ArmorRating,
                TItem TemplateArmor)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.ObjectEffect = ObjectEffect;
                this.EnchantmentAmount = EnchantmentAmount;
                this.WorldModel = new MaskItem<TItem, GenderedItem<MaskItem<TItem, ArmorModel.Mask<TItem>?>?>?>(WorldModel, default);
                this.BodyTemplate = new MaskItem<TItem, BodyTemplate.Mask<TItem>?>(BodyTemplate, new BodyTemplate.Mask<TItem>(BodyTemplate));
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.PickUpSound = PickUpSound;
                this.PutDownSound = PutDownSound;
                this.RagdollConstraintTemplate = RagdollConstraintTemplate;
                this.EquipmentType = EquipmentType;
                this.BashImpactDataSet = BashImpactDataSet;
                this.AlternateBlockMaterial = AlternateBlockMaterial;
                this.Race = Race;
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Description = Description;
                this.Armature = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Armature, Enumerable.Empty<(int Index, TItem Value)>());
                this.Value = Value;
                this.Weight = Weight;
                this.ArmorRating = ArmorRating;
                this.TemplateArmor = TemplateArmor;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public TItem ObjectEffect;
            public TItem EnchantmentAmount;
            public MaskItem<TItem, GenderedItem<MaskItem<TItem, ArmorModel.Mask<TItem>?>?>?>? WorldModel;
            public MaskItem<TItem, BodyTemplate.Mask<TItem>?>? BodyTemplate { get; set; }
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem PickUpSound;
            public TItem PutDownSound;
            public TItem RagdollConstraintTemplate;
            public TItem EquipmentType;
            public TItem BashImpactDataSet;
            public TItem AlternateBlockMaterial;
            public TItem Race;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Description;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Armature;
            public TItem Value;
            public TItem Weight;
            public TItem ArmorRating;
            public TItem TemplateArmor;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.ObjectEffect, rhs.ObjectEffect)) return false;
                if (!object.Equals(this.EnchantmentAmount, rhs.EnchantmentAmount)) return false;
                if (!object.Equals(this.WorldModel, rhs.WorldModel)) return false;
                if (!object.Equals(this.BodyTemplate, rhs.BodyTemplate)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.PickUpSound, rhs.PickUpSound)) return false;
                if (!object.Equals(this.PutDownSound, rhs.PutDownSound)) return false;
                if (!object.Equals(this.RagdollConstraintTemplate, rhs.RagdollConstraintTemplate)) return false;
                if (!object.Equals(this.EquipmentType, rhs.EquipmentType)) return false;
                if (!object.Equals(this.BashImpactDataSet, rhs.BashImpactDataSet)) return false;
                if (!object.Equals(this.AlternateBlockMaterial, rhs.AlternateBlockMaterial)) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Description, rhs.Description)) return false;
                if (!object.Equals(this.Armature, rhs.Armature)) return false;
                if (!object.Equals(this.Value, rhs.Value)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.ArmorRating, rhs.ArmorRating)) return false;
                if (!object.Equals(this.TemplateArmor, rhs.TemplateArmor)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.ObjectEffect);
                hash.Add(this.EnchantmentAmount);
                hash.Add(this.WorldModel);
                hash.Add(this.BodyTemplate);
                hash.Add(this.Destructible);
                hash.Add(this.PickUpSound);
                hash.Add(this.PutDownSound);
                hash.Add(this.RagdollConstraintTemplate);
                hash.Add(this.EquipmentType);
                hash.Add(this.BashImpactDataSet);
                hash.Add(this.AlternateBlockMaterial);
                hash.Add(this.Race);
                hash.Add(this.Keywords);
                hash.Add(this.Description);
                hash.Add(this.Armature);
                hash.Add(this.Value);
                hash.Add(this.Weight);
                hash.Add(this.ArmorRating);
                hash.Add(this.TemplateArmor);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.ObjectEffect)) return false;
                if (!eval(this.EnchantmentAmount)) return false;
                if (!GenderedItem.AllMask(
                    this.WorldModel,
                    eval: eval)) return false;
                if (BodyTemplate != null)
                {
                    if (!eval(this.BodyTemplate.Overall)) return false;
                    if (this.BodyTemplate.Specific != null && !this.BodyTemplate.Specific.All(eval)) return false;
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.PickUpSound)) return false;
                if (!eval(this.PutDownSound)) return false;
                if (!eval(this.RagdollConstraintTemplate)) return false;
                if (!eval(this.EquipmentType)) return false;
                if (!eval(this.BashImpactDataSet)) return false;
                if (!eval(this.AlternateBlockMaterial)) return false;
                if (!eval(this.Race)) return false;
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Description)) return false;
                if (this.Armature != null)
                {
                    if (!eval(this.Armature.Overall)) return false;
                    if (this.Armature.Specific != null)
                    {
                        foreach (var item in this.Armature.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Value)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.ArmorRating)) return false;
                if (!eval(this.TemplateArmor)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.ObjectEffect)) return true;
                if (eval(this.EnchantmentAmount)) return true;
                if (GenderedItem.AnyMask(
                    this.WorldModel,
                    eval: eval)) return true;
                if (BodyTemplate != null)
                {
                    if (eval(this.BodyTemplate.Overall)) return true;
                    if (this.BodyTemplate.Specific != null && this.BodyTemplate.Specific.Any(eval)) return true;
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.PickUpSound)) return true;
                if (eval(this.PutDownSound)) return true;
                if (eval(this.RagdollConstraintTemplate)) return true;
                if (eval(this.EquipmentType)) return true;
                if (eval(this.BashImpactDataSet)) return true;
                if (eval(this.AlternateBlockMaterial)) return true;
                if (eval(this.Race)) return true;
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Description)) return true;
                if (this.Armature != null)
                {
                    if (eval(this.Armature.Overall)) return true;
                    if (this.Armature.Specific != null)
                    {
                        foreach (var item in this.Armature.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Value)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.ArmorRating)) return true;
                if (eval(this.TemplateArmor)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Armor.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.ObjectEffect = eval(this.ObjectEffect);
                obj.EnchantmentAmount = eval(this.EnchantmentAmount);
                obj.WorldModel = GenderedItem.TranslateHelper(
                    this.WorldModel,
                    eval,
                    (m, e) => m?.Translate(e));
                obj.BodyTemplate = this.BodyTemplate == null ? null : new MaskItem<R, BodyTemplate.Mask<R>?>(eval(this.BodyTemplate.Overall), this.BodyTemplate.Specific?.Translate(eval));
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.PickUpSound = eval(this.PickUpSound);
                obj.PutDownSound = eval(this.PutDownSound);
                obj.RagdollConstraintTemplate = eval(this.RagdollConstraintTemplate);
                obj.EquipmentType = eval(this.EquipmentType);
                obj.BashImpactDataSet = eval(this.BashImpactDataSet);
                obj.AlternateBlockMaterial = eval(this.AlternateBlockMaterial);
                obj.Race = eval(this.Race);
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Description = eval(this.Description);
                if (Armature != null)
                {
                    obj.Armature = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Armature.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Armature.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Armature.Specific = l;
                        foreach (var item in Armature.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Value = eval(this.Value);
                obj.Weight = eval(this.Weight);
                obj.ArmorRating = eval(this.ArmorRating);
                obj.TemplateArmor = eval(this.TemplateArmor);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Armor.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Armor.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Armor.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.ObjectEffect ?? true)
                    {
                        sb.AppendItem(ObjectEffect, "ObjectEffect");
                    }
                    if (printMask?.EnchantmentAmount ?? true)
                    {
                        sb.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                    }
                    if (WorldModel != null
                        && (printMask?.WorldModel?.Overall ?? true))
                    {
                        sb.AppendLine($"WorldModel => {WorldModel}");
                    }
                    if (printMask?.BodyTemplate?.Overall ?? true)
                    {
                        BodyTemplate?.Print(sb);
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.Print(sb);
                    }
                    if (printMask?.PickUpSound ?? true)
                    {
                        sb.AppendItem(PickUpSound, "PickUpSound");
                    }
                    if (printMask?.PutDownSound ?? true)
                    {
                        sb.AppendItem(PutDownSound, "PutDownSound");
                    }
                    if (printMask?.RagdollConstraintTemplate ?? true)
                    {
                        sb.AppendItem(RagdollConstraintTemplate, "RagdollConstraintTemplate");
                    }
                    if (printMask?.EquipmentType ?? true)
                    {
                        sb.AppendItem(EquipmentType, "EquipmentType");
                    }
                    if (printMask?.BashImpactDataSet ?? true)
                    {
                        sb.AppendItem(BashImpactDataSet, "BashImpactDataSet");
                    }
                    if (printMask?.AlternateBlockMaterial ?? true)
                    {
                        sb.AppendItem(AlternateBlockMaterial, "AlternateBlockMaterial");
                    }
                    if (printMask?.Race ?? true)
                    {
                        sb.AppendItem(Race, "Race");
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Description ?? true)
                    {
                        sb.AppendItem(Description, "Description");
                    }
                    if ((printMask?.Armature?.Overall ?? true)
                        && Armature is {} ArmatureItem)
                    {
                        sb.AppendLine("Armature =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ArmatureItem.Overall);
                            if (ArmatureItem.Specific != null)
                            {
                                foreach (var subItem in ArmatureItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Value ?? true)
                    {
                        sb.AppendItem(Value, "Value");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        sb.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.ArmorRating ?? true)
                    {
                        sb.AppendItem(ArmorRating, "ArmorRating");
                    }
                    if (printMask?.TemplateArmor ?? true)
                    {
                        sb.AppendItem(TemplateArmor, "TemplateArmor");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public Exception? ObjectEffect;
            public Exception? EnchantmentAmount;
            public MaskItem<Exception?, GenderedItem<Exception?>?>? WorldModel;
            public MaskItem<Exception?, BodyTemplate.ErrorMask?>? BodyTemplate;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? PickUpSound;
            public Exception? PutDownSound;
            public Exception? RagdollConstraintTemplate;
            public Exception? EquipmentType;
            public Exception? BashImpactDataSet;
            public Exception? AlternateBlockMaterial;
            public Exception? Race;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Description;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Armature;
            public Exception? Value;
            public Exception? Weight;
            public Exception? ArmorRating;
            public Exception? TemplateArmor;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Armor_FieldIndex enu = (Armor_FieldIndex)index;
                switch (enu)
                {
                    case Armor_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Armor_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Armor_FieldIndex.Name:
                        return Name;
                    case Armor_FieldIndex.ObjectEffect:
                        return ObjectEffect;
                    case Armor_FieldIndex.EnchantmentAmount:
                        return EnchantmentAmount;
                    case Armor_FieldIndex.WorldModel:
                        return WorldModel;
                    case Armor_FieldIndex.BodyTemplate:
                        return BodyTemplate;
                    case Armor_FieldIndex.Destructible:
                        return Destructible;
                    case Armor_FieldIndex.PickUpSound:
                        return PickUpSound;
                    case Armor_FieldIndex.PutDownSound:
                        return PutDownSound;
                    case Armor_FieldIndex.RagdollConstraintTemplate:
                        return RagdollConstraintTemplate;
                    case Armor_FieldIndex.EquipmentType:
                        return EquipmentType;
                    case Armor_FieldIndex.BashImpactDataSet:
                        return BashImpactDataSet;
                    case Armor_FieldIndex.AlternateBlockMaterial:
                        return AlternateBlockMaterial;
                    case Armor_FieldIndex.Race:
                        return Race;
                    case Armor_FieldIndex.Keywords:
                        return Keywords;
                    case Armor_FieldIndex.Description:
                        return Description;
                    case Armor_FieldIndex.Armature:
                        return Armature;
                    case Armor_FieldIndex.Value:
                        return Value;
                    case Armor_FieldIndex.Weight:
                        return Weight;
                    case Armor_FieldIndex.ArmorRating:
                        return ArmorRating;
                    case Armor_FieldIndex.TemplateArmor:
                        return TemplateArmor;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Armor_FieldIndex enu = (Armor_FieldIndex)index;
                switch (enu)
                {
                    case Armor_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Armor_FieldIndex.ObjectEffect:
                        this.ObjectEffect = ex;
                        break;
                    case Armor_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = ex;
                        break;
                    case Armor_FieldIndex.WorldModel:
                        this.WorldModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(ex, null);
                        break;
                    case Armor_FieldIndex.BodyTemplate:
                        this.BodyTemplate = new MaskItem<Exception?, BodyTemplate.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Armor_FieldIndex.PickUpSound:
                        this.PickUpSound = ex;
                        break;
                    case Armor_FieldIndex.PutDownSound:
                        this.PutDownSound = ex;
                        break;
                    case Armor_FieldIndex.RagdollConstraintTemplate:
                        this.RagdollConstraintTemplate = ex;
                        break;
                    case Armor_FieldIndex.EquipmentType:
                        this.EquipmentType = ex;
                        break;
                    case Armor_FieldIndex.BashImpactDataSet:
                        this.BashImpactDataSet = ex;
                        break;
                    case Armor_FieldIndex.AlternateBlockMaterial:
                        this.AlternateBlockMaterial = ex;
                        break;
                    case Armor_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case Armor_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Armor_FieldIndex.Description:
                        this.Description = ex;
                        break;
                    case Armor_FieldIndex.Armature:
                        this.Armature = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Armor_FieldIndex.Value:
                        this.Value = ex;
                        break;
                    case Armor_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Armor_FieldIndex.ArmorRating:
                        this.ArmorRating = ex;
                        break;
                    case Armor_FieldIndex.TemplateArmor:
                        this.TemplateArmor = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Armor_FieldIndex enu = (Armor_FieldIndex)index;
                switch (enu)
                {
                    case Armor_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.ObjectEffect:
                        this.ObjectEffect = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.WorldModel:
                        this.WorldModel = (MaskItem<Exception?, GenderedItem<Exception?>?>?)obj;
                        break;
                    case Armor_FieldIndex.BodyTemplate:
                        this.BodyTemplate = (MaskItem<Exception?, BodyTemplate.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Armor_FieldIndex.PickUpSound:
                        this.PickUpSound = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.PutDownSound:
                        this.PutDownSound = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.RagdollConstraintTemplate:
                        this.RagdollConstraintTemplate = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.EquipmentType:
                        this.EquipmentType = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.BashImpactDataSet:
                        this.BashImpactDataSet = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.AlternateBlockMaterial:
                        this.AlternateBlockMaterial = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Race:
                        this.Race = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Armor_FieldIndex.Description:
                        this.Description = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Armature:
                        this.Armature = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Armor_FieldIndex.Value:
                        this.Value = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.ArmorRating:
                        this.ArmorRating = (Exception?)obj;
                        break;
                    case Armor_FieldIndex.TemplateArmor:
                        this.TemplateArmor = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (ObjectEffect != null) return true;
                if (EnchantmentAmount != null) return true;
                if (WorldModel != null) return true;
                if (BodyTemplate != null) return true;
                if (Destructible != null) return true;
                if (PickUpSound != null) return true;
                if (PutDownSound != null) return true;
                if (RagdollConstraintTemplate != null) return true;
                if (EquipmentType != null) return true;
                if (BashImpactDataSet != null) return true;
                if (AlternateBlockMaterial != null) return true;
                if (Race != null) return true;
                if (Keywords != null) return true;
                if (Description != null) return true;
                if (Armature != null) return true;
                if (Value != null) return true;
                if (Weight != null) return true;
                if (ArmorRating != null) return true;
                if (TemplateArmor != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(ObjectEffect, "ObjectEffect");
                }
                {
                    sb.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                }
                if (WorldModel != null)
                {
                    sb.AppendLine($"WorldModel => {WorldModel}");
                }
                BodyTemplate?.Print(sb);
                Destructible?.Print(sb);
                {
                    sb.AppendItem(PickUpSound, "PickUpSound");
                }
                {
                    sb.AppendItem(PutDownSound, "PutDownSound");
                }
                {
                    sb.AppendItem(RagdollConstraintTemplate, "RagdollConstraintTemplate");
                }
                {
                    sb.AppendItem(EquipmentType, "EquipmentType");
                }
                {
                    sb.AppendItem(BashImpactDataSet, "BashImpactDataSet");
                }
                {
                    sb.AppendItem(AlternateBlockMaterial, "AlternateBlockMaterial");
                }
                {
                    sb.AppendItem(Race, "Race");
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Description, "Description");
                }
                if (Armature is {} ArmatureItem)
                {
                    sb.AppendLine("Armature =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ArmatureItem.Overall);
                        if (ArmatureItem.Specific != null)
                        {
                            foreach (var subItem in ArmatureItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Value, "Value");
                }
                {
                    sb.AppendItem(Weight, "Weight");
                }
                {
                    sb.AppendItem(ArmorRating, "ArmorRating");
                }
                {
                    sb.AppendItem(TemplateArmor, "TemplateArmor");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.ObjectEffect = this.ObjectEffect.Combine(rhs.ObjectEffect);
                ret.EnchantmentAmount = this.EnchantmentAmount.Combine(rhs.EnchantmentAmount);
                ret.WorldModel = new MaskItem<Exception?, GenderedItem<Exception?>?>(Noggog.ExceptionExt.Combine(this.WorldModel?.Overall, rhs.WorldModel?.Overall), GenderedItem.Combine(this.WorldModel?.Specific, rhs.WorldModel?.Specific));
                ret.BodyTemplate = this.BodyTemplate.Combine(rhs.BodyTemplate, (l, r) => l.Combine(r));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.PickUpSound = this.PickUpSound.Combine(rhs.PickUpSound);
                ret.PutDownSound = this.PutDownSound.Combine(rhs.PutDownSound);
                ret.RagdollConstraintTemplate = this.RagdollConstraintTemplate.Combine(rhs.RagdollConstraintTemplate);
                ret.EquipmentType = this.EquipmentType.Combine(rhs.EquipmentType);
                ret.BashImpactDataSet = this.BashImpactDataSet.Combine(rhs.BashImpactDataSet);
                ret.AlternateBlockMaterial = this.AlternateBlockMaterial.Combine(rhs.AlternateBlockMaterial);
                ret.Race = this.Race.Combine(rhs.Race);
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Description = this.Description.Combine(rhs.Description);
                ret.Armature = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Armature?.Overall, rhs.Armature?.Overall), Noggog.ExceptionExt.Combine(this.Armature?.Specific, rhs.Armature?.Specific));
                ret.Value = this.Value.Combine(rhs.Value);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.ArmorRating = this.ArmorRating.Combine(rhs.ArmorRating);
                ret.TemplateArmor = this.TemplateArmor.Combine(rhs.TemplateArmor);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public bool ObjectEffect;
            public bool EnchantmentAmount;
            public GenderedItem<ArmorModel.TranslationMask>? WorldModel;
            public BodyTemplate.TranslationMask? BodyTemplate;
            public Destructible.TranslationMask? Destructible;
            public bool PickUpSound;
            public bool PutDownSound;
            public bool RagdollConstraintTemplate;
            public bool EquipmentType;
            public bool BashImpactDataSet;
            public bool AlternateBlockMaterial;
            public bool Race;
            public bool Keywords;
            public bool Description;
            public bool Armature;
            public bool Value;
            public bool Weight;
            public bool ArmorRating;
            public bool TemplateArmor;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.ObjectEffect = defaultOn;
                this.EnchantmentAmount = defaultOn;
                this.PickUpSound = defaultOn;
                this.PutDownSound = defaultOn;
                this.RagdollConstraintTemplate = defaultOn;
                this.EquipmentType = defaultOn;
                this.BashImpactDataSet = defaultOn;
                this.AlternateBlockMaterial = defaultOn;
                this.Race = defaultOn;
                this.Keywords = defaultOn;
                this.Description = defaultOn;
                this.Armature = defaultOn;
                this.Value = defaultOn;
                this.Weight = defaultOn;
                this.ArmorRating = defaultOn;
                this.TemplateArmor = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((ObjectEffect, null));
                ret.Add((EnchantmentAmount, null));
                ret.Add((WorldModel != null || DefaultOn, null));
                ret.Add((BodyTemplate != null ? BodyTemplate.OnOverall : DefaultOn, BodyTemplate?.GetCrystal()));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((PickUpSound, null));
                ret.Add((PutDownSound, null));
                ret.Add((RagdollConstraintTemplate, null));
                ret.Add((EquipmentType, null));
                ret.Add((BashImpactDataSet, null));
                ret.Add((AlternateBlockMaterial, null));
                ret.Add((Race, null));
                ret.Add((Keywords, null));
                ret.Add((Description, null));
                ret.Add((Armature, null));
                ret.Add((Value, null));
                ret.Add((Weight, null));
                ret.Add((ArmorRating, null));
                ret.Add((TemplateArmor, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Armor_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ArmorCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ArmorSetterCommon.Instance.RemapLinks(this, mapping);
        public Armor(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Armor(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Armor(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Armor(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Armor(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Armor>.ToString(this);
        }

        protected override Type LinkType => typeof(IArmor);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ArmorCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => ArmorSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => ArmorSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => ArmorSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IArmorGetter rhs) return false;
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IArmorGetter? obj)
        {
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ArmorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Armor CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Armor();
            ((ArmorSetterCommon)((IArmorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Armor item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ArmorSetterCommon)((IArmorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Armor GetNew()
        {
            return new Armor();
        }

    }
    #endregion

    #region Interface
    public partial interface IArmor :
        IArmorGetter,
        IAssetLinkContainer,
        IBindableEquipment,
        IConstructible,
        IEnchantable,
        IExplodeSpawn,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IItem,
        IItemOrList,
        IKeyworded<IKeywordGetter>,
        ILoquiObjectSetter<IArmorInternal>,
        INamed,
        INamedRequired,
        IObjectBounded,
        IObjectId,
        IOutfitTarget,
        IPlaceableObject,
        IReferenceableObject,
        IScripted,
        ISkyrimMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired,
        IWeightValue
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new IFormLinkNullable<IEffectRecordGetter> ObjectEffect { get; set; }
        new UInt16? EnchantmentAmount { get; set; }
        new IGenderedItem<ArmorModel?>? WorldModel { get; set; }
        new BodyTemplate? BodyTemplate { get; set; }
        new Destructible? Destructible { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> PickUpSound { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> PutDownSound { get; set; }
        new String? RagdollConstraintTemplate { get; set; }
        new IFormLinkNullable<IEquipTypeGetter> EquipmentType { get; set; }
        new IFormLinkNullable<IImpactDataSetGetter> BashImpactDataSet { get; set; }
        new IFormLinkNullable<IMaterialTypeGetter> AlternateBlockMaterial { get; set; }
        new IFormLinkNullable<IRaceGetter> Race { get; set; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new TranslatedString? Description { get; set; }
        new ExtendedList<IFormLinkGetter<IArmorAddonGetter>> Armature { get; }
        new UInt32 Value { get; set; }
        new Single Weight { get; set; }
        new Single ArmorRating { get; set; }
        new IFormLinkNullable<IArmorGetter> TemplateArmor { get; set; }
        #region Mutagen
        new Armor.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface IArmorInternal :
        ISkyrimMajorRecordInternal,
        IArmor,
        IArmorGetter
    {
        new IGenderedItem<ArmorModel?>? WorldModel { get; set; }
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.ARMO)]
    public partial interface IArmorGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IBindableEquipmentGetter,
        IConstructibleGetter,
        IEnchantableGetter,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IItemGetter,
        IItemOrListGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILoquiObject<IArmorGetter>,
        IMapsToGetter<IArmorGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        IObjectIdGetter,
        IOutfitTargetGetter,
        IPlaceableObjectGetter,
        IReferenceableObjectGetter,
        IScriptedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter,
        IWeightValueGetter
    {
        static new ILoquiRegistration StaticRegistration => Armor_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        IFormLinkNullableGetter<IEffectRecordGetter> ObjectEffect { get; }
        UInt16? EnchantmentAmount { get; }
        IGenderedItemGetter<IArmorModelGetter?>? WorldModel { get; }
        IBodyTemplateGetter? BodyTemplate { get; }
        IDestructibleGetter? Destructible { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> PickUpSound { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> PutDownSound { get; }
        String? RagdollConstraintTemplate { get; }
        IFormLinkNullableGetter<IEquipTypeGetter> EquipmentType { get; }
        IFormLinkNullableGetter<IImpactDataSetGetter> BashImpactDataSet { get; }
        IFormLinkNullableGetter<IMaterialTypeGetter> AlternateBlockMaterial { get; }
        IFormLinkNullableGetter<IRaceGetter> Race { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        ITranslatedStringGetter? Description { get; }
        IReadOnlyList<IFormLinkGetter<IArmorAddonGetter>> Armature { get; }
        UInt32 Value { get; }
        Single Weight { get; }
        Single ArmorRating { get; }
        IFormLinkNullableGetter<IArmorGetter> TemplateArmor { get; }

        #region Mutagen
        Armor.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class ArmorMixIn
    {
        public static void Clear(this IArmorInternal item)
        {
            ((ArmorSetterCommon)((IArmorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Armor.Mask<bool> GetEqualsMask(
            this IArmorGetter item,
            IArmorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IArmorGetter item,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IArmorGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IArmorGetter item,
            IArmorGetter rhs,
            Armor.TranslationMask? equalsMask = null)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IArmorInternal lhs,
            IArmorGetter rhs,
            out Armor.ErrorMask errorMask,
            Armor.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ArmorSetterTranslationCommon)((IArmorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Armor.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IArmorInternal lhs,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ArmorSetterTranslationCommon)((IArmorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            Armor.TranslationMask? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            out Armor.ErrorMask errorMask,
            Armor.TranslationMask? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Armor DeepCopy(
            this IArmorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ArmorSetterTranslationCommon)((IArmorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Armor Duplicate(
            this IArmorGetter item,
            FormKey formKey,
            Armor.TranslationMask? copyMask = null)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Armor Duplicate(
            this IArmorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IArmorInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ArmorSetterCommon)((IArmorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Armor_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        Name = 9,
        ObjectEffect = 10,
        EnchantmentAmount = 11,
        WorldModel = 12,
        BodyTemplate = 13,
        Destructible = 14,
        PickUpSound = 15,
        PutDownSound = 16,
        RagdollConstraintTemplate = 17,
        EquipmentType = 18,
        BashImpactDataSet = 19,
        AlternateBlockMaterial = 20,
        Race = 21,
        Keywords = 22,
        Description = 23,
        Armature = 24,
        Value = 25,
        Weight = 26,
        ArmorRating = 27,
        TemplateArmor = 28,
    }
    #endregion

    #region Registration
    internal partial class Armor_Registration : ILoquiRegistration
    {
        public static readonly Armor_Registration Instance = new Armor_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 22;

        public const ushort FieldCount = 29;

        public static readonly Type MaskType = typeof(Armor.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Armor.ErrorMask);

        public static readonly Type ClassType = typeof(Armor);

        public static readonly Type GetterType = typeof(IArmorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IArmor);

        public static readonly Type? InternalSetterType = typeof(IArmorInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Armor";

        public const string Name = "Armor";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ARMO;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ARMO);
            var all = RecordCollection.Factory(
                RecordTypes.ARMO,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.FULL,
                RecordTypes.EITM,
                RecordTypes.EAMT,
                RecordTypes.MOD2,
                RecordTypes.MOD4,
                RecordTypes.ICO2,
                RecordTypes.ICON,
                RecordTypes.MO2T,
                RecordTypes.MO2S,
                RecordTypes.MO4T,
                RecordTypes.MO4S,
                RecordTypes.MIC2,
                RecordTypes.BODT,
                RecordTypes.BOD2,
                RecordTypes.DEST,
                RecordTypes.DSTD,
                RecordTypes.DMDL,
                RecordTypes.YNAM,
                RecordTypes.ZNAM,
                RecordTypes.BMCT,
                RecordTypes.ETYP,
                RecordTypes.BIDS,
                RecordTypes.BAMT,
                RecordTypes.RNAM,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.DESC,
                RecordTypes.MODL,
                RecordTypes.DATA,
                RecordTypes.DNAM,
                RecordTypes.TNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ArmorBinaryWriteTranslation);
        public static RecordTypeConverter WorldModelFemaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD4),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO4T),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODS,
                RecordTypes.MO4S),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.ICON,
                RecordTypes.ICO2),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MICO,
                RecordTypes.MIC2));
        public static RecordTypeConverter WorldModelMaleConverter = new RecordTypeConverter(
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODL,
                RecordTypes.MOD2),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODT,
                RecordTypes.MO2T),
            new KeyValuePair<RecordType, RecordType>(
                RecordTypes.MODS,
                RecordTypes.MO2S));
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ArmorSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ArmorSetterCommon Instance = new ArmorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IArmorInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Name = default;
            item.ObjectEffect.Clear();
            item.EnchantmentAmount = default;
            item.WorldModel = null;
            item.BodyTemplate = null;
            item.Destructible = null;
            item.PickUpSound.Clear();
            item.PutDownSound.Clear();
            item.RagdollConstraintTemplate = default;
            item.EquipmentType.Clear();
            item.BashImpactDataSet.Clear();
            item.AlternateBlockMaterial.Clear();
            item.Race.Clear();
            item.Keywords = null;
            item.Description = default;
            item.Armature.Clear();
            item.Value = default(UInt32);
            item.Weight = default(Single);
            item.ArmorRating = default(Single);
            item.TemplateArmor.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IArmorInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IArmor obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.ObjectEffect.Relink(mapping);
            obj.WorldModel?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.PickUpSound.Relink(mapping);
            obj.PutDownSound.Relink(mapping);
            obj.EquipmentType.Relink(mapping);
            obj.BashImpactDataSet.Relink(mapping);
            obj.AlternateBlockMaterial.Relink(mapping);
            obj.Race.Relink(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Armature.RemapLinks(mapping);
            obj.TemplateArmor.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IArmor obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.WorldModel is {} WorldModelItem)
            {
                foreach (var item in WorldModelItem.WhereNotNull().SelectMany(f => f.EnumerateListedAssetLinks()))
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IArmor obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.WorldModel?.ForEach(x => x?.RemapAssetLinks(mapping, queryCategories, linkCache));
            obj.VirtualMachineAdapter?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Destructible?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IArmorInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IArmorInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ArmorBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ArmorBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Armor)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Armor)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ArmorCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ArmorCommon Instance = new ArmorCommon();

        public Armor.Mask<bool> GetEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Armor.Mask<bool>(false);
            ((ArmorCommon)((IArmorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IArmorGetter item,
            IArmorGetter rhs,
            Armor.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.ObjectEffect = item.ObjectEffect.Equals(rhs.ObjectEffect);
            ret.EnchantmentAmount = item.EnchantmentAmount == rhs.EnchantmentAmount;
            ret.WorldModel = GenderedItem.EqualityMaskHelper(
                lhs: item.WorldModel,
                rhs: rhs.WorldModel,
                maskGetter: (l, r, i) => EqualsMaskHelper.EqualsHelper(l, r, (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl), i),
                include: include);
            ret.BodyTemplate = EqualsMaskHelper.EqualsHelper(
                item.BodyTemplate,
                rhs.BodyTemplate,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PickUpSound = item.PickUpSound.Equals(rhs.PickUpSound);
            ret.PutDownSound = item.PutDownSound.Equals(rhs.PutDownSound);
            ret.RagdollConstraintTemplate = string.Equals(item.RagdollConstraintTemplate, rhs.RagdollConstraintTemplate);
            ret.EquipmentType = item.EquipmentType.Equals(rhs.EquipmentType);
            ret.BashImpactDataSet = item.BashImpactDataSet.Equals(rhs.BashImpactDataSet);
            ret.AlternateBlockMaterial = item.AlternateBlockMaterial.Equals(rhs.AlternateBlockMaterial);
            ret.Race = item.Race.Equals(rhs.Race);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Description = object.Equals(item.Description, rhs.Description);
            ret.Armature = item.Armature.CollectionEqualsHelper(
                rhs.Armature,
                (l, r) => object.Equals(l, r),
                include);
            ret.Value = item.Value == rhs.Value;
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.ArmorRating = item.ArmorRating.EqualsWithin(rhs.ArmorRating);
            ret.TemplateArmor = item.TemplateArmor.Equals(rhs.TemplateArmor);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IArmorGetter item,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IArmorGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Armor.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Armor =>");
            }
            else
            {
                sb.AppendLine($"{name} (Armor) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IArmorGetter item,
            StructuredStringBuilder sb,
            Armor.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.ObjectEffect ?? true)
            {
                sb.AppendItem(item.ObjectEffect.FormKeyNullable, "ObjectEffect");
            }
            if ((printMask?.EnchantmentAmount ?? true)
                && item.EnchantmentAmount is {} EnchantmentAmountItem)
            {
                sb.AppendItem(EnchantmentAmountItem, "EnchantmentAmount");
            }
            if ((printMask?.WorldModel?.Overall ?? true)
                && item.WorldModel is {} WorldModelItem)
            {
                WorldModelItem?.Print(sb, "WorldModel");
            }
            if ((printMask?.BodyTemplate?.Overall ?? true)
                && item.BodyTemplate is {} BodyTemplateItem)
            {
                BodyTemplateItem?.Print(sb, "BodyTemplate");
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.Print(sb, "Destructible");
            }
            if (printMask?.PickUpSound ?? true)
            {
                sb.AppendItem(item.PickUpSound.FormKeyNullable, "PickUpSound");
            }
            if (printMask?.PutDownSound ?? true)
            {
                sb.AppendItem(item.PutDownSound.FormKeyNullable, "PutDownSound");
            }
            if ((printMask?.RagdollConstraintTemplate ?? true)
                && item.RagdollConstraintTemplate is {} RagdollConstraintTemplateItem)
            {
                sb.AppendItem(RagdollConstraintTemplateItem, "RagdollConstraintTemplate");
            }
            if (printMask?.EquipmentType ?? true)
            {
                sb.AppendItem(item.EquipmentType.FormKeyNullable, "EquipmentType");
            }
            if (printMask?.BashImpactDataSet ?? true)
            {
                sb.AppendItem(item.BashImpactDataSet.FormKeyNullable, "BashImpactDataSet");
            }
            if (printMask?.AlternateBlockMaterial ?? true)
            {
                sb.AppendItem(item.AlternateBlockMaterial.FormKeyNullable, "AlternateBlockMaterial");
            }
            if (printMask?.Race ?? true)
            {
                sb.AppendItem(item.Race.FormKeyNullable, "Race");
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Description ?? true)
                && item.Description is {} DescriptionItem)
            {
                sb.AppendItem(DescriptionItem, "Description");
            }
            if (printMask?.Armature?.Overall ?? true)
            {
                sb.AppendLine("Armature =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Armature)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Value ?? true)
            {
                sb.AppendItem(item.Value, "Value");
            }
            if (printMask?.Weight ?? true)
            {
                sb.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.ArmorRating ?? true)
            {
                sb.AppendItem(item.ArmorRating, "ArmorRating");
            }
            if (printMask?.TemplateArmor ?? true)
            {
                sb.AppendItem(item.TemplateArmor.FormKeyNullable, "TemplateArmor");
            }
        }
        
        public static Armor_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Armor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Armor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Armor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Armor_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Armor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Armor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IArmorGetter? lhs,
            IArmorGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Armor_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Armor_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.ObjectEffect) ?? true))
            {
                if (!lhs.ObjectEffect.Equals(rhs.ObjectEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.EnchantmentAmount) ?? true))
            {
                if (lhs.EnchantmentAmount != rhs.EnchantmentAmount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.WorldModel) ?? true))
            {
                if (!Equals(lhs.WorldModel, rhs.WorldModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.BodyTemplate) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.BodyTemplate, rhs.BodyTemplate, out var lhsBodyTemplate, out var rhsBodyTemplate, out var isBodyTemplateEqual))
                {
                    if (!((BodyTemplateCommon)((IBodyTemplateGetter)lhsBodyTemplate).CommonInstance()!).Equals(lhsBodyTemplate, rhsBodyTemplate, equalsMask?.GetSubCrystal((int)Armor_FieldIndex.BodyTemplate))) return false;
                }
                else if (!isBodyTemplateEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, equalsMask?.GetSubCrystal((int)Armor_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.PickUpSound) ?? true))
            {
                if (!lhs.PickUpSound.Equals(rhs.PickUpSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.PutDownSound) ?? true))
            {
                if (!lhs.PutDownSound.Equals(rhs.PutDownSound)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.RagdollConstraintTemplate) ?? true))
            {
                if (!string.Equals(lhs.RagdollConstraintTemplate, rhs.RagdollConstraintTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.EquipmentType) ?? true))
            {
                if (!lhs.EquipmentType.Equals(rhs.EquipmentType)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.BashImpactDataSet) ?? true))
            {
                if (!lhs.BashImpactDataSet.Equals(rhs.BashImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.AlternateBlockMaterial) ?? true))
            {
                if (!lhs.AlternateBlockMaterial.Equals(rhs.AlternateBlockMaterial)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Race) ?? true))
            {
                if (!lhs.Race.Equals(rhs.Race)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Description) ?? true))
            {
                if (!object.Equals(lhs.Description, rhs.Description)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Armature) ?? true))
            {
                if (!lhs.Armature.SequenceEqualNullable(rhs.Armature)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Value) ?? true))
            {
                if (lhs.Value != rhs.Value) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.Weight) ?? true))
            {
                if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.ArmorRating) ?? true))
            {
                if (!lhs.ArmorRating.EqualsWithin(rhs.ArmorRating)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Armor_FieldIndex.TemplateArmor) ?? true))
            {
                if (!lhs.TemplateArmor.Equals(rhs.TemplateArmor)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IArmorGetter?)lhs,
                rhs: rhs as IArmorGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IArmorGetter?)lhs,
                rhs: rhs as IArmorGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IArmorGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.ObjectEffect);
            if (item.EnchantmentAmount is {} EnchantmentAmountitem)
            {
                hash.Add(EnchantmentAmountitem);
            }
            if (item.WorldModel is {} WorldModelitem)
            {
                hash.Add(HashCode.Combine(WorldModelitem.Male, WorldModelitem.Female));
            }
            if (item.BodyTemplate is {} BodyTemplateitem)
            {
                hash.Add(BodyTemplateitem);
            }
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.PickUpSound);
            hash.Add(item.PutDownSound);
            if (item.RagdollConstraintTemplate is {} RagdollConstraintTemplateitem)
            {
                hash.Add(RagdollConstraintTemplateitem);
            }
            hash.Add(item.EquipmentType);
            hash.Add(item.BashImpactDataSet);
            hash.Add(item.AlternateBlockMaterial);
            hash.Add(item.Race);
            hash.Add(item.Keywords);
            if (item.Description is {} Descriptionitem)
            {
                hash.Add(Descriptionitem);
            }
            hash.Add(item.Armature);
            hash.Add(item.Value);
            hash.Add(item.Weight);
            hash.Add(item.ArmorRating);
            hash.Add(item.TemplateArmor);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IArmorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Armor.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IArmorGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.ObjectEffect, out var ObjectEffectInfo))
            {
                yield return ObjectEffectInfo;
            }
            if (obj.WorldModel is {} WorldModelItem)
            {
                foreach (var item in WorldModelItem.WhereNotNull().SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.PickUpSound, out var PickUpSoundInfo))
            {
                yield return PickUpSoundInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PutDownSound, out var PutDownSoundInfo))
            {
                yield return PutDownSoundInfo;
            }
            if (FormLinkInformation.TryFactory(obj.EquipmentType, out var EquipmentTypeInfo))
            {
                yield return EquipmentTypeInfo;
            }
            if (FormLinkInformation.TryFactory(obj.BashImpactDataSet, out var BashImpactDataSetInfo))
            {
                yield return BashImpactDataSetInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AlternateBlockMaterial, out var AlternateBlockMaterialInfo))
            {
                yield return AlternateBlockMaterialInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Race, out var RaceInfo))
            {
                yield return RaceInfo;
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Armature)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.TemplateArmor, out var TemplateArmorInfo))
            {
                yield return TemplateArmorInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IArmorGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.WorldModel is {} WorldModelItem)
            {
                foreach (var item in WorldModelItem.WhereNotNull().SelectMany(f => f.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType)))
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Armor Duplicate(
            IArmorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Armor(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IArmorGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IArmorGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ArmorSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ArmorSetterTranslationCommon Instance = new ArmorSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IArmorInternal item,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IArmor item,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Armor_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.ObjectEffect) ?? true))
            {
                item.ObjectEffect.SetTo(rhs.ObjectEffect.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.EnchantmentAmount) ?? true))
            {
                item.EnchantmentAmount = rhs.EnchantmentAmount;
            }
            if (rhs.WorldModel is not {} rhsWorldModelitem)
            {
                item.WorldModel = null;
            }
            else
            {
                item.WorldModel = new GenderedItem<ArmorModel?>(
                    male: rhsWorldModelitem.Male?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)),
                    female: rhsWorldModelitem.Female?.DeepCopy(
                        errorMask: errorMask,
                        default(TranslationCrystal)));
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.BodyTemplate) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.BodyTemplate);
                try
                {
                    if(rhs.BodyTemplate is {} rhsBodyTemplate)
                    {
                        item.BodyTemplate = rhsBodyTemplate.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.BodyTemplate));
                    }
                    else
                    {
                        item.BodyTemplate = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Armor_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.PickUpSound) ?? true))
            {
                item.PickUpSound.SetTo(rhs.PickUpSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.PutDownSound) ?? true))
            {
                item.PutDownSound.SetTo(rhs.PutDownSound.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.RagdollConstraintTemplate) ?? true))
            {
                item.RagdollConstraintTemplate = rhs.RagdollConstraintTemplate;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.EquipmentType) ?? true))
            {
                item.EquipmentType.SetTo(rhs.EquipmentType.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.BashImpactDataSet) ?? true))
            {
                item.BashImpactDataSet.SetTo(rhs.BashImpactDataSet.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.AlternateBlockMaterial) ?? true))
            {
                item.AlternateBlockMaterial.SetTo(rhs.AlternateBlockMaterial.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Race) ?? true))
            {
                item.Race.SetTo(rhs.Race.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Description) ?? true))
            {
                item.Description = rhs.Description?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Armature) ?? true))
            {
                errorMask?.PushIndex((int)Armor_FieldIndex.Armature);
                try
                {
                    item.Armature.SetTo(
                        rhs.Armature
                            .Select(b => (IFormLinkGetter<IArmorAddonGetter>)new FormLink<IArmorAddonGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Value) ?? true))
            {
                item.Value = rhs.Value;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.ArmorRating) ?? true))
            {
                item.ArmorRating = rhs.ArmorRating;
            }
            if ((copyMask?.GetShouldTranslate((int)Armor_FieldIndex.TemplateArmor) ?? true))
            {
                item.TemplateArmor.SetTo(rhs.TemplateArmor.FormKeyNullable);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IArmor item,
            IArmorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorInternal)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmor)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmorInternal)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IArmor)item,
                rhs: (IArmorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Armor DeepCopy(
            IArmorGetter item,
            Armor.TranslationMask? copyMask = null)
        {
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ((ArmorSetterTranslationCommon)((IArmorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Armor DeepCopy(
            IArmorGetter item,
            out Armor.ErrorMask errorMask,
            Armor.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ((ArmorSetterTranslationCommon)((IArmorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Armor.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Armor DeepCopy(
            IArmorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Armor ret = (Armor)((ArmorCommon)((IArmorGetter)item).CommonInstance()!).GetNew();
            ((ArmorSetterTranslationCommon)((IArmorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Armor
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Armor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ArmorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class ArmorBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ArmorBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IArmorGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObjectEffect,
                header: translationParams.ConvertToCustom(RecordTypes.EITM));
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.EnchantmentAmount,
                header: translationParams.ConvertToCustom(RecordTypes.EAMT));
            GenderedItemBinaryTranslation.Write(
                writer: writer,
                item: item.WorldModel,
                femaleRecordConverter: Armor_Registration.WorldModelFemaleConverter,
                maleRecordConverter: Armor_Registration.WorldModelMaleConverter,
                transl: (MutagenWriter subWriter, IArmorModelGetter? subItem, TypedWriteParams conv) =>
                {
                    if (subItem is {} Item)
                    {
                        ((ArmorModelBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                            item: Item,
                            writer: subWriter,
                            translationParams: conv);
                    }
                });
            ArmorBinaryWriteTranslation.WriteBinaryBodyTemplate(
                writer: writer,
                item: item);
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PickUpSound,
                header: translationParams.ConvertToCustom(RecordTypes.YNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PutDownSound,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.RagdollConstraintTemplate,
                header: translationParams.ConvertToCustom(RecordTypes.BMCT),
                binaryType: StringBinaryType.NullTerminate);
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EquipmentType,
                header: translationParams.ConvertToCustom(RecordTypes.ETYP));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BashImpactDataSet,
                header: translationParams.ConvertToCustom(RecordTypes.BIDS));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AlternateBlockMaterial,
                header: translationParams.ConvertToCustom(RecordTypes.BAMT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Race,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Description,
                header: translationParams.ConvertToCustom(RecordTypes.DESC),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.DL);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IArmorAddonGetter>>.Instance.Write(
                writer: writer,
                items: item.Armature,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IArmorAddonGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.MODL));
                });
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                writer.Write(item.Value);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.Weight);
            }
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ArmorRating,
                integerType: FloatIntegerType.UInt,
                multiplier: 100f,
                divisor: null,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TemplateArmor,
                header: translationParams.ConvertToCustom(RecordTypes.TNAM));
        }

        public static partial void WriteBinaryBodyTemplateCustom(
            MutagenWriter writer,
            IArmorGetter item);

        public static void WriteBinaryBodyTemplate(
            MutagenWriter writer,
            IArmorGetter item)
        {
            WriteBinaryBodyTemplateCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IArmorGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ARMO,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IArmorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IArmorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IArmorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ArmorBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly ArmorBinaryCreateTranslation Instance = new ArmorBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ARMO;
        public static ParseResult FillBinaryRecordTypes(
            IArmorInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Armor_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Armor_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Armor_FieldIndex.Name;
                }
                case RecordTypeInts.EITM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObjectEffect.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Armor_FieldIndex.ObjectEffect;
                }
                case RecordTypeInts.EAMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnchantmentAmount = frame.ReadUInt16();
                    return (int)Armor_FieldIndex.EnchantmentAmount;
                }
                case RecordTypeInts.MOD2:
                case RecordTypeInts.MOD4:
                case RecordTypeInts.ICO2:
                case RecordTypeInts.ICON:
                {
                    item.WorldModel = Mutagen.Bethesda.Plugins.Binary.Translations.GenderedItemBinaryTranslation.Parse<ArmorModel>(
                        frame: frame,
                        femaleRecordConverter: Armor_Registration.WorldModelFemaleConverter,
                        maleRecordConverter: Armor_Registration.WorldModelMaleConverter,
                        transl: ArmorModel.TryCreateFromBinary);
                    return (int)Armor_FieldIndex.WorldModel;
                }
                case RecordTypeInts.BODT:
                case RecordTypeInts.BOD2:
                {
                    ArmorBinaryCreateTranslation.FillBinaryBodyTemplateCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                    return (int)Armor_FieldIndex.BodyTemplate;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Armor_FieldIndex.Destructible;
                }
                case RecordTypeInts.YNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PickUpSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Armor_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PutDownSound.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Armor_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.BMCT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollConstraintTemplate = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Armor_FieldIndex.RagdollConstraintTemplate;
                }
                case RecordTypeInts.ETYP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EquipmentType.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Armor_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.BIDS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BashImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Armor_FieldIndex.BashImpactDataSet;
                }
                case RecordTypeInts.BAMT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlternateBlockMaterial.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Armor_FieldIndex.AlternateBlockMaterial;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Race.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Armor_FieldIndex.Race;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Armor_FieldIndex.Keywords;
                }
                case RecordTypeInts.DESC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Description = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.DL,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Armor_FieldIndex.Description;
                }
                case RecordTypeInts.MODL:
                {
                    item.Armature.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IArmorAddonGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.MODL),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Armor_FieldIndex.Armature;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Value = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Weight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    return (int)Armor_FieldIndex.Weight;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ArmorRating = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        integerType: FloatIntegerType.UInt,
                        multiplier: null,
                        divisor: 100f);
                    return (int)Armor_FieldIndex.ArmorRating;
                }
                case RecordTypeInts.TNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TemplateArmor.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Armor_FieldIndex.TemplateArmor;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial void FillBinaryBodyTemplateCustom(
            MutagenFrame frame,
            IArmorInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ArmorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class ArmorBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IArmorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Armor_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Armor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ArmorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ArmorSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ArmorCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => ArmorCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ArmorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ArmorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IArmor);

        public Armor.MajorFlag MajorFlags => (Armor.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region ObjectEffect
        private int? _ObjectEffectLocation;
        public IFormLinkNullableGetter<IEffectRecordGetter> ObjectEffect => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEffectRecordGetter>(_package, _recordData, _ObjectEffectLocation);
        #endregion
        #region EnchantmentAmount
        private int? _EnchantmentAmountLocation;
        public UInt16? EnchantmentAmount => _EnchantmentAmountLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EnchantmentAmountLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region WorldModel
        private IGenderedItemGetter<IArmorModelGetter?>? _WorldModelOverlay;
        public IGenderedItemGetter<IArmorModelGetter?>? WorldModel => _WorldModelOverlay;
        #endregion
        #region BodyTemplate
        partial void BodyTemplateCustomParse(
            OverlayStream stream,
            int finalPos,
            int offset);
        public partial IBodyTemplateGetter? GetBodyTemplateCustom();
        public IBodyTemplateGetter? BodyTemplate => GetBodyTemplateCustom();
        #endregion
        public IDestructibleGetter? Destructible { get; private set; }
        #region PickUpSound
        private int? _PickUpSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PickUpSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _PickUpSoundLocation);
        #endregion
        #region PutDownSound
        private int? _PutDownSoundLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> PutDownSound => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _PutDownSoundLocation);
        #endregion
        #region RagdollConstraintTemplate
        private int? _RagdollConstraintTemplateLocation;
        public String? RagdollConstraintTemplate => _RagdollConstraintTemplateLocation.HasValue ? BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _RagdollConstraintTemplateLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated) : default(string?);
        #endregion
        #region EquipmentType
        private int? _EquipmentTypeLocation;
        public IFormLinkNullableGetter<IEquipTypeGetter> EquipmentType => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEquipTypeGetter>(_package, _recordData, _EquipmentTypeLocation);
        #endregion
        #region BashImpactDataSet
        private int? _BashImpactDataSetLocation;
        public IFormLinkNullableGetter<IImpactDataSetGetter> BashImpactDataSet => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IImpactDataSetGetter>(_package, _recordData, _BashImpactDataSetLocation);
        #endregion
        #region AlternateBlockMaterial
        private int? _AlternateBlockMaterialLocation;
        public IFormLinkNullableGetter<IMaterialTypeGetter> AlternateBlockMaterial => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMaterialTypeGetter>(_package, _recordData, _AlternateBlockMaterialLocation);
        #endregion
        #region Race
        private int? _RaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> Race => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _RaceLocation);
        #endregion
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Description
        private int? _DescriptionLocation;
        public ITranslatedStringGetter? Description => _DescriptionLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DescriptionLocation.Value, _package.MetaData.Constants), StringsSource.DL, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IFormLinkGetter<IArmorAddonGetter>> Armature { get; private set; } = Array.Empty<IFormLinkGetter<IArmorAddonGetter>>();
        private RangeInt32? _DATALocation;
        #region Value
        private int _ValueLocation => _DATALocation!.Value.Min;
        private bool _Value_IsSet => _DATALocation.HasValue;
        public UInt32 Value => _Value_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_ValueLocation, 4)) : default(UInt32);
        #endregion
        #region Weight
        private int _WeightLocation => _DATALocation!.Value.Min + 0x4;
        private bool _Weight_IsSet => _DATALocation.HasValue;
        public Single Weight => _Weight_IsSet ? _recordData.Slice(_WeightLocation, 4).Float() : default(Single);
        #endregion
        #region ArmorRating
        private int? _ArmorRatingLocation;
        public Single ArmorRating => _ArmorRatingLocation.HasValue ? FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ArmorRatingLocation.Value, _package.MetaData.Constants), FloatIntegerType.UInt, multiplier: null, divisor: 100f) : default(Single);
        #endregion
        #region TemplateArmor
        private int? _TemplateArmorLocation;
        public IFormLinkNullableGetter<IArmorGetter> TemplateArmor => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArmorGetter>(_package, _recordData, _TemplateArmorLocation);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ArmorBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IArmorGetter ArmorFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ArmorBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IArmorGetter ArmorFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ArmorFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Armor_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Armor_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.Name;
                }
                case RecordTypeInts.EITM:
                {
                    _ObjectEffectLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.ObjectEffect;
                }
                case RecordTypeInts.EAMT:
                {
                    _EnchantmentAmountLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.EnchantmentAmount;
                }
                case RecordTypeInts.MOD2:
                case RecordTypeInts.MOD4:
                case RecordTypeInts.ICO2:
                case RecordTypeInts.ICON:
                {
                    _WorldModelOverlay = GenderedItemBinaryOverlay.Factory<IArmorModelGetter>(
                        package: _package,
                        stream: stream,
                        creator: static (s, p, r) => ArmorModelBinaryOverlay.ArmorModelFactory(s, p, r),
                        femaleRecordConverter: Armor_Registration.WorldModelFemaleConverter,
                        maleRecordConverter: Armor_Registration.WorldModelMaleConverter);
                    return (int)Armor_FieldIndex.WorldModel;
                }
                case RecordTypeInts.BODT:
                case RecordTypeInts.BOD2:
                {
                    BodyTemplateCustomParse(
                        stream,
                        finalPos,
                        offset);
                    return (int)Armor_FieldIndex.BodyTemplate;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Armor_FieldIndex.Destructible;
                }
                case RecordTypeInts.YNAM:
                {
                    _PickUpSoundLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.PickUpSound;
                }
                case RecordTypeInts.ZNAM:
                {
                    _PutDownSoundLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.PutDownSound;
                }
                case RecordTypeInts.BMCT:
                {
                    _RagdollConstraintTemplateLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.RagdollConstraintTemplate;
                }
                case RecordTypeInts.ETYP:
                {
                    _EquipmentTypeLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.EquipmentType;
                }
                case RecordTypeInts.BIDS:
                {
                    _BashImpactDataSetLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.BashImpactDataSet;
                }
                case RecordTypeInts.BAMT:
                {
                    _AlternateBlockMaterialLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.AlternateBlockMaterial;
                }
                case RecordTypeInts.RNAM:
                {
                    _RaceLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.Race;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Armor_FieldIndex.Keywords;
                }
                case RecordTypeInts.DESC:
                {
                    _DescriptionLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.Description;
                }
                case RecordTypeInts.MODL:
                {
                    this.Armature = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IArmorAddonGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IArmorAddonGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.MODL,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Armor_FieldIndex.Armature;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)Armor_FieldIndex.Weight;
                }
                case RecordTypeInts.DNAM:
                {
                    _ArmorRatingLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.ArmorRating;
                }
                case RecordTypeInts.TNAM:
                {
                    _TemplateArmorLocation = (stream.Position - offset);
                    return (int)Armor_FieldIndex.TemplateArmor;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ArmorMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Armor>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IArmorGetter rhs) return false;
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IArmorGetter? obj)
        {
            return ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ArmorCommon)((IArmorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

