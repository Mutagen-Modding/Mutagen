/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Landscape :
        SkyrimMajorRecord,
        IEquatable<ILandscapeGetter>,
        ILandscapeInternal,
        ILoquiObjectSetter<Landscape>
    {
        #region Ctor
        protected Landscape()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Flags
        public Landscape.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Landscape.Flag? ILandscapeGetter.Flags => this.Flags;
        #endregion
        #region VertexNormals
        public static readonly P2Int VertexNormalsFixedSize = new P2Int(33, 33);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IArray2d<P3UInt8>? _VertexNormals;
        public IArray2d<P3UInt8>? VertexNormals
        {
            get => this._VertexNormals;
            set => this._VertexNormals = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyArray2d<P3UInt8>? ILandscapeGetter.VertexNormals => _VertexNormals;
        #endregion

        #endregion
        #region VertexHeightMap
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LandscapeVertexHeightMap? _VertexHeightMap;
        public LandscapeVertexHeightMap? VertexHeightMap
        {
            get => _VertexHeightMap;
            set => _VertexHeightMap = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILandscapeVertexHeightMapGetter? ILandscapeGetter.VertexHeightMap => this.VertexHeightMap;
        #endregion
        #region VertexColors
        public static readonly P2Int VertexColorsFixedSize = new P2Int(33, 33);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private IArray2d<P3UInt8>? _VertexColors;
        public IArray2d<P3UInt8>? VertexColors
        {
            get => this._VertexColors;
            set => this._VertexColors = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyArray2d<P3UInt8>? ILandscapeGetter.VertexColors => _VertexColors;
        #endregion

        #endregion
        #region Layers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<BaseLayer> _Layers = new ExtendedList<BaseLayer>();
        public ExtendedList<BaseLayer> Layers
        {
            get => this._Layers;
            init => this._Layers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IBaseLayerGetter> ILandscapeGetter.Layers => _Layers;
        #endregion

        #endregion
        #region Textures
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ILandscapeTextureGetter>>? _Textures;
        public ExtendedList<IFormLinkGetter<ILandscapeTextureGetter>>? Textures
        {
            get => this._Textures;
            set => this._Textures = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ILandscapeTextureGetter>>? ILandscapeGetter.Textures => _Textures;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LandscapeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Flags = initialValue;
                this.VertexNormals = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.VertexHeightMap = new MaskItem<TItem, LandscapeVertexHeightMap.Mask<TItem>?>(initialValue, new LandscapeVertexHeightMap.Mask<TItem>(initialValue));
                this.VertexColors = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.Layers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BaseLayer.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, BaseLayer.Mask<TItem>?>>());
                this.Textures = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem Flags,
                TItem VertexNormals,
                TItem VertexHeightMap,
                TItem VertexColors,
                TItem Layers,
                TItem Textures)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.Flags = Flags;
                this.VertexNormals = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(VertexNormals, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.VertexHeightMap = new MaskItem<TItem, LandscapeVertexHeightMap.Mask<TItem>?>(VertexHeightMap, new LandscapeVertexHeightMap.Mask<TItem>(VertexHeightMap));
                this.VertexColors = new MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>(VertexColors, Enumerable.Empty<(P2Int Index, TItem Value)>());
                this.Layers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BaseLayer.Mask<TItem>?>>?>(Layers, Enumerable.Empty<MaskItemIndexed<TItem, BaseLayer.Mask<TItem>?>>());
                this.Textures = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Textures, Enumerable.Empty<(int Index, TItem Value)>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Flags;
            public MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>? VertexNormals;
            public MaskItem<TItem, LandscapeVertexHeightMap.Mask<TItem>?>? VertexHeightMap { get; set; }
            public MaskItem<TItem, IEnumerable<(P2Int Index, TItem Value)>?>? VertexColors;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, BaseLayer.Mask<TItem>?>>?>? Layers;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Textures;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.VertexNormals, rhs.VertexNormals)) return false;
                if (!object.Equals(this.VertexHeightMap, rhs.VertexHeightMap)) return false;
                if (!object.Equals(this.VertexColors, rhs.VertexColors)) return false;
                if (!object.Equals(this.Layers, rhs.Layers)) return false;
                if (!object.Equals(this.Textures, rhs.Textures)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Flags);
                hash.Add(this.VertexNormals);
                hash.Add(this.VertexHeightMap);
                hash.Add(this.VertexColors);
                hash.Add(this.Layers);
                hash.Add(this.Textures);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Flags)) return false;
                if (this.VertexNormals != null)
                {
                    if (!eval(this.VertexNormals.Overall)) return false;
                    if (this.VertexNormals.Specific != null)
                    {
                        foreach (var item in this.VertexNormals.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (VertexHeightMap != null)
                {
                    if (!eval(this.VertexHeightMap.Overall)) return false;
                    if (this.VertexHeightMap.Specific != null && !this.VertexHeightMap.Specific.All(eval)) return false;
                }
                if (this.VertexColors != null)
                {
                    if (!eval(this.VertexColors.Overall)) return false;
                    if (this.VertexColors.Specific != null)
                    {
                        foreach (var item in this.VertexColors.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Layers != null)
                {
                    if (!eval(this.Layers.Overall)) return false;
                    if (this.Layers.Specific != null)
                    {
                        foreach (var item in this.Layers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Textures != null)
                {
                    if (!eval(this.Textures.Overall)) return false;
                    if (this.Textures.Specific != null)
                    {
                        foreach (var item in this.Textures.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Flags)) return true;
                if (this.VertexNormals != null)
                {
                    if (eval(this.VertexNormals.Overall)) return true;
                    if (this.VertexNormals.Specific != null)
                    {
                        foreach (var item in this.VertexNormals.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (VertexHeightMap != null)
                {
                    if (eval(this.VertexHeightMap.Overall)) return true;
                    if (this.VertexHeightMap.Specific != null && this.VertexHeightMap.Specific.Any(eval)) return true;
                }
                if (this.VertexColors != null)
                {
                    if (eval(this.VertexColors.Overall)) return true;
                    if (this.VertexColors.Specific != null)
                    {
                        foreach (var item in this.VertexColors.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Layers != null)
                {
                    if (eval(this.Layers.Overall)) return true;
                    if (this.Layers.Specific != null)
                    {
                        foreach (var item in this.Layers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Textures != null)
                {
                    if (eval(this.Textures.Overall)) return true;
                    if (this.Textures.Specific != null)
                    {
                        foreach (var item in this.Textures.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Landscape.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Flags = eval(this.Flags);
                if (VertexNormals != null)
                {
                    obj.VertexNormals = new MaskItem<R, IEnumerable<(P2Int Index, R Value)>?>(eval(this.VertexNormals.Overall), Enumerable.Empty<(P2Int Index, R Value)>());
                    if (VertexNormals.Specific != null)
                    {
                        var l = new List<(P2Int Index, R Item)>();
                        obj.VertexNormals.Specific = l;
                        foreach (var item in VertexNormals.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.VertexHeightMap = this.VertexHeightMap == null ? null : new MaskItem<R, LandscapeVertexHeightMap.Mask<R>?>(eval(this.VertexHeightMap.Overall), this.VertexHeightMap.Specific?.Translate(eval));
                if (VertexColors != null)
                {
                    obj.VertexColors = new MaskItem<R, IEnumerable<(P2Int Index, R Value)>?>(eval(this.VertexColors.Overall), Enumerable.Empty<(P2Int Index, R Value)>());
                    if (VertexColors.Specific != null)
                    {
                        var l = new List<(P2Int Index, R Item)>();
                        obj.VertexColors.Specific = l;
                        foreach (var item in VertexColors.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Layers != null)
                {
                    obj.Layers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, BaseLayer.Mask<R>?>>?>(eval(this.Layers.Overall), Enumerable.Empty<MaskItemIndexed<R, BaseLayer.Mask<R>?>>());
                    if (Layers.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, BaseLayer.Mask<R>?>>();
                        obj.Layers.Specific = l;
                        foreach (var item in Layers.Specific)
                        {
                            MaskItemIndexed<R, BaseLayer.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, BaseLayer.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Textures != null)
                {
                    obj.Textures = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Textures.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Textures.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Textures.Specific = l;
                        foreach (var item in Textures.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Landscape.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Landscape.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Landscape.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if ((printMask?.VertexNormals?.Overall ?? true)
                        && VertexNormals is {} VertexNormalsItem)
                    {
                        sb.AppendLine("VertexNormals =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(VertexNormalsItem.Overall);
                            if (VertexNormalsItem.Specific != null)
                            {
                                foreach (var subItem in VertexNormalsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.VertexHeightMap?.Overall ?? true)
                    {
                        VertexHeightMap?.Print(sb);
                    }
                    if ((printMask?.VertexColors?.Overall ?? true)
                        && VertexColors is {} VertexColorsItem)
                    {
                        sb.AppendLine("VertexColors =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(VertexColorsItem.Overall);
                            if (VertexColorsItem.Specific != null)
                            {
                                foreach (var subItem in VertexColorsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Layers?.Overall ?? true)
                        && Layers is {} LayersItem)
                    {
                        sb.AppendLine("Layers =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LayersItem.Overall);
                            if (LayersItem.Specific != null)
                            {
                                foreach (var subItem in LayersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Textures?.Overall ?? true)
                        && Textures is {} TexturesItem)
                    {
                        sb.AppendLine("Textures =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TexturesItem.Overall);
                            if (TexturesItem.Specific != null)
                            {
                                foreach (var subItem in TexturesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Flags;
            public MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>? VertexNormals;
            public MaskItem<Exception?, LandscapeVertexHeightMap.ErrorMask?>? VertexHeightMap;
            public MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>? VertexColors;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BaseLayer.ErrorMask?>>?>? Layers;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Textures;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
                switch (enu)
                {
                    case Landscape_FieldIndex.Flags:
                        return Flags;
                    case Landscape_FieldIndex.VertexNormals:
                        return VertexNormals;
                    case Landscape_FieldIndex.VertexHeightMap:
                        return VertexHeightMap;
                    case Landscape_FieldIndex.VertexColors:
                        return VertexColors;
                    case Landscape_FieldIndex.Layers:
                        return Layers;
                    case Landscape_FieldIndex.Textures:
                        return Textures;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
                switch (enu)
                {
                    case Landscape_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case Landscape_FieldIndex.VertexNormals:
                        this.VertexNormals = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(ex, null);
                        break;
                    case Landscape_FieldIndex.VertexHeightMap:
                        this.VertexHeightMap = new MaskItem<Exception?, LandscapeVertexHeightMap.ErrorMask?>(ex, null);
                        break;
                    case Landscape_FieldIndex.VertexColors:
                        this.VertexColors = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(ex, null);
                        break;
                    case Landscape_FieldIndex.Layers:
                        this.Layers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BaseLayer.ErrorMask?>>?>(ex, null);
                        break;
                    case Landscape_FieldIndex.Textures:
                        this.Textures = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Landscape_FieldIndex enu = (Landscape_FieldIndex)index;
                switch (enu)
                {
                    case Landscape_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case Landscape_FieldIndex.VertexNormals:
                        this.VertexNormals = (MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>)obj;
                        break;
                    case Landscape_FieldIndex.VertexHeightMap:
                        this.VertexHeightMap = (MaskItem<Exception?, LandscapeVertexHeightMap.ErrorMask?>?)obj;
                        break;
                    case Landscape_FieldIndex.VertexColors:
                        this.VertexColors = (MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>)obj;
                        break;
                    case Landscape_FieldIndex.Layers:
                        this.Layers = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BaseLayer.ErrorMask?>>?>)obj;
                        break;
                    case Landscape_FieldIndex.Textures:
                        this.Textures = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Flags != null) return true;
                if (VertexNormals != null) return true;
                if (VertexHeightMap != null) return true;
                if (VertexColors != null) return true;
                if (Layers != null) return true;
                if (Textures != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Flags, "Flags");
                }
                if (VertexNormals is {} VertexNormalsItem)
                {
                    sb.AppendLine("VertexNormals =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(VertexNormalsItem.Overall);
                        if (VertexNormalsItem.Specific != null)
                        {
                            foreach (var subItem in VertexNormalsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                VertexHeightMap?.Print(sb);
                if (VertexColors is {} VertexColorsItem)
                {
                    sb.AppendLine("VertexColors =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(VertexColorsItem.Overall);
                        if (VertexColorsItem.Specific != null)
                        {
                            foreach (var subItem in VertexColorsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Layers is {} LayersItem)
                {
                    sb.AppendLine("Layers =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LayersItem.Overall);
                        if (LayersItem.Specific != null)
                        {
                            foreach (var subItem in LayersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Textures is {} TexturesItem)
                {
                    sb.AppendLine("Textures =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TexturesItem.Overall);
                        if (TexturesItem.Specific != null)
                        {
                            foreach (var subItem in TexturesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.VertexNormals = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.VertexNormals?.Overall, rhs.VertexNormals?.Overall), Noggog.ExceptionExt.Combine(this.VertexNormals?.Specific, rhs.VertexNormals?.Specific));
                ret.VertexHeightMap = this.VertexHeightMap.Combine(rhs.VertexHeightMap, (l, r) => l.Combine(r));
                ret.VertexColors = new MaskItem<Exception?, IEnumerable<(P2Int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.VertexColors?.Overall, rhs.VertexColors?.Overall), Noggog.ExceptionExt.Combine(this.VertexColors?.Specific, rhs.VertexColors?.Specific));
                ret.Layers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, BaseLayer.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Layers?.Overall, rhs.Layers?.Overall), Noggog.ExceptionExt.Combine(this.Layers?.Specific, rhs.Layers?.Specific));
                ret.Textures = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Textures?.Overall, rhs.Textures?.Overall), Noggog.ExceptionExt.Combine(this.Textures?.Specific, rhs.Textures?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Flags;
            public bool VertexNormals;
            public LandscapeVertexHeightMap.TranslationMask? VertexHeightMap;
            public bool VertexColors;
            public BaseLayer.TranslationMask? Layers;
            public bool Textures;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Flags = defaultOn;
                this.VertexNormals = defaultOn;
                this.VertexColors = defaultOn;
                this.Textures = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Flags, null));
                ret.Add((VertexNormals, null));
                ret.Add((VertexHeightMap != null ? VertexHeightMap.OnOverall : DefaultOn, VertexHeightMap?.GetCrystal()));
                ret.Add((VertexColors, null));
                ret.Add((Layers == null ? DefaultOn : !Layers.GetCrystal().CopyNothing, Layers?.GetCrystal()));
                ret.Add((Textures, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Landscape_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LandscapeCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => LandscapeSetterCommon.Instance.RemapLinks(this, mapping);
        public Landscape(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Landscape(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Landscape(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Landscape(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Landscape(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Landscape>.ToString(this);
        }

        protected override Type LinkType => typeof(ILandscape);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILandscapeGetter rhs) return false;
            return ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILandscapeGetter? obj)
        {
            return ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandscapeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LandscapeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Landscape CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Landscape();
            ((LandscapeSetterCommon)((ILandscapeGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Landscape item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LandscapeSetterCommon)((ILandscapeGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Landscape GetNew()
        {
            return new Landscape();
        }

    }
    #endregion

    #region Interface
    public partial interface ILandscape :
        IFormLinkContainer,
        ILandscapeGetter,
        ILoquiObjectSetter<ILandscapeInternal>,
        ISkyrimMajorRecordInternal
    {
        new Landscape.Flag? Flags { get; set; }
        new IArray2d<P3UInt8>? VertexNormals { get; set; }
        new LandscapeVertexHeightMap? VertexHeightMap { get; set; }
        new IArray2d<P3UInt8>? VertexColors { get; set; }
        new ExtendedList<BaseLayer> Layers { get; }
        new ExtendedList<IFormLinkGetter<ILandscapeTextureGetter>>? Textures { get; set; }
    }

    public partial interface ILandscapeInternal :
        ISkyrimMajorRecordInternal,
        ILandscape,
        ILandscapeGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.LAND)]
    public partial interface ILandscapeGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ILandscapeGetter>,
        IMapsToGetter<ILandscapeGetter>
    {
        static new ILoquiRegistration StaticRegistration => Landscape_Registration.Instance;
        Landscape.Flag? Flags { get; }
        IReadOnlyArray2d<P3UInt8>? VertexNormals { get; }
        ILandscapeVertexHeightMapGetter? VertexHeightMap { get; }
        IReadOnlyArray2d<P3UInt8>? VertexColors { get; }
        IReadOnlyList<IBaseLayerGetter> Layers { get; }
        IReadOnlyList<IFormLinkGetter<ILandscapeTextureGetter>>? Textures { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LandscapeMixIn
    {
        public static void Clear(this ILandscapeInternal item)
        {
            ((LandscapeSetterCommon)((ILandscapeGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Landscape.Mask<bool> GetEqualsMask(
            this ILandscapeGetter item,
            ILandscapeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILandscapeGetter item,
            string? name = null,
            Landscape.Mask<bool>? printMask = null)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILandscapeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Landscape.Mask<bool>? printMask = null)
        {
            ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILandscapeGetter item,
            ILandscapeGetter rhs,
            Landscape.TranslationMask? equalsMask = null)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILandscapeInternal lhs,
            ILandscapeGetter rhs,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LandscapeSetterTranslationCommon)((ILandscapeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Landscape.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILandscapeInternal lhs,
            ILandscapeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LandscapeSetterTranslationCommon)((ILandscapeGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Landscape DeepCopy(
            this ILandscapeGetter item,
            Landscape.TranslationMask? copyMask = null)
        {
            return ((LandscapeSetterTranslationCommon)((ILandscapeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Landscape DeepCopy(
            this ILandscapeGetter item,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? copyMask = null)
        {
            return ((LandscapeSetterTranslationCommon)((ILandscapeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Landscape DeepCopy(
            this ILandscapeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LandscapeSetterTranslationCommon)((ILandscapeGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Landscape Duplicate(
            this ILandscapeGetter item,
            FormKey formKey,
            Landscape.TranslationMask? copyMask = null)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Landscape Duplicate(
            this ILandscapeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILandscapeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LandscapeSetterCommon)((ILandscapeGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Landscape_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        Flags = 7,
        VertexNormals = 8,
        VertexHeightMap = 9,
        VertexColors = 10,
        Layers = 11,
        Textures = 12,
    }
    #endregion

    #region Registration
    internal partial class Landscape_Registration : ILoquiRegistration
    {
        public static readonly Landscape_Registration Instance = new Landscape_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 6;

        public const ushort FieldCount = 13;

        public static readonly Type MaskType = typeof(Landscape.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Landscape.ErrorMask);

        public static readonly Type ClassType = typeof(Landscape);

        public static readonly Type GetterType = typeof(ILandscapeGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILandscape);

        public static readonly Type? InternalSetterType = typeof(ILandscapeInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Landscape";

        public const string Name = "Landscape";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LAND;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.LAND);
            var all = RecordCollection.Factory(
                RecordTypes.LAND,
                RecordTypes.DATA,
                RecordTypes.VNML,
                RecordTypes.VHGT,
                RecordTypes.VCLR,
                RecordTypes.BTXT,
                RecordTypes.ATXT,
                RecordTypes.VTEX);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LandscapeBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LandscapeSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly LandscapeSetterCommon Instance = new LandscapeSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILandscapeInternal item)
        {
            ClearPartial();
            item.Flags = default;
            item.VertexNormals = null;
            item.VertexHeightMap = null;
            item.VertexColors = null;
            item.Layers.Clear();
            item.Textures = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ILandscapeInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILandscapeInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILandscape obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Layers.RemapLinks(mapping);
            obj.Textures?.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILandscapeInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ILandscapeInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LandscapeBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LandscapeBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Landscape)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Landscape)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class LandscapeCommon : SkyrimMajorRecordCommon
    {
        public new static readonly LandscapeCommon Instance = new LandscapeCommon();

        public Landscape.Mask<bool> GetEqualsMask(
            ILandscapeGetter item,
            ILandscapeGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Landscape.Mask<bool>(false);
            ((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILandscapeGetter item,
            ILandscapeGetter rhs,
            Landscape.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Flags = item.Flags == rhs.Flags;
            ret.VertexNormals = item.VertexNormals.Array2dEqualsHelper(
                rhs.VertexNormals,
                (l, r) => l.Equals(r),
                include);
            ret.VertexHeightMap = EqualsMaskHelper.EqualsHelper(
                item.VertexHeightMap,
                rhs.VertexHeightMap,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.VertexColors = item.VertexColors.Array2dEqualsHelper(
                rhs.VertexColors,
                (l, r) => l.Equals(r),
                include);
            ret.Layers = item.Layers.CollectionEqualsHelper(
                rhs.Layers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Textures = item.Textures.CollectionEqualsHelper(
                rhs.Textures,
                (l, r) => object.Equals(l, r),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ILandscapeGetter item,
            string? name = null,
            Landscape.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILandscapeGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Landscape.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Landscape =>");
            }
            else
            {
                sb.AppendLine($"{name} (Landscape) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILandscapeGetter item,
            StructuredStringBuilder sb,
            Landscape.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
            if ((printMask?.VertexNormals?.Overall ?? true)
                && item.VertexNormals is {} VertexNormalsItem)
            {
                sb.AppendLine("VertexNormals =>");
                using (sb.Brace())
                {
                    foreach (var subItem in VertexNormalsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value);
                        }
                    }
                }
            }
            if ((printMask?.VertexHeightMap?.Overall ?? true)
                && item.VertexHeightMap is {} VertexHeightMapItem)
            {
                VertexHeightMapItem?.Print(sb, "VertexHeightMap");
            }
            if ((printMask?.VertexColors?.Overall ?? true)
                && item.VertexColors is {} VertexColorsItem)
            {
                sb.AppendLine("VertexColors =>");
                using (sb.Brace())
                {
                    foreach (var subItem in VertexColorsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.Key);
                            sb.AppendItem(subItem.Value);
                        }
                    }
                }
            }
            if (printMask?.Layers?.Overall ?? true)
            {
                sb.AppendLine("Layers =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Layers)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Textures?.Overall ?? true)
                && item.Textures is {} TexturesItem)
            {
                sb.AppendLine("Textures =>");
                using (sb.Brace())
                {
                    foreach (var subItem in TexturesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
        }
        
        public static Landscape_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Landscape_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Landscape_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Landscape_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Landscape_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Landscape_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Landscape_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Landscape_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Landscape_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Landscape_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Landscape_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILandscapeGetter? lhs,
            ILandscapeGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Landscape_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexNormals) ?? true))
            {
                if (!lhs.VertexNormals.SequenceEqualNullable(rhs.VertexNormals)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexHeightMap) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VertexHeightMap, rhs.VertexHeightMap, out var lhsVertexHeightMap, out var rhsVertexHeightMap, out var isVertexHeightMapEqual))
                {
                    if (!((LandscapeVertexHeightMapCommon)((ILandscapeVertexHeightMapGetter)lhsVertexHeightMap).CommonInstance()!).Equals(lhsVertexHeightMap, rhsVertexHeightMap, equalsMask?.GetSubCrystal((int)Landscape_FieldIndex.VertexHeightMap))) return false;
                }
                else if (!isVertexHeightMapEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexColors) ?? true))
            {
                if (!lhs.VertexColors.SequenceEqualNullable(rhs.VertexColors)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Landscape_FieldIndex.Layers) ?? true))
            {
                if (!lhs.Layers.SequenceEqual(rhs.Layers, (l, r) => ((BaseLayerCommon)((IBaseLayerGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Landscape_FieldIndex.Layers)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Landscape_FieldIndex.Textures) ?? true))
            {
                if (!lhs.Textures.SequenceEqualNullable(rhs.Textures)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILandscapeGetter?)lhs,
                rhs: rhs as ILandscapeGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILandscapeGetter?)lhs,
                rhs: rhs as ILandscapeGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ILandscapeGetter item)
        {
            var hash = new HashCode();
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(item.VertexNormals);
            if (item.VertexHeightMap is {} VertexHeightMapitem)
            {
                hash.Add(VertexHeightMapitem);
            }
            hash.Add(item.VertexColors);
            hash.Add(item.Layers);
            hash.Add(item.Textures);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandscapeGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILandscapeGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Landscape.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILandscapeGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.Layers.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Textures is {} TexturesItem)
            {
                foreach (var item in TexturesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Landscape Duplicate(
            ILandscapeGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Landscape(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILandscapeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILandscapeGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class LandscapeSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly LandscapeSetterTranslationCommon Instance = new LandscapeSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILandscapeInternal item,
            ILandscapeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILandscape item,
            ILandscapeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexNormals) ?? true))
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.VertexNormals);
                try
                {
                    if ((rhs.VertexNormals != null))
                    {
                        item.VertexNormals = 
                            rhs.VertexNormals
                            .ShallowClone();
                    }
                    else
                    {
                        item.VertexNormals = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexHeightMap) ?? true))
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.VertexHeightMap);
                try
                {
                    if(rhs.VertexHeightMap is {} rhsVertexHeightMap)
                    {
                        item.VertexHeightMap = rhsVertexHeightMap.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Landscape_FieldIndex.VertexHeightMap));
                    }
                    else
                    {
                        item.VertexHeightMap = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.VertexColors) ?? true))
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.VertexColors);
                try
                {
                    if ((rhs.VertexColors != null))
                    {
                        item.VertexColors = 
                            rhs.VertexColors
                            .ShallowClone();
                    }
                    else
                    {
                        item.VertexColors = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.Layers) ?? true))
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.Layers);
                try
                {
                    item.Layers.SetTo(
                        rhs.Layers
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Landscape_FieldIndex.Textures) ?? true))
            {
                errorMask?.PushIndex((int)Landscape_FieldIndex.Textures);
                try
                {
                    if ((rhs.Textures != null))
                    {
                        item.Textures = 
                            rhs.Textures
                                .Select(b => (IFormLinkGetter<ILandscapeTextureGetter>)new FormLink<ILandscapeTextureGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ILandscapeTextureGetter>>();
                    }
                    else
                    {
                        item.Textures = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ILandscape item,
            ILandscapeGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandscapeInternal)item,
                rhs: (ILandscapeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandscape)item,
                rhs: (ILandscapeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandscapeInternal)item,
                rhs: (ILandscapeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILandscape)item,
                rhs: (ILandscapeGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Landscape DeepCopy(
            ILandscapeGetter item,
            Landscape.TranslationMask? copyMask = null)
        {
            Landscape ret = (Landscape)((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).GetNew();
            ((LandscapeSetterTranslationCommon)((ILandscapeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Landscape DeepCopy(
            ILandscapeGetter item,
            out Landscape.ErrorMask errorMask,
            Landscape.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Landscape ret = (Landscape)((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).GetNew();
            ((LandscapeSetterTranslationCommon)((ILandscapeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Landscape.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Landscape DeepCopy(
            ILandscapeGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Landscape ret = (Landscape)((LandscapeCommon)((ILandscapeGetter)item).CommonInstance()!).GetNew();
            ((LandscapeSetterTranslationCommon)((ILandscapeGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Landscape
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Landscape_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Landscape_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandscapeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LandscapeSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandscapeSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class LandscapeBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly LandscapeBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ILandscapeGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            EnumBinaryTranslation<Landscape.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.DATA));
            Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<P3UInt8>.Instance.Write(
                writer: writer,
                items: item.VertexNormals,
                recordType: translationParams.ConvertToCustom(RecordTypes.VNML),
                transl: P3UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            if (item.VertexHeightMap is {} VertexHeightMapItem)
            {
                ((LandscapeVertexHeightMapBinaryWriteTranslation)((IBinaryItem)VertexHeightMapItem).BinaryWriteTranslator).Write(
                    item: VertexHeightMapItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<P3UInt8>.Instance.Write(
                writer: writer,
                items: item.VertexColors,
                recordType: translationParams.ConvertToCustom(RecordTypes.VCLR),
                transl: P3UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IBaseLayerGetter>.Instance.Write(
                writer: writer,
                items: item.Layers,
                transl: (MutagenWriter subWriter, IBaseLayerGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((BaseLayerBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILandscapeTextureGetter>>.Instance.Write(
                writer: writer,
                items: item.Textures,
                recordType: translationParams.ConvertToCustom(RecordTypes.VTEX),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ILandscapeTextureGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
        }

        public void Write(
            MutagenWriter writer,
            ILandscapeGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.LAND,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILandscapeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILandscapeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILandscapeGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LandscapeBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly LandscapeBinaryCreateTranslation Instance = new LandscapeBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LAND;
        public static ParseResult FillBinaryRecordTypes(
            ILandscapeInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<Landscape.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Landscape_FieldIndex.Flags;
                }
                case RecordTypeInts.VNML:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VertexNormals = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<P3UInt8>.Instance.Parse(
                            reader: frame,
                            size: Landscape.VertexNormalsFixedSize,
                            transl: P3UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse)
                        ;
                    return (int)Landscape_FieldIndex.VertexNormals;
                }
                case RecordTypeInts.VHGT:
                {
                    item.VertexHeightMap = Mutagen.Bethesda.Skyrim.LandscapeVertexHeightMap.CreateFromBinary(frame: frame);
                    return (int)Landscape_FieldIndex.VertexHeightMap;
                }
                case RecordTypeInts.VCLR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.VertexColors = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.Array2dBinaryTranslation<P3UInt8>.Instance.Parse(
                            reader: frame,
                            size: Landscape.VertexColorsFixedSize,
                            transl: P3UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse)
                        ;
                    return (int)Landscape_FieldIndex.VertexColors;
                }
                case RecordTypeInts.BTXT:
                case RecordTypeInts.ATXT:
                {
                    item.Layers.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<BaseLayer>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: BaseLayer_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: (MutagenFrame r, RecordType header, [MaybeNullWhen(false)] out BaseLayer listSubItem, TypedParseParams translationParams) =>
                            {
                                switch (header.TypeInt)
                                {
                                    case RecordTypeInts.BTXT:
                                    {
                                        var ret = BaseLayer.TryCreateFromBinary(r, out var tmplistSubItem, translationParams);
                                        listSubItem = tmplistSubItem;
                                        return ret;
                                    }
                                    case RecordTypeInts.ATXT:
                                    {
                                        var ret = AlphaLayer.TryCreateFromBinary(r, out var tmplistSubItem, translationParams);
                                        listSubItem = tmplistSubItem;
                                        return ret;
                                    }
                                    default:
                                        throw new NotImplementedException();
                                }
                            }));
                    return (int)Landscape_FieldIndex.Layers;
                }
                case RecordTypeInts.VTEX:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Textures = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILandscapeTextureGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ILandscapeTextureGetter>>();
                    return (int)Landscape_FieldIndex.Textures;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class LandscapeBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class LandscapeBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ILandscapeGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Landscape_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Landscape_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LandscapeCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LandscapeSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => LandscapeCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LandscapeBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LandscapeBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ILandscape);


        #region Flags
        private int? _FlagsLocation;
        public Landscape.Flag? Flags => _FlagsLocation.HasValue ? (Landscape.Flag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(Landscape.Flag?);
        #endregion
        public IReadOnlyArray2d<P3UInt8>? VertexNormals { get; private set; }
        #region VertexHeightMap
        private RangeInt32? _VertexHeightMapLocation;
        public ILandscapeVertexHeightMapGetter? VertexHeightMap => _VertexHeightMapLocation.HasValue ? LandscapeVertexHeightMapBinaryOverlay.LandscapeVertexHeightMapFactory(_recordData.Slice(_VertexHeightMapLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyArray2d<P3UInt8>? VertexColors { get; private set; }
        public IReadOnlyList<IBaseLayerGetter> Layers { get; private set; } = Array.Empty<IBaseLayerGetter>();
        public IReadOnlyList<IFormLinkGetter<ILandscapeTextureGetter>>? Textures { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LandscapeBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILandscapeGetter LandscapeFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new LandscapeBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ILandscapeGetter LandscapeFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LandscapeFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)Landscape_FieldIndex.Flags;
                }
                case RecordTypeInts.VNML:
                {
                    var subMeta = stream.ReadSubrecordHeader();
                    this.VertexNormals = BinaryOverlayArray2d.Factory<P3UInt8>(
                        mem: stream.RemainingMemory.Slice(0, subMeta.ContentLength),
                        package: _package,
                        itemLength: 3,
                        size: Landscape.VertexNormalsFixedSize,
                        getter: (s, p) => P3UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(s));
                    return (int)Landscape_FieldIndex.VertexNormals;
                }
                case RecordTypeInts.VHGT:
                {
                    _VertexHeightMapLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Landscape_FieldIndex.VertexHeightMap;
                }
                case RecordTypeInts.VCLR:
                {
                    var subMeta = stream.ReadSubrecordHeader();
                    this.VertexColors = BinaryOverlayArray2d.Factory<P3UInt8>(
                        mem: stream.RemainingMemory.Slice(0, subMeta.ContentLength),
                        package: _package,
                        itemLength: 3,
                        size: Landscape.VertexColorsFixedSize,
                        getter: (s, p) => P3UInt8BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(s));
                    return (int)Landscape_FieldIndex.VertexColors;
                }
                case RecordTypeInts.BTXT:
                case RecordTypeInts.ATXT:
                {
                    this.Layers = this.ParseRepeatedTypelessSubrecord<IBaseLayerGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: BaseLayer_Registration.TriggerSpecs,
                        factory: (s, r, p, recConv) =>
                        {
                            switch (r.TypeInt)
                            {
                                case RecordTypeInts.BTXT:
                                    return BaseLayerBinaryOverlay.BaseLayerFactory(s, p);
                                case RecordTypeInts.ATXT:
                                    return AlphaLayerBinaryOverlay.AlphaLayerFactory(s, p);
                                default:
                                    throw new NotImplementedException();
                            }
                        });
                    return (int)Landscape_FieldIndex.Layers;
                }
                case RecordTypeInts.VTEX:
                {
                    this.Textures = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ILandscapeTextureGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ILandscapeTextureGetter>(p, s));
                    return (int)Landscape_FieldIndex.Textures;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LandscapeMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Landscape>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILandscapeGetter rhs) return false;
            return ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILandscapeGetter? obj)
        {
            return ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LandscapeCommon)((ILandscapeGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

