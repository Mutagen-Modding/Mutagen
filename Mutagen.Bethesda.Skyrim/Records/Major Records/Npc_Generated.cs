/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class Npc :
        SkyrimMajorRecord,
        IEquatable<INpcGetter>,
        ILoquiObjectSetter<Npc>,
        INpcInternal
    {
        #region Ctor
        protected Npc()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? INpcGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter INpcGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Configuration
        public NpcConfiguration Configuration { get; set; } = new NpcConfiguration();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcConfigurationGetter INpcGetter.Configuration => Configuration;
        #endregion
        #region Factions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<RankPlacement> _Factions = new ExtendedList<RankPlacement>();
        public ExtendedList<RankPlacement> Factions
        {
            get => this._Factions;
            init => this._Factions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IRankPlacementGetter> INpcGetter.Factions => _Factions;
        #endregion

        #endregion
        #region DeathItem
        private readonly IFormLinkNullable<ILeveledItemGetter> _DeathItem = new FormLinkNullable<ILeveledItemGetter>();
        public IFormLinkNullable<ILeveledItemGetter> DeathItem
        {
            get => _DeathItem;
            set => _DeathItem.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILeveledItemGetter> INpcGetter.DeathItem => this.DeathItem;
        #endregion
        #region Voice
        private readonly IFormLinkNullable<IVoiceTypeGetter> _Voice = new FormLinkNullable<IVoiceTypeGetter>();
        public IFormLinkNullable<IVoiceTypeGetter> Voice
        {
            get => _Voice;
            set => _Voice.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IVoiceTypeGetter> INpcGetter.Voice => this.Voice;
        #endregion
        #region Template
        private readonly IFormLinkNullable<INpcSpawnGetter> _Template = new FormLinkNullable<INpcSpawnGetter>();
        public IFormLinkNullable<INpcSpawnGetter> Template
        {
            get => _Template;
            set => _Template.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<INpcSpawnGetter> INpcGetter.Template => this.Template;
        #endregion
        #region Race
        private readonly IFormLink<IRaceGetter> _Race = new FormLink<IRaceGetter>();
        public IFormLink<IRaceGetter> Race
        {
            get => _Race;
            set => _Race.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IRaceGetter> INpcGetter.Race => this.Race;
        #endregion
        #region ActorEffect
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? _ActorEffect;
        public ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect
        {
            get => this._ActorEffect;
            set => this._ActorEffect = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? INpcGetter.ActorEffect => _ActorEffect;
        #endregion

        #endregion
        #region Destructible
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Destructible? _Destructible;
        /// <summary>
        /// Aspects: IHasDestructible
        /// </summary>
        public Destructible? Destructible
        {
            get => _Destructible;
            set => _Destructible = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? INpcGetter.Destructible => this.Destructible;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDestructibleGetter? IHasDestructibleGetter.Destructible => this.Destructible;
        #endregion
        #endregion
        #region WornArmor
        private readonly IFormLinkNullable<IArmorGetter> _WornArmor = new FormLinkNullable<IArmorGetter>();
        public IFormLinkNullable<IArmorGetter> WornArmor
        {
            get => _WornArmor;
            set => _WornArmor.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> INpcGetter.WornArmor => this.WornArmor;
        #endregion
        #region FarAwayModel
        private readonly IFormLinkNullable<IArmorGetter> _FarAwayModel = new FormLinkNullable<IArmorGetter>();
        public IFormLinkNullable<IArmorGetter> FarAwayModel
        {
            get => _FarAwayModel;
            set => _FarAwayModel.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IArmorGetter> INpcGetter.FarAwayModel => this.FarAwayModel;
        #endregion
        #region AttackRace
        private readonly IFormLinkNullable<IRaceGetter> _AttackRace = new FormLinkNullable<IRaceGetter>();
        public IFormLinkNullable<IRaceGetter> AttackRace
        {
            get => _AttackRace;
            set => _AttackRace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IRaceGetter> INpcGetter.AttackRace => this.AttackRace;
        #endregion
        #region Attacks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Attack> _Attacks = new ExtendedList<Attack>();
        public ExtendedList<Attack> Attacks
        {
            get => this._Attacks;
            init => this._Attacks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAttackGetter> INpcGetter.Attacks => _Attacks;
        #endregion

        #endregion
        #region SpectatorOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _SpectatorOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> SpectatorOverridePackageList
        {
            get => _SpectatorOverridePackageList;
            set => _SpectatorOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.SpectatorOverridePackageList => this.SpectatorOverridePackageList;
        #endregion
        #region ObserveDeadBodyOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _ObserveDeadBodyOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList
        {
            get => _ObserveDeadBodyOverridePackageList;
            set => _ObserveDeadBodyOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.ObserveDeadBodyOverridePackageList => this.ObserveDeadBodyOverridePackageList;
        #endregion
        #region GuardWarnOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _GuardWarnOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> GuardWarnOverridePackageList
        {
            get => _GuardWarnOverridePackageList;
            set => _GuardWarnOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.GuardWarnOverridePackageList => this.GuardWarnOverridePackageList;
        #endregion
        #region CombatOverridePackageList
        private readonly IFormLinkNullable<IFormListGetter> _CombatOverridePackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> CombatOverridePackageList
        {
            get => _CombatOverridePackageList;
            set => _CombatOverridePackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.CombatOverridePackageList => this.CombatOverridePackageList;
        #endregion
        #region Perks
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<PerkPlacement>? _Perks;
        public ExtendedList<PerkPlacement>? Perks
        {
            get => this._Perks;
            set => this._Perks = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPerkPlacementGetter>? INpcGetter.Perks => _Perks;
        #endregion

        #endregion
        #region Items
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<ContainerEntry>? _Items;
        public ExtendedList<ContainerEntry>? Items
        {
            get => this._Items;
            set => this._Items = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IContainerEntryGetter>? INpcGetter.Items => _Items;
        #endregion

        #endregion
        #region AIData
        public AIData AIData { get; set; } = new AIData();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAIDataGetter INpcGetter.AIData => AIData;
        #endregion
        #region Packages
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPackageGetter>> _Packages = new ExtendedList<IFormLinkGetter<IPackageGetter>>();
        public ExtendedList<IFormLinkGetter<IPackageGetter>> Packages
        {
            get => this._Packages;
            init => this._Packages = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPackageGetter>> INpcGetter.Packages => _Packages;
        #endregion

        #endregion
        #region Keywords
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IKeywordGetter>>? _Keywords;
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        public ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords
        {
            get => this._Keywords;
            set => this._Keywords = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? INpcGetter.Keywords => _Keywords;
        #endregion

        #region Aspects
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? IKeywordedGetter<IKeywordGetter>.Keywords => this.Keywords;
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #endregion
        #region Class
        private readonly IFormLink<IClassGetter> _Class = new FormLink<IClassGetter>();
        public IFormLink<IClassGetter> Class
        {
            get => _Class;
            set => _Class.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IClassGetter> INpcGetter.Class => this.Class;
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? INpcGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region ShortName
        public TranslatedString? ShortName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? INpcGetter.ShortName => this.ShortName;
        #endregion
        #region PlayerSkills
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PlayerSkills? _PlayerSkills;
        public PlayerSkills? PlayerSkills
        {
            get => _PlayerSkills;
            set => _PlayerSkills = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlayerSkillsGetter? INpcGetter.PlayerSkills => this.PlayerSkills;
        #endregion
        #region HeadParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IHeadPartGetter>> _HeadParts = new ExtendedList<IFormLinkGetter<IHeadPartGetter>>();
        public ExtendedList<IFormLinkGetter<IHeadPartGetter>> HeadParts
        {
            get => this._HeadParts;
            init => this._HeadParts = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IHeadPartGetter>> INpcGetter.HeadParts => _HeadParts;
        #endregion

        #endregion
        #region HairColor
        private readonly IFormLinkNullable<IColorRecordGetter> _HairColor = new FormLinkNullable<IColorRecordGetter>();
        public IFormLinkNullable<IColorRecordGetter> HairColor
        {
            get => _HairColor;
            set => _HairColor.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IColorRecordGetter> INpcGetter.HairColor => this.HairColor;
        #endregion
        #region CombatStyle
        private readonly IFormLinkNullable<ICombatStyleGetter> _CombatStyle = new FormLinkNullable<ICombatStyleGetter>();
        public IFormLinkNullable<ICombatStyleGetter> CombatStyle
        {
            get => _CombatStyle;
            set => _CombatStyle.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICombatStyleGetter> INpcGetter.CombatStyle => this.CombatStyle;
        #endregion
        #region GiftFilter
        private readonly IFormLinkNullable<IFormListGetter> _GiftFilter = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> GiftFilter
        {
            get => _GiftFilter;
            set => _GiftFilter.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.GiftFilter => this.GiftFilter;
        #endregion
        #region NAM5
        public static readonly UInt16 NAM5Default = 0xFF00;
        public UInt16 NAM5 { get; set; } = NAM5Default;
        #endregion
        #region Height
        public Single Height { get; set; } = default(Single);
        #endregion
        #region Weight
        public Single Weight { get; set; } = default(Single);
        #endregion
        #region SoundLevel
        public SoundLevel SoundLevel { get; set; } = default(SoundLevel);
        #endregion
        #region Sound
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ANpcSoundDefinition? _Sound;
        public ANpcSoundDefinition? Sound
        {
            get => _Sound;
            set => _Sound = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IANpcSoundDefinitionGetter? INpcGetter.Sound => this.Sound;
        #endregion
        #region DefaultOutfit
        private readonly IFormLinkNullable<IOutfitGetter> _DefaultOutfit = new FormLinkNullable<IOutfitGetter>();
        public IFormLinkNullable<IOutfitGetter> DefaultOutfit
        {
            get => _DefaultOutfit;
            set => _DefaultOutfit.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOutfitGetter> INpcGetter.DefaultOutfit => this.DefaultOutfit;
        #endregion
        #region SleepingOutfit
        private readonly IFormLinkNullable<IOutfitGetter> _SleepingOutfit = new FormLinkNullable<IOutfitGetter>();
        public IFormLinkNullable<IOutfitGetter> SleepingOutfit
        {
            get => _SleepingOutfit;
            set => _SleepingOutfit.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOutfitGetter> INpcGetter.SleepingOutfit => this.SleepingOutfit;
        #endregion
        #region DefaultPackageList
        private readonly IFormLinkNullable<IFormListGetter> _DefaultPackageList = new FormLinkNullable<IFormListGetter>();
        public IFormLinkNullable<IFormListGetter> DefaultPackageList
        {
            get => _DefaultPackageList;
            set => _DefaultPackageList.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFormListGetter> INpcGetter.DefaultPackageList => this.DefaultPackageList;
        #endregion
        #region CrimeFaction
        private readonly IFormLinkNullable<IFactionGetter> _CrimeFaction = new FormLinkNullable<IFactionGetter>();
        public IFormLinkNullable<IFactionGetter> CrimeFaction
        {
            get => _CrimeFaction;
            set => _CrimeFaction.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IFactionGetter> INpcGetter.CrimeFaction => this.CrimeFaction;
        #endregion
        #region HeadTexture
        private readonly IFormLinkNullable<ITextureSetGetter> _HeadTexture = new FormLinkNullable<ITextureSetGetter>();
        public IFormLinkNullable<ITextureSetGetter> HeadTexture
        {
            get => _HeadTexture;
            set => _HeadTexture.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ITextureSetGetter> INpcGetter.HeadTexture => this.HeadTexture;
        #endregion
        #region TextureLighting
        public Color? TextureLighting { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Color? INpcGetter.TextureLighting => this.TextureLighting;
        #endregion
        #region FaceMorph
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcFaceMorph? _FaceMorph;
        public NpcFaceMorph? FaceMorph
        {
            get => _FaceMorph;
            set => _FaceMorph = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcFaceMorphGetter? INpcGetter.FaceMorph => this.FaceMorph;
        #endregion
        #region FaceParts
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NpcFaceParts? _FaceParts;
        public NpcFaceParts? FaceParts
        {
            get => _FaceParts;
            set => _FaceParts = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INpcFacePartsGetter? INpcGetter.FaceParts => this.FaceParts;
        #endregion
        #region TintLayers
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TintLayer> _TintLayers = new ExtendedList<TintLayer>();
        public ExtendedList<TintLayer> TintLayers
        {
            get => this._TintLayers;
            init => this._TintLayers = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITintLayerGetter> INpcGetter.TintLayers => _TintLayers;
        #endregion

        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Configuration = new MaskItem<TItem, NpcConfiguration.Mask<TItem>?>(initialValue, new NpcConfiguration.Mask<TItem>(initialValue));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = initialValue;
                this.Voice = initialValue;
                this.Template = initialValue;
                this.Race = initialValue;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(initialValue, new Destructible.Mask<TItem>(initialValue));
                this.WornArmor = initialValue;
                this.FarAwayModel = initialValue;
                this.AttackRace = initialValue;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = initialValue;
                this.ObserveDeadBodyOverridePackageList = initialValue;
                this.GuardWarnOverridePackageList = initialValue;
                this.CombatOverridePackageList = initialValue;
                this.Perks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.AIData = new MaskItem<TItem, AIData.Mask<TItem>?>(initialValue, new AIData.Mask<TItem>(initialValue));
                this.Packages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Class = initialValue;
                this.Name = initialValue;
                this.ShortName = initialValue;
                this.PlayerSkills = new MaskItem<TItem, PlayerSkills.Mask<TItem>?>(initialValue, new PlayerSkills.Mask<TItem>(initialValue));
                this.HeadParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.HairColor = initialValue;
                this.CombatStyle = initialValue;
                this.GiftFilter = initialValue;
                this.NAM5 = initialValue;
                this.Height = initialValue;
                this.Weight = initialValue;
                this.SoundLevel = initialValue;
                this.Sound = new MaskItem<TItem, ANpcSoundDefinition.Mask<TItem>?>(initialValue, new ANpcSoundDefinition.Mask<TItem>(initialValue));
                this.DefaultOutfit = initialValue;
                this.SleepingOutfit = initialValue;
                this.DefaultPackageList = initialValue;
                this.CrimeFaction = initialValue;
                this.HeadTexture = initialValue;
                this.TextureLighting = initialValue;
                this.FaceMorph = new MaskItem<TItem, NpcFaceMorph.Mask<TItem>?>(initialValue, new NpcFaceMorph.Mask<TItem>(initialValue));
                this.FaceParts = new MaskItem<TItem, NpcFaceParts.Mask<TItem>?>(initialValue, new NpcFaceParts.Mask<TItem>(initialValue));
                this.TintLayers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintLayer.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TintLayer.Mask<TItem>?>>());
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem ObjectBounds,
                TItem Configuration,
                TItem Factions,
                TItem DeathItem,
                TItem Voice,
                TItem Template,
                TItem Race,
                TItem ActorEffect,
                TItem Destructible,
                TItem WornArmor,
                TItem FarAwayModel,
                TItem AttackRace,
                TItem Attacks,
                TItem SpectatorOverridePackageList,
                TItem ObserveDeadBodyOverridePackageList,
                TItem GuardWarnOverridePackageList,
                TItem CombatOverridePackageList,
                TItem Perks,
                TItem Items,
                TItem AIData,
                TItem Packages,
                TItem Keywords,
                TItem Class,
                TItem Name,
                TItem ShortName,
                TItem PlayerSkills,
                TItem HeadParts,
                TItem HairColor,
                TItem CombatStyle,
                TItem GiftFilter,
                TItem NAM5,
                TItem Height,
                TItem Weight,
                TItem SoundLevel,
                TItem Sound,
                TItem DefaultOutfit,
                TItem SleepingOutfit,
                TItem DefaultPackageList,
                TItem CrimeFaction,
                TItem HeadTexture,
                TItem TextureLighting,
                TItem FaceMorph,
                TItem FaceParts,
                TItem TintLayers)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Configuration = new MaskItem<TItem, NpcConfiguration.Mask<TItem>?>(Configuration, new NpcConfiguration.Mask<TItem>(Configuration));
                this.Factions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>(Factions, Enumerable.Empty<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>());
                this.DeathItem = DeathItem;
                this.Voice = Voice;
                this.Template = Template;
                this.Race = Race;
                this.ActorEffect = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(ActorEffect, Enumerable.Empty<(int Index, TItem Value)>());
                this.Destructible = new MaskItem<TItem, Destructible.Mask<TItem>?>(Destructible, new Destructible.Mask<TItem>(Destructible));
                this.WornArmor = WornArmor;
                this.FarAwayModel = FarAwayModel;
                this.AttackRace = AttackRace;
                this.Attacks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>(Attacks, Enumerable.Empty<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>());
                this.SpectatorOverridePackageList = SpectatorOverridePackageList;
                this.ObserveDeadBodyOverridePackageList = ObserveDeadBodyOverridePackageList;
                this.GuardWarnOverridePackageList = GuardWarnOverridePackageList;
                this.CombatOverridePackageList = CombatOverridePackageList;
                this.Perks = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>?>(Perks, Enumerable.Empty<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>());
                this.Items = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>(Items, Enumerable.Empty<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>());
                this.AIData = new MaskItem<TItem, AIData.Mask<TItem>?>(AIData, new AIData.Mask<TItem>(AIData));
                this.Packages = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Packages, Enumerable.Empty<(int Index, TItem Value)>());
                this.Keywords = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(Keywords, Enumerable.Empty<(int Index, TItem Value)>());
                this.Class = Class;
                this.Name = Name;
                this.ShortName = ShortName;
                this.PlayerSkills = new MaskItem<TItem, PlayerSkills.Mask<TItem>?>(PlayerSkills, new PlayerSkills.Mask<TItem>(PlayerSkills));
                this.HeadParts = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(HeadParts, Enumerable.Empty<(int Index, TItem Value)>());
                this.HairColor = HairColor;
                this.CombatStyle = CombatStyle;
                this.GiftFilter = GiftFilter;
                this.NAM5 = NAM5;
                this.Height = Height;
                this.Weight = Weight;
                this.SoundLevel = SoundLevel;
                this.Sound = new MaskItem<TItem, ANpcSoundDefinition.Mask<TItem>?>(Sound, new ANpcSoundDefinition.Mask<TItem>(Sound));
                this.DefaultOutfit = DefaultOutfit;
                this.SleepingOutfit = SleepingOutfit;
                this.DefaultPackageList = DefaultPackageList;
                this.CrimeFaction = CrimeFaction;
                this.HeadTexture = HeadTexture;
                this.TextureLighting = TextureLighting;
                this.FaceMorph = new MaskItem<TItem, NpcFaceMorph.Mask<TItem>?>(FaceMorph, new NpcFaceMorph.Mask<TItem>(FaceMorph));
                this.FaceParts = new MaskItem<TItem, NpcFaceParts.Mask<TItem>?>(FaceParts, new NpcFaceParts.Mask<TItem>(FaceParts));
                this.TintLayers = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintLayer.Mask<TItem>?>>?>(TintLayers, Enumerable.Empty<MaskItemIndexed<TItem, TintLayer.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public MaskItem<TItem, NpcConfiguration.Mask<TItem>?>? Configuration { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, RankPlacement.Mask<TItem>?>>?>? Factions;
            public TItem DeathItem;
            public TItem Voice;
            public TItem Template;
            public TItem Race;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? ActorEffect;
            public MaskItem<TItem, Destructible.Mask<TItem>?>? Destructible { get; set; }
            public TItem WornArmor;
            public TItem FarAwayModel;
            public TItem AttackRace;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Attack.Mask<TItem>?>>?>? Attacks;
            public TItem SpectatorOverridePackageList;
            public TItem ObserveDeadBodyOverridePackageList;
            public TItem GuardWarnOverridePackageList;
            public TItem CombatOverridePackageList;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, PerkPlacement.Mask<TItem>?>>?>? Perks;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, ContainerEntry.Mask<TItem>?>>?>? Items;
            public MaskItem<TItem, AIData.Mask<TItem>?>? AIData { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Packages;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? Keywords;
            public TItem Class;
            public TItem Name;
            public TItem ShortName;
            public MaskItem<TItem, PlayerSkills.Mask<TItem>?>? PlayerSkills { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? HeadParts;
            public TItem HairColor;
            public TItem CombatStyle;
            public TItem GiftFilter;
            public TItem NAM5;
            public TItem Height;
            public TItem Weight;
            public TItem SoundLevel;
            public MaskItem<TItem, ANpcSoundDefinition.Mask<TItem>?>? Sound { get; set; }
            public TItem DefaultOutfit;
            public TItem SleepingOutfit;
            public TItem DefaultPackageList;
            public TItem CrimeFaction;
            public TItem HeadTexture;
            public TItem TextureLighting;
            public MaskItem<TItem, NpcFaceMorph.Mask<TItem>?>? FaceMorph { get; set; }
            public MaskItem<TItem, NpcFaceParts.Mask<TItem>?>? FaceParts { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintLayer.Mask<TItem>?>>?>? TintLayers;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Configuration, rhs.Configuration)) return false;
                if (!object.Equals(this.Factions, rhs.Factions)) return false;
                if (!object.Equals(this.DeathItem, rhs.DeathItem)) return false;
                if (!object.Equals(this.Voice, rhs.Voice)) return false;
                if (!object.Equals(this.Template, rhs.Template)) return false;
                if (!object.Equals(this.Race, rhs.Race)) return false;
                if (!object.Equals(this.ActorEffect, rhs.ActorEffect)) return false;
                if (!object.Equals(this.Destructible, rhs.Destructible)) return false;
                if (!object.Equals(this.WornArmor, rhs.WornArmor)) return false;
                if (!object.Equals(this.FarAwayModel, rhs.FarAwayModel)) return false;
                if (!object.Equals(this.AttackRace, rhs.AttackRace)) return false;
                if (!object.Equals(this.Attacks, rhs.Attacks)) return false;
                if (!object.Equals(this.SpectatorOverridePackageList, rhs.SpectatorOverridePackageList)) return false;
                if (!object.Equals(this.ObserveDeadBodyOverridePackageList, rhs.ObserveDeadBodyOverridePackageList)) return false;
                if (!object.Equals(this.GuardWarnOverridePackageList, rhs.GuardWarnOverridePackageList)) return false;
                if (!object.Equals(this.CombatOverridePackageList, rhs.CombatOverridePackageList)) return false;
                if (!object.Equals(this.Perks, rhs.Perks)) return false;
                if (!object.Equals(this.Items, rhs.Items)) return false;
                if (!object.Equals(this.AIData, rhs.AIData)) return false;
                if (!object.Equals(this.Packages, rhs.Packages)) return false;
                if (!object.Equals(this.Keywords, rhs.Keywords)) return false;
                if (!object.Equals(this.Class, rhs.Class)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.ShortName, rhs.ShortName)) return false;
                if (!object.Equals(this.PlayerSkills, rhs.PlayerSkills)) return false;
                if (!object.Equals(this.HeadParts, rhs.HeadParts)) return false;
                if (!object.Equals(this.HairColor, rhs.HairColor)) return false;
                if (!object.Equals(this.CombatStyle, rhs.CombatStyle)) return false;
                if (!object.Equals(this.GiftFilter, rhs.GiftFilter)) return false;
                if (!object.Equals(this.NAM5, rhs.NAM5)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.Weight, rhs.Weight)) return false;
                if (!object.Equals(this.SoundLevel, rhs.SoundLevel)) return false;
                if (!object.Equals(this.Sound, rhs.Sound)) return false;
                if (!object.Equals(this.DefaultOutfit, rhs.DefaultOutfit)) return false;
                if (!object.Equals(this.SleepingOutfit, rhs.SleepingOutfit)) return false;
                if (!object.Equals(this.DefaultPackageList, rhs.DefaultPackageList)) return false;
                if (!object.Equals(this.CrimeFaction, rhs.CrimeFaction)) return false;
                if (!object.Equals(this.HeadTexture, rhs.HeadTexture)) return false;
                if (!object.Equals(this.TextureLighting, rhs.TextureLighting)) return false;
                if (!object.Equals(this.FaceMorph, rhs.FaceMorph)) return false;
                if (!object.Equals(this.FaceParts, rhs.FaceParts)) return false;
                if (!object.Equals(this.TintLayers, rhs.TintLayers)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.ObjectBounds);
                hash.Add(this.Configuration);
                hash.Add(this.Factions);
                hash.Add(this.DeathItem);
                hash.Add(this.Voice);
                hash.Add(this.Template);
                hash.Add(this.Race);
                hash.Add(this.ActorEffect);
                hash.Add(this.Destructible);
                hash.Add(this.WornArmor);
                hash.Add(this.FarAwayModel);
                hash.Add(this.AttackRace);
                hash.Add(this.Attacks);
                hash.Add(this.SpectatorOverridePackageList);
                hash.Add(this.ObserveDeadBodyOverridePackageList);
                hash.Add(this.GuardWarnOverridePackageList);
                hash.Add(this.CombatOverridePackageList);
                hash.Add(this.Perks);
                hash.Add(this.Items);
                hash.Add(this.AIData);
                hash.Add(this.Packages);
                hash.Add(this.Keywords);
                hash.Add(this.Class);
                hash.Add(this.Name);
                hash.Add(this.ShortName);
                hash.Add(this.PlayerSkills);
                hash.Add(this.HeadParts);
                hash.Add(this.HairColor);
                hash.Add(this.CombatStyle);
                hash.Add(this.GiftFilter);
                hash.Add(this.NAM5);
                hash.Add(this.Height);
                hash.Add(this.Weight);
                hash.Add(this.SoundLevel);
                hash.Add(this.Sound);
                hash.Add(this.DefaultOutfit);
                hash.Add(this.SleepingOutfit);
                hash.Add(this.DefaultPackageList);
                hash.Add(this.CrimeFaction);
                hash.Add(this.HeadTexture);
                hash.Add(this.TextureLighting);
                hash.Add(this.FaceMorph);
                hash.Add(this.FaceParts);
                hash.Add(this.TintLayers);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (Configuration != null)
                {
                    if (!eval(this.Configuration.Overall)) return false;
                    if (this.Configuration.Specific != null && !this.Configuration.Specific.All(eval)) return false;
                }
                if (this.Factions != null)
                {
                    if (!eval(this.Factions.Overall)) return false;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.DeathItem)) return false;
                if (!eval(this.Voice)) return false;
                if (!eval(this.Template)) return false;
                if (!eval(this.Race)) return false;
                if (this.ActorEffect != null)
                {
                    if (!eval(this.ActorEffect.Overall)) return false;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Destructible != null)
                {
                    if (!eval(this.Destructible.Overall)) return false;
                    if (this.Destructible.Specific != null && !this.Destructible.Specific.All(eval)) return false;
                }
                if (!eval(this.WornArmor)) return false;
                if (!eval(this.FarAwayModel)) return false;
                if (!eval(this.AttackRace)) return false;
                if (this.Attacks != null)
                {
                    if (!eval(this.Attacks.Overall)) return false;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.SpectatorOverridePackageList)) return false;
                if (!eval(this.ObserveDeadBodyOverridePackageList)) return false;
                if (!eval(this.GuardWarnOverridePackageList)) return false;
                if (!eval(this.CombatOverridePackageList)) return false;
                if (this.Perks != null)
                {
                    if (!eval(this.Perks.Overall)) return false;
                    if (this.Perks.Specific != null)
                    {
                        foreach (var item in this.Perks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (!eval(this.Items.Overall)) return false;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AIData != null)
                {
                    if (!eval(this.AIData.Overall)) return false;
                    if (this.AIData.Specific != null && !this.AIData.Specific.All(eval)) return false;
                }
                if (this.Packages != null)
                {
                    if (!eval(this.Packages.Overall)) return false;
                    if (this.Packages.Specific != null)
                    {
                        foreach (var item in this.Packages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (!eval(this.Keywords.Overall)) return false;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Class)) return false;
                if (!eval(this.Name)) return false;
                if (!eval(this.ShortName)) return false;
                if (PlayerSkills != null)
                {
                    if (!eval(this.PlayerSkills.Overall)) return false;
                    if (this.PlayerSkills.Specific != null && !this.PlayerSkills.Specific.All(eval)) return false;
                }
                if (this.HeadParts != null)
                {
                    if (!eval(this.HeadParts.Overall)) return false;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.HairColor)) return false;
                if (!eval(this.CombatStyle)) return false;
                if (!eval(this.GiftFilter)) return false;
                if (!eval(this.NAM5)) return false;
                if (!eval(this.Height)) return false;
                if (!eval(this.Weight)) return false;
                if (!eval(this.SoundLevel)) return false;
                if (Sound != null)
                {
                    if (!eval(this.Sound.Overall)) return false;
                    if (this.Sound.Specific != null && !this.Sound.Specific.All(eval)) return false;
                }
                if (!eval(this.DefaultOutfit)) return false;
                if (!eval(this.SleepingOutfit)) return false;
                if (!eval(this.DefaultPackageList)) return false;
                if (!eval(this.CrimeFaction)) return false;
                if (!eval(this.HeadTexture)) return false;
                if (!eval(this.TextureLighting)) return false;
                if (FaceMorph != null)
                {
                    if (!eval(this.FaceMorph.Overall)) return false;
                    if (this.FaceMorph.Specific != null && !this.FaceMorph.Specific.All(eval)) return false;
                }
                if (FaceParts != null)
                {
                    if (!eval(this.FaceParts.Overall)) return false;
                    if (this.FaceParts.Specific != null && !this.FaceParts.Specific.All(eval)) return false;
                }
                if (this.TintLayers != null)
                {
                    if (!eval(this.TintLayers.Overall)) return false;
                    if (this.TintLayers.Specific != null)
                    {
                        foreach (var item in this.TintLayers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (Configuration != null)
                {
                    if (eval(this.Configuration.Overall)) return true;
                    if (this.Configuration.Specific != null && this.Configuration.Specific.Any(eval)) return true;
                }
                if (this.Factions != null)
                {
                    if (eval(this.Factions.Overall)) return true;
                    if (this.Factions.Specific != null)
                    {
                        foreach (var item in this.Factions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.DeathItem)) return true;
                if (eval(this.Voice)) return true;
                if (eval(this.Template)) return true;
                if (eval(this.Race)) return true;
                if (this.ActorEffect != null)
                {
                    if (eval(this.ActorEffect.Overall)) return true;
                    if (this.ActorEffect.Specific != null)
                    {
                        foreach (var item in this.ActorEffect.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (Destructible != null)
                {
                    if (eval(this.Destructible.Overall)) return true;
                    if (this.Destructible.Specific != null && this.Destructible.Specific.Any(eval)) return true;
                }
                if (eval(this.WornArmor)) return true;
                if (eval(this.FarAwayModel)) return true;
                if (eval(this.AttackRace)) return true;
                if (this.Attacks != null)
                {
                    if (eval(this.Attacks.Overall)) return true;
                    if (this.Attacks.Specific != null)
                    {
                        foreach (var item in this.Attacks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.SpectatorOverridePackageList)) return true;
                if (eval(this.ObserveDeadBodyOverridePackageList)) return true;
                if (eval(this.GuardWarnOverridePackageList)) return true;
                if (eval(this.CombatOverridePackageList)) return true;
                if (this.Perks != null)
                {
                    if (eval(this.Perks.Overall)) return true;
                    if (this.Perks.Specific != null)
                    {
                        foreach (var item in this.Perks.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.Items != null)
                {
                    if (eval(this.Items.Overall)) return true;
                    if (this.Items.Specific != null)
                    {
                        foreach (var item in this.Items.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (AIData != null)
                {
                    if (eval(this.AIData.Overall)) return true;
                    if (this.AIData.Specific != null && this.AIData.Specific.Any(eval)) return true;
                }
                if (this.Packages != null)
                {
                    if (eval(this.Packages.Overall)) return true;
                    if (this.Packages.Specific != null)
                    {
                        foreach (var item in this.Packages.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (this.Keywords != null)
                {
                    if (eval(this.Keywords.Overall)) return true;
                    if (this.Keywords.Specific != null)
                    {
                        foreach (var item in this.Keywords.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Class)) return true;
                if (eval(this.Name)) return true;
                if (eval(this.ShortName)) return true;
                if (PlayerSkills != null)
                {
                    if (eval(this.PlayerSkills.Overall)) return true;
                    if (this.PlayerSkills.Specific != null && this.PlayerSkills.Specific.Any(eval)) return true;
                }
                if (this.HeadParts != null)
                {
                    if (eval(this.HeadParts.Overall)) return true;
                    if (this.HeadParts.Specific != null)
                    {
                        foreach (var item in this.HeadParts.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.HairColor)) return true;
                if (eval(this.CombatStyle)) return true;
                if (eval(this.GiftFilter)) return true;
                if (eval(this.NAM5)) return true;
                if (eval(this.Height)) return true;
                if (eval(this.Weight)) return true;
                if (eval(this.SoundLevel)) return true;
                if (Sound != null)
                {
                    if (eval(this.Sound.Overall)) return true;
                    if (this.Sound.Specific != null && this.Sound.Specific.Any(eval)) return true;
                }
                if (eval(this.DefaultOutfit)) return true;
                if (eval(this.SleepingOutfit)) return true;
                if (eval(this.DefaultPackageList)) return true;
                if (eval(this.CrimeFaction)) return true;
                if (eval(this.HeadTexture)) return true;
                if (eval(this.TextureLighting)) return true;
                if (FaceMorph != null)
                {
                    if (eval(this.FaceMorph.Overall)) return true;
                    if (this.FaceMorph.Specific != null && this.FaceMorph.Specific.Any(eval)) return true;
                }
                if (FaceParts != null)
                {
                    if (eval(this.FaceParts.Overall)) return true;
                    if (this.FaceParts.Specific != null && this.FaceParts.Specific.Any(eval)) return true;
                }
                if (this.TintLayers != null)
                {
                    if (eval(this.TintLayers.Overall)) return true;
                    if (this.TintLayers.Specific != null)
                    {
                        foreach (var item in this.TintLayers.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new Npc.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Configuration = this.Configuration == null ? null : new MaskItem<R, NpcConfiguration.Mask<R>?>(eval(this.Configuration.Overall), this.Configuration.Specific?.Translate(eval));
                if (Factions != null)
                {
                    obj.Factions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, RankPlacement.Mask<R>?>>?>(eval(this.Factions.Overall), Enumerable.Empty<MaskItemIndexed<R, RankPlacement.Mask<R>?>>());
                    if (Factions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, RankPlacement.Mask<R>?>>();
                        obj.Factions.Specific = l;
                        foreach (var item in Factions.Specific)
                        {
                            MaskItemIndexed<R, RankPlacement.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, RankPlacement.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.DeathItem = eval(this.DeathItem);
                obj.Voice = eval(this.Voice);
                obj.Template = eval(this.Template);
                obj.Race = eval(this.Race);
                if (ActorEffect != null)
                {
                    obj.ActorEffect = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.ActorEffect.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (ActorEffect.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.ActorEffect.Specific = l;
                        foreach (var item in ActorEffect.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Destructible = this.Destructible == null ? null : new MaskItem<R, Destructible.Mask<R>?>(eval(this.Destructible.Overall), this.Destructible.Specific?.Translate(eval));
                obj.WornArmor = eval(this.WornArmor);
                obj.FarAwayModel = eval(this.FarAwayModel);
                obj.AttackRace = eval(this.AttackRace);
                if (Attacks != null)
                {
                    obj.Attacks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Attack.Mask<R>?>>?>(eval(this.Attacks.Overall), Enumerable.Empty<MaskItemIndexed<R, Attack.Mask<R>?>>());
                    if (Attacks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Attack.Mask<R>?>>();
                        obj.Attacks.Specific = l;
                        foreach (var item in Attacks.Specific)
                        {
                            MaskItemIndexed<R, Attack.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Attack.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.SpectatorOverridePackageList = eval(this.SpectatorOverridePackageList);
                obj.ObserveDeadBodyOverridePackageList = eval(this.ObserveDeadBodyOverridePackageList);
                obj.GuardWarnOverridePackageList = eval(this.GuardWarnOverridePackageList);
                obj.CombatOverridePackageList = eval(this.CombatOverridePackageList);
                if (Perks != null)
                {
                    obj.Perks = new MaskItem<R, IEnumerable<MaskItemIndexed<R, PerkPlacement.Mask<R>?>>?>(eval(this.Perks.Overall), Enumerable.Empty<MaskItemIndexed<R, PerkPlacement.Mask<R>?>>());
                    if (Perks.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, PerkPlacement.Mask<R>?>>();
                        obj.Perks.Specific = l;
                        foreach (var item in Perks.Specific)
                        {
                            MaskItemIndexed<R, PerkPlacement.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, PerkPlacement.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (Items != null)
                {
                    obj.Items = new MaskItem<R, IEnumerable<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>?>(eval(this.Items.Overall), Enumerable.Empty<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>());
                    if (Items.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, ContainerEntry.Mask<R>?>>();
                        obj.Items.Specific = l;
                        foreach (var item in Items.Specific)
                        {
                            MaskItemIndexed<R, ContainerEntry.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, ContainerEntry.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.AIData = this.AIData == null ? null : new MaskItem<R, AIData.Mask<R>?>(eval(this.AIData.Overall), this.AIData.Specific?.Translate(eval));
                if (Packages != null)
                {
                    obj.Packages = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Packages.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Packages.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Packages.Specific = l;
                        foreach (var item in Packages.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                if (Keywords != null)
                {
                    obj.Keywords = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.Keywords.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (Keywords.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.Keywords.Specific = l;
                        foreach (var item in Keywords.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Class = eval(this.Class);
                obj.Name = eval(this.Name);
                obj.ShortName = eval(this.ShortName);
                obj.PlayerSkills = this.PlayerSkills == null ? null : new MaskItem<R, PlayerSkills.Mask<R>?>(eval(this.PlayerSkills.Overall), this.PlayerSkills.Specific?.Translate(eval));
                if (HeadParts != null)
                {
                    obj.HeadParts = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.HeadParts.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (HeadParts.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.HeadParts.Specific = l;
                        foreach (var item in HeadParts.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.HairColor = eval(this.HairColor);
                obj.CombatStyle = eval(this.CombatStyle);
                obj.GiftFilter = eval(this.GiftFilter);
                obj.NAM5 = eval(this.NAM5);
                obj.Height = eval(this.Height);
                obj.Weight = eval(this.Weight);
                obj.SoundLevel = eval(this.SoundLevel);
                obj.Sound = this.Sound == null ? null : new MaskItem<R, ANpcSoundDefinition.Mask<R>?>(eval(this.Sound.Overall), this.Sound.Specific?.Translate(eval));
                obj.DefaultOutfit = eval(this.DefaultOutfit);
                obj.SleepingOutfit = eval(this.SleepingOutfit);
                obj.DefaultPackageList = eval(this.DefaultPackageList);
                obj.CrimeFaction = eval(this.CrimeFaction);
                obj.HeadTexture = eval(this.HeadTexture);
                obj.TextureLighting = eval(this.TextureLighting);
                obj.FaceMorph = this.FaceMorph == null ? null : new MaskItem<R, NpcFaceMorph.Mask<R>?>(eval(this.FaceMorph.Overall), this.FaceMorph.Specific?.Translate(eval));
                obj.FaceParts = this.FaceParts == null ? null : new MaskItem<R, NpcFaceParts.Mask<R>?>(eval(this.FaceParts.Overall), this.FaceParts.Specific?.Translate(eval));
                if (TintLayers != null)
                {
                    obj.TintLayers = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TintLayer.Mask<R>?>>?>(eval(this.TintLayers.Overall), Enumerable.Empty<MaskItemIndexed<R, TintLayer.Mask<R>?>>());
                    if (TintLayers.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TintLayer.Mask<R>?>>();
                        obj.TintLayers.Specific = l;
                        foreach (var item in TintLayers.Specific)
                        {
                            MaskItemIndexed<R, TintLayer.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TintLayer.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(Npc.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, Npc.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(Npc.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Configuration?.Overall ?? true)
                    {
                        Configuration?.Print(sb);
                    }
                    if ((printMask?.Factions?.Overall ?? true)
                        && Factions is {} FactionsItem)
                    {
                        sb.AppendLine("Factions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(FactionsItem.Overall);
                            if (FactionsItem.Specific != null)
                            {
                                foreach (var subItem in FactionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.DeathItem ?? true)
                    {
                        sb.AppendItem(DeathItem, "DeathItem");
                    }
                    if (printMask?.Voice ?? true)
                    {
                        sb.AppendItem(Voice, "Voice");
                    }
                    if (printMask?.Template ?? true)
                    {
                        sb.AppendItem(Template, "Template");
                    }
                    if (printMask?.Race ?? true)
                    {
                        sb.AppendItem(Race, "Race");
                    }
                    if ((printMask?.ActorEffect?.Overall ?? true)
                        && ActorEffect is {} ActorEffectItem)
                    {
                        sb.AppendLine("ActorEffect =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ActorEffectItem.Overall);
                            if (ActorEffectItem.Specific != null)
                            {
                                foreach (var subItem in ActorEffectItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Destructible?.Overall ?? true)
                    {
                        Destructible?.Print(sb);
                    }
                    if (printMask?.WornArmor ?? true)
                    {
                        sb.AppendItem(WornArmor, "WornArmor");
                    }
                    if (printMask?.FarAwayModel ?? true)
                    {
                        sb.AppendItem(FarAwayModel, "FarAwayModel");
                    }
                    if (printMask?.AttackRace ?? true)
                    {
                        sb.AppendItem(AttackRace, "AttackRace");
                    }
                    if ((printMask?.Attacks?.Overall ?? true)
                        && Attacks is {} AttacksItem)
                    {
                        sb.AppendLine("Attacks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(AttacksItem.Overall);
                            if (AttacksItem.Specific != null)
                            {
                                foreach (var subItem in AttacksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.SpectatorOverridePackageList ?? true)
                    {
                        sb.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                    }
                    if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
                    {
                        sb.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                    }
                    if (printMask?.GuardWarnOverridePackageList ?? true)
                    {
                        sb.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                    }
                    if (printMask?.CombatOverridePackageList ?? true)
                    {
                        sb.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                    }
                    if ((printMask?.Perks?.Overall ?? true)
                        && Perks is {} PerksItem)
                    {
                        sb.AppendLine("Perks =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PerksItem.Overall);
                            if (PerksItem.Specific != null)
                            {
                                foreach (var subItem in PerksItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Items?.Overall ?? true)
                        && Items is {} ItemsItem)
                    {
                        sb.AppendLine("Items =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ItemsItem.Overall);
                            if (ItemsItem.Specific != null)
                            {
                                foreach (var subItem in ItemsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.AIData?.Overall ?? true)
                    {
                        AIData?.Print(sb);
                    }
                    if ((printMask?.Packages?.Overall ?? true)
                        && Packages is {} PackagesItem)
                    {
                        sb.AppendLine("Packages =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PackagesItem.Overall);
                            if (PackagesItem.Specific != null)
                            {
                                foreach (var subItem in PackagesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.Keywords?.Overall ?? true)
                        && Keywords is {} KeywordsItem)
                    {
                        sb.AppendLine("Keywords =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(KeywordsItem.Overall);
                            if (KeywordsItem.Specific != null)
                            {
                                foreach (var subItem in KeywordsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Class ?? true)
                    {
                        sb.AppendItem(Class, "Class");
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.ShortName ?? true)
                    {
                        sb.AppendItem(ShortName, "ShortName");
                    }
                    if (printMask?.PlayerSkills?.Overall ?? true)
                    {
                        PlayerSkills?.Print(sb);
                    }
                    if ((printMask?.HeadParts?.Overall ?? true)
                        && HeadParts is {} HeadPartsItem)
                    {
                        sb.AppendLine("HeadParts =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(HeadPartsItem.Overall);
                            if (HeadPartsItem.Specific != null)
                            {
                                foreach (var subItem in HeadPartsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.HairColor ?? true)
                    {
                        sb.AppendItem(HairColor, "HairColor");
                    }
                    if (printMask?.CombatStyle ?? true)
                    {
                        sb.AppendItem(CombatStyle, "CombatStyle");
                    }
                    if (printMask?.GiftFilter ?? true)
                    {
                        sb.AppendItem(GiftFilter, "GiftFilter");
                    }
                    if (printMask?.NAM5 ?? true)
                    {
                        sb.AppendItem(NAM5, "NAM5");
                    }
                    if (printMask?.Height ?? true)
                    {
                        sb.AppendItem(Height, "Height");
                    }
                    if (printMask?.Weight ?? true)
                    {
                        sb.AppendItem(Weight, "Weight");
                    }
                    if (printMask?.SoundLevel ?? true)
                    {
                        sb.AppendItem(SoundLevel, "SoundLevel");
                    }
                    if (printMask?.Sound?.Overall ?? true)
                    {
                        Sound?.Print(sb);
                    }
                    if (printMask?.DefaultOutfit ?? true)
                    {
                        sb.AppendItem(DefaultOutfit, "DefaultOutfit");
                    }
                    if (printMask?.SleepingOutfit ?? true)
                    {
                        sb.AppendItem(SleepingOutfit, "SleepingOutfit");
                    }
                    if (printMask?.DefaultPackageList ?? true)
                    {
                        sb.AppendItem(DefaultPackageList, "DefaultPackageList");
                    }
                    if (printMask?.CrimeFaction ?? true)
                    {
                        sb.AppendItem(CrimeFaction, "CrimeFaction");
                    }
                    if (printMask?.HeadTexture ?? true)
                    {
                        sb.AppendItem(HeadTexture, "HeadTexture");
                    }
                    if (printMask?.TextureLighting ?? true)
                    {
                        sb.AppendItem(TextureLighting, "TextureLighting");
                    }
                    if (printMask?.FaceMorph?.Overall ?? true)
                    {
                        FaceMorph?.Print(sb);
                    }
                    if (printMask?.FaceParts?.Overall ?? true)
                    {
                        FaceParts?.Print(sb);
                    }
                    if ((printMask?.TintLayers?.Overall ?? true)
                        && TintLayers is {} TintLayersItem)
                    {
                        sb.AppendLine("TintLayers =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(TintLayersItem.Overall);
                            if (TintLayersItem.Specific != null)
                            {
                                foreach (var subItem in TintLayersItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public MaskItem<Exception?, NpcConfiguration.ErrorMask?>? Configuration;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>? Factions;
            public Exception? DeathItem;
            public Exception? Voice;
            public Exception? Template;
            public Exception? Race;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? ActorEffect;
            public MaskItem<Exception?, Destructible.ErrorMask?>? Destructible;
            public Exception? WornArmor;
            public Exception? FarAwayModel;
            public Exception? AttackRace;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>? Attacks;
            public Exception? SpectatorOverridePackageList;
            public Exception? ObserveDeadBodyOverridePackageList;
            public Exception? GuardWarnOverridePackageList;
            public Exception? CombatOverridePackageList;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>? Perks;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>? Items;
            public MaskItem<Exception?, AIData.ErrorMask?>? AIData;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Packages;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? Keywords;
            public Exception? Class;
            public Exception? Name;
            public Exception? ShortName;
            public MaskItem<Exception?, PlayerSkills.ErrorMask?>? PlayerSkills;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? HeadParts;
            public Exception? HairColor;
            public Exception? CombatStyle;
            public Exception? GiftFilter;
            public Exception? NAM5;
            public Exception? Height;
            public Exception? Weight;
            public Exception? SoundLevel;
            public MaskItem<Exception?, ANpcSoundDefinition.ErrorMask?>? Sound;
            public Exception? DefaultOutfit;
            public Exception? SleepingOutfit;
            public Exception? DefaultPackageList;
            public Exception? CrimeFaction;
            public Exception? HeadTexture;
            public Exception? TextureLighting;
            public MaskItem<Exception?, NpcFaceMorph.ErrorMask?>? FaceMorph;
            public MaskItem<Exception?, NpcFaceParts.ErrorMask?>? FaceParts;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintLayer.ErrorMask?>>?>? TintLayers;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case Npc_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case Npc_FieldIndex.Configuration:
                        return Configuration;
                    case Npc_FieldIndex.Factions:
                        return Factions;
                    case Npc_FieldIndex.DeathItem:
                        return DeathItem;
                    case Npc_FieldIndex.Voice:
                        return Voice;
                    case Npc_FieldIndex.Template:
                        return Template;
                    case Npc_FieldIndex.Race:
                        return Race;
                    case Npc_FieldIndex.ActorEffect:
                        return ActorEffect;
                    case Npc_FieldIndex.Destructible:
                        return Destructible;
                    case Npc_FieldIndex.WornArmor:
                        return WornArmor;
                    case Npc_FieldIndex.FarAwayModel:
                        return FarAwayModel;
                    case Npc_FieldIndex.AttackRace:
                        return AttackRace;
                    case Npc_FieldIndex.Attacks:
                        return Attacks;
                    case Npc_FieldIndex.SpectatorOverridePackageList:
                        return SpectatorOverridePackageList;
                    case Npc_FieldIndex.ObserveDeadBodyOverridePackageList:
                        return ObserveDeadBodyOverridePackageList;
                    case Npc_FieldIndex.GuardWarnOverridePackageList:
                        return GuardWarnOverridePackageList;
                    case Npc_FieldIndex.CombatOverridePackageList:
                        return CombatOverridePackageList;
                    case Npc_FieldIndex.Perks:
                        return Perks;
                    case Npc_FieldIndex.Items:
                        return Items;
                    case Npc_FieldIndex.AIData:
                        return AIData;
                    case Npc_FieldIndex.Packages:
                        return Packages;
                    case Npc_FieldIndex.Keywords:
                        return Keywords;
                    case Npc_FieldIndex.Class:
                        return Class;
                    case Npc_FieldIndex.Name:
                        return Name;
                    case Npc_FieldIndex.ShortName:
                        return ShortName;
                    case Npc_FieldIndex.PlayerSkills:
                        return PlayerSkills;
                    case Npc_FieldIndex.HeadParts:
                        return HeadParts;
                    case Npc_FieldIndex.HairColor:
                        return HairColor;
                    case Npc_FieldIndex.CombatStyle:
                        return CombatStyle;
                    case Npc_FieldIndex.GiftFilter:
                        return GiftFilter;
                    case Npc_FieldIndex.NAM5:
                        return NAM5;
                    case Npc_FieldIndex.Height:
                        return Height;
                    case Npc_FieldIndex.Weight:
                        return Weight;
                    case Npc_FieldIndex.SoundLevel:
                        return SoundLevel;
                    case Npc_FieldIndex.Sound:
                        return Sound;
                    case Npc_FieldIndex.DefaultOutfit:
                        return DefaultOutfit;
                    case Npc_FieldIndex.SleepingOutfit:
                        return SleepingOutfit;
                    case Npc_FieldIndex.DefaultPackageList:
                        return DefaultPackageList;
                    case Npc_FieldIndex.CrimeFaction:
                        return CrimeFaction;
                    case Npc_FieldIndex.HeadTexture:
                        return HeadTexture;
                    case Npc_FieldIndex.TextureLighting:
                        return TextureLighting;
                    case Npc_FieldIndex.FaceMorph:
                        return FaceMorph;
                    case Npc_FieldIndex.FaceParts:
                        return FaceParts;
                    case Npc_FieldIndex.TintLayers:
                        return TintLayers;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Configuration:
                        this.Configuration = new MaskItem<Exception?, NpcConfiguration.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Factions:
                        this.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.DeathItem:
                        this.DeathItem = ex;
                        break;
                    case Npc_FieldIndex.Voice:
                        this.Voice = ex;
                        break;
                    case Npc_FieldIndex.Template:
                        this.Template = ex;
                        break;
                    case Npc_FieldIndex.Race:
                        this.Race = ex;
                        break;
                    case Npc_FieldIndex.ActorEffect:
                        this.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Destructible:
                        this.Destructible = new MaskItem<Exception?, Destructible.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.WornArmor:
                        this.WornArmor = ex;
                        break;
                    case Npc_FieldIndex.FarAwayModel:
                        this.FarAwayModel = ex;
                        break;
                    case Npc_FieldIndex.AttackRace:
                        this.AttackRace = ex;
                        break;
                    case Npc_FieldIndex.Attacks:
                        this.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = ex;
                        break;
                    case Npc_FieldIndex.Perks:
                        this.Perks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Items:
                        this.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(ex, null);
                        break;
                    case Npc_FieldIndex.AIData:
                        this.AIData = new MaskItem<Exception?, AIData.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.Packages:
                        this.Packages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Keywords:
                        this.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.Class:
                        this.Class = ex;
                        break;
                    case Npc_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case Npc_FieldIndex.ShortName:
                        this.ShortName = ex;
                        break;
                    case Npc_FieldIndex.PlayerSkills:
                        this.PlayerSkills = new MaskItem<Exception?, PlayerSkills.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.HeadParts:
                        this.HeadParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case Npc_FieldIndex.HairColor:
                        this.HairColor = ex;
                        break;
                    case Npc_FieldIndex.CombatStyle:
                        this.CombatStyle = ex;
                        break;
                    case Npc_FieldIndex.GiftFilter:
                        this.GiftFilter = ex;
                        break;
                    case Npc_FieldIndex.NAM5:
                        this.NAM5 = ex;
                        break;
                    case Npc_FieldIndex.Height:
                        this.Height = ex;
                        break;
                    case Npc_FieldIndex.Weight:
                        this.Weight = ex;
                        break;
                    case Npc_FieldIndex.SoundLevel:
                        this.SoundLevel = ex;
                        break;
                    case Npc_FieldIndex.Sound:
                        this.Sound = new MaskItem<Exception?, ANpcSoundDefinition.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.DefaultOutfit:
                        this.DefaultOutfit = ex;
                        break;
                    case Npc_FieldIndex.SleepingOutfit:
                        this.SleepingOutfit = ex;
                        break;
                    case Npc_FieldIndex.DefaultPackageList:
                        this.DefaultPackageList = ex;
                        break;
                    case Npc_FieldIndex.CrimeFaction:
                        this.CrimeFaction = ex;
                        break;
                    case Npc_FieldIndex.HeadTexture:
                        this.HeadTexture = ex;
                        break;
                    case Npc_FieldIndex.TextureLighting:
                        this.TextureLighting = ex;
                        break;
                    case Npc_FieldIndex.FaceMorph:
                        this.FaceMorph = new MaskItem<Exception?, NpcFaceMorph.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.FaceParts:
                        this.FaceParts = new MaskItem<Exception?, NpcFaceParts.ErrorMask?>(ex, null);
                        break;
                    case Npc_FieldIndex.TintLayers:
                        this.TintLayers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintLayer.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                Npc_FieldIndex enu = (Npc_FieldIndex)index;
                switch (enu)
                {
                    case Npc_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Configuration:
                        this.Configuration = (MaskItem<Exception?, NpcConfiguration.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Factions:
                        this.Factions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.DeathItem:
                        this.DeathItem = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Voice:
                        this.Voice = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Template:
                        this.Template = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Race:
                        this.Race = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.ActorEffect:
                        this.ActorEffect = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Destructible:
                        this.Destructible = (MaskItem<Exception?, Destructible.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.WornArmor:
                        this.WornArmor = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FarAwayModel:
                        this.FarAwayModel = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.AttackRace:
                        this.AttackRace = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Attacks:
                        this.Attacks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.SpectatorOverridePackageList:
                        this.SpectatorOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.ObserveDeadBodyOverridePackageList:
                        this.ObserveDeadBodyOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.GuardWarnOverridePackageList:
                        this.GuardWarnOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CombatOverridePackageList:
                        this.CombatOverridePackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Perks:
                        this.Perks = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.Items:
                        this.Items = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>)obj;
                        break;
                    case Npc_FieldIndex.AIData:
                        this.AIData = (MaskItem<Exception?, AIData.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.Packages:
                        this.Packages = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Keywords:
                        this.Keywords = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.Class:
                        this.Class = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.ShortName:
                        this.ShortName = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.PlayerSkills:
                        this.PlayerSkills = (MaskItem<Exception?, PlayerSkills.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.HeadParts:
                        this.HeadParts = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case Npc_FieldIndex.HairColor:
                        this.HairColor = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CombatStyle:
                        this.CombatStyle = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.GiftFilter:
                        this.GiftFilter = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.NAM5:
                        this.NAM5 = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Height:
                        this.Height = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Weight:
                        this.Weight = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.SoundLevel:
                        this.SoundLevel = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.Sound:
                        this.Sound = (MaskItem<Exception?, ANpcSoundDefinition.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.DefaultOutfit:
                        this.DefaultOutfit = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.SleepingOutfit:
                        this.SleepingOutfit = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.DefaultPackageList:
                        this.DefaultPackageList = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.CrimeFaction:
                        this.CrimeFaction = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.HeadTexture:
                        this.HeadTexture = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.TextureLighting:
                        this.TextureLighting = (Exception?)obj;
                        break;
                    case Npc_FieldIndex.FaceMorph:
                        this.FaceMorph = (MaskItem<Exception?, NpcFaceMorph.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.FaceParts:
                        this.FaceParts = (MaskItem<Exception?, NpcFaceParts.ErrorMask?>?)obj;
                        break;
                    case Npc_FieldIndex.TintLayers:
                        this.TintLayers = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintLayer.ErrorMask?>>?>)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (ObjectBounds != null) return true;
                if (Configuration != null) return true;
                if (Factions != null) return true;
                if (DeathItem != null) return true;
                if (Voice != null) return true;
                if (Template != null) return true;
                if (Race != null) return true;
                if (ActorEffect != null) return true;
                if (Destructible != null) return true;
                if (WornArmor != null) return true;
                if (FarAwayModel != null) return true;
                if (AttackRace != null) return true;
                if (Attacks != null) return true;
                if (SpectatorOverridePackageList != null) return true;
                if (ObserveDeadBodyOverridePackageList != null) return true;
                if (GuardWarnOverridePackageList != null) return true;
                if (CombatOverridePackageList != null) return true;
                if (Perks != null) return true;
                if (Items != null) return true;
                if (AIData != null) return true;
                if (Packages != null) return true;
                if (Keywords != null) return true;
                if (Class != null) return true;
                if (Name != null) return true;
                if (ShortName != null) return true;
                if (PlayerSkills != null) return true;
                if (HeadParts != null) return true;
                if (HairColor != null) return true;
                if (CombatStyle != null) return true;
                if (GiftFilter != null) return true;
                if (NAM5 != null) return true;
                if (Height != null) return true;
                if (Weight != null) return true;
                if (SoundLevel != null) return true;
                if (Sound != null) return true;
                if (DefaultOutfit != null) return true;
                if (SleepingOutfit != null) return true;
                if (DefaultPackageList != null) return true;
                if (CrimeFaction != null) return true;
                if (HeadTexture != null) return true;
                if (TextureLighting != null) return true;
                if (FaceMorph != null) return true;
                if (FaceParts != null) return true;
                if (TintLayers != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                ObjectBounds?.Print(sb);
                Configuration?.Print(sb);
                if (Factions is {} FactionsItem)
                {
                    sb.AppendLine("Factions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(FactionsItem.Overall);
                        if (FactionsItem.Specific != null)
                        {
                            foreach (var subItem in FactionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(DeathItem, "DeathItem");
                }
                {
                    sb.AppendItem(Voice, "Voice");
                }
                {
                    sb.AppendItem(Template, "Template");
                }
                {
                    sb.AppendItem(Race, "Race");
                }
                if (ActorEffect is {} ActorEffectItem)
                {
                    sb.AppendLine("ActorEffect =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ActorEffectItem.Overall);
                        if (ActorEffectItem.Specific != null)
                        {
                            foreach (var subItem in ActorEffectItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                Destructible?.Print(sb);
                {
                    sb.AppendItem(WornArmor, "WornArmor");
                }
                {
                    sb.AppendItem(FarAwayModel, "FarAwayModel");
                }
                {
                    sb.AppendItem(AttackRace, "AttackRace");
                }
                if (Attacks is {} AttacksItem)
                {
                    sb.AppendLine("Attacks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(AttacksItem.Overall);
                        if (AttacksItem.Specific != null)
                        {
                            foreach (var subItem in AttacksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(SpectatorOverridePackageList, "SpectatorOverridePackageList");
                }
                {
                    sb.AppendItem(ObserveDeadBodyOverridePackageList, "ObserveDeadBodyOverridePackageList");
                }
                {
                    sb.AppendItem(GuardWarnOverridePackageList, "GuardWarnOverridePackageList");
                }
                {
                    sb.AppendItem(CombatOverridePackageList, "CombatOverridePackageList");
                }
                if (Perks is {} PerksItem)
                {
                    sb.AppendLine("Perks =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PerksItem.Overall);
                        if (PerksItem.Specific != null)
                        {
                            foreach (var subItem in PerksItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (Items is {} ItemsItem)
                {
                    sb.AppendLine("Items =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ItemsItem.Overall);
                        if (ItemsItem.Specific != null)
                        {
                            foreach (var subItem in ItemsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                AIData?.Print(sb);
                if (Packages is {} PackagesItem)
                {
                    sb.AppendLine("Packages =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PackagesItem.Overall);
                        if (PackagesItem.Specific != null)
                        {
                            foreach (var subItem in PackagesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                if (Keywords is {} KeywordsItem)
                {
                    sb.AppendLine("Keywords =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(KeywordsItem.Overall);
                        if (KeywordsItem.Specific != null)
                        {
                            foreach (var subItem in KeywordsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Class, "Class");
                }
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(ShortName, "ShortName");
                }
                PlayerSkills?.Print(sb);
                if (HeadParts is {} HeadPartsItem)
                {
                    sb.AppendLine("HeadParts =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(HeadPartsItem.Overall);
                        if (HeadPartsItem.Specific != null)
                        {
                            foreach (var subItem in HeadPartsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(HairColor, "HairColor");
                }
                {
                    sb.AppendItem(CombatStyle, "CombatStyle");
                }
                {
                    sb.AppendItem(GiftFilter, "GiftFilter");
                }
                {
                    sb.AppendItem(NAM5, "NAM5");
                }
                {
                    sb.AppendItem(Height, "Height");
                }
                {
                    sb.AppendItem(Weight, "Weight");
                }
                {
                    sb.AppendItem(SoundLevel, "SoundLevel");
                }
                Sound?.Print(sb);
                {
                    sb.AppendItem(DefaultOutfit, "DefaultOutfit");
                }
                {
                    sb.AppendItem(SleepingOutfit, "SleepingOutfit");
                }
                {
                    sb.AppendItem(DefaultPackageList, "DefaultPackageList");
                }
                {
                    sb.AppendItem(CrimeFaction, "CrimeFaction");
                }
                {
                    sb.AppendItem(HeadTexture, "HeadTexture");
                }
                {
                    sb.AppendItem(TextureLighting, "TextureLighting");
                }
                FaceMorph?.Print(sb);
                FaceParts?.Print(sb);
                if (TintLayers is {} TintLayersItem)
                {
                    sb.AppendLine("TintLayers =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(TintLayersItem.Overall);
                        if (TintLayersItem.Specific != null)
                        {
                            foreach (var subItem in TintLayersItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Configuration = this.Configuration.Combine(rhs.Configuration, (l, r) => l.Combine(r));
                ret.Factions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, RankPlacement.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Factions?.Overall, rhs.Factions?.Overall), Noggog.ExceptionExt.Combine(this.Factions?.Specific, rhs.Factions?.Specific));
                ret.DeathItem = this.DeathItem.Combine(rhs.DeathItem);
                ret.Voice = this.Voice.Combine(rhs.Voice);
                ret.Template = this.Template.Combine(rhs.Template);
                ret.Race = this.Race.Combine(rhs.Race);
                ret.ActorEffect = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.ActorEffect?.Overall, rhs.ActorEffect?.Overall), Noggog.ExceptionExt.Combine(this.ActorEffect?.Specific, rhs.ActorEffect?.Specific));
                ret.Destructible = this.Destructible.Combine(rhs.Destructible, (l, r) => l.Combine(r));
                ret.WornArmor = this.WornArmor.Combine(rhs.WornArmor);
                ret.FarAwayModel = this.FarAwayModel.Combine(rhs.FarAwayModel);
                ret.AttackRace = this.AttackRace.Combine(rhs.AttackRace);
                ret.Attacks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Attack.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Attacks?.Overall, rhs.Attacks?.Overall), Noggog.ExceptionExt.Combine(this.Attacks?.Specific, rhs.Attacks?.Specific));
                ret.SpectatorOverridePackageList = this.SpectatorOverridePackageList.Combine(rhs.SpectatorOverridePackageList);
                ret.ObserveDeadBodyOverridePackageList = this.ObserveDeadBodyOverridePackageList.Combine(rhs.ObserveDeadBodyOverridePackageList);
                ret.GuardWarnOverridePackageList = this.GuardWarnOverridePackageList.Combine(rhs.GuardWarnOverridePackageList);
                ret.CombatOverridePackageList = this.CombatOverridePackageList.Combine(rhs.CombatOverridePackageList);
                ret.Perks = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, PerkPlacement.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Perks?.Overall, rhs.Perks?.Overall), Noggog.ExceptionExt.Combine(this.Perks?.Specific, rhs.Perks?.Specific));
                ret.Items = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, ContainerEntry.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Items?.Overall, rhs.Items?.Overall), Noggog.ExceptionExt.Combine(this.Items?.Specific, rhs.Items?.Specific));
                ret.AIData = this.AIData.Combine(rhs.AIData, (l, r) => l.Combine(r));
                ret.Packages = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Packages?.Overall, rhs.Packages?.Overall), Noggog.ExceptionExt.Combine(this.Packages?.Specific, rhs.Packages?.Specific));
                ret.Keywords = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.Keywords?.Overall, rhs.Keywords?.Overall), Noggog.ExceptionExt.Combine(this.Keywords?.Specific, rhs.Keywords?.Specific));
                ret.Class = this.Class.Combine(rhs.Class);
                ret.Name = this.Name.Combine(rhs.Name);
                ret.ShortName = this.ShortName.Combine(rhs.ShortName);
                ret.PlayerSkills = this.PlayerSkills.Combine(rhs.PlayerSkills, (l, r) => l.Combine(r));
                ret.HeadParts = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.HeadParts?.Overall, rhs.HeadParts?.Overall), Noggog.ExceptionExt.Combine(this.HeadParts?.Specific, rhs.HeadParts?.Specific));
                ret.HairColor = this.HairColor.Combine(rhs.HairColor);
                ret.CombatStyle = this.CombatStyle.Combine(rhs.CombatStyle);
                ret.GiftFilter = this.GiftFilter.Combine(rhs.GiftFilter);
                ret.NAM5 = this.NAM5.Combine(rhs.NAM5);
                ret.Height = this.Height.Combine(rhs.Height);
                ret.Weight = this.Weight.Combine(rhs.Weight);
                ret.SoundLevel = this.SoundLevel.Combine(rhs.SoundLevel);
                ret.Sound = this.Sound.Combine(rhs.Sound, (l, r) => l.Combine(r));
                ret.DefaultOutfit = this.DefaultOutfit.Combine(rhs.DefaultOutfit);
                ret.SleepingOutfit = this.SleepingOutfit.Combine(rhs.SleepingOutfit);
                ret.DefaultPackageList = this.DefaultPackageList.Combine(rhs.DefaultPackageList);
                ret.CrimeFaction = this.CrimeFaction.Combine(rhs.CrimeFaction);
                ret.HeadTexture = this.HeadTexture.Combine(rhs.HeadTexture);
                ret.TextureLighting = this.TextureLighting.Combine(rhs.TextureLighting);
                ret.FaceMorph = this.FaceMorph.Combine(rhs.FaceMorph, (l, r) => l.Combine(r));
                ret.FaceParts = this.FaceParts.Combine(rhs.FaceParts, (l, r) => l.Combine(r));
                ret.TintLayers = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintLayer.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.TintLayers?.Overall, rhs.TintLayers?.Overall), Noggog.ExceptionExt.Combine(this.TintLayers?.Specific, rhs.TintLayers?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public ObjectBounds.TranslationMask? ObjectBounds;
            public NpcConfiguration.TranslationMask? Configuration;
            public RankPlacement.TranslationMask? Factions;
            public bool DeathItem;
            public bool Voice;
            public bool Template;
            public bool Race;
            public bool ActorEffect;
            public Destructible.TranslationMask? Destructible;
            public bool WornArmor;
            public bool FarAwayModel;
            public bool AttackRace;
            public Attack.TranslationMask? Attacks;
            public bool SpectatorOverridePackageList;
            public bool ObserveDeadBodyOverridePackageList;
            public bool GuardWarnOverridePackageList;
            public bool CombatOverridePackageList;
            public PerkPlacement.TranslationMask? Perks;
            public ContainerEntry.TranslationMask? Items;
            public AIData.TranslationMask? AIData;
            public bool Packages;
            public bool Keywords;
            public bool Class;
            public bool Name;
            public bool ShortName;
            public PlayerSkills.TranslationMask? PlayerSkills;
            public bool HeadParts;
            public bool HairColor;
            public bool CombatStyle;
            public bool GiftFilter;
            public bool NAM5;
            public bool Height;
            public bool Weight;
            public bool SoundLevel;
            public ANpcSoundDefinition.TranslationMask? Sound;
            public bool DefaultOutfit;
            public bool SleepingOutfit;
            public bool DefaultPackageList;
            public bool CrimeFaction;
            public bool HeadTexture;
            public bool TextureLighting;
            public NpcFaceMorph.TranslationMask? FaceMorph;
            public NpcFaceParts.TranslationMask? FaceParts;
            public TintLayer.TranslationMask? TintLayers;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.DeathItem = defaultOn;
                this.Voice = defaultOn;
                this.Template = defaultOn;
                this.Race = defaultOn;
                this.ActorEffect = defaultOn;
                this.WornArmor = defaultOn;
                this.FarAwayModel = defaultOn;
                this.AttackRace = defaultOn;
                this.SpectatorOverridePackageList = defaultOn;
                this.ObserveDeadBodyOverridePackageList = defaultOn;
                this.GuardWarnOverridePackageList = defaultOn;
                this.CombatOverridePackageList = defaultOn;
                this.Packages = defaultOn;
                this.Keywords = defaultOn;
                this.Class = defaultOn;
                this.Name = defaultOn;
                this.ShortName = defaultOn;
                this.HeadParts = defaultOn;
                this.HairColor = defaultOn;
                this.CombatStyle = defaultOn;
                this.GiftFilter = defaultOn;
                this.NAM5 = defaultOn;
                this.Height = defaultOn;
                this.Weight = defaultOn;
                this.SoundLevel = defaultOn;
                this.DefaultOutfit = defaultOn;
                this.SleepingOutfit = defaultOn;
                this.DefaultPackageList = defaultOn;
                this.CrimeFaction = defaultOn;
                this.HeadTexture = defaultOn;
                this.TextureLighting = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Configuration != null ? Configuration.OnOverall : DefaultOn, Configuration?.GetCrystal()));
                ret.Add((Factions == null ? DefaultOn : !Factions.GetCrystal().CopyNothing, Factions?.GetCrystal()));
                ret.Add((DeathItem, null));
                ret.Add((Voice, null));
                ret.Add((Template, null));
                ret.Add((Race, null));
                ret.Add((ActorEffect, null));
                ret.Add((Destructible != null ? Destructible.OnOverall : DefaultOn, Destructible?.GetCrystal()));
                ret.Add((WornArmor, null));
                ret.Add((FarAwayModel, null));
                ret.Add((AttackRace, null));
                ret.Add((Attacks == null ? DefaultOn : !Attacks.GetCrystal().CopyNothing, Attacks?.GetCrystal()));
                ret.Add((SpectatorOverridePackageList, null));
                ret.Add((ObserveDeadBodyOverridePackageList, null));
                ret.Add((GuardWarnOverridePackageList, null));
                ret.Add((CombatOverridePackageList, null));
                ret.Add((Perks == null ? DefaultOn : !Perks.GetCrystal().CopyNothing, Perks?.GetCrystal()));
                ret.Add((Items == null ? DefaultOn : !Items.GetCrystal().CopyNothing, Items?.GetCrystal()));
                ret.Add((AIData != null ? AIData.OnOverall : DefaultOn, AIData?.GetCrystal()));
                ret.Add((Packages, null));
                ret.Add((Keywords, null));
                ret.Add((Class, null));
                ret.Add((Name, null));
                ret.Add((ShortName, null));
                ret.Add((PlayerSkills != null ? PlayerSkills.OnOverall : DefaultOn, PlayerSkills?.GetCrystal()));
                ret.Add((HeadParts, null));
                ret.Add((HairColor, null));
                ret.Add((CombatStyle, null));
                ret.Add((GiftFilter, null));
                ret.Add((NAM5, null));
                ret.Add((Height, null));
                ret.Add((Weight, null));
                ret.Add((SoundLevel, null));
                ret.Add((Sound != null ? Sound.OnOverall : DefaultOn, Sound?.GetCrystal()));
                ret.Add((DefaultOutfit, null));
                ret.Add((SleepingOutfit, null));
                ret.Add((DefaultPackageList, null));
                ret.Add((CrimeFaction, null));
                ret.Add((HeadTexture, null));
                ret.Add((TextureLighting, null));
                ret.Add((FaceMorph != null ? FaceMorph.OnOverall : DefaultOn, FaceMorph?.GetCrystal()));
                ret.Add((FaceParts != null ? FaceParts.OnOverall : DefaultOn, FaceParts?.GetCrystal()));
                ret.Add((TintLayers == null ? DefaultOn : !TintLayers.GetCrystal().CopyNothing, TintLayers?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = Npc_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => NpcSetterCommon.Instance.RemapLinks(this, mapping);
        public Npc(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private Npc(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal Npc(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public Npc(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public Npc(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<Npc>.ToString(this);
        }

        protected override Type LinkType => typeof(INpc);

        public MajorFlag MajorFlags
        {
            get => (MajorFlag)this.MajorRecordFlagsRaw;
            set => this.MajorRecordFlagsRaw = (int)value;
        }
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => NpcCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => NpcSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => NpcSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => NpcSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not INpcGetter rhs) return false;
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcGetter? obj)
        {
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcCommon)((INpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static Npc CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new Npc();
            ((NpcSetterCommon)((INpcGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out Npc item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((NpcSetterCommon)((INpcGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new Npc GetNew()
        {
            return new Npc();
        }

    }
    #endregion

    #region Interface
    public partial interface INpc :
        IAliasVoiceType,
        IAssetLinkContainer,
        IExplodeSpawn,
        IFormLinkContainer,
        IHasDestructible,
        IHasVoiceType,
        IHaveVirtualMachineAdapter,
        IKeyworded<IKeywordGetter>,
        ILockList,
        ILoquiObjectSetter<INpcInternal>,
        INamed,
        INamedRequired,
        INpcGetter,
        INpcOrList,
        INpcSpawn,
        IObjectBounded,
        IObjectId,
        IOwner,
        IReferenceableObject,
        IScripted,
        ISkyrimMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new NpcConfiguration Configuration { get; set; }
        new ExtendedList<RankPlacement> Factions { get; }
        new IFormLinkNullable<ILeveledItemGetter> DeathItem { get; set; }
        new IFormLinkNullable<IVoiceTypeGetter> Voice { get; set; }
        new IFormLinkNullable<INpcSpawnGetter> Template { get; set; }
        new IFormLink<IRaceGetter> Race { get; set; }
        new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; set; }
        /// <summary>
        /// Aspects: IHasDestructible
        /// </summary>
        new Destructible? Destructible { get; set; }
        new IFormLinkNullable<IArmorGetter> WornArmor { get; set; }
        new IFormLinkNullable<IArmorGetter> FarAwayModel { get; set; }
        new IFormLinkNullable<IRaceGetter> AttackRace { get; set; }
        new ExtendedList<Attack> Attacks { get; }
        new IFormLinkNullable<IFormListGetter> SpectatorOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> ObserveDeadBodyOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> GuardWarnOverridePackageList { get; set; }
        new IFormLinkNullable<IFormListGetter> CombatOverridePackageList { get; set; }
        new ExtendedList<PerkPlacement>? Perks { get; set; }
        new ExtendedList<ContainerEntry>? Items { get; set; }
        new AIData AIData { get; set; }
        new ExtendedList<IFormLinkGetter<IPackageGetter>> Packages { get; }
        /// <summary>
        /// Aspects: IKeyworded&lt;IKeywordGetter&gt;
        /// </summary>
        new ExtendedList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; set; }
        new IFormLink<IClassGetter> Class { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new TranslatedString? ShortName { get; set; }
        new PlayerSkills? PlayerSkills { get; set; }
        new ExtendedList<IFormLinkGetter<IHeadPartGetter>> HeadParts { get; }
        new IFormLinkNullable<IColorRecordGetter> HairColor { get; set; }
        new IFormLinkNullable<ICombatStyleGetter> CombatStyle { get; set; }
        new IFormLinkNullable<IFormListGetter> GiftFilter { get; set; }
        new UInt16 NAM5 { get; set; }
        new Single Height { get; set; }
        new Single Weight { get; set; }
        new SoundLevel SoundLevel { get; set; }
        new ANpcSoundDefinition? Sound { get; set; }
        new IFormLinkNullable<IOutfitGetter> DefaultOutfit { get; set; }
        new IFormLinkNullable<IOutfitGetter> SleepingOutfit { get; set; }
        new IFormLinkNullable<IFormListGetter> DefaultPackageList { get; set; }
        new IFormLinkNullable<IFactionGetter> CrimeFaction { get; set; }
        new IFormLinkNullable<ITextureSetGetter> HeadTexture { get; set; }
        new Color? TextureLighting { get; set; }
        new NpcFaceMorph? FaceMorph { get; set; }
        new NpcFaceParts? FaceParts { get; set; }
        new ExtendedList<TintLayer> TintLayers { get; }
        #region Mutagen
        new Npc.MajorFlag MajorFlags { get; set; }
        #endregion

    }

    public partial interface INpcInternal :
        ISkyrimMajorRecordInternal,
        INpc,
        INpcGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.NPC_)]
    public partial interface INpcGetter :
        ISkyrimMajorRecordGetter,
        IAliasVoiceTypeGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        IHasDestructibleGetter,
        IHasVoiceTypeGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordedGetter<IKeywordGetter>,
        ILockListGetter,
        ILoquiObject<INpcGetter>,
        IMapsToGetter<INpcGetter>,
        INamedGetter,
        INamedRequiredGetter,
        INpcOrListGetter,
        INpcSpawnGetter,
        IObjectBoundedGetter,
        IObjectIdGetter,
        IOwnerGetter,
        IReferenceableObjectGetter,
        IScriptedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => Npc_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        INpcConfigurationGetter Configuration { get; }
        IReadOnlyList<IRankPlacementGetter> Factions { get; }
        IFormLinkNullableGetter<ILeveledItemGetter> DeathItem { get; }
        IFormLinkNullableGetter<IVoiceTypeGetter> Voice { get; }
        IFormLinkNullableGetter<INpcSpawnGetter> Template { get; }
        IFormLinkGetter<IRaceGetter> Race { get; }
        IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; }
        #region Destructible
        /// <summary>
        /// Aspects: IHasDestructibleGetter
        /// </summary>
        IDestructibleGetter? Destructible { get; }
        #endregion
        IFormLinkNullableGetter<IArmorGetter> WornArmor { get; }
        IFormLinkNullableGetter<IArmorGetter> FarAwayModel { get; }
        IFormLinkNullableGetter<IRaceGetter> AttackRace { get; }
        IReadOnlyList<IAttackGetter> Attacks { get; }
        IFormLinkNullableGetter<IFormListGetter> SpectatorOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> ObserveDeadBodyOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> GuardWarnOverridePackageList { get; }
        IFormLinkNullableGetter<IFormListGetter> CombatOverridePackageList { get; }
        IReadOnlyList<IPerkPlacementGetter>? Perks { get; }
        IReadOnlyList<IContainerEntryGetter>? Items { get; }
        IAIDataGetter AIData { get; }
        IReadOnlyList<IFormLinkGetter<IPackageGetter>> Packages { get; }
        #region Keywords
        /// <summary>
        /// Aspects: IKeywordedGetter&lt;IKeywordGetter&gt;
        /// </summary>
        IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; }
        #endregion
        IFormLinkGetter<IClassGetter> Class { get; }
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        ITranslatedStringGetter? ShortName { get; }
        IPlayerSkillsGetter? PlayerSkills { get; }
        IReadOnlyList<IFormLinkGetter<IHeadPartGetter>> HeadParts { get; }
        IFormLinkNullableGetter<IColorRecordGetter> HairColor { get; }
        IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle { get; }
        IFormLinkNullableGetter<IFormListGetter> GiftFilter { get; }
        UInt16 NAM5 { get; }
        Single Height { get; }
        Single Weight { get; }
        SoundLevel SoundLevel { get; }
        IANpcSoundDefinitionGetter? Sound { get; }
        IFormLinkNullableGetter<IOutfitGetter> DefaultOutfit { get; }
        IFormLinkNullableGetter<IOutfitGetter> SleepingOutfit { get; }
        IFormLinkNullableGetter<IFormListGetter> DefaultPackageList { get; }
        IFormLinkNullableGetter<IFactionGetter> CrimeFaction { get; }
        IFormLinkNullableGetter<ITextureSetGetter> HeadTexture { get; }
        Color? TextureLighting { get; }
        INpcFaceMorphGetter? FaceMorph { get; }
        INpcFacePartsGetter? FaceParts { get; }
        IReadOnlyList<ITintLayerGetter> TintLayers { get; }

        #region Mutagen
        Npc.MajorFlag MajorFlags { get; }
        #endregion

    }

    #endregion

    #region Common MixIn
    public static partial class NpcMixIn
    {
        public static void Clear(this INpcInternal item)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static Npc.Mask<bool> GetEqualsMask(
            this INpcGetter item,
            INpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this INpcGetter item,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this INpcGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this INpcGetter item,
            INpcGetter rhs,
            Npc.TranslationMask? equalsMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this INpcInternal lhs,
            INpcGetter rhs,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((NpcSetterTranslationCommon)((INpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this INpcInternal lhs,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((NpcSetterTranslationCommon)((INpcGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static Npc DeepCopy(
            this INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((NpcSetterTranslationCommon)((INpcGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static Npc Duplicate(
            this INpcGetter item,
            FormKey formKey,
            Npc.TranslationMask? copyMask = null)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static Npc Duplicate(
            this INpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((NpcCommon)((INpcGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this INpcInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((NpcSetterCommon)((INpcGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum Npc_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        ObjectBounds = 8,
        Configuration = 9,
        Factions = 10,
        DeathItem = 11,
        Voice = 12,
        Template = 13,
        Race = 14,
        ActorEffect = 15,
        Destructible = 16,
        WornArmor = 17,
        FarAwayModel = 18,
        AttackRace = 19,
        Attacks = 20,
        SpectatorOverridePackageList = 21,
        ObserveDeadBodyOverridePackageList = 22,
        GuardWarnOverridePackageList = 23,
        CombatOverridePackageList = 24,
        Perks = 25,
        Items = 26,
        AIData = 27,
        Packages = 28,
        Keywords = 29,
        Class = 30,
        Name = 31,
        ShortName = 32,
        PlayerSkills = 33,
        HeadParts = 34,
        HairColor = 35,
        CombatStyle = 36,
        GiftFilter = 37,
        NAM5 = 38,
        Height = 39,
        Weight = 40,
        SoundLevel = 41,
        Sound = 42,
        DefaultOutfit = 43,
        SleepingOutfit = 44,
        DefaultPackageList = 45,
        CrimeFaction = 46,
        HeadTexture = 47,
        TextureLighting = 48,
        FaceMorph = 49,
        FaceParts = 50,
        TintLayers = 51,
    }
    #endregion

    #region Registration
    internal partial class Npc_Registration : ILoquiRegistration
    {
        public static readonly Npc_Registration Instance = new Npc_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 45;

        public const ushort FieldCount = 52;

        public static readonly Type MaskType = typeof(Npc.Mask<>);

        public static readonly Type ErrorMaskType = typeof(Npc.ErrorMask);

        public static readonly Type ClassType = typeof(Npc);

        public static readonly Type GetterType = typeof(INpcGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(INpc);

        public static readonly Type? InternalSetterType = typeof(INpcInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.Npc";

        public const string Name = "Npc";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.NPC_;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.NPC_);
            var all = RecordCollection.Factory(
                RecordTypes.NPC_,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.OBND,
                RecordTypes.ACBS,
                RecordTypes.SNAM,
                RecordTypes.INAM,
                RecordTypes.VTCK,
                RecordTypes.TPLT,
                RecordTypes.RNAM,
                RecordTypes.SPLO,
                RecordTypes.SPCT,
                RecordTypes.DEST,
                RecordTypes.DSTD,
                RecordTypes.DMDL,
                RecordTypes.WNAM,
                RecordTypes.ANAM,
                RecordTypes.ATKR,
                RecordTypes.ATKD,
                RecordTypes.ATKE,
                RecordTypes.SPOR,
                RecordTypes.OCOR,
                RecordTypes.GWOR,
                RecordTypes.ECOR,
                RecordTypes.PRKR,
                RecordTypes.PRKZ,
                RecordTypes.CNTO,
                RecordTypes.COCT,
                RecordTypes.COED,
                RecordTypes.AIDT,
                RecordTypes.PKID,
                RecordTypes.KWDA,
                RecordTypes.KSIZ,
                RecordTypes.CNAM,
                RecordTypes.FULL,
                RecordTypes.SHRT,
                RecordTypes.DATA,
                RecordTypes.DNAM,
                RecordTypes.PNAM,
                RecordTypes.HCLF,
                RecordTypes.ZNAM,
                RecordTypes.GNAM,
                RecordTypes.NAM5,
                RecordTypes.NAM6,
                RecordTypes.NAM7,
                RecordTypes.NAM8,
                RecordTypes.CSCR,
                RecordTypes.CSDT,
                RecordTypes.CSDI,
                RecordTypes.CSDC,
                RecordTypes.DOFT,
                RecordTypes.SOFT,
                RecordTypes.DPLT,
                RecordTypes.CRIF,
                RecordTypes.FTST,
                RecordTypes.QNAM,
                RecordTypes.NAM9,
                RecordTypes.NAMA,
                RecordTypes.TINI,
                RecordTypes.TINC,
                RecordTypes.TINV,
                RecordTypes.TIAS);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(NpcBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class NpcSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly NpcSetterCommon Instance = new NpcSetterCommon();

        partial void ClearPartial();
        
        public void Clear(INpcInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.ObjectBounds.Clear();
            item.Configuration.Clear();
            item.Factions.Clear();
            item.DeathItem.Clear();
            item.Voice.Clear();
            item.Template.Clear();
            item.Race.Clear();
            item.ActorEffect = null;
            item.Destructible = null;
            item.WornArmor.Clear();
            item.FarAwayModel.Clear();
            item.AttackRace.Clear();
            item.Attacks.Clear();
            item.SpectatorOverridePackageList.Clear();
            item.ObserveDeadBodyOverridePackageList.Clear();
            item.GuardWarnOverridePackageList.Clear();
            item.CombatOverridePackageList.Clear();
            item.Perks = null;
            item.Items = null;
            item.AIData.Clear();
            item.Packages.Clear();
            item.Keywords = null;
            item.Class.Clear();
            item.Name = default;
            item.ShortName = default;
            item.PlayerSkills = null;
            item.HeadParts.Clear();
            item.HairColor.Clear();
            item.CombatStyle.Clear();
            item.GiftFilter.Clear();
            item.NAM5 = Npc.NAM5Default;
            item.Height = default(Single);
            item.Weight = default(Single);
            item.SoundLevel = default(SoundLevel);
            item.Sound = null;
            item.DefaultOutfit.Clear();
            item.SleepingOutfit.Clear();
            item.DefaultPackageList.Clear();
            item.CrimeFaction.Clear();
            item.HeadTexture.Clear();
            item.TextureLighting = default;
            item.FaceMorph = null;
            item.FaceParts = null;
            item.TintLayers.Clear();
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (INpcInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(INpc obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Factions.RemapLinks(mapping);
            obj.DeathItem.Relink(mapping);
            obj.Voice.Relink(mapping);
            obj.Template.Relink(mapping);
            obj.Race.Relink(mapping);
            obj.ActorEffect?.RemapLinks(mapping);
            obj.Destructible?.RemapLinks(mapping);
            obj.WornArmor.Relink(mapping);
            obj.FarAwayModel.Relink(mapping);
            obj.AttackRace.Relink(mapping);
            obj.Attacks.RemapLinks(mapping);
            obj.SpectatorOverridePackageList.Relink(mapping);
            obj.ObserveDeadBodyOverridePackageList.Relink(mapping);
            obj.GuardWarnOverridePackageList.Relink(mapping);
            obj.CombatOverridePackageList.Relink(mapping);
            obj.Perks?.RemapLinks(mapping);
            obj.Items?.RemapLinks(mapping);
            obj.Packages.RemapLinks(mapping);
            obj.Keywords?.RemapLinks(mapping);
            obj.Class.Relink(mapping);
            obj.HeadParts.RemapLinks(mapping);
            obj.HairColor.Relink(mapping);
            obj.CombatStyle.Relink(mapping);
            obj.GiftFilter.Relink(mapping);
            obj.Sound?.RemapLinks(mapping);
            obj.DefaultOutfit.Relink(mapping);
            obj.SleepingOutfit.Relink(mapping);
            obj.DefaultPackageList.Relink(mapping);
            obj.CrimeFaction.Relink(mapping);
            obj.HeadTexture.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(INpc obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        private static partial void RemapResolvedAssetLinks(
            INpc obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories);
        
        public void RemapAssetLinks(
            INpc obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            RemapResolvedAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.VirtualMachineAdapter?.RemapAssetLinks(mapping, queryCategories, linkCache);
            obj.Destructible?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            INpcInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<INpcInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: NpcBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: NpcBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (Npc)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class NpcCommon : SkyrimMajorRecordCommon
    {
        public new static readonly NpcCommon Instance = new NpcCommon();

        public Npc.Mask<bool> GetEqualsMask(
            INpcGetter item,
            INpcGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new Npc.Mask<bool>(false);
            ((NpcCommon)((INpcGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            INpcGetter item,
            INpcGetter rhs,
            Npc.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Configuration = MaskItemExt.Factory(item.Configuration.GetEqualsMask(rhs.Configuration, include), include);
            ret.Factions = item.Factions.CollectionEqualsHelper(
                rhs.Factions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.DeathItem = item.DeathItem.Equals(rhs.DeathItem);
            ret.Voice = item.Voice.Equals(rhs.Voice);
            ret.Template = item.Template.Equals(rhs.Template);
            ret.Race = item.Race.Equals(rhs.Race);
            ret.ActorEffect = item.ActorEffect.CollectionEqualsHelper(
                rhs.ActorEffect,
                (l, r) => object.Equals(l, r),
                include);
            ret.Destructible = EqualsMaskHelper.EqualsHelper(
                item.Destructible,
                rhs.Destructible,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.WornArmor = item.WornArmor.Equals(rhs.WornArmor);
            ret.FarAwayModel = item.FarAwayModel.Equals(rhs.FarAwayModel);
            ret.AttackRace = item.AttackRace.Equals(rhs.AttackRace);
            ret.Attacks = item.Attacks.CollectionEqualsHelper(
                rhs.Attacks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.SpectatorOverridePackageList = item.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList);
            ret.ObserveDeadBodyOverridePackageList = item.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList);
            ret.GuardWarnOverridePackageList = item.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList);
            ret.CombatOverridePackageList = item.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList);
            ret.Perks = item.Perks.CollectionEqualsHelper(
                rhs.Perks,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Items = item.Items.CollectionEqualsHelper(
                rhs.Items,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.AIData = MaskItemExt.Factory(item.AIData.GetEqualsMask(rhs.AIData, include), include);
            ret.Packages = item.Packages.CollectionEqualsHelper(
                rhs.Packages,
                (l, r) => object.Equals(l, r),
                include);
            ret.Keywords = item.Keywords.CollectionEqualsHelper(
                rhs.Keywords,
                (l, r) => object.Equals(l, r),
                include);
            ret.Class = item.Class.Equals(rhs.Class);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.ShortName = object.Equals(item.ShortName, rhs.ShortName);
            ret.PlayerSkills = EqualsMaskHelper.EqualsHelper(
                item.PlayerSkills,
                rhs.PlayerSkills,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.HeadParts = item.HeadParts.CollectionEqualsHelper(
                rhs.HeadParts,
                (l, r) => object.Equals(l, r),
                include);
            ret.HairColor = item.HairColor.Equals(rhs.HairColor);
            ret.CombatStyle = item.CombatStyle.Equals(rhs.CombatStyle);
            ret.GiftFilter = item.GiftFilter.Equals(rhs.GiftFilter);
            ret.NAM5 = item.NAM5 == rhs.NAM5;
            ret.Height = item.Height.EqualsWithin(rhs.Height);
            ret.Weight = item.Weight.EqualsWithin(rhs.Weight);
            ret.SoundLevel = item.SoundLevel == rhs.SoundLevel;
            ret.Sound = EqualsMaskHelper.EqualsHelper(
                item.Sound,
                rhs.Sound,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DefaultOutfit = item.DefaultOutfit.Equals(rhs.DefaultOutfit);
            ret.SleepingOutfit = item.SleepingOutfit.Equals(rhs.SleepingOutfit);
            ret.DefaultPackageList = item.DefaultPackageList.Equals(rhs.DefaultPackageList);
            ret.CrimeFaction = item.CrimeFaction.Equals(rhs.CrimeFaction);
            ret.HeadTexture = item.HeadTexture.Equals(rhs.HeadTexture);
            ret.TextureLighting = item.TextureLighting.ColorOnlyEquals(rhs.TextureLighting);
            ret.FaceMorph = EqualsMaskHelper.EqualsHelper(
                item.FaceMorph,
                rhs.FaceMorph,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.FaceParts = EqualsMaskHelper.EqualsHelper(
                item.FaceParts,
                rhs.FaceParts,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TintLayers = item.TintLayers.CollectionEqualsHelper(
                rhs.TintLayers,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            INpcGetter item,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            INpcGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            Npc.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"Npc =>");
            }
            else
            {
                sb.AppendLine($"{name} (Npc) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            INpcGetter item,
            StructuredStringBuilder sb,
            Npc.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.Configuration?.Overall ?? true)
            {
                item.Configuration?.Print(sb, "Configuration");
            }
            if (printMask?.Factions?.Overall ?? true)
            {
                sb.AppendLine("Factions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Factions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.DeathItem ?? true)
            {
                sb.AppendItem(item.DeathItem.FormKeyNullable, "DeathItem");
            }
            if (printMask?.Voice ?? true)
            {
                sb.AppendItem(item.Voice.FormKeyNullable, "Voice");
            }
            if (printMask?.Template ?? true)
            {
                sb.AppendItem(item.Template.FormKeyNullable, "Template");
            }
            if (printMask?.Race ?? true)
            {
                sb.AppendItem(item.Race.FormKey, "Race");
            }
            if ((printMask?.ActorEffect?.Overall ?? true)
                && item.ActorEffect is {} ActorEffectItem)
            {
                sb.AppendLine("ActorEffect =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ActorEffectItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Destructible?.Overall ?? true)
                && item.Destructible is {} DestructibleItem)
            {
                DestructibleItem?.Print(sb, "Destructible");
            }
            if (printMask?.WornArmor ?? true)
            {
                sb.AppendItem(item.WornArmor.FormKeyNullable, "WornArmor");
            }
            if (printMask?.FarAwayModel ?? true)
            {
                sb.AppendItem(item.FarAwayModel.FormKeyNullable, "FarAwayModel");
            }
            if (printMask?.AttackRace ?? true)
            {
                sb.AppendItem(item.AttackRace.FormKeyNullable, "AttackRace");
            }
            if (printMask?.Attacks?.Overall ?? true)
            {
                sb.AppendLine("Attacks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Attacks)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.SpectatorOverridePackageList ?? true)
            {
                sb.AppendItem(item.SpectatorOverridePackageList.FormKeyNullable, "SpectatorOverridePackageList");
            }
            if (printMask?.ObserveDeadBodyOverridePackageList ?? true)
            {
                sb.AppendItem(item.ObserveDeadBodyOverridePackageList.FormKeyNullable, "ObserveDeadBodyOverridePackageList");
            }
            if (printMask?.GuardWarnOverridePackageList ?? true)
            {
                sb.AppendItem(item.GuardWarnOverridePackageList.FormKeyNullable, "GuardWarnOverridePackageList");
            }
            if (printMask?.CombatOverridePackageList ?? true)
            {
                sb.AppendItem(item.CombatOverridePackageList.FormKeyNullable, "CombatOverridePackageList");
            }
            if ((printMask?.Perks?.Overall ?? true)
                && item.Perks is {} PerksItem)
            {
                sb.AppendLine("Perks =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PerksItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Items?.Overall ?? true)
                && item.Items is {} ItemsItem)
            {
                sb.AppendLine("Items =>");
                using (sb.Brace())
                {
                    foreach (var subItem in ItemsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.AIData?.Overall ?? true)
            {
                item.AIData?.Print(sb, "AIData");
            }
            if (printMask?.Packages?.Overall ?? true)
            {
                sb.AppendLine("Packages =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Packages)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if ((printMask?.Keywords?.Overall ?? true)
                && item.Keywords is {} KeywordsItem)
            {
                sb.AppendLine("Keywords =>");
                using (sb.Brace())
                {
                    foreach (var subItem in KeywordsItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Class ?? true)
            {
                sb.AppendItem(item.Class.FormKey, "Class");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if ((printMask?.ShortName ?? true)
                && item.ShortName is {} ShortNameItem)
            {
                sb.AppendItem(ShortNameItem, "ShortName");
            }
            if ((printMask?.PlayerSkills?.Overall ?? true)
                && item.PlayerSkills is {} PlayerSkillsItem)
            {
                PlayerSkillsItem?.Print(sb, "PlayerSkills");
            }
            if (printMask?.HeadParts?.Overall ?? true)
            {
                sb.AppendLine("HeadParts =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.HeadParts)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.HairColor ?? true)
            {
                sb.AppendItem(item.HairColor.FormKeyNullable, "HairColor");
            }
            if (printMask?.CombatStyle ?? true)
            {
                sb.AppendItem(item.CombatStyle.FormKeyNullable, "CombatStyle");
            }
            if (printMask?.GiftFilter ?? true)
            {
                sb.AppendItem(item.GiftFilter.FormKeyNullable, "GiftFilter");
            }
            if (printMask?.NAM5 ?? true)
            {
                sb.AppendItem(item.NAM5, "NAM5");
            }
            if (printMask?.Height ?? true)
            {
                sb.AppendItem(item.Height, "Height");
            }
            if (printMask?.Weight ?? true)
            {
                sb.AppendItem(item.Weight, "Weight");
            }
            if (printMask?.SoundLevel ?? true)
            {
                sb.AppendItem(item.SoundLevel, "SoundLevel");
            }
            if ((printMask?.Sound?.Overall ?? true)
                && item.Sound is {} SoundItem)
            {
                SoundItem?.Print(sb, "Sound");
            }
            if (printMask?.DefaultOutfit ?? true)
            {
                sb.AppendItem(item.DefaultOutfit.FormKeyNullable, "DefaultOutfit");
            }
            if (printMask?.SleepingOutfit ?? true)
            {
                sb.AppendItem(item.SleepingOutfit.FormKeyNullable, "SleepingOutfit");
            }
            if (printMask?.DefaultPackageList ?? true)
            {
                sb.AppendItem(item.DefaultPackageList.FormKeyNullable, "DefaultPackageList");
            }
            if (printMask?.CrimeFaction ?? true)
            {
                sb.AppendItem(item.CrimeFaction.FormKeyNullable, "CrimeFaction");
            }
            if (printMask?.HeadTexture ?? true)
            {
                sb.AppendItem(item.HeadTexture.FormKeyNullable, "HeadTexture");
            }
            if ((printMask?.TextureLighting ?? true)
                && item.TextureLighting is {} TextureLightingItem)
            {
                sb.AppendItem(TextureLightingItem, "TextureLighting");
            }
            if ((printMask?.FaceMorph?.Overall ?? true)
                && item.FaceMorph is {} FaceMorphItem)
            {
                FaceMorphItem?.Print(sb, "FaceMorph");
            }
            if ((printMask?.FaceParts?.Overall ?? true)
                && item.FaceParts is {} FacePartsItem)
            {
                FacePartsItem?.Print(sb, "FaceParts");
            }
            if (printMask?.TintLayers?.Overall ?? true)
            {
                sb.AppendLine("TintLayers =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.TintLayers)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        public static Npc_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (Npc_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (Npc_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (Npc_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new Npc_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (Npc_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (Npc_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            INpcGetter? lhs,
            INpcGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Configuration) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Configuration, rhs.Configuration, out var lhsConfiguration, out var rhsConfiguration, out var isConfigurationEqual))
                {
                    if (!((NpcConfigurationCommon)((INpcConfigurationGetter)lhsConfiguration).CommonInstance()!).Equals(lhsConfiguration, rhsConfiguration, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Configuration))) return false;
                }
                else if (!isConfigurationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Factions) ?? true))
            {
                if (!lhs.Factions.SequenceEqual(rhs.Factions, (l, r) => ((RankPlacementCommon)((IRankPlacementGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Factions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.DeathItem) ?? true))
            {
                if (!lhs.DeathItem.Equals(rhs.DeathItem)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Voice) ?? true))
            {
                if (!lhs.Voice.Equals(rhs.Voice)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Template) ?? true))
            {
                if (!lhs.Template.Equals(rhs.Template)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Race) ?? true))
            {
                if (!lhs.Race.Equals(rhs.Race)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ActorEffect) ?? true))
            {
                if (!lhs.ActorEffect.SequenceEqualNullable(rhs.ActorEffect)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Destructible) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Destructible, rhs.Destructible, out var lhsDestructible, out var rhsDestructible, out var isDestructibleEqual))
                {
                    if (!((DestructibleCommon)((IDestructibleGetter)lhsDestructible).CommonInstance()!).Equals(lhsDestructible, rhsDestructible, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Destructible))) return false;
                }
                else if (!isDestructibleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.WornArmor) ?? true))
            {
                if (!lhs.WornArmor.Equals(rhs.WornArmor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FarAwayModel) ?? true))
            {
                if (!lhs.FarAwayModel.Equals(rhs.FarAwayModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AttackRace) ?? true))
            {
                if (!lhs.AttackRace.Equals(rhs.AttackRace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Attacks) ?? true))
            {
                if (!lhs.Attacks.SequenceEqual(rhs.Attacks, (l, r) => ((AttackCommon)((IAttackGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Attacks)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.SpectatorOverridePackageList) ?? true))
            {
                if (!lhs.SpectatorOverridePackageList.Equals(rhs.SpectatorOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList) ?? true))
            {
                if (!lhs.ObserveDeadBodyOverridePackageList.Equals(rhs.ObserveDeadBodyOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.GuardWarnOverridePackageList) ?? true))
            {
                if (!lhs.GuardWarnOverridePackageList.Equals(rhs.GuardWarnOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatOverridePackageList) ?? true))
            {
                if (!lhs.CombatOverridePackageList.Equals(rhs.CombatOverridePackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Perks) ?? true))
            {
                if (!lhs.Perks.SequenceEqualNullable(rhs.Perks, (l, r) => ((PerkPlacementCommon)((IPerkPlacementGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Perks)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Items) ?? true))
            {
                if (!lhs.Items.SequenceEqualNullable(rhs.Items, (l, r) => ((ContainerEntryCommon)((IContainerEntryGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Items)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.AIData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AIData, rhs.AIData, out var lhsAIData, out var rhsAIData, out var isAIDataEqual))
                {
                    if (!((AIDataCommon)((IAIDataGetter)lhsAIData).CommonInstance()!).Equals(lhsAIData, rhsAIData, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.AIData))) return false;
                }
                else if (!isAIDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Packages) ?? true))
            {
                if (!lhs.Packages.SequenceEqualNullable(rhs.Packages)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Keywords) ?? true))
            {
                if (!lhs.Keywords.SequenceEqualNullable(rhs.Keywords)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Class) ?? true))
            {
                if (!lhs.Class.Equals(rhs.Class)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.ShortName) ?? true))
            {
                if (!object.Equals(lhs.ShortName, rhs.ShortName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.PlayerSkills) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.PlayerSkills, rhs.PlayerSkills, out var lhsPlayerSkills, out var rhsPlayerSkills, out var isPlayerSkillsEqual))
                {
                    if (!((PlayerSkillsCommon)((IPlayerSkillsGetter)lhsPlayerSkills).CommonInstance()!).Equals(lhsPlayerSkills, rhsPlayerSkills, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.PlayerSkills))) return false;
                }
                else if (!isPlayerSkillsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.HeadParts) ?? true))
            {
                if (!lhs.HeadParts.SequenceEqualNullable(rhs.HeadParts)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.HairColor) ?? true))
            {
                if (!lhs.HairColor.Equals(rhs.HairColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatStyle) ?? true))
            {
                if (!lhs.CombatStyle.Equals(rhs.CombatStyle)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.GiftFilter) ?? true))
            {
                if (!lhs.GiftFilter.Equals(rhs.GiftFilter)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.NAM5) ?? true))
            {
                if (lhs.NAM5 != rhs.NAM5) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Height) ?? true))
            {
                if (!lhs.Height.EqualsWithin(rhs.Height)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Weight) ?? true))
            {
                if (!lhs.Weight.EqualsWithin(rhs.Weight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.SoundLevel) ?? true))
            {
                if (lhs.SoundLevel != rhs.SoundLevel) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.Sound) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Sound, rhs.Sound, out var lhsSound, out var rhsSound, out var isSoundEqual))
                {
                    if (!((ANpcSoundDefinitionCommon)((IANpcSoundDefinitionGetter)lhsSound).CommonInstance()!).Equals(lhsSound, rhsSound, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.Sound))) return false;
                }
                else if (!isSoundEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultOutfit) ?? true))
            {
                if (!lhs.DefaultOutfit.Equals(rhs.DefaultOutfit)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.SleepingOutfit) ?? true))
            {
                if (!lhs.SleepingOutfit.Equals(rhs.SleepingOutfit)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultPackageList) ?? true))
            {
                if (!lhs.DefaultPackageList.Equals(rhs.DefaultPackageList)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.CrimeFaction) ?? true))
            {
                if (!lhs.CrimeFaction.Equals(rhs.CrimeFaction)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.HeadTexture) ?? true))
            {
                if (!lhs.HeadTexture.Equals(rhs.HeadTexture)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.TextureLighting) ?? true))
            {
                if (!lhs.TextureLighting.ColorOnlyEquals(rhs.TextureLighting)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceMorph) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FaceMorph, rhs.FaceMorph, out var lhsFaceMorph, out var rhsFaceMorph, out var isFaceMorphEqual))
                {
                    if (!((NpcFaceMorphCommon)((INpcFaceMorphGetter)lhsFaceMorph).CommonInstance()!).Equals(lhsFaceMorph, rhsFaceMorph, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.FaceMorph))) return false;
                }
                else if (!isFaceMorphEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceParts) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.FaceParts, rhs.FaceParts, out var lhsFaceParts, out var rhsFaceParts, out var isFacePartsEqual))
                {
                    if (!((NpcFacePartsCommon)((INpcFacePartsGetter)lhsFaceParts).CommonInstance()!).Equals(lhsFaceParts, rhsFaceParts, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.FaceParts))) return false;
                }
                else if (!isFacePartsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)Npc_FieldIndex.TintLayers) ?? true))
            {
                if (!lhs.TintLayers.SequenceEqual(rhs.TintLayers, (l, r) => ((TintLayerCommon)((ITintLayerGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)Npc_FieldIndex.TintLayers)))) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (INpcGetter?)lhs,
                rhs: rhs as INpcGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(INpcGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.ObjectBounds);
            hash.Add(item.Configuration);
            hash.Add(item.Factions);
            hash.Add(item.DeathItem);
            hash.Add(item.Voice);
            hash.Add(item.Template);
            hash.Add(item.Race);
            hash.Add(item.ActorEffect);
            if (item.Destructible is {} Destructibleitem)
            {
                hash.Add(Destructibleitem);
            }
            hash.Add(item.WornArmor);
            hash.Add(item.FarAwayModel);
            hash.Add(item.AttackRace);
            hash.Add(item.Attacks);
            hash.Add(item.SpectatorOverridePackageList);
            hash.Add(item.ObserveDeadBodyOverridePackageList);
            hash.Add(item.GuardWarnOverridePackageList);
            hash.Add(item.CombatOverridePackageList);
            hash.Add(item.Perks);
            hash.Add(item.Items);
            hash.Add(item.AIData);
            hash.Add(item.Packages);
            hash.Add(item.Keywords);
            hash.Add(item.Class);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            if (item.ShortName is {} ShortNameitem)
            {
                hash.Add(ShortNameitem);
            }
            if (item.PlayerSkills is {} PlayerSkillsitem)
            {
                hash.Add(PlayerSkillsitem);
            }
            hash.Add(item.HeadParts);
            hash.Add(item.HairColor);
            hash.Add(item.CombatStyle);
            hash.Add(item.GiftFilter);
            hash.Add(item.NAM5);
            hash.Add(item.Height);
            hash.Add(item.Weight);
            hash.Add(item.SoundLevel);
            if (item.Sound is {} Sounditem)
            {
                hash.Add(Sounditem);
            }
            hash.Add(item.DefaultOutfit);
            hash.Add(item.SleepingOutfit);
            hash.Add(item.DefaultPackageList);
            hash.Add(item.CrimeFaction);
            hash.Add(item.HeadTexture);
            if (item.TextureLighting is {} TextureLightingitem)
            {
                hash.Add(TextureLightingitem);
            }
            if (item.FaceMorph is {} FaceMorphitem)
            {
                hash.Add(FaceMorphitem);
            }
            if (item.FaceParts is {} FacePartsitem)
            {
                hash.Add(FacePartsitem);
            }
            hash.Add(item.TintLayers);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (INpcGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return Npc.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(INpcGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.Factions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.DeathItem, out var DeathItemInfo))
            {
                yield return DeathItemInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Voice, out var VoiceInfo))
            {
                yield return VoiceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.Template, out var TemplateInfo))
            {
                yield return TemplateInfo;
            }
            yield return FormLinkInformation.Factory(obj.Race);
            if (obj.ActorEffect is {} ActorEffectItem)
            {
                foreach (var item in ActorEffectItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.WornArmor, out var WornArmorInfo))
            {
                yield return WornArmorInfo;
            }
            if (FormLinkInformation.TryFactory(obj.FarAwayModel, out var FarAwayModelInfo))
            {
                yield return FarAwayModelInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AttackRace, out var AttackRaceInfo))
            {
                yield return AttackRaceInfo;
            }
            foreach (var item in obj.Attacks.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.SpectatorOverridePackageList, out var SpectatorOverridePackageListInfo))
            {
                yield return SpectatorOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ObserveDeadBodyOverridePackageList, out var ObserveDeadBodyOverridePackageListInfo))
            {
                yield return ObserveDeadBodyOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.GuardWarnOverridePackageList, out var GuardWarnOverridePackageListInfo))
            {
                yield return GuardWarnOverridePackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CombatOverridePackageList, out var CombatOverridePackageListInfo))
            {
                yield return CombatOverridePackageListInfo;
            }
            if (obj.Perks is {} PerksItem)
            {
                foreach (var item in PerksItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (obj.Items is {} ItemsItem)
            {
                foreach (var item in ItemsItem.WhereCastable<IContainerEntryGetter, IFormLinkContainerGetter>()
                    .SelectMany((f) => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            foreach (var item in obj.Packages)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Keywords is {} KeywordsItem)
            {
                foreach (var item in KeywordsItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            yield return FormLinkInformation.Factory(obj.Class);
            foreach (var item in obj.HeadParts)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.HairColor, out var HairColorInfo))
            {
                yield return HairColorInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CombatStyle, out var CombatStyleInfo))
            {
                yield return CombatStyleInfo;
            }
            if (FormLinkInformation.TryFactory(obj.GiftFilter, out var GiftFilterInfo))
            {
                yield return GiftFilterInfo;
            }
            if (obj.Sound is IFormLinkContainerGetter SoundlinkCont)
            {
                foreach (var item in SoundlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.DefaultOutfit, out var DefaultOutfitInfo))
            {
                yield return DefaultOutfitInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SleepingOutfit, out var SleepingOutfitInfo))
            {
                yield return SleepingOutfitInfo;
            }
            if (FormLinkInformation.TryFactory(obj.DefaultPackageList, out var DefaultPackageListInfo))
            {
                yield return DefaultPackageListInfo;
            }
            if (FormLinkInformation.TryFactory(obj.CrimeFaction, out var CrimeFactionInfo))
            {
                yield return CrimeFactionInfo;
            }
            if (FormLinkInformation.TryFactory(obj.HeadTexture, out var HeadTextureInfo))
            {
                yield return HeadTextureInfo;
            }
            yield break;
        }
        
        public static partial IEnumerable<IAssetLinkGetter> GetResolvedAssetLinks(INpcGetter obj, IAssetLinkCache linkCache, Type? assetType);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(INpcGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Resolved))
            {
                if (linkCache == null) throw new ArgumentNullException("No link cache was given on a query interested in resolved assets");
                foreach (var additional in GetResolvedAssetLinks(obj, linkCache, assetType))
                {
                    yield return additional;
                }
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            if (obj.Destructible is {} DestructibleItems)
            {
                foreach (var item in DestructibleItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public Npc Duplicate(
            INpcGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new Npc(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INpcGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (INpcGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class NpcSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly NpcSetterTranslationCommon Instance = new NpcSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            INpcInternal item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            INpc item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Npc_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Configuration) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Configuration);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Configuration) ?? true))
                    {
                        item.Configuration = rhs.Configuration.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Npc_FieldIndex.Configuration),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Factions) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Factions);
                try
                {
                    item.Factions.SetTo(
                        rhs.Factions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DeathItem) ?? true))
            {
                item.DeathItem.SetTo(rhs.DeathItem.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Voice) ?? true))
            {
                item.Voice.SetTo(rhs.Voice.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Template) ?? true))
            {
                item.Template.SetTo(rhs.Template.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Race) ?? true))
            {
                item.Race.SetTo(rhs.Race.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ActorEffect) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.ActorEffect);
                try
                {
                    if ((rhs.ActorEffect != null))
                    {
                        item.ActorEffect = 
                            rhs.ActorEffect
                                .Select(b => (IFormLinkGetter<ISpellRecordGetter>)new FormLink<ISpellRecordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    }
                    else
                    {
                        item.ActorEffect = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Destructible) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Destructible);
                try
                {
                    if(rhs.Destructible is {} rhsDestructible)
                    {
                        item.Destructible = rhsDestructible.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Destructible));
                    }
                    else
                    {
                        item.Destructible = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.WornArmor) ?? true))
            {
                item.WornArmor.SetTo(rhs.WornArmor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FarAwayModel) ?? true))
            {
                item.FarAwayModel.SetTo(rhs.FarAwayModel.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AttackRace) ?? true))
            {
                item.AttackRace.SetTo(rhs.AttackRace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Attacks) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Attacks);
                try
                {
                    item.Attacks.SetTo(
                        rhs.Attacks
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.SpectatorOverridePackageList) ?? true))
            {
                item.SpectatorOverridePackageList.SetTo(rhs.SpectatorOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList) ?? true))
            {
                item.ObserveDeadBodyOverridePackageList.SetTo(rhs.ObserveDeadBodyOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.GuardWarnOverridePackageList) ?? true))
            {
                item.GuardWarnOverridePackageList.SetTo(rhs.GuardWarnOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatOverridePackageList) ?? true))
            {
                item.CombatOverridePackageList.SetTo(rhs.CombatOverridePackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Perks) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Perks);
                try
                {
                    if ((rhs.Perks != null))
                    {
                        item.Perks = 
                            rhs.Perks
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<PerkPlacement>();
                    }
                    else
                    {
                        item.Perks = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Items) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Items);
                try
                {
                    if ((rhs.Items != null))
                    {
                        item.Items = 
                            rhs.Items
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<ContainerEntry>();
                    }
                    else
                    {
                        item.Items = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AIData) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.AIData);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.AIData) ?? true))
                    {
                        item.AIData = rhs.AIData.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)Npc_FieldIndex.AIData),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Packages) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Packages);
                try
                {
                    item.Packages.SetTo(
                        rhs.Packages
                            .Select(b => (IFormLinkGetter<IPackageGetter>)new FormLink<IPackageGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Keywords) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Keywords);
                try
                {
                    if ((rhs.Keywords != null))
                    {
                        item.Keywords = 
                            rhs.Keywords
                                .Select(b => (IFormLinkGetter<IKeywordGetter>)new FormLink<IKeywordGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    }
                    else
                    {
                        item.Keywords = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Class) ?? true))
            {
                item.Class.SetTo(rhs.Class.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.ShortName) ?? true))
            {
                item.ShortName = rhs.ShortName?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.PlayerSkills) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.PlayerSkills);
                try
                {
                    if(rhs.PlayerSkills is {} rhsPlayerSkills)
                    {
                        item.PlayerSkills = rhsPlayerSkills.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.PlayerSkills));
                    }
                    else
                    {
                        item.PlayerSkills = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HeadParts) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.HeadParts);
                try
                {
                    item.HeadParts.SetTo(
                        rhs.HeadParts
                            .Select(b => (IFormLinkGetter<IHeadPartGetter>)new FormLink<IHeadPartGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HairColor) ?? true))
            {
                item.HairColor.SetTo(rhs.HairColor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CombatStyle) ?? true))
            {
                item.CombatStyle.SetTo(rhs.CombatStyle.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.GiftFilter) ?? true))
            {
                item.GiftFilter.SetTo(rhs.GiftFilter.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.NAM5) ?? true))
            {
                item.NAM5 = rhs.NAM5;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Height) ?? true))
            {
                item.Height = rhs.Height;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Weight) ?? true))
            {
                item.Weight = rhs.Weight;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.SoundLevel) ?? true))
            {
                item.SoundLevel = rhs.SoundLevel;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.Sound) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.Sound);
                try
                {
                    if(rhs.Sound is {} rhsSound)
                    {
                        item.Sound = rhsSound.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.Sound));
                    }
                    else
                    {
                        item.Sound = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultOutfit) ?? true))
            {
                item.DefaultOutfit.SetTo(rhs.DefaultOutfit.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.SleepingOutfit) ?? true))
            {
                item.SleepingOutfit.SetTo(rhs.SleepingOutfit.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.DefaultPackageList) ?? true))
            {
                item.DefaultPackageList.SetTo(rhs.DefaultPackageList.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.CrimeFaction) ?? true))
            {
                item.CrimeFaction.SetTo(rhs.CrimeFaction.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.HeadTexture) ?? true))
            {
                item.HeadTexture.SetTo(rhs.HeadTexture.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.TextureLighting) ?? true))
            {
                item.TextureLighting = rhs.TextureLighting;
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceMorph) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.FaceMorph);
                try
                {
                    if(rhs.FaceMorph is {} rhsFaceMorph)
                    {
                        item.FaceMorph = rhsFaceMorph.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.FaceMorph));
                    }
                    else
                    {
                        item.FaceMorph = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.FaceParts) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.FaceParts);
                try
                {
                    if(rhs.FaceParts is {} rhsFaceParts)
                    {
                        item.FaceParts = rhsFaceParts.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)Npc_FieldIndex.FaceParts));
                    }
                    else
                    {
                        item.FaceParts = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)Npc_FieldIndex.TintLayers) ?? true))
            {
                errorMask?.PushIndex((int)Npc_FieldIndex.TintLayers);
                try
                {
                    item.TintLayers.SetTo(
                        rhs.TintLayers
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            INpc item,
            INpcGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpcInternal)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (INpc)item,
                rhs: (INpcGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public Npc DeepCopy(
            INpcGetter item,
            Npc.TranslationMask? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public Npc DeepCopy(
            INpcGetter item,
            out Npc.ErrorMask errorMask,
            Npc.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = Npc.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public Npc DeepCopy(
            INpcGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            Npc ret = (Npc)((NpcCommon)((INpcGetter)item).CommonInstance()!).GetNew();
            ((NpcSetterTranslationCommon)((INpcGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class Npc
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Npc_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Npc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return NpcSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class NpcBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly NpcBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            INpcGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            var ConfigurationItem = item.Configuration;
            ((NpcConfigurationBinaryWriteTranslation)((IBinaryItem)ConfigurationItem).BinaryWriteTranslator).Write(
                item: ConfigurationItem,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IRankPlacementGetter>.Instance.Write(
                writer: writer,
                items: item.Factions,
                transl: (MutagenWriter subWriter, IRankPlacementGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((RankPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DeathItem,
                header: translationParams.ConvertToCustom(RecordTypes.INAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Voice,
                header: translationParams.ConvertToCustom(RecordTypes.VTCK));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Template,
                header: translationParams.ConvertToCustom(RecordTypes.TPLT));
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Race,
                header: translationParams.ConvertToCustom(RecordTypes.RNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.ActorEffect,
                counterType: RecordTypes.SPCT,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.SPLO),
                subRecordPerItem: true,
                transl: (MutagenWriter subWriter, IFormLinkGetter<ISpellRecordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            if (item.Destructible is {} DestructibleItem)
            {
                ((DestructibleBinaryWriteTranslation)((IBinaryItem)DestructibleItem).BinaryWriteTranslator).Write(
                    item: DestructibleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.WornArmor,
                header: translationParams.ConvertToCustom(RecordTypes.WNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FarAwayModel,
                header: translationParams.ConvertToCustom(RecordTypes.ANAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttackRace,
                header: translationParams.ConvertToCustom(RecordTypes.ATKR));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAttackGetter>.Instance.Write(
                writer: writer,
                items: item.Attacks,
                transl: (MutagenWriter subWriter, IAttackGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((AttackBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpectatorOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.SPOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ObserveDeadBodyOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.OCOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GuardWarnOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.GWOR));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatOverridePackageList,
                header: translationParams.ConvertToCustom(RecordTypes.ECOR));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IPerkPlacementGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Perks,
                counterType: RecordTypes.PRKZ,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IPerkPlacementGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((PerkPlacementBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IContainerEntryGetter>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Items,
                counterType: RecordTypes.COCT,
                counterLength: 4,
                transl: (MutagenWriter subWriter, IContainerEntryGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ContainerEntryBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            var AIDataItem = item.AIData;
            ((AIDataBinaryWriteTranslation)((IBinaryItem)AIDataItem).BinaryWriteTranslator).Write(
                item: AIDataItem,
                writer: writer,
                translationParams: translationParams);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPackageGetter>>.Instance.Write(
                writer: writer,
                items: item.Packages,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPackageGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.PKID));
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.WriteWithCounter(
                writer: writer,
                items: item.Keywords,
                counterType: RecordTypes.KSIZ,
                counterLength: 4,
                recordType: translationParams.ConvertToCustom(RecordTypes.KWDA),
                transl: (MutagenWriter subWriter, IFormLinkGetter<IKeywordGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            FormLinkBinaryTranslation.Instance.Write(
                writer: writer,
                item: item.Class,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.ShortName,
                header: translationParams.ConvertToCustom(RecordTypes.SHRT),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            NpcBinaryWriteTranslation.WriteBinaryDataMarker(
                writer: writer,
                item: item);
            if (item.PlayerSkills is {} PlayerSkillsItem)
            {
                ((PlayerSkillsBinaryWriteTranslation)((IBinaryItem)PlayerSkillsItem).BinaryWriteTranslator).Write(
                    item: PlayerSkillsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IHeadPartGetter>>.Instance.Write(
                writer: writer,
                items: item.HeadParts,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IHeadPartGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.PNAM));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HairColor,
                header: translationParams.ConvertToCustom(RecordTypes.HCLF));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CombatStyle,
                header: translationParams.ConvertToCustom(RecordTypes.ZNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GiftFilter,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.NAM5,
                header: translationParams.ConvertToCustom(RecordTypes.NAM5));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Height,
                header: translationParams.ConvertToCustom(RecordTypes.NAM6));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.Weight,
                header: translationParams.ConvertToCustom(RecordTypes.NAM7));
            EnumBinaryTranslation<SoundLevel, MutagenFrame, MutagenWriter>.Instance.Write(
                writer,
                item.SoundLevel,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.NAM8));
            if (item.Sound is {} SoundItem)
            {
                ((ANpcSoundDefinitionBinaryWriteTranslation)((IBinaryItem)SoundItem).BinaryWriteTranslator).Write(
                    item: SoundItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultOutfit,
                header: translationParams.ConvertToCustom(RecordTypes.DOFT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SleepingOutfit,
                header: translationParams.ConvertToCustom(RecordTypes.SOFT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.DefaultPackageList,
                header: translationParams.ConvertToCustom(RecordTypes.DPLT));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.CrimeFaction,
                header: translationParams.ConvertToCustom(RecordTypes.CRIF));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.HeadTexture,
                header: translationParams.ConvertToCustom(RecordTypes.FTST));
            ColorBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TextureLighting,
                header: translationParams.ConvertToCustom(RecordTypes.QNAM),
                binaryType: ColorBinaryType.NoAlphaFloat);
            if (item.FaceMorph is {} FaceMorphItem)
            {
                ((NpcFaceMorphBinaryWriteTranslation)((IBinaryItem)FaceMorphItem).BinaryWriteTranslator).Write(
                    item: FaceMorphItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.FaceParts is {} FacePartsItem)
            {
                ((NpcFacePartsBinaryWriteTranslation)((IBinaryItem)FacePartsItem).BinaryWriteTranslator).Write(
                    item: FacePartsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ITintLayerGetter>.Instance.Write(
                writer: writer,
                items: item.TintLayers,
                transl: (MutagenWriter subWriter, ITintLayerGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((TintLayerBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public static partial void WriteBinaryDataMarkerCustom(
            MutagenWriter writer,
            INpcGetter item);

        public static void WriteBinaryDataMarker(
            MutagenWriter writer,
            INpcGetter item)
        {
            WriteBinaryDataMarkerCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            INpcGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.NPC_,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (INpcGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class NpcBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly NpcBinaryCreateTranslation Instance = new NpcBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.NPC_;
        public static ParseResult FillBinaryRecordTypes(
            INpcInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)Npc_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ACBS:
                {
                    item.Configuration = Mutagen.Bethesda.Skyrim.NpcConfiguration.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.Configuration;
                }
                case RecordTypeInts.SNAM:
                {
                    item.Factions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<RankPlacement>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: RankPlacement_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: RankPlacement.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.Factions;
                }
                case RecordTypeInts.INAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DeathItem.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.DeathItem;
                }
                case RecordTypeInts.VTCK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Voice.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Voice;
                }
                case RecordTypeInts.TPLT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Template.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Template;
                }
                case RecordTypeInts.RNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Race.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Race;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    item.ActorEffect = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ISpellRecordGetter>>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.SPCT),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.SPLO),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    return (int)Npc_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    item.Destructible = Mutagen.Bethesda.Skyrim.Destructible.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.Destructible;
                }
                case RecordTypeInts.WNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.WornArmor.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.WornArmor;
                }
                case RecordTypeInts.ANAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FarAwayModel.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.FarAwayModel;
                }
                case RecordTypeInts.ATKR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttackRace.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.AttackRace;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                {
                    item.Attacks.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Attack>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Attack_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Attack.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.Attacks;
                }
                case RecordTypeInts.SPOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpectatorOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ObserveDeadBodyOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GuardWarnOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatOverridePackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.PRKR:
                case RecordTypeInts.PRKZ:
                {
                    item.Perks = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<PerkPlacement>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.PRKZ,
                            triggeringRecord: PerkPlacement_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: PerkPlacement.TryCreateFromBinary)
                        .CastExtendedList<PerkPlacement>();
                    return (int)Npc_FieldIndex.Perks;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    item.Items = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ContainerEntry>.Instance.ParsePerItem(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: RecordTypes.COCT,
                            triggeringRecord: ContainerEntry_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: ContainerEntry.TryCreateFromBinary)
                        .CastExtendedList<ContainerEntry>();
                    return (int)Npc_FieldIndex.Items;
                }
                case RecordTypeInts.AIDT:
                {
                    item.AIData = Mutagen.Bethesda.Skyrim.AIData.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.AIData;
                }
                case RecordTypeInts.PKID:
                {
                    item.Packages.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPackageGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.PKID),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Npc_FieldIndex.Packages;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    item.Keywords = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IKeywordGetter>>.Instance.Parse(
                            reader: frame,
                            countLengthLength: 4,
                            countRecord: translationParams.ConvertToCustom(RecordTypes.KSIZ),
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.KWDA),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<IKeywordGetter>>();
                    return (int)Npc_FieldIndex.Keywords;
                }
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Class.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.Class;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Npc_FieldIndex.Name;
                }
                case RecordTypeInts.SHRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ShortName = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)Npc_FieldIndex.ShortName;
                }
                case RecordTypeInts.DATA:
                {
                    return NpcBinaryCreateTranslation.FillBinaryDataMarkerCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.DNAM:
                {
                    item.PlayerSkills = Mutagen.Bethesda.Skyrim.PlayerSkills.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.PlayerSkills;
                }
                case RecordTypeInts.PNAM:
                {
                    item.HeadParts.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IHeadPartGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.PNAM),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)Npc_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HCLF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HairColor.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.HairColor;
                }
                case RecordTypeInts.ZNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CombatStyle.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GiftFilter.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.GiftFilter;
                }
                case RecordTypeInts.NAM5:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NAM5 = frame.ReadUInt16();
                    return (int)Npc_FieldIndex.NAM5;
                }
                case RecordTypeInts.NAM6:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Height = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.Height;
                }
                case RecordTypeInts.NAM7:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Weight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)Npc_FieldIndex.Weight;
                }
                case RecordTypeInts.NAM8:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SoundLevel = EnumBinaryTranslation<SoundLevel, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)Npc_FieldIndex.SoundLevel;
                }
                case RecordTypeInts.CSCR:
                {
                    item.Sound = Mutagen.Bethesda.Skyrim.NpcInheritSound.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.Sound;
                }
                case RecordTypeInts.CSDT:
                case RecordTypeInts.CSDI:
                case RecordTypeInts.CSDC:
                {
                    item.Sound = Mutagen.Bethesda.Skyrim.NpcSoundTypes.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.Sound;
                }
                case RecordTypeInts.DOFT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultOutfit.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.DefaultOutfit;
                }
                case RecordTypeInts.SOFT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SleepingOutfit.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.SleepingOutfit;
                }
                case RecordTypeInts.DPLT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DefaultPackageList.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.DefaultPackageList;
                }
                case RecordTypeInts.CRIF:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CrimeFaction.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.CrimeFaction;
                }
                case RecordTypeInts.FTST:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeadTexture.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)Npc_FieldIndex.HeadTexture;
                }
                case RecordTypeInts.QNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TextureLighting = frame.ReadColor(ColorBinaryType.NoAlphaFloat);
                    return (int)Npc_FieldIndex.TextureLighting;
                }
                case RecordTypeInts.NAM9:
                {
                    item.FaceMorph = Mutagen.Bethesda.Skyrim.NpcFaceMorph.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.FaceMorph;
                }
                case RecordTypeInts.NAMA:
                {
                    item.FaceParts = Mutagen.Bethesda.Skyrim.NpcFaceParts.CreateFromBinary(frame: frame);
                    return (int)Npc_FieldIndex.FaceParts;
                }
                case RecordTypeInts.TINI:
                case RecordTypeInts.TINC:
                case RecordTypeInts.TINV:
                case RecordTypeInts.TIAS:
                {
                    item.TintLayers.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<TintLayer>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: TintLayer_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: TintLayer.TryCreateFromBinary));
                    return (int)Npc_FieldIndex.TintLayers;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial ParseResult FillBinaryDataMarkerCustom(
            MutagenFrame frame,
            INpcInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class NpcBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class NpcBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        INpcGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => Npc_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => Npc_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => NpcCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => NpcSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => NpcCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => NpcCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => NpcBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((NpcBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(INpc);

        public Npc.MajorFlag MajorFlags => (Npc.MajorFlag)this.MajorRecordFlagsRaw;

        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Configuration
        private RangeInt32? _ConfigurationLocation;
        private INpcConfigurationGetter? _Configuration => _ConfigurationLocation.HasValue ? NpcConfigurationBinaryOverlay.NpcConfigurationFactory(_recordData.Slice(_ConfigurationLocation!.Value.Min), _package) : default;
        public INpcConfigurationGetter Configuration => _Configuration ?? new NpcConfiguration();
        #endregion
        public IReadOnlyList<IRankPlacementGetter> Factions { get; private set; } = Array.Empty<IRankPlacementGetter>();
        #region DeathItem
        private int? _DeathItemLocation;
        public IFormLinkNullableGetter<ILeveledItemGetter> DeathItem => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILeveledItemGetter>(_package, _recordData, _DeathItemLocation);
        #endregion
        #region Voice
        private int? _VoiceLocation;
        public IFormLinkNullableGetter<IVoiceTypeGetter> Voice => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IVoiceTypeGetter>(_package, _recordData, _VoiceLocation);
        #endregion
        #region Template
        private int? _TemplateLocation;
        public IFormLinkNullableGetter<INpcSpawnGetter> Template => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<INpcSpawnGetter>(_package, _recordData, _TemplateLocation);
        #endregion
        #region Race
        private int? _RaceLocation;
        public IFormLinkGetter<IRaceGetter> Race => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _RaceLocation);
        #endregion
        public IReadOnlyList<IFormLinkGetter<ISpellRecordGetter>>? ActorEffect { get; private set; }
        public IDestructibleGetter? Destructible { get; private set; }
        #region WornArmor
        private int? _WornArmorLocation;
        public IFormLinkNullableGetter<IArmorGetter> WornArmor => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArmorGetter>(_package, _recordData, _WornArmorLocation);
        #endregion
        #region FarAwayModel
        private int? _FarAwayModelLocation;
        public IFormLinkNullableGetter<IArmorGetter> FarAwayModel => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IArmorGetter>(_package, _recordData, _FarAwayModelLocation);
        #endregion
        #region AttackRace
        private int? _AttackRaceLocation;
        public IFormLinkNullableGetter<IRaceGetter> AttackRace => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IRaceGetter>(_package, _recordData, _AttackRaceLocation);
        #endregion
        public IReadOnlyList<IAttackGetter> Attacks { get; private set; } = Array.Empty<IAttackGetter>();
        #region SpectatorOverridePackageList
        private int? _SpectatorOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> SpectatorOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _SpectatorOverridePackageListLocation);
        #endregion
        #region ObserveDeadBodyOverridePackageList
        private int? _ObserveDeadBodyOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> ObserveDeadBodyOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _ObserveDeadBodyOverridePackageListLocation);
        #endregion
        #region GuardWarnOverridePackageList
        private int? _GuardWarnOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> GuardWarnOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _GuardWarnOverridePackageListLocation);
        #endregion
        #region CombatOverridePackageList
        private int? _CombatOverridePackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> CombatOverridePackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _CombatOverridePackageListLocation);
        #endregion
        public IReadOnlyList<IPerkPlacementGetter>? Perks { get; private set; }
        public IReadOnlyList<IContainerEntryGetter>? Items { get; private set; }
        #region AIData
        private RangeInt32? _AIDataLocation;
        private IAIDataGetter? _AIData => _AIDataLocation.HasValue ? AIDataBinaryOverlay.AIDataFactory(_recordData.Slice(_AIDataLocation!.Value.Min), _package) : default;
        public IAIDataGetter AIData => _AIData ?? new AIData();
        #endregion
        public IReadOnlyList<IFormLinkGetter<IPackageGetter>> Packages { get; private set; } = Array.Empty<IFormLinkGetter<IPackageGetter>>();
        #region Keywords
        public IReadOnlyList<IFormLinkGetter<IKeywordGetter>>? Keywords { get; private set; }
        IReadOnlyList<IFormLinkGetter<IKeywordCommonGetter>>? IKeywordedGetter.Keywords => this.Keywords;
        #endregion
        #region Class
        private int? _ClassLocation;
        public IFormLinkGetter<IClassGetter> Class => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IClassGetter>(_package, _recordData, _ClassLocation);
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        #region ShortName
        private int? _ShortNameLocation;
        public ITranslatedStringGetter? ShortName => _ShortNameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ShortNameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        #region DataMarker
        public partial ParseResult DataMarkerCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region PlayerSkills
        private RangeInt32? _PlayerSkillsLocation;
        public IPlayerSkillsGetter? PlayerSkills => _PlayerSkillsLocation.HasValue ? PlayerSkillsBinaryOverlay.PlayerSkillsFactory(_recordData.Slice(_PlayerSkillsLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IFormLinkGetter<IHeadPartGetter>> HeadParts { get; private set; } = Array.Empty<IFormLinkGetter<IHeadPartGetter>>();
        #region HairColor
        private int? _HairColorLocation;
        public IFormLinkNullableGetter<IColorRecordGetter> HairColor => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IColorRecordGetter>(_package, _recordData, _HairColorLocation);
        #endregion
        #region CombatStyle
        private int? _CombatStyleLocation;
        public IFormLinkNullableGetter<ICombatStyleGetter> CombatStyle => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICombatStyleGetter>(_package, _recordData, _CombatStyleLocation);
        #endregion
        #region GiftFilter
        private int? _GiftFilterLocation;
        public IFormLinkNullableGetter<IFormListGetter> GiftFilter => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _GiftFilterLocation);
        #endregion
        #region NAM5
        private int? _NAM5Location;
        public UInt16 NAM5 => _NAM5Location.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NAM5Location.Value, _package.MetaData.Constants)) : default(UInt16);
        #endregion
        #region Height
        private int? _HeightLocation;
        public Single Height => _HeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HeightLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region Weight
        private int? _WeightLocation;
        public Single Weight => _WeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _WeightLocation.Value, _package.MetaData.Constants).Float() : default(Single);
        #endregion
        #region SoundLevel
        private int? _SoundLevelLocation;
        public SoundLevel SoundLevel => _SoundLevelLocation.HasValue ? (SoundLevel)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _SoundLevelLocation!.Value, _package.MetaData.Constants)) : default(SoundLevel);
        #endregion
        public IANpcSoundDefinitionGetter? Sound { get; private set; }
        #region DefaultOutfit
        private int? _DefaultOutfitLocation;
        public IFormLinkNullableGetter<IOutfitGetter> DefaultOutfit => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IOutfitGetter>(_package, _recordData, _DefaultOutfitLocation);
        #endregion
        #region SleepingOutfit
        private int? _SleepingOutfitLocation;
        public IFormLinkNullableGetter<IOutfitGetter> SleepingOutfit => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IOutfitGetter>(_package, _recordData, _SleepingOutfitLocation);
        #endregion
        #region DefaultPackageList
        private int? _DefaultPackageListLocation;
        public IFormLinkNullableGetter<IFormListGetter> DefaultPackageList => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFormListGetter>(_package, _recordData, _DefaultPackageListLocation);
        #endregion
        #region CrimeFaction
        private int? _CrimeFactionLocation;
        public IFormLinkNullableGetter<IFactionGetter> CrimeFaction => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IFactionGetter>(_package, _recordData, _CrimeFactionLocation);
        #endregion
        #region HeadTexture
        private int? _HeadTextureLocation;
        public IFormLinkNullableGetter<ITextureSetGetter> HeadTexture => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ITextureSetGetter>(_package, _recordData, _HeadTextureLocation);
        #endregion
        #region TextureLighting
        private int? _TextureLightingLocation;
        public Color? TextureLighting => _TextureLightingLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _TextureLightingLocation.Value, _package.MetaData.Constants).ReadColor(ColorBinaryType.NoAlphaFloat) : default(Color?);
        #endregion
        #region FaceMorph
        private RangeInt32? _FaceMorphLocation;
        public INpcFaceMorphGetter? FaceMorph => _FaceMorphLocation.HasValue ? NpcFaceMorphBinaryOverlay.NpcFaceMorphFactory(_recordData.Slice(_FaceMorphLocation!.Value.Min), _package) : default;
        #endregion
        #region FaceParts
        private RangeInt32? _FacePartsLocation;
        public INpcFacePartsGetter? FaceParts => _FacePartsLocation.HasValue ? NpcFacePartsBinaryOverlay.NpcFacePartsFactory(_recordData.Slice(_FacePartsLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<ITintLayerGetter> TintLayers { get; private set; } = Array.Empty<ITintLayerGetter>();
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected NpcBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static INpcGetter NpcFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new NpcBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static INpcGetter NpcFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return NpcFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)Npc_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.ACBS:
                {
                    _ConfigurationLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.Configuration;
                }
                case RecordTypeInts.SNAM:
                {
                    this.Factions = BinaryOverlayList.FactoryByArray<IRankPlacementGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => RankPlacementBinaryOverlay.RankPlacementFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: RankPlacement_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)Npc_FieldIndex.Factions;
                }
                case RecordTypeInts.INAM:
                {
                    _DeathItemLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DeathItem;
                }
                case RecordTypeInts.VTCK:
                {
                    _VoiceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Voice;
                }
                case RecordTypeInts.TPLT:
                {
                    _TemplateLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Template;
                }
                case RecordTypeInts.RNAM:
                {
                    _RaceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Race;
                }
                case RecordTypeInts.SPLO:
                case RecordTypeInts.SPCT:
                {
                    this.ActorEffect = BinaryOverlayList.FactoryByCountPerItem<IFormLinkGetter<ISpellRecordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.SPCT,
                        trigger: RecordTypes.SPLO,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ISpellRecordGetter>(p, s));
                    return (int)Npc_FieldIndex.ActorEffect;
                }
                case RecordTypeInts.DEST:
                case RecordTypeInts.DSTD:
                case RecordTypeInts.DMDL:
                {
                    this.Destructible = DestructibleBinaryOverlay.DestructibleFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.Destructible;
                }
                case RecordTypeInts.WNAM:
                {
                    _WornArmorLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.WornArmor;
                }
                case RecordTypeInts.ANAM:
                {
                    _FarAwayModelLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.FarAwayModel;
                }
                case RecordTypeInts.ATKR:
                {
                    _AttackRaceLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.AttackRace;
                }
                case RecordTypeInts.ATKD:
                case RecordTypeInts.ATKE:
                {
                    this.Attacks = this.ParseRepeatedTypelessSubrecord<IAttackGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Attack_Registration.TriggerSpecs,
                        factory: AttackBinaryOverlay.AttackFactory);
                    return (int)Npc_FieldIndex.Attacks;
                }
                case RecordTypeInts.SPOR:
                {
                    _SpectatorOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.SpectatorOverridePackageList;
                }
                case RecordTypeInts.OCOR:
                {
                    _ObserveDeadBodyOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.ObserveDeadBodyOverridePackageList;
                }
                case RecordTypeInts.GWOR:
                {
                    _GuardWarnOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.GuardWarnOverridePackageList;
                }
                case RecordTypeInts.ECOR:
                {
                    _CombatOverridePackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.CombatOverridePackageList;
                }
                case RecordTypeInts.PRKR:
                case RecordTypeInts.PRKZ:
                {
                    this.Perks = BinaryOverlayList.FactoryByCountPerItem<IPerkPlacementGetter>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x8,
                        countLength: 4,
                        countType: RecordTypes.PRKZ,
                        trigger: RecordTypes.PRKR,
                        getter: (s, p) => PerkPlacementBinaryOverlay.PerkPlacementFactory(s, p),
                        skipHeader: false);
                    return (int)Npc_FieldIndex.Perks;
                }
                case RecordTypeInts.CNTO:
                case RecordTypeInts.COCT:
                {
                    this.Items = BinaryOverlayList.FactoryByCountPerItem<IContainerEntryGetter>(
                        stream: stream,
                        package: _package,
                        countLength: 4,
                        trigger: ContainerEntry_Registration.TriggerSpecs,
                        countType: RecordTypes.COCT,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ContainerEntryBinaryOverlay.ContainerEntryFactory(new OverlayStream(s, p), p, recConv),
                        skipHeader: false);
                    return (int)Npc_FieldIndex.Items;
                }
                case RecordTypeInts.AIDT:
                {
                    _AIDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.AIData;
                }
                case RecordTypeInts.PKID:
                {
                    this.Packages = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IPackageGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPackageGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.PKID,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Npc_FieldIndex.Packages;
                }
                case RecordTypeInts.KSIZ:
                case RecordTypeInts.KWDA:
                {
                    this.Keywords = BinaryOverlayList.FactoryByCount<IFormLinkGetter<IKeywordGetter>>(
                        stream: stream,
                        package: _package,
                        itemLength: 0x4,
                        countLength: 4,
                        countType: RecordTypes.KSIZ,
                        trigger: RecordTypes.KWDA,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IKeywordGetter>(p, s));
                    return (int)Npc_FieldIndex.Keywords;
                }
                case RecordTypeInts.CNAM:
                {
                    _ClassLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Class;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Name;
                }
                case RecordTypeInts.SHRT:
                {
                    _ShortNameLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.ShortName;
                }
                case RecordTypeInts.DATA:
                {
                    return DataMarkerCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.DNAM:
                {
                    _PlayerSkillsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.PlayerSkills;
                }
                case RecordTypeInts.PNAM:
                {
                    this.HeadParts = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IHeadPartGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IHeadPartGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.PNAM,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)Npc_FieldIndex.HeadParts;
                }
                case RecordTypeInts.HCLF:
                {
                    _HairColorLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.HairColor;
                }
                case RecordTypeInts.ZNAM:
                {
                    _CombatStyleLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.CombatStyle;
                }
                case RecordTypeInts.GNAM:
                {
                    _GiftFilterLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.GiftFilter;
                }
                case RecordTypeInts.NAM5:
                {
                    _NAM5Location = (stream.Position - offset);
                    return (int)Npc_FieldIndex.NAM5;
                }
                case RecordTypeInts.NAM6:
                {
                    _HeightLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Height;
                }
                case RecordTypeInts.NAM7:
                {
                    _WeightLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.Weight;
                }
                case RecordTypeInts.NAM8:
                {
                    _SoundLevelLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.SoundLevel;
                }
                case RecordTypeInts.CSCR:
                {
                    this.Sound = NpcInheritSoundBinaryOverlay.NpcInheritSoundFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.Sound;
                }
                case RecordTypeInts.CSDT:
                case RecordTypeInts.CSDI:
                case RecordTypeInts.CSDC:
                {
                    this.Sound = NpcSoundTypesBinaryOverlay.NpcSoundTypesFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)Npc_FieldIndex.Sound;
                }
                case RecordTypeInts.DOFT:
                {
                    _DefaultOutfitLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DefaultOutfit;
                }
                case RecordTypeInts.SOFT:
                {
                    _SleepingOutfitLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.SleepingOutfit;
                }
                case RecordTypeInts.DPLT:
                {
                    _DefaultPackageListLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.DefaultPackageList;
                }
                case RecordTypeInts.CRIF:
                {
                    _CrimeFactionLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.CrimeFaction;
                }
                case RecordTypeInts.FTST:
                {
                    _HeadTextureLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.HeadTexture;
                }
                case RecordTypeInts.QNAM:
                {
                    _TextureLightingLocation = (stream.Position - offset);
                    return (int)Npc_FieldIndex.TextureLighting;
                }
                case RecordTypeInts.NAM9:
                {
                    _FaceMorphLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.FaceMorph;
                }
                case RecordTypeInts.NAMA:
                {
                    _FacePartsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)Npc_FieldIndex.FaceParts;
                }
                case RecordTypeInts.TINI:
                case RecordTypeInts.TINC:
                case RecordTypeInts.TINV:
                case RecordTypeInts.TIAS:
                {
                    this.TintLayers = this.ParseRepeatedTypelessSubrecord<ITintLayerGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: TintLayer_Registration.TriggerSpecs,
                        factory: TintLayerBinaryOverlay.TintLayerFactory);
                    return (int)Npc_FieldIndex.TintLayers;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            NpcMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<Npc>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not INpcGetter rhs) return false;
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(INpcGetter? obj)
        {
            return ((NpcCommon)((INpcGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((NpcCommon)((INpcGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

