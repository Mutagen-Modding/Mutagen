/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class DualCastData :
        SkyrimMajorRecord,
        IDualCastDataInternal,
        IEquatable<IDualCastDataGetter>,
        ILoquiObjectSetter<DualCastData>
    {
        #region Ctor
        protected DualCastData()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IDualCastDataGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Projectile
        private readonly IFormLink<IProjectileGetter> _Projectile = new FormLink<IProjectileGetter>();
        public IFormLink<IProjectileGetter> Projectile
        {
            get => _Projectile;
            set => _Projectile.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IProjectileGetter> IDualCastDataGetter.Projectile => this.Projectile;
        #endregion
        #region Explosion
        private readonly IFormLink<IExplosionGetter> _Explosion = new FormLink<IExplosionGetter>();
        public IFormLink<IExplosionGetter> Explosion
        {
            get => _Explosion;
            set => _Explosion.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IExplosionGetter> IDualCastDataGetter.Explosion => this.Explosion;
        #endregion
        #region EffectShader
        private readonly IFormLink<IEffectShaderGetter> _EffectShader = new FormLink<IEffectShaderGetter>();
        public IFormLink<IEffectShaderGetter> EffectShader
        {
            get => _EffectShader;
            set => _EffectShader.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IEffectShaderGetter> IDualCastDataGetter.EffectShader => this.EffectShader;
        #endregion
        #region HitEffectArt
        private readonly IFormLink<IArtObjectGetter> _HitEffectArt = new FormLink<IArtObjectGetter>();
        public IFormLink<IArtObjectGetter> HitEffectArt
        {
            get => _HitEffectArt;
            set => _HitEffectArt.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IArtObjectGetter> IDualCastDataGetter.HitEffectArt => this.HitEffectArt;
        #endregion
        #region ImpactDataSet
        private readonly IFormLink<IImpactDataSetGetter> _ImpactDataSet = new FormLink<IImpactDataSetGetter>();
        public IFormLink<IImpactDataSetGetter> ImpactDataSet
        {
            get => _ImpactDataSet;
            set => _ImpactDataSet.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IImpactDataSetGetter> IDualCastDataGetter.ImpactDataSet => this.ImpactDataSet;
        #endregion
        #region InheritScale
        public DualCastData.InheritScaleType InheritScale { get; set; } = default(DualCastData.InheritScaleType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DualCastDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Projectile = initialValue;
                this.Explosion = initialValue;
                this.EffectShader = initialValue;
                this.HitEffectArt = initialValue;
                this.ImpactDataSet = initialValue;
                this.InheritScale = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem ObjectBounds,
                TItem Projectile,
                TItem Explosion,
                TItem EffectShader,
                TItem HitEffectArt,
                TItem ImpactDataSet,
                TItem InheritScale)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Projectile = Projectile;
                this.Explosion = Explosion;
                this.EffectShader = EffectShader;
                this.HitEffectArt = HitEffectArt;
                this.ImpactDataSet = ImpactDataSet;
                this.InheritScale = InheritScale;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Projectile;
            public TItem Explosion;
            public TItem EffectShader;
            public TItem HitEffectArt;
            public TItem ImpactDataSet;
            public TItem InheritScale;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Projectile, rhs.Projectile)) return false;
                if (!object.Equals(this.Explosion, rhs.Explosion)) return false;
                if (!object.Equals(this.EffectShader, rhs.EffectShader)) return false;
                if (!object.Equals(this.HitEffectArt, rhs.HitEffectArt)) return false;
                if (!object.Equals(this.ImpactDataSet, rhs.ImpactDataSet)) return false;
                if (!object.Equals(this.InheritScale, rhs.InheritScale)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Projectile);
                hash.Add(this.Explosion);
                hash.Add(this.EffectShader);
                hash.Add(this.HitEffectArt);
                hash.Add(this.ImpactDataSet);
                hash.Add(this.InheritScale);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Projectile)) return false;
                if (!eval(this.Explosion)) return false;
                if (!eval(this.EffectShader)) return false;
                if (!eval(this.HitEffectArt)) return false;
                if (!eval(this.ImpactDataSet)) return false;
                if (!eval(this.InheritScale)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Projectile)) return true;
                if (eval(this.Explosion)) return true;
                if (eval(this.EffectShader)) return true;
                if (eval(this.HitEffectArt)) return true;
                if (eval(this.ImpactDataSet)) return true;
                if (eval(this.InheritScale)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new DualCastData.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Projectile = eval(this.Projectile);
                obj.Explosion = eval(this.Explosion);
                obj.EffectShader = eval(this.EffectShader);
                obj.HitEffectArt = eval(this.HitEffectArt);
                obj.ImpactDataSet = eval(this.ImpactDataSet);
                obj.InheritScale = eval(this.InheritScale);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(DualCastData.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, DualCastData.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(DualCastData.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Projectile ?? true)
                    {
                        sb.AppendItem(Projectile, "Projectile");
                    }
                    if (printMask?.Explosion ?? true)
                    {
                        sb.AppendItem(Explosion, "Explosion");
                    }
                    if (printMask?.EffectShader ?? true)
                    {
                        sb.AppendItem(EffectShader, "EffectShader");
                    }
                    if (printMask?.HitEffectArt ?? true)
                    {
                        sb.AppendItem(HitEffectArt, "HitEffectArt");
                    }
                    if (printMask?.ImpactDataSet ?? true)
                    {
                        sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                    }
                    if (printMask?.InheritScale ?? true)
                    {
                        sb.AppendItem(InheritScale, "InheritScale");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Projectile;
            public Exception? Explosion;
            public Exception? EffectShader;
            public Exception? HitEffectArt;
            public Exception? ImpactDataSet;
            public Exception? InheritScale;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                DualCastData_FieldIndex enu = (DualCastData_FieldIndex)index;
                switch (enu)
                {
                    case DualCastData_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case DualCastData_FieldIndex.Projectile:
                        return Projectile;
                    case DualCastData_FieldIndex.Explosion:
                        return Explosion;
                    case DualCastData_FieldIndex.EffectShader:
                        return EffectShader;
                    case DualCastData_FieldIndex.HitEffectArt:
                        return HitEffectArt;
                    case DualCastData_FieldIndex.ImpactDataSet:
                        return ImpactDataSet;
                    case DualCastData_FieldIndex.InheritScale:
                        return InheritScale;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                DualCastData_FieldIndex enu = (DualCastData_FieldIndex)index;
                switch (enu)
                {
                    case DualCastData_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case DualCastData_FieldIndex.Projectile:
                        this.Projectile = ex;
                        break;
                    case DualCastData_FieldIndex.Explosion:
                        this.Explosion = ex;
                        break;
                    case DualCastData_FieldIndex.EffectShader:
                        this.EffectShader = ex;
                        break;
                    case DualCastData_FieldIndex.HitEffectArt:
                        this.HitEffectArt = ex;
                        break;
                    case DualCastData_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = ex;
                        break;
                    case DualCastData_FieldIndex.InheritScale:
                        this.InheritScale = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                DualCastData_FieldIndex enu = (DualCastData_FieldIndex)index;
                switch (enu)
                {
                    case DualCastData_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case DualCastData_FieldIndex.Projectile:
                        this.Projectile = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.Explosion:
                        this.Explosion = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.EffectShader:
                        this.EffectShader = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.HitEffectArt:
                        this.HitEffectArt = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.ImpactDataSet:
                        this.ImpactDataSet = (Exception?)obj;
                        break;
                    case DualCastData_FieldIndex.InheritScale:
                        this.InheritScale = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Projectile != null) return true;
                if (Explosion != null) return true;
                if (EffectShader != null) return true;
                if (HitEffectArt != null) return true;
                if (ImpactDataSet != null) return true;
                if (InheritScale != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(Projectile, "Projectile");
                }
                {
                    sb.AppendItem(Explosion, "Explosion");
                }
                {
                    sb.AppendItem(EffectShader, "EffectShader");
                }
                {
                    sb.AppendItem(HitEffectArt, "HitEffectArt");
                }
                {
                    sb.AppendItem(ImpactDataSet, "ImpactDataSet");
                }
                {
                    sb.AppendItem(InheritScale, "InheritScale");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Projectile = this.Projectile.Combine(rhs.Projectile);
                ret.Explosion = this.Explosion.Combine(rhs.Explosion);
                ret.EffectShader = this.EffectShader.Combine(rhs.EffectShader);
                ret.HitEffectArt = this.HitEffectArt.Combine(rhs.HitEffectArt);
                ret.ImpactDataSet = this.ImpactDataSet.Combine(rhs.ImpactDataSet);
                ret.InheritScale = this.InheritScale.Combine(rhs.InheritScale);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Projectile;
            public bool Explosion;
            public bool EffectShader;
            public bool HitEffectArt;
            public bool ImpactDataSet;
            public bool InheritScale;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Projectile = defaultOn;
                this.Explosion = defaultOn;
                this.EffectShader = defaultOn;
                this.HitEffectArt = defaultOn;
                this.ImpactDataSet = defaultOn;
                this.InheritScale = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Projectile, null));
                ret.Add((Explosion, null));
                ret.Add((EffectShader, null));
                ret.Add((HitEffectArt, null));
                ret.Add((ImpactDataSet, null));
                ret.Add((InheritScale, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = DualCastData_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DualCastDataCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => DualCastDataSetterCommon.Instance.RemapLinks(this, mapping);
        public DualCastData(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private DualCastData(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal DualCastData(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public DualCastData(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public DualCastData(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<DualCastData>.ToString(this);
        }

        protected override Type LinkType => typeof(IDualCastData);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDualCastDataGetter rhs) return false;
            return ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDualCastDataGetter? obj)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DualCastDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DualCastDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static DualCastData CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new DualCastData();
            ((DualCastDataSetterCommon)((IDualCastDataGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out DualCastData item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((DualCastDataSetterCommon)((IDualCastDataGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new DualCastData GetNew()
        {
            return new DualCastData();
        }

    }
    #endregion

    #region Interface
    public partial interface IDualCastData :
        IDualCastDataGetter,
        IExplodeSpawn,
        IFormLinkContainer,
        ILoquiObjectSetter<IDualCastDataInternal>,
        IObjectBounded,
        ISkyrimMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new IFormLink<IProjectileGetter> Projectile { get; set; }
        new IFormLink<IExplosionGetter> Explosion { get; set; }
        new IFormLink<IEffectShaderGetter> EffectShader { get; set; }
        new IFormLink<IArtObjectGetter> HitEffectArt { get; set; }
        new IFormLink<IImpactDataSetGetter> ImpactDataSet { get; set; }
        new DualCastData.InheritScaleType InheritScale { get; set; }
    }

    public partial interface IDualCastDataInternal :
        ISkyrimMajorRecordInternal,
        IDualCastData,
        IDualCastDataGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.DUAL)]
    public partial interface IDualCastDataGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        ILoquiObject<IDualCastDataGetter>,
        IMapsToGetter<IDualCastDataGetter>,
        IObjectBoundedGetter
    {
        static new ILoquiRegistration StaticRegistration => DualCastData_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        IFormLinkGetter<IProjectileGetter> Projectile { get; }
        IFormLinkGetter<IExplosionGetter> Explosion { get; }
        IFormLinkGetter<IEffectShaderGetter> EffectShader { get; }
        IFormLinkGetter<IArtObjectGetter> HitEffectArt { get; }
        IFormLinkGetter<IImpactDataSetGetter> ImpactDataSet { get; }
        DualCastData.InheritScaleType InheritScale { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class DualCastDataMixIn
    {
        public static void Clear(this IDualCastDataInternal item)
        {
            ((DualCastDataSetterCommon)((IDualCastDataGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static DualCastData.Mask<bool> GetEqualsMask(
            this IDualCastDataGetter item,
            IDualCastDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IDualCastDataGetter item,
            string? name = null,
            DualCastData.Mask<bool>? printMask = null)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IDualCastDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DualCastData.Mask<bool>? printMask = null)
        {
            ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IDualCastDataGetter item,
            IDualCastDataGetter rhs,
            DualCastData.TranslationMask? equalsMask = null)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IDualCastDataInternal lhs,
            IDualCastDataGetter rhs,
            out DualCastData.ErrorMask errorMask,
            DualCastData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = DualCastData.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IDualCastDataInternal lhs,
            IDualCastDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static DualCastData DeepCopy(
            this IDualCastDataGetter item,
            DualCastData.TranslationMask? copyMask = null)
        {
            return ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static DualCastData DeepCopy(
            this IDualCastDataGetter item,
            out DualCastData.ErrorMask errorMask,
            DualCastData.TranslationMask? copyMask = null)
        {
            return ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static DualCastData DeepCopy(
            this IDualCastDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static DualCastData Duplicate(
            this IDualCastDataGetter item,
            FormKey formKey,
            DualCastData.TranslationMask? copyMask = null)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static DualCastData Duplicate(
            this IDualCastDataGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IDualCastDataInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((DualCastDataSetterCommon)((IDualCastDataGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum DualCastData_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        ObjectBounds = 7,
        Projectile = 8,
        Explosion = 9,
        EffectShader = 10,
        HitEffectArt = 11,
        ImpactDataSet = 12,
        InheritScale = 13,
    }
    #endregion

    #region Registration
    internal partial class DualCastData_Registration : ILoquiRegistration
    {
        public static readonly DualCastData_Registration Instance = new DualCastData_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 7;

        public const ushort FieldCount = 14;

        public static readonly Type MaskType = typeof(DualCastData.Mask<>);

        public static readonly Type ErrorMaskType = typeof(DualCastData.ErrorMask);

        public static readonly Type ClassType = typeof(DualCastData);

        public static readonly Type GetterType = typeof(IDualCastDataGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IDualCastData);

        public static readonly Type? InternalSetterType = typeof(IDualCastDataInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.DualCastData";

        public const string Name = "DualCastData";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.DUAL;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.DUAL);
            var all = RecordCollection.Factory(
                RecordTypes.DUAL,
                RecordTypes.OBND,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(DualCastDataBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class DualCastDataSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly DualCastDataSetterCommon Instance = new DualCastDataSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IDualCastDataInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Projectile.Clear();
            item.Explosion.Clear();
            item.EffectShader.Clear();
            item.HitEffectArt.Clear();
            item.ImpactDataSet.Clear();
            item.InheritScale = default(DualCastData.InheritScaleType);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IDualCastDataInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IDualCastDataInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IDualCastData obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Projectile.Relink(mapping);
            obj.Explosion.Relink(mapping);
            obj.EffectShader.Relink(mapping);
            obj.HitEffectArt.Relink(mapping);
            obj.ImpactDataSet.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IDualCastDataInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IDualCastDataInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: DualCastDataBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: DualCastDataBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DualCastData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (DualCastData)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class DualCastDataCommon : SkyrimMajorRecordCommon
    {
        public new static readonly DualCastDataCommon Instance = new DualCastDataCommon();

        public DualCastData.Mask<bool> GetEqualsMask(
            IDualCastDataGetter item,
            IDualCastDataGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new DualCastData.Mask<bool>(false);
            ((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IDualCastDataGetter item,
            IDualCastDataGetter rhs,
            DualCastData.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Projectile = item.Projectile.Equals(rhs.Projectile);
            ret.Explosion = item.Explosion.Equals(rhs.Explosion);
            ret.EffectShader = item.EffectShader.Equals(rhs.EffectShader);
            ret.HitEffectArt = item.HitEffectArt.Equals(rhs.HitEffectArt);
            ret.ImpactDataSet = item.ImpactDataSet.Equals(rhs.ImpactDataSet);
            ret.InheritScale = item.InheritScale == rhs.InheritScale;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IDualCastDataGetter item,
            string? name = null,
            DualCastData.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IDualCastDataGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            DualCastData.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"DualCastData =>");
            }
            else
            {
                sb.AppendLine($"{name} (DualCastData) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IDualCastDataGetter item,
            StructuredStringBuilder sb,
            DualCastData.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if (printMask?.Projectile ?? true)
            {
                sb.AppendItem(item.Projectile.FormKey, "Projectile");
            }
            if (printMask?.Explosion ?? true)
            {
                sb.AppendItem(item.Explosion.FormKey, "Explosion");
            }
            if (printMask?.EffectShader ?? true)
            {
                sb.AppendItem(item.EffectShader.FormKey, "EffectShader");
            }
            if (printMask?.HitEffectArt ?? true)
            {
                sb.AppendItem(item.HitEffectArt.FormKey, "HitEffectArt");
            }
            if (printMask?.ImpactDataSet ?? true)
            {
                sb.AppendItem(item.ImpactDataSet.FormKey, "ImpactDataSet");
            }
            if (printMask?.InheritScale ?? true)
            {
                sb.AppendItem(item.InheritScale, "InheritScale");
            }
        }
        
        public static DualCastData_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DualCastData_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (DualCastData_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (DualCastData_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (DualCastData_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (DualCastData_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (DualCastData_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (DualCastData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new DualCastData_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (DualCastData_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (DualCastData_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (DualCastData_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (DualCastData_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IDualCastDataGetter? lhs,
            IDualCastDataGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)DualCastData_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)DualCastData_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DualCastData_FieldIndex.Projectile) ?? true))
            {
                if (!lhs.Projectile.Equals(rhs.Projectile)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DualCastData_FieldIndex.Explosion) ?? true))
            {
                if (!lhs.Explosion.Equals(rhs.Explosion)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DualCastData_FieldIndex.EffectShader) ?? true))
            {
                if (!lhs.EffectShader.Equals(rhs.EffectShader)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DualCastData_FieldIndex.HitEffectArt) ?? true))
            {
                if (!lhs.HitEffectArt.Equals(rhs.HitEffectArt)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DualCastData_FieldIndex.ImpactDataSet) ?? true))
            {
                if (!lhs.ImpactDataSet.Equals(rhs.ImpactDataSet)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)DualCastData_FieldIndex.InheritScale) ?? true))
            {
                if (lhs.InheritScale != rhs.InheritScale) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDualCastDataGetter?)lhs,
                rhs: rhs as IDualCastDataGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IDualCastDataGetter?)lhs,
                rhs: rhs as IDualCastDataGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IDualCastDataGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            hash.Add(item.Projectile);
            hash.Add(item.Explosion);
            hash.Add(item.EffectShader);
            hash.Add(item.HitEffectArt);
            hash.Add(item.ImpactDataSet);
            hash.Add(item.InheritScale);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IDualCastDataGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IDualCastDataGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return DualCastData.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IDualCastDataGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Projectile);
            yield return FormLinkInformation.Factory(obj.Explosion);
            yield return FormLinkInformation.Factory(obj.EffectShader);
            yield return FormLinkInformation.Factory(obj.HitEffectArt);
            yield return FormLinkInformation.Factory(obj.ImpactDataSet);
            yield break;
        }
        
        #region Duplicate
        public DualCastData Duplicate(
            IDualCastDataGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new DualCastData(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDualCastDataGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IDualCastDataGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class DualCastDataSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly DualCastDataSetterTranslationCommon Instance = new DualCastDataSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IDualCastDataInternal item,
            IDualCastDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IDualCastData item,
            IDualCastDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)DualCastData_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)DualCastData_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.Projectile) ?? true))
            {
                item.Projectile.SetTo(rhs.Projectile.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.Explosion) ?? true))
            {
                item.Explosion.SetTo(rhs.Explosion.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.EffectShader) ?? true))
            {
                item.EffectShader.SetTo(rhs.EffectShader.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.HitEffectArt) ?? true))
            {
                item.HitEffectArt.SetTo(rhs.HitEffectArt.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.ImpactDataSet) ?? true))
            {
                item.ImpactDataSet.SetTo(rhs.ImpactDataSet.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)DualCastData_FieldIndex.InheritScale) ?? true))
            {
                item.InheritScale = rhs.InheritScale;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IDualCastData item,
            IDualCastDataGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDualCastDataInternal)item,
                rhs: (IDualCastDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDualCastData)item,
                rhs: (IDualCastDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDualCastDataInternal)item,
                rhs: (IDualCastDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IDualCastData)item,
                rhs: (IDualCastDataGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public DualCastData DeepCopy(
            IDualCastDataGetter item,
            DualCastData.TranslationMask? copyMask = null)
        {
            DualCastData ret = (DualCastData)((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).GetNew();
            ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public DualCastData DeepCopy(
            IDualCastDataGetter item,
            out DualCastData.ErrorMask errorMask,
            DualCastData.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            DualCastData ret = (DualCastData)((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).GetNew();
            ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = DualCastData.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public DualCastData DeepCopy(
            IDualCastDataGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            DualCastData ret = (DualCastData)((DualCastDataCommon)((IDualCastDataGetter)item).CommonInstance()!).GetNew();
            ((DualCastDataSetterTranslationCommon)((IDualCastDataGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class DualCastData
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DualCastData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DualCastData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DualCastDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return DualCastDataSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DualCastDataSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class DualCastDataBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly DualCastDataBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IDualCastDataGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Projectile);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.Explosion);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.EffectShader);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.HitEffectArt);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.ImpactDataSet);
                EnumBinaryTranslation<DualCastData.InheritScaleType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.InheritScale,
                    length: 4);
            }
        }

        public void Write(
            MutagenWriter writer,
            IDualCastDataGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.DUAL,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IDualCastDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDualCastDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IDualCastDataGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class DualCastDataBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly DualCastDataBinaryCreateTranslation Instance = new DualCastDataBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.DUAL;
        public static ParseResult FillBinaryRecordTypes(
            IDualCastDataInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)DualCastData_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.Projectile.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.Explosion.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.EffectShader.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.HitEffectArt.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.ImpactDataSet.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Remaining < 4) return null;
                    item.InheritScale = EnumBinaryTranslation<DualCastData.InheritScaleType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    return (int)DualCastData_FieldIndex.InheritScale;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class DualCastDataBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class DualCastDataBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IDualCastDataGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => DualCastData_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => DualCastData_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => DualCastDataCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => DualCastDataSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => DualCastDataCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => DualCastDataBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((DualCastDataBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IDualCastData);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        private RangeInt32? _DATALocation;
        #region Projectile
        private int _ProjectileLocation => _DATALocation!.Value.Min;
        private bool _Projectile_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IProjectileGetter> Projectile => _Projectile_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IProjectileGetter>(_package, _recordData.Span.Slice(_ProjectileLocation, 0x4), isSet: _Projectile_IsSet) : FormLink<IProjectileGetter>.Null;
        #endregion
        #region Explosion
        private int _ExplosionLocation => _DATALocation!.Value.Min + 0x4;
        private bool _Explosion_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IExplosionGetter> Explosion => _Explosion_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IExplosionGetter>(_package, _recordData.Span.Slice(_ExplosionLocation, 0x4), isSet: _Explosion_IsSet) : FormLink<IExplosionGetter>.Null;
        #endregion
        #region EffectShader
        private int _EffectShaderLocation => _DATALocation!.Value.Min + 0x8;
        private bool _EffectShader_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IEffectShaderGetter> EffectShader => _EffectShader_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IEffectShaderGetter>(_package, _recordData.Span.Slice(_EffectShaderLocation, 0x4), isSet: _EffectShader_IsSet) : FormLink<IEffectShaderGetter>.Null;
        #endregion
        #region HitEffectArt
        private int _HitEffectArtLocation => _DATALocation!.Value.Min + 0xC;
        private bool _HitEffectArt_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IArtObjectGetter> HitEffectArt => _HitEffectArt_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IArtObjectGetter>(_package, _recordData.Span.Slice(_HitEffectArtLocation, 0x4), isSet: _HitEffectArt_IsSet) : FormLink<IArtObjectGetter>.Null;
        #endregion
        #region ImpactDataSet
        private int _ImpactDataSetLocation => _DATALocation!.Value.Min + 0x10;
        private bool _ImpactDataSet_IsSet => _DATALocation.HasValue;
        public IFormLinkGetter<IImpactDataSetGetter> ImpactDataSet => _ImpactDataSet_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IImpactDataSetGetter>(_package, _recordData.Span.Slice(_ImpactDataSetLocation, 0x4), isSet: _ImpactDataSet_IsSet) : FormLink<IImpactDataSetGetter>.Null;
        #endregion
        #region InheritScale
        private int _InheritScaleLocation => _DATALocation!.Value.Min + 0x14;
        private bool _InheritScale_IsSet => _DATALocation.HasValue;
        public DualCastData.InheritScaleType InheritScale => _InheritScale_IsSet ? (DualCastData.InheritScaleType)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_InheritScaleLocation, 0x4)) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected DualCastDataBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IDualCastDataGetter DualCastDataFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new DualCastDataBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IDualCastDataGetter DualCastDataFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return DualCastDataFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)DualCastData_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)DualCastData_FieldIndex.InheritScale;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            DualCastDataMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<DualCastData>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IDualCastDataGetter rhs) return false;
            return ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IDualCastDataGetter? obj)
        {
            return ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((DualCastDataCommon)((IDualCastDataGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

