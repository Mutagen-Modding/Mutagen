/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class PlacedBeam :
        APlacedTrap,
        IEquatable<IPlacedBeamGetter>,
        ILoquiObjectSetter<PlacedBeam>,
        IPlacedBeamInternal
    {
        #region Ctor
        protected PlacedBeam()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Projectile
        private readonly IFormLink<IProjectileGetter> _Projectile = new FormLink<IProjectileGetter>();
        public IFormLink<IProjectileGetter> Projectile
        {
            get => _Projectile;
            set => _Projectile.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IProjectileGetter> IPlacedBeamGetter.Projectile => this.Projectile;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedBeamMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            APlacedTrap.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Projectile = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem EncounterZone,
                TItem Owner,
                TItem FactionRank,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem Reflections,
                TItem LinkedReferences,
                TItem ActivateParents,
                TItem EnableParent,
                TItem Emittance,
                TItem MultiBoundReference,
                TItem IgnoredBySandbox,
                TItem LocationRefTypes,
                TItem LocationReference,
                TItem DistantLodData,
                TItem Scale,
                TItem Placement,
                TItem Projectile)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags,
                VirtualMachineAdapter: VirtualMachineAdapter,
                EncounterZone: EncounterZone,
                Owner: Owner,
                FactionRank: FactionRank,
                HeadTrackingWeight: HeadTrackingWeight,
                FavorCost: FavorCost,
                Reflections: Reflections,
                LinkedReferences: LinkedReferences,
                ActivateParents: ActivateParents,
                EnableParent: EnableParent,
                Emittance: Emittance,
                MultiBoundReference: MultiBoundReference,
                IgnoredBySandbox: IgnoredBySandbox,
                LocationRefTypes: LocationRefTypes,
                LocationReference: LocationReference,
                DistantLodData: DistantLodData,
                Scale: Scale,
                Placement: Placement)
            {
                this.Projectile = Projectile;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Projectile;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Projectile, rhs.Projectile)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Projectile);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Projectile)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Projectile)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedBeam.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Projectile = eval(this.Projectile);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedBeam.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedBeam.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedBeam.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Projectile ?? true)
                    {
                        sb.AppendItem(Projectile, "Projectile");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            APlacedTrap.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Projectile;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedBeam_FieldIndex enu = (PlacedBeam_FieldIndex)index;
                switch (enu)
                {
                    case PlacedBeam_FieldIndex.Projectile:
                        return Projectile;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedBeam_FieldIndex enu = (PlacedBeam_FieldIndex)index;
                switch (enu)
                {
                    case PlacedBeam_FieldIndex.Projectile:
                        this.Projectile = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedBeam_FieldIndex enu = (PlacedBeam_FieldIndex)index;
                switch (enu)
                {
                    case PlacedBeam_FieldIndex.Projectile:
                        this.Projectile = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Projectile != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Projectile, "Projectile");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Projectile = this.Projectile.Combine(rhs.Projectile);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            APlacedTrap.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Projectile;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Projectile = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Projectile, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PlacedBeam_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedBeamCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedBeamSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedBeam(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private PlacedBeam(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal PlacedBeam(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public PlacedBeam(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public PlacedBeam(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedBeam>.ToString(this);
        }

        protected override Type LinkType => typeof(IPlacedBeam);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedBeamGetter rhs) return false;
            return ((PlacedBeamCommon)((IPlacedBeamGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedBeamGetter? obj)
        {
            return ((PlacedBeamCommon)((IPlacedBeamGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedBeamCommon)((IPlacedBeamGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedBeamBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedBeamBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlacedBeam CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedBeam();
            ((PlacedBeamSetterCommon)((IPlacedBeamGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedBeam item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedBeamSetterCommon)((IPlacedBeamGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedBeam GetNew()
        {
            return new PlacedBeam();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedBeam :
        IAPlacedTrapInternal,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        ILoquiObjectSetter<IPlacedBeamInternal>,
        IPlacedBeamGetter,
        IScripted
    {
        new IFormLink<IProjectileGetter> Projectile { get; set; }
    }

    public partial interface IPlacedBeamInternal :
        IAPlacedTrapInternal,
        IPlacedBeam,
        IPlacedBeamGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.PBEA)]
    public partial interface IPlacedBeamGetter :
        IAPlacedTrapGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        ILoquiObject<IPlacedBeamGetter>,
        IMapsToGetter<IPlacedBeamGetter>,
        IScriptedGetter
    {
        static new ILoquiRegistration StaticRegistration => PlacedBeam_Registration.Instance;
        IFormLinkGetter<IProjectileGetter> Projectile { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedBeamMixIn
    {
        public static void Clear(this IPlacedBeamInternal item)
        {
            ((PlacedBeamSetterCommon)((IPlacedBeamGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedBeam.Mask<bool> GetEqualsMask(
            this IPlacedBeamGetter item,
            IPlacedBeamGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedBeamCommon)((IPlacedBeamGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedBeamGetter item,
            string? name = null,
            PlacedBeam.Mask<bool>? printMask = null)
        {
            return ((PlacedBeamCommon)((IPlacedBeamGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedBeamGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedBeam.Mask<bool>? printMask = null)
        {
            ((PlacedBeamCommon)((IPlacedBeamGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedBeamGetter item,
            IPlacedBeamGetter rhs,
            PlacedBeam.TranslationMask? equalsMask = null)
        {
            return ((PlacedBeamCommon)((IPlacedBeamGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedBeamInternal lhs,
            IPlacedBeamGetter rhs,
            out PlacedBeam.ErrorMask errorMask,
            PlacedBeam.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedBeamSetterTranslationCommon)((IPlacedBeamGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedBeam.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedBeamInternal lhs,
            IPlacedBeamGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedBeamSetterTranslationCommon)((IPlacedBeamGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedBeam DeepCopy(
            this IPlacedBeamGetter item,
            PlacedBeam.TranslationMask? copyMask = null)
        {
            return ((PlacedBeamSetterTranslationCommon)((IPlacedBeamGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedBeam DeepCopy(
            this IPlacedBeamGetter item,
            out PlacedBeam.ErrorMask errorMask,
            PlacedBeam.TranslationMask? copyMask = null)
        {
            return ((PlacedBeamSetterTranslationCommon)((IPlacedBeamGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedBeam DeepCopy(
            this IPlacedBeamGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedBeamSetterTranslationCommon)((IPlacedBeamGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedBeam Duplicate(
            this IPlacedBeamGetter item,
            FormKey formKey,
            PlacedBeam.TranslationMask? copyMask = null)
        {
            return ((PlacedBeamCommon)((IPlacedBeamGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static PlacedBeam Duplicate(
            this IPlacedBeamGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((PlacedBeamCommon)((IPlacedBeamGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedBeamInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedBeamSetterCommon)((IPlacedBeamGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum PlacedBeam_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        EncounterZone = 8,
        Owner = 9,
        FactionRank = 10,
        HeadTrackingWeight = 11,
        FavorCost = 12,
        Reflections = 13,
        LinkedReferences = 14,
        ActivateParents = 15,
        EnableParent = 16,
        Emittance = 17,
        MultiBoundReference = 18,
        IgnoredBySandbox = 19,
        LocationRefTypes = 20,
        LocationReference = 21,
        DistantLodData = 22,
        Scale = 23,
        Placement = 24,
        Projectile = 25,
    }
    #endregion

    #region Registration
    internal partial class PlacedBeam_Registration : ILoquiRegistration
    {
        public static readonly PlacedBeam_Registration Instance = new PlacedBeam_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 1;

        public const ushort FieldCount = 26;

        public static readonly Type MaskType = typeof(PlacedBeam.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedBeam.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedBeam);

        public static readonly Type GetterType = typeof(IPlacedBeamGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedBeam);

        public static readonly Type? InternalSetterType = typeof(IPlacedBeamInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.PlacedBeam";

        public const string Name = "PlacedBeam";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.PBEA;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(RecordTypes.PBEA);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedBeamBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedBeamSetterCommon : APlacedTrapSetterCommon
    {
        public new static readonly PlacedBeamSetterCommon Instance = new PlacedBeamSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedBeamInternal item)
        {
            ClearPartial();
            item.Projectile.Clear();
            base.Clear(item);
        }
        
        public override void Clear(IAPlacedTrapInternal item)
        {
            Clear(item: (IPlacedBeamInternal)item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IPlacedBeamInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedBeamInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedBeam obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Projectile.Relink(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedBeamInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IPlacedBeamInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedBeamBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedBeamBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            IAPlacedTrapInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedBeam)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedBeam)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedBeam)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlacedBeamCommon : APlacedTrapCommon
    {
        public new static readonly PlacedBeamCommon Instance = new PlacedBeamCommon();

        public PlacedBeam.Mask<bool> GetEqualsMask(
            IPlacedBeamGetter item,
            IPlacedBeamGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedBeam.Mask<bool>(false);
            ((PlacedBeamCommon)((IPlacedBeamGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedBeamGetter item,
            IPlacedBeamGetter rhs,
            PlacedBeam.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Projectile = item.Projectile.Equals(rhs.Projectile);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlacedBeamGetter item,
            string? name = null,
            PlacedBeam.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedBeamGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedBeam.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedBeam =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedBeam) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedBeamGetter item,
            StructuredStringBuilder sb,
            PlacedBeam.Mask<bool>? printMask = null)
        {
            APlacedTrapCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.Projectile ?? true)
            {
                sb.AppendItem(item.Projectile.FormKey, "Projectile");
            }
        }
        
        public static PlacedBeam_FieldIndex ConvertFieldIndex(APlacedTrap_FieldIndex index)
        {
            switch (index)
            {
                case APlacedTrap_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FormKey:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.VersionControl:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EditorID:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FormVersion:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Version2:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.SkyrimMajorRecordFlags:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.VirtualMachineAdapter:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EncounterZone:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Owner:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FactionRank:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.HeadTrackingWeight:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.FavorCost:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Reflections:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LinkedReferences:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.ActivateParents:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.EnableParent:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Emittance:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.MultiBoundReference:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.IgnoredBySandbox:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LocationRefTypes:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.LocationReference:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.DistantLodData:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Scale:
                    return (PlacedBeam_FieldIndex)((int)index);
                case APlacedTrap_FieldIndex.Placement:
                    return (PlacedBeam_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new PlacedBeam_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedBeam_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (PlacedBeam_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (PlacedBeam_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (PlacedBeam_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (PlacedBeam_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (PlacedBeam_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (PlacedBeam_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new PlacedBeam_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedBeam_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedBeam_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedBeam_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedBeam_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedBeamGetter? lhs,
            IPlacedBeamGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((IAPlacedTrapGetter)lhs, (IAPlacedTrapGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlacedBeam_FieldIndex.Projectile) ?? true))
            {
                if (!lhs.Projectile.Equals(rhs.Projectile)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            IAPlacedTrapGetter? lhs,
            IAPlacedTrapGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedBeamGetter?)lhs,
                rhs: rhs as IPlacedBeamGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedBeamGetter?)lhs,
                rhs: rhs as IPlacedBeamGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedBeamGetter?)lhs,
                rhs: rhs as IPlacedBeamGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlacedBeamGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.Projectile);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(IAPlacedTrapGetter item)
        {
            return GetHashCode(item: (IPlacedBeamGetter)item);
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedBeamGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedBeamGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedBeam.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedBeamGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.Projectile);
            yield break;
        }
        
        #region Duplicate
        public PlacedBeam Duplicate(
            IPlacedBeamGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedBeam(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override APlacedTrap Duplicate(
            IAPlacedTrapGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedBeamGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedBeamGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedBeamGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class PlacedBeamSetterTranslationCommon : APlacedTrapSetterTranslationCommon
    {
        public new static readonly PlacedBeamSetterTranslationCommon Instance = new PlacedBeamSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedBeamInternal item,
            IPlacedBeamGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedBeam item,
            IPlacedBeamGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (IAPlacedTrap)item,
                (IAPlacedTrapGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedBeam_FieldIndex.Projectile) ?? true))
            {
                item.Projectile.SetTo(rhs.Projectile.FormKey);
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedBeam item,
            IPlacedBeamGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            IAPlacedTrapInternal item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedBeamInternal)item,
                rhs: (IPlacedBeamGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IAPlacedTrap item,
            IAPlacedTrapGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedBeam)item,
                rhs: (IPlacedBeamGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedBeamInternal)item,
                rhs: (IPlacedBeamGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedBeam)item,
                rhs: (IPlacedBeamGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedBeamInternal)item,
                rhs: (IPlacedBeamGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedBeam)item,
                rhs: (IPlacedBeamGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedBeam DeepCopy(
            IPlacedBeamGetter item,
            PlacedBeam.TranslationMask? copyMask = null)
        {
            PlacedBeam ret = (PlacedBeam)((PlacedBeamCommon)((IPlacedBeamGetter)item).CommonInstance()!).GetNew();
            ((PlacedBeamSetterTranslationCommon)((IPlacedBeamGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedBeam DeepCopy(
            IPlacedBeamGetter item,
            out PlacedBeam.ErrorMask errorMask,
            PlacedBeam.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedBeam ret = (PlacedBeam)((PlacedBeamCommon)((IPlacedBeamGetter)item).CommonInstance()!).GetNew();
            ((PlacedBeamSetterTranslationCommon)((IPlacedBeamGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedBeam.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedBeam DeepCopy(
            IPlacedBeamGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedBeam ret = (PlacedBeam)((PlacedBeamCommon)((IPlacedBeamGetter)item).CommonInstance()!).GetNew();
            ((PlacedBeamSetterTranslationCommon)((IPlacedBeamGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class PlacedBeam
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedBeam_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedBeam_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedBeamCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedBeamSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedBeamSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class PlacedBeamBinaryWriteTranslation :
        APlacedTrapBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlacedBeamBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPlacedBeamGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedBeamGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.PBEA,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedBeamGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IAPlacedTrapGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedBeamGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedBeamGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedBeamGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedBeamBinaryCreateTranslation : APlacedTrapBinaryCreateTranslation
    {
        public new static readonly PlacedBeamBinaryCreateTranslation Instance = new PlacedBeamBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.PBEA;
        public static void FillBinaryStructs(
            IPlacedBeamInternal item,
            MutagenFrame frame)
        {
            APlacedTrapBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PlacedBeamBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class PlacedBeamBinaryOverlay :
        APlacedTrapBinaryOverlay,
        IPlacedBeamGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedBeam_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedBeam_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedBeamCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedBeamSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedBeamCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedBeamBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedBeamBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPlacedBeam);


        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedBeamBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedBeamGetter PlacedBeamFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlacedBeamBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlacedBeamGetter PlacedBeamFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedBeamFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedBeamMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedBeam>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedBeamGetter rhs) return false;
            return ((PlacedBeamCommon)((IPlacedBeamGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedBeamGetter? obj)
        {
            return ((PlacedBeamCommon)((IPlacedBeamGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedBeamCommon)((IPlacedBeamGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

