/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class PlacedObject :
        SkyrimMajorRecord,
        IEquatable<IPlacedObjectGetter>,
        ILoquiObjectSetter<PlacedObject>,
        IPlacedObjectInternal
    {
        #region Ctor
        protected PlacedObject()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region VirtualMachineAdapter
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private VirtualMachineAdapter? _VirtualMachineAdapter;
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        public VirtualMachineAdapter? VirtualMachineAdapter
        {
            get => _VirtualMachineAdapter;
            set => _VirtualMachineAdapter = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IPlacedObjectGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #region Aspects
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        IAVirtualMachineAdapter? IHaveVirtualMachineAdapter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IVirtualMachineAdapterGetter? IScriptedGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #endregion
        #region Base
        private readonly IFormLinkNullable<IPlaceableObjectGetter> _Base = new FormLinkNullable<IPlaceableObjectGetter>();
        public IFormLinkNullable<IPlaceableObjectGetter> Base
        {
            get => _Base;
            set => _Base.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlaceableObjectGetter> IPlacedObjectGetter.Base => this.Base;
        #endregion
        #region BoundHalfExtents
        public P3Float? BoundHalfExtents { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        P3Float? IPlacedObjectGetter.BoundHalfExtents => this.BoundHalfExtents;
        #endregion
        #region Primitive
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PlacedPrimitive? _Primitive;
        public PlacedPrimitive? Primitive
        {
            get => _Primitive;
            set => _Primitive = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlacedPrimitiveGetter? IPlacedObjectGetter.Primitive => this.Primitive;
        #endregion
        #region XORD
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XORD;
        public MemorySlice<Byte>? XORD
        {
            get => this._XORD;
            set => this._XORD = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XORD => this.XORD;
        #endregion
        #region OcclusionPlane
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Bounding? _OcclusionPlane;
        public Bounding? OcclusionPlane
        {
            get => _OcclusionPlane;
            set => _OcclusionPlane = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBoundingGetter? IPlacedObjectGetter.OcclusionPlane => this.OcclusionPlane;
        #endregion
        #region Portals
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Portal>? _Portals;
        public ExtendedList<Portal>? Portals
        {
            get => this._Portals;
            set => this._Portals = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IPortalGetter>? IPlacedObjectGetter.Portals => _Portals;
        #endregion

        #endregion
        #region RoomPortal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Bounding? _RoomPortal;
        public Bounding? RoomPortal
        {
            get => _RoomPortal;
            set => _RoomPortal = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IBoundingGetter? IPlacedObjectGetter.RoomPortal => this.RoomPortal;
        #endregion
        #region Unknown
        public Int16 Unknown { get; set; } = default(Int16);
        #endregion
        #region LightingTemplate
        private readonly IFormLinkNullable<ILightingTemplateGetter> _LightingTemplate = new FormLinkNullable<ILightingTemplateGetter>();
        public IFormLinkNullable<ILightingTemplateGetter> LightingTemplate
        {
            get => _LightingTemplate;
            set => _LightingTemplate.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILightingTemplateGetter> IPlacedObjectGetter.LightingTemplate => this.LightingTemplate;
        #endregion
        #region ImageSpace
        private readonly IFormLinkNullable<IImageSpaceGetter> _ImageSpace = new FormLinkNullable<IImageSpaceGetter>();
        public IFormLinkNullable<IImageSpaceGetter> ImageSpace
        {
            get => _ImageSpace;
            set => _ImageSpace.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IImageSpaceGetter> IPlacedObjectGetter.ImageSpace => this.ImageSpace;
        #endregion
        #region LinkedRooms
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlacedObjectGetter>> _LinkedRooms = new ExtendedList<IFormLinkGetter<IPlacedObjectGetter>>();
        public ExtendedList<IFormLinkGetter<IPlacedObjectGetter>> LinkedRooms
        {
            get => this._LinkedRooms;
            init => this._LinkedRooms = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlacedObjectGetter>> IPlacedObjectGetter.LinkedRooms => _LinkedRooms;
        #endregion

        #endregion
        #region IsMultiBoundPrimitive
        public Boolean IsMultiBoundPrimitive { get; set; } = default(Boolean);
        #endregion
        #region RagdollData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RagdollData;
        public MemorySlice<Byte>? RagdollData
        {
            get => this._RagdollData;
            set => this._RagdollData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.RagdollData => this.RagdollData;
        #endregion
        #region RagdollBipedData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _RagdollBipedData;
        public MemorySlice<Byte>? RagdollBipedData
        {
            get => this._RagdollBipedData;
            set => this._RagdollBipedData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.RagdollBipedData => this.RagdollBipedData;
        #endregion
        #region Radius
        public Single? Radius { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.Radius => this.Radius;
        #endregion
        #region Reflections
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<WaterReflection> _Reflections = new ExtendedList<WaterReflection>();
        public ExtendedList<WaterReflection> Reflections
        {
            get => this._Reflections;
            init => this._Reflections = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IWaterReflectionGetter> IPlacedObjectGetter.Reflections => _Reflections;
        #endregion

        #endregion
        #region LitWater
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<IPlacedObjectGetter>> _LitWater = new ExtendedList<IFormLinkGetter<IPlacedObjectGetter>>();
        public ExtendedList<IFormLinkGetter<IPlacedObjectGetter>> LitWater
        {
            get => this._LitWater;
            init => this._LitWater = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<IPlacedObjectGetter>> IPlacedObjectGetter.LitWater => _LitWater;
        #endregion

        #endregion
        #region Emittance
        private readonly IFormLinkNullable<IEmittanceGetter> _Emittance = new FormLinkNullable<IEmittanceGetter>();
        public IFormLinkNullable<IEmittanceGetter> Emittance
        {
            get => _Emittance;
            set => _Emittance.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEmittanceGetter> IPlacedObjectGetter.Emittance => this.Emittance;
        #endregion
        #region LightData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LightData? _LightData;
        public LightData? LightData
        {
            get => _LightData;
            set => _LightData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILightDataGetter? IPlacedObjectGetter.LightData => this.LightData;
        #endregion
        #region Alpha
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Alpha? _Alpha;
        public Alpha? Alpha
        {
            get => _Alpha;
            set => _Alpha = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAlphaGetter? IPlacedObjectGetter.Alpha => this.Alpha;
        #endregion
        #region TeleportDestination
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private TeleportDestination? _TeleportDestination;
        public TeleportDestination? TeleportDestination
        {
            get => _TeleportDestination;
            set => _TeleportDestination = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITeleportDestinationGetter? IPlacedObjectGetter.TeleportDestination => this.TeleportDestination;
        #endregion
        #region TeleportMessageBox
        private readonly IFormLinkNullable<IMessageGetter> _TeleportMessageBox = new FormLinkNullable<IMessageGetter>();
        public IFormLinkNullable<IMessageGetter> TeleportMessageBox
        {
            get => _TeleportMessageBox;
            set => _TeleportMessageBox.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IMessageGetter> IPlacedObjectGetter.TeleportMessageBox => this.TeleportMessageBox;
        #endregion
        #region MultiboundReference
        private readonly IFormLinkNullable<IPlacedObjectGetter> _MultiboundReference = new FormLinkNullable<IPlacedObjectGetter>();
        public IFormLinkNullable<IPlacedObjectGetter> MultiboundReference
        {
            get => _MultiboundReference;
            set => _MultiboundReference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IPlacedObjectGetter.MultiboundReference => this.MultiboundReference;
        #endregion
        #region XWCN
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XWCN;
        public MemorySlice<Byte>? XWCN
        {
            get => this._XWCN;
            set => this._XWCN = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XWCN => this.XWCN;
        #endregion
        #region XWCS
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XWCS;
        public MemorySlice<Byte>? XWCS
        {
            get => this._XWCS;
            set => this._XWCS = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XWCS => this.XWCS;
        #endregion
        #region WaterVelocity
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WaterVelocity? _WaterVelocity;
        public WaterVelocity? WaterVelocity
        {
            get => _WaterVelocity;
            set => _WaterVelocity = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IWaterVelocityGetter? IPlacedObjectGetter.WaterVelocity => this.WaterVelocity;
        #endregion
        #region XCVL
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XCVL;
        public MemorySlice<Byte>? XCVL
        {
            get => this._XCVL;
            set => this._XCVL = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XCVL => this.XCVL;
        #endregion
        #region XCZR
        private readonly IFormLinkNullable<ILinkedReferenceGetter> _XCZR = new FormLinkNullable<ILinkedReferenceGetter>();
        public IFormLinkNullable<ILinkedReferenceGetter> XCZR
        {
            get => _XCZR;
            set => _XCZR.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILinkedReferenceGetter> IPlacedObjectGetter.XCZR => this.XCZR;
        #endregion
        #region XCZA
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _XCZA;
        public MemorySlice<Byte>? XCZA
        {
            get => this._XCZA;
            set => this._XCZA = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.XCZA => this.XCZA;
        #endregion
        #region XCZC
        private readonly IFormLinkNullable<ICellGetter> _XCZC = new FormLinkNullable<ICellGetter>();
        public IFormLinkNullable<ICellGetter> XCZC
        {
            get => _XCZC;
            set => _XCZC.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ICellGetter> IPlacedObjectGetter.XCZC => this.XCZC;
        #endregion
        #region Scale
        public Single? Scale { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.Scale => this.Scale;
        #endregion
        #region SpawnContainer
        private readonly IFormLinkNullable<IPlacedObjectGetter> _SpawnContainer = new FormLinkNullable<IPlacedObjectGetter>();
        public IFormLinkNullable<IPlacedObjectGetter> SpawnContainer
        {
            get => _SpawnContainer;
            set => _SpawnContainer.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedObjectGetter> IPlacedObjectGetter.SpawnContainer => this.SpawnContainer;
        #endregion
        #region ActivateParents
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ActivateParents? _ActivateParents;
        public ActivateParents? ActivateParents
        {
            get => _ActivateParents;
            set => _ActivateParents = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IActivateParentsGetter? IPlacedObjectGetter.ActivateParents => this.ActivateParents;
        #endregion
        #region LeveledItemBaseObject
        private readonly IFormLinkNullable<ILeveledItemGetter> _LeveledItemBaseObject = new FormLinkNullable<ILeveledItemGetter>();
        public IFormLinkNullable<ILeveledItemGetter> LeveledItemBaseObject
        {
            get => _LeveledItemBaseObject;
            set => _LeveledItemBaseObject.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILeveledItemGetter> IPlacedObjectGetter.LeveledItemBaseObject => this.LeveledItemBaseObject;
        #endregion
        #region LevelModifier
        public Level? LevelModifier { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Level? IPlacedObjectGetter.LevelModifier => this.LevelModifier;
        #endregion
        #region PersistentLocation
        private readonly IFormLinkNullable<ILocationGetter> _PersistentLocation = new FormLinkNullable<ILocationGetter>();
        public IFormLinkNullable<ILocationGetter> PersistentLocation
        {
            get => _PersistentLocation;
            set => _PersistentLocation.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationGetter> IPlacedObjectGetter.PersistentLocation => this.PersistentLocation;
        #endregion
        #region CollisionLayer
        public UInt32? CollisionLayer { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt32? IPlacedObjectGetter.CollisionLayer => this.CollisionLayer;
        #endregion
        #region Lock
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private LockData? _Lock;
        public LockData? Lock
        {
            get => _Lock;
            set => _Lock = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILockDataGetter? IPlacedObjectGetter.Lock => this.Lock;
        #endregion
        #region EncounterZone
        private readonly IFormLinkNullable<IEncounterZoneGetter> _EncounterZone = new FormLinkNullable<IEncounterZoneGetter>();
        public IFormLinkNullable<IEncounterZoneGetter> EncounterZone
        {
            get => _EncounterZone;
            set => _EncounterZone.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IEncounterZoneGetter> IPlacedObjectGetter.EncounterZone => this.EncounterZone;
        #endregion
        #region NavigationDoorLink
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private NavigationDoorLink? _NavigationDoorLink;
        public NavigationDoorLink? NavigationDoorLink
        {
            get => _NavigationDoorLink;
            set => _NavigationDoorLink = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        INavigationDoorLinkGetter? IPlacedObjectGetter.NavigationDoorLink => this.NavigationDoorLink;
        #endregion
        #region LocationRefTypes
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? _LocationRefTypes;
        public ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes
        {
            get => this._LocationRefTypes;
            set => this._LocationRefTypes = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? IPlacedObjectGetter.LocationRefTypes => _LocationRefTypes;
        #endregion

        #endregion
        #region IsIgnoredBySandbox
        public Boolean IsIgnoredBySandbox { get; set; } = default(Boolean);
        #endregion
        #region Owner
        private readonly IFormLinkNullable<IOwnerGetter> _Owner = new FormLinkNullable<IOwnerGetter>();
        public IFormLinkNullable<IOwnerGetter> Owner
        {
            get => _Owner;
            set => _Owner.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IOwnerGetter> IPlacedObjectGetter.Owner => this.Owner;
        #endregion
        #region FactionRank
        public Int32? FactionRank { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.FactionRank => this.FactionRank;
        #endregion
        #region ItemCount
        public Int32? ItemCount { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Int32? IPlacedObjectGetter.ItemCount => this.ItemCount;
        #endregion
        #region Charge
        public Single? Charge { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.Charge => this.Charge;
        #endregion
        #region LocationReference
        private readonly IFormLinkNullable<ILocationRecordGetter> _LocationReference = new FormLinkNullable<ILocationRecordGetter>();
        public IFormLinkNullable<ILocationRecordGetter> LocationReference
        {
            get => _LocationReference;
            set => _LocationReference.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ILocationRecordGetter> IPlacedObjectGetter.LocationReference => this.LocationReference;
        #endregion
        #region EnableParent
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EnableParent? _EnableParent;
        public EnableParent? EnableParent
        {
            get => _EnableParent;
            set => _EnableParent = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IEnableParentGetter? IPlacedObjectGetter.EnableParent => this.EnableParent;
        #endregion
        #region LinkedReferences
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<LinkedReferences> _LinkedReferences = new ExtendedList<LinkedReferences>();
        public ExtendedList<LinkedReferences> LinkedReferences
        {
            get => this._LinkedReferences;
            init => this._LinkedReferences = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ILinkedReferencesGetter> IPlacedObjectGetter.LinkedReferences => _LinkedReferences;
        #endregion

        #endregion
        #region Patrol
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Patrol? _Patrol;
        public Patrol? Patrol
        {
            get => _Patrol;
            set => _Patrol = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPatrolGetter? IPlacedObjectGetter.Patrol => this.Patrol;
        #endregion
        #region Action
        public PlacedObject.ActionFlag? Action { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        PlacedObject.ActionFlag? IPlacedObjectGetter.Action => this.Action;
        #endregion
        #region HeadTrackingWeight
        public Single? HeadTrackingWeight { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.HeadTrackingWeight => this.HeadTrackingWeight;
        #endregion
        #region FavorCost
        public Single? FavorCost { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Single? IPlacedObjectGetter.FavorCost => this.FavorCost;
        #endregion
        #region IsOpenByDefault
        public Boolean IsOpenByDefault { get; set; } = default(Boolean);
        #endregion
        #region MapMarker
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MapMarker? _MapMarker;
        public MapMarker? MapMarker
        {
            get => _MapMarker;
            set => _MapMarker = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IMapMarkerGetter? IPlacedObjectGetter.MapMarker => this.MapMarker;
        #endregion
        #region AttachRef
        private readonly IFormLinkNullable<IPlacedThingGetter> _AttachRef = new FormLinkNullable<IPlacedThingGetter>();
        public IFormLinkNullable<IPlacedThingGetter> AttachRef
        {
            get => _AttachRef;
            set => _AttachRef.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IPlacedThingGetter> IPlacedObjectGetter.AttachRef => this.AttachRef;
        #endregion
        #region DistantLodData
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _DistantLodData;
        public MemorySlice<Byte>? DistantLodData
        {
            get => this._DistantLodData;
            set => this._DistantLodData = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IPlacedObjectGetter.DistantLodData => this.DistantLodData;
        #endregion
        #region Placement
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Placement? _Placement;
        public Placement? Placement
        {
            get => _Placement;
            set => _Placement = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IPlacementGetter? IPlacedObjectGetter.Placement => this.Placement;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(initialValue, new VirtualMachineAdapter.Mask<TItem>(initialValue));
                this.Base = initialValue;
                this.BoundHalfExtents = initialValue;
                this.Primitive = new MaskItem<TItem, PlacedPrimitive.Mask<TItem>?>(initialValue, new PlacedPrimitive.Mask<TItem>(initialValue));
                this.XORD = initialValue;
                this.OcclusionPlane = new MaskItem<TItem, Bounding.Mask<TItem>?>(initialValue, new Bounding.Mask<TItem>(initialValue));
                this.Portals = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Portal.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Portal.Mask<TItem>?>>());
                this.RoomPortal = new MaskItem<TItem, Bounding.Mask<TItem>?>(initialValue, new Bounding.Mask<TItem>(initialValue));
                this.Unknown = initialValue;
                this.LightingTemplate = initialValue;
                this.ImageSpace = initialValue;
                this.LinkedRooms = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.IsMultiBoundPrimitive = initialValue;
                this.RagdollData = initialValue;
                this.RagdollBipedData = initialValue;
                this.Radius = initialValue;
                this.Reflections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>());
                this.LitWater = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.Emittance = initialValue;
                this.LightData = new MaskItem<TItem, LightData.Mask<TItem>?>(initialValue, new LightData.Mask<TItem>(initialValue));
                this.Alpha = new MaskItem<TItem, Alpha.Mask<TItem>?>(initialValue, new Alpha.Mask<TItem>(initialValue));
                this.TeleportDestination = new MaskItem<TItem, TeleportDestination.Mask<TItem>?>(initialValue, new TeleportDestination.Mask<TItem>(initialValue));
                this.TeleportMessageBox = initialValue;
                this.MultiboundReference = initialValue;
                this.XWCN = initialValue;
                this.XWCS = initialValue;
                this.WaterVelocity = new MaskItem<TItem, WaterVelocity.Mask<TItem>?>(initialValue, new WaterVelocity.Mask<TItem>(initialValue));
                this.XCVL = initialValue;
                this.XCZR = initialValue;
                this.XCZA = initialValue;
                this.XCZC = initialValue;
                this.Scale = initialValue;
                this.SpawnContainer = initialValue;
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(initialValue, new ActivateParents.Mask<TItem>(initialValue));
                this.LeveledItemBaseObject = initialValue;
                this.LevelModifier = initialValue;
                this.PersistentLocation = initialValue;
                this.CollisionLayer = initialValue;
                this.Lock = new MaskItem<TItem, LockData.Mask<TItem>?>(initialValue, new LockData.Mask<TItem>(initialValue));
                this.EncounterZone = initialValue;
                this.NavigationDoorLink = new MaskItem<TItem, NavigationDoorLink.Mask<TItem>?>(initialValue, new NavigationDoorLink.Mask<TItem>(initialValue));
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.IsIgnoredBySandbox = initialValue;
                this.Owner = initialValue;
                this.FactionRank = initialValue;
                this.ItemCount = initialValue;
                this.Charge = initialValue;
                this.LocationReference = initialValue;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(initialValue, new EnableParent.Mask<TItem>(initialValue));
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.Patrol = new MaskItem<TItem, Patrol.Mask<TItem>?>(initialValue, new Patrol.Mask<TItem>(initialValue));
                this.Action = initialValue;
                this.HeadTrackingWeight = initialValue;
                this.FavorCost = initialValue;
                this.IsOpenByDefault = initialValue;
                this.MapMarker = new MaskItem<TItem, MapMarker.Mask<TItem>?>(initialValue, new MapMarker.Mask<TItem>(initialValue));
                this.AttachRef = initialValue;
                this.DistantLodData = initialValue;
                this.Placement = new MaskItem<TItem, Placement.Mask<TItem>?>(initialValue, new Placement.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem VirtualMachineAdapter,
                TItem Base,
                TItem BoundHalfExtents,
                TItem Primitive,
                TItem XORD,
                TItem OcclusionPlane,
                TItem Portals,
                TItem RoomPortal,
                TItem Unknown,
                TItem LightingTemplate,
                TItem ImageSpace,
                TItem LinkedRooms,
                TItem IsMultiBoundPrimitive,
                TItem RagdollData,
                TItem RagdollBipedData,
                TItem Radius,
                TItem Reflections,
                TItem LitWater,
                TItem Emittance,
                TItem LightData,
                TItem Alpha,
                TItem TeleportDestination,
                TItem TeleportMessageBox,
                TItem MultiboundReference,
                TItem XWCN,
                TItem XWCS,
                TItem WaterVelocity,
                TItem XCVL,
                TItem XCZR,
                TItem XCZA,
                TItem XCZC,
                TItem Scale,
                TItem SpawnContainer,
                TItem ActivateParents,
                TItem LeveledItemBaseObject,
                TItem LevelModifier,
                TItem PersistentLocation,
                TItem CollisionLayer,
                TItem Lock,
                TItem EncounterZone,
                TItem NavigationDoorLink,
                TItem LocationRefTypes,
                TItem IsIgnoredBySandbox,
                TItem Owner,
                TItem FactionRank,
                TItem ItemCount,
                TItem Charge,
                TItem LocationReference,
                TItem EnableParent,
                TItem LinkedReferences,
                TItem Patrol,
                TItem Action,
                TItem HeadTrackingWeight,
                TItem FavorCost,
                TItem IsOpenByDefault,
                TItem MapMarker,
                TItem AttachRef,
                TItem DistantLodData,
                TItem Placement)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.VirtualMachineAdapter = new MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>(VirtualMachineAdapter, new VirtualMachineAdapter.Mask<TItem>(VirtualMachineAdapter));
                this.Base = Base;
                this.BoundHalfExtents = BoundHalfExtents;
                this.Primitive = new MaskItem<TItem, PlacedPrimitive.Mask<TItem>?>(Primitive, new PlacedPrimitive.Mask<TItem>(Primitive));
                this.XORD = XORD;
                this.OcclusionPlane = new MaskItem<TItem, Bounding.Mask<TItem>?>(OcclusionPlane, new Bounding.Mask<TItem>(OcclusionPlane));
                this.Portals = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Portal.Mask<TItem>?>>?>(Portals, Enumerable.Empty<MaskItemIndexed<TItem, Portal.Mask<TItem>?>>());
                this.RoomPortal = new MaskItem<TItem, Bounding.Mask<TItem>?>(RoomPortal, new Bounding.Mask<TItem>(RoomPortal));
                this.Unknown = Unknown;
                this.LightingTemplate = LightingTemplate;
                this.ImageSpace = ImageSpace;
                this.LinkedRooms = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LinkedRooms, Enumerable.Empty<(int Index, TItem Value)>());
                this.IsMultiBoundPrimitive = IsMultiBoundPrimitive;
                this.RagdollData = RagdollData;
                this.RagdollBipedData = RagdollBipedData;
                this.Radius = Radius;
                this.Reflections = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>(Reflections, Enumerable.Empty<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>());
                this.LitWater = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LitWater, Enumerable.Empty<(int Index, TItem Value)>());
                this.Emittance = Emittance;
                this.LightData = new MaskItem<TItem, LightData.Mask<TItem>?>(LightData, new LightData.Mask<TItem>(LightData));
                this.Alpha = new MaskItem<TItem, Alpha.Mask<TItem>?>(Alpha, new Alpha.Mask<TItem>(Alpha));
                this.TeleportDestination = new MaskItem<TItem, TeleportDestination.Mask<TItem>?>(TeleportDestination, new TeleportDestination.Mask<TItem>(TeleportDestination));
                this.TeleportMessageBox = TeleportMessageBox;
                this.MultiboundReference = MultiboundReference;
                this.XWCN = XWCN;
                this.XWCS = XWCS;
                this.WaterVelocity = new MaskItem<TItem, WaterVelocity.Mask<TItem>?>(WaterVelocity, new WaterVelocity.Mask<TItem>(WaterVelocity));
                this.XCVL = XCVL;
                this.XCZR = XCZR;
                this.XCZA = XCZA;
                this.XCZC = XCZC;
                this.Scale = Scale;
                this.SpawnContainer = SpawnContainer;
                this.ActivateParents = new MaskItem<TItem, ActivateParents.Mask<TItem>?>(ActivateParents, new ActivateParents.Mask<TItem>(ActivateParents));
                this.LeveledItemBaseObject = LeveledItemBaseObject;
                this.LevelModifier = LevelModifier;
                this.PersistentLocation = PersistentLocation;
                this.CollisionLayer = CollisionLayer;
                this.Lock = new MaskItem<TItem, LockData.Mask<TItem>?>(Lock, new LockData.Mask<TItem>(Lock));
                this.EncounterZone = EncounterZone;
                this.NavigationDoorLink = new MaskItem<TItem, NavigationDoorLink.Mask<TItem>?>(NavigationDoorLink, new NavigationDoorLink.Mask<TItem>(NavigationDoorLink));
                this.LocationRefTypes = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(LocationRefTypes, Enumerable.Empty<(int Index, TItem Value)>());
                this.IsIgnoredBySandbox = IsIgnoredBySandbox;
                this.Owner = Owner;
                this.FactionRank = FactionRank;
                this.ItemCount = ItemCount;
                this.Charge = Charge;
                this.LocationReference = LocationReference;
                this.EnableParent = new MaskItem<TItem, EnableParent.Mask<TItem>?>(EnableParent, new EnableParent.Mask<TItem>(EnableParent));
                this.LinkedReferences = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>(LinkedReferences, Enumerable.Empty<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>());
                this.Patrol = new MaskItem<TItem, Patrol.Mask<TItem>?>(Patrol, new Patrol.Mask<TItem>(Patrol));
                this.Action = Action;
                this.HeadTrackingWeight = HeadTrackingWeight;
                this.FavorCost = FavorCost;
                this.IsOpenByDefault = IsOpenByDefault;
                this.MapMarker = new MaskItem<TItem, MapMarker.Mask<TItem>?>(MapMarker, new MapMarker.Mask<TItem>(MapMarker));
                this.AttachRef = AttachRef;
                this.DistantLodData = DistantLodData;
                this.Placement = new MaskItem<TItem, Placement.Mask<TItem>?>(Placement, new Placement.Mask<TItem>(Placement));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, VirtualMachineAdapter.Mask<TItem>?>? VirtualMachineAdapter { get; set; }
            public TItem Base;
            public TItem BoundHalfExtents;
            public MaskItem<TItem, PlacedPrimitive.Mask<TItem>?>? Primitive { get; set; }
            public TItem XORD;
            public MaskItem<TItem, Bounding.Mask<TItem>?>? OcclusionPlane { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Portal.Mask<TItem>?>>?>? Portals;
            public MaskItem<TItem, Bounding.Mask<TItem>?>? RoomPortal { get; set; }
            public TItem Unknown;
            public TItem LightingTemplate;
            public TItem ImageSpace;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LinkedRooms;
            public TItem IsMultiBoundPrimitive;
            public TItem RagdollData;
            public TItem RagdollBipedData;
            public TItem Radius;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, WaterReflection.Mask<TItem>?>>?>? Reflections;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LitWater;
            public TItem Emittance;
            public MaskItem<TItem, LightData.Mask<TItem>?>? LightData { get; set; }
            public MaskItem<TItem, Alpha.Mask<TItem>?>? Alpha { get; set; }
            public MaskItem<TItem, TeleportDestination.Mask<TItem>?>? TeleportDestination { get; set; }
            public TItem TeleportMessageBox;
            public TItem MultiboundReference;
            public TItem XWCN;
            public TItem XWCS;
            public MaskItem<TItem, WaterVelocity.Mask<TItem>?>? WaterVelocity { get; set; }
            public TItem XCVL;
            public TItem XCZR;
            public TItem XCZA;
            public TItem XCZC;
            public TItem Scale;
            public TItem SpawnContainer;
            public MaskItem<TItem, ActivateParents.Mask<TItem>?>? ActivateParents { get; set; }
            public TItem LeveledItemBaseObject;
            public TItem LevelModifier;
            public TItem PersistentLocation;
            public TItem CollisionLayer;
            public MaskItem<TItem, LockData.Mask<TItem>?>? Lock { get; set; }
            public TItem EncounterZone;
            public MaskItem<TItem, NavigationDoorLink.Mask<TItem>?>? NavigationDoorLink { get; set; }
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? LocationRefTypes;
            public TItem IsIgnoredBySandbox;
            public TItem Owner;
            public TItem FactionRank;
            public TItem ItemCount;
            public TItem Charge;
            public TItem LocationReference;
            public MaskItem<TItem, EnableParent.Mask<TItem>?>? EnableParent { get; set; }
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, LinkedReferences.Mask<TItem>?>>?>? LinkedReferences;
            public MaskItem<TItem, Patrol.Mask<TItem>?>? Patrol { get; set; }
            public TItem Action;
            public TItem HeadTrackingWeight;
            public TItem FavorCost;
            public TItem IsOpenByDefault;
            public MaskItem<TItem, MapMarker.Mask<TItem>?>? MapMarker { get; set; }
            public TItem AttachRef;
            public TItem DistantLodData;
            public MaskItem<TItem, Placement.Mask<TItem>?>? Placement { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.VirtualMachineAdapter, rhs.VirtualMachineAdapter)) return false;
                if (!object.Equals(this.Base, rhs.Base)) return false;
                if (!object.Equals(this.BoundHalfExtents, rhs.BoundHalfExtents)) return false;
                if (!object.Equals(this.Primitive, rhs.Primitive)) return false;
                if (!object.Equals(this.XORD, rhs.XORD)) return false;
                if (!object.Equals(this.OcclusionPlane, rhs.OcclusionPlane)) return false;
                if (!object.Equals(this.Portals, rhs.Portals)) return false;
                if (!object.Equals(this.RoomPortal, rhs.RoomPortal)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.LightingTemplate, rhs.LightingTemplate)) return false;
                if (!object.Equals(this.ImageSpace, rhs.ImageSpace)) return false;
                if (!object.Equals(this.LinkedRooms, rhs.LinkedRooms)) return false;
                if (!object.Equals(this.IsMultiBoundPrimitive, rhs.IsMultiBoundPrimitive)) return false;
                if (!object.Equals(this.RagdollData, rhs.RagdollData)) return false;
                if (!object.Equals(this.RagdollBipedData, rhs.RagdollBipedData)) return false;
                if (!object.Equals(this.Radius, rhs.Radius)) return false;
                if (!object.Equals(this.Reflections, rhs.Reflections)) return false;
                if (!object.Equals(this.LitWater, rhs.LitWater)) return false;
                if (!object.Equals(this.Emittance, rhs.Emittance)) return false;
                if (!object.Equals(this.LightData, rhs.LightData)) return false;
                if (!object.Equals(this.Alpha, rhs.Alpha)) return false;
                if (!object.Equals(this.TeleportDestination, rhs.TeleportDestination)) return false;
                if (!object.Equals(this.TeleportMessageBox, rhs.TeleportMessageBox)) return false;
                if (!object.Equals(this.MultiboundReference, rhs.MultiboundReference)) return false;
                if (!object.Equals(this.XWCN, rhs.XWCN)) return false;
                if (!object.Equals(this.XWCS, rhs.XWCS)) return false;
                if (!object.Equals(this.WaterVelocity, rhs.WaterVelocity)) return false;
                if (!object.Equals(this.XCVL, rhs.XCVL)) return false;
                if (!object.Equals(this.XCZR, rhs.XCZR)) return false;
                if (!object.Equals(this.XCZA, rhs.XCZA)) return false;
                if (!object.Equals(this.XCZC, rhs.XCZC)) return false;
                if (!object.Equals(this.Scale, rhs.Scale)) return false;
                if (!object.Equals(this.SpawnContainer, rhs.SpawnContainer)) return false;
                if (!object.Equals(this.ActivateParents, rhs.ActivateParents)) return false;
                if (!object.Equals(this.LeveledItemBaseObject, rhs.LeveledItemBaseObject)) return false;
                if (!object.Equals(this.LevelModifier, rhs.LevelModifier)) return false;
                if (!object.Equals(this.PersistentLocation, rhs.PersistentLocation)) return false;
                if (!object.Equals(this.CollisionLayer, rhs.CollisionLayer)) return false;
                if (!object.Equals(this.Lock, rhs.Lock)) return false;
                if (!object.Equals(this.EncounterZone, rhs.EncounterZone)) return false;
                if (!object.Equals(this.NavigationDoorLink, rhs.NavigationDoorLink)) return false;
                if (!object.Equals(this.LocationRefTypes, rhs.LocationRefTypes)) return false;
                if (!object.Equals(this.IsIgnoredBySandbox, rhs.IsIgnoredBySandbox)) return false;
                if (!object.Equals(this.Owner, rhs.Owner)) return false;
                if (!object.Equals(this.FactionRank, rhs.FactionRank)) return false;
                if (!object.Equals(this.ItemCount, rhs.ItemCount)) return false;
                if (!object.Equals(this.Charge, rhs.Charge)) return false;
                if (!object.Equals(this.LocationReference, rhs.LocationReference)) return false;
                if (!object.Equals(this.EnableParent, rhs.EnableParent)) return false;
                if (!object.Equals(this.LinkedReferences, rhs.LinkedReferences)) return false;
                if (!object.Equals(this.Patrol, rhs.Patrol)) return false;
                if (!object.Equals(this.Action, rhs.Action)) return false;
                if (!object.Equals(this.HeadTrackingWeight, rhs.HeadTrackingWeight)) return false;
                if (!object.Equals(this.FavorCost, rhs.FavorCost)) return false;
                if (!object.Equals(this.IsOpenByDefault, rhs.IsOpenByDefault)) return false;
                if (!object.Equals(this.MapMarker, rhs.MapMarker)) return false;
                if (!object.Equals(this.AttachRef, rhs.AttachRef)) return false;
                if (!object.Equals(this.DistantLodData, rhs.DistantLodData)) return false;
                if (!object.Equals(this.Placement, rhs.Placement)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.VirtualMachineAdapter);
                hash.Add(this.Base);
                hash.Add(this.BoundHalfExtents);
                hash.Add(this.Primitive);
                hash.Add(this.XORD);
                hash.Add(this.OcclusionPlane);
                hash.Add(this.Portals);
                hash.Add(this.RoomPortal);
                hash.Add(this.Unknown);
                hash.Add(this.LightingTemplate);
                hash.Add(this.ImageSpace);
                hash.Add(this.LinkedRooms);
                hash.Add(this.IsMultiBoundPrimitive);
                hash.Add(this.RagdollData);
                hash.Add(this.RagdollBipedData);
                hash.Add(this.Radius);
                hash.Add(this.Reflections);
                hash.Add(this.LitWater);
                hash.Add(this.Emittance);
                hash.Add(this.LightData);
                hash.Add(this.Alpha);
                hash.Add(this.TeleportDestination);
                hash.Add(this.TeleportMessageBox);
                hash.Add(this.MultiboundReference);
                hash.Add(this.XWCN);
                hash.Add(this.XWCS);
                hash.Add(this.WaterVelocity);
                hash.Add(this.XCVL);
                hash.Add(this.XCZR);
                hash.Add(this.XCZA);
                hash.Add(this.XCZC);
                hash.Add(this.Scale);
                hash.Add(this.SpawnContainer);
                hash.Add(this.ActivateParents);
                hash.Add(this.LeveledItemBaseObject);
                hash.Add(this.LevelModifier);
                hash.Add(this.PersistentLocation);
                hash.Add(this.CollisionLayer);
                hash.Add(this.Lock);
                hash.Add(this.EncounterZone);
                hash.Add(this.NavigationDoorLink);
                hash.Add(this.LocationRefTypes);
                hash.Add(this.IsIgnoredBySandbox);
                hash.Add(this.Owner);
                hash.Add(this.FactionRank);
                hash.Add(this.ItemCount);
                hash.Add(this.Charge);
                hash.Add(this.LocationReference);
                hash.Add(this.EnableParent);
                hash.Add(this.LinkedReferences);
                hash.Add(this.Patrol);
                hash.Add(this.Action);
                hash.Add(this.HeadTrackingWeight);
                hash.Add(this.FavorCost);
                hash.Add(this.IsOpenByDefault);
                hash.Add(this.MapMarker);
                hash.Add(this.AttachRef);
                hash.Add(this.DistantLodData);
                hash.Add(this.Placement);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (VirtualMachineAdapter != null)
                {
                    if (!eval(this.VirtualMachineAdapter.Overall)) return false;
                    if (this.VirtualMachineAdapter.Specific != null && !this.VirtualMachineAdapter.Specific.All(eval)) return false;
                }
                if (!eval(this.Base)) return false;
                if (!eval(this.BoundHalfExtents)) return false;
                if (Primitive != null)
                {
                    if (!eval(this.Primitive.Overall)) return false;
                    if (this.Primitive.Specific != null && !this.Primitive.Specific.All(eval)) return false;
                }
                if (!eval(this.XORD)) return false;
                if (OcclusionPlane != null)
                {
                    if (!eval(this.OcclusionPlane.Overall)) return false;
                    if (this.OcclusionPlane.Specific != null && !this.OcclusionPlane.Specific.All(eval)) return false;
                }
                if (this.Portals != null)
                {
                    if (!eval(this.Portals.Overall)) return false;
                    if (this.Portals.Specific != null)
                    {
                        foreach (var item in this.Portals.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (RoomPortal != null)
                {
                    if (!eval(this.RoomPortal.Overall)) return false;
                    if (this.RoomPortal.Specific != null && !this.RoomPortal.Specific.All(eval)) return false;
                }
                if (!eval(this.Unknown)) return false;
                if (!eval(this.LightingTemplate)) return false;
                if (!eval(this.ImageSpace)) return false;
                if (this.LinkedRooms != null)
                {
                    if (!eval(this.LinkedRooms.Overall)) return false;
                    if (this.LinkedRooms.Specific != null)
                    {
                        foreach (var item in this.LinkedRooms.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.IsMultiBoundPrimitive)) return false;
                if (!eval(this.RagdollData)) return false;
                if (!eval(this.RagdollBipedData)) return false;
                if (!eval(this.Radius)) return false;
                if (this.Reflections != null)
                {
                    if (!eval(this.Reflections.Overall)) return false;
                    if (this.Reflections.Specific != null)
                    {
                        foreach (var item in this.Reflections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LitWater != null)
                {
                    if (!eval(this.LitWater.Overall)) return false;
                    if (this.LitWater.Specific != null)
                    {
                        foreach (var item in this.LitWater.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.Emittance)) return false;
                if (LightData != null)
                {
                    if (!eval(this.LightData.Overall)) return false;
                    if (this.LightData.Specific != null && !this.LightData.Specific.All(eval)) return false;
                }
                if (Alpha != null)
                {
                    if (!eval(this.Alpha.Overall)) return false;
                    if (this.Alpha.Specific != null && !this.Alpha.Specific.All(eval)) return false;
                }
                if (TeleportDestination != null)
                {
                    if (!eval(this.TeleportDestination.Overall)) return false;
                    if (this.TeleportDestination.Specific != null && !this.TeleportDestination.Specific.All(eval)) return false;
                }
                if (!eval(this.TeleportMessageBox)) return false;
                if (!eval(this.MultiboundReference)) return false;
                if (!eval(this.XWCN)) return false;
                if (!eval(this.XWCS)) return false;
                if (WaterVelocity != null)
                {
                    if (!eval(this.WaterVelocity.Overall)) return false;
                    if (this.WaterVelocity.Specific != null && !this.WaterVelocity.Specific.All(eval)) return false;
                }
                if (!eval(this.XCVL)) return false;
                if (!eval(this.XCZR)) return false;
                if (!eval(this.XCZA)) return false;
                if (!eval(this.XCZC)) return false;
                if (!eval(this.Scale)) return false;
                if (!eval(this.SpawnContainer)) return false;
                if (ActivateParents != null)
                {
                    if (!eval(this.ActivateParents.Overall)) return false;
                    if (this.ActivateParents.Specific != null && !this.ActivateParents.Specific.All(eval)) return false;
                }
                if (!eval(this.LeveledItemBaseObject)) return false;
                if (!eval(this.LevelModifier)) return false;
                if (!eval(this.PersistentLocation)) return false;
                if (!eval(this.CollisionLayer)) return false;
                if (Lock != null)
                {
                    if (!eval(this.Lock.Overall)) return false;
                    if (this.Lock.Specific != null && !this.Lock.Specific.All(eval)) return false;
                }
                if (!eval(this.EncounterZone)) return false;
                if (NavigationDoorLink != null)
                {
                    if (!eval(this.NavigationDoorLink.Overall)) return false;
                    if (this.NavigationDoorLink.Specific != null && !this.NavigationDoorLink.Specific.All(eval)) return false;
                }
                if (this.LocationRefTypes != null)
                {
                    if (!eval(this.LocationRefTypes.Overall)) return false;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.IsIgnoredBySandbox)) return false;
                if (!eval(this.Owner)) return false;
                if (!eval(this.FactionRank)) return false;
                if (!eval(this.ItemCount)) return false;
                if (!eval(this.Charge)) return false;
                if (!eval(this.LocationReference)) return false;
                if (EnableParent != null)
                {
                    if (!eval(this.EnableParent.Overall)) return false;
                    if (this.EnableParent.Specific != null && !this.EnableParent.Specific.All(eval)) return false;
                }
                if (this.LinkedReferences != null)
                {
                    if (!eval(this.LinkedReferences.Overall)) return false;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Patrol != null)
                {
                    if (!eval(this.Patrol.Overall)) return false;
                    if (this.Patrol.Specific != null && !this.Patrol.Specific.All(eval)) return false;
                }
                if (!eval(this.Action)) return false;
                if (!eval(this.HeadTrackingWeight)) return false;
                if (!eval(this.FavorCost)) return false;
                if (!eval(this.IsOpenByDefault)) return false;
                if (MapMarker != null)
                {
                    if (!eval(this.MapMarker.Overall)) return false;
                    if (this.MapMarker.Specific != null && !this.MapMarker.Specific.All(eval)) return false;
                }
                if (!eval(this.AttachRef)) return false;
                if (!eval(this.DistantLodData)) return false;
                if (Placement != null)
                {
                    if (!eval(this.Placement.Overall)) return false;
                    if (this.Placement.Specific != null && !this.Placement.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (VirtualMachineAdapter != null)
                {
                    if (eval(this.VirtualMachineAdapter.Overall)) return true;
                    if (this.VirtualMachineAdapter.Specific != null && this.VirtualMachineAdapter.Specific.Any(eval)) return true;
                }
                if (eval(this.Base)) return true;
                if (eval(this.BoundHalfExtents)) return true;
                if (Primitive != null)
                {
                    if (eval(this.Primitive.Overall)) return true;
                    if (this.Primitive.Specific != null && this.Primitive.Specific.Any(eval)) return true;
                }
                if (eval(this.XORD)) return true;
                if (OcclusionPlane != null)
                {
                    if (eval(this.OcclusionPlane.Overall)) return true;
                    if (this.OcclusionPlane.Specific != null && this.OcclusionPlane.Specific.Any(eval)) return true;
                }
                if (this.Portals != null)
                {
                    if (eval(this.Portals.Overall)) return true;
                    if (this.Portals.Specific != null)
                    {
                        foreach (var item in this.Portals.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (RoomPortal != null)
                {
                    if (eval(this.RoomPortal.Overall)) return true;
                    if (this.RoomPortal.Specific != null && this.RoomPortal.Specific.Any(eval)) return true;
                }
                if (eval(this.Unknown)) return true;
                if (eval(this.LightingTemplate)) return true;
                if (eval(this.ImageSpace)) return true;
                if (this.LinkedRooms != null)
                {
                    if (eval(this.LinkedRooms.Overall)) return true;
                    if (this.LinkedRooms.Specific != null)
                    {
                        foreach (var item in this.LinkedRooms.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.IsMultiBoundPrimitive)) return true;
                if (eval(this.RagdollData)) return true;
                if (eval(this.RagdollBipedData)) return true;
                if (eval(this.Radius)) return true;
                if (this.Reflections != null)
                {
                    if (eval(this.Reflections.Overall)) return true;
                    if (this.Reflections.Specific != null)
                    {
                        foreach (var item in this.Reflections.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (this.LitWater != null)
                {
                    if (eval(this.LitWater.Overall)) return true;
                    if (this.LitWater.Specific != null)
                    {
                        foreach (var item in this.LitWater.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.Emittance)) return true;
                if (LightData != null)
                {
                    if (eval(this.LightData.Overall)) return true;
                    if (this.LightData.Specific != null && this.LightData.Specific.Any(eval)) return true;
                }
                if (Alpha != null)
                {
                    if (eval(this.Alpha.Overall)) return true;
                    if (this.Alpha.Specific != null && this.Alpha.Specific.Any(eval)) return true;
                }
                if (TeleportDestination != null)
                {
                    if (eval(this.TeleportDestination.Overall)) return true;
                    if (this.TeleportDestination.Specific != null && this.TeleportDestination.Specific.Any(eval)) return true;
                }
                if (eval(this.TeleportMessageBox)) return true;
                if (eval(this.MultiboundReference)) return true;
                if (eval(this.XWCN)) return true;
                if (eval(this.XWCS)) return true;
                if (WaterVelocity != null)
                {
                    if (eval(this.WaterVelocity.Overall)) return true;
                    if (this.WaterVelocity.Specific != null && this.WaterVelocity.Specific.Any(eval)) return true;
                }
                if (eval(this.XCVL)) return true;
                if (eval(this.XCZR)) return true;
                if (eval(this.XCZA)) return true;
                if (eval(this.XCZC)) return true;
                if (eval(this.Scale)) return true;
                if (eval(this.SpawnContainer)) return true;
                if (ActivateParents != null)
                {
                    if (eval(this.ActivateParents.Overall)) return true;
                    if (this.ActivateParents.Specific != null && this.ActivateParents.Specific.Any(eval)) return true;
                }
                if (eval(this.LeveledItemBaseObject)) return true;
                if (eval(this.LevelModifier)) return true;
                if (eval(this.PersistentLocation)) return true;
                if (eval(this.CollisionLayer)) return true;
                if (Lock != null)
                {
                    if (eval(this.Lock.Overall)) return true;
                    if (this.Lock.Specific != null && this.Lock.Specific.Any(eval)) return true;
                }
                if (eval(this.EncounterZone)) return true;
                if (NavigationDoorLink != null)
                {
                    if (eval(this.NavigationDoorLink.Overall)) return true;
                    if (this.NavigationDoorLink.Specific != null && this.NavigationDoorLink.Specific.Any(eval)) return true;
                }
                if (this.LocationRefTypes != null)
                {
                    if (eval(this.LocationRefTypes.Overall)) return true;
                    if (this.LocationRefTypes.Specific != null)
                    {
                        foreach (var item in this.LocationRefTypes.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.IsIgnoredBySandbox)) return true;
                if (eval(this.Owner)) return true;
                if (eval(this.FactionRank)) return true;
                if (eval(this.ItemCount)) return true;
                if (eval(this.Charge)) return true;
                if (eval(this.LocationReference)) return true;
                if (EnableParent != null)
                {
                    if (eval(this.EnableParent.Overall)) return true;
                    if (this.EnableParent.Specific != null && this.EnableParent.Specific.Any(eval)) return true;
                }
                if (this.LinkedReferences != null)
                {
                    if (eval(this.LinkedReferences.Overall)) return true;
                    if (this.LinkedReferences.Specific != null)
                    {
                        foreach (var item in this.LinkedReferences.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (Patrol != null)
                {
                    if (eval(this.Patrol.Overall)) return true;
                    if (this.Patrol.Specific != null && this.Patrol.Specific.Any(eval)) return true;
                }
                if (eval(this.Action)) return true;
                if (eval(this.HeadTrackingWeight)) return true;
                if (eval(this.FavorCost)) return true;
                if (eval(this.IsOpenByDefault)) return true;
                if (MapMarker != null)
                {
                    if (eval(this.MapMarker.Overall)) return true;
                    if (this.MapMarker.Specific != null && this.MapMarker.Specific.Any(eval)) return true;
                }
                if (eval(this.AttachRef)) return true;
                if (eval(this.DistantLodData)) return true;
                if (Placement != null)
                {
                    if (eval(this.Placement.Overall)) return true;
                    if (this.Placement.Specific != null && this.Placement.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new PlacedObject.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.VirtualMachineAdapter = this.VirtualMachineAdapter == null ? null : new MaskItem<R, VirtualMachineAdapter.Mask<R>?>(eval(this.VirtualMachineAdapter.Overall), this.VirtualMachineAdapter.Specific?.Translate(eval));
                obj.Base = eval(this.Base);
                obj.BoundHalfExtents = eval(this.BoundHalfExtents);
                obj.Primitive = this.Primitive == null ? null : new MaskItem<R, PlacedPrimitive.Mask<R>?>(eval(this.Primitive.Overall), this.Primitive.Specific?.Translate(eval));
                obj.XORD = eval(this.XORD);
                obj.OcclusionPlane = this.OcclusionPlane == null ? null : new MaskItem<R, Bounding.Mask<R>?>(eval(this.OcclusionPlane.Overall), this.OcclusionPlane.Specific?.Translate(eval));
                if (Portals != null)
                {
                    obj.Portals = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Portal.Mask<R>?>>?>(eval(this.Portals.Overall), Enumerable.Empty<MaskItemIndexed<R, Portal.Mask<R>?>>());
                    if (Portals.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Portal.Mask<R>?>>();
                        obj.Portals.Specific = l;
                        foreach (var item in Portals.Specific)
                        {
                            MaskItemIndexed<R, Portal.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Portal.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.RoomPortal = this.RoomPortal == null ? null : new MaskItem<R, Bounding.Mask<R>?>(eval(this.RoomPortal.Overall), this.RoomPortal.Specific?.Translate(eval));
                obj.Unknown = eval(this.Unknown);
                obj.LightingTemplate = eval(this.LightingTemplate);
                obj.ImageSpace = eval(this.ImageSpace);
                if (LinkedRooms != null)
                {
                    obj.LinkedRooms = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LinkedRooms.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LinkedRooms.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LinkedRooms.Specific = l;
                        foreach (var item in LinkedRooms.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.IsMultiBoundPrimitive = eval(this.IsMultiBoundPrimitive);
                obj.RagdollData = eval(this.RagdollData);
                obj.RagdollBipedData = eval(this.RagdollBipedData);
                obj.Radius = eval(this.Radius);
                if (Reflections != null)
                {
                    obj.Reflections = new MaskItem<R, IEnumerable<MaskItemIndexed<R, WaterReflection.Mask<R>?>>?>(eval(this.Reflections.Overall), Enumerable.Empty<MaskItemIndexed<R, WaterReflection.Mask<R>?>>());
                    if (Reflections.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, WaterReflection.Mask<R>?>>();
                        obj.Reflections.Specific = l;
                        foreach (var item in Reflections.Specific)
                        {
                            MaskItemIndexed<R, WaterReflection.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, WaterReflection.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                if (LitWater != null)
                {
                    obj.LitWater = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LitWater.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LitWater.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LitWater.Specific = l;
                        foreach (var item in LitWater.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.Emittance = eval(this.Emittance);
                obj.LightData = this.LightData == null ? null : new MaskItem<R, LightData.Mask<R>?>(eval(this.LightData.Overall), this.LightData.Specific?.Translate(eval));
                obj.Alpha = this.Alpha == null ? null : new MaskItem<R, Alpha.Mask<R>?>(eval(this.Alpha.Overall), this.Alpha.Specific?.Translate(eval));
                obj.TeleportDestination = this.TeleportDestination == null ? null : new MaskItem<R, TeleportDestination.Mask<R>?>(eval(this.TeleportDestination.Overall), this.TeleportDestination.Specific?.Translate(eval));
                obj.TeleportMessageBox = eval(this.TeleportMessageBox);
                obj.MultiboundReference = eval(this.MultiboundReference);
                obj.XWCN = eval(this.XWCN);
                obj.XWCS = eval(this.XWCS);
                obj.WaterVelocity = this.WaterVelocity == null ? null : new MaskItem<R, WaterVelocity.Mask<R>?>(eval(this.WaterVelocity.Overall), this.WaterVelocity.Specific?.Translate(eval));
                obj.XCVL = eval(this.XCVL);
                obj.XCZR = eval(this.XCZR);
                obj.XCZA = eval(this.XCZA);
                obj.XCZC = eval(this.XCZC);
                obj.Scale = eval(this.Scale);
                obj.SpawnContainer = eval(this.SpawnContainer);
                obj.ActivateParents = this.ActivateParents == null ? null : new MaskItem<R, ActivateParents.Mask<R>?>(eval(this.ActivateParents.Overall), this.ActivateParents.Specific?.Translate(eval));
                obj.LeveledItemBaseObject = eval(this.LeveledItemBaseObject);
                obj.LevelModifier = eval(this.LevelModifier);
                obj.PersistentLocation = eval(this.PersistentLocation);
                obj.CollisionLayer = eval(this.CollisionLayer);
                obj.Lock = this.Lock == null ? null : new MaskItem<R, LockData.Mask<R>?>(eval(this.Lock.Overall), this.Lock.Specific?.Translate(eval));
                obj.EncounterZone = eval(this.EncounterZone);
                obj.NavigationDoorLink = this.NavigationDoorLink == null ? null : new MaskItem<R, NavigationDoorLink.Mask<R>?>(eval(this.NavigationDoorLink.Overall), this.NavigationDoorLink.Specific?.Translate(eval));
                if (LocationRefTypes != null)
                {
                    obj.LocationRefTypes = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.LocationRefTypes.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (LocationRefTypes.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.LocationRefTypes.Specific = l;
                        foreach (var item in LocationRefTypes.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.IsIgnoredBySandbox = eval(this.IsIgnoredBySandbox);
                obj.Owner = eval(this.Owner);
                obj.FactionRank = eval(this.FactionRank);
                obj.ItemCount = eval(this.ItemCount);
                obj.Charge = eval(this.Charge);
                obj.LocationReference = eval(this.LocationReference);
                obj.EnableParent = this.EnableParent == null ? null : new MaskItem<R, EnableParent.Mask<R>?>(eval(this.EnableParent.Overall), this.EnableParent.Specific?.Translate(eval));
                if (LinkedReferences != null)
                {
                    obj.LinkedReferences = new MaskItem<R, IEnumerable<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>?>(eval(this.LinkedReferences.Overall), Enumerable.Empty<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>());
                    if (LinkedReferences.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, LinkedReferences.Mask<R>?>>();
                        obj.LinkedReferences.Specific = l;
                        foreach (var item in LinkedReferences.Specific)
                        {
                            MaskItemIndexed<R, LinkedReferences.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, LinkedReferences.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.Patrol = this.Patrol == null ? null : new MaskItem<R, Patrol.Mask<R>?>(eval(this.Patrol.Overall), this.Patrol.Specific?.Translate(eval));
                obj.Action = eval(this.Action);
                obj.HeadTrackingWeight = eval(this.HeadTrackingWeight);
                obj.FavorCost = eval(this.FavorCost);
                obj.IsOpenByDefault = eval(this.IsOpenByDefault);
                obj.MapMarker = this.MapMarker == null ? null : new MaskItem<R, MapMarker.Mask<R>?>(eval(this.MapMarker.Overall), this.MapMarker.Specific?.Translate(eval));
                obj.AttachRef = eval(this.AttachRef);
                obj.DistantLodData = eval(this.DistantLodData);
                obj.Placement = this.Placement == null ? null : new MaskItem<R, Placement.Mask<R>?>(eval(this.Placement.Overall), this.Placement.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(PlacedObject.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, PlacedObject.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(PlacedObject.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.VirtualMachineAdapter?.Overall ?? true)
                    {
                        VirtualMachineAdapter?.Print(sb);
                    }
                    if (printMask?.Base ?? true)
                    {
                        sb.AppendItem(Base, "Base");
                    }
                    if (printMask?.BoundHalfExtents ?? true)
                    {
                        sb.AppendItem(BoundHalfExtents, "BoundHalfExtents");
                    }
                    if (printMask?.Primitive?.Overall ?? true)
                    {
                        Primitive?.Print(sb);
                    }
                    if (printMask?.XORD ?? true)
                    {
                        sb.AppendItem(XORD, "XORD");
                    }
                    if (printMask?.OcclusionPlane?.Overall ?? true)
                    {
                        OcclusionPlane?.Print(sb);
                    }
                    if ((printMask?.Portals?.Overall ?? true)
                        && Portals is {} PortalsItem)
                    {
                        sb.AppendLine("Portals =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PortalsItem.Overall);
                            if (PortalsItem.Specific != null)
                            {
                                foreach (var subItem in PortalsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.RoomPortal?.Overall ?? true)
                    {
                        RoomPortal?.Print(sb);
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.LightingTemplate ?? true)
                    {
                        sb.AppendItem(LightingTemplate, "LightingTemplate");
                    }
                    if (printMask?.ImageSpace ?? true)
                    {
                        sb.AppendItem(ImageSpace, "ImageSpace");
                    }
                    if ((printMask?.LinkedRooms?.Overall ?? true)
                        && LinkedRooms is {} LinkedRoomsItem)
                    {
                        sb.AppendLine("LinkedRooms =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LinkedRoomsItem.Overall);
                            if (LinkedRoomsItem.Specific != null)
                            {
                                foreach (var subItem in LinkedRoomsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.IsMultiBoundPrimitive ?? true)
                    {
                        sb.AppendItem(IsMultiBoundPrimitive, "IsMultiBoundPrimitive");
                    }
                    if (printMask?.RagdollData ?? true)
                    {
                        sb.AppendItem(RagdollData, "RagdollData");
                    }
                    if (printMask?.RagdollBipedData ?? true)
                    {
                        sb.AppendItem(RagdollBipedData, "RagdollBipedData");
                    }
                    if (printMask?.Radius ?? true)
                    {
                        sb.AppendItem(Radius, "Radius");
                    }
                    if ((printMask?.Reflections?.Overall ?? true)
                        && Reflections is {} ReflectionsItem)
                    {
                        sb.AppendLine("Reflections =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ReflectionsItem.Overall);
                            if (ReflectionsItem.Specific != null)
                            {
                                foreach (var subItem in ReflectionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if ((printMask?.LitWater?.Overall ?? true)
                        && LitWater is {} LitWaterItem)
                    {
                        sb.AppendLine("LitWater =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LitWaterItem.Overall);
                            if (LitWaterItem.Specific != null)
                            {
                                foreach (var subItem in LitWaterItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Emittance ?? true)
                    {
                        sb.AppendItem(Emittance, "Emittance");
                    }
                    if (printMask?.LightData?.Overall ?? true)
                    {
                        LightData?.Print(sb);
                    }
                    if (printMask?.Alpha?.Overall ?? true)
                    {
                        Alpha?.Print(sb);
                    }
                    if (printMask?.TeleportDestination?.Overall ?? true)
                    {
                        TeleportDestination?.Print(sb);
                    }
                    if (printMask?.TeleportMessageBox ?? true)
                    {
                        sb.AppendItem(TeleportMessageBox, "TeleportMessageBox");
                    }
                    if (printMask?.MultiboundReference ?? true)
                    {
                        sb.AppendItem(MultiboundReference, "MultiboundReference");
                    }
                    if (printMask?.XWCN ?? true)
                    {
                        sb.AppendItem(XWCN, "XWCN");
                    }
                    if (printMask?.XWCS ?? true)
                    {
                        sb.AppendItem(XWCS, "XWCS");
                    }
                    if (printMask?.WaterVelocity?.Overall ?? true)
                    {
                        WaterVelocity?.Print(sb);
                    }
                    if (printMask?.XCVL ?? true)
                    {
                        sb.AppendItem(XCVL, "XCVL");
                    }
                    if (printMask?.XCZR ?? true)
                    {
                        sb.AppendItem(XCZR, "XCZR");
                    }
                    if (printMask?.XCZA ?? true)
                    {
                        sb.AppendItem(XCZA, "XCZA");
                    }
                    if (printMask?.XCZC ?? true)
                    {
                        sb.AppendItem(XCZC, "XCZC");
                    }
                    if (printMask?.Scale ?? true)
                    {
                        sb.AppendItem(Scale, "Scale");
                    }
                    if (printMask?.SpawnContainer ?? true)
                    {
                        sb.AppendItem(SpawnContainer, "SpawnContainer");
                    }
                    if (printMask?.ActivateParents?.Overall ?? true)
                    {
                        ActivateParents?.Print(sb);
                    }
                    if (printMask?.LeveledItemBaseObject ?? true)
                    {
                        sb.AppendItem(LeveledItemBaseObject, "LeveledItemBaseObject");
                    }
                    if (printMask?.LevelModifier ?? true)
                    {
                        sb.AppendItem(LevelModifier, "LevelModifier");
                    }
                    if (printMask?.PersistentLocation ?? true)
                    {
                        sb.AppendItem(PersistentLocation, "PersistentLocation");
                    }
                    if (printMask?.CollisionLayer ?? true)
                    {
                        sb.AppendItem(CollisionLayer, "CollisionLayer");
                    }
                    if (printMask?.Lock?.Overall ?? true)
                    {
                        Lock?.Print(sb);
                    }
                    if (printMask?.EncounterZone ?? true)
                    {
                        sb.AppendItem(EncounterZone, "EncounterZone");
                    }
                    if (printMask?.NavigationDoorLink?.Overall ?? true)
                    {
                        NavigationDoorLink?.Print(sb);
                    }
                    if ((printMask?.LocationRefTypes?.Overall ?? true)
                        && LocationRefTypes is {} LocationRefTypesItem)
                    {
                        sb.AppendLine("LocationRefTypes =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LocationRefTypesItem.Overall);
                            if (LocationRefTypesItem.Specific != null)
                            {
                                foreach (var subItem in LocationRefTypesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.IsIgnoredBySandbox ?? true)
                    {
                        sb.AppendItem(IsIgnoredBySandbox, "IsIgnoredBySandbox");
                    }
                    if (printMask?.Owner ?? true)
                    {
                        sb.AppendItem(Owner, "Owner");
                    }
                    if (printMask?.FactionRank ?? true)
                    {
                        sb.AppendItem(FactionRank, "FactionRank");
                    }
                    if (printMask?.ItemCount ?? true)
                    {
                        sb.AppendItem(ItemCount, "ItemCount");
                    }
                    if (printMask?.Charge ?? true)
                    {
                        sb.AppendItem(Charge, "Charge");
                    }
                    if (printMask?.LocationReference ?? true)
                    {
                        sb.AppendItem(LocationReference, "LocationReference");
                    }
                    if (printMask?.EnableParent?.Overall ?? true)
                    {
                        EnableParent?.Print(sb);
                    }
                    if ((printMask?.LinkedReferences?.Overall ?? true)
                        && LinkedReferences is {} LinkedReferencesItem)
                    {
                        sb.AppendLine("LinkedReferences =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(LinkedReferencesItem.Overall);
                            if (LinkedReferencesItem.Specific != null)
                            {
                                foreach (var subItem in LinkedReferencesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.Patrol?.Overall ?? true)
                    {
                        Patrol?.Print(sb);
                    }
                    if (printMask?.Action ?? true)
                    {
                        sb.AppendItem(Action, "Action");
                    }
                    if (printMask?.HeadTrackingWeight ?? true)
                    {
                        sb.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                    }
                    if (printMask?.FavorCost ?? true)
                    {
                        sb.AppendItem(FavorCost, "FavorCost");
                    }
                    if (printMask?.IsOpenByDefault ?? true)
                    {
                        sb.AppendItem(IsOpenByDefault, "IsOpenByDefault");
                    }
                    if (printMask?.MapMarker?.Overall ?? true)
                    {
                        MapMarker?.Print(sb);
                    }
                    if (printMask?.AttachRef ?? true)
                    {
                        sb.AppendItem(AttachRef, "AttachRef");
                    }
                    if (printMask?.DistantLodData ?? true)
                    {
                        sb.AppendItem(DistantLodData, "DistantLodData");
                    }
                    if (printMask?.Placement?.Overall ?? true)
                    {
                        Placement?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>? VirtualMachineAdapter;
            public Exception? Base;
            public Exception? BoundHalfExtents;
            public MaskItem<Exception?, PlacedPrimitive.ErrorMask?>? Primitive;
            public Exception? XORD;
            public MaskItem<Exception?, Bounding.ErrorMask?>? OcclusionPlane;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Portal.ErrorMask?>>?>? Portals;
            public MaskItem<Exception?, Bounding.ErrorMask?>? RoomPortal;
            public Exception? Unknown;
            public Exception? LightingTemplate;
            public Exception? ImageSpace;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LinkedRooms;
            public Exception? IsMultiBoundPrimitive;
            public Exception? RagdollData;
            public Exception? RagdollBipedData;
            public Exception? Radius;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>? Reflections;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LitWater;
            public Exception? Emittance;
            public MaskItem<Exception?, LightData.ErrorMask?>? LightData;
            public MaskItem<Exception?, Alpha.ErrorMask?>? Alpha;
            public MaskItem<Exception?, TeleportDestination.ErrorMask?>? TeleportDestination;
            public Exception? TeleportMessageBox;
            public Exception? MultiboundReference;
            public Exception? XWCN;
            public Exception? XWCS;
            public MaskItem<Exception?, WaterVelocity.ErrorMask?>? WaterVelocity;
            public Exception? XCVL;
            public Exception? XCZR;
            public Exception? XCZA;
            public Exception? XCZC;
            public Exception? Scale;
            public Exception? SpawnContainer;
            public MaskItem<Exception?, ActivateParents.ErrorMask?>? ActivateParents;
            public Exception? LeveledItemBaseObject;
            public Exception? LevelModifier;
            public Exception? PersistentLocation;
            public Exception? CollisionLayer;
            public MaskItem<Exception?, LockData.ErrorMask?>? Lock;
            public Exception? EncounterZone;
            public MaskItem<Exception?, NavigationDoorLink.ErrorMask?>? NavigationDoorLink;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? LocationRefTypes;
            public Exception? IsIgnoredBySandbox;
            public Exception? Owner;
            public Exception? FactionRank;
            public Exception? ItemCount;
            public Exception? Charge;
            public Exception? LocationReference;
            public MaskItem<Exception?, EnableParent.ErrorMask?>? EnableParent;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>? LinkedReferences;
            public MaskItem<Exception?, Patrol.ErrorMask?>? Patrol;
            public Exception? Action;
            public Exception? HeadTrackingWeight;
            public Exception? FavorCost;
            public Exception? IsOpenByDefault;
            public MaskItem<Exception?, MapMarker.ErrorMask?>? MapMarker;
            public Exception? AttachRef;
            public Exception? DistantLodData;
            public MaskItem<Exception?, Placement.ErrorMask?>? Placement;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.VirtualMachineAdapter:
                        return VirtualMachineAdapter;
                    case PlacedObject_FieldIndex.Base:
                        return Base;
                    case PlacedObject_FieldIndex.BoundHalfExtents:
                        return BoundHalfExtents;
                    case PlacedObject_FieldIndex.Primitive:
                        return Primitive;
                    case PlacedObject_FieldIndex.XORD:
                        return XORD;
                    case PlacedObject_FieldIndex.OcclusionPlane:
                        return OcclusionPlane;
                    case PlacedObject_FieldIndex.Portals:
                        return Portals;
                    case PlacedObject_FieldIndex.RoomPortal:
                        return RoomPortal;
                    case PlacedObject_FieldIndex.Unknown:
                        return Unknown;
                    case PlacedObject_FieldIndex.LightingTemplate:
                        return LightingTemplate;
                    case PlacedObject_FieldIndex.ImageSpace:
                        return ImageSpace;
                    case PlacedObject_FieldIndex.LinkedRooms:
                        return LinkedRooms;
                    case PlacedObject_FieldIndex.IsMultiBoundPrimitive:
                        return IsMultiBoundPrimitive;
                    case PlacedObject_FieldIndex.RagdollData:
                        return RagdollData;
                    case PlacedObject_FieldIndex.RagdollBipedData:
                        return RagdollBipedData;
                    case PlacedObject_FieldIndex.Radius:
                        return Radius;
                    case PlacedObject_FieldIndex.Reflections:
                        return Reflections;
                    case PlacedObject_FieldIndex.LitWater:
                        return LitWater;
                    case PlacedObject_FieldIndex.Emittance:
                        return Emittance;
                    case PlacedObject_FieldIndex.LightData:
                        return LightData;
                    case PlacedObject_FieldIndex.Alpha:
                        return Alpha;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        return TeleportDestination;
                    case PlacedObject_FieldIndex.TeleportMessageBox:
                        return TeleportMessageBox;
                    case PlacedObject_FieldIndex.MultiboundReference:
                        return MultiboundReference;
                    case PlacedObject_FieldIndex.XWCN:
                        return XWCN;
                    case PlacedObject_FieldIndex.XWCS:
                        return XWCS;
                    case PlacedObject_FieldIndex.WaterVelocity:
                        return WaterVelocity;
                    case PlacedObject_FieldIndex.XCVL:
                        return XCVL;
                    case PlacedObject_FieldIndex.XCZR:
                        return XCZR;
                    case PlacedObject_FieldIndex.XCZA:
                        return XCZA;
                    case PlacedObject_FieldIndex.XCZC:
                        return XCZC;
                    case PlacedObject_FieldIndex.Scale:
                        return Scale;
                    case PlacedObject_FieldIndex.SpawnContainer:
                        return SpawnContainer;
                    case PlacedObject_FieldIndex.ActivateParents:
                        return ActivateParents;
                    case PlacedObject_FieldIndex.LeveledItemBaseObject:
                        return LeveledItemBaseObject;
                    case PlacedObject_FieldIndex.LevelModifier:
                        return LevelModifier;
                    case PlacedObject_FieldIndex.PersistentLocation:
                        return PersistentLocation;
                    case PlacedObject_FieldIndex.CollisionLayer:
                        return CollisionLayer;
                    case PlacedObject_FieldIndex.Lock:
                        return Lock;
                    case PlacedObject_FieldIndex.EncounterZone:
                        return EncounterZone;
                    case PlacedObject_FieldIndex.NavigationDoorLink:
                        return NavigationDoorLink;
                    case PlacedObject_FieldIndex.LocationRefTypes:
                        return LocationRefTypes;
                    case PlacedObject_FieldIndex.IsIgnoredBySandbox:
                        return IsIgnoredBySandbox;
                    case PlacedObject_FieldIndex.Owner:
                        return Owner;
                    case PlacedObject_FieldIndex.FactionRank:
                        return FactionRank;
                    case PlacedObject_FieldIndex.ItemCount:
                        return ItemCount;
                    case PlacedObject_FieldIndex.Charge:
                        return Charge;
                    case PlacedObject_FieldIndex.LocationReference:
                        return LocationReference;
                    case PlacedObject_FieldIndex.EnableParent:
                        return EnableParent;
                    case PlacedObject_FieldIndex.LinkedReferences:
                        return LinkedReferences;
                    case PlacedObject_FieldIndex.Patrol:
                        return Patrol;
                    case PlacedObject_FieldIndex.Action:
                        return Action;
                    case PlacedObject_FieldIndex.HeadTrackingWeight:
                        return HeadTrackingWeight;
                    case PlacedObject_FieldIndex.FavorCost:
                        return FavorCost;
                    case PlacedObject_FieldIndex.IsOpenByDefault:
                        return IsOpenByDefault;
                    case PlacedObject_FieldIndex.MapMarker:
                        return MapMarker;
                    case PlacedObject_FieldIndex.AttachRef:
                        return AttachRef;
                    case PlacedObject_FieldIndex.DistantLodData:
                        return DistantLodData;
                    case PlacedObject_FieldIndex.Placement:
                        return Placement;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = new MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Base:
                        this.Base = ex;
                        break;
                    case PlacedObject_FieldIndex.BoundHalfExtents:
                        this.BoundHalfExtents = ex;
                        break;
                    case PlacedObject_FieldIndex.Primitive:
                        this.Primitive = new MaskItem<Exception?, PlacedPrimitive.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.XORD:
                        this.XORD = ex;
                        break;
                    case PlacedObject_FieldIndex.OcclusionPlane:
                        this.OcclusionPlane = new MaskItem<Exception?, Bounding.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Portals:
                        this.Portals = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Portal.ErrorMask?>>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.RoomPortal:
                        this.RoomPortal = new MaskItem<Exception?, Bounding.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case PlacedObject_FieldIndex.LightingTemplate:
                        this.LightingTemplate = ex;
                        break;
                    case PlacedObject_FieldIndex.ImageSpace:
                        this.ImageSpace = ex;
                        break;
                    case PlacedObject_FieldIndex.LinkedRooms:
                        this.LinkedRooms = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.IsMultiBoundPrimitive:
                        this.IsMultiBoundPrimitive = ex;
                        break;
                    case PlacedObject_FieldIndex.RagdollData:
                        this.RagdollData = ex;
                        break;
                    case PlacedObject_FieldIndex.RagdollBipedData:
                        this.RagdollBipedData = ex;
                        break;
                    case PlacedObject_FieldIndex.Radius:
                        this.Radius = ex;
                        break;
                    case PlacedObject_FieldIndex.Reflections:
                        this.Reflections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.LitWater:
                        this.LitWater = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Emittance:
                        this.Emittance = ex;
                        break;
                    case PlacedObject_FieldIndex.LightData:
                        this.LightData = new MaskItem<Exception?, LightData.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Alpha:
                        this.Alpha = new MaskItem<Exception?, Alpha.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        this.TeleportDestination = new MaskItem<Exception?, TeleportDestination.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.TeleportMessageBox:
                        this.TeleportMessageBox = ex;
                        break;
                    case PlacedObject_FieldIndex.MultiboundReference:
                        this.MultiboundReference = ex;
                        break;
                    case PlacedObject_FieldIndex.XWCN:
                        this.XWCN = ex;
                        break;
                    case PlacedObject_FieldIndex.XWCS:
                        this.XWCS = ex;
                        break;
                    case PlacedObject_FieldIndex.WaterVelocity:
                        this.WaterVelocity = new MaskItem<Exception?, WaterVelocity.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.XCVL:
                        this.XCVL = ex;
                        break;
                    case PlacedObject_FieldIndex.XCZR:
                        this.XCZR = ex;
                        break;
                    case PlacedObject_FieldIndex.XCZA:
                        this.XCZA = ex;
                        break;
                    case PlacedObject_FieldIndex.XCZC:
                        this.XCZC = ex;
                        break;
                    case PlacedObject_FieldIndex.Scale:
                        this.Scale = ex;
                        break;
                    case PlacedObject_FieldIndex.SpawnContainer:
                        this.SpawnContainer = ex;
                        break;
                    case PlacedObject_FieldIndex.ActivateParents:
                        this.ActivateParents = new MaskItem<Exception?, ActivateParents.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.LeveledItemBaseObject:
                        this.LeveledItemBaseObject = ex;
                        break;
                    case PlacedObject_FieldIndex.LevelModifier:
                        this.LevelModifier = ex;
                        break;
                    case PlacedObject_FieldIndex.PersistentLocation:
                        this.PersistentLocation = ex;
                        break;
                    case PlacedObject_FieldIndex.CollisionLayer:
                        this.CollisionLayer = ex;
                        break;
                    case PlacedObject_FieldIndex.Lock:
                        this.Lock = new MaskItem<Exception?, LockData.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.EncounterZone:
                        this.EncounterZone = ex;
                        break;
                    case PlacedObject_FieldIndex.NavigationDoorLink:
                        this.NavigationDoorLink = new MaskItem<Exception?, NavigationDoorLink.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.IsIgnoredBySandbox:
                        this.IsIgnoredBySandbox = ex;
                        break;
                    case PlacedObject_FieldIndex.Owner:
                        this.Owner = ex;
                        break;
                    case PlacedObject_FieldIndex.FactionRank:
                        this.FactionRank = ex;
                        break;
                    case PlacedObject_FieldIndex.ItemCount:
                        this.ItemCount = ex;
                        break;
                    case PlacedObject_FieldIndex.Charge:
                        this.Charge = ex;
                        break;
                    case PlacedObject_FieldIndex.LocationReference:
                        this.LocationReference = ex;
                        break;
                    case PlacedObject_FieldIndex.EnableParent:
                        this.EnableParent = new MaskItem<Exception?, EnableParent.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.LinkedReferences:
                        this.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Patrol:
                        this.Patrol = new MaskItem<Exception?, Patrol.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.Action:
                        this.Action = ex;
                        break;
                    case PlacedObject_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = ex;
                        break;
                    case PlacedObject_FieldIndex.FavorCost:
                        this.FavorCost = ex;
                        break;
                    case PlacedObject_FieldIndex.IsOpenByDefault:
                        this.IsOpenByDefault = ex;
                        break;
                    case PlacedObject_FieldIndex.MapMarker:
                        this.MapMarker = new MaskItem<Exception?, MapMarker.ErrorMask?>(ex, null);
                        break;
                    case PlacedObject_FieldIndex.AttachRef:
                        this.AttachRef = ex;
                        break;
                    case PlacedObject_FieldIndex.DistantLodData:
                        this.DistantLodData = ex;
                        break;
                    case PlacedObject_FieldIndex.Placement:
                        this.Placement = new MaskItem<Exception?, Placement.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                PlacedObject_FieldIndex enu = (PlacedObject_FieldIndex)index;
                switch (enu)
                {
                    case PlacedObject_FieldIndex.VirtualMachineAdapter:
                        this.VirtualMachineAdapter = (MaskItem<Exception?, VirtualMachineAdapter.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Base:
                        this.Base = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.BoundHalfExtents:
                        this.BoundHalfExtents = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Primitive:
                        this.Primitive = (MaskItem<Exception?, PlacedPrimitive.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.XORD:
                        this.XORD = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.OcclusionPlane:
                        this.OcclusionPlane = (MaskItem<Exception?, Bounding.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Portals:
                        this.Portals = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Portal.ErrorMask?>>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.RoomPortal:
                        this.RoomPortal = (MaskItem<Exception?, Bounding.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LightingTemplate:
                        this.LightingTemplate = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.ImageSpace:
                        this.ImageSpace = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LinkedRooms:
                        this.LinkedRooms = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.IsMultiBoundPrimitive:
                        this.IsMultiBoundPrimitive = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.RagdollData:
                        this.RagdollData = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.RagdollBipedData:
                        this.RagdollBipedData = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Radius:
                        this.Radius = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Reflections:
                        this.Reflections = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.LitWater:
                        this.LitWater = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.Emittance:
                        this.Emittance = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LightData:
                        this.LightData = (MaskItem<Exception?, LightData.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Alpha:
                        this.Alpha = (MaskItem<Exception?, Alpha.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.TeleportDestination:
                        this.TeleportDestination = (MaskItem<Exception?, TeleportDestination.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.TeleportMessageBox:
                        this.TeleportMessageBox = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.MultiboundReference:
                        this.MultiboundReference = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XWCN:
                        this.XWCN = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XWCS:
                        this.XWCS = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.WaterVelocity:
                        this.WaterVelocity = (MaskItem<Exception?, WaterVelocity.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.XCVL:
                        this.XCVL = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XCZR:
                        this.XCZR = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XCZA:
                        this.XCZA = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.XCZC:
                        this.XCZC = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Scale:
                        this.Scale = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.SpawnContainer:
                        this.SpawnContainer = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.ActivateParents:
                        this.ActivateParents = (MaskItem<Exception?, ActivateParents.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.LeveledItemBaseObject:
                        this.LeveledItemBaseObject = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LevelModifier:
                        this.LevelModifier = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.PersistentLocation:
                        this.PersistentLocation = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.CollisionLayer:
                        this.CollisionLayer = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Lock:
                        this.Lock = (MaskItem<Exception?, LockData.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.EncounterZone:
                        this.EncounterZone = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.NavigationDoorLink:
                        this.NavigationDoorLink = (MaskItem<Exception?, NavigationDoorLink.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.LocationRefTypes:
                        this.LocationRefTypes = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.IsIgnoredBySandbox:
                        this.IsIgnoredBySandbox = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Owner:
                        this.Owner = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.FactionRank:
                        this.FactionRank = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.ItemCount:
                        this.ItemCount = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Charge:
                        this.Charge = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.LocationReference:
                        this.LocationReference = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.EnableParent:
                        this.EnableParent = (MaskItem<Exception?, EnableParent.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.LinkedReferences:
                        this.LinkedReferences = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>)obj;
                        break;
                    case PlacedObject_FieldIndex.Patrol:
                        this.Patrol = (MaskItem<Exception?, Patrol.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.Action:
                        this.Action = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.HeadTrackingWeight:
                        this.HeadTrackingWeight = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.FavorCost:
                        this.FavorCost = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.IsOpenByDefault:
                        this.IsOpenByDefault = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.MapMarker:
                        this.MapMarker = (MaskItem<Exception?, MapMarker.ErrorMask?>?)obj;
                        break;
                    case PlacedObject_FieldIndex.AttachRef:
                        this.AttachRef = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.DistantLodData:
                        this.DistantLodData = (Exception?)obj;
                        break;
                    case PlacedObject_FieldIndex.Placement:
                        this.Placement = (MaskItem<Exception?, Placement.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (VirtualMachineAdapter != null) return true;
                if (Base != null) return true;
                if (BoundHalfExtents != null) return true;
                if (Primitive != null) return true;
                if (XORD != null) return true;
                if (OcclusionPlane != null) return true;
                if (Portals != null) return true;
                if (RoomPortal != null) return true;
                if (Unknown != null) return true;
                if (LightingTemplate != null) return true;
                if (ImageSpace != null) return true;
                if (LinkedRooms != null) return true;
                if (IsMultiBoundPrimitive != null) return true;
                if (RagdollData != null) return true;
                if (RagdollBipedData != null) return true;
                if (Radius != null) return true;
                if (Reflections != null) return true;
                if (LitWater != null) return true;
                if (Emittance != null) return true;
                if (LightData != null) return true;
                if (Alpha != null) return true;
                if (TeleportDestination != null) return true;
                if (TeleportMessageBox != null) return true;
                if (MultiboundReference != null) return true;
                if (XWCN != null) return true;
                if (XWCS != null) return true;
                if (WaterVelocity != null) return true;
                if (XCVL != null) return true;
                if (XCZR != null) return true;
                if (XCZA != null) return true;
                if (XCZC != null) return true;
                if (Scale != null) return true;
                if (SpawnContainer != null) return true;
                if (ActivateParents != null) return true;
                if (LeveledItemBaseObject != null) return true;
                if (LevelModifier != null) return true;
                if (PersistentLocation != null) return true;
                if (CollisionLayer != null) return true;
                if (Lock != null) return true;
                if (EncounterZone != null) return true;
                if (NavigationDoorLink != null) return true;
                if (LocationRefTypes != null) return true;
                if (IsIgnoredBySandbox != null) return true;
                if (Owner != null) return true;
                if (FactionRank != null) return true;
                if (ItemCount != null) return true;
                if (Charge != null) return true;
                if (LocationReference != null) return true;
                if (EnableParent != null) return true;
                if (LinkedReferences != null) return true;
                if (Patrol != null) return true;
                if (Action != null) return true;
                if (HeadTrackingWeight != null) return true;
                if (FavorCost != null) return true;
                if (IsOpenByDefault != null) return true;
                if (MapMarker != null) return true;
                if (AttachRef != null) return true;
                if (DistantLodData != null) return true;
                if (Placement != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                VirtualMachineAdapter?.Print(sb);
                {
                    sb.AppendItem(Base, "Base");
                }
                {
                    sb.AppendItem(BoundHalfExtents, "BoundHalfExtents");
                }
                Primitive?.Print(sb);
                {
                    sb.AppendItem(XORD, "XORD");
                }
                OcclusionPlane?.Print(sb);
                if (Portals is {} PortalsItem)
                {
                    sb.AppendLine("Portals =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PortalsItem.Overall);
                        if (PortalsItem.Specific != null)
                        {
                            foreach (var subItem in PortalsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                RoomPortal?.Print(sb);
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                {
                    sb.AppendItem(LightingTemplate, "LightingTemplate");
                }
                {
                    sb.AppendItem(ImageSpace, "ImageSpace");
                }
                if (LinkedRooms is {} LinkedRoomsItem)
                {
                    sb.AppendLine("LinkedRooms =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LinkedRoomsItem.Overall);
                        if (LinkedRoomsItem.Specific != null)
                        {
                            foreach (var subItem in LinkedRoomsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(IsMultiBoundPrimitive, "IsMultiBoundPrimitive");
                }
                {
                    sb.AppendItem(RagdollData, "RagdollData");
                }
                {
                    sb.AppendItem(RagdollBipedData, "RagdollBipedData");
                }
                {
                    sb.AppendItem(Radius, "Radius");
                }
                if (Reflections is {} ReflectionsItem)
                {
                    sb.AppendLine("Reflections =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ReflectionsItem.Overall);
                        if (ReflectionsItem.Specific != null)
                        {
                            foreach (var subItem in ReflectionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                if (LitWater is {} LitWaterItem)
                {
                    sb.AppendLine("LitWater =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LitWaterItem.Overall);
                        if (LitWaterItem.Specific != null)
                        {
                            foreach (var subItem in LitWaterItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(Emittance, "Emittance");
                }
                LightData?.Print(sb);
                Alpha?.Print(sb);
                TeleportDestination?.Print(sb);
                {
                    sb.AppendItem(TeleportMessageBox, "TeleportMessageBox");
                }
                {
                    sb.AppendItem(MultiboundReference, "MultiboundReference");
                }
                {
                    sb.AppendItem(XWCN, "XWCN");
                }
                {
                    sb.AppendItem(XWCS, "XWCS");
                }
                WaterVelocity?.Print(sb);
                {
                    sb.AppendItem(XCVL, "XCVL");
                }
                {
                    sb.AppendItem(XCZR, "XCZR");
                }
                {
                    sb.AppendItem(XCZA, "XCZA");
                }
                {
                    sb.AppendItem(XCZC, "XCZC");
                }
                {
                    sb.AppendItem(Scale, "Scale");
                }
                {
                    sb.AppendItem(SpawnContainer, "SpawnContainer");
                }
                ActivateParents?.Print(sb);
                {
                    sb.AppendItem(LeveledItemBaseObject, "LeveledItemBaseObject");
                }
                {
                    sb.AppendItem(LevelModifier, "LevelModifier");
                }
                {
                    sb.AppendItem(PersistentLocation, "PersistentLocation");
                }
                {
                    sb.AppendItem(CollisionLayer, "CollisionLayer");
                }
                Lock?.Print(sb);
                {
                    sb.AppendItem(EncounterZone, "EncounterZone");
                }
                NavigationDoorLink?.Print(sb);
                if (LocationRefTypes is {} LocationRefTypesItem)
                {
                    sb.AppendLine("LocationRefTypes =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LocationRefTypesItem.Overall);
                        if (LocationRefTypesItem.Specific != null)
                        {
                            foreach (var subItem in LocationRefTypesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(IsIgnoredBySandbox, "IsIgnoredBySandbox");
                }
                {
                    sb.AppendItem(Owner, "Owner");
                }
                {
                    sb.AppendItem(FactionRank, "FactionRank");
                }
                {
                    sb.AppendItem(ItemCount, "ItemCount");
                }
                {
                    sb.AppendItem(Charge, "Charge");
                }
                {
                    sb.AppendItem(LocationReference, "LocationReference");
                }
                EnableParent?.Print(sb);
                if (LinkedReferences is {} LinkedReferencesItem)
                {
                    sb.AppendLine("LinkedReferences =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(LinkedReferencesItem.Overall);
                        if (LinkedReferencesItem.Specific != null)
                        {
                            foreach (var subItem in LinkedReferencesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                Patrol?.Print(sb);
                {
                    sb.AppendItem(Action, "Action");
                }
                {
                    sb.AppendItem(HeadTrackingWeight, "HeadTrackingWeight");
                }
                {
                    sb.AppendItem(FavorCost, "FavorCost");
                }
                {
                    sb.AppendItem(IsOpenByDefault, "IsOpenByDefault");
                }
                MapMarker?.Print(sb);
                {
                    sb.AppendItem(AttachRef, "AttachRef");
                }
                {
                    sb.AppendItem(DistantLodData, "DistantLodData");
                }
                Placement?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.VirtualMachineAdapter = this.VirtualMachineAdapter.Combine(rhs.VirtualMachineAdapter, (l, r) => l.Combine(r));
                ret.Base = this.Base.Combine(rhs.Base);
                ret.BoundHalfExtents = this.BoundHalfExtents.Combine(rhs.BoundHalfExtents);
                ret.Primitive = this.Primitive.Combine(rhs.Primitive, (l, r) => l.Combine(r));
                ret.XORD = this.XORD.Combine(rhs.XORD);
                ret.OcclusionPlane = this.OcclusionPlane.Combine(rhs.OcclusionPlane, (l, r) => l.Combine(r));
                ret.Portals = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Portal.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Portals?.Overall, rhs.Portals?.Overall), Noggog.ExceptionExt.Combine(this.Portals?.Specific, rhs.Portals?.Specific));
                ret.RoomPortal = this.RoomPortal.Combine(rhs.RoomPortal, (l, r) => l.Combine(r));
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.LightingTemplate = this.LightingTemplate.Combine(rhs.LightingTemplate);
                ret.ImageSpace = this.ImageSpace.Combine(rhs.ImageSpace);
                ret.LinkedRooms = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.LinkedRooms?.Overall, rhs.LinkedRooms?.Overall), Noggog.ExceptionExt.Combine(this.LinkedRooms?.Specific, rhs.LinkedRooms?.Specific));
                ret.IsMultiBoundPrimitive = this.IsMultiBoundPrimitive.Combine(rhs.IsMultiBoundPrimitive);
                ret.RagdollData = this.RagdollData.Combine(rhs.RagdollData);
                ret.RagdollBipedData = this.RagdollBipedData.Combine(rhs.RagdollBipedData);
                ret.Radius = this.Radius.Combine(rhs.Radius);
                ret.Reflections = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, WaterReflection.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Reflections?.Overall, rhs.Reflections?.Overall), Noggog.ExceptionExt.Combine(this.Reflections?.Specific, rhs.Reflections?.Specific));
                ret.LitWater = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.LitWater?.Overall, rhs.LitWater?.Overall), Noggog.ExceptionExt.Combine(this.LitWater?.Specific, rhs.LitWater?.Specific));
                ret.Emittance = this.Emittance.Combine(rhs.Emittance);
                ret.LightData = this.LightData.Combine(rhs.LightData, (l, r) => l.Combine(r));
                ret.Alpha = this.Alpha.Combine(rhs.Alpha, (l, r) => l.Combine(r));
                ret.TeleportDestination = this.TeleportDestination.Combine(rhs.TeleportDestination, (l, r) => l.Combine(r));
                ret.TeleportMessageBox = this.TeleportMessageBox.Combine(rhs.TeleportMessageBox);
                ret.MultiboundReference = this.MultiboundReference.Combine(rhs.MultiboundReference);
                ret.XWCN = this.XWCN.Combine(rhs.XWCN);
                ret.XWCS = this.XWCS.Combine(rhs.XWCS);
                ret.WaterVelocity = this.WaterVelocity.Combine(rhs.WaterVelocity, (l, r) => l.Combine(r));
                ret.XCVL = this.XCVL.Combine(rhs.XCVL);
                ret.XCZR = this.XCZR.Combine(rhs.XCZR);
                ret.XCZA = this.XCZA.Combine(rhs.XCZA);
                ret.XCZC = this.XCZC.Combine(rhs.XCZC);
                ret.Scale = this.Scale.Combine(rhs.Scale);
                ret.SpawnContainer = this.SpawnContainer.Combine(rhs.SpawnContainer);
                ret.ActivateParents = this.ActivateParents.Combine(rhs.ActivateParents, (l, r) => l.Combine(r));
                ret.LeveledItemBaseObject = this.LeveledItemBaseObject.Combine(rhs.LeveledItemBaseObject);
                ret.LevelModifier = this.LevelModifier.Combine(rhs.LevelModifier);
                ret.PersistentLocation = this.PersistentLocation.Combine(rhs.PersistentLocation);
                ret.CollisionLayer = this.CollisionLayer.Combine(rhs.CollisionLayer);
                ret.Lock = this.Lock.Combine(rhs.Lock, (l, r) => l.Combine(r));
                ret.EncounterZone = this.EncounterZone.Combine(rhs.EncounterZone);
                ret.NavigationDoorLink = this.NavigationDoorLink.Combine(rhs.NavigationDoorLink, (l, r) => l.Combine(r));
                ret.LocationRefTypes = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.LocationRefTypes?.Overall, rhs.LocationRefTypes?.Overall), Noggog.ExceptionExt.Combine(this.LocationRefTypes?.Specific, rhs.LocationRefTypes?.Specific));
                ret.IsIgnoredBySandbox = this.IsIgnoredBySandbox.Combine(rhs.IsIgnoredBySandbox);
                ret.Owner = this.Owner.Combine(rhs.Owner);
                ret.FactionRank = this.FactionRank.Combine(rhs.FactionRank);
                ret.ItemCount = this.ItemCount.Combine(rhs.ItemCount);
                ret.Charge = this.Charge.Combine(rhs.Charge);
                ret.LocationReference = this.LocationReference.Combine(rhs.LocationReference);
                ret.EnableParent = this.EnableParent.Combine(rhs.EnableParent, (l, r) => l.Combine(r));
                ret.LinkedReferences = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, LinkedReferences.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.LinkedReferences?.Overall, rhs.LinkedReferences?.Overall), Noggog.ExceptionExt.Combine(this.LinkedReferences?.Specific, rhs.LinkedReferences?.Specific));
                ret.Patrol = this.Patrol.Combine(rhs.Patrol, (l, r) => l.Combine(r));
                ret.Action = this.Action.Combine(rhs.Action);
                ret.HeadTrackingWeight = this.HeadTrackingWeight.Combine(rhs.HeadTrackingWeight);
                ret.FavorCost = this.FavorCost.Combine(rhs.FavorCost);
                ret.IsOpenByDefault = this.IsOpenByDefault.Combine(rhs.IsOpenByDefault);
                ret.MapMarker = this.MapMarker.Combine(rhs.MapMarker, (l, r) => l.Combine(r));
                ret.AttachRef = this.AttachRef.Combine(rhs.AttachRef);
                ret.DistantLodData = this.DistantLodData.Combine(rhs.DistantLodData);
                ret.Placement = this.Placement.Combine(rhs.Placement, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public VirtualMachineAdapter.TranslationMask? VirtualMachineAdapter;
            public bool Base;
            public bool BoundHalfExtents;
            public PlacedPrimitive.TranslationMask? Primitive;
            public bool XORD;
            public Bounding.TranslationMask? OcclusionPlane;
            public Portal.TranslationMask? Portals;
            public Bounding.TranslationMask? RoomPortal;
            public bool Unknown;
            public bool LightingTemplate;
            public bool ImageSpace;
            public bool LinkedRooms;
            public bool IsMultiBoundPrimitive;
            public bool RagdollData;
            public bool RagdollBipedData;
            public bool Radius;
            public WaterReflection.TranslationMask? Reflections;
            public bool LitWater;
            public bool Emittance;
            public LightData.TranslationMask? LightData;
            public Alpha.TranslationMask? Alpha;
            public TeleportDestination.TranslationMask? TeleportDestination;
            public bool TeleportMessageBox;
            public bool MultiboundReference;
            public bool XWCN;
            public bool XWCS;
            public WaterVelocity.TranslationMask? WaterVelocity;
            public bool XCVL;
            public bool XCZR;
            public bool XCZA;
            public bool XCZC;
            public bool Scale;
            public bool SpawnContainer;
            public ActivateParents.TranslationMask? ActivateParents;
            public bool LeveledItemBaseObject;
            public bool LevelModifier;
            public bool PersistentLocation;
            public bool CollisionLayer;
            public LockData.TranslationMask? Lock;
            public bool EncounterZone;
            public NavigationDoorLink.TranslationMask? NavigationDoorLink;
            public bool LocationRefTypes;
            public bool IsIgnoredBySandbox;
            public bool Owner;
            public bool FactionRank;
            public bool ItemCount;
            public bool Charge;
            public bool LocationReference;
            public EnableParent.TranslationMask? EnableParent;
            public LinkedReferences.TranslationMask? LinkedReferences;
            public Patrol.TranslationMask? Patrol;
            public bool Action;
            public bool HeadTrackingWeight;
            public bool FavorCost;
            public bool IsOpenByDefault;
            public MapMarker.TranslationMask? MapMarker;
            public bool AttachRef;
            public bool DistantLodData;
            public Placement.TranslationMask? Placement;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Base = defaultOn;
                this.BoundHalfExtents = defaultOn;
                this.XORD = defaultOn;
                this.Unknown = defaultOn;
                this.LightingTemplate = defaultOn;
                this.ImageSpace = defaultOn;
                this.LinkedRooms = defaultOn;
                this.IsMultiBoundPrimitive = defaultOn;
                this.RagdollData = defaultOn;
                this.RagdollBipedData = defaultOn;
                this.Radius = defaultOn;
                this.LitWater = defaultOn;
                this.Emittance = defaultOn;
                this.TeleportMessageBox = defaultOn;
                this.MultiboundReference = defaultOn;
                this.XWCN = defaultOn;
                this.XWCS = defaultOn;
                this.XCVL = defaultOn;
                this.XCZR = defaultOn;
                this.XCZA = defaultOn;
                this.XCZC = defaultOn;
                this.Scale = defaultOn;
                this.SpawnContainer = defaultOn;
                this.LeveledItemBaseObject = defaultOn;
                this.LevelModifier = defaultOn;
                this.PersistentLocation = defaultOn;
                this.CollisionLayer = defaultOn;
                this.EncounterZone = defaultOn;
                this.LocationRefTypes = defaultOn;
                this.IsIgnoredBySandbox = defaultOn;
                this.Owner = defaultOn;
                this.FactionRank = defaultOn;
                this.ItemCount = defaultOn;
                this.Charge = defaultOn;
                this.LocationReference = defaultOn;
                this.Action = defaultOn;
                this.HeadTrackingWeight = defaultOn;
                this.FavorCost = defaultOn;
                this.IsOpenByDefault = defaultOn;
                this.AttachRef = defaultOn;
                this.DistantLodData = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((VirtualMachineAdapter != null ? VirtualMachineAdapter.OnOverall : DefaultOn, VirtualMachineAdapter?.GetCrystal()));
                ret.Add((Base, null));
                ret.Add((BoundHalfExtents, null));
                ret.Add((Primitive != null ? Primitive.OnOverall : DefaultOn, Primitive?.GetCrystal()));
                ret.Add((XORD, null));
                ret.Add((OcclusionPlane != null ? OcclusionPlane.OnOverall : DefaultOn, OcclusionPlane?.GetCrystal()));
                ret.Add((Portals == null ? DefaultOn : !Portals.GetCrystal().CopyNothing, Portals?.GetCrystal()));
                ret.Add((RoomPortal != null ? RoomPortal.OnOverall : DefaultOn, RoomPortal?.GetCrystal()));
                ret.Add((Unknown, null));
                ret.Add((LightingTemplate, null));
                ret.Add((ImageSpace, null));
                ret.Add((LinkedRooms, null));
                ret.Add((IsMultiBoundPrimitive, null));
                ret.Add((RagdollData, null));
                ret.Add((RagdollBipedData, null));
                ret.Add((Radius, null));
                ret.Add((Reflections == null ? DefaultOn : !Reflections.GetCrystal().CopyNothing, Reflections?.GetCrystal()));
                ret.Add((LitWater, null));
                ret.Add((Emittance, null));
                ret.Add((LightData != null ? LightData.OnOverall : DefaultOn, LightData?.GetCrystal()));
                ret.Add((Alpha != null ? Alpha.OnOverall : DefaultOn, Alpha?.GetCrystal()));
                ret.Add((TeleportDestination != null ? TeleportDestination.OnOverall : DefaultOn, TeleportDestination?.GetCrystal()));
                ret.Add((TeleportMessageBox, null));
                ret.Add((MultiboundReference, null));
                ret.Add((XWCN, null));
                ret.Add((XWCS, null));
                ret.Add((WaterVelocity != null ? WaterVelocity.OnOverall : DefaultOn, WaterVelocity?.GetCrystal()));
                ret.Add((XCVL, null));
                ret.Add((XCZR, null));
                ret.Add((XCZA, null));
                ret.Add((XCZC, null));
                ret.Add((Scale, null));
                ret.Add((SpawnContainer, null));
                ret.Add((ActivateParents != null ? ActivateParents.OnOverall : DefaultOn, ActivateParents?.GetCrystal()));
                ret.Add((LeveledItemBaseObject, null));
                ret.Add((LevelModifier, null));
                ret.Add((PersistentLocation, null));
                ret.Add((CollisionLayer, null));
                ret.Add((Lock != null ? Lock.OnOverall : DefaultOn, Lock?.GetCrystal()));
                ret.Add((EncounterZone, null));
                ret.Add((NavigationDoorLink != null ? NavigationDoorLink.OnOverall : DefaultOn, NavigationDoorLink?.GetCrystal()));
                ret.Add((LocationRefTypes, null));
                ret.Add((IsIgnoredBySandbox, null));
                ret.Add((Owner, null));
                ret.Add((FactionRank, null));
                ret.Add((ItemCount, null));
                ret.Add((Charge, null));
                ret.Add((LocationReference, null));
                ret.Add((EnableParent != null ? EnableParent.OnOverall : DefaultOn, EnableParent?.GetCrystal()));
                ret.Add((LinkedReferences == null ? DefaultOn : !LinkedReferences.GetCrystal().CopyNothing, LinkedReferences?.GetCrystal()));
                ret.Add((Patrol != null ? Patrol.OnOverall : DefaultOn, Patrol?.GetCrystal()));
                ret.Add((Action, null));
                ret.Add((HeadTrackingWeight, null));
                ret.Add((FavorCost, null));
                ret.Add((IsOpenByDefault, null));
                ret.Add((MapMarker != null ? MapMarker.OnOverall : DefaultOn, MapMarker?.GetCrystal()));
                ret.Add((AttachRef, null));
                ret.Add((DistantLodData, null));
                ret.Add((Placement != null ? Placement.OnOverall : DefaultOn, Placement?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = PlacedObject_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedObjectCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => PlacedObjectSetterCommon.Instance.RemapLinks(this, mapping);
        public PlacedObject(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private PlacedObject(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal PlacedObject(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public PlacedObject(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public PlacedObject(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedObject>.ToString(this);
        }

        protected override Type LinkType => typeof(IPlacedObject);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => PlacedObjectCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => PlacedObjectSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => PlacedObjectSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => PlacedObjectSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedObjectGetter rhs) return false;
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedObjectGetter? obj)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static PlacedObject CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new PlacedObject();
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out PlacedObject item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new PlacedObject GetNew()
        {
            return new PlacedObject();
        }

    }
    #endregion

    #region Interface
    public partial interface IPlacedObject :
        IAssetLinkContainer,
        IFormLinkContainer,
        IHaveVirtualMachineAdapter,
        IKeywordLinkedReference,
        ILinkedReference,
        ILoquiObjectSetter<IPlacedObjectInternal>,
        IPlaced,
        IPlacedObjectGetter,
        IPlacedSimple,
        IPlacedThing,
        IScripted,
        ISkyrimMajorRecordInternal
    {
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapter, IScripted
        /// </summary>
        new VirtualMachineAdapter? VirtualMachineAdapter { get; set; }
        new IFormLinkNullable<IPlaceableObjectGetter> Base { get; set; }
        new P3Float? BoundHalfExtents { get; set; }
        new PlacedPrimitive? Primitive { get; set; }
        new MemorySlice<Byte>? XORD { get; set; }
        new Bounding? OcclusionPlane { get; set; }
        new ExtendedList<Portal>? Portals { get; set; }
        new Bounding? RoomPortal { get; set; }
        new Int16 Unknown { get; set; }
        new IFormLinkNullable<ILightingTemplateGetter> LightingTemplate { get; set; }
        new IFormLinkNullable<IImageSpaceGetter> ImageSpace { get; set; }
        new ExtendedList<IFormLinkGetter<IPlacedObjectGetter>> LinkedRooms { get; }
        new Boolean IsMultiBoundPrimitive { get; set; }
        new MemorySlice<Byte>? RagdollData { get; set; }
        new MemorySlice<Byte>? RagdollBipedData { get; set; }
        new Single? Radius { get; set; }
        new ExtendedList<WaterReflection> Reflections { get; }
        new ExtendedList<IFormLinkGetter<IPlacedObjectGetter>> LitWater { get; }
        new IFormLinkNullable<IEmittanceGetter> Emittance { get; set; }
        new LightData? LightData { get; set; }
        new Alpha? Alpha { get; set; }
        new TeleportDestination? TeleportDestination { get; set; }
        new IFormLinkNullable<IMessageGetter> TeleportMessageBox { get; set; }
        new IFormLinkNullable<IPlacedObjectGetter> MultiboundReference { get; set; }
        new MemorySlice<Byte>? XWCN { get; set; }
        new MemorySlice<Byte>? XWCS { get; set; }
        new WaterVelocity? WaterVelocity { get; set; }
        new MemorySlice<Byte>? XCVL { get; set; }
        new IFormLinkNullable<ILinkedReferenceGetter> XCZR { get; set; }
        new MemorySlice<Byte>? XCZA { get; set; }
        new IFormLinkNullable<ICellGetter> XCZC { get; set; }
        new Single? Scale { get; set; }
        new IFormLinkNullable<IPlacedObjectGetter> SpawnContainer { get; set; }
        new ActivateParents? ActivateParents { get; set; }
        new IFormLinkNullable<ILeveledItemGetter> LeveledItemBaseObject { get; set; }
        new Level? LevelModifier { get; set; }
        new IFormLinkNullable<ILocationGetter> PersistentLocation { get; set; }
        new UInt32? CollisionLayer { get; set; }
        new LockData? Lock { get; set; }
        new IFormLinkNullable<IEncounterZoneGetter> EncounterZone { get; set; }
        new NavigationDoorLink? NavigationDoorLink { get; set; }
        new ExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes { get; set; }
        new Boolean IsIgnoredBySandbox { get; set; }
        new IFormLinkNullable<IOwnerGetter> Owner { get; set; }
        new Int32? FactionRank { get; set; }
        new Int32? ItemCount { get; set; }
        new Single? Charge { get; set; }
        new IFormLinkNullable<ILocationRecordGetter> LocationReference { get; set; }
        new EnableParent? EnableParent { get; set; }
        new ExtendedList<LinkedReferences> LinkedReferences { get; }
        new Patrol? Patrol { get; set; }
        new PlacedObject.ActionFlag? Action { get; set; }
        new Single? HeadTrackingWeight { get; set; }
        new Single? FavorCost { get; set; }
        new Boolean IsOpenByDefault { get; set; }
        new MapMarker? MapMarker { get; set; }
        new IFormLinkNullable<IPlacedThingGetter> AttachRef { get; set; }
        new MemorySlice<Byte>? DistantLodData { get; set; }
        new Placement? Placement { get; set; }
    }

    public partial interface IPlacedObjectInternal :
        ISkyrimMajorRecordInternal,
        IPlacedObject,
        IPlacedObjectGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.REFR)]
    public partial interface IPlacedObjectGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        IHaveVirtualMachineAdapterGetter,
        IKeywordLinkedReferenceGetter,
        ILinkedReferenceGetter,
        ILoquiObject<IPlacedObjectGetter>,
        IMapsToGetter<IPlacedObjectGetter>,
        IPlacedGetter,
        IPlacedSimpleGetter,
        IPlacedThingGetter,
        IScriptedGetter
    {
        static new ILoquiRegistration StaticRegistration => PlacedObject_Registration.Instance;
        #region VirtualMachineAdapter
        /// <summary>
        /// Aspects: IHaveVirtualMachineAdapterGetter, IScriptedGetter
        /// </summary>
        IVirtualMachineAdapterGetter? VirtualMachineAdapter { get; }
        #endregion
        IFormLinkNullableGetter<IPlaceableObjectGetter> Base { get; }
        P3Float? BoundHalfExtents { get; }
        IPlacedPrimitiveGetter? Primitive { get; }
        ReadOnlyMemorySlice<Byte>? XORD { get; }
        IBoundingGetter? OcclusionPlane { get; }
        IReadOnlyList<IPortalGetter>? Portals { get; }
        IBoundingGetter? RoomPortal { get; }
        Int16 Unknown { get; }
        IFormLinkNullableGetter<ILightingTemplateGetter> LightingTemplate { get; }
        IFormLinkNullableGetter<IImageSpaceGetter> ImageSpace { get; }
        IReadOnlyList<IFormLinkGetter<IPlacedObjectGetter>> LinkedRooms { get; }
        Boolean IsMultiBoundPrimitive { get; }
        ReadOnlyMemorySlice<Byte>? RagdollData { get; }
        ReadOnlyMemorySlice<Byte>? RagdollBipedData { get; }
        Single? Radius { get; }
        IReadOnlyList<IWaterReflectionGetter> Reflections { get; }
        IReadOnlyList<IFormLinkGetter<IPlacedObjectGetter>> LitWater { get; }
        IFormLinkNullableGetter<IEmittanceGetter> Emittance { get; }
        ILightDataGetter? LightData { get; }
        IAlphaGetter? Alpha { get; }
        ITeleportDestinationGetter? TeleportDestination { get; }
        IFormLinkNullableGetter<IMessageGetter> TeleportMessageBox { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> MultiboundReference { get; }
        ReadOnlyMemorySlice<Byte>? XWCN { get; }
        ReadOnlyMemorySlice<Byte>? XWCS { get; }
        IWaterVelocityGetter? WaterVelocity { get; }
        ReadOnlyMemorySlice<Byte>? XCVL { get; }
        IFormLinkNullableGetter<ILinkedReferenceGetter> XCZR { get; }
        ReadOnlyMemorySlice<Byte>? XCZA { get; }
        IFormLinkNullableGetter<ICellGetter> XCZC { get; }
        Single? Scale { get; }
        IFormLinkNullableGetter<IPlacedObjectGetter> SpawnContainer { get; }
        IActivateParentsGetter? ActivateParents { get; }
        IFormLinkNullableGetter<ILeveledItemGetter> LeveledItemBaseObject { get; }
        Level? LevelModifier { get; }
        IFormLinkNullableGetter<ILocationGetter> PersistentLocation { get; }
        UInt32? CollisionLayer { get; }
        ILockDataGetter? Lock { get; }
        IFormLinkNullableGetter<IEncounterZoneGetter> EncounterZone { get; }
        INavigationDoorLinkGetter? NavigationDoorLink { get; }
        IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes { get; }
        Boolean IsIgnoredBySandbox { get; }
        IFormLinkNullableGetter<IOwnerGetter> Owner { get; }
        Int32? FactionRank { get; }
        Int32? ItemCount { get; }
        Single? Charge { get; }
        IFormLinkNullableGetter<ILocationRecordGetter> LocationReference { get; }
        IEnableParentGetter? EnableParent { get; }
        IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; }
        IPatrolGetter? Patrol { get; }
        PlacedObject.ActionFlag? Action { get; }
        Single? HeadTrackingWeight { get; }
        Single? FavorCost { get; }
        Boolean IsOpenByDefault { get; }
        IMapMarkerGetter? MapMarker { get; }
        IFormLinkNullableGetter<IPlacedThingGetter> AttachRef { get; }
        ReadOnlyMemorySlice<Byte>? DistantLodData { get; }
        IPlacementGetter? Placement { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class PlacedObjectMixIn
    {
        public static void Clear(this IPlacedObjectInternal item)
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static PlacedObject.Mask<bool> GetEqualsMask(
            this IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IPlacedObjectGetter item,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IPlacedObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            PlacedObject.TranslationMask? equalsMask = null)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IPlacedObjectInternal lhs,
            IPlacedObjectGetter rhs,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = PlacedObject.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IPlacedObjectInternal lhs,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static PlacedObject DeepCopy(
            this IPlacedObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static PlacedObject Duplicate(
            this IPlacedObjectGetter item,
            FormKey formKey,
            PlacedObject.TranslationMask? copyMask = null)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static PlacedObject Duplicate(
            this IPlacedObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IPlacedObjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((PlacedObjectSetterCommon)((IPlacedObjectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum PlacedObject_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        VirtualMachineAdapter = 7,
        Base = 8,
        BoundHalfExtents = 9,
        Primitive = 10,
        XORD = 11,
        OcclusionPlane = 12,
        Portals = 13,
        RoomPortal = 14,
        Unknown = 15,
        LightingTemplate = 16,
        ImageSpace = 17,
        LinkedRooms = 18,
        IsMultiBoundPrimitive = 19,
        RagdollData = 20,
        RagdollBipedData = 21,
        Radius = 22,
        Reflections = 23,
        LitWater = 24,
        Emittance = 25,
        LightData = 26,
        Alpha = 27,
        TeleportDestination = 28,
        TeleportMessageBox = 29,
        MultiboundReference = 30,
        XWCN = 31,
        XWCS = 32,
        WaterVelocity = 33,
        XCVL = 34,
        XCZR = 35,
        XCZA = 36,
        XCZC = 37,
        Scale = 38,
        SpawnContainer = 39,
        ActivateParents = 40,
        LeveledItemBaseObject = 41,
        LevelModifier = 42,
        PersistentLocation = 43,
        CollisionLayer = 44,
        Lock = 45,
        EncounterZone = 46,
        NavigationDoorLink = 47,
        LocationRefTypes = 48,
        IsIgnoredBySandbox = 49,
        Owner = 50,
        FactionRank = 51,
        ItemCount = 52,
        Charge = 53,
        LocationReference = 54,
        EnableParent = 55,
        LinkedReferences = 56,
        Patrol = 57,
        Action = 58,
        HeadTrackingWeight = 59,
        FavorCost = 60,
        IsOpenByDefault = 61,
        MapMarker = 62,
        AttachRef = 63,
        DistantLodData = 64,
        Placement = 65,
    }
    #endregion

    #region Registration
    internal partial class PlacedObject_Registration : ILoquiRegistration
    {
        public static readonly PlacedObject_Registration Instance = new PlacedObject_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 59;

        public const ushort FieldCount = 66;

        public static readonly Type MaskType = typeof(PlacedObject.Mask<>);

        public static readonly Type ErrorMaskType = typeof(PlacedObject.ErrorMask);

        public static readonly Type ClassType = typeof(PlacedObject);

        public static readonly Type GetterType = typeof(IPlacedObjectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IPlacedObject);

        public static readonly Type? InternalSetterType = typeof(IPlacedObjectInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.PlacedObject";

        public const string Name = "PlacedObject";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.REFR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.REFR);
            var all = RecordCollection.Factory(
                RecordTypes.REFR,
                RecordTypes.VMAD,
                RecordTypes.XXXX,
                RecordTypes.NAME,
                RecordTypes.XMBO,
                RecordTypes.XPRM,
                RecordTypes.XORD,
                RecordTypes.XOCP,
                RecordTypes.XPOD,
                RecordTypes.XPTL,
                RecordTypes.XRMR,
                RecordTypes.LNAM,
                RecordTypes.INAM,
                RecordTypes.XLRM,
                RecordTypes.XMBP,
                RecordTypes.XRGD,
                RecordTypes.XRGB,
                RecordTypes.XRDS,
                RecordTypes.XPWR,
                RecordTypes.XLTW,
                RecordTypes.XEMI,
                RecordTypes.XLIG,
                RecordTypes.XALP,
                RecordTypes.XTEL,
                RecordTypes.XTNM,
                RecordTypes.XMBR,
                RecordTypes.XWCN,
                RecordTypes.XWCS,
                RecordTypes.XWCU,
                RecordTypes.XCVL,
                RecordTypes.XCZR,
                RecordTypes.XCZA,
                RecordTypes.XCZC,
                RecordTypes.XSCL,
                RecordTypes.XSPC,
                RecordTypes.XAPD,
                RecordTypes.XLIB,
                RecordTypes.XLCM,
                RecordTypes.XLCN,
                RecordTypes.XTRI,
                RecordTypes.XLOC,
                RecordTypes.XEZN,
                RecordTypes.XNDP,
                RecordTypes.XLRT,
                RecordTypes.XIS2,
                RecordTypes.XOWN,
                RecordTypes.XRNK,
                RecordTypes.XCNT,
                RecordTypes.XCHG,
                RecordTypes.XLRL,
                RecordTypes.XESP,
                RecordTypes.XLKR,
                RecordTypes.XPRD,
                RecordTypes.XACT,
                RecordTypes.XHTW,
                RecordTypes.XFVC,
                RecordTypes.ONAM,
                RecordTypes.XMRK,
                RecordTypes.XATR,
                RecordTypes.XLOD,
                RecordTypes.DATA);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(PlacedObjectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class PlacedObjectSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly PlacedObjectSetterCommon Instance = new PlacedObjectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IPlacedObjectInternal item)
        {
            ClearPartial();
            item.VirtualMachineAdapter = null;
            item.Base.Clear();
            item.BoundHalfExtents = default;
            item.Primitive = null;
            item.XORD = default;
            item.OcclusionPlane = null;
            item.Portals = null;
            item.RoomPortal = null;
            item.Unknown = default(Int16);
            item.LightingTemplate.Clear();
            item.ImageSpace.Clear();
            item.LinkedRooms.Clear();
            item.IsMultiBoundPrimitive = default(Boolean);
            item.RagdollData = default;
            item.RagdollBipedData = default;
            item.Radius = default;
            item.Reflections.Clear();
            item.LitWater.Clear();
            item.Emittance.Clear();
            item.LightData = null;
            item.Alpha = null;
            item.TeleportDestination = null;
            item.TeleportMessageBox.Clear();
            item.MultiboundReference.Clear();
            item.XWCN = default;
            item.XWCS = default;
            item.WaterVelocity = null;
            item.XCVL = default;
            item.XCZR.Clear();
            item.XCZA = default;
            item.XCZC.Clear();
            item.Scale = default;
            item.SpawnContainer.Clear();
            item.ActivateParents = null;
            item.LeveledItemBaseObject.Clear();
            item.LevelModifier = default;
            item.PersistentLocation.Clear();
            item.CollisionLayer = default;
            item.Lock = null;
            item.EncounterZone.Clear();
            item.NavigationDoorLink = null;
            item.LocationRefTypes = null;
            item.IsIgnoredBySandbox = default(Boolean);
            item.Owner.Clear();
            item.FactionRank = default;
            item.ItemCount = default;
            item.Charge = default;
            item.LocationReference.Clear();
            item.EnableParent = null;
            item.LinkedReferences.Clear();
            item.Patrol = null;
            item.Action = default;
            item.HeadTrackingWeight = default;
            item.FavorCost = default;
            item.IsOpenByDefault = default(Boolean);
            item.MapMarker = null;
            item.AttachRef.Clear();
            item.DistantLodData = default;
            item.Placement = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IPlacedObjectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IPlacedObject obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.VirtualMachineAdapter?.RemapLinks(mapping);
            obj.Base.Relink(mapping);
            obj.Portals?.RemapLinks(mapping);
            obj.LightingTemplate.Relink(mapping);
            obj.ImageSpace.Relink(mapping);
            obj.LinkedRooms.RemapLinks(mapping);
            obj.Reflections.RemapLinks(mapping);
            obj.LitWater.RemapLinks(mapping);
            obj.Emittance.Relink(mapping);
            obj.TeleportDestination?.RemapLinks(mapping);
            obj.TeleportMessageBox.Relink(mapping);
            obj.MultiboundReference.Relink(mapping);
            obj.XCZR.Relink(mapping);
            obj.XCZC.Relink(mapping);
            obj.SpawnContainer.Relink(mapping);
            obj.ActivateParents?.RemapLinks(mapping);
            obj.LeveledItemBaseObject.Relink(mapping);
            obj.PersistentLocation.Relink(mapping);
            obj.Lock?.RemapLinks(mapping);
            obj.EncounterZone.Relink(mapping);
            obj.NavigationDoorLink?.RemapLinks(mapping);
            obj.LocationRefTypes?.RemapLinks(mapping);
            obj.Owner.Relink(mapping);
            obj.LocationReference.Relink(mapping);
            obj.EnableParent?.RemapLinks(mapping);
            obj.LinkedReferences.RemapLinks(mapping);
            obj.Patrol?.RemapLinks(mapping);
            obj.AttachRef.Relink(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(IPlacedObject obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateListedAssetLinks())
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            IPlacedObject obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.VirtualMachineAdapter?.RemapAssetLinks(mapping, queryCategories, linkCache);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IPlacedObjectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IPlacedObjectInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: PlacedObjectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: PlacedObjectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedObject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (PlacedObject)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class PlacedObjectCommon : SkyrimMajorRecordCommon
    {
        public new static readonly PlacedObjectCommon Instance = new PlacedObjectCommon();

        public PlacedObject.Mask<bool> GetEqualsMask(
            IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new PlacedObject.Mask<bool>(false);
            ((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IPlacedObjectGetter item,
            IPlacedObjectGetter rhs,
            PlacedObject.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.VirtualMachineAdapter = EqualsMaskHelper.EqualsHelper(
                item.VirtualMachineAdapter,
                rhs.VirtualMachineAdapter,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Base = item.Base.Equals(rhs.Base);
            ret.BoundHalfExtents = item.BoundHalfExtents.Equals(rhs.BoundHalfExtents);
            ret.Primitive = EqualsMaskHelper.EqualsHelper(
                item.Primitive,
                rhs.Primitive,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.XORD = MemorySliceExt.SequenceEqual(item.XORD, rhs.XORD);
            ret.OcclusionPlane = EqualsMaskHelper.EqualsHelper(
                item.OcclusionPlane,
                rhs.OcclusionPlane,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Portals = item.Portals.CollectionEqualsHelper(
                rhs.Portals,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.RoomPortal = EqualsMaskHelper.EqualsHelper(
                item.RoomPortal,
                rhs.RoomPortal,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.LightingTemplate = item.LightingTemplate.Equals(rhs.LightingTemplate);
            ret.ImageSpace = item.ImageSpace.Equals(rhs.ImageSpace);
            ret.LinkedRooms = item.LinkedRooms.CollectionEqualsHelper(
                rhs.LinkedRooms,
                (l, r) => object.Equals(l, r),
                include);
            ret.IsMultiBoundPrimitive = item.IsMultiBoundPrimitive == rhs.IsMultiBoundPrimitive;
            ret.RagdollData = MemorySliceExt.SequenceEqual(item.RagdollData, rhs.RagdollData);
            ret.RagdollBipedData = MemorySliceExt.SequenceEqual(item.RagdollBipedData, rhs.RagdollBipedData);
            ret.Radius = item.Radius.EqualsWithin(rhs.Radius);
            ret.Reflections = item.Reflections.CollectionEqualsHelper(
                rhs.Reflections,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LitWater = item.LitWater.CollectionEqualsHelper(
                rhs.LitWater,
                (l, r) => object.Equals(l, r),
                include);
            ret.Emittance = item.Emittance.Equals(rhs.Emittance);
            ret.LightData = EqualsMaskHelper.EqualsHelper(
                item.LightData,
                rhs.LightData,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Alpha = EqualsMaskHelper.EqualsHelper(
                item.Alpha,
                rhs.Alpha,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TeleportDestination = EqualsMaskHelper.EqualsHelper(
                item.TeleportDestination,
                rhs.TeleportDestination,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.TeleportMessageBox = item.TeleportMessageBox.Equals(rhs.TeleportMessageBox);
            ret.MultiboundReference = item.MultiboundReference.Equals(rhs.MultiboundReference);
            ret.XWCN = MemorySliceExt.SequenceEqual(item.XWCN, rhs.XWCN);
            ret.XWCS = MemorySliceExt.SequenceEqual(item.XWCS, rhs.XWCS);
            ret.WaterVelocity = EqualsMaskHelper.EqualsHelper(
                item.WaterVelocity,
                rhs.WaterVelocity,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.XCVL = MemorySliceExt.SequenceEqual(item.XCVL, rhs.XCVL);
            ret.XCZR = item.XCZR.Equals(rhs.XCZR);
            ret.XCZA = MemorySliceExt.SequenceEqual(item.XCZA, rhs.XCZA);
            ret.XCZC = item.XCZC.Equals(rhs.XCZC);
            ret.Scale = item.Scale.EqualsWithin(rhs.Scale);
            ret.SpawnContainer = item.SpawnContainer.Equals(rhs.SpawnContainer);
            ret.ActivateParents = EqualsMaskHelper.EqualsHelper(
                item.ActivateParents,
                rhs.ActivateParents,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LeveledItemBaseObject = item.LeveledItemBaseObject.Equals(rhs.LeveledItemBaseObject);
            ret.LevelModifier = item.LevelModifier == rhs.LevelModifier;
            ret.PersistentLocation = item.PersistentLocation.Equals(rhs.PersistentLocation);
            ret.CollisionLayer = item.CollisionLayer == rhs.CollisionLayer;
            ret.Lock = EqualsMaskHelper.EqualsHelper(
                item.Lock,
                rhs.Lock,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.EncounterZone = item.EncounterZone.Equals(rhs.EncounterZone);
            ret.NavigationDoorLink = EqualsMaskHelper.EqualsHelper(
                item.NavigationDoorLink,
                rhs.NavigationDoorLink,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LocationRefTypes = item.LocationRefTypes.CollectionEqualsHelper(
                rhs.LocationRefTypes,
                (l, r) => object.Equals(l, r),
                include);
            ret.IsIgnoredBySandbox = item.IsIgnoredBySandbox == rhs.IsIgnoredBySandbox;
            ret.Owner = item.Owner.Equals(rhs.Owner);
            ret.FactionRank = item.FactionRank == rhs.FactionRank;
            ret.ItemCount = item.ItemCount == rhs.ItemCount;
            ret.Charge = item.Charge.EqualsWithin(rhs.Charge);
            ret.LocationReference = item.LocationReference.Equals(rhs.LocationReference);
            ret.EnableParent = EqualsMaskHelper.EqualsHelper(
                item.EnableParent,
                rhs.EnableParent,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.LinkedReferences = item.LinkedReferences.CollectionEqualsHelper(
                rhs.LinkedReferences,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.Patrol = EqualsMaskHelper.EqualsHelper(
                item.Patrol,
                rhs.Patrol,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Action = item.Action == rhs.Action;
            ret.HeadTrackingWeight = item.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight);
            ret.FavorCost = item.FavorCost.EqualsWithin(rhs.FavorCost);
            ret.IsOpenByDefault = item.IsOpenByDefault == rhs.IsOpenByDefault;
            ret.MapMarker = EqualsMaskHelper.EqualsHelper(
                item.MapMarker,
                rhs.MapMarker,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.AttachRef = item.AttachRef.Equals(rhs.AttachRef);
            ret.DistantLodData = MemorySliceExt.SequenceEqual(item.DistantLodData, rhs.DistantLodData);
            ret.Placement = EqualsMaskHelper.EqualsHelper(
                item.Placement,
                rhs.Placement,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IPlacedObjectGetter item,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IPlacedObjectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            PlacedObject.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"PlacedObject =>");
            }
            else
            {
                sb.AppendLine($"{name} (PlacedObject) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IPlacedObjectGetter item,
            StructuredStringBuilder sb,
            PlacedObject.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.VirtualMachineAdapter?.Overall ?? true)
                && item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                VirtualMachineAdapterItem?.Print(sb, "VirtualMachineAdapter");
            }
            if (printMask?.Base ?? true)
            {
                sb.AppendItem(item.Base.FormKeyNullable, "Base");
            }
            if ((printMask?.BoundHalfExtents ?? true)
                && item.BoundHalfExtents is {} BoundHalfExtentsItem)
            {
                sb.AppendItem(BoundHalfExtentsItem, "BoundHalfExtents");
            }
            if ((printMask?.Primitive?.Overall ?? true)
                && item.Primitive is {} PrimitiveItem)
            {
                PrimitiveItem?.Print(sb, "Primitive");
            }
            if ((printMask?.XORD ?? true)
                && item.XORD is {} XORDItem)
            {
                sb.AppendLine($"XORD => {SpanExt.ToHexString(XORDItem)}");
            }
            if ((printMask?.OcclusionPlane?.Overall ?? true)
                && item.OcclusionPlane is {} OcclusionPlaneItem)
            {
                OcclusionPlaneItem?.Print(sb, "OcclusionPlane");
            }
            if ((printMask?.Portals?.Overall ?? true)
                && item.Portals is {} PortalsItem)
            {
                sb.AppendLine("Portals =>");
                using (sb.Brace())
                {
                    foreach (var subItem in PortalsItem)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.RoomPortal?.Overall ?? true)
                && item.RoomPortal is {} RoomPortalItem)
            {
                RoomPortalItem?.Print(sb, "RoomPortal");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if (printMask?.LightingTemplate ?? true)
            {
                sb.AppendItem(item.LightingTemplate.FormKeyNullable, "LightingTemplate");
            }
            if (printMask?.ImageSpace ?? true)
            {
                sb.AppendItem(item.ImageSpace.FormKeyNullable, "ImageSpace");
            }
            if (printMask?.LinkedRooms?.Overall ?? true)
            {
                sb.AppendLine("LinkedRooms =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.LinkedRooms)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.IsMultiBoundPrimitive ?? true)
            {
                sb.AppendItem(item.IsMultiBoundPrimitive, "IsMultiBoundPrimitive");
            }
            if ((printMask?.RagdollData ?? true)
                && item.RagdollData is {} RagdollDataItem)
            {
                sb.AppendLine($"RagdollData => {SpanExt.ToHexString(RagdollDataItem)}");
            }
            if ((printMask?.RagdollBipedData ?? true)
                && item.RagdollBipedData is {} RagdollBipedDataItem)
            {
                sb.AppendLine($"RagdollBipedData => {SpanExt.ToHexString(RagdollBipedDataItem)}");
            }
            if ((printMask?.Radius ?? true)
                && item.Radius is {} RadiusItem)
            {
                sb.AppendItem(RadiusItem, "Radius");
            }
            if (printMask?.Reflections?.Overall ?? true)
            {
                sb.AppendLine("Reflections =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Reflections)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.LitWater?.Overall ?? true)
            {
                sb.AppendLine("LitWater =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.LitWater)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.Emittance ?? true)
            {
                sb.AppendItem(item.Emittance.FormKeyNullable, "Emittance");
            }
            if ((printMask?.LightData?.Overall ?? true)
                && item.LightData is {} LightDataItem)
            {
                LightDataItem?.Print(sb, "LightData");
            }
            if ((printMask?.Alpha?.Overall ?? true)
                && item.Alpha is {} AlphaItem)
            {
                AlphaItem?.Print(sb, "Alpha");
            }
            if ((printMask?.TeleportDestination?.Overall ?? true)
                && item.TeleportDestination is {} TeleportDestinationItem)
            {
                TeleportDestinationItem?.Print(sb, "TeleportDestination");
            }
            if (printMask?.TeleportMessageBox ?? true)
            {
                sb.AppendItem(item.TeleportMessageBox.FormKeyNullable, "TeleportMessageBox");
            }
            if (printMask?.MultiboundReference ?? true)
            {
                sb.AppendItem(item.MultiboundReference.FormKeyNullable, "MultiboundReference");
            }
            if ((printMask?.XWCN ?? true)
                && item.XWCN is {} XWCNItem)
            {
                sb.AppendLine($"XWCN => {SpanExt.ToHexString(XWCNItem)}");
            }
            if ((printMask?.XWCS ?? true)
                && item.XWCS is {} XWCSItem)
            {
                sb.AppendLine($"XWCS => {SpanExt.ToHexString(XWCSItem)}");
            }
            if ((printMask?.WaterVelocity?.Overall ?? true)
                && item.WaterVelocity is {} WaterVelocityItem)
            {
                WaterVelocityItem?.Print(sb, "WaterVelocity");
            }
            if ((printMask?.XCVL ?? true)
                && item.XCVL is {} XCVLItem)
            {
                sb.AppendLine($"XCVL => {SpanExt.ToHexString(XCVLItem)}");
            }
            if (printMask?.XCZR ?? true)
            {
                sb.AppendItem(item.XCZR.FormKeyNullable, "XCZR");
            }
            if ((printMask?.XCZA ?? true)
                && item.XCZA is {} XCZAItem)
            {
                sb.AppendLine($"XCZA => {SpanExt.ToHexString(XCZAItem)}");
            }
            if (printMask?.XCZC ?? true)
            {
                sb.AppendItem(item.XCZC.FormKeyNullable, "XCZC");
            }
            if ((printMask?.Scale ?? true)
                && item.Scale is {} ScaleItem)
            {
                sb.AppendItem(ScaleItem, "Scale");
            }
            if (printMask?.SpawnContainer ?? true)
            {
                sb.AppendItem(item.SpawnContainer.FormKeyNullable, "SpawnContainer");
            }
            if ((printMask?.ActivateParents?.Overall ?? true)
                && item.ActivateParents is {} ActivateParentsItem)
            {
                ActivateParentsItem?.Print(sb, "ActivateParents");
            }
            if (printMask?.LeveledItemBaseObject ?? true)
            {
                sb.AppendItem(item.LeveledItemBaseObject.FormKeyNullable, "LeveledItemBaseObject");
            }
            if ((printMask?.LevelModifier ?? true)
                && item.LevelModifier is {} LevelModifierItem)
            {
                sb.AppendItem(LevelModifierItem, "LevelModifier");
            }
            if (printMask?.PersistentLocation ?? true)
            {
                sb.AppendItem(item.PersistentLocation.FormKeyNullable, "PersistentLocation");
            }
            if ((printMask?.CollisionLayer ?? true)
                && item.CollisionLayer is {} CollisionLayerItem)
            {
                sb.AppendItem(CollisionLayerItem, "CollisionLayer");
            }
            if ((printMask?.Lock?.Overall ?? true)
                && item.Lock is {} LockItem)
            {
                LockItem?.Print(sb, "Lock");
            }
            if (printMask?.EncounterZone ?? true)
            {
                sb.AppendItem(item.EncounterZone.FormKeyNullable, "EncounterZone");
            }
            if ((printMask?.NavigationDoorLink?.Overall ?? true)
                && item.NavigationDoorLink is {} NavigationDoorLinkItem)
            {
                NavigationDoorLinkItem?.Print(sb, "NavigationDoorLink");
            }
            if ((printMask?.LocationRefTypes?.Overall ?? true)
                && item.LocationRefTypes is {} LocationRefTypesItem)
            {
                sb.AppendLine("LocationRefTypes =>");
                using (sb.Brace())
                {
                    foreach (var subItem in LocationRefTypesItem)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem.FormKey);
                        }
                    }
                }
            }
            if (printMask?.IsIgnoredBySandbox ?? true)
            {
                sb.AppendItem(item.IsIgnoredBySandbox, "IsIgnoredBySandbox");
            }
            if (printMask?.Owner ?? true)
            {
                sb.AppendItem(item.Owner.FormKeyNullable, "Owner");
            }
            if ((printMask?.FactionRank ?? true)
                && item.FactionRank is {} FactionRankItem)
            {
                sb.AppendItem(FactionRankItem, "FactionRank");
            }
            if ((printMask?.ItemCount ?? true)
                && item.ItemCount is {} ItemCountItem)
            {
                sb.AppendItem(ItemCountItem, "ItemCount");
            }
            if ((printMask?.Charge ?? true)
                && item.Charge is {} ChargeItem)
            {
                sb.AppendItem(ChargeItem, "Charge");
            }
            if (printMask?.LocationReference ?? true)
            {
                sb.AppendItem(item.LocationReference.FormKeyNullable, "LocationReference");
            }
            if ((printMask?.EnableParent?.Overall ?? true)
                && item.EnableParent is {} EnableParentItem)
            {
                EnableParentItem?.Print(sb, "EnableParent");
            }
            if (printMask?.LinkedReferences?.Overall ?? true)
            {
                sb.AppendLine("LinkedReferences =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.LinkedReferences)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.Patrol?.Overall ?? true)
                && item.Patrol is {} PatrolItem)
            {
                PatrolItem?.Print(sb, "Patrol");
            }
            if ((printMask?.Action ?? true)
                && item.Action is {} ActionItem)
            {
                sb.AppendItem(ActionItem, "Action");
            }
            if ((printMask?.HeadTrackingWeight ?? true)
                && item.HeadTrackingWeight is {} HeadTrackingWeightItem)
            {
                sb.AppendItem(HeadTrackingWeightItem, "HeadTrackingWeight");
            }
            if ((printMask?.FavorCost ?? true)
                && item.FavorCost is {} FavorCostItem)
            {
                sb.AppendItem(FavorCostItem, "FavorCost");
            }
            if (printMask?.IsOpenByDefault ?? true)
            {
                sb.AppendItem(item.IsOpenByDefault, "IsOpenByDefault");
            }
            if ((printMask?.MapMarker?.Overall ?? true)
                && item.MapMarker is {} MapMarkerItem)
            {
                MapMarkerItem?.Print(sb, "MapMarker");
            }
            if (printMask?.AttachRef ?? true)
            {
                sb.AppendItem(item.AttachRef.FormKeyNullable, "AttachRef");
            }
            if ((printMask?.DistantLodData ?? true)
                && item.DistantLodData is {} DistantLodDataItem)
            {
                sb.AppendLine($"DistantLodData => {SpanExt.ToHexString(DistantLodDataItem)}");
            }
            if ((printMask?.Placement?.Overall ?? true)
                && item.Placement is {} PlacementItem)
            {
                PlacementItem?.Print(sb, "Placement");
            }
        }
        
        public static PlacedObject_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (PlacedObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (PlacedObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (PlacedObject_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new PlacedObject_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (PlacedObject_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (PlacedObject_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IPlacedObjectGetter? lhs,
            IPlacedObjectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.VirtualMachineAdapter, rhs.VirtualMachineAdapter, out var lhsVirtualMachineAdapter, out var rhsVirtualMachineAdapter, out var isVirtualMachineAdapterEqual))
                {
                    if (!((VirtualMachineAdapterCommon)((IVirtualMachineAdapterGetter)lhsVirtualMachineAdapter).CommonInstance()!).Equals(lhsVirtualMachineAdapter, rhsVirtualMachineAdapter, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.VirtualMachineAdapter))) return false;
                }
                else if (!isVirtualMachineAdapterEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Base) ?? true))
            {
                if (!lhs.Base.Equals(rhs.Base)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.BoundHalfExtents) ?? true))
            {
                if (!lhs.BoundHalfExtents.Equals(rhs.BoundHalfExtents)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Primitive) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Primitive, rhs.Primitive, out var lhsPrimitive, out var rhsPrimitive, out var isPrimitiveEqual))
                {
                    if (!((PlacedPrimitiveCommon)((IPlacedPrimitiveGetter)lhsPrimitive).CommonInstance()!).Equals(lhsPrimitive, rhsPrimitive, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Primitive))) return false;
                }
                else if (!isPrimitiveEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XORD) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.XORD, rhs.XORD)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.OcclusionPlane) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.OcclusionPlane, rhs.OcclusionPlane, out var lhsOcclusionPlane, out var rhsOcclusionPlane, out var isOcclusionPlaneEqual))
                {
                    if (!((BoundingCommon)((IBoundingGetter)lhsOcclusionPlane).CommonInstance()!).Equals(lhsOcclusionPlane, rhsOcclusionPlane, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.OcclusionPlane))) return false;
                }
                else if (!isOcclusionPlaneEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Portals) ?? true))
            {
                if (!lhs.Portals.SequenceEqualNullable(rhs.Portals, (l, r) => ((PortalCommon)((IPortalGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Portals)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RoomPortal) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.RoomPortal, rhs.RoomPortal, out var lhsRoomPortal, out var rhsRoomPortal, out var isRoomPortalEqual))
                {
                    if (!((BoundingCommon)((IBoundingGetter)lhsRoomPortal).CommonInstance()!).Equals(lhsRoomPortal, rhsRoomPortal, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.RoomPortal))) return false;
                }
                else if (!isRoomPortalEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LightingTemplate) ?? true))
            {
                if (!lhs.LightingTemplate.Equals(rhs.LightingTemplate)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ImageSpace) ?? true))
            {
                if (!lhs.ImageSpace.Equals(rhs.ImageSpace)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LinkedRooms) ?? true))
            {
                if (!lhs.LinkedRooms.SequenceEqualNullable(rhs.LinkedRooms)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.IsMultiBoundPrimitive) ?? true))
            {
                if (lhs.IsMultiBoundPrimitive != rhs.IsMultiBoundPrimitive) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollData) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.RagdollData, rhs.RagdollData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollBipedData) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.RagdollBipedData, rhs.RagdollBipedData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Radius) ?? true))
            {
                if (!lhs.Radius.EqualsWithin(rhs.Radius)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Reflections) ?? true))
            {
                if (!lhs.Reflections.SequenceEqual(rhs.Reflections, (l, r) => ((WaterReflectionCommon)((IWaterReflectionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Reflections)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LitWater) ?? true))
            {
                if (!lhs.LitWater.SequenceEqualNullable(rhs.LitWater)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Emittance) ?? true))
            {
                if (!lhs.Emittance.Equals(rhs.Emittance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LightData) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LightData, rhs.LightData, out var lhsLightData, out var rhsLightData, out var isLightDataEqual))
                {
                    if (!((LightDataCommon)((ILightDataGetter)lhsLightData).CommonInstance()!).Equals(lhsLightData, rhsLightData, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.LightData))) return false;
                }
                else if (!isLightDataEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Alpha) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Alpha, rhs.Alpha, out var lhsAlpha, out var rhsAlpha, out var isAlphaEqual))
                {
                    if (!((AlphaCommon)((IAlphaGetter)lhsAlpha).CommonInstance()!).Equals(lhsAlpha, rhsAlpha, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Alpha))) return false;
                }
                else if (!isAlphaEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportDestination) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.TeleportDestination, rhs.TeleportDestination, out var lhsTeleportDestination, out var rhsTeleportDestination, out var isTeleportDestinationEqual))
                {
                    if (!((TeleportDestinationCommon)((ITeleportDestinationGetter)lhsTeleportDestination).CommonInstance()!).Equals(lhsTeleportDestination, rhsTeleportDestination, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination))) return false;
                }
                else if (!isTeleportDestinationEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportMessageBox) ?? true))
            {
                if (!lhs.TeleportMessageBox.Equals(rhs.TeleportMessageBox)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MultiboundReference) ?? true))
            {
                if (!lhs.MultiboundReference.Equals(rhs.MultiboundReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XWCN) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.XWCN, rhs.XWCN)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XWCS) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.XWCS, rhs.XWCS)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.WaterVelocity) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.WaterVelocity, rhs.WaterVelocity, out var lhsWaterVelocity, out var rhsWaterVelocity, out var isWaterVelocityEqual))
                {
                    if (!((WaterVelocityCommon)((IWaterVelocityGetter)lhsWaterVelocity).CommonInstance()!).Equals(lhsWaterVelocity, rhsWaterVelocity, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.WaterVelocity))) return false;
                }
                else if (!isWaterVelocityEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCVL) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.XCVL, rhs.XCVL)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCZR) ?? true))
            {
                if (!lhs.XCZR.Equals(rhs.XCZR)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCZA) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.XCZA, rhs.XCZA)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCZC) ?? true))
            {
                if (!lhs.XCZC.Equals(rhs.XCZC)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Scale) ?? true))
            {
                if (!lhs.Scale.EqualsWithin(rhs.Scale)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.SpawnContainer) ?? true))
            {
                if (!lhs.SpawnContainer.Equals(rhs.SpawnContainer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ActivateParents) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ActivateParents, rhs.ActivateParents, out var lhsActivateParents, out var rhsActivateParents, out var isActivateParentsEqual))
                {
                    if (!((ActivateParentsCommon)((IActivateParentsGetter)lhsActivateParents).CommonInstance()!).Equals(lhsActivateParents, rhsActivateParents, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.ActivateParents))) return false;
                }
                else if (!isActivateParentsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LeveledItemBaseObject) ?? true))
            {
                if (!lhs.LeveledItemBaseObject.Equals(rhs.LeveledItemBaseObject)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LevelModifier) ?? true))
            {
                if (lhs.LevelModifier != rhs.LevelModifier) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.PersistentLocation) ?? true))
            {
                if (!lhs.PersistentLocation.Equals(rhs.PersistentLocation)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.CollisionLayer) ?? true))
            {
                if (lhs.CollisionLayer != rhs.CollisionLayer) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Lock) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Lock, rhs.Lock, out var lhsLock, out var rhsLock, out var isLockEqual))
                {
                    if (!((LockDataCommon)((ILockDataGetter)lhsLock).CommonInstance()!).Equals(lhsLock, rhsLock, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock))) return false;
                }
                else if (!isLockEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EncounterZone) ?? true))
            {
                if (!lhs.EncounterZone.Equals(rhs.EncounterZone)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.NavigationDoorLink) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.NavigationDoorLink, rhs.NavigationDoorLink, out var lhsNavigationDoorLink, out var rhsNavigationDoorLink, out var isNavigationDoorLinkEqual))
                {
                    if (!((NavigationDoorLinkCommon)((INavigationDoorLinkGetter)lhsNavigationDoorLink).CommonInstance()!).Equals(lhsNavigationDoorLink, rhsNavigationDoorLink, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.NavigationDoorLink))) return false;
                }
                else if (!isNavigationDoorLinkEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LocationRefTypes) ?? true))
            {
                if (!lhs.LocationRefTypes.SequenceEqualNullable(rhs.LocationRefTypes)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.IsIgnoredBySandbox) ?? true))
            {
                if (lhs.IsIgnoredBySandbox != rhs.IsIgnoredBySandbox) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Owner) ?? true))
            {
                if (!lhs.Owner.Equals(rhs.Owner)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FactionRank) ?? true))
            {
                if (lhs.FactionRank != rhs.FactionRank) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ItemCount) ?? true))
            {
                if (lhs.ItemCount != rhs.ItemCount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Charge) ?? true))
            {
                if (!lhs.Charge.EqualsWithin(rhs.Charge)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LocationReference) ?? true))
            {
                if (!lhs.LocationReference.Equals(rhs.LocationReference)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EnableParent) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.EnableParent, rhs.EnableParent, out var lhsEnableParent, out var rhsEnableParent, out var isEnableParentEqual))
                {
                    if (!((EnableParentCommon)((IEnableParentGetter)lhsEnableParent).CommonInstance()!).Equals(lhsEnableParent, rhsEnableParent, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent))) return false;
                }
                else if (!isEnableParentEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LinkedReferences) ?? true))
            {
                if (!lhs.LinkedReferences.SequenceEqual(rhs.LinkedReferences, (l, r) => ((LinkedReferencesCommon)((ILinkedReferencesGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.LinkedReferences)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Patrol) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Patrol, rhs.Patrol, out var lhsPatrol, out var rhsPatrol, out var isPatrolEqual))
                {
                    if (!((PatrolCommon)((IPatrolGetter)lhsPatrol).CommonInstance()!).Equals(lhsPatrol, rhsPatrol, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Patrol))) return false;
                }
                else if (!isPatrolEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Action) ?? true))
            {
                if (lhs.Action != rhs.Action) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.HeadTrackingWeight) ?? true))
            {
                if (!lhs.HeadTrackingWeight.EqualsWithin(rhs.HeadTrackingWeight)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FavorCost) ?? true))
            {
                if (!lhs.FavorCost.EqualsWithin(rhs.FavorCost)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.IsOpenByDefault) ?? true))
            {
                if (lhs.IsOpenByDefault != rhs.IsOpenByDefault) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MapMarker) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.MapMarker, rhs.MapMarker, out var lhsMapMarker, out var rhsMapMarker, out var isMapMarkerEqual))
                {
                    if (!((MapMarkerCommon)((IMapMarkerGetter)lhsMapMarker).CommonInstance()!).Equals(lhsMapMarker, rhsMapMarker, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker))) return false;
                }
                else if (!isMapMarkerEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.AttachRef) ?? true))
            {
                if (!lhs.AttachRef.Equals(rhs.AttachRef)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DistantLodData) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.DistantLodData, rhs.DistantLodData)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Placement) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Placement, rhs.Placement, out var lhsPlacement, out var rhsPlacement, out var isPlacementEqual))
                {
                    if (!((PlacementCommon)((IPlacementGetter)lhsPlacement).CommonInstance()!).Equals(lhsPlacement, rhsPlacement, equalsMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Placement))) return false;
                }
                else if (!isPlacementEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedObjectGetter?)lhs,
                rhs: rhs as IPlacedObjectGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IPlacedObjectGetter?)lhs,
                rhs: rhs as IPlacedObjectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IPlacedObjectGetter item)
        {
            var hash = new HashCode();
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapteritem)
            {
                hash.Add(VirtualMachineAdapteritem);
            }
            hash.Add(item.Base);
            if (item.BoundHalfExtents is {} BoundHalfExtentsitem)
            {
                hash.Add(BoundHalfExtentsitem);
            }
            if (item.Primitive is {} Primitiveitem)
            {
                hash.Add(Primitiveitem);
            }
            if (item.XORD is {} XORDItem)
            {
                hash.Add(XORDItem);
            }
            if (item.OcclusionPlane is {} OcclusionPlaneitem)
            {
                hash.Add(OcclusionPlaneitem);
            }
            hash.Add(item.Portals);
            if (item.RoomPortal is {} RoomPortalitem)
            {
                hash.Add(RoomPortalitem);
            }
            hash.Add(item.Unknown);
            hash.Add(item.LightingTemplate);
            hash.Add(item.ImageSpace);
            hash.Add(item.LinkedRooms);
            hash.Add(item.IsMultiBoundPrimitive);
            if (item.RagdollData is {} RagdollDataItem)
            {
                hash.Add(RagdollDataItem);
            }
            if (item.RagdollBipedData is {} RagdollBipedDataItem)
            {
                hash.Add(RagdollBipedDataItem);
            }
            if (item.Radius is {} Radiusitem)
            {
                hash.Add(Radiusitem);
            }
            hash.Add(item.Reflections);
            hash.Add(item.LitWater);
            hash.Add(item.Emittance);
            if (item.LightData is {} LightDataitem)
            {
                hash.Add(LightDataitem);
            }
            if (item.Alpha is {} Alphaitem)
            {
                hash.Add(Alphaitem);
            }
            if (item.TeleportDestination is {} TeleportDestinationitem)
            {
                hash.Add(TeleportDestinationitem);
            }
            hash.Add(item.TeleportMessageBox);
            hash.Add(item.MultiboundReference);
            if (item.XWCN is {} XWCNItem)
            {
                hash.Add(XWCNItem);
            }
            if (item.XWCS is {} XWCSItem)
            {
                hash.Add(XWCSItem);
            }
            if (item.WaterVelocity is {} WaterVelocityitem)
            {
                hash.Add(WaterVelocityitem);
            }
            if (item.XCVL is {} XCVLItem)
            {
                hash.Add(XCVLItem);
            }
            hash.Add(item.XCZR);
            if (item.XCZA is {} XCZAItem)
            {
                hash.Add(XCZAItem);
            }
            hash.Add(item.XCZC);
            if (item.Scale is {} Scaleitem)
            {
                hash.Add(Scaleitem);
            }
            hash.Add(item.SpawnContainer);
            if (item.ActivateParents is {} ActivateParentsitem)
            {
                hash.Add(ActivateParentsitem);
            }
            hash.Add(item.LeveledItemBaseObject);
            if (item.LevelModifier is {} LevelModifieritem)
            {
                hash.Add(LevelModifieritem);
            }
            hash.Add(item.PersistentLocation);
            if (item.CollisionLayer is {} CollisionLayeritem)
            {
                hash.Add(CollisionLayeritem);
            }
            if (item.Lock is {} Lockitem)
            {
                hash.Add(Lockitem);
            }
            hash.Add(item.EncounterZone);
            if (item.NavigationDoorLink is {} NavigationDoorLinkitem)
            {
                hash.Add(NavigationDoorLinkitem);
            }
            hash.Add(item.LocationRefTypes);
            hash.Add(item.IsIgnoredBySandbox);
            hash.Add(item.Owner);
            if (item.FactionRank is {} FactionRankitem)
            {
                hash.Add(FactionRankitem);
            }
            if (item.ItemCount is {} ItemCountitem)
            {
                hash.Add(ItemCountitem);
            }
            if (item.Charge is {} Chargeitem)
            {
                hash.Add(Chargeitem);
            }
            hash.Add(item.LocationReference);
            if (item.EnableParent is {} EnableParentitem)
            {
                hash.Add(EnableParentitem);
            }
            hash.Add(item.LinkedReferences);
            if (item.Patrol is {} Patrolitem)
            {
                hash.Add(Patrolitem);
            }
            if (item.Action is {} Actionitem)
            {
                hash.Add(Actionitem);
            }
            if (item.HeadTrackingWeight is {} HeadTrackingWeightitem)
            {
                hash.Add(HeadTrackingWeightitem);
            }
            if (item.FavorCost is {} FavorCostitem)
            {
                hash.Add(FavorCostitem);
            }
            hash.Add(item.IsOpenByDefault);
            if (item.MapMarker is {} MapMarkeritem)
            {
                hash.Add(MapMarkeritem);
            }
            hash.Add(item.AttachRef);
            if (item.DistantLodData is {} DistantLodDataItem)
            {
                hash.Add(DistantLodDataItem);
            }
            if (item.Placement is {} Placementitem)
            {
                hash.Add(Placementitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedObjectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IPlacedObjectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return PlacedObject.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IPlacedObjectGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is IFormLinkContainerGetter VirtualMachineAdapterlinkCont)
            {
                foreach (var item in VirtualMachineAdapterlinkCont.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.Base, out var BaseInfo))
            {
                yield return BaseInfo;
            }
            if (obj.Portals is {} PortalsItem)
            {
                foreach (var item in PortalsItem.SelectMany(f => f.EnumerateFormLinks()))
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.LightingTemplate, out var LightingTemplateInfo))
            {
                yield return LightingTemplateInfo;
            }
            if (FormLinkInformation.TryFactory(obj.ImageSpace, out var ImageSpaceInfo))
            {
                yield return ImageSpaceInfo;
            }
            foreach (var item in obj.LinkedRooms)
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.Reflections.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            foreach (var item in obj.LitWater)
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (FormLinkInformation.TryFactory(obj.Emittance, out var EmittanceInfo))
            {
                yield return EmittanceInfo;
            }
            if (obj.TeleportDestination is {} TeleportDestinationItems)
            {
                foreach (var item in TeleportDestinationItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.TeleportMessageBox, out var TeleportMessageBoxInfo))
            {
                yield return TeleportMessageBoxInfo;
            }
            if (FormLinkInformation.TryFactory(obj.MultiboundReference, out var MultiboundReferenceInfo))
            {
                yield return MultiboundReferenceInfo;
            }
            if (FormLinkInformation.TryFactory(obj.XCZR, out var XCZRInfo))
            {
                yield return XCZRInfo;
            }
            if (FormLinkInformation.TryFactory(obj.XCZC, out var XCZCInfo))
            {
                yield return XCZCInfo;
            }
            if (FormLinkInformation.TryFactory(obj.SpawnContainer, out var SpawnContainerInfo))
            {
                yield return SpawnContainerInfo;
            }
            if (obj.ActivateParents is {} ActivateParentsItems)
            {
                foreach (var item in ActivateParentsItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.LeveledItemBaseObject, out var LeveledItemBaseObjectInfo))
            {
                yield return LeveledItemBaseObjectInfo;
            }
            if (FormLinkInformation.TryFactory(obj.PersistentLocation, out var PersistentLocationInfo))
            {
                yield return PersistentLocationInfo;
            }
            if (obj.Lock is {} LockItems)
            {
                foreach (var item in LockItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.EncounterZone, out var EncounterZoneInfo))
            {
                yield return EncounterZoneInfo;
            }
            if (obj.NavigationDoorLink is {} NavigationDoorLinkItems)
            {
                foreach (var item in NavigationDoorLinkItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (obj.LocationRefTypes is {} LocationRefTypesItem)
            {
                foreach (var item in LocationRefTypesItem)
                {
                    yield return FormLinkInformation.Factory(item);
                }
            }
            if (FormLinkInformation.TryFactory(obj.Owner, out var OwnerInfo))
            {
                yield return OwnerInfo;
            }
            if (FormLinkInformation.TryFactory(obj.LocationReference, out var LocationReferenceInfo))
            {
                yield return LocationReferenceInfo;
            }
            if (obj.EnableParent is {} EnableParentItems)
            {
                foreach (var item in EnableParentItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            foreach (var item in obj.LinkedReferences.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            if (obj.Patrol is {} PatrolItems)
            {
                foreach (var item in PatrolItems.EnumerateFormLinks())
                {
                    yield return item;
                }
            }
            if (FormLinkInformation.TryFactory(obj.AttachRef, out var AttachRefInfo))
            {
                yield return AttachRefInfo;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(IPlacedObjectGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (obj.VirtualMachineAdapter is {} VirtualMachineAdapterItems)
            {
                foreach (var item in VirtualMachineAdapterItems.EnumerateAssetLinks(queryCategories: queryCategories, linkCache: linkCache, assetType: assetType))
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public PlacedObject Duplicate(
            IPlacedObjectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new PlacedObject(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedObjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IPlacedObjectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class PlacedObjectSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly PlacedObjectSetterTranslationCommon Instance = new PlacedObjectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IPlacedObjectInternal item,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IPlacedObject item,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.VirtualMachineAdapter) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.VirtualMachineAdapter);
                try
                {
                    if(rhs.VirtualMachineAdapter is {} rhsVirtualMachineAdapter)
                    {
                        item.VirtualMachineAdapter = rhsVirtualMachineAdapter.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.VirtualMachineAdapter));
                    }
                    else
                    {
                        item.VirtualMachineAdapter = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Base) ?? true))
            {
                item.Base.SetTo(rhs.Base.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.BoundHalfExtents) ?? true))
            {
                item.BoundHalfExtents = rhs.BoundHalfExtents;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Primitive) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Primitive);
                try
                {
                    if(rhs.Primitive is {} rhsPrimitive)
                    {
                        item.Primitive = rhsPrimitive.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Primitive));
                    }
                    else
                    {
                        item.Primitive = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XORD) ?? true))
            {
                if(rhs.XORD is {} XORDrhs)
                {
                    item.XORD = XORDrhs.ToArray();
                }
                else
                {
                    item.XORD = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.OcclusionPlane) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.OcclusionPlane);
                try
                {
                    if(rhs.OcclusionPlane is {} rhsOcclusionPlane)
                    {
                        item.OcclusionPlane = rhsOcclusionPlane.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.OcclusionPlane));
                    }
                    else
                    {
                        item.OcclusionPlane = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Portals) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Portals);
                try
                {
                    if ((rhs.Portals != null))
                    {
                        item.Portals = 
                            rhs.Portals
                            .Select(r =>
                            {
                                return r.DeepCopy(
                                    errorMask: errorMask,
                                    default(TranslationCrystal));
                            })
                            .ToExtendedList<Portal>();
                    }
                    else
                    {
                        item.Portals = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RoomPortal) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.RoomPortal);
                try
                {
                    if(rhs.RoomPortal is {} rhsRoomPortal)
                    {
                        item.RoomPortal = rhsRoomPortal.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.RoomPortal));
                    }
                    else
                    {
                        item.RoomPortal = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LightingTemplate) ?? true))
            {
                item.LightingTemplate.SetTo(rhs.LightingTemplate.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ImageSpace) ?? true))
            {
                item.ImageSpace.SetTo(rhs.ImageSpace.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LinkedRooms) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LinkedRooms);
                try
                {
                    item.LinkedRooms.SetTo(
                        rhs.LinkedRooms
                            .Select(b => (IFormLinkGetter<IPlacedObjectGetter>)new FormLink<IPlacedObjectGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.IsMultiBoundPrimitive) ?? true))
            {
                item.IsMultiBoundPrimitive = rhs.IsMultiBoundPrimitive;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollData) ?? true))
            {
                if(rhs.RagdollData is {} RagdollDatarhs)
                {
                    item.RagdollData = RagdollDatarhs.ToArray();
                }
                else
                {
                    item.RagdollData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.RagdollBipedData) ?? true))
            {
                if(rhs.RagdollBipedData is {} RagdollBipedDatarhs)
                {
                    item.RagdollBipedData = RagdollBipedDatarhs.ToArray();
                }
                else
                {
                    item.RagdollBipedData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Radius) ?? true))
            {
                item.Radius = rhs.Radius;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Reflections) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Reflections);
                try
                {
                    item.Reflections.SetTo(
                        rhs.Reflections
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LitWater) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LitWater);
                try
                {
                    item.LitWater.SetTo(
                        rhs.LitWater
                            .Select(b => (IFormLinkGetter<IPlacedObjectGetter>)new FormLink<IPlacedObjectGetter>(b.FormKey)));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Emittance) ?? true))
            {
                item.Emittance.SetTo(rhs.Emittance.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LightData) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LightData);
                try
                {
                    if(rhs.LightData is {} rhsLightData)
                    {
                        item.LightData = rhsLightData.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.LightData));
                    }
                    else
                    {
                        item.LightData = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Alpha) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Alpha);
                try
                {
                    if(rhs.Alpha is {} rhsAlpha)
                    {
                        item.Alpha = rhsAlpha.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Alpha));
                    }
                    else
                    {
                        item.Alpha = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportDestination) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.TeleportDestination);
                try
                {
                    if(rhs.TeleportDestination is {} rhsTeleportDestination)
                    {
                        item.TeleportDestination = rhsTeleportDestination.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.TeleportDestination));
                    }
                    else
                    {
                        item.TeleportDestination = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.TeleportMessageBox) ?? true))
            {
                item.TeleportMessageBox.SetTo(rhs.TeleportMessageBox.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MultiboundReference) ?? true))
            {
                item.MultiboundReference.SetTo(rhs.MultiboundReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XWCN) ?? true))
            {
                if(rhs.XWCN is {} XWCNrhs)
                {
                    item.XWCN = XWCNrhs.ToArray();
                }
                else
                {
                    item.XWCN = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XWCS) ?? true))
            {
                if(rhs.XWCS is {} XWCSrhs)
                {
                    item.XWCS = XWCSrhs.ToArray();
                }
                else
                {
                    item.XWCS = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.WaterVelocity) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.WaterVelocity);
                try
                {
                    if(rhs.WaterVelocity is {} rhsWaterVelocity)
                    {
                        item.WaterVelocity = rhsWaterVelocity.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.WaterVelocity));
                    }
                    else
                    {
                        item.WaterVelocity = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCVL) ?? true))
            {
                if(rhs.XCVL is {} XCVLrhs)
                {
                    item.XCVL = XCVLrhs.ToArray();
                }
                else
                {
                    item.XCVL = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCZR) ?? true))
            {
                item.XCZR.SetTo(rhs.XCZR.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCZA) ?? true))
            {
                if(rhs.XCZA is {} XCZArhs)
                {
                    item.XCZA = XCZArhs.ToArray();
                }
                else
                {
                    item.XCZA = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.XCZC) ?? true))
            {
                item.XCZC.SetTo(rhs.XCZC.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Scale) ?? true))
            {
                item.Scale = rhs.Scale;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.SpawnContainer) ?? true))
            {
                item.SpawnContainer.SetTo(rhs.SpawnContainer.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ActivateParents) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.ActivateParents);
                try
                {
                    if(rhs.ActivateParents is {} rhsActivateParents)
                    {
                        item.ActivateParents = rhsActivateParents.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.ActivateParents));
                    }
                    else
                    {
                        item.ActivateParents = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LeveledItemBaseObject) ?? true))
            {
                item.LeveledItemBaseObject.SetTo(rhs.LeveledItemBaseObject.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LevelModifier) ?? true))
            {
                item.LevelModifier = rhs.LevelModifier;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.PersistentLocation) ?? true))
            {
                item.PersistentLocation.SetTo(rhs.PersistentLocation.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.CollisionLayer) ?? true))
            {
                item.CollisionLayer = rhs.CollisionLayer;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Lock) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Lock);
                try
                {
                    if(rhs.Lock is {} rhsLock)
                    {
                        item.Lock = rhsLock.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Lock));
                    }
                    else
                    {
                        item.Lock = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EncounterZone) ?? true))
            {
                item.EncounterZone.SetTo(rhs.EncounterZone.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.NavigationDoorLink) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.NavigationDoorLink);
                try
                {
                    if(rhs.NavigationDoorLink is {} rhsNavigationDoorLink)
                    {
                        item.NavigationDoorLink = rhsNavigationDoorLink.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.NavigationDoorLink));
                    }
                    else
                    {
                        item.NavigationDoorLink = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LocationRefTypes) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LocationRefTypes);
                try
                {
                    if ((rhs.LocationRefTypes != null))
                    {
                        item.LocationRefTypes = 
                            rhs.LocationRefTypes
                                .Select(b => (IFormLinkGetter<ILocationReferenceTypeGetter>)new FormLink<ILocationReferenceTypeGetter>(b.FormKey))
                            .ToExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    }
                    else
                    {
                        item.LocationRefTypes = null;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.IsIgnoredBySandbox) ?? true))
            {
                item.IsIgnoredBySandbox = rhs.IsIgnoredBySandbox;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Owner) ?? true))
            {
                item.Owner.SetTo(rhs.Owner.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FactionRank) ?? true))
            {
                item.FactionRank = rhs.FactionRank;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.ItemCount) ?? true))
            {
                item.ItemCount = rhs.ItemCount;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Charge) ?? true))
            {
                item.Charge = rhs.Charge;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LocationReference) ?? true))
            {
                item.LocationReference.SetTo(rhs.LocationReference.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.EnableParent) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.EnableParent);
                try
                {
                    if(rhs.EnableParent is {} rhsEnableParent)
                    {
                        item.EnableParent = rhsEnableParent.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.EnableParent));
                    }
                    else
                    {
                        item.EnableParent = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.LinkedReferences) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.LinkedReferences);
                try
                {
                    item.LinkedReferences.SetTo(
                        rhs.LinkedReferences
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Patrol) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Patrol);
                try
                {
                    if(rhs.Patrol is {} rhsPatrol)
                    {
                        item.Patrol = rhsPatrol.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Patrol));
                    }
                    else
                    {
                        item.Patrol = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Action) ?? true))
            {
                item.Action = rhs.Action;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.HeadTrackingWeight) ?? true))
            {
                item.HeadTrackingWeight = rhs.HeadTrackingWeight;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.FavorCost) ?? true))
            {
                item.FavorCost = rhs.FavorCost;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.IsOpenByDefault) ?? true))
            {
                item.IsOpenByDefault = rhs.IsOpenByDefault;
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.MapMarker) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.MapMarker);
                try
                {
                    if(rhs.MapMarker is {} rhsMapMarker)
                    {
                        item.MapMarker = rhsMapMarker.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.MapMarker));
                    }
                    else
                    {
                        item.MapMarker = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.AttachRef) ?? true))
            {
                item.AttachRef.SetTo(rhs.AttachRef.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.DistantLodData) ?? true))
            {
                if(rhs.DistantLodData is {} DistantLodDatarhs)
                {
                    item.DistantLodData = DistantLodDatarhs.ToArray();
                }
                else
                {
                    item.DistantLodData = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)PlacedObject_FieldIndex.Placement) ?? true))
            {
                errorMask?.PushIndex((int)PlacedObject_FieldIndex.Placement);
                try
                {
                    if(rhs.Placement is {} rhsPlacement)
                    {
                        item.Placement = rhsPlacement.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)PlacedObject_FieldIndex.Placement));
                    }
                    else
                    {
                        item.Placement = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IPlacedObject item,
            IPlacedObjectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObjectInternal)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObject)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObjectInternal)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IPlacedObject)item,
                rhs: (IPlacedObjectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            PlacedObject.TranslationMask? copyMask = null)
        {
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            out PlacedObject.ErrorMask errorMask,
            PlacedObject.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = PlacedObject.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public PlacedObject DeepCopy(
            IPlacedObjectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            PlacedObject ret = (PlacedObject)((PlacedObjectCommon)((IPlacedObjectGetter)item).CommonInstance()!).GetNew();
            ((PlacedObjectSetterTranslationCommon)((IPlacedObjectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class PlacedObject
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return PlacedObjectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedObjectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class PlacedObjectBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly PlacedObjectBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IPlacedObjectGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IPlacedObjectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            if (item.VirtualMachineAdapter is {} VirtualMachineAdapterItem)
            {
                ((VirtualMachineAdapterBinaryWriteTranslation)((IBinaryItem)VirtualMachineAdapterItem).BinaryWriteTranslator).Write(
                    item: VirtualMachineAdapterItem,
                    writer: writer,
                    translationParams: translationParams.With(RecordTypes.XXXX));
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Base,
                header: translationParams.ConvertToCustom(RecordTypes.NAME));
            P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.BoundHalfExtents,
                header: translationParams.ConvertToCustom(RecordTypes.XMBO));
            if (item.Primitive is {} PrimitiveItem)
            {
                ((PlacedPrimitiveBinaryWriteTranslation)((IBinaryItem)PrimitiveItem).BinaryWriteTranslator).Write(
                    item: PrimitiveItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XORD,
                header: translationParams.ConvertToCustom(RecordTypes.XORD));
            if (item.OcclusionPlane is {} OcclusionPlaneItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.XOCP))
                {
                    ((BoundingBinaryWriteTranslation)((IBinaryItem)OcclusionPlaneItem).BinaryWriteTranslator).Write(
                        item: OcclusionPlaneItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IPortalGetter>.Instance.Write(
                writer: writer,
                items: item.Portals,
                recordType: translationParams.ConvertToCustom(RecordTypes.XPOD),
                transl: (MutagenWriter subWriter, IPortalGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((PortalBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.RoomPortal is {} RoomPortalItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.XPTL))
                {
                    ((BoundingBinaryWriteTranslation)((IBinaryItem)RoomPortalItem).BinaryWriteTranslator).Write(
                        item: RoomPortalItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
            PlacedObjectBinaryWriteTranslation.WriteBinaryBoundData(
                writer: writer,
                item: item);
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.IsMultiBoundPrimitive,
                header: translationParams.ConvertToCustom(RecordTypes.XMBP));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RagdollData,
                header: translationParams.ConvertToCustom(RecordTypes.XRGD));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.RagdollBipedData,
                header: translationParams.ConvertToCustom(RecordTypes.XRGB));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Radius,
                header: translationParams.ConvertToCustom(RecordTypes.XRDS));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IWaterReflectionGetter>.Instance.Write(
                writer: writer,
                items: item.Reflections,
                transl: (MutagenWriter subWriter, IWaterReflectionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((WaterReflectionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedObjectGetter>>.Instance.Write(
                writer: writer,
                items: item.LitWater,
                transl: (MutagenWriter subWriter, IFormLinkGetter<IPlacedObjectGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem,
                        header: translationParams.ConvertToCustom(RecordTypes.XLTW));
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Emittance,
                header: translationParams.ConvertToCustom(RecordTypes.XEMI));
            if (item.LightData is {} LightDataItem)
            {
                ((LightDataBinaryWriteTranslation)((IBinaryItem)LightDataItem).BinaryWriteTranslator).Write(
                    item: LightDataItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Alpha is {} AlphaItem)
            {
                ((AlphaBinaryWriteTranslation)((IBinaryItem)AlphaItem).BinaryWriteTranslator).Write(
                    item: AlphaItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.TeleportDestination is {} TeleportDestinationItem)
            {
                ((TeleportDestinationBinaryWriteTranslation)((IBinaryItem)TeleportDestinationItem).BinaryWriteTranslator).Write(
                    item: TeleportDestinationItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.TeleportMessageBox,
                header: translationParams.ConvertToCustom(RecordTypes.XTNM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.MultiboundReference,
                header: translationParams.ConvertToCustom(RecordTypes.XMBR));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XWCN,
                header: translationParams.ConvertToCustom(RecordTypes.XWCN));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XWCS,
                header: translationParams.ConvertToCustom(RecordTypes.XWCS));
            if (item.WaterVelocity is {} WaterVelocityItem)
            {
                ((WaterVelocityBinaryWriteTranslation)((IBinaryItem)WaterVelocityItem).BinaryWriteTranslator).Write(
                    item: WaterVelocityItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XCVL,
                header: translationParams.ConvertToCustom(RecordTypes.XCVL));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.XCZR,
                header: translationParams.ConvertToCustom(RecordTypes.XCZR));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.XCZA,
                header: translationParams.ConvertToCustom(RecordTypes.XCZA));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.XCZC,
                header: translationParams.ConvertToCustom(RecordTypes.XCZC));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Scale,
                header: translationParams.ConvertToCustom(RecordTypes.XSCL));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.SpawnContainer,
                header: translationParams.ConvertToCustom(RecordTypes.XSPC));
            if (item.ActivateParents is {} ActivateParentsItem)
            {
                ((ActivateParentsBinaryWriteTranslation)((IBinaryItem)ActivateParentsItem).BinaryWriteTranslator).Write(
                    item: ActivateParentsItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LeveledItemBaseObject,
                header: translationParams.ConvertToCustom(RecordTypes.XLIB));
            EnumBinaryTranslation<Level, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.LevelModifier,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.XLCM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PersistentLocation,
                header: translationParams.ConvertToCustom(RecordTypes.XLCN));
            UInt32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.CollisionLayer,
                header: translationParams.ConvertToCustom(RecordTypes.XTRI));
            if (item.Lock is {} LockItem)
            {
                ((LockDataBinaryWriteTranslation)((IBinaryItem)LockItem).BinaryWriteTranslator).Write(
                    item: LockItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EncounterZone,
                header: translationParams.ConvertToCustom(RecordTypes.XEZN));
            if (item.NavigationDoorLink is {} NavigationDoorLinkItem)
            {
                ((NavigationDoorLinkBinaryWriteTranslation)((IBinaryItem)NavigationDoorLinkItem).BinaryWriteTranslator).Write(
                    item: NavigationDoorLinkItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Write(
                writer: writer,
                items: item.LocationRefTypes,
                recordType: translationParams.ConvertToCustom(RecordTypes.XLRT),
                transl: (MutagenWriter subWriter, IFormLinkGetter<ILocationReferenceTypeGetter> subItem, TypedWriteParams conv) =>
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem);
                });
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.IsIgnoredBySandbox,
                header: translationParams.ConvertToCustom(RecordTypes.XIS2));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Owner,
                header: translationParams.ConvertToCustom(RecordTypes.XOWN));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FactionRank,
                header: translationParams.ConvertToCustom(RecordTypes.XRNK));
            Int32BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.ItemCount,
                header: translationParams.ConvertToCustom(RecordTypes.XCNT));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Charge,
                header: translationParams.ConvertToCustom(RecordTypes.XCHG));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.LocationReference,
                header: translationParams.ConvertToCustom(RecordTypes.XLRL));
            if (item.EnableParent is {} EnableParentItem)
            {
                ((EnableParentBinaryWriteTranslation)((IBinaryItem)EnableParentItem).BinaryWriteTranslator).Write(
                    item: EnableParentItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ILinkedReferencesGetter>.Instance.Write(
                writer: writer,
                items: item.LinkedReferences,
                transl: (MutagenWriter subWriter, ILinkedReferencesGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((LinkedReferencesBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.Patrol is {} PatrolItem)
            {
                ((PatrolBinaryWriteTranslation)((IBinaryItem)PatrolItem).BinaryWriteTranslator).Write(
                    item: PatrolItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            EnumBinaryTranslation<PlacedObject.ActionFlag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Action,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.XACT));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.HeadTrackingWeight,
                header: translationParams.ConvertToCustom(RecordTypes.XHTW));
            FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.FavorCost,
                header: translationParams.ConvertToCustom(RecordTypes.XFVC));
            BooleanBinaryTranslation<MutagenFrame>.Instance.WriteAsMarker(
                writer: writer,
                item: item.IsOpenByDefault,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            if (item.MapMarker is {} MapMarkerItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.XMRK)) { }
                ((MapMarkerBinaryWriteTranslation)((IBinaryItem)MapMarkerItem).BinaryWriteTranslator).Write(
                    item: MapMarkerItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AttachRef,
                header: translationParams.ConvertToCustom(RecordTypes.XATR));
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.DistantLodData,
                header: translationParams.ConvertToCustom(RecordTypes.XLOD));
            if (item.Placement is {} PlacementItem)
            {
                ((PlacementBinaryWriteTranslation)((IBinaryItem)PlacementItem).BinaryWriteTranslator).Write(
                    item: PlacementItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public static partial void WriteBinaryBoundDataCustom(
            MutagenWriter writer,
            IPlacedObjectGetter item);

        public static void WriteBinaryBoundData(
            MutagenWriter writer,
            IPlacedObjectGetter item)
        {
            WriteBinaryBoundDataCustom(
                writer: writer,
                item: item);
        }

        public void Write(
            MutagenWriter writer,
            IPlacedObjectGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.REFR,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IPlacedObjectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class PlacedObjectBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly PlacedObjectBinaryCreateTranslation Instance = new PlacedObjectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.REFR;
        public static void FillBinaryStructs(
            IPlacedObjectInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IPlacedObjectInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    item.VirtualMachineAdapter = Mutagen.Bethesda.Skyrim.VirtualMachineAdapter.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.With(lastParsed.LengthOverride).DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Base.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.Base;
                }
                case RecordTypeInts.XMBO:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BoundHalfExtents = P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.BoundHalfExtents;
                }
                case RecordTypeInts.XPRM:
                {
                    item.Primitive = Mutagen.Bethesda.Skyrim.PlacedPrimitive.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.Primitive;
                }
                case RecordTypeInts.XORD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XORD = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XORD;
                }
                case RecordTypeInts.XOCP:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.OcclusionPlane = Mutagen.Bethesda.Skyrim.Bounding.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.OcclusionPlane;
                }
                case RecordTypeInts.XPOD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Portals = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Portal>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: Portal.TryCreateFromBinary)
                        .CastExtendedList<Portal>();
                    return (int)PlacedObject_FieldIndex.Portals;
                }
                case RecordTypeInts.XPTL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.RoomPortal = Mutagen.Bethesda.Skyrim.Bounding.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.RoomPortal;
                }
                case RecordTypeInts.XRMR:
                {
                    return PlacedObjectBinaryCreateTranslation.FillBinaryBoundDataCustom(
                        frame: frame.SpawnWithLength(frame.MetaData.Constants.SubConstants.HeaderLength + contentLength),
                        item: item,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.XMBP:
                {
                    item.IsMultiBoundPrimitive = true;
                    return (int)PlacedObject_FieldIndex.IsMultiBoundPrimitive;
                }
                case RecordTypeInts.XRGD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XRGB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.RagdollBipedData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.RagdollBipedData;
                }
                case RecordTypeInts.XRDS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Radius = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.Radius;
                }
                case RecordTypeInts.XPWR:
                {
                    item.Reflections.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<WaterReflection>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: WaterReflection_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: WaterReflection.TryCreateFromBinary));
                    return (int)PlacedObject_FieldIndex.Reflections;
                }
                case RecordTypeInts.XLTW:
                {
                    item.LitWater.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<IPlacedObjectGetter>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.XLTW),
                            transl: FormLinkBinaryTranslation.Instance.Parse));
                    return (int)PlacedObject_FieldIndex.LitWater;
                }
                case RecordTypeInts.XEMI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Emittance.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.Emittance;
                }
                case RecordTypeInts.XLIG:
                {
                    item.LightData = Mutagen.Bethesda.Skyrim.LightData.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.LightData;
                }
                case RecordTypeInts.XALP:
                {
                    item.Alpha = Mutagen.Bethesda.Skyrim.Alpha.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.Alpha;
                }
                case RecordTypeInts.XTEL:
                {
                    item.TeleportDestination = Mutagen.Bethesda.Skyrim.TeleportDestination.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.TeleportDestination;
                }
                case RecordTypeInts.XTNM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.TeleportMessageBox.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.TeleportMessageBox;
                }
                case RecordTypeInts.XMBR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MultiboundReference.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.MultiboundReference;
                }
                case RecordTypeInts.XWCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XWCN = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XWCN;
                }
                case RecordTypeInts.XWCS:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XWCS = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XWCS;
                }
                case RecordTypeInts.XWCU:
                {
                    item.WaterVelocity = Mutagen.Bethesda.Skyrim.WaterVelocity.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.WaterVelocity;
                }
                case RecordTypeInts.XCVL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XCVL = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XCVL;
                }
                case RecordTypeInts.XCZR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XCZR.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.XCZR;
                }
                case RecordTypeInts.XCZA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XCZA = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.XCZA;
                }
                case RecordTypeInts.XCZC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.XCZC.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.XCZC;
                }
                case RecordTypeInts.XSCL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Scale = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.Scale;
                }
                case RecordTypeInts.XSPC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.SpawnContainer.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.SpawnContainer;
                }
                case RecordTypeInts.XAPD:
                {
                    item.ActivateParents = Mutagen.Bethesda.Skyrim.ActivateParents.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XLIB:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LeveledItemBaseObject.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.LeveledItemBaseObject;
                }
                case RecordTypeInts.XLCM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LevelModifier = EnumBinaryTranslation<Level, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)PlacedObject_FieldIndex.LevelModifier;
                }
                case RecordTypeInts.XLCN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PersistentLocation.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.PersistentLocation;
                }
                case RecordTypeInts.XTRI:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.CollisionLayer = frame.ReadUInt32();
                    return (int)PlacedObject_FieldIndex.CollisionLayer;
                }
                case RecordTypeInts.XLOC:
                {
                    item.Lock = Mutagen.Bethesda.Skyrim.LockData.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.Lock;
                }
                case RecordTypeInts.XEZN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EncounterZone.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XNDP:
                {
                    item.NavigationDoorLink = Mutagen.Bethesda.Skyrim.NavigationDoorLink.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.NavigationDoorLink;
                }
                case RecordTypeInts.XLRT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationRefTypes = 
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IFormLinkGetter<ILocationReferenceTypeGetter>>.Instance.Parse(
                            reader: frame.SpawnWithLength(contentLength),
                            transl: FormLinkBinaryTranslation.Instance.Parse)
                        .CastExtendedList<IFormLinkGetter<ILocationReferenceTypeGetter>>();
                    return (int)PlacedObject_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XIS2:
                {
                    item.IsIgnoredBySandbox = true;
                    return (int)PlacedObject_FieldIndex.IsIgnoredBySandbox;
                }
                case RecordTypeInts.XOWN:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Owner.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FactionRank = frame.ReadInt32();
                    return (int)PlacedObject_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XCNT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ItemCount = frame.ReadInt32();
                    return (int)PlacedObject_FieldIndex.ItemCount;
                }
                case RecordTypeInts.XCHG:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Charge = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.Charge;
                }
                case RecordTypeInts.XLRL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.LocationReference.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XESP:
                {
                    item.EnableParent = Mutagen.Bethesda.Skyrim.EnableParent.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XLKR:
                {
                    item.LinkedReferences.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<LinkedReferences>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: LinkedReferences_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: LinkedReferences.TryCreateFromBinary));
                    return (int)PlacedObject_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XPRD:
                {
                    item.Patrol = Mutagen.Bethesda.Skyrim.Patrol.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.Patrol;
                }
                case RecordTypeInts.XACT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Action = EnumBinaryTranslation<PlacedObject.ActionFlag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)PlacedObject_FieldIndex.Action;
                }
                case RecordTypeInts.XHTW:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.HeadTrackingWeight = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XFVC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FavorCost = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.FavorCost;
                }
                case RecordTypeInts.ONAM:
                {
                    item.IsOpenByDefault = true;
                    return (int)PlacedObject_FieldIndex.IsOpenByDefault;
                }
                case RecordTypeInts.XMRK:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength + contentLength; // Skip marker
                    item.MapMarker = Mutagen.Bethesda.Skyrim.MapMarker.CreateFromBinary(
                        frame: frame,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.MapMarker;
                }
                case RecordTypeInts.XATR:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AttachRef.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)PlacedObject_FieldIndex.AttachRef;
                }
                case RecordTypeInts.XLOD:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.DistantLodData = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)PlacedObject_FieldIndex.DistantLodData;
                }
                case RecordTypeInts.DATA:
                {
                    item.Placement = Mutagen.Bethesda.Skyrim.Placement.CreateFromBinary(frame: frame);
                    return (int)PlacedObject_FieldIndex.Placement;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = frame.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

        public static partial ParseResult FillBinaryBoundDataCustom(
            MutagenFrame frame,
            IPlacedObjectInternal item,
            PreviousParse lastParsed);

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class PlacedObjectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class PlacedObjectBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IPlacedObjectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => PlacedObject_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => PlacedObject_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => PlacedObjectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => PlacedObjectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => PlacedObjectCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => PlacedObjectCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => PlacedObjectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((PlacedObjectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IPlacedObject);


        #region VirtualMachineAdapter
        private int? _VirtualMachineAdapterLengthOverride;
        private RangeInt32? _VirtualMachineAdapterLocation;
        public IVirtualMachineAdapterGetter? VirtualMachineAdapter => _VirtualMachineAdapterLocation.HasValue ? VirtualMachineAdapterBinaryOverlay.VirtualMachineAdapterFactory(_recordData.Slice(_VirtualMachineAdapterLocation!.Value.Min), _package, TypedParseParams.FromLengthOverride(_VirtualMachineAdapterLengthOverride)) : default;
        IAVirtualMachineAdapterGetter? IHaveVirtualMachineAdapterGetter.VirtualMachineAdapter => this.VirtualMachineAdapter;
        #endregion
        #region Base
        private int? _BaseLocation;
        public IFormLinkNullableGetter<IPlaceableObjectGetter> Base => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlaceableObjectGetter>(_package, _recordData, _BaseLocation);
        #endregion
        #region BoundHalfExtents
        private int? _BoundHalfExtentsLocation;
        public P3Float? BoundHalfExtents => _BoundHalfExtentsLocation.HasValue ? P3FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Read(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BoundHalfExtentsLocation.Value, _package.MetaData.Constants)) : default(P3Float?);
        #endregion
        #region Primitive
        private RangeInt32? _PrimitiveLocation;
        public IPlacedPrimitiveGetter? Primitive => _PrimitiveLocation.HasValue ? PlacedPrimitiveBinaryOverlay.PlacedPrimitiveFactory(_recordData.Slice(_PrimitiveLocation!.Value.Min), _package) : default;
        #endregion
        #region XORD
        private int? _XORDLocation;
        public ReadOnlyMemorySlice<Byte>? XORD => _XORDLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XORDLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        public IBoundingGetter? OcclusionPlane { get; private set; }
        public IReadOnlyList<IPortalGetter>? Portals { get; private set; }
        public IBoundingGetter? RoomPortal { get; private set; }
        #region BoundData
        public partial ParseResult BoundDataCustomParse(
            OverlayStream stream,
            int offset,
            PreviousParse lastParsed);
        #endregion
        #region IsMultiBoundPrimitive
        private int? _IsMultiBoundPrimitiveLocation;
        public Boolean IsMultiBoundPrimitive => _IsMultiBoundPrimitiveLocation.HasValue ? true : default(Boolean);
        #endregion
        #region RagdollData
        private int? _RagdollDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollData => _RagdollDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _RagdollDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region RagdollBipedData
        private int? _RagdollBipedDataLocation;
        public ReadOnlyMemorySlice<Byte>? RagdollBipedData => _RagdollBipedDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _RagdollBipedDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Radius
        private int? _RadiusLocation;
        public Single? Radius => _RadiusLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _RadiusLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        public IReadOnlyList<IWaterReflectionGetter> Reflections { get; private set; } = Array.Empty<IWaterReflectionGetter>();
        public IReadOnlyList<IFormLinkGetter<IPlacedObjectGetter>> LitWater { get; private set; } = Array.Empty<IFormLinkGetter<IPlacedObjectGetter>>();
        #region Emittance
        private int? _EmittanceLocation;
        public IFormLinkNullableGetter<IEmittanceGetter> Emittance => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEmittanceGetter>(_package, _recordData, _EmittanceLocation);
        #endregion
        #region LightData
        private RangeInt32? _LightDataLocation;
        public ILightDataGetter? LightData => _LightDataLocation.HasValue ? LightDataBinaryOverlay.LightDataFactory(_recordData.Slice(_LightDataLocation!.Value.Min), _package) : default;
        #endregion
        #region Alpha
        private RangeInt32? _AlphaLocation;
        public IAlphaGetter? Alpha => _AlphaLocation.HasValue ? AlphaBinaryOverlay.AlphaFactory(_recordData.Slice(_AlphaLocation!.Value.Min), _package) : default;
        #endregion
        #region TeleportDestination
        private RangeInt32? _TeleportDestinationLocation;
        public ITeleportDestinationGetter? TeleportDestination => _TeleportDestinationLocation.HasValue ? TeleportDestinationBinaryOverlay.TeleportDestinationFactory(_recordData.Slice(_TeleportDestinationLocation!.Value.Min), _package) : default;
        #endregion
        #region TeleportMessageBox
        private int? _TeleportMessageBoxLocation;
        public IFormLinkNullableGetter<IMessageGetter> TeleportMessageBox => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IMessageGetter>(_package, _recordData, _TeleportMessageBoxLocation);
        #endregion
        #region MultiboundReference
        private int? _MultiboundReferenceLocation;
        public IFormLinkNullableGetter<IPlacedObjectGetter> MultiboundReference => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedObjectGetter>(_package, _recordData, _MultiboundReferenceLocation);
        #endregion
        #region XWCN
        private int? _XWCNLocation;
        public ReadOnlyMemorySlice<Byte>? XWCN => _XWCNLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XWCNLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region XWCS
        private int? _XWCSLocation;
        public ReadOnlyMemorySlice<Byte>? XWCS => _XWCSLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XWCSLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region WaterVelocity
        private RangeInt32? _WaterVelocityLocation;
        public IWaterVelocityGetter? WaterVelocity => _WaterVelocityLocation.HasValue ? WaterVelocityBinaryOverlay.WaterVelocityFactory(_recordData.Slice(_WaterVelocityLocation!.Value.Min), _package) : default;
        #endregion
        #region XCVL
        private int? _XCVLLocation;
        public ReadOnlyMemorySlice<Byte>? XCVL => _XCVLLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XCVLLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region XCZR
        private int? _XCZRLocation;
        public IFormLinkNullableGetter<ILinkedReferenceGetter> XCZR => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILinkedReferenceGetter>(_package, _recordData, _XCZRLocation);
        #endregion
        #region XCZA
        private int? _XCZALocation;
        public ReadOnlyMemorySlice<Byte>? XCZA => _XCZALocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _XCZALocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region XCZC
        private int? _XCZCLocation;
        public IFormLinkNullableGetter<ICellGetter> XCZC => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ICellGetter>(_package, _recordData, _XCZCLocation);
        #endregion
        #region Scale
        private int? _ScaleLocation;
        public Single? Scale => _ScaleLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ScaleLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region SpawnContainer
        private int? _SpawnContainerLocation;
        public IFormLinkNullableGetter<IPlacedObjectGetter> SpawnContainer => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedObjectGetter>(_package, _recordData, _SpawnContainerLocation);
        #endregion
        public IActivateParentsGetter? ActivateParents { get; private set; }
        #region LeveledItemBaseObject
        private int? _LeveledItemBaseObjectLocation;
        public IFormLinkNullableGetter<ILeveledItemGetter> LeveledItemBaseObject => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILeveledItemGetter>(_package, _recordData, _LeveledItemBaseObjectLocation);
        #endregion
        #region LevelModifier
        private int? _LevelModifierLocation;
        public Level? LevelModifier => _LevelModifierLocation.HasValue ? (Level)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _LevelModifierLocation!.Value, _package.MetaData.Constants)) : default(Level?);
        #endregion
        #region PersistentLocation
        private int? _PersistentLocationLocation;
        public IFormLinkNullableGetter<ILocationGetter> PersistentLocation => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationGetter>(_package, _recordData, _PersistentLocationLocation);
        #endregion
        #region CollisionLayer
        private int? _CollisionLayerLocation;
        public UInt32? CollisionLayer => _CollisionLayerLocation.HasValue ? BinaryPrimitives.ReadUInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _CollisionLayerLocation.Value, _package.MetaData.Constants)) : default(UInt32?);
        #endregion
        #region Lock
        private RangeInt32? _LockLocation;
        public ILockDataGetter? Lock => _LockLocation.HasValue ? LockDataBinaryOverlay.LockDataFactory(_recordData.Slice(_LockLocation!.Value.Min), _package) : default;
        #endregion
        #region EncounterZone
        private int? _EncounterZoneLocation;
        public IFormLinkNullableGetter<IEncounterZoneGetter> EncounterZone => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IEncounterZoneGetter>(_package, _recordData, _EncounterZoneLocation);
        #endregion
        #region NavigationDoorLink
        private RangeInt32? _NavigationDoorLinkLocation;
        public INavigationDoorLinkGetter? NavigationDoorLink => _NavigationDoorLinkLocation.HasValue ? NavigationDoorLinkBinaryOverlay.NavigationDoorLinkFactory(_recordData.Slice(_NavigationDoorLinkLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<IFormLinkGetter<ILocationReferenceTypeGetter>>? LocationRefTypes { get; private set; }
        #region IsIgnoredBySandbox
        private int? _IsIgnoredBySandboxLocation;
        public Boolean IsIgnoredBySandbox => _IsIgnoredBySandboxLocation.HasValue ? true : default(Boolean);
        #endregion
        #region Owner
        private int? _OwnerLocation;
        public IFormLinkNullableGetter<IOwnerGetter> Owner => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IOwnerGetter>(_package, _recordData, _OwnerLocation);
        #endregion
        #region FactionRank
        private int? _FactionRankLocation;
        public Int32? FactionRank => _FactionRankLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FactionRankLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region ItemCount
        private int? _ItemCountLocation;
        public Int32? ItemCount => _ItemCountLocation.HasValue ? BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ItemCountLocation.Value, _package.MetaData.Constants)) : default(Int32?);
        #endregion
        #region Charge
        private int? _ChargeLocation;
        public Single? Charge => _ChargeLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ChargeLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region LocationReference
        private int? _LocationReferenceLocation;
        public IFormLinkNullableGetter<ILocationRecordGetter> LocationReference => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ILocationRecordGetter>(_package, _recordData, _LocationReferenceLocation);
        #endregion
        #region EnableParent
        private RangeInt32? _EnableParentLocation;
        public IEnableParentGetter? EnableParent => _EnableParentLocation.HasValue ? EnableParentBinaryOverlay.EnableParentFactory(_recordData.Slice(_EnableParentLocation!.Value.Min), _package) : default;
        #endregion
        public IReadOnlyList<ILinkedReferencesGetter> LinkedReferences { get; private set; } = Array.Empty<ILinkedReferencesGetter>();
        public IPatrolGetter? Patrol { get; private set; }
        #region Action
        private int? _ActionLocation;
        public PlacedObject.ActionFlag? Action => _ActionLocation.HasValue ? (PlacedObject.ActionFlag)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _ActionLocation!.Value, _package.MetaData.Constants)) : default(PlacedObject.ActionFlag?);
        #endregion
        #region HeadTrackingWeight
        private int? _HeadTrackingWeightLocation;
        public Single? HeadTrackingWeight => _HeadTrackingWeightLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _HeadTrackingWeightLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region FavorCost
        private int? _FavorCostLocation;
        public Single? FavorCost => _FavorCostLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _FavorCostLocation.Value, _package.MetaData.Constants).Float() : default(Single?);
        #endregion
        #region IsOpenByDefault
        private int? _IsOpenByDefaultLocation;
        public Boolean IsOpenByDefault => _IsOpenByDefaultLocation.HasValue ? true : default(Boolean);
        #endregion
        public IMapMarkerGetter? MapMarker { get; private set; }
        #region AttachRef
        private int? _AttachRefLocation;
        public IFormLinkNullableGetter<IPlacedThingGetter> AttachRef => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IPlacedThingGetter>(_package, _recordData, _AttachRefLocation);
        #endregion
        #region DistantLodData
        private int? _DistantLodDataLocation;
        public ReadOnlyMemorySlice<Byte>? DistantLodData => _DistantLodDataLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _DistantLodDataLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Placement
        private RangeInt32? _PlacementLocation;
        public IPlacementGetter? Placement => _PlacementLocation.HasValue ? PlacementBinaryOverlay.PlacementFactory(_recordData.Slice(_PlacementLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected PlacedObjectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IPlacedObjectGetter PlacedObjectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new PlacedObjectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IPlacedObjectGetter PlacedObjectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return PlacedObjectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.VMAD:
                {
                    _VirtualMachineAdapterLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    _VirtualMachineAdapterLengthOverride = lastParsed.LengthOverride;
                    if (lastParsed.LengthOverride.HasValue)
                    {
                        stream.Position += lastParsed.LengthOverride.Value;
                    }
                    return (int)PlacedObject_FieldIndex.VirtualMachineAdapter;
                }
                case RecordTypeInts.NAME:
                {
                    _BaseLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Base;
                }
                case RecordTypeInts.XMBO:
                {
                    _BoundHalfExtentsLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.BoundHalfExtents;
                }
                case RecordTypeInts.XPRM:
                {
                    _PrimitiveLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.Primitive;
                }
                case RecordTypeInts.XORD:
                {
                    _XORDLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XORD;
                }
                case RecordTypeInts.XOCP:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.OcclusionPlane = BoundingBinaryOverlay.BoundingFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.OcclusionPlane;
                }
                case RecordTypeInts.XPOD:
                {
                    this.Portals = BinaryOverlayList.FactoryByStartIndexWithTrigger<IPortalGetter>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 8,
                        getter: (s, p) => PortalBinaryOverlay.PortalFactory(s, p));
                    return (int)PlacedObject_FieldIndex.Portals;
                }
                case RecordTypeInts.XPTL:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.RoomPortal = BoundingBinaryOverlay.BoundingFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.RoomPortal;
                }
                case RecordTypeInts.XRMR:
                {
                    return BoundDataCustomParse(
                        stream,
                        offset,
                        lastParsed: lastParsed);
                }
                case RecordTypeInts.XMBP:
                {
                    _IsMultiBoundPrimitiveLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.IsMultiBoundPrimitive;
                }
                case RecordTypeInts.XRGD:
                {
                    _RagdollDataLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.RagdollData;
                }
                case RecordTypeInts.XRGB:
                {
                    _RagdollBipedDataLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.RagdollBipedData;
                }
                case RecordTypeInts.XRDS:
                {
                    _RadiusLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Radius;
                }
                case RecordTypeInts.XPWR:
                {
                    this.Reflections = BinaryOverlayList.FactoryByArray<IWaterReflectionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => WaterReflectionBinaryOverlay.WaterReflectionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: WaterReflection_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)PlacedObject_FieldIndex.Reflections;
                }
                case RecordTypeInts.XLTW:
                {
                    this.LitWater = BinaryOverlayList.FactoryByArray<IFormLinkGetter<IPlacedObjectGetter>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<IPlacedObjectGetter>(p, s),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.XLTW,
                            skipHeader: true,
                            translationParams: translationParams));
                    return (int)PlacedObject_FieldIndex.LitWater;
                }
                case RecordTypeInts.XEMI:
                {
                    _EmittanceLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Emittance;
                }
                case RecordTypeInts.XLIG:
                {
                    _LightDataLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.LightData;
                }
                case RecordTypeInts.XALP:
                {
                    _AlphaLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.Alpha;
                }
                case RecordTypeInts.XTEL:
                {
                    _TeleportDestinationLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.TeleportDestination;
                }
                case RecordTypeInts.XTNM:
                {
                    _TeleportMessageBoxLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.TeleportMessageBox;
                }
                case RecordTypeInts.XMBR:
                {
                    _MultiboundReferenceLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.MultiboundReference;
                }
                case RecordTypeInts.XWCN:
                {
                    _XWCNLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XWCN;
                }
                case RecordTypeInts.XWCS:
                {
                    _XWCSLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XWCS;
                }
                case RecordTypeInts.XWCU:
                {
                    _WaterVelocityLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.WaterVelocity;
                }
                case RecordTypeInts.XCVL:
                {
                    _XCVLLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XCVL;
                }
                case RecordTypeInts.XCZR:
                {
                    _XCZRLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XCZR;
                }
                case RecordTypeInts.XCZA:
                {
                    _XCZALocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XCZA;
                }
                case RecordTypeInts.XCZC:
                {
                    _XCZCLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.XCZC;
                }
                case RecordTypeInts.XSCL:
                {
                    _ScaleLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Scale;
                }
                case RecordTypeInts.XSPC:
                {
                    _SpawnContainerLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.SpawnContainer;
                }
                case RecordTypeInts.XAPD:
                {
                    this.ActivateParents = ActivateParentsBinaryOverlay.ActivateParentsFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.ActivateParents;
                }
                case RecordTypeInts.XLIB:
                {
                    _LeveledItemBaseObjectLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.LeveledItemBaseObject;
                }
                case RecordTypeInts.XLCM:
                {
                    _LevelModifierLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.LevelModifier;
                }
                case RecordTypeInts.XLCN:
                {
                    _PersistentLocationLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.PersistentLocation;
                }
                case RecordTypeInts.XTRI:
                {
                    _CollisionLayerLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.CollisionLayer;
                }
                case RecordTypeInts.XLOC:
                {
                    _LockLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.Lock;
                }
                case RecordTypeInts.XEZN:
                {
                    _EncounterZoneLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.EncounterZone;
                }
                case RecordTypeInts.XNDP:
                {
                    _NavigationDoorLinkLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.NavigationDoorLink;
                }
                case RecordTypeInts.XLRT:
                {
                    this.LocationRefTypes = BinaryOverlayList.FactoryByStartIndexWithTrigger<IFormLinkGetter<ILocationReferenceTypeGetter>>(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        itemLength: 4,
                        getter: (s, p) => FormLinkBinaryTranslation.Instance.OverlayFactory<ILocationReferenceTypeGetter>(p, s));
                    return (int)PlacedObject_FieldIndex.LocationRefTypes;
                }
                case RecordTypeInts.XIS2:
                {
                    _IsIgnoredBySandboxLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.IsIgnoredBySandbox;
                }
                case RecordTypeInts.XOWN:
                {
                    _OwnerLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Owner;
                }
                case RecordTypeInts.XRNK:
                {
                    _FactionRankLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.FactionRank;
                }
                case RecordTypeInts.XCNT:
                {
                    _ItemCountLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.ItemCount;
                }
                case RecordTypeInts.XCHG:
                {
                    _ChargeLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Charge;
                }
                case RecordTypeInts.XLRL:
                {
                    _LocationReferenceLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.LocationReference;
                }
                case RecordTypeInts.XESP:
                {
                    _EnableParentLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.EnableParent;
                }
                case RecordTypeInts.XLKR:
                {
                    this.LinkedReferences = BinaryOverlayList.FactoryByArray<ILinkedReferencesGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => LinkedReferencesBinaryOverlay.LinkedReferencesFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: LinkedReferences_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)PlacedObject_FieldIndex.LinkedReferences;
                }
                case RecordTypeInts.XPRD:
                {
                    this.Patrol = PatrolBinaryOverlay.PatrolFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.Patrol;
                }
                case RecordTypeInts.XACT:
                {
                    _ActionLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.Action;
                }
                case RecordTypeInts.XHTW:
                {
                    _HeadTrackingWeightLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.HeadTrackingWeight;
                }
                case RecordTypeInts.XFVC:
                {
                    _FavorCostLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.FavorCost;
                }
                case RecordTypeInts.ONAM:
                {
                    _IsOpenByDefaultLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.IsOpenByDefault;
                }
                case RecordTypeInts.XMRK:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength; // Skip marker
                    this.MapMarker = MapMarkerBinaryOverlay.MapMarkerFactory(
                        stream: stream,
                        package: _package,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)PlacedObject_FieldIndex.MapMarker;
                }
                case RecordTypeInts.XATR:
                {
                    _AttachRefLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.AttachRef;
                }
                case RecordTypeInts.XLOD:
                {
                    _DistantLodDataLocation = (stream.Position - offset);
                    return (int)PlacedObject_FieldIndex.DistantLodData;
                }
                case RecordTypeInts.DATA:
                {
                    _PlacementLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)PlacedObject_FieldIndex.Placement;
                }
                case RecordTypeInts.XXXX:
                {
                    var overflowHeader = stream.ReadSubrecord();
                    return ParseResult.OverrideLength(lastParsed, BinaryPrimitives.ReadUInt32LittleEndian(overflowHeader.Content));
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            PlacedObjectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<PlacedObject>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IPlacedObjectGetter rhs) return false;
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IPlacedObjectGetter? obj)
        {
            return ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((PlacedObjectCommon)((IPlacedObjectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

