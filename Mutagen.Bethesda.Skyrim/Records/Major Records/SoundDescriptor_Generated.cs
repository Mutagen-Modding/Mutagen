/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Assets;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class SoundDescriptor :
        SkyrimMajorRecord,
        IEquatable<ISoundDescriptorGetter>,
        ILoquiObjectSetter<SoundDescriptor>,
        ISoundDescriptorInternal
    {
        #region Ctor
        protected SoundDescriptor()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Type
        public SoundDescriptor.DescriptorType? Type { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SoundDescriptor.DescriptorType? ISoundDescriptorGetter.Type => this.Type;
        #endregion
        #region Category
        private readonly IFormLinkNullable<ISoundCategoryGetter> _Category = new FormLinkNullable<ISoundCategoryGetter>();
        public IFormLinkNullable<ISoundCategoryGetter> Category
        {
            get => _Category;
            set => _Category.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundCategoryGetter> ISoundDescriptorGetter.Category => this.Category;
        #endregion
        #region AlternateSoundFor
        private readonly IFormLinkNullable<ISoundDescriptorGetter> _AlternateSoundFor = new FormLinkNullable<ISoundDescriptorGetter>();
        public IFormLinkNullable<ISoundDescriptorGetter> AlternateSoundFor
        {
            get => _AlternateSoundFor;
            set => _AlternateSoundFor.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundDescriptorGetter> ISoundDescriptorGetter.AlternateSoundFor => this.AlternateSoundFor;
        #endregion
        #region SoundFiles
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<IAssetLink<SkyrimSoundAssetType>> _SoundFiles = new ExtendedList<IAssetLink<SkyrimSoundAssetType>>();
        public ExtendedList<IAssetLink<SkyrimSoundAssetType>> SoundFiles
        {
            get => this._SoundFiles;
            init => this._SoundFiles = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IAssetLinkGetter<SkyrimSoundAssetType>> ISoundDescriptorGetter.SoundFiles => _SoundFiles;
        #endregion

        #endregion
        #region OutputModel
        private readonly IFormLinkNullable<ISoundOutputModelGetter> _OutputModel = new FormLinkNullable<ISoundOutputModelGetter>();
        public IFormLinkNullable<ISoundOutputModelGetter> OutputModel
        {
            get => _OutputModel;
            set => _OutputModel.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<ISoundOutputModelGetter> ISoundDescriptorGetter.OutputModel => this.OutputModel;
        #endregion
        #region String
        public TranslatedString? String { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ISoundDescriptorGetter.String => this.String;
        #endregion
        #region Conditions
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Condition> _Conditions = new ExtendedList<Condition>();
        public ExtendedList<Condition> Conditions
        {
            get => this._Conditions;
            init => this._Conditions = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IConditionGetter> ISoundDescriptorGetter.Conditions => _Conditions;
        #endregion

        #endregion
        #region LoopAndRumble
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SoundLoopAndRumble? _LoopAndRumble;
        public SoundLoopAndRumble? LoopAndRumble
        {
            get => _LoopAndRumble;
            set => _LoopAndRumble = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ISoundLoopAndRumbleGetter? ISoundDescriptorGetter.LoopAndRumble => this.LoopAndRumble;
        #endregion
        #region PercentFrequencyShift
        public SByte PercentFrequencyShift { get; set; } = default(SByte);
        #endregion
        #region PercentFrequencyVariance
        public SByte PercentFrequencyVariance { get; set; } = default(SByte);
        #endregion
        #region Priority
        public SByte Priority { get; set; } = default(SByte);
        #endregion
        #region Variance
        public SByte Variance { get; set; } = default(SByte);
        #endregion
        #region StaticAttenuation
        public Single StaticAttenuation { get; set; } = default(Single);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundDescriptorMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.Type = initialValue;
                this.Category = initialValue;
                this.AlternateSoundFor = initialValue;
                this.SoundFiles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(initialValue, Enumerable.Empty<(int Index, TItem Value)>());
                this.OutputModel = initialValue;
                this.String = initialValue;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.LoopAndRumble = new MaskItem<TItem, SoundLoopAndRumble.Mask<TItem>?>(initialValue, new SoundLoopAndRumble.Mask<TItem>(initialValue));
                this.PercentFrequencyShift = initialValue;
                this.PercentFrequencyVariance = initialValue;
                this.Priority = initialValue;
                this.Variance = initialValue;
                this.StaticAttenuation = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem Type,
                TItem Category,
                TItem AlternateSoundFor,
                TItem SoundFiles,
                TItem OutputModel,
                TItem String,
                TItem Conditions,
                TItem LoopAndRumble,
                TItem PercentFrequencyShift,
                TItem PercentFrequencyVariance,
                TItem Priority,
                TItem Variance,
                TItem StaticAttenuation)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.Type = Type;
                this.Category = Category;
                this.AlternateSoundFor = AlternateSoundFor;
                this.SoundFiles = new MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>(SoundFiles, Enumerable.Empty<(int Index, TItem Value)>());
                this.OutputModel = OutputModel;
                this.String = String;
                this.Conditions = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>(Conditions, Enumerable.Empty<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>());
                this.LoopAndRumble = new MaskItem<TItem, SoundLoopAndRumble.Mask<TItem>?>(LoopAndRumble, new SoundLoopAndRumble.Mask<TItem>(LoopAndRumble));
                this.PercentFrequencyShift = PercentFrequencyShift;
                this.PercentFrequencyVariance = PercentFrequencyVariance;
                this.Priority = Priority;
                this.Variance = Variance;
                this.StaticAttenuation = StaticAttenuation;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Type;
            public TItem Category;
            public TItem AlternateSoundFor;
            public MaskItem<TItem, IEnumerable<(int Index, TItem Value)>?>? SoundFiles;
            public TItem OutputModel;
            public TItem String;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Condition.Mask<TItem>?>>?>? Conditions;
            public MaskItem<TItem, SoundLoopAndRumble.Mask<TItem>?>? LoopAndRumble { get; set; }
            public TItem PercentFrequencyShift;
            public TItem PercentFrequencyVariance;
            public TItem Priority;
            public TItem Variance;
            public TItem StaticAttenuation;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.Type, rhs.Type)) return false;
                if (!object.Equals(this.Category, rhs.Category)) return false;
                if (!object.Equals(this.AlternateSoundFor, rhs.AlternateSoundFor)) return false;
                if (!object.Equals(this.SoundFiles, rhs.SoundFiles)) return false;
                if (!object.Equals(this.OutputModel, rhs.OutputModel)) return false;
                if (!object.Equals(this.String, rhs.String)) return false;
                if (!object.Equals(this.Conditions, rhs.Conditions)) return false;
                if (!object.Equals(this.LoopAndRumble, rhs.LoopAndRumble)) return false;
                if (!object.Equals(this.PercentFrequencyShift, rhs.PercentFrequencyShift)) return false;
                if (!object.Equals(this.PercentFrequencyVariance, rhs.PercentFrequencyVariance)) return false;
                if (!object.Equals(this.Priority, rhs.Priority)) return false;
                if (!object.Equals(this.Variance, rhs.Variance)) return false;
                if (!object.Equals(this.StaticAttenuation, rhs.StaticAttenuation)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Type);
                hash.Add(this.Category);
                hash.Add(this.AlternateSoundFor);
                hash.Add(this.SoundFiles);
                hash.Add(this.OutputModel);
                hash.Add(this.String);
                hash.Add(this.Conditions);
                hash.Add(this.LoopAndRumble);
                hash.Add(this.PercentFrequencyShift);
                hash.Add(this.PercentFrequencyVariance);
                hash.Add(this.Priority);
                hash.Add(this.Variance);
                hash.Add(this.StaticAttenuation);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.Type)) return false;
                if (!eval(this.Category)) return false;
                if (!eval(this.AlternateSoundFor)) return false;
                if (this.SoundFiles != null)
                {
                    if (!eval(this.SoundFiles.Overall)) return false;
                    if (this.SoundFiles.Specific != null)
                    {
                        foreach (var item in this.SoundFiles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (!eval(this.OutputModel)) return false;
                if (!eval(this.String)) return false;
                if (this.Conditions != null)
                {
                    if (!eval(this.Conditions.Overall)) return false;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (LoopAndRumble != null)
                {
                    if (!eval(this.LoopAndRumble.Overall)) return false;
                    if (this.LoopAndRumble.Specific != null && !this.LoopAndRumble.Specific.All(eval)) return false;
                }
                if (!eval(this.PercentFrequencyShift)) return false;
                if (!eval(this.PercentFrequencyVariance)) return false;
                if (!eval(this.Priority)) return false;
                if (!eval(this.Variance)) return false;
                if (!eval(this.StaticAttenuation)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.Type)) return true;
                if (eval(this.Category)) return true;
                if (eval(this.AlternateSoundFor)) return true;
                if (this.SoundFiles != null)
                {
                    if (eval(this.SoundFiles.Overall)) return true;
                    if (this.SoundFiles.Specific != null)
                    {
                        foreach (var item in this.SoundFiles.Specific)
                        {
                            if (!eval(item.Value)) return false;
                        }
                    }
                }
                if (eval(this.OutputModel)) return true;
                if (eval(this.String)) return true;
                if (this.Conditions != null)
                {
                    if (eval(this.Conditions.Overall)) return true;
                    if (this.Conditions.Specific != null)
                    {
                        foreach (var item in this.Conditions.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (LoopAndRumble != null)
                {
                    if (eval(this.LoopAndRumble.Overall)) return true;
                    if (this.LoopAndRumble.Specific != null && this.LoopAndRumble.Specific.Any(eval)) return true;
                }
                if (eval(this.PercentFrequencyShift)) return true;
                if (eval(this.PercentFrequencyVariance)) return true;
                if (eval(this.Priority)) return true;
                if (eval(this.Variance)) return true;
                if (eval(this.StaticAttenuation)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new SoundDescriptor.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.Type = eval(this.Type);
                obj.Category = eval(this.Category);
                obj.AlternateSoundFor = eval(this.AlternateSoundFor);
                if (SoundFiles != null)
                {
                    obj.SoundFiles = new MaskItem<R, IEnumerable<(int Index, R Value)>?>(eval(this.SoundFiles.Overall), Enumerable.Empty<(int Index, R Value)>());
                    if (SoundFiles.Specific != null)
                    {
                        var l = new List<(int Index, R Item)>();
                        obj.SoundFiles.Specific = l;
                        foreach (var item in SoundFiles.Specific)
                        {
                            R mask = eval(item.Value);
                            l.Add((item.Index, mask));
                        }
                    }
                }
                obj.OutputModel = eval(this.OutputModel);
                obj.String = eval(this.String);
                if (Conditions != null)
                {
                    obj.Conditions = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Condition.Mask<R>?>>?>(eval(this.Conditions.Overall), Enumerable.Empty<MaskItemIndexed<R, Condition.Mask<R>?>>());
                    if (Conditions.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Condition.Mask<R>?>>();
                        obj.Conditions.Specific = l;
                        foreach (var item in Conditions.Specific)
                        {
                            MaskItemIndexed<R, Condition.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Condition.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.LoopAndRumble = this.LoopAndRumble == null ? null : new MaskItem<R, SoundLoopAndRumble.Mask<R>?>(eval(this.LoopAndRumble.Overall), this.LoopAndRumble.Specific?.Translate(eval));
                obj.PercentFrequencyShift = eval(this.PercentFrequencyShift);
                obj.PercentFrequencyVariance = eval(this.PercentFrequencyVariance);
                obj.Priority = eval(this.Priority);
                obj.Variance = eval(this.Variance);
                obj.StaticAttenuation = eval(this.StaticAttenuation);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(SoundDescriptor.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, SoundDescriptor.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(SoundDescriptor.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Type ?? true)
                    {
                        sb.AppendItem(Type, "Type");
                    }
                    if (printMask?.Category ?? true)
                    {
                        sb.AppendItem(Category, "Category");
                    }
                    if (printMask?.AlternateSoundFor ?? true)
                    {
                        sb.AppendItem(AlternateSoundFor, "AlternateSoundFor");
                    }
                    if ((printMask?.SoundFiles?.Overall ?? true)
                        && SoundFiles is {} SoundFilesItem)
                    {
                        sb.AppendLine("SoundFiles =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(SoundFilesItem.Overall);
                            if (SoundFilesItem.Specific != null)
                            {
                                foreach (var subItem in SoundFilesItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        {
                                            sb.AppendItem(subItem);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.OutputModel ?? true)
                    {
                        sb.AppendItem(OutputModel, "OutputModel");
                    }
                    if (printMask?.String ?? true)
                    {
                        sb.AppendItem(String, "String");
                    }
                    if ((printMask?.Conditions?.Overall ?? true)
                        && Conditions is {} ConditionsItem)
                    {
                        sb.AppendLine("Conditions =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(ConditionsItem.Overall);
                            if (ConditionsItem.Specific != null)
                            {
                                foreach (var subItem in ConditionsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.LoopAndRumble?.Overall ?? true)
                    {
                        LoopAndRumble?.Print(sb);
                    }
                    if (printMask?.PercentFrequencyShift ?? true)
                    {
                        sb.AppendItem(PercentFrequencyShift, "PercentFrequencyShift");
                    }
                    if (printMask?.PercentFrequencyVariance ?? true)
                    {
                        sb.AppendItem(PercentFrequencyVariance, "PercentFrequencyVariance");
                    }
                    if (printMask?.Priority ?? true)
                    {
                        sb.AppendItem(Priority, "Priority");
                    }
                    if (printMask?.Variance ?? true)
                    {
                        sb.AppendItem(Variance, "Variance");
                    }
                    if (printMask?.StaticAttenuation ?? true)
                    {
                        sb.AppendItem(StaticAttenuation, "StaticAttenuation");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Type;
            public Exception? Category;
            public Exception? AlternateSoundFor;
            public MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>? SoundFiles;
            public Exception? OutputModel;
            public Exception? String;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>? Conditions;
            public MaskItem<Exception?, SoundLoopAndRumble.ErrorMask?>? LoopAndRumble;
            public Exception? PercentFrequencyShift;
            public Exception? PercentFrequencyVariance;
            public Exception? Priority;
            public Exception? Variance;
            public Exception? StaticAttenuation;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                SoundDescriptor_FieldIndex enu = (SoundDescriptor_FieldIndex)index;
                switch (enu)
                {
                    case SoundDescriptor_FieldIndex.Type:
                        return Type;
                    case SoundDescriptor_FieldIndex.Category:
                        return Category;
                    case SoundDescriptor_FieldIndex.AlternateSoundFor:
                        return AlternateSoundFor;
                    case SoundDescriptor_FieldIndex.SoundFiles:
                        return SoundFiles;
                    case SoundDescriptor_FieldIndex.OutputModel:
                        return OutputModel;
                    case SoundDescriptor_FieldIndex.String:
                        return String;
                    case SoundDescriptor_FieldIndex.Conditions:
                        return Conditions;
                    case SoundDescriptor_FieldIndex.LoopAndRumble:
                        return LoopAndRumble;
                    case SoundDescriptor_FieldIndex.PercentFrequencyShift:
                        return PercentFrequencyShift;
                    case SoundDescriptor_FieldIndex.PercentFrequencyVariance:
                        return PercentFrequencyVariance;
                    case SoundDescriptor_FieldIndex.Priority:
                        return Priority;
                    case SoundDescriptor_FieldIndex.Variance:
                        return Variance;
                    case SoundDescriptor_FieldIndex.StaticAttenuation:
                        return StaticAttenuation;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                SoundDescriptor_FieldIndex enu = (SoundDescriptor_FieldIndex)index;
                switch (enu)
                {
                    case SoundDescriptor_FieldIndex.Type:
                        this.Type = ex;
                        break;
                    case SoundDescriptor_FieldIndex.Category:
                        this.Category = ex;
                        break;
                    case SoundDescriptor_FieldIndex.AlternateSoundFor:
                        this.AlternateSoundFor = ex;
                        break;
                    case SoundDescriptor_FieldIndex.SoundFiles:
                        this.SoundFiles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(ex, null);
                        break;
                    case SoundDescriptor_FieldIndex.OutputModel:
                        this.OutputModel = ex;
                        break;
                    case SoundDescriptor_FieldIndex.String:
                        this.String = ex;
                        break;
                    case SoundDescriptor_FieldIndex.Conditions:
                        this.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(ex, null);
                        break;
                    case SoundDescriptor_FieldIndex.LoopAndRumble:
                        this.LoopAndRumble = new MaskItem<Exception?, SoundLoopAndRumble.ErrorMask?>(ex, null);
                        break;
                    case SoundDescriptor_FieldIndex.PercentFrequencyShift:
                        this.PercentFrequencyShift = ex;
                        break;
                    case SoundDescriptor_FieldIndex.PercentFrequencyVariance:
                        this.PercentFrequencyVariance = ex;
                        break;
                    case SoundDescriptor_FieldIndex.Priority:
                        this.Priority = ex;
                        break;
                    case SoundDescriptor_FieldIndex.Variance:
                        this.Variance = ex;
                        break;
                    case SoundDescriptor_FieldIndex.StaticAttenuation:
                        this.StaticAttenuation = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                SoundDescriptor_FieldIndex enu = (SoundDescriptor_FieldIndex)index;
                switch (enu)
                {
                    case SoundDescriptor_FieldIndex.Type:
                        this.Type = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.Category:
                        this.Category = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.AlternateSoundFor:
                        this.AlternateSoundFor = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.SoundFiles:
                        this.SoundFiles = (MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>)obj;
                        break;
                    case SoundDescriptor_FieldIndex.OutputModel:
                        this.OutputModel = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.String:
                        this.String = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.Conditions:
                        this.Conditions = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>)obj;
                        break;
                    case SoundDescriptor_FieldIndex.LoopAndRumble:
                        this.LoopAndRumble = (MaskItem<Exception?, SoundLoopAndRumble.ErrorMask?>?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.PercentFrequencyShift:
                        this.PercentFrequencyShift = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.PercentFrequencyVariance:
                        this.PercentFrequencyVariance = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.Priority:
                        this.Priority = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.Variance:
                        this.Variance = (Exception?)obj;
                        break;
                    case SoundDescriptor_FieldIndex.StaticAttenuation:
                        this.StaticAttenuation = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (Type != null) return true;
                if (Category != null) return true;
                if (AlternateSoundFor != null) return true;
                if (SoundFiles != null) return true;
                if (OutputModel != null) return true;
                if (String != null) return true;
                if (Conditions != null) return true;
                if (LoopAndRumble != null) return true;
                if (PercentFrequencyShift != null) return true;
                if (PercentFrequencyVariance != null) return true;
                if (Priority != null) return true;
                if (Variance != null) return true;
                if (StaticAttenuation != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(Type, "Type");
                }
                {
                    sb.AppendItem(Category, "Category");
                }
                {
                    sb.AppendItem(AlternateSoundFor, "AlternateSoundFor");
                }
                if (SoundFiles is {} SoundFilesItem)
                {
                    sb.AppendLine("SoundFiles =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(SoundFilesItem.Overall);
                        if (SoundFilesItem.Specific != null)
                        {
                            foreach (var subItem in SoundFilesItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    {
                                        sb.AppendItem(subItem);
                                    }
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(OutputModel, "OutputModel");
                }
                {
                    sb.AppendItem(String, "String");
                }
                if (Conditions is {} ConditionsItem)
                {
                    sb.AppendLine("Conditions =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(ConditionsItem.Overall);
                        if (ConditionsItem.Specific != null)
                        {
                            foreach (var subItem in ConditionsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                LoopAndRumble?.Print(sb);
                {
                    sb.AppendItem(PercentFrequencyShift, "PercentFrequencyShift");
                }
                {
                    sb.AppendItem(PercentFrequencyVariance, "PercentFrequencyVariance");
                }
                {
                    sb.AppendItem(Priority, "Priority");
                }
                {
                    sb.AppendItem(Variance, "Variance");
                }
                {
                    sb.AppendItem(StaticAttenuation, "StaticAttenuation");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Type = this.Type.Combine(rhs.Type);
                ret.Category = this.Category.Combine(rhs.Category);
                ret.AlternateSoundFor = this.AlternateSoundFor.Combine(rhs.AlternateSoundFor);
                ret.SoundFiles = new MaskItem<Exception?, IEnumerable<(int Index, Exception Value)>?>(Noggog.ExceptionExt.Combine(this.SoundFiles?.Overall, rhs.SoundFiles?.Overall), Noggog.ExceptionExt.Combine(this.SoundFiles?.Specific, rhs.SoundFiles?.Specific));
                ret.OutputModel = this.OutputModel.Combine(rhs.OutputModel);
                ret.String = this.String.Combine(rhs.String);
                ret.Conditions = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Condition.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Conditions?.Overall, rhs.Conditions?.Overall), Noggog.ExceptionExt.Combine(this.Conditions?.Specific, rhs.Conditions?.Specific));
                ret.LoopAndRumble = this.LoopAndRumble.Combine(rhs.LoopAndRumble, (l, r) => l.Combine(r));
                ret.PercentFrequencyShift = this.PercentFrequencyShift.Combine(rhs.PercentFrequencyShift);
                ret.PercentFrequencyVariance = this.PercentFrequencyVariance.Combine(rhs.PercentFrequencyVariance);
                ret.Priority = this.Priority.Combine(rhs.Priority);
                ret.Variance = this.Variance.Combine(rhs.Variance);
                ret.StaticAttenuation = this.StaticAttenuation.Combine(rhs.StaticAttenuation);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool Type;
            public bool Category;
            public bool AlternateSoundFor;
            public bool SoundFiles;
            public bool OutputModel;
            public bool String;
            public Condition.TranslationMask? Conditions;
            public SoundLoopAndRumble.TranslationMask? LoopAndRumble;
            public bool PercentFrequencyShift;
            public bool PercentFrequencyVariance;
            public bool Priority;
            public bool Variance;
            public bool StaticAttenuation;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Type = defaultOn;
                this.Category = defaultOn;
                this.AlternateSoundFor = defaultOn;
                this.SoundFiles = defaultOn;
                this.OutputModel = defaultOn;
                this.String = defaultOn;
                this.PercentFrequencyShift = defaultOn;
                this.PercentFrequencyVariance = defaultOn;
                this.Priority = defaultOn;
                this.Variance = defaultOn;
                this.StaticAttenuation = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((Type, null));
                ret.Add((Category, null));
                ret.Add((AlternateSoundFor, null));
                ret.Add((SoundFiles, null));
                ret.Add((OutputModel, null));
                ret.Add((String, null));
                ret.Add((Conditions == null ? DefaultOn : !Conditions.GetCrystal().CopyNothing, Conditions?.GetCrystal()));
                ret.Add((LoopAndRumble != null ? LoopAndRumble.OnOverall : DefaultOn, LoopAndRumble?.GetCrystal()));
                ret.Add((PercentFrequencyShift, null));
                ret.Add((PercentFrequencyVariance, null));
                ret.Add((Priority, null));
                ret.Add((Variance, null));
                ret.Add((StaticAttenuation, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = SoundDescriptor_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundDescriptorCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => SoundDescriptorSetterCommon.Instance.RemapLinks(this, mapping);
        public SoundDescriptor(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private SoundDescriptor(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal SoundDescriptor(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public SoundDescriptor(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public SoundDescriptor(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<SoundDescriptor>.ToString(this);
        }

        protected override Type LinkType => typeof(ISoundDescriptor);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SoundDescriptorCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => SoundDescriptorSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => SoundDescriptorSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => SoundDescriptorSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISoundDescriptorGetter rhs) return false;
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundDescriptorGetter? obj)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundDescriptorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundDescriptorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static SoundDescriptor CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new SoundDescriptor();
            ((SoundDescriptorSetterCommon)((ISoundDescriptorGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out SoundDescriptor item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((SoundDescriptorSetterCommon)((ISoundDescriptorGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new SoundDescriptor GetNew()
        {
            return new SoundDescriptor();
        }

    }
    #endregion

    #region Interface
    public partial interface ISoundDescriptor :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<ISoundDescriptorInternal>,
        ISkyrimMajorRecordInternal,
        ISound,
        ISoundDescriptorGetter
    {
        new SoundDescriptor.DescriptorType? Type { get; set; }
        new IFormLinkNullable<ISoundCategoryGetter> Category { get; set; }
        new IFormLinkNullable<ISoundDescriptorGetter> AlternateSoundFor { get; set; }
        new ExtendedList<IAssetLink<SkyrimSoundAssetType>> SoundFiles { get; }
        new IFormLinkNullable<ISoundOutputModelGetter> OutputModel { get; set; }
        new TranslatedString? String { get; set; }
        new ExtendedList<Condition> Conditions { get; }
        new SoundLoopAndRumble? LoopAndRumble { get; set; }
        new SByte PercentFrequencyShift { get; set; }
        new SByte PercentFrequencyVariance { get; set; }
        new SByte Priority { get; set; }
        new SByte Variance { get; set; }
        new Single StaticAttenuation { get; set; }
    }

    public partial interface ISoundDescriptorInternal :
        ISkyrimMajorRecordInternal,
        ISoundDescriptor,
        ISoundDescriptorGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.SNDR)]
    public partial interface ISoundDescriptorGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ISoundDescriptorGetter>,
        IMapsToGetter<ISoundDescriptorGetter>,
        ISoundGetter
    {
        static new ILoquiRegistration StaticRegistration => SoundDescriptor_Registration.Instance;
        SoundDescriptor.DescriptorType? Type { get; }
        IFormLinkNullableGetter<ISoundCategoryGetter> Category { get; }
        IFormLinkNullableGetter<ISoundDescriptorGetter> AlternateSoundFor { get; }
        IReadOnlyList<IAssetLinkGetter<SkyrimSoundAssetType>> SoundFiles { get; }
        IFormLinkNullableGetter<ISoundOutputModelGetter> OutputModel { get; }
        ITranslatedStringGetter? String { get; }
        IReadOnlyList<IConditionGetter> Conditions { get; }
        ISoundLoopAndRumbleGetter? LoopAndRumble { get; }
        SByte PercentFrequencyShift { get; }
        SByte PercentFrequencyVariance { get; }
        SByte Priority { get; }
        SByte Variance { get; }
        Single StaticAttenuation { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class SoundDescriptorMixIn
    {
        public static void Clear(this ISoundDescriptorInternal item)
        {
            ((SoundDescriptorSetterCommon)((ISoundDescriptorGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static SoundDescriptor.Mask<bool> GetEqualsMask(
            this ISoundDescriptorGetter item,
            ISoundDescriptorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ISoundDescriptorGetter item,
            string? name = null,
            SoundDescriptor.Mask<bool>? printMask = null)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ISoundDescriptorGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundDescriptor.Mask<bool>? printMask = null)
        {
            ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ISoundDescriptorGetter item,
            ISoundDescriptorGetter rhs,
            SoundDescriptor.TranslationMask? equalsMask = null)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ISoundDescriptorInternal lhs,
            ISoundDescriptorGetter rhs,
            out SoundDescriptor.ErrorMask errorMask,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = SoundDescriptor.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ISoundDescriptorInternal lhs,
            ISoundDescriptorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static SoundDescriptor DeepCopy(
            this ISoundDescriptorGetter item,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            return ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static SoundDescriptor DeepCopy(
            this ISoundDescriptorGetter item,
            out SoundDescriptor.ErrorMask errorMask,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            return ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static SoundDescriptor DeepCopy(
            this ISoundDescriptorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static SoundDescriptor Duplicate(
            this ISoundDescriptorGetter item,
            FormKey formKey,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static SoundDescriptor Duplicate(
            this ISoundDescriptorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ISoundDescriptorInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((SoundDescriptorSetterCommon)((ISoundDescriptorGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum SoundDescriptor_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        Type = 7,
        Category = 8,
        AlternateSoundFor = 9,
        SoundFiles = 10,
        OutputModel = 11,
        String = 12,
        Conditions = 13,
        LoopAndRumble = 14,
        PercentFrequencyShift = 15,
        PercentFrequencyVariance = 16,
        Priority = 17,
        Variance = 18,
        StaticAttenuation = 19,
    }
    #endregion

    #region Registration
    internal partial class SoundDescriptor_Registration : ILoquiRegistration
    {
        public static readonly SoundDescriptor_Registration Instance = new SoundDescriptor_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(SoundDescriptor.Mask<>);

        public static readonly Type ErrorMaskType = typeof(SoundDescriptor.ErrorMask);

        public static readonly Type ClassType = typeof(SoundDescriptor);

        public static readonly Type GetterType = typeof(ISoundDescriptorGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ISoundDescriptor);

        public static readonly Type? InternalSetterType = typeof(ISoundDescriptorInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.SoundDescriptor";

        public const string Name = "SoundDescriptor";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.SNDR;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.SNDR);
            var all = RecordCollection.Factory(
                RecordTypes.SNDR,
                RecordTypes.CNAM,
                RecordTypes.GNAM,
                RecordTypes.SNAM,
                RecordTypes.ANAM,
                RecordTypes.ONAM,
                RecordTypes.FNAM,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2,
                RecordTypes.LNAM,
                RecordTypes.BNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(SoundDescriptorBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class SoundDescriptorSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly SoundDescriptorSetterCommon Instance = new SoundDescriptorSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ISoundDescriptorInternal item)
        {
            ClearPartial();
            item.Type = default;
            item.Category.Clear();
            item.AlternateSoundFor.Clear();
            item.SoundFiles.Clear();
            item.OutputModel.Clear();
            item.String = default;
            item.Conditions.Clear();
            item.LoopAndRumble = null;
            item.PercentFrequencyShift = default(SByte);
            item.PercentFrequencyVariance = default(SByte);
            item.Priority = default(SByte);
            item.Variance = default(SByte);
            item.StaticAttenuation = default(Single);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ISoundDescriptorInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ISoundDescriptorInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ISoundDescriptor obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.Category.Relink(mapping);
            obj.AlternateSoundFor.Relink(mapping);
            obj.OutputModel.Relink(mapping);
            obj.Conditions.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ISoundDescriptor obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            foreach (var item in obj.SoundFiles)
            {
                yield return item;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ISoundDescriptor obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            obj.SoundFiles.ForEach(x => x.Relink(mapping));
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ISoundDescriptorInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ISoundDescriptorInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: SoundDescriptorBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: SoundDescriptorBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundDescriptor)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (SoundDescriptor)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class SoundDescriptorCommon : SkyrimMajorRecordCommon
    {
        public new static readonly SoundDescriptorCommon Instance = new SoundDescriptorCommon();

        public SoundDescriptor.Mask<bool> GetEqualsMask(
            ISoundDescriptorGetter item,
            ISoundDescriptorGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new SoundDescriptor.Mask<bool>(false);
            ((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ISoundDescriptorGetter item,
            ISoundDescriptorGetter rhs,
            SoundDescriptor.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Type = item.Type == rhs.Type;
            ret.Category = item.Category.Equals(rhs.Category);
            ret.AlternateSoundFor = item.AlternateSoundFor.Equals(rhs.AlternateSoundFor);
            ret.SoundFiles = item.SoundFiles.CollectionEqualsHelper(
                rhs.SoundFiles,
                (l, r) => object.Equals(l, r),
                include);
            ret.OutputModel = item.OutputModel.Equals(rhs.OutputModel);
            ret.String = object.Equals(item.String, rhs.String);
            ret.Conditions = item.Conditions.CollectionEqualsHelper(
                rhs.Conditions,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.LoopAndRumble = EqualsMaskHelper.EqualsHelper(
                item.LoopAndRumble,
                rhs.LoopAndRumble,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.PercentFrequencyShift = item.PercentFrequencyShift == rhs.PercentFrequencyShift;
            ret.PercentFrequencyVariance = item.PercentFrequencyVariance == rhs.PercentFrequencyVariance;
            ret.Priority = item.Priority == rhs.Priority;
            ret.Variance = item.Variance == rhs.Variance;
            ret.StaticAttenuation = item.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ISoundDescriptorGetter item,
            string? name = null,
            SoundDescriptor.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ISoundDescriptorGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            SoundDescriptor.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"SoundDescriptor =>");
            }
            else
            {
                sb.AppendLine($"{name} (SoundDescriptor) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ISoundDescriptorGetter item,
            StructuredStringBuilder sb,
            SoundDescriptor.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.Type ?? true)
                && item.Type is {} TypeItem)
            {
                sb.AppendItem(TypeItem, "Type");
            }
            if (printMask?.Category ?? true)
            {
                sb.AppendItem(item.Category.FormKeyNullable, "Category");
            }
            if (printMask?.AlternateSoundFor ?? true)
            {
                sb.AppendItem(item.AlternateSoundFor.FormKeyNullable, "AlternateSoundFor");
            }
            if (printMask?.SoundFiles?.Overall ?? true)
            {
                sb.AppendLine("SoundFiles =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.SoundFiles)
                    {
                        using (sb.Brace())
                        {
                            sb.AppendItem(subItem);
                        }
                    }
                }
            }
            if (printMask?.OutputModel ?? true)
            {
                sb.AppendItem(item.OutputModel.FormKeyNullable, "OutputModel");
            }
            if ((printMask?.String ?? true)
                && item.String is {} StringItem)
            {
                sb.AppendItem(StringItem, "String");
            }
            if (printMask?.Conditions?.Overall ?? true)
            {
                sb.AppendLine("Conditions =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Conditions)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if ((printMask?.LoopAndRumble?.Overall ?? true)
                && item.LoopAndRumble is {} LoopAndRumbleItem)
            {
                LoopAndRumbleItem?.Print(sb, "LoopAndRumble");
            }
            if (printMask?.PercentFrequencyShift ?? true)
            {
                sb.AppendItem(item.PercentFrequencyShift, "PercentFrequencyShift");
            }
            if (printMask?.PercentFrequencyVariance ?? true)
            {
                sb.AppendItem(item.PercentFrequencyVariance, "PercentFrequencyVariance");
            }
            if (printMask?.Priority ?? true)
            {
                sb.AppendItem(item.Priority, "Priority");
            }
            if (printMask?.Variance ?? true)
            {
                sb.AppendItem(item.Variance, "Variance");
            }
            if (printMask?.StaticAttenuation ?? true)
            {
                sb.AppendItem(item.StaticAttenuation, "StaticAttenuation");
            }
        }
        
        public static SoundDescriptor_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (SoundDescriptor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new SoundDescriptor_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (SoundDescriptor_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (SoundDescriptor_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ISoundDescriptorGetter? lhs,
            ISoundDescriptorGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Type) ?? true))
            {
                if (lhs.Type != rhs.Type) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Category) ?? true))
            {
                if (!lhs.Category.Equals(rhs.Category)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.AlternateSoundFor) ?? true))
            {
                if (!lhs.AlternateSoundFor.Equals(rhs.AlternateSoundFor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.SoundFiles) ?? true))
            {
                if (!lhs.SoundFiles.SequenceEqualNullable(rhs.SoundFiles)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.OutputModel) ?? true))
            {
                if (!lhs.OutputModel.Equals(rhs.OutputModel)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.String) ?? true))
            {
                if (!object.Equals(lhs.String, rhs.String)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Conditions) ?? true))
            {
                if (!lhs.Conditions.SequenceEqual(rhs.Conditions, (l, r) => ((ConditionCommon)((IConditionGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)SoundDescriptor_FieldIndex.Conditions)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.LoopAndRumble) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.LoopAndRumble, rhs.LoopAndRumble, out var lhsLoopAndRumble, out var rhsLoopAndRumble, out var isLoopAndRumbleEqual))
                {
                    if (!((SoundLoopAndRumbleCommon)((ISoundLoopAndRumbleGetter)lhsLoopAndRumble).CommonInstance()!).Equals(lhsLoopAndRumble, rhsLoopAndRumble, equalsMask?.GetSubCrystal((int)SoundDescriptor_FieldIndex.LoopAndRumble))) return false;
                }
                else if (!isLoopAndRumbleEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.PercentFrequencyShift) ?? true))
            {
                if (lhs.PercentFrequencyShift != rhs.PercentFrequencyShift) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.PercentFrequencyVariance) ?? true))
            {
                if (lhs.PercentFrequencyVariance != rhs.PercentFrequencyVariance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Priority) ?? true))
            {
                if (lhs.Priority != rhs.Priority) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Variance) ?? true))
            {
                if (lhs.Variance != rhs.Variance) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.StaticAttenuation) ?? true))
            {
                if (!lhs.StaticAttenuation.EqualsWithin(rhs.StaticAttenuation)) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundDescriptorGetter?)lhs,
                rhs: rhs as ISoundDescriptorGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ISoundDescriptorGetter?)lhs,
                rhs: rhs as ISoundDescriptorGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ISoundDescriptorGetter item)
        {
            var hash = new HashCode();
            if (item.Type is {} Typeitem)
            {
                hash.Add(Typeitem);
            }
            hash.Add(item.Category);
            hash.Add(item.AlternateSoundFor);
            hash.Add(item.SoundFiles);
            hash.Add(item.OutputModel);
            if (item.String is {} Stringitem)
            {
                hash.Add(Stringitem);
            }
            hash.Add(item.Conditions);
            if (item.LoopAndRumble is {} LoopAndRumbleitem)
            {
                hash.Add(LoopAndRumbleitem);
            }
            hash.Add(item.PercentFrequencyShift);
            hash.Add(item.PercentFrequencyVariance);
            hash.Add(item.Priority);
            hash.Add(item.Variance);
            hash.Add(item.StaticAttenuation);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundDescriptorGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ISoundDescriptorGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return SoundDescriptor.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ISoundDescriptorGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            if (FormLinkInformation.TryFactory(obj.Category, out var CategoryInfo))
            {
                yield return CategoryInfo;
            }
            if (FormLinkInformation.TryFactory(obj.AlternateSoundFor, out var AlternateSoundForInfo))
            {
                yield return AlternateSoundForInfo;
            }
            if (FormLinkInformation.TryFactory(obj.OutputModel, out var OutputModelInfo))
            {
                yield return OutputModelInfo;
            }
            foreach (var item in obj.Conditions.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ISoundDescriptorGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                foreach (var item in obj.SoundFiles)
                {
                    yield return item;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public SoundDescriptor Duplicate(
            ISoundDescriptorGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new SoundDescriptor(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundDescriptorGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ISoundDescriptorGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class SoundDescriptorSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly SoundDescriptorSetterTranslationCommon Instance = new SoundDescriptorSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ISoundDescriptorInternal item,
            ISoundDescriptorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ISoundDescriptor item,
            ISoundDescriptorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Type) ?? true))
            {
                item.Type = rhs.Type;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Category) ?? true))
            {
                item.Category.SetTo(rhs.Category.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.AlternateSoundFor) ?? true))
            {
                item.AlternateSoundFor.SetTo(rhs.AlternateSoundFor.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.SoundFiles) ?? true))
            {
                errorMask?.PushIndex((int)SoundDescriptor_FieldIndex.SoundFiles);
                try
                {
                    item.SoundFiles.SetTo(
                        rhs.SoundFiles
                            .Select(b => b.AsSetter()));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.OutputModel) ?? true))
            {
                item.OutputModel.SetTo(rhs.OutputModel.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.String) ?? true))
            {
                item.String = rhs.String?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Conditions) ?? true))
            {
                errorMask?.PushIndex((int)SoundDescriptor_FieldIndex.Conditions);
                try
                {
                    item.Conditions.SetTo(
                        rhs.Conditions
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.LoopAndRumble) ?? true))
            {
                errorMask?.PushIndex((int)SoundDescriptor_FieldIndex.LoopAndRumble);
                try
                {
                    if(rhs.LoopAndRumble is {} rhsLoopAndRumble)
                    {
                        item.LoopAndRumble = rhsLoopAndRumble.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)SoundDescriptor_FieldIndex.LoopAndRumble));
                    }
                    else
                    {
                        item.LoopAndRumble = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.PercentFrequencyShift) ?? true))
            {
                item.PercentFrequencyShift = rhs.PercentFrequencyShift;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.PercentFrequencyVariance) ?? true))
            {
                item.PercentFrequencyVariance = rhs.PercentFrequencyVariance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Priority) ?? true))
            {
                item.Priority = rhs.Priority;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.Variance) ?? true))
            {
                item.Variance = rhs.Variance;
            }
            if ((copyMask?.GetShouldTranslate((int)SoundDescriptor_FieldIndex.StaticAttenuation) ?? true))
            {
                item.StaticAttenuation = rhs.StaticAttenuation;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ISoundDescriptor item,
            ISoundDescriptorGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDescriptorInternal)item,
                rhs: (ISoundDescriptorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDescriptor)item,
                rhs: (ISoundDescriptorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDescriptorInternal)item,
                rhs: (ISoundDescriptorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ISoundDescriptor)item,
                rhs: (ISoundDescriptorGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public SoundDescriptor DeepCopy(
            ISoundDescriptorGetter item,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            SoundDescriptor ret = (SoundDescriptor)((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).GetNew();
            ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public SoundDescriptor DeepCopy(
            ISoundDescriptorGetter item,
            out SoundDescriptor.ErrorMask errorMask,
            SoundDescriptor.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            SoundDescriptor ret = (SoundDescriptor)((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).GetNew();
            ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = SoundDescriptor.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public SoundDescriptor DeepCopy(
            ISoundDescriptorGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            SoundDescriptor ret = (SoundDescriptor)((SoundDescriptorCommon)((ISoundDescriptorGetter)item).CommonInstance()!).GetNew();
            ((SoundDescriptorSetterTranslationCommon)((ISoundDescriptorGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class SoundDescriptor
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDescriptor_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundDescriptor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundDescriptorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return SoundDescriptorSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundDescriptorSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class SoundDescriptorBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly SoundDescriptorBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ISoundDescriptorGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            EnumBinaryTranslation<SoundDescriptor.DescriptorType, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Type,
                length: 4,
                header: translationParams.ConvertToCustom(RecordTypes.CNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Category,
                header: translationParams.ConvertToCustom(RecordTypes.GNAM));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.AlternateSoundFor,
                header: translationParams.ConvertToCustom(RecordTypes.SNAM));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAssetLinkGetter<SkyrimSoundAssetType>>.Instance.Write(
                writer: writer,
                items: item.SoundFiles,
                transl: (MutagenWriter subWriter, IAssetLinkGetter<SkyrimSoundAssetType> subItem) =>
                {
                    StringBinaryTranslation.Instance.Write(
                        writer: subWriter,
                        item: subItem.GivenPath,
                        header: translationParams.ConvertToCustom(RecordTypes.ANAM),
                        binaryType: StringBinaryType.NullTerminate);
                });
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.OutputModel,
                header: translationParams.ConvertToCustom(RecordTypes.ONAM));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.String,
                header: translationParams.ConvertToCustom(RecordTypes.FNAM),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IConditionGetter>.Instance.Write(
                writer: writer,
                items: item.Conditions,
                transl: (MutagenWriter subWriter, IConditionGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((ConditionBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
            if (item.LoopAndRumble is {} LoopAndRumbleItem)
            {
                ((SoundLoopAndRumbleBinaryWriteTranslation)((IBinaryItem)LoopAndRumbleItem).BinaryWriteTranslator).Write(
                    item: LoopAndRumbleItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.BNAM)))
            {
                writer.Write(item.PercentFrequencyShift);
                writer.Write(item.PercentFrequencyVariance);
                writer.Write(item.Priority);
                writer.Write(item.Variance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.StaticAttenuation,
                    integerType: FloatIntegerType.UShort,
                    multiplier: 100f,
                    divisor: null);
            }
        }

        public void Write(
            MutagenWriter writer,
            ISoundDescriptorGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.SNDR,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ISoundDescriptorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundDescriptorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ISoundDescriptorGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class SoundDescriptorBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly SoundDescriptorBinaryCreateTranslation Instance = new SoundDescriptorBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.SNDR;
        public static ParseResult FillBinaryRecordTypes(
            ISoundDescriptorInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Type = EnumBinaryTranslation<SoundDescriptor.DescriptorType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)SoundDescriptor_FieldIndex.Type;
                }
                case RecordTypeInts.GNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Category.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SoundDescriptor_FieldIndex.Category;
                }
                case RecordTypeInts.SNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.AlternateSoundFor.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SoundDescriptor_FieldIndex.AlternateSoundFor;
                }
                case RecordTypeInts.ANAM:
                {
                    item.SoundFiles.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IAssetLink<SkyrimSoundAssetType>>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: translationParams.ConvertToCustom(RecordTypes.ANAM),
                            transl: (MutagenFrame r, [MaybeNullWhen(false)] out IAssetLink<SkyrimSoundAssetType> listSubItem) =>
                            {
                                return AssetLinkBinaryTranslation.Instance.Parse<SkyrimSoundAssetType>(
                                    r,
                                    item: out listSubItem);
                            }));
                    return (int)SoundDescriptor_FieldIndex.SoundFiles;
                }
                case RecordTypeInts.ONAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.OutputModel.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)SoundDescriptor_FieldIndex.OutputModel;
                }
                case RecordTypeInts.FNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.String = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)SoundDescriptor_FieldIndex.String;
                }
                case RecordTypeInts.CTDA:
                {
                    item.Conditions.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Condition>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Condition_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Condition.TryCreateFromBinary));
                    return (int)SoundDescriptor_FieldIndex.Conditions;
                }
                case RecordTypeInts.LNAM:
                {
                    item.LoopAndRumble = Mutagen.Bethesda.Skyrim.SoundLoopAndRumble.CreateFromBinary(frame: frame);
                    return (int)SoundDescriptor_FieldIndex.LoopAndRumble;
                }
                case RecordTypeInts.BNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 1) return null;
                    item.PercentFrequencyShift = dataFrame.ReadInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.PercentFrequencyVariance = dataFrame.ReadInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.Priority = dataFrame.ReadInt8();
                    if (dataFrame.Remaining < 1) return null;
                    item.Variance = dataFrame.ReadInt8();
                    if (dataFrame.Remaining < 2) return null;
                    item.StaticAttenuation = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        integerType: FloatIntegerType.UShort,
                        multiplier: null,
                        divisor: 100f);
                    return (int)SoundDescriptor_FieldIndex.StaticAttenuation;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class SoundDescriptorBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class SoundDescriptorBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ISoundDescriptorGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => SoundDescriptor_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => SoundDescriptor_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => SoundDescriptorCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => SoundDescriptorSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => SoundDescriptorCommon.Instance.EnumerateFormLinks(this);
        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => SoundDescriptorCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => SoundDescriptorBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((SoundDescriptorBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ISoundDescriptor);


        #region Type
        private int? _TypeLocation;
        public SoundDescriptor.DescriptorType? Type => _TypeLocation.HasValue ? (SoundDescriptor.DescriptorType)BinaryPrimitives.ReadInt32LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _TypeLocation!.Value, _package.MetaData.Constants)) : default(SoundDescriptor.DescriptorType?);
        #endregion
        #region Category
        private int? _CategoryLocation;
        public IFormLinkNullableGetter<ISoundCategoryGetter> Category => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundCategoryGetter>(_package, _recordData, _CategoryLocation);
        #endregion
        #region AlternateSoundFor
        private int? _AlternateSoundForLocation;
        public IFormLinkNullableGetter<ISoundDescriptorGetter> AlternateSoundFor => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundDescriptorGetter>(_package, _recordData, _AlternateSoundForLocation);
        #endregion
        public IReadOnlyList<IAssetLinkGetter<SkyrimSoundAssetType>> SoundFiles { get; private set; } = Array.Empty<IAssetLinkGetter<SkyrimSoundAssetType>>();
        #region OutputModel
        private int? _OutputModelLocation;
        public IFormLinkNullableGetter<ISoundOutputModelGetter> OutputModel => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<ISoundOutputModelGetter>(_package, _recordData, _OutputModelLocation);
        #endregion
        #region String
        private int? _StringLocation;
        public ITranslatedStringGetter? String => _StringLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _StringLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #endregion
        public IReadOnlyList<IConditionGetter> Conditions { get; private set; } = Array.Empty<IConditionGetter>();
        #region LoopAndRumble
        private RangeInt32? _LoopAndRumbleLocation;
        public ISoundLoopAndRumbleGetter? LoopAndRumble => _LoopAndRumbleLocation.HasValue ? SoundLoopAndRumbleBinaryOverlay.SoundLoopAndRumbleFactory(_recordData.Slice(_LoopAndRumbleLocation!.Value.Min), _package) : default;
        #endregion
        private RangeInt32? _BNAMLocation;
        #region PercentFrequencyShift
        private int _PercentFrequencyShiftLocation => _BNAMLocation!.Value.Min;
        private bool _PercentFrequencyShift_IsSet => _BNAMLocation.HasValue;
        public SByte PercentFrequencyShift => _PercentFrequencyShift_IsSet ? (sbyte)_recordData.Slice(_PercentFrequencyShiftLocation, 1)[0] : default(SByte);
        #endregion
        #region PercentFrequencyVariance
        private int _PercentFrequencyVarianceLocation => _BNAMLocation!.Value.Min + 0x1;
        private bool _PercentFrequencyVariance_IsSet => _BNAMLocation.HasValue;
        public SByte PercentFrequencyVariance => _PercentFrequencyVariance_IsSet ? (sbyte)_recordData.Slice(_PercentFrequencyVarianceLocation, 1)[0] : default(SByte);
        #endregion
        #region Priority
        private int _PriorityLocation => _BNAMLocation!.Value.Min + 0x2;
        private bool _Priority_IsSet => _BNAMLocation.HasValue;
        public SByte Priority => _Priority_IsSet ? (sbyte)_recordData.Slice(_PriorityLocation, 1)[0] : default(SByte);
        #endregion
        #region Variance
        private int _VarianceLocation => _BNAMLocation!.Value.Min + 0x3;
        private bool _Variance_IsSet => _BNAMLocation.HasValue;
        public SByte Variance => _Variance_IsSet ? (sbyte)_recordData.Slice(_VarianceLocation, 1)[0] : default(SByte);
        #endregion
        #region StaticAttenuation
        private int _StaticAttenuationLocation => _BNAMLocation!.Value.Min + 0x4;
        private bool _StaticAttenuation_IsSet => _BNAMLocation.HasValue;
        public Single StaticAttenuation => _StaticAttenuation_IsSet ? FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.GetFloat(_recordData.Slice(_StaticAttenuationLocation, 2), FloatIntegerType.UShort, multiplier: null, divisor: 100f) : default(Single);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected SoundDescriptorBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ISoundDescriptorGetter SoundDescriptorFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new SoundDescriptorBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ISoundDescriptorGetter SoundDescriptorFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return SoundDescriptorFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.CNAM:
                {
                    _TypeLocation = (stream.Position - offset);
                    return (int)SoundDescriptor_FieldIndex.Type;
                }
                case RecordTypeInts.GNAM:
                {
                    _CategoryLocation = (stream.Position - offset);
                    return (int)SoundDescriptor_FieldIndex.Category;
                }
                case RecordTypeInts.SNAM:
                {
                    _AlternateSoundForLocation = (stream.Position - offset);
                    return (int)SoundDescriptor_FieldIndex.AlternateSoundFor;
                }
                case RecordTypeInts.ANAM:
                {
                    this.SoundFiles = BinaryOverlayList.FactoryByArray<IAssetLinkGetter<SkyrimSoundAssetType>>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        getter: (s, p) => new AssetLinkGetter<SkyrimSoundAssetType>(BinaryStringUtility.ProcessWholeToZString(p.MetaData.Constants.Subrecord(s).Content, encoding: p.MetaData.Encodings.NonTranslated)),
                        locs: ParseRecordLocations(
                            stream: stream,
                            constants: _package.MetaData.Constants.SubConstants,
                            trigger: RecordTypes.ANAM,
                            skipHeader: false,
                            translationParams: translationParams));
                    return (int)SoundDescriptor_FieldIndex.SoundFiles;
                }
                case RecordTypeInts.ONAM:
                {
                    _OutputModelLocation = (stream.Position - offset);
                    return (int)SoundDescriptor_FieldIndex.OutputModel;
                }
                case RecordTypeInts.FNAM:
                {
                    _StringLocation = (stream.Position - offset);
                    return (int)SoundDescriptor_FieldIndex.String;
                }
                case RecordTypeInts.CTDA:
                {
                    this.Conditions = BinaryOverlayList.FactoryByArray<IConditionGetter>(
                        mem: stream.RemainingMemory,
                        package: _package,
                        translationParams: translationParams,
                        getter: (s, p, recConv) => ConditionBinaryOverlay.ConditionFactory(new OverlayStream(s, p), p, recConv),
                        locs: ParseRecordLocations(
                            stream: stream,
                            trigger: Condition_Registration.TriggerSpecs,
                            triggersAlwaysAreNewRecords: true,
                            constants: _package.MetaData.Constants.SubConstants,
                            skipHeader: false));
                    return (int)SoundDescriptor_FieldIndex.Conditions;
                }
                case RecordTypeInts.LNAM:
                {
                    _LoopAndRumbleLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)SoundDescriptor_FieldIndex.LoopAndRumble;
                }
                case RecordTypeInts.BNAM:
                {
                    _BNAMLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    return (int)SoundDescriptor_FieldIndex.StaticAttenuation;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            SoundDescriptorMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<SoundDescriptor>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ISoundDescriptorGetter rhs) return false;
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ISoundDescriptorGetter? obj)
        {
            return ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((SoundDescriptorCommon)((ISoundDescriptorGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

