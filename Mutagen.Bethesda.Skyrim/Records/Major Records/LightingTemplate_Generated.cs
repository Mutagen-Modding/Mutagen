/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class LightingTemplate :
        SkyrimMajorRecord,
        IEquatable<ILightingTemplateGetter>,
        ILightingTemplateInternal,
        ILoquiObjectSetter<LightingTemplate>
    {
        #region Ctor
        protected LightingTemplate()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region AmbientColor
        public Color AmbientColor { get; set; } = default(Color);
        #endregion
        #region DirectionalColor
        public Color DirectionalColor { get; set; } = default(Color);
        #endregion
        #region FogNearColor
        public Color FogNearColor { get; set; } = default(Color);
        #endregion
        #region FogNear
        public Single FogNear { get; set; } = default(Single);
        #endregion
        #region FogFar
        public Single FogFar { get; set; } = default(Single);
        #endregion
        #region DirectionalRotationXY
        public Int32 DirectionalRotationXY { get; set; } = default(Int32);
        #endregion
        #region DirectionalRotationZ
        public Int32 DirectionalRotationZ { get; set; } = default(Int32);
        #endregion
        #region DirectionalFade
        public Single DirectionalFade { get; set; } = default(Single);
        #endregion
        #region FogClipDistance
        public Single FogClipDistance { get; set; } = default(Single);
        #endregion
        #region FogPower
        public Single FogPower { get; set; } = default(Single);
        #endregion
        #region AmbientColors
        public AmbientColors AmbientColors { get; set; } = new AmbientColors();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAmbientColorsGetter ILightingTemplateGetter.AmbientColors => AmbientColors;
        #endregion
        #region FogFarColor
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Color _FogFarColor;
        public Color FogFarColor
        {
            get => this._FogFarColor;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._FogFarColor = value;
            }
        }
        #endregion
        #region FogMax
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _FogMax;
        public Single FogMax
        {
            get => this._FogMax;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._FogMax = value;
            }
        }
        #endregion
        #region LightFadeStartDistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _LightFadeStartDistance;
        public Single LightFadeStartDistance
        {
            get => this._LightFadeStartDistance;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._LightFadeStartDistance = value;
            }
        }
        #endregion
        #region LightFadeEndDistance
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Single _LightFadeEndDistance;
        public Single LightFadeEndDistance
        {
            get => this._LightFadeEndDistance;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._LightFadeEndDistance = value;
            }
        }
        #endregion
        #region Unknown
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Int32 _Unknown;
        public Int32 Unknown
        {
            get => this._Unknown;
            set
            {
                this.DATADataTypeState &= ~DATADataType.Break0;
                this._Unknown = value;
            }
        }
        #endregion
        #region DirectionalAmbientColors
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private AmbientColors? _DirectionalAmbientColors;
        public AmbientColors? DirectionalAmbientColors
        {
            get => _DirectionalAmbientColors;
            set => _DirectionalAmbientColors = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IAmbientColorsGetter? ILightingTemplateGetter.DirectionalAmbientColors => this.DirectionalAmbientColors;
        #endregion
        #region DATADataTypeState
        public LightingTemplate.DATADataType DATADataTypeState { get; set; } = default(LightingTemplate.DATADataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LightingTemplateMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.AmbientColor = initialValue;
                this.DirectionalColor = initialValue;
                this.FogNearColor = initialValue;
                this.FogNear = initialValue;
                this.FogFar = initialValue;
                this.DirectionalRotationXY = initialValue;
                this.DirectionalRotationZ = initialValue;
                this.DirectionalFade = initialValue;
                this.FogClipDistance = initialValue;
                this.FogPower = initialValue;
                this.AmbientColors = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(initialValue, new AmbientColors.Mask<TItem>(initialValue));
                this.FogFarColor = initialValue;
                this.FogMax = initialValue;
                this.LightFadeStartDistance = initialValue;
                this.LightFadeEndDistance = initialValue;
                this.Unknown = initialValue;
                this.DirectionalAmbientColors = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(initialValue, new AmbientColors.Mask<TItem>(initialValue));
                this.DATADataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem AmbientColor,
                TItem DirectionalColor,
                TItem FogNearColor,
                TItem FogNear,
                TItem FogFar,
                TItem DirectionalRotationXY,
                TItem DirectionalRotationZ,
                TItem DirectionalFade,
                TItem FogClipDistance,
                TItem FogPower,
                TItem AmbientColors,
                TItem FogFarColor,
                TItem FogMax,
                TItem LightFadeStartDistance,
                TItem LightFadeEndDistance,
                TItem Unknown,
                TItem DirectionalAmbientColors,
                TItem DATADataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.AmbientColor = AmbientColor;
                this.DirectionalColor = DirectionalColor;
                this.FogNearColor = FogNearColor;
                this.FogNear = FogNear;
                this.FogFar = FogFar;
                this.DirectionalRotationXY = DirectionalRotationXY;
                this.DirectionalRotationZ = DirectionalRotationZ;
                this.DirectionalFade = DirectionalFade;
                this.FogClipDistance = FogClipDistance;
                this.FogPower = FogPower;
                this.AmbientColors = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(AmbientColors, new AmbientColors.Mask<TItem>(AmbientColors));
                this.FogFarColor = FogFarColor;
                this.FogMax = FogMax;
                this.LightFadeStartDistance = LightFadeStartDistance;
                this.LightFadeEndDistance = LightFadeEndDistance;
                this.Unknown = Unknown;
                this.DirectionalAmbientColors = new MaskItem<TItem, AmbientColors.Mask<TItem>?>(DirectionalAmbientColors, new AmbientColors.Mask<TItem>(DirectionalAmbientColors));
                this.DATADataTypeState = DATADataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem AmbientColor;
            public TItem DirectionalColor;
            public TItem FogNearColor;
            public TItem FogNear;
            public TItem FogFar;
            public TItem DirectionalRotationXY;
            public TItem DirectionalRotationZ;
            public TItem DirectionalFade;
            public TItem FogClipDistance;
            public TItem FogPower;
            public MaskItem<TItem, AmbientColors.Mask<TItem>?>? AmbientColors { get; set; }
            public TItem FogFarColor;
            public TItem FogMax;
            public TItem LightFadeStartDistance;
            public TItem LightFadeEndDistance;
            public TItem Unknown;
            public MaskItem<TItem, AmbientColors.Mask<TItem>?>? DirectionalAmbientColors { get; set; }
            public TItem DATADataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.AmbientColor, rhs.AmbientColor)) return false;
                if (!object.Equals(this.DirectionalColor, rhs.DirectionalColor)) return false;
                if (!object.Equals(this.FogNearColor, rhs.FogNearColor)) return false;
                if (!object.Equals(this.FogNear, rhs.FogNear)) return false;
                if (!object.Equals(this.FogFar, rhs.FogFar)) return false;
                if (!object.Equals(this.DirectionalRotationXY, rhs.DirectionalRotationXY)) return false;
                if (!object.Equals(this.DirectionalRotationZ, rhs.DirectionalRotationZ)) return false;
                if (!object.Equals(this.DirectionalFade, rhs.DirectionalFade)) return false;
                if (!object.Equals(this.FogClipDistance, rhs.FogClipDistance)) return false;
                if (!object.Equals(this.FogPower, rhs.FogPower)) return false;
                if (!object.Equals(this.AmbientColors, rhs.AmbientColors)) return false;
                if (!object.Equals(this.FogFarColor, rhs.FogFarColor)) return false;
                if (!object.Equals(this.FogMax, rhs.FogMax)) return false;
                if (!object.Equals(this.LightFadeStartDistance, rhs.LightFadeStartDistance)) return false;
                if (!object.Equals(this.LightFadeEndDistance, rhs.LightFadeEndDistance)) return false;
                if (!object.Equals(this.Unknown, rhs.Unknown)) return false;
                if (!object.Equals(this.DirectionalAmbientColors, rhs.DirectionalAmbientColors)) return false;
                if (!object.Equals(this.DATADataTypeState, rhs.DATADataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.AmbientColor);
                hash.Add(this.DirectionalColor);
                hash.Add(this.FogNearColor);
                hash.Add(this.FogNear);
                hash.Add(this.FogFar);
                hash.Add(this.DirectionalRotationXY);
                hash.Add(this.DirectionalRotationZ);
                hash.Add(this.DirectionalFade);
                hash.Add(this.FogClipDistance);
                hash.Add(this.FogPower);
                hash.Add(this.AmbientColors);
                hash.Add(this.FogFarColor);
                hash.Add(this.FogMax);
                hash.Add(this.LightFadeStartDistance);
                hash.Add(this.LightFadeEndDistance);
                hash.Add(this.Unknown);
                hash.Add(this.DirectionalAmbientColors);
                hash.Add(this.DATADataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.AmbientColor)) return false;
                if (!eval(this.DirectionalColor)) return false;
                if (!eval(this.FogNearColor)) return false;
                if (!eval(this.FogNear)) return false;
                if (!eval(this.FogFar)) return false;
                if (!eval(this.DirectionalRotationXY)) return false;
                if (!eval(this.DirectionalRotationZ)) return false;
                if (!eval(this.DirectionalFade)) return false;
                if (!eval(this.FogClipDistance)) return false;
                if (!eval(this.FogPower)) return false;
                if (AmbientColors != null)
                {
                    if (!eval(this.AmbientColors.Overall)) return false;
                    if (this.AmbientColors.Specific != null && !this.AmbientColors.Specific.All(eval)) return false;
                }
                if (!eval(this.FogFarColor)) return false;
                if (!eval(this.FogMax)) return false;
                if (!eval(this.LightFadeStartDistance)) return false;
                if (!eval(this.LightFadeEndDistance)) return false;
                if (!eval(this.Unknown)) return false;
                if (DirectionalAmbientColors != null)
                {
                    if (!eval(this.DirectionalAmbientColors.Overall)) return false;
                    if (this.DirectionalAmbientColors.Specific != null && !this.DirectionalAmbientColors.Specific.All(eval)) return false;
                }
                if (!eval(this.DATADataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.AmbientColor)) return true;
                if (eval(this.DirectionalColor)) return true;
                if (eval(this.FogNearColor)) return true;
                if (eval(this.FogNear)) return true;
                if (eval(this.FogFar)) return true;
                if (eval(this.DirectionalRotationXY)) return true;
                if (eval(this.DirectionalRotationZ)) return true;
                if (eval(this.DirectionalFade)) return true;
                if (eval(this.FogClipDistance)) return true;
                if (eval(this.FogPower)) return true;
                if (AmbientColors != null)
                {
                    if (eval(this.AmbientColors.Overall)) return true;
                    if (this.AmbientColors.Specific != null && this.AmbientColors.Specific.Any(eval)) return true;
                }
                if (eval(this.FogFarColor)) return true;
                if (eval(this.FogMax)) return true;
                if (eval(this.LightFadeStartDistance)) return true;
                if (eval(this.LightFadeEndDistance)) return true;
                if (eval(this.Unknown)) return true;
                if (DirectionalAmbientColors != null)
                {
                    if (eval(this.DirectionalAmbientColors.Overall)) return true;
                    if (this.DirectionalAmbientColors.Specific != null && this.DirectionalAmbientColors.Specific.Any(eval)) return true;
                }
                if (eval(this.DATADataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new LightingTemplate.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.AmbientColor = eval(this.AmbientColor);
                obj.DirectionalColor = eval(this.DirectionalColor);
                obj.FogNearColor = eval(this.FogNearColor);
                obj.FogNear = eval(this.FogNear);
                obj.FogFar = eval(this.FogFar);
                obj.DirectionalRotationXY = eval(this.DirectionalRotationXY);
                obj.DirectionalRotationZ = eval(this.DirectionalRotationZ);
                obj.DirectionalFade = eval(this.DirectionalFade);
                obj.FogClipDistance = eval(this.FogClipDistance);
                obj.FogPower = eval(this.FogPower);
                obj.AmbientColors = this.AmbientColors == null ? null : new MaskItem<R, AmbientColors.Mask<R>?>(eval(this.AmbientColors.Overall), this.AmbientColors.Specific?.Translate(eval));
                obj.FogFarColor = eval(this.FogFarColor);
                obj.FogMax = eval(this.FogMax);
                obj.LightFadeStartDistance = eval(this.LightFadeStartDistance);
                obj.LightFadeEndDistance = eval(this.LightFadeEndDistance);
                obj.Unknown = eval(this.Unknown);
                obj.DirectionalAmbientColors = this.DirectionalAmbientColors == null ? null : new MaskItem<R, AmbientColors.Mask<R>?>(eval(this.DirectionalAmbientColors.Overall), this.DirectionalAmbientColors.Specific?.Translate(eval));
                obj.DATADataTypeState = eval(this.DATADataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(LightingTemplate.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, LightingTemplate.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(LightingTemplate.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.AmbientColor ?? true)
                    {
                        sb.AppendItem(AmbientColor, "AmbientColor");
                    }
                    if (printMask?.DirectionalColor ?? true)
                    {
                        sb.AppendItem(DirectionalColor, "DirectionalColor");
                    }
                    if (printMask?.FogNearColor ?? true)
                    {
                        sb.AppendItem(FogNearColor, "FogNearColor");
                    }
                    if (printMask?.FogNear ?? true)
                    {
                        sb.AppendItem(FogNear, "FogNear");
                    }
                    if (printMask?.FogFar ?? true)
                    {
                        sb.AppendItem(FogFar, "FogFar");
                    }
                    if (printMask?.DirectionalRotationXY ?? true)
                    {
                        sb.AppendItem(DirectionalRotationXY, "DirectionalRotationXY");
                    }
                    if (printMask?.DirectionalRotationZ ?? true)
                    {
                        sb.AppendItem(DirectionalRotationZ, "DirectionalRotationZ");
                    }
                    if (printMask?.DirectionalFade ?? true)
                    {
                        sb.AppendItem(DirectionalFade, "DirectionalFade");
                    }
                    if (printMask?.FogClipDistance ?? true)
                    {
                        sb.AppendItem(FogClipDistance, "FogClipDistance");
                    }
                    if (printMask?.FogPower ?? true)
                    {
                        sb.AppendItem(FogPower, "FogPower");
                    }
                    if (printMask?.AmbientColors?.Overall ?? true)
                    {
                        AmbientColors?.Print(sb);
                    }
                    if (printMask?.FogFarColor ?? true)
                    {
                        sb.AppendItem(FogFarColor, "FogFarColor");
                    }
                    if (printMask?.FogMax ?? true)
                    {
                        sb.AppendItem(FogMax, "FogMax");
                    }
                    if (printMask?.LightFadeStartDistance ?? true)
                    {
                        sb.AppendItem(LightFadeStartDistance, "LightFadeStartDistance");
                    }
                    if (printMask?.LightFadeEndDistance ?? true)
                    {
                        sb.AppendItem(LightFadeEndDistance, "LightFadeEndDistance");
                    }
                    if (printMask?.Unknown ?? true)
                    {
                        sb.AppendItem(Unknown, "Unknown");
                    }
                    if (printMask?.DirectionalAmbientColors?.Overall ?? true)
                    {
                        DirectionalAmbientColors?.Print(sb);
                    }
                    if (printMask?.DATADataTypeState ?? true)
                    {
                        sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? AmbientColor;
            public Exception? DirectionalColor;
            public Exception? FogNearColor;
            public Exception? FogNear;
            public Exception? FogFar;
            public Exception? DirectionalRotationXY;
            public Exception? DirectionalRotationZ;
            public Exception? DirectionalFade;
            public Exception? FogClipDistance;
            public Exception? FogPower;
            public MaskItem<Exception?, AmbientColors.ErrorMask?>? AmbientColors;
            public Exception? FogFarColor;
            public Exception? FogMax;
            public Exception? LightFadeStartDistance;
            public Exception? LightFadeEndDistance;
            public Exception? Unknown;
            public MaskItem<Exception?, AmbientColors.ErrorMask?>? DirectionalAmbientColors;
            public Exception? DATADataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                LightingTemplate_FieldIndex enu = (LightingTemplate_FieldIndex)index;
                switch (enu)
                {
                    case LightingTemplate_FieldIndex.AmbientColor:
                        return AmbientColor;
                    case LightingTemplate_FieldIndex.DirectionalColor:
                        return DirectionalColor;
                    case LightingTemplate_FieldIndex.FogNearColor:
                        return FogNearColor;
                    case LightingTemplate_FieldIndex.FogNear:
                        return FogNear;
                    case LightingTemplate_FieldIndex.FogFar:
                        return FogFar;
                    case LightingTemplate_FieldIndex.DirectionalRotationXY:
                        return DirectionalRotationXY;
                    case LightingTemplate_FieldIndex.DirectionalRotationZ:
                        return DirectionalRotationZ;
                    case LightingTemplate_FieldIndex.DirectionalFade:
                        return DirectionalFade;
                    case LightingTemplate_FieldIndex.FogClipDistance:
                        return FogClipDistance;
                    case LightingTemplate_FieldIndex.FogPower:
                        return FogPower;
                    case LightingTemplate_FieldIndex.AmbientColors:
                        return AmbientColors;
                    case LightingTemplate_FieldIndex.FogFarColor:
                        return FogFarColor;
                    case LightingTemplate_FieldIndex.FogMax:
                        return FogMax;
                    case LightingTemplate_FieldIndex.LightFadeStartDistance:
                        return LightFadeStartDistance;
                    case LightingTemplate_FieldIndex.LightFadeEndDistance:
                        return LightFadeEndDistance;
                    case LightingTemplate_FieldIndex.Unknown:
                        return Unknown;
                    case LightingTemplate_FieldIndex.DirectionalAmbientColors:
                        return DirectionalAmbientColors;
                    case LightingTemplate_FieldIndex.DATADataTypeState:
                        return DATADataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                LightingTemplate_FieldIndex enu = (LightingTemplate_FieldIndex)index;
                switch (enu)
                {
                    case LightingTemplate_FieldIndex.AmbientColor:
                        this.AmbientColor = ex;
                        break;
                    case LightingTemplate_FieldIndex.DirectionalColor:
                        this.DirectionalColor = ex;
                        break;
                    case LightingTemplate_FieldIndex.FogNearColor:
                        this.FogNearColor = ex;
                        break;
                    case LightingTemplate_FieldIndex.FogNear:
                        this.FogNear = ex;
                        break;
                    case LightingTemplate_FieldIndex.FogFar:
                        this.FogFar = ex;
                        break;
                    case LightingTemplate_FieldIndex.DirectionalRotationXY:
                        this.DirectionalRotationXY = ex;
                        break;
                    case LightingTemplate_FieldIndex.DirectionalRotationZ:
                        this.DirectionalRotationZ = ex;
                        break;
                    case LightingTemplate_FieldIndex.DirectionalFade:
                        this.DirectionalFade = ex;
                        break;
                    case LightingTemplate_FieldIndex.FogClipDistance:
                        this.FogClipDistance = ex;
                        break;
                    case LightingTemplate_FieldIndex.FogPower:
                        this.FogPower = ex;
                        break;
                    case LightingTemplate_FieldIndex.AmbientColors:
                        this.AmbientColors = new MaskItem<Exception?, AmbientColors.ErrorMask?>(ex, null);
                        break;
                    case LightingTemplate_FieldIndex.FogFarColor:
                        this.FogFarColor = ex;
                        break;
                    case LightingTemplate_FieldIndex.FogMax:
                        this.FogMax = ex;
                        break;
                    case LightingTemplate_FieldIndex.LightFadeStartDistance:
                        this.LightFadeStartDistance = ex;
                        break;
                    case LightingTemplate_FieldIndex.LightFadeEndDistance:
                        this.LightFadeEndDistance = ex;
                        break;
                    case LightingTemplate_FieldIndex.Unknown:
                        this.Unknown = ex;
                        break;
                    case LightingTemplate_FieldIndex.DirectionalAmbientColors:
                        this.DirectionalAmbientColors = new MaskItem<Exception?, AmbientColors.ErrorMask?>(ex, null);
                        break;
                    case LightingTemplate_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                LightingTemplate_FieldIndex enu = (LightingTemplate_FieldIndex)index;
                switch (enu)
                {
                    case LightingTemplate_FieldIndex.AmbientColor:
                        this.AmbientColor = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.DirectionalColor:
                        this.DirectionalColor = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.FogNearColor:
                        this.FogNearColor = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.FogNear:
                        this.FogNear = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.FogFar:
                        this.FogFar = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.DirectionalRotationXY:
                        this.DirectionalRotationXY = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.DirectionalRotationZ:
                        this.DirectionalRotationZ = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.DirectionalFade:
                        this.DirectionalFade = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.FogClipDistance:
                        this.FogClipDistance = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.FogPower:
                        this.FogPower = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.AmbientColors:
                        this.AmbientColors = (MaskItem<Exception?, AmbientColors.ErrorMask?>?)obj;
                        break;
                    case LightingTemplate_FieldIndex.FogFarColor:
                        this.FogFarColor = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.FogMax:
                        this.FogMax = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.LightFadeStartDistance:
                        this.LightFadeStartDistance = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.LightFadeEndDistance:
                        this.LightFadeEndDistance = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.Unknown:
                        this.Unknown = (Exception?)obj;
                        break;
                    case LightingTemplate_FieldIndex.DirectionalAmbientColors:
                        this.DirectionalAmbientColors = (MaskItem<Exception?, AmbientColors.ErrorMask?>?)obj;
                        break;
                    case LightingTemplate_FieldIndex.DATADataTypeState:
                        this.DATADataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (AmbientColor != null) return true;
                if (DirectionalColor != null) return true;
                if (FogNearColor != null) return true;
                if (FogNear != null) return true;
                if (FogFar != null) return true;
                if (DirectionalRotationXY != null) return true;
                if (DirectionalRotationZ != null) return true;
                if (DirectionalFade != null) return true;
                if (FogClipDistance != null) return true;
                if (FogPower != null) return true;
                if (AmbientColors != null) return true;
                if (FogFarColor != null) return true;
                if (FogMax != null) return true;
                if (LightFadeStartDistance != null) return true;
                if (LightFadeEndDistance != null) return true;
                if (Unknown != null) return true;
                if (DirectionalAmbientColors != null) return true;
                if (DATADataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(AmbientColor, "AmbientColor");
                }
                {
                    sb.AppendItem(DirectionalColor, "DirectionalColor");
                }
                {
                    sb.AppendItem(FogNearColor, "FogNearColor");
                }
                {
                    sb.AppendItem(FogNear, "FogNear");
                }
                {
                    sb.AppendItem(FogFar, "FogFar");
                }
                {
                    sb.AppendItem(DirectionalRotationXY, "DirectionalRotationXY");
                }
                {
                    sb.AppendItem(DirectionalRotationZ, "DirectionalRotationZ");
                }
                {
                    sb.AppendItem(DirectionalFade, "DirectionalFade");
                }
                {
                    sb.AppendItem(FogClipDistance, "FogClipDistance");
                }
                {
                    sb.AppendItem(FogPower, "FogPower");
                }
                AmbientColors?.Print(sb);
                {
                    sb.AppendItem(FogFarColor, "FogFarColor");
                }
                {
                    sb.AppendItem(FogMax, "FogMax");
                }
                {
                    sb.AppendItem(LightFadeStartDistance, "LightFadeStartDistance");
                }
                {
                    sb.AppendItem(LightFadeEndDistance, "LightFadeEndDistance");
                }
                {
                    sb.AppendItem(Unknown, "Unknown");
                }
                DirectionalAmbientColors?.Print(sb);
                {
                    sb.AppendItem(DATADataTypeState, "DATADataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.AmbientColor = this.AmbientColor.Combine(rhs.AmbientColor);
                ret.DirectionalColor = this.DirectionalColor.Combine(rhs.DirectionalColor);
                ret.FogNearColor = this.FogNearColor.Combine(rhs.FogNearColor);
                ret.FogNear = this.FogNear.Combine(rhs.FogNear);
                ret.FogFar = this.FogFar.Combine(rhs.FogFar);
                ret.DirectionalRotationXY = this.DirectionalRotationXY.Combine(rhs.DirectionalRotationXY);
                ret.DirectionalRotationZ = this.DirectionalRotationZ.Combine(rhs.DirectionalRotationZ);
                ret.DirectionalFade = this.DirectionalFade.Combine(rhs.DirectionalFade);
                ret.FogClipDistance = this.FogClipDistance.Combine(rhs.FogClipDistance);
                ret.FogPower = this.FogPower.Combine(rhs.FogPower);
                ret.AmbientColors = this.AmbientColors.Combine(rhs.AmbientColors, (l, r) => l.Combine(r));
                ret.FogFarColor = this.FogFarColor.Combine(rhs.FogFarColor);
                ret.FogMax = this.FogMax.Combine(rhs.FogMax);
                ret.LightFadeStartDistance = this.LightFadeStartDistance.Combine(rhs.LightFadeStartDistance);
                ret.LightFadeEndDistance = this.LightFadeEndDistance.Combine(rhs.LightFadeEndDistance);
                ret.Unknown = this.Unknown.Combine(rhs.Unknown);
                ret.DirectionalAmbientColors = this.DirectionalAmbientColors.Combine(rhs.DirectionalAmbientColors, (l, r) => l.Combine(r));
                ret.DATADataTypeState = this.DATADataTypeState.Combine(rhs.DATADataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool AmbientColor;
            public bool DirectionalColor;
            public bool FogNearColor;
            public bool FogNear;
            public bool FogFar;
            public bool DirectionalRotationXY;
            public bool DirectionalRotationZ;
            public bool DirectionalFade;
            public bool FogClipDistance;
            public bool FogPower;
            public AmbientColors.TranslationMask? AmbientColors;
            public bool FogFarColor;
            public bool FogMax;
            public bool LightFadeStartDistance;
            public bool LightFadeEndDistance;
            public bool Unknown;
            public AmbientColors.TranslationMask? DirectionalAmbientColors;
            public bool DATADataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.AmbientColor = defaultOn;
                this.DirectionalColor = defaultOn;
                this.FogNearColor = defaultOn;
                this.FogNear = defaultOn;
                this.FogFar = defaultOn;
                this.DirectionalRotationXY = defaultOn;
                this.DirectionalRotationZ = defaultOn;
                this.DirectionalFade = defaultOn;
                this.FogClipDistance = defaultOn;
                this.FogPower = defaultOn;
                this.FogFarColor = defaultOn;
                this.FogMax = defaultOn;
                this.LightFadeStartDistance = defaultOn;
                this.LightFadeEndDistance = defaultOn;
                this.Unknown = defaultOn;
                this.DATADataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((AmbientColor, null));
                ret.Add((DirectionalColor, null));
                ret.Add((FogNearColor, null));
                ret.Add((FogNear, null));
                ret.Add((FogFar, null));
                ret.Add((DirectionalRotationXY, null));
                ret.Add((DirectionalRotationZ, null));
                ret.Add((DirectionalFade, null));
                ret.Add((FogClipDistance, null));
                ret.Add((FogPower, null));
                ret.Add((AmbientColors != null ? AmbientColors.OnOverall : DefaultOn, AmbientColors?.GetCrystal()));
                ret.Add((FogFarColor, null));
                ret.Add((FogMax, null));
                ret.Add((LightFadeStartDistance, null));
                ret.Add((LightFadeEndDistance, null));
                ret.Add((Unknown, null));
                ret.Add((DirectionalAmbientColors != null ? DirectionalAmbientColors.OnOverall : DefaultOn, DirectionalAmbientColors?.GetCrystal()));
                ret.Add((DATADataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = LightingTemplate_Registration.TriggeringRecordType;
        public LightingTemplate(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private LightingTemplate(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal LightingTemplate(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public LightingTemplate(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public LightingTemplate(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<LightingTemplate>.ToString(this);
        }

        protected override Type LinkType => typeof(ILightingTemplate);

        [Flags]
        public enum DATADataType
        {
            Break0 = 1
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILightingTemplateGetter rhs) return false;
            return ((LightingTemplateCommon)((ILightingTemplateGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILightingTemplateGetter? obj)
        {
            return ((LightingTemplateCommon)((ILightingTemplateGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LightingTemplateCommon)((ILightingTemplateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LightingTemplateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LightingTemplateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static LightingTemplate CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new LightingTemplate();
            ((LightingTemplateSetterCommon)((ILightingTemplateGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out LightingTemplate item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((LightingTemplateSetterCommon)((ILightingTemplateGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new LightingTemplate GetNew()
        {
            return new LightingTemplate();
        }

    }
    #endregion

    #region Interface
    public partial interface ILightingTemplate :
        ILightingTemplateGetter,
        ILoquiObjectSetter<ILightingTemplateInternal>,
        ISkyrimMajorRecordInternal
    {
        new Color AmbientColor { get; set; }
        new Color DirectionalColor { get; set; }
        new Color FogNearColor { get; set; }
        new Single FogNear { get; set; }
        new Single FogFar { get; set; }
        new Int32 DirectionalRotationXY { get; set; }
        new Int32 DirectionalRotationZ { get; set; }
        new Single DirectionalFade { get; set; }
        new Single FogClipDistance { get; set; }
        new Single FogPower { get; set; }
        new AmbientColors AmbientColors { get; set; }
        new Color FogFarColor { get; set; }
        new Single FogMax { get; set; }
        new Single LightFadeStartDistance { get; set; }
        new Single LightFadeEndDistance { get; set; }
        new Int32 Unknown { get; set; }
        new AmbientColors? DirectionalAmbientColors { get; set; }
        new LightingTemplate.DATADataType DATADataTypeState { get; set; }
    }

    public partial interface ILightingTemplateInternal :
        ISkyrimMajorRecordInternal,
        ILightingTemplate,
        ILightingTemplateGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.LGTM)]
    public partial interface ILightingTemplateGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<ILightingTemplateGetter>,
        IMapsToGetter<ILightingTemplateGetter>
    {
        static new ILoquiRegistration StaticRegistration => LightingTemplate_Registration.Instance;
        Color AmbientColor { get; }
        Color DirectionalColor { get; }
        Color FogNearColor { get; }
        Single FogNear { get; }
        Single FogFar { get; }
        Int32 DirectionalRotationXY { get; }
        Int32 DirectionalRotationZ { get; }
        Single DirectionalFade { get; }
        Single FogClipDistance { get; }
        Single FogPower { get; }
        IAmbientColorsGetter AmbientColors { get; }
        Color FogFarColor { get; }
        Single FogMax { get; }
        Single LightFadeStartDistance { get; }
        Single LightFadeEndDistance { get; }
        Int32 Unknown { get; }
        IAmbientColorsGetter? DirectionalAmbientColors { get; }
        LightingTemplate.DATADataType DATADataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class LightingTemplateMixIn
    {
        public static void Clear(this ILightingTemplateInternal item)
        {
            ((LightingTemplateSetterCommon)((ILightingTemplateGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static LightingTemplate.Mask<bool> GetEqualsMask(
            this ILightingTemplateGetter item,
            ILightingTemplateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((LightingTemplateCommon)((ILightingTemplateGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ILightingTemplateGetter item,
            string? name = null,
            LightingTemplate.Mask<bool>? printMask = null)
        {
            return ((LightingTemplateCommon)((ILightingTemplateGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ILightingTemplateGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LightingTemplate.Mask<bool>? printMask = null)
        {
            ((LightingTemplateCommon)((ILightingTemplateGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ILightingTemplateGetter item,
            ILightingTemplateGetter rhs,
            LightingTemplate.TranslationMask? equalsMask = null)
        {
            return ((LightingTemplateCommon)((ILightingTemplateGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ILightingTemplateInternal lhs,
            ILightingTemplateGetter rhs,
            out LightingTemplate.ErrorMask errorMask,
            LightingTemplate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((LightingTemplateSetterTranslationCommon)((ILightingTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = LightingTemplate.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ILightingTemplateInternal lhs,
            ILightingTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((LightingTemplateSetterTranslationCommon)((ILightingTemplateGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static LightingTemplate DeepCopy(
            this ILightingTemplateGetter item,
            LightingTemplate.TranslationMask? copyMask = null)
        {
            return ((LightingTemplateSetterTranslationCommon)((ILightingTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static LightingTemplate DeepCopy(
            this ILightingTemplateGetter item,
            out LightingTemplate.ErrorMask errorMask,
            LightingTemplate.TranslationMask? copyMask = null)
        {
            return ((LightingTemplateSetterTranslationCommon)((ILightingTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static LightingTemplate DeepCopy(
            this ILightingTemplateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((LightingTemplateSetterTranslationCommon)((ILightingTemplateGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static LightingTemplate Duplicate(
            this ILightingTemplateGetter item,
            FormKey formKey,
            LightingTemplate.TranslationMask? copyMask = null)
        {
            return ((LightingTemplateCommon)((ILightingTemplateGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static LightingTemplate Duplicate(
            this ILightingTemplateGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((LightingTemplateCommon)((ILightingTemplateGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ILightingTemplateInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((LightingTemplateSetterCommon)((ILightingTemplateGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum LightingTemplate_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        AmbientColor = 7,
        DirectionalColor = 8,
        FogNearColor = 9,
        FogNear = 10,
        FogFar = 11,
        DirectionalRotationXY = 12,
        DirectionalRotationZ = 13,
        DirectionalFade = 14,
        FogClipDistance = 15,
        FogPower = 16,
        AmbientColors = 17,
        FogFarColor = 18,
        FogMax = 19,
        LightFadeStartDistance = 20,
        LightFadeEndDistance = 21,
        Unknown = 22,
        DirectionalAmbientColors = 23,
        DATADataTypeState = 24,
    }
    #endregion

    #region Registration
    internal partial class LightingTemplate_Registration : ILoquiRegistration
    {
        public static readonly LightingTemplate_Registration Instance = new LightingTemplate_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 18;

        public const ushort FieldCount = 25;

        public static readonly Type MaskType = typeof(LightingTemplate.Mask<>);

        public static readonly Type ErrorMaskType = typeof(LightingTemplate.ErrorMask);

        public static readonly Type ClassType = typeof(LightingTemplate);

        public static readonly Type GetterType = typeof(ILightingTemplateGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ILightingTemplate);

        public static readonly Type? InternalSetterType = typeof(ILightingTemplateInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.LightingTemplate";

        public const string Name = "LightingTemplate";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.LGTM;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.LGTM);
            var all = RecordCollection.Factory(
                RecordTypes.LGTM,
                RecordTypes.DATA,
                RecordTypes.DALC);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(LightingTemplateBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class LightingTemplateSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly LightingTemplateSetterCommon Instance = new LightingTemplateSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ILightingTemplateInternal item)
        {
            ClearPartial();
            item.AmbientColor = default(Color);
            item.DirectionalColor = default(Color);
            item.FogNearColor = default(Color);
            item.FogNear = default(Single);
            item.FogFar = default(Single);
            item.DirectionalRotationXY = default(Int32);
            item.DirectionalRotationZ = default(Int32);
            item.DirectionalFade = default(Single);
            item.FogClipDistance = default(Single);
            item.FogPower = default(Single);
            item.AmbientColors.Clear();
            item.FogFarColor = default(Color);
            item.FogMax = default(Single);
            item.LightFadeStartDistance = default(Single);
            item.LightFadeEndDistance = default(Single);
            item.Unknown = default(Int32);
            item.DirectionalAmbientColors = null;
            item.DATADataTypeState = default(LightingTemplate.DATADataType);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ILightingTemplateInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ILightingTemplateInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ILightingTemplate obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ILightingTemplateInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ILightingTemplateInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: LightingTemplateBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: LightingTemplateBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (LightingTemplate)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (LightingTemplate)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class LightingTemplateCommon : SkyrimMajorRecordCommon
    {
        public new static readonly LightingTemplateCommon Instance = new LightingTemplateCommon();

        public LightingTemplate.Mask<bool> GetEqualsMask(
            ILightingTemplateGetter item,
            ILightingTemplateGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new LightingTemplate.Mask<bool>(false);
            ((LightingTemplateCommon)((ILightingTemplateGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ILightingTemplateGetter item,
            ILightingTemplateGetter rhs,
            LightingTemplate.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.AmbientColor = item.AmbientColor.ColorOnlyEquals(rhs.AmbientColor);
            ret.DirectionalColor = item.DirectionalColor.ColorOnlyEquals(rhs.DirectionalColor);
            ret.FogNearColor = item.FogNearColor.ColorOnlyEquals(rhs.FogNearColor);
            ret.FogNear = item.FogNear.EqualsWithin(rhs.FogNear);
            ret.FogFar = item.FogFar.EqualsWithin(rhs.FogFar);
            ret.DirectionalRotationXY = item.DirectionalRotationXY == rhs.DirectionalRotationXY;
            ret.DirectionalRotationZ = item.DirectionalRotationZ == rhs.DirectionalRotationZ;
            ret.DirectionalFade = item.DirectionalFade.EqualsWithin(rhs.DirectionalFade);
            ret.FogClipDistance = item.FogClipDistance.EqualsWithin(rhs.FogClipDistance);
            ret.FogPower = item.FogPower.EqualsWithin(rhs.FogPower);
            ret.AmbientColors = MaskItemExt.Factory(item.AmbientColors.GetEqualsMask(rhs.AmbientColors, include), include);
            ret.FogFarColor = item.FogFarColor.ColorOnlyEquals(rhs.FogFarColor);
            ret.FogMax = item.FogMax.EqualsWithin(rhs.FogMax);
            ret.LightFadeStartDistance = item.LightFadeStartDistance.EqualsWithin(rhs.LightFadeStartDistance);
            ret.LightFadeEndDistance = item.LightFadeEndDistance.EqualsWithin(rhs.LightFadeEndDistance);
            ret.Unknown = item.Unknown == rhs.Unknown;
            ret.DirectionalAmbientColors = EqualsMaskHelper.EqualsHelper(
                item.DirectionalAmbientColors,
                rhs.DirectionalAmbientColors,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DATADataTypeState = item.DATADataTypeState == rhs.DATADataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ILightingTemplateGetter item,
            string? name = null,
            LightingTemplate.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ILightingTemplateGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            LightingTemplate.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"LightingTemplate =>");
            }
            else
            {
                sb.AppendLine($"{name} (LightingTemplate) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ILightingTemplateGetter item,
            StructuredStringBuilder sb,
            LightingTemplate.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.AmbientColor ?? true)
            {
                sb.AppendItem(item.AmbientColor, "AmbientColor");
            }
            if (printMask?.DirectionalColor ?? true)
            {
                sb.AppendItem(item.DirectionalColor, "DirectionalColor");
            }
            if (printMask?.FogNearColor ?? true)
            {
                sb.AppendItem(item.FogNearColor, "FogNearColor");
            }
            if (printMask?.FogNear ?? true)
            {
                sb.AppendItem(item.FogNear, "FogNear");
            }
            if (printMask?.FogFar ?? true)
            {
                sb.AppendItem(item.FogFar, "FogFar");
            }
            if (printMask?.DirectionalRotationXY ?? true)
            {
                sb.AppendItem(item.DirectionalRotationXY, "DirectionalRotationXY");
            }
            if (printMask?.DirectionalRotationZ ?? true)
            {
                sb.AppendItem(item.DirectionalRotationZ, "DirectionalRotationZ");
            }
            if (printMask?.DirectionalFade ?? true)
            {
                sb.AppendItem(item.DirectionalFade, "DirectionalFade");
            }
            if (printMask?.FogClipDistance ?? true)
            {
                sb.AppendItem(item.FogClipDistance, "FogClipDistance");
            }
            if (printMask?.FogPower ?? true)
            {
                sb.AppendItem(item.FogPower, "FogPower");
            }
            if (printMask?.AmbientColors?.Overall ?? true)
            {
                item.AmbientColors?.Print(sb, "AmbientColors");
            }
            if (printMask?.FogFarColor ?? true)
            {
                sb.AppendItem(item.FogFarColor, "FogFarColor");
            }
            if (printMask?.FogMax ?? true)
            {
                sb.AppendItem(item.FogMax, "FogMax");
            }
            if (printMask?.LightFadeStartDistance ?? true)
            {
                sb.AppendItem(item.LightFadeStartDistance, "LightFadeStartDistance");
            }
            if (printMask?.LightFadeEndDistance ?? true)
            {
                sb.AppendItem(item.LightFadeEndDistance, "LightFadeEndDistance");
            }
            if (printMask?.Unknown ?? true)
            {
                sb.AppendItem(item.Unknown, "Unknown");
            }
            if ((printMask?.DirectionalAmbientColors?.Overall ?? true)
                && item.DirectionalAmbientColors is {} DirectionalAmbientColorsItem)
            {
                DirectionalAmbientColorsItem?.Print(sb, "DirectionalAmbientColors");
            }
            if (printMask?.DATADataTypeState ?? true)
            {
                sb.AppendItem(item.DATADataTypeState, "DATADataTypeState");
            }
        }
        
        public static LightingTemplate_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LightingTemplate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (LightingTemplate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (LightingTemplate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (LightingTemplate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (LightingTemplate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (LightingTemplate_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (LightingTemplate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new LightingTemplate_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (LightingTemplate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (LightingTemplate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (LightingTemplate_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (LightingTemplate_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ILightingTemplateGetter? lhs,
            ILightingTemplateGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.AmbientColor) ?? true))
            {
                if (!lhs.AmbientColor.ColorOnlyEquals(rhs.AmbientColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DirectionalColor) ?? true))
            {
                if (!lhs.DirectionalColor.ColorOnlyEquals(rhs.DirectionalColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogNearColor) ?? true))
            {
                if (!lhs.FogNearColor.ColorOnlyEquals(rhs.FogNearColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogNear) ?? true))
            {
                if (!lhs.FogNear.EqualsWithin(rhs.FogNear)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogFar) ?? true))
            {
                if (!lhs.FogFar.EqualsWithin(rhs.FogFar)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DirectionalRotationXY) ?? true))
            {
                if (lhs.DirectionalRotationXY != rhs.DirectionalRotationXY) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DirectionalRotationZ) ?? true))
            {
                if (lhs.DirectionalRotationZ != rhs.DirectionalRotationZ) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DirectionalFade) ?? true))
            {
                if (!lhs.DirectionalFade.EqualsWithin(rhs.DirectionalFade)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogClipDistance) ?? true))
            {
                if (!lhs.FogClipDistance.EqualsWithin(rhs.FogClipDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogPower) ?? true))
            {
                if (!lhs.FogPower.EqualsWithin(rhs.FogPower)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.AmbientColors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.AmbientColors, rhs.AmbientColors, out var lhsAmbientColors, out var rhsAmbientColors, out var isAmbientColorsEqual))
                {
                    if (!((AmbientColorsCommon)((IAmbientColorsGetter)lhsAmbientColors).CommonInstance()!).Equals(lhsAmbientColors, rhsAmbientColors, equalsMask?.GetSubCrystal((int)LightingTemplate_FieldIndex.AmbientColors))) return false;
                }
                else if (!isAmbientColorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogFarColor) ?? true))
            {
                if (!lhs.FogFarColor.ColorOnlyEquals(rhs.FogFarColor)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogMax) ?? true))
            {
                if (!lhs.FogMax.EqualsWithin(rhs.FogMax)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.LightFadeStartDistance) ?? true))
            {
                if (!lhs.LightFadeStartDistance.EqualsWithin(rhs.LightFadeStartDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.LightFadeEndDistance) ?? true))
            {
                if (!lhs.LightFadeEndDistance.EqualsWithin(rhs.LightFadeEndDistance)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.Unknown) ?? true))
            {
                if (lhs.Unknown != rhs.Unknown) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DirectionalAmbientColors) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DirectionalAmbientColors, rhs.DirectionalAmbientColors, out var lhsDirectionalAmbientColors, out var rhsDirectionalAmbientColors, out var isDirectionalAmbientColorsEqual))
                {
                    if (!((AmbientColorsCommon)((IAmbientColorsGetter)lhsDirectionalAmbientColors).CommonInstance()!).Equals(lhsDirectionalAmbientColors, rhsDirectionalAmbientColors, equalsMask?.GetSubCrystal((int)LightingTemplate_FieldIndex.DirectionalAmbientColors))) return false;
                }
                else if (!isDirectionalAmbientColorsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DATADataTypeState) ?? true))
            {
                if (lhs.DATADataTypeState != rhs.DATADataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILightingTemplateGetter?)lhs,
                rhs: rhs as ILightingTemplateGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ILightingTemplateGetter?)lhs,
                rhs: rhs as ILightingTemplateGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ILightingTemplateGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.AmbientColor);
            hash.Add(item.DirectionalColor);
            hash.Add(item.FogNearColor);
            hash.Add(item.FogNear);
            hash.Add(item.FogFar);
            hash.Add(item.DirectionalRotationXY);
            hash.Add(item.DirectionalRotationZ);
            hash.Add(item.DirectionalFade);
            hash.Add(item.FogClipDistance);
            hash.Add(item.FogPower);
            hash.Add(item.AmbientColors);
            hash.Add(item.FogFarColor);
            hash.Add(item.FogMax);
            hash.Add(item.LightFadeStartDistance);
            hash.Add(item.LightFadeEndDistance);
            hash.Add(item.Unknown);
            if (item.DirectionalAmbientColors is {} DirectionalAmbientColorsitem)
            {
                hash.Add(DirectionalAmbientColorsitem);
            }
            hash.Add(item.DATADataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ILightingTemplateGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ILightingTemplateGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return LightingTemplate.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ILightingTemplateGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public LightingTemplate Duplicate(
            ILightingTemplateGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new LightingTemplate(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILightingTemplateGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ILightingTemplateGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class LightingTemplateSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly LightingTemplateSetterTranslationCommon Instance = new LightingTemplateSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ILightingTemplateInternal item,
            ILightingTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ILightingTemplate item,
            ILightingTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.AmbientColor) ?? true))
            {
                item.AmbientColor = rhs.AmbientColor;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DirectionalColor) ?? true))
            {
                item.DirectionalColor = rhs.DirectionalColor;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogNearColor) ?? true))
            {
                item.FogNearColor = rhs.FogNearColor;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogNear) ?? true))
            {
                item.FogNear = rhs.FogNear;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogFar) ?? true))
            {
                item.FogFar = rhs.FogFar;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DirectionalRotationXY) ?? true))
            {
                item.DirectionalRotationXY = rhs.DirectionalRotationXY;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DirectionalRotationZ) ?? true))
            {
                item.DirectionalRotationZ = rhs.DirectionalRotationZ;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DirectionalFade) ?? true))
            {
                item.DirectionalFade = rhs.DirectionalFade;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogClipDistance) ?? true))
            {
                item.FogClipDistance = rhs.FogClipDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogPower) ?? true))
            {
                item.FogPower = rhs.FogPower;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.AmbientColors) ?? true))
            {
                errorMask?.PushIndex((int)LightingTemplate_FieldIndex.AmbientColors);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.AmbientColors) ?? true))
                    {
                        item.AmbientColors = rhs.AmbientColors.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)LightingTemplate_FieldIndex.AmbientColors),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogFarColor) ?? true))
            {
                item.FogFarColor = rhs.FogFarColor;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.FogMax) ?? true))
            {
                item.FogMax = rhs.FogMax;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.LightFadeStartDistance) ?? true))
            {
                item.LightFadeStartDistance = rhs.LightFadeStartDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.LightFadeEndDistance) ?? true))
            {
                item.LightFadeEndDistance = rhs.LightFadeEndDistance;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.Unknown) ?? true))
            {
                item.Unknown = rhs.Unknown;
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DirectionalAmbientColors) ?? true))
            {
                errorMask?.PushIndex((int)LightingTemplate_FieldIndex.DirectionalAmbientColors);
                try
                {
                    if(rhs.DirectionalAmbientColors is {} rhsDirectionalAmbientColors)
                    {
                        item.DirectionalAmbientColors = rhsDirectionalAmbientColors.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)LightingTemplate_FieldIndex.DirectionalAmbientColors));
                    }
                    else
                    {
                        item.DirectionalAmbientColors = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)LightingTemplate_FieldIndex.DATADataTypeState) ?? true))
            {
                item.DATADataTypeState = rhs.DATADataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ILightingTemplate item,
            ILightingTemplateGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILightingTemplateInternal)item,
                rhs: (ILightingTemplateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILightingTemplate)item,
                rhs: (ILightingTemplateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILightingTemplateInternal)item,
                rhs: (ILightingTemplateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ILightingTemplate)item,
                rhs: (ILightingTemplateGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public LightingTemplate DeepCopy(
            ILightingTemplateGetter item,
            LightingTemplate.TranslationMask? copyMask = null)
        {
            LightingTemplate ret = (LightingTemplate)((LightingTemplateCommon)((ILightingTemplateGetter)item).CommonInstance()!).GetNew();
            ((LightingTemplateSetterTranslationCommon)((ILightingTemplateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public LightingTemplate DeepCopy(
            ILightingTemplateGetter item,
            out LightingTemplate.ErrorMask errorMask,
            LightingTemplate.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            LightingTemplate ret = (LightingTemplate)((LightingTemplateCommon)((ILightingTemplateGetter)item).CommonInstance()!).GetNew();
            ((LightingTemplateSetterTranslationCommon)((ILightingTemplateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = LightingTemplate.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public LightingTemplate DeepCopy(
            ILightingTemplateGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            LightingTemplate ret = (LightingTemplate)((LightingTemplateCommon)((ILightingTemplateGetter)item).CommonInstance()!).GetNew();
            ((LightingTemplateSetterTranslationCommon)((ILightingTemplateGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class LightingTemplate
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LightingTemplate_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => LightingTemplate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LightingTemplateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return LightingTemplateSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LightingTemplateSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class LightingTemplateBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly LightingTemplateBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            ILightingTemplateGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            ILightingTemplateGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.DATA)))
            {
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.AmbientColor);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.DirectionalColor);
                ColorBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.FogNearColor);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogNear);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogFar);
                writer.Write(item.DirectionalRotationXY);
                writer.Write(item.DirectionalRotationZ);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.DirectionalFade);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogClipDistance);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.FogPower);
                var AmbientColorsItem = item.AmbientColors;
                ((AmbientColorsBinaryWriteTranslation)((IBinaryItem)AmbientColorsItem).BinaryWriteTranslator).Write(
                    item: AmbientColorsItem,
                    writer: writer,
                    translationParams: translationParams);
                if (!item.DATADataTypeState.HasFlag(LightingTemplate.DATADataType.Break0))
                {
                    ColorBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.FogFarColor);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.FogMax);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.LightFadeStartDistance);
                    FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                        writer: writer,
                        item: item.LightFadeEndDistance);
                    writer.Write(item.Unknown);
                }
            }
            if (item.DirectionalAmbientColors is {} DirectionalAmbientColorsItem)
            {
                using (HeaderExport.Subrecord(writer, RecordTypes.DALC))
                {
                    ((AmbientColorsBinaryWriteTranslation)((IBinaryItem)DirectionalAmbientColorsItem).BinaryWriteTranslator).Write(
                        item: DirectionalAmbientColorsItem,
                        writer: writer,
                        translationParams: translationParams);
                }
            }
        }

        public void Write(
            MutagenWriter writer,
            ILightingTemplateGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.LGTM,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ILightingTemplateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILightingTemplateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ILightingTemplateGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class LightingTemplateBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly LightingTemplateBinaryCreateTranslation Instance = new LightingTemplateBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.LGTM;
        public static void FillBinaryStructs(
            ILightingTemplateInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            ILightingTemplateInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.AmbientColor = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.DirectionalColor = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogNearColor = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogNear = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogFar = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.DirectionalRotationXY = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.DirectionalRotationZ = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.DirectionalFade = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogClipDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogPower = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Complete) return null;
                    item.AmbientColors = Mutagen.Bethesda.Skyrim.AmbientColors.CreateFromBinary(frame: dataFrame);
                    if (dataFrame.Complete)
                    {
                        item.DATADataTypeState |= LightingTemplate.DATADataType.Break0;
                        return (int)LightingTemplate_FieldIndex.AmbientColors;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.FogFarColor = dataFrame.ReadColor(ColorBinaryType.Alpha);
                    if (dataFrame.Remaining < 4) return null;
                    item.FogMax = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.LightFadeStartDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.LightFadeEndDistance = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.Unknown = dataFrame.ReadInt32();
                    return (int)LightingTemplate_FieldIndex.Unknown;
                }
                case RecordTypeInts.DALC:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength; // Skip header
                    item.DirectionalAmbientColors = Mutagen.Bethesda.Skyrim.AmbientColors.CreateFromBinary(frame: frame);
                    return (int)LightingTemplate_FieldIndex.DirectionalAmbientColors;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class LightingTemplateBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class LightingTemplateBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ILightingTemplateGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => LightingTemplate_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => LightingTemplate_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => LightingTemplateCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => LightingTemplateSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => LightingTemplateBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((LightingTemplateBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ILightingTemplate);


        private RangeInt32? _DATALocation;
        public LightingTemplate.DATADataType DATADataTypeState { get; private set; }
        #region AmbientColor
        private int _AmbientColorLocation => _DATALocation!.Value.Min;
        private bool _AmbientColor_IsSet => _DATALocation.HasValue;
        public Color AmbientColor => _AmbientColor_IsSet ? _recordData.Slice(_AmbientColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region DirectionalColor
        private int _DirectionalColorLocation => _DATALocation!.Value.Min + 0x4;
        private bool _DirectionalColor_IsSet => _DATALocation.HasValue;
        public Color DirectionalColor => _DirectionalColor_IsSet ? _recordData.Slice(_DirectionalColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region FogNearColor
        private int _FogNearColorLocation => _DATALocation!.Value.Min + 0x8;
        private bool _FogNearColor_IsSet => _DATALocation.HasValue;
        public Color FogNearColor => _FogNearColor_IsSet ? _recordData.Slice(_FogNearColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region FogNear
        private int _FogNearLocation => _DATALocation!.Value.Min + 0xC;
        private bool _FogNear_IsSet => _DATALocation.HasValue;
        public Single FogNear => _FogNear_IsSet ? _recordData.Slice(_FogNearLocation, 4).Float() : default(Single);
        #endregion
        #region FogFar
        private int _FogFarLocation => _DATALocation!.Value.Min + 0x10;
        private bool _FogFar_IsSet => _DATALocation.HasValue;
        public Single FogFar => _FogFar_IsSet ? _recordData.Slice(_FogFarLocation, 4).Float() : default(Single);
        #endregion
        #region DirectionalRotationXY
        private int _DirectionalRotationXYLocation => _DATALocation!.Value.Min + 0x14;
        private bool _DirectionalRotationXY_IsSet => _DATALocation.HasValue;
        public Int32 DirectionalRotationXY => _DirectionalRotationXY_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_DirectionalRotationXYLocation, 4)) : default(Int32);
        #endregion
        #region DirectionalRotationZ
        private int _DirectionalRotationZLocation => _DATALocation!.Value.Min + 0x18;
        private bool _DirectionalRotationZ_IsSet => _DATALocation.HasValue;
        public Int32 DirectionalRotationZ => _DirectionalRotationZ_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_DirectionalRotationZLocation, 4)) : default(Int32);
        #endregion
        #region DirectionalFade
        private int _DirectionalFadeLocation => _DATALocation!.Value.Min + 0x1C;
        private bool _DirectionalFade_IsSet => _DATALocation.HasValue;
        public Single DirectionalFade => _DirectionalFade_IsSet ? _recordData.Slice(_DirectionalFadeLocation, 4).Float() : default(Single);
        #endregion
        #region FogClipDistance
        private int _FogClipDistanceLocation => _DATALocation!.Value.Min + 0x20;
        private bool _FogClipDistance_IsSet => _DATALocation.HasValue;
        public Single FogClipDistance => _FogClipDistance_IsSet ? _recordData.Slice(_FogClipDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region FogPower
        private int _FogPowerLocation => _DATALocation!.Value.Min + 0x24;
        private bool _FogPower_IsSet => _DATALocation.HasValue;
        public Single FogPower => _FogPower_IsSet ? _recordData.Slice(_FogPowerLocation, 4).Float() : default(Single);
        #endregion
        #region AmbientColors
        private int _AmbientColorsLocation => _DATALocation!.Value.Min + 0x28;
        private bool _AmbientColors_IsSet => _DATALocation.HasValue;
        private IAmbientColorsGetter? _AmbientColors => _AmbientColors_IsSet ? AmbientColorsBinaryOverlay.AmbientColorsFactory(_recordData.Slice(_AmbientColorsLocation).Slice(0, _DATALocation!.Value.Width - 40), _package) : default;
        public IAmbientColorsGetter AmbientColors => _AmbientColors ?? new AmbientColors();
        #endregion
        #region FogFarColor
        private int _FogFarColorLocation => _DATALocation!.Value.Min + 0x48;
        private bool _FogFarColor_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(LightingTemplate.DATADataType.Break0);
        public Color FogFarColor => _FogFarColor_IsSet ? _recordData.Slice(_FogFarColorLocation, 4).ReadColor(ColorBinaryType.Alpha) : default(Color);
        #endregion
        #region FogMax
        private int _FogMaxLocation => _DATALocation!.Value.Min + 0x4C;
        private bool _FogMax_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(LightingTemplate.DATADataType.Break0);
        public Single FogMax => _FogMax_IsSet ? _recordData.Slice(_FogMaxLocation, 4).Float() : default(Single);
        #endregion
        #region LightFadeStartDistance
        private int _LightFadeStartDistanceLocation => _DATALocation!.Value.Min + 0x50;
        private bool _LightFadeStartDistance_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(LightingTemplate.DATADataType.Break0);
        public Single LightFadeStartDistance => _LightFadeStartDistance_IsSet ? _recordData.Slice(_LightFadeStartDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region LightFadeEndDistance
        private int _LightFadeEndDistanceLocation => _DATALocation!.Value.Min + 0x54;
        private bool _LightFadeEndDistance_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(LightingTemplate.DATADataType.Break0);
        public Single LightFadeEndDistance => _LightFadeEndDistance_IsSet ? _recordData.Slice(_LightFadeEndDistanceLocation, 4).Float() : default(Single);
        #endregion
        #region Unknown
        private int _UnknownLocation => _DATALocation!.Value.Min + 0x58;
        private bool _Unknown_IsSet => _DATALocation.HasValue && !DATADataTypeState.HasFlag(LightingTemplate.DATADataType.Break0);
        public Int32 Unknown => _Unknown_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_UnknownLocation, 4)) : default(Int32);
        #endregion
        public IAmbientColorsGetter? DirectionalAmbientColors { get; private set; }
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected LightingTemplateBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ILightingTemplateGetter LightingTemplateFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new LightingTemplateBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ILightingTemplateGetter LightingTemplateFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return LightingTemplateFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.DATA:
                {
                    _DATALocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x48)
                    {
                        this.DATADataTypeState |= LightingTemplate.DATADataType.Break0;
                    }
                    return (int)LightingTemplate_FieldIndex.Unknown;
                }
                case RecordTypeInts.DALC:
                {
                    stream.Position += _package.MetaData.Constants.SubConstants.HeaderLength;
                    this.DirectionalAmbientColors = AmbientColorsBinaryOverlay.AmbientColorsFactory(
                        stream: stream,
                        package: _package,
                        finalPos: finalPos,
                        translationParams: translationParams.DoNotShortCircuit());
                    return (int)LightingTemplate_FieldIndex.DirectionalAmbientColors;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            LightingTemplateMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<LightingTemplate>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ILightingTemplateGetter rhs) return false;
            return ((LightingTemplateCommon)((ILightingTemplateGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ILightingTemplateGetter? obj)
        {
            return ((LightingTemplateCommon)((ILightingTemplateGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((LightingTemplateCommon)((ILightingTemplateGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

