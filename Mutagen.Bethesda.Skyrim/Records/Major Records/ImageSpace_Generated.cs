/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ImageSpace :
        SkyrimMajorRecord,
        IEquatable<IImageSpaceGetter>,
        IImageSpaceInternal,
        ILoquiObjectSetter<ImageSpace>
    {
        #region Ctor
        protected ImageSpace()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ENAM
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected MemorySlice<Byte>? _ENAM;
        public MemorySlice<Byte>? ENAM
        {
            get => this._ENAM;
            set => this._ENAM = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ReadOnlyMemorySlice<Byte>? IImageSpaceGetter.ENAM => this.ENAM;
        #endregion
        #region Hdr
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ImageSpaceHdr? _Hdr;
        public ImageSpaceHdr? Hdr
        {
            get => _Hdr;
            set => _Hdr = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IImageSpaceHdrGetter? IImageSpaceGetter.Hdr => this.Hdr;
        #endregion
        #region Cinematic
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ImageSpaceCinematic? _Cinematic;
        public ImageSpaceCinematic? Cinematic
        {
            get => _Cinematic;
            set => _Cinematic = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IImageSpaceCinematicGetter? IImageSpaceGetter.Cinematic => this.Cinematic;
        #endregion
        #region Tint
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ImageSpaceTint? _Tint;
        public ImageSpaceTint? Tint
        {
            get => _Tint;
            set => _Tint = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IImageSpaceTintGetter? IImageSpaceGetter.Tint => this.Tint;
        #endregion
        #region DepthOfField
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ImageSpaceDepthOfField? _DepthOfField;
        public ImageSpaceDepthOfField? DepthOfField
        {
            get => _DepthOfField;
            set => _DepthOfField = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IImageSpaceDepthOfFieldGetter? IImageSpaceGetter.DepthOfField => this.DepthOfField;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ImageSpaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ENAM = initialValue;
                this.Hdr = new MaskItem<TItem, ImageSpaceHdr.Mask<TItem>?>(initialValue, new ImageSpaceHdr.Mask<TItem>(initialValue));
                this.Cinematic = new MaskItem<TItem, ImageSpaceCinematic.Mask<TItem>?>(initialValue, new ImageSpaceCinematic.Mask<TItem>(initialValue));
                this.Tint = new MaskItem<TItem, ImageSpaceTint.Mask<TItem>?>(initialValue, new ImageSpaceTint.Mask<TItem>(initialValue));
                this.DepthOfField = new MaskItem<TItem, ImageSpaceDepthOfField.Mask<TItem>?>(initialValue, new ImageSpaceDepthOfField.Mask<TItem>(initialValue));
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem ENAM,
                TItem Hdr,
                TItem Cinematic,
                TItem Tint,
                TItem DepthOfField)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.ENAM = ENAM;
                this.Hdr = new MaskItem<TItem, ImageSpaceHdr.Mask<TItem>?>(Hdr, new ImageSpaceHdr.Mask<TItem>(Hdr));
                this.Cinematic = new MaskItem<TItem, ImageSpaceCinematic.Mask<TItem>?>(Cinematic, new ImageSpaceCinematic.Mask<TItem>(Cinematic));
                this.Tint = new MaskItem<TItem, ImageSpaceTint.Mask<TItem>?>(Tint, new ImageSpaceTint.Mask<TItem>(Tint));
                this.DepthOfField = new MaskItem<TItem, ImageSpaceDepthOfField.Mask<TItem>?>(DepthOfField, new ImageSpaceDepthOfField.Mask<TItem>(DepthOfField));
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem ENAM;
            public MaskItem<TItem, ImageSpaceHdr.Mask<TItem>?>? Hdr { get; set; }
            public MaskItem<TItem, ImageSpaceCinematic.Mask<TItem>?>? Cinematic { get; set; }
            public MaskItem<TItem, ImageSpaceTint.Mask<TItem>?>? Tint { get; set; }
            public MaskItem<TItem, ImageSpaceDepthOfField.Mask<TItem>?>? DepthOfField { get; set; }
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ENAM, rhs.ENAM)) return false;
                if (!object.Equals(this.Hdr, rhs.Hdr)) return false;
                if (!object.Equals(this.Cinematic, rhs.Cinematic)) return false;
                if (!object.Equals(this.Tint, rhs.Tint)) return false;
                if (!object.Equals(this.DepthOfField, rhs.DepthOfField)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ENAM);
                hash.Add(this.Hdr);
                hash.Add(this.Cinematic);
                hash.Add(this.Tint);
                hash.Add(this.DepthOfField);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (!eval(this.ENAM)) return false;
                if (Hdr != null)
                {
                    if (!eval(this.Hdr.Overall)) return false;
                    if (this.Hdr.Specific != null && !this.Hdr.Specific.All(eval)) return false;
                }
                if (Cinematic != null)
                {
                    if (!eval(this.Cinematic.Overall)) return false;
                    if (this.Cinematic.Specific != null && !this.Cinematic.Specific.All(eval)) return false;
                }
                if (Tint != null)
                {
                    if (!eval(this.Tint.Overall)) return false;
                    if (this.Tint.Specific != null && !this.Tint.Specific.All(eval)) return false;
                }
                if (DepthOfField != null)
                {
                    if (!eval(this.DepthOfField.Overall)) return false;
                    if (this.DepthOfField.Specific != null && !this.DepthOfField.Specific.All(eval)) return false;
                }
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (eval(this.ENAM)) return true;
                if (Hdr != null)
                {
                    if (eval(this.Hdr.Overall)) return true;
                    if (this.Hdr.Specific != null && this.Hdr.Specific.Any(eval)) return true;
                }
                if (Cinematic != null)
                {
                    if (eval(this.Cinematic.Overall)) return true;
                    if (this.Cinematic.Specific != null && this.Cinematic.Specific.Any(eval)) return true;
                }
                if (Tint != null)
                {
                    if (eval(this.Tint.Overall)) return true;
                    if (this.Tint.Specific != null && this.Tint.Specific.Any(eval)) return true;
                }
                if (DepthOfField != null)
                {
                    if (eval(this.DepthOfField.Overall)) return true;
                    if (this.DepthOfField.Specific != null && this.DepthOfField.Specific.Any(eval)) return true;
                }
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ImageSpace.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ENAM = eval(this.ENAM);
                obj.Hdr = this.Hdr == null ? null : new MaskItem<R, ImageSpaceHdr.Mask<R>?>(eval(this.Hdr.Overall), this.Hdr.Specific?.Translate(eval));
                obj.Cinematic = this.Cinematic == null ? null : new MaskItem<R, ImageSpaceCinematic.Mask<R>?>(eval(this.Cinematic.Overall), this.Cinematic.Specific?.Translate(eval));
                obj.Tint = this.Tint == null ? null : new MaskItem<R, ImageSpaceTint.Mask<R>?>(eval(this.Tint.Overall), this.Tint.Specific?.Translate(eval));
                obj.DepthOfField = this.DepthOfField == null ? null : new MaskItem<R, ImageSpaceDepthOfField.Mask<R>?>(eval(this.DepthOfField.Overall), this.DepthOfField.Specific?.Translate(eval));
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ImageSpace.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ImageSpace.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ImageSpace.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ENAM ?? true)
                    {
                        sb.AppendItem(ENAM, "ENAM");
                    }
                    if (printMask?.Hdr?.Overall ?? true)
                    {
                        Hdr?.Print(sb);
                    }
                    if (printMask?.Cinematic?.Overall ?? true)
                    {
                        Cinematic?.Print(sb);
                    }
                    if (printMask?.Tint?.Overall ?? true)
                    {
                        Tint?.Print(sb);
                    }
                    if (printMask?.DepthOfField?.Overall ?? true)
                    {
                        DepthOfField?.Print(sb);
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? ENAM;
            public MaskItem<Exception?, ImageSpaceHdr.ErrorMask?>? Hdr;
            public MaskItem<Exception?, ImageSpaceCinematic.ErrorMask?>? Cinematic;
            public MaskItem<Exception?, ImageSpaceTint.ErrorMask?>? Tint;
            public MaskItem<Exception?, ImageSpaceDepthOfField.ErrorMask?>? DepthOfField;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ImageSpace_FieldIndex enu = (ImageSpace_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpace_FieldIndex.ENAM:
                        return ENAM;
                    case ImageSpace_FieldIndex.Hdr:
                        return Hdr;
                    case ImageSpace_FieldIndex.Cinematic:
                        return Cinematic;
                    case ImageSpace_FieldIndex.Tint:
                        return Tint;
                    case ImageSpace_FieldIndex.DepthOfField:
                        return DepthOfField;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ImageSpace_FieldIndex enu = (ImageSpace_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpace_FieldIndex.ENAM:
                        this.ENAM = ex;
                        break;
                    case ImageSpace_FieldIndex.Hdr:
                        this.Hdr = new MaskItem<Exception?, ImageSpaceHdr.ErrorMask?>(ex, null);
                        break;
                    case ImageSpace_FieldIndex.Cinematic:
                        this.Cinematic = new MaskItem<Exception?, ImageSpaceCinematic.ErrorMask?>(ex, null);
                        break;
                    case ImageSpace_FieldIndex.Tint:
                        this.Tint = new MaskItem<Exception?, ImageSpaceTint.ErrorMask?>(ex, null);
                        break;
                    case ImageSpace_FieldIndex.DepthOfField:
                        this.DepthOfField = new MaskItem<Exception?, ImageSpaceDepthOfField.ErrorMask?>(ex, null);
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ImageSpace_FieldIndex enu = (ImageSpace_FieldIndex)index;
                switch (enu)
                {
                    case ImageSpace_FieldIndex.ENAM:
                        this.ENAM = (Exception?)obj;
                        break;
                    case ImageSpace_FieldIndex.Hdr:
                        this.Hdr = (MaskItem<Exception?, ImageSpaceHdr.ErrorMask?>?)obj;
                        break;
                    case ImageSpace_FieldIndex.Cinematic:
                        this.Cinematic = (MaskItem<Exception?, ImageSpaceCinematic.ErrorMask?>?)obj;
                        break;
                    case ImageSpace_FieldIndex.Tint:
                        this.Tint = (MaskItem<Exception?, ImageSpaceTint.ErrorMask?>?)obj;
                        break;
                    case ImageSpace_FieldIndex.DepthOfField:
                        this.DepthOfField = (MaskItem<Exception?, ImageSpaceDepthOfField.ErrorMask?>?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ENAM != null) return true;
                if (Hdr != null) return true;
                if (Cinematic != null) return true;
                if (Tint != null) return true;
                if (DepthOfField != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                {
                    sb.AppendItem(ENAM, "ENAM");
                }
                Hdr?.Print(sb);
                Cinematic?.Print(sb);
                Tint?.Print(sb);
                DepthOfField?.Print(sb);
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ENAM = this.ENAM.Combine(rhs.ENAM);
                ret.Hdr = this.Hdr.Combine(rhs.Hdr, (l, r) => l.Combine(r));
                ret.Cinematic = this.Cinematic.Combine(rhs.Cinematic, (l, r) => l.Combine(r));
                ret.Tint = this.Tint.Combine(rhs.Tint, (l, r) => l.Combine(r));
                ret.DepthOfField = this.DepthOfField.Combine(rhs.DepthOfField, (l, r) => l.Combine(r));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public bool ENAM;
            public ImageSpaceHdr.TranslationMask? Hdr;
            public ImageSpaceCinematic.TranslationMask? Cinematic;
            public ImageSpaceTint.TranslationMask? Tint;
            public ImageSpaceDepthOfField.TranslationMask? DepthOfField;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.ENAM = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ENAM, null));
                ret.Add((Hdr != null ? Hdr.OnOverall : DefaultOn, Hdr?.GetCrystal()));
                ret.Add((Cinematic != null ? Cinematic.OnOverall : DefaultOn, Cinematic?.GetCrystal()));
                ret.Add((Tint != null ? Tint.OnOverall : DefaultOn, Tint?.GetCrystal()));
                ret.Add((DepthOfField != null ? DepthOfField.OnOverall : DefaultOn, DepthOfField?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ImageSpace_Registration.TriggeringRecordType;
        public ImageSpace(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ImageSpace(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ImageSpace(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ImageSpace(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public ImageSpace(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ImageSpace>.ToString(this);
        }

        protected override Type LinkType => typeof(IImageSpace);

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IImageSpaceGetter rhs) return false;
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IImageSpaceGetter? obj)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImageSpaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ImageSpaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ImageSpace CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ImageSpace();
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ImageSpace item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ImageSpace GetNew()
        {
            return new ImageSpace();
        }

    }
    #endregion

    #region Interface
    public partial interface IImageSpace :
        IImageSpaceGetter,
        ILoquiObjectSetter<IImageSpaceInternal>,
        ISkyrimMajorRecordInternal
    {
        new MemorySlice<Byte>? ENAM { get; set; }
        new ImageSpaceHdr? Hdr { get; set; }
        new ImageSpaceCinematic? Cinematic { get; set; }
        new ImageSpaceTint? Tint { get; set; }
        new ImageSpaceDepthOfField? DepthOfField { get; set; }
    }

    public partial interface IImageSpaceInternal :
        ISkyrimMajorRecordInternal,
        IImageSpace,
        IImageSpaceGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.IMGS)]
    public partial interface IImageSpaceGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        ILoquiObject<IImageSpaceGetter>,
        IMapsToGetter<IImageSpaceGetter>
    {
        static new ILoquiRegistration StaticRegistration => ImageSpace_Registration.Instance;
        ReadOnlyMemorySlice<Byte>? ENAM { get; }
        IImageSpaceHdrGetter? Hdr { get; }
        IImageSpaceCinematicGetter? Cinematic { get; }
        IImageSpaceTintGetter? Tint { get; }
        IImageSpaceDepthOfFieldGetter? DepthOfField { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ImageSpaceMixIn
    {
        public static void Clear(this IImageSpaceInternal item)
        {
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ImageSpace.Mask<bool> GetEqualsMask(
            this IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IImageSpaceGetter item,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IImageSpaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            ImageSpace.TranslationMask? equalsMask = null)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IImageSpaceInternal lhs,
            IImageSpaceGetter rhs,
            out ImageSpace.ErrorMask errorMask,
            ImageSpace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ImageSpace.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IImageSpaceInternal lhs,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ImageSpace DeepCopy(
            this IImageSpaceGetter item,
            ImageSpace.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ImageSpace DeepCopy(
            this IImageSpaceGetter item,
            out ImageSpace.ErrorMask errorMask,
            ImageSpace.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ImageSpace DeepCopy(
            this IImageSpaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ImageSpace Duplicate(
            this IImageSpaceGetter item,
            FormKey formKey,
            ImageSpace.TranslationMask? copyMask = null)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ImageSpace Duplicate(
            this IImageSpaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IImageSpaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ImageSpaceSetterCommon)((IImageSpaceGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum ImageSpace_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        ENAM = 7,
        Hdr = 8,
        Cinematic = 9,
        Tint = 10,
        DepthOfField = 11,
    }
    #endregion

    #region Registration
    internal partial class ImageSpace_Registration : ILoquiRegistration
    {
        public static readonly ImageSpace_Registration Instance = new ImageSpace_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 12;

        public static readonly Type MaskType = typeof(ImageSpace.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ImageSpace.ErrorMask);

        public static readonly Type ClassType = typeof(ImageSpace);

        public static readonly Type GetterType = typeof(IImageSpaceGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IImageSpace);

        public static readonly Type? InternalSetterType = typeof(IImageSpaceInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.ImageSpace";

        public const string Name = "ImageSpace";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.IMGS;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.IMGS);
            var all = RecordCollection.Factory(
                RecordTypes.IMGS,
                RecordTypes.ENAM,
                RecordTypes.HNAM,
                RecordTypes.CNAM,
                RecordTypes.TNAM,
                RecordTypes.DNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ImageSpaceBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ImageSpaceSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ImageSpaceSetterCommon Instance = new ImageSpaceSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IImageSpaceInternal item)
        {
            ClearPartial();
            item.ENAM = default;
            item.Hdr = null;
            item.Cinematic = null;
            item.Tint = null;
            item.DepthOfField = null;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IImageSpaceInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IImageSpaceInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IImageSpace obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IImageSpaceInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IImageSpaceInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ImageSpaceBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ImageSpaceBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ImageSpace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ImageSpace)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ImageSpaceCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ImageSpaceCommon Instance = new ImageSpaceCommon();

        public ImageSpace.Mask<bool> GetEqualsMask(
            IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ImageSpace.Mask<bool>(false);
            ((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IImageSpaceGetter item,
            IImageSpaceGetter rhs,
            ImageSpace.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ENAM = MemorySliceExt.SequenceEqual(item.ENAM, rhs.ENAM);
            ret.Hdr = EqualsMaskHelper.EqualsHelper(
                item.Hdr,
                rhs.Hdr,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Cinematic = EqualsMaskHelper.EqualsHelper(
                item.Cinematic,
                rhs.Cinematic,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Tint = EqualsMaskHelper.EqualsHelper(
                item.Tint,
                rhs.Tint,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.DepthOfField = EqualsMaskHelper.EqualsHelper(
                item.DepthOfField,
                rhs.DepthOfField,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IImageSpaceGetter item,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IImageSpaceGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ImageSpace.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ImageSpace =>");
            }
            else
            {
                sb.AppendLine($"{name} (ImageSpace) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IImageSpaceGetter item,
            StructuredStringBuilder sb,
            ImageSpace.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if ((printMask?.ENAM ?? true)
                && item.ENAM is {} ENAMItem)
            {
                sb.AppendLine($"ENAM => {SpanExt.ToHexString(ENAMItem)}");
            }
            if ((printMask?.Hdr?.Overall ?? true)
                && item.Hdr is {} HdrItem)
            {
                HdrItem?.Print(sb, "Hdr");
            }
            if ((printMask?.Cinematic?.Overall ?? true)
                && item.Cinematic is {} CinematicItem)
            {
                CinematicItem?.Print(sb, "Cinematic");
            }
            if ((printMask?.Tint?.Overall ?? true)
                && item.Tint is {} TintItem)
            {
                TintItem?.Print(sb, "Tint");
            }
            if ((printMask?.DepthOfField?.Overall ?? true)
                && item.DepthOfField is {} DepthOfFieldItem)
            {
                DepthOfFieldItem?.Print(sb, "DepthOfField");
            }
        }
        
        public static ImageSpace_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ImageSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (ImageSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (ImageSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (ImageSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (ImageSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (ImageSpace_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (ImageSpace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ImageSpace_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ImageSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ImageSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ImageSpace_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ImageSpace_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IImageSpaceGetter? lhs,
            IImageSpaceGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.ENAM) ?? true))
            {
                if (!MemorySliceExt.SequenceEqual(lhs.ENAM, rhs.ENAM)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.Hdr) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Hdr, rhs.Hdr, out var lhsHdr, out var rhsHdr, out var isHdrEqual))
                {
                    if (!((ImageSpaceHdrCommon)((IImageSpaceHdrGetter)lhsHdr).CommonInstance()!).Equals(lhsHdr, rhsHdr, equalsMask?.GetSubCrystal((int)ImageSpace_FieldIndex.Hdr))) return false;
                }
                else if (!isHdrEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.Cinematic) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Cinematic, rhs.Cinematic, out var lhsCinematic, out var rhsCinematic, out var isCinematicEqual))
                {
                    if (!((ImageSpaceCinematicCommon)((IImageSpaceCinematicGetter)lhsCinematic).CommonInstance()!).Equals(lhsCinematic, rhsCinematic, equalsMask?.GetSubCrystal((int)ImageSpace_FieldIndex.Cinematic))) return false;
                }
                else if (!isCinematicEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.Tint) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Tint, rhs.Tint, out var lhsTint, out var rhsTint, out var isTintEqual))
                {
                    if (!((ImageSpaceTintCommon)((IImageSpaceTintGetter)lhsTint).CommonInstance()!).Equals(lhsTint, rhsTint, equalsMask?.GetSubCrystal((int)ImageSpace_FieldIndex.Tint))) return false;
                }
                else if (!isTintEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfField) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.DepthOfField, rhs.DepthOfField, out var lhsDepthOfField, out var rhsDepthOfField, out var isDepthOfFieldEqual))
                {
                    if (!((ImageSpaceDepthOfFieldCommon)((IImageSpaceDepthOfFieldGetter)lhsDepthOfField).CommonInstance()!).Equals(lhsDepthOfField, rhsDepthOfField, equalsMask?.GetSubCrystal((int)ImageSpace_FieldIndex.DepthOfField))) return false;
                }
                else if (!isDepthOfFieldEqual) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IImageSpaceGetter?)lhs,
                rhs: rhs as IImageSpaceGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IImageSpaceGetter?)lhs,
                rhs: rhs as IImageSpaceGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IImageSpaceGetter item)
        {
            var hash = new HashCode();
            if (item.ENAM is {} ENAMItem)
            {
                hash.Add(ENAMItem);
            }
            if (item.Hdr is {} Hdritem)
            {
                hash.Add(Hdritem);
            }
            if (item.Cinematic is {} Cinematicitem)
            {
                hash.Add(Cinematicitem);
            }
            if (item.Tint is {} Tintitem)
            {
                hash.Add(Tintitem);
            }
            if (item.DepthOfField is {} DepthOfFielditem)
            {
                hash.Add(DepthOfFielditem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IImageSpaceGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IImageSpaceGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ImageSpace.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IImageSpaceGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        #region Duplicate
        public ImageSpace Duplicate(
            IImageSpaceGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ImageSpace(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IImageSpaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IImageSpaceGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ImageSpaceSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ImageSpaceSetterTranslationCommon Instance = new ImageSpaceSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IImageSpaceInternal item,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IImageSpace item,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.ENAM) ?? true))
            {
                if(rhs.ENAM is {} ENAMrhs)
                {
                    item.ENAM = ENAMrhs.ToArray();
                }
                else
                {
                    item.ENAM = default;
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.Hdr) ?? true))
            {
                errorMask?.PushIndex((int)ImageSpace_FieldIndex.Hdr);
                try
                {
                    if(rhs.Hdr is {} rhsHdr)
                    {
                        item.Hdr = rhsHdr.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ImageSpace_FieldIndex.Hdr));
                    }
                    else
                    {
                        item.Hdr = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.Cinematic) ?? true))
            {
                errorMask?.PushIndex((int)ImageSpace_FieldIndex.Cinematic);
                try
                {
                    if(rhs.Cinematic is {} rhsCinematic)
                    {
                        item.Cinematic = rhsCinematic.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ImageSpace_FieldIndex.Cinematic));
                    }
                    else
                    {
                        item.Cinematic = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.Tint) ?? true))
            {
                errorMask?.PushIndex((int)ImageSpace_FieldIndex.Tint);
                try
                {
                    if(rhs.Tint is {} rhsTint)
                    {
                        item.Tint = rhsTint.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ImageSpace_FieldIndex.Tint));
                    }
                    else
                    {
                        item.Tint = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ImageSpace_FieldIndex.DepthOfField) ?? true))
            {
                errorMask?.PushIndex((int)ImageSpace_FieldIndex.DepthOfField);
                try
                {
                    if(rhs.DepthOfField is {} rhsDepthOfField)
                    {
                        item.DepthOfField = rhsDepthOfField.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)ImageSpace_FieldIndex.DepthOfField));
                    }
                    else
                    {
                        item.DepthOfField = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IImageSpace item,
            IImageSpaceGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpaceInternal)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpace)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpaceInternal)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IImageSpace)item,
                rhs: (IImageSpaceGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ImageSpace DeepCopy(
            IImageSpaceGetter item,
            ImageSpace.TranslationMask? copyMask = null)
        {
            ImageSpace ret = (ImageSpace)((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ImageSpace DeepCopy(
            IImageSpaceGetter item,
            out ImageSpace.ErrorMask errorMask,
            ImageSpace.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ImageSpace ret = (ImageSpace)((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ImageSpace.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ImageSpace DeepCopy(
            IImageSpaceGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ImageSpace ret = (ImageSpace)((ImageSpaceCommon)((IImageSpaceGetter)item).CommonInstance()!).GetNew();
            ((ImageSpaceSetterTranslationCommon)((IImageSpaceGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ImageSpace
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImageSpace_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ImageSpace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImageSpaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ImageSpaceSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImageSpaceSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class ImageSpaceBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ImageSpaceBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            IImageSpaceGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                writer: writer,
                item: item.ENAM,
                header: translationParams.ConvertToCustom(RecordTypes.ENAM));
            if (item.Hdr is {} HdrItem)
            {
                ((ImageSpaceHdrBinaryWriteTranslation)((IBinaryItem)HdrItem).BinaryWriteTranslator).Write(
                    item: HdrItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Cinematic is {} CinematicItem)
            {
                ((ImageSpaceCinematicBinaryWriteTranslation)((IBinaryItem)CinematicItem).BinaryWriteTranslator).Write(
                    item: CinematicItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.Tint is {} TintItem)
            {
                ((ImageSpaceTintBinaryWriteTranslation)((IBinaryItem)TintItem).BinaryWriteTranslator).Write(
                    item: TintItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            if (item.DepthOfField is {} DepthOfFieldItem)
            {
                ((ImageSpaceDepthOfFieldBinaryWriteTranslation)((IBinaryItem)DepthOfFieldItem).BinaryWriteTranslator).Write(
                    item: DepthOfFieldItem,
                    writer: writer,
                    translationParams: translationParams);
            }
        }

        public void Write(
            MutagenWriter writer,
            IImageSpaceGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.IMGS,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IImageSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IImageSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IImageSpaceGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ImageSpaceBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly ImageSpaceBinaryCreateTranslation Instance = new ImageSpaceBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.IMGS;
        public static ParseResult FillBinaryRecordTypes(
            IImageSpaceInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.ENAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.ENAM = ByteArrayBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: frame.SpawnWithLength(contentLength));
                    return (int)ImageSpace_FieldIndex.ENAM;
                }
                case RecordTypeInts.HNAM:
                {
                    item.Hdr = Mutagen.Bethesda.Skyrim.ImageSpaceHdr.CreateFromBinary(frame: frame);
                    return (int)ImageSpace_FieldIndex.Hdr;
                }
                case RecordTypeInts.CNAM:
                {
                    item.Cinematic = Mutagen.Bethesda.Skyrim.ImageSpaceCinematic.CreateFromBinary(frame: frame);
                    return (int)ImageSpace_FieldIndex.Cinematic;
                }
                case RecordTypeInts.TNAM:
                {
                    item.Tint = Mutagen.Bethesda.Skyrim.ImageSpaceTint.CreateFromBinary(frame: frame);
                    return (int)ImageSpace_FieldIndex.Tint;
                }
                case RecordTypeInts.DNAM:
                {
                    item.DepthOfField = Mutagen.Bethesda.Skyrim.ImageSpaceDepthOfField.CreateFromBinary(frame: frame);
                    return (int)ImageSpace_FieldIndex.DepthOfField;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ImageSpaceBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class ImageSpaceBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IImageSpaceGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ImageSpace_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ImageSpace_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ImageSpaceCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ImageSpaceSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ImageSpaceBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ImageSpaceBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IImageSpace);


        #region ENAM
        private int? _ENAMLocation;
        public ReadOnlyMemorySlice<Byte>? ENAM => _ENAMLocation.HasValue ? HeaderTranslation.ExtractSubrecordMemory(_recordData, _ENAMLocation.Value, _package.MetaData.Constants) : default(ReadOnlyMemorySlice<byte>?);
        #endregion
        #region Hdr
        private RangeInt32? _HdrLocation;
        public IImageSpaceHdrGetter? Hdr => _HdrLocation.HasValue ? ImageSpaceHdrBinaryOverlay.ImageSpaceHdrFactory(_recordData.Slice(_HdrLocation!.Value.Min), _package) : default;
        #endregion
        #region Cinematic
        private RangeInt32? _CinematicLocation;
        public IImageSpaceCinematicGetter? Cinematic => _CinematicLocation.HasValue ? ImageSpaceCinematicBinaryOverlay.ImageSpaceCinematicFactory(_recordData.Slice(_CinematicLocation!.Value.Min), _package) : default;
        #endregion
        #region Tint
        private RangeInt32? _TintLocation;
        public IImageSpaceTintGetter? Tint => _TintLocation.HasValue ? ImageSpaceTintBinaryOverlay.ImageSpaceTintFactory(_recordData.Slice(_TintLocation!.Value.Min), _package) : default;
        #endregion
        #region DepthOfField
        private RangeInt32? _DepthOfFieldLocation;
        public IImageSpaceDepthOfFieldGetter? DepthOfField => _DepthOfFieldLocation.HasValue ? ImageSpaceDepthOfFieldBinaryOverlay.ImageSpaceDepthOfFieldFactory(_recordData.Slice(_DepthOfFieldLocation!.Value.Min), _package) : default;
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ImageSpaceBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IImageSpaceGetter ImageSpaceFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ImageSpaceBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IImageSpaceGetter ImageSpaceFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ImageSpaceFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.ENAM:
                {
                    _ENAMLocation = (stream.Position - offset);
                    return (int)ImageSpace_FieldIndex.ENAM;
                }
                case RecordTypeInts.HNAM:
                {
                    _HdrLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ImageSpace_FieldIndex.Hdr;
                }
                case RecordTypeInts.CNAM:
                {
                    _CinematicLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ImageSpace_FieldIndex.Cinematic;
                }
                case RecordTypeInts.TNAM:
                {
                    _TintLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ImageSpace_FieldIndex.Tint;
                }
                case RecordTypeInts.DNAM:
                {
                    _DepthOfFieldLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ImageSpace_FieldIndex.DepthOfField;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ImageSpaceMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ImageSpace>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IImageSpaceGetter rhs) return false;
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IImageSpaceGetter? obj)
        {
            return ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ImageSpaceCommon)((IImageSpaceGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

