/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Assets;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class TintAssets :
        IEquatable<ITintAssetsGetter>,
        ILoquiObjectSetter<TintAssets>,
        ITintAssets
    {
        #region Ctor
        public TintAssets()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region Index
        public UInt16? Index { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UInt16? ITintAssetsGetter.Index => this.Index;
        #endregion
        #region FileName
        public AssetLink<SkyrimTextureAssetType>? FileName { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? ITintAssetsGetter.FileName => this.FileName;
        #endregion
        #region MaskType
        public TintAssets.TintMaskType? MaskType { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TintAssets.TintMaskType? ITintAssetsGetter.MaskType => this.MaskType;
        #endregion
        #region PresetDefault
        private readonly IFormLinkNullable<IColorRecordGetter> _PresetDefault = new FormLinkNullable<IColorRecordGetter>();
        public IFormLinkNullable<IColorRecordGetter> PresetDefault
        {
            get => _PresetDefault;
            set => _PresetDefault.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkNullableGetter<IColorRecordGetter> ITintAssetsGetter.PresetDefault => this.PresetDefault;
        #endregion
        #region Presets
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<TintPreset> _Presets = new ExtendedList<TintPreset>();
        public ExtendedList<TintPreset> Presets
        {
            get => this._Presets;
            init => this._Presets = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<ITintPresetGetter> ITintAssetsGetter.Presets => _Presets;
        #endregion

        #endregion

        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TintAssetsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITintAssetsGetter rhs) return false;
            return ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITintAssetsGetter? obj)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #region Mask
        public class Mask<TItem> :
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            {
                this.Index = initialValue;
                this.FileName = initialValue;
                this.MaskType = initialValue;
                this.PresetDefault = initialValue;
                this.Presets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>());
            }

            public Mask(
                TItem Index,
                TItem FileName,
                TItem MaskType,
                TItem PresetDefault,
                TItem Presets)
            {
                this.Index = Index;
                this.FileName = FileName;
                this.MaskType = MaskType;
                this.PresetDefault = PresetDefault;
                this.Presets = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>?>(Presets, Enumerable.Empty<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>());
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public TItem Index;
            public TItem FileName;
            public TItem MaskType;
            public TItem PresetDefault;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, TintPreset.Mask<TItem>?>>?>? Presets;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!object.Equals(this.Index, rhs.Index)) return false;
                if (!object.Equals(this.FileName, rhs.FileName)) return false;
                if (!object.Equals(this.MaskType, rhs.MaskType)) return false;
                if (!object.Equals(this.PresetDefault, rhs.PresetDefault)) return false;
                if (!object.Equals(this.Presets, rhs.Presets)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.Index);
                hash.Add(this.FileName);
                hash.Add(this.MaskType);
                hash.Add(this.PresetDefault);
                hash.Add(this.Presets);
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public bool All(Func<TItem, bool> eval)
            {
                if (!eval(this.Index)) return false;
                if (!eval(this.FileName)) return false;
                if (!eval(this.MaskType)) return false;
                if (!eval(this.PresetDefault)) return false;
                if (this.Presets != null)
                {
                    if (!eval(this.Presets.Overall)) return false;
                    if (this.Presets.Specific != null)
                    {
                        foreach (var item in this.Presets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return true;
            }
            #endregion

            #region Any
            public bool Any(Func<TItem, bool> eval)
            {
                if (eval(this.Index)) return true;
                if (eval(this.FileName)) return true;
                if (eval(this.MaskType)) return true;
                if (eval(this.PresetDefault)) return true;
                if (this.Presets != null)
                {
                    if (eval(this.Presets.Overall)) return true;
                    if (this.Presets.Specific != null)
                    {
                        foreach (var item in this.Presets.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                return false;
            }
            #endregion

            #region Translate
            public Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TintAssets.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                obj.Index = eval(this.Index);
                obj.FileName = eval(this.FileName);
                obj.MaskType = eval(this.MaskType);
                obj.PresetDefault = eval(this.PresetDefault);
                if (Presets != null)
                {
                    obj.Presets = new MaskItem<R, IEnumerable<MaskItemIndexed<R, TintPreset.Mask<R>?>>?>(eval(this.Presets.Overall), Enumerable.Empty<MaskItemIndexed<R, TintPreset.Mask<R>?>>());
                    if (Presets.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, TintPreset.Mask<R>?>>();
                        obj.Presets.Specific = l;
                        foreach (var item in Presets.Specific)
                        {
                            MaskItemIndexed<R, TintPreset.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, TintPreset.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TintAssets.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TintAssets.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TintAssets.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.Index ?? true)
                    {
                        sb.AppendItem(Index, "Index");
                    }
                    if (printMask?.FileName ?? true)
                    {
                        sb.AppendItem(FileName, "FileName");
                    }
                    if (printMask?.MaskType ?? true)
                    {
                        sb.AppendItem(MaskType, "MaskType");
                    }
                    if (printMask?.PresetDefault ?? true)
                    {
                        sb.AppendItem(PresetDefault, "PresetDefault");
                    }
                    if ((printMask?.Presets?.Overall ?? true)
                        && Presets is {} PresetsItem)
                    {
                        sb.AppendLine("Presets =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(PresetsItem.Overall);
                            if (PresetsItem.Specific != null)
                            {
                                foreach (var subItem in PresetsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            #endregion

        }

        public class ErrorMask :
            IErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public Exception? Overall { get; set; }
            private List<string>? _warnings;
            public List<string> Warnings
            {
                get
                {
                    if (_warnings == null)
                    {
                        _warnings = new List<string>();
                    }
                    return _warnings;
                }
            }
            public Exception? Index;
            public Exception? FileName;
            public Exception? MaskType;
            public Exception? PresetDefault;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>? Presets;
            #endregion

            #region IErrorMask
            public object? GetNthMask(int index)
            {
                TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
                switch (enu)
                {
                    case TintAssets_FieldIndex.Index:
                        return Index;
                    case TintAssets_FieldIndex.FileName:
                        return FileName;
                    case TintAssets_FieldIndex.MaskType:
                        return MaskType;
                    case TintAssets_FieldIndex.PresetDefault:
                        return PresetDefault;
                    case TintAssets_FieldIndex.Presets:
                        return Presets;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthException(int index, Exception ex)
            {
                TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
                switch (enu)
                {
                    case TintAssets_FieldIndex.Index:
                        this.Index = ex;
                        break;
                    case TintAssets_FieldIndex.FileName:
                        this.FileName = ex;
                        break;
                    case TintAssets_FieldIndex.MaskType:
                        this.MaskType = ex;
                        break;
                    case TintAssets_FieldIndex.PresetDefault:
                        this.PresetDefault = ex;
                        break;
                    case TintAssets_FieldIndex.Presets:
                        this.Presets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>(ex, null);
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public void SetNthMask(int index, object obj)
            {
                TintAssets_FieldIndex enu = (TintAssets_FieldIndex)index;
                switch (enu)
                {
                    case TintAssets_FieldIndex.Index:
                        this.Index = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.FileName:
                        this.FileName = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.MaskType:
                        this.MaskType = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.PresetDefault:
                        this.PresetDefault = (Exception?)obj;
                        break;
                    case TintAssets_FieldIndex.Presets:
                        this.Presets = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>)obj;
                        break;
                    default:
                        throw new ArgumentException($"Index is out of range: {index}");
                }
            }

            public bool IsInError()
            {
                if (Overall != null) return true;
                if (Index != null) return true;
                if (FileName != null) return true;
                if (MaskType != null) return true;
                if (PresetDefault != null) return true;
                if (Presets != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected void PrintFillInternal(StructuredStringBuilder sb)
            {
                {
                    sb.AppendItem(Index, "Index");
                }
                {
                    sb.AppendItem(FileName, "FileName");
                }
                {
                    sb.AppendItem(MaskType, "MaskType");
                }
                {
                    sb.AppendItem(PresetDefault, "PresetDefault");
                }
                if (Presets is {} PresetsItem)
                {
                    sb.AppendLine("Presets =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(PresetsItem.Overall);
                        if (PresetsItem.Specific != null)
                        {
                            foreach (var subItem in PresetsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.Index = this.Index.Combine(rhs.Index);
                ret.FileName = this.FileName.Combine(rhs.FileName);
                ret.MaskType = this.MaskType.Combine(rhs.MaskType);
                ret.PresetDefault = this.PresetDefault.Combine(rhs.PresetDefault);
                ret.Presets = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, TintPreset.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Presets?.Overall, rhs.Presets?.Overall), Noggog.ExceptionExt.Combine(this.Presets?.Specific, rhs.Presets?.Specific));
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public class TranslationMask : ITranslationMask
        {
            #region Members
            private TranslationCrystal? _crystal;
            public readonly bool DefaultOn;
            public bool OnOverall;
            public bool Index;
            public bool FileName;
            public bool MaskType;
            public bool PresetDefault;
            public TintPreset.TranslationMask? Presets;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
            {
                this.DefaultOn = defaultOn;
                this.OnOverall = onOverall;
                this.Index = defaultOn;
                this.FileName = defaultOn;
                this.MaskType = defaultOn;
                this.PresetDefault = defaultOn;
            }

            #endregion

            public TranslationCrystal GetCrystal()
            {
                if (_crystal != null) return _crystal;
                var ret = new List<(bool On, TranslationCrystal? SubCrystal)>();
                GetCrystal(ret);
                _crystal = new TranslationCrystal(ret.ToArray());
                return _crystal;
            }

            protected void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                ret.Add((Index, null));
                ret.Add((FileName, null));
                ret.Add((MaskType, null));
                ret.Add((PresetDefault, null));
                ret.Add((Presets == null ? DefaultOn : !Presets.GetCrystal().CopyNothing, Presets?.GetCrystal()));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TintAssetsCommon.Instance.EnumerateFormLinks(this);
        public void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => TintAssetsSetterCommon.Instance.RemapLinks(this, mapping);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => TintAssetsCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks() => TintAssetsSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => TintAssetsSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => TintAssetsSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintAssetsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TintAssetsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public static TintAssets CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TintAssets();
            ((TintAssetsSetterCommon)((ITintAssetsGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TintAssets item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TintAssetsSetterCommon)((ITintAssetsGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static TintAssets GetNew()
        {
            return new TintAssets();
        }

    }
    #endregion

    #region Interface
    public partial interface ITintAssets :
        IAssetLinkContainer,
        IFormLinkContainer,
        ILoquiObjectSetter<ITintAssets>,
        ITintAssetsGetter
    {
        new UInt16? Index { get; set; }
        new AssetLink<SkyrimTextureAssetType>? FileName { get; set; }
        new TintAssets.TintMaskType? MaskType { get; set; }
        new IFormLinkNullable<IColorRecordGetter> PresetDefault { get; set; }
        new ExtendedList<TintPreset> Presets { get; }
    }

    public partial interface ITintAssetsGetter :
        ILoquiObject,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IFormLinkContainerGetter,
        ILoquiObject<ITintAssetsGetter>
    {
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object? CommonSetterInstance();
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        object CommonSetterTranslationInstance();
        static ILoquiRegistration StaticRegistration => TintAssets_Registration.Instance;
        UInt16? Index { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? FileName { get; }
        TintAssets.TintMaskType? MaskType { get; }
        IFormLinkNullableGetter<IColorRecordGetter> PresetDefault { get; }
        IReadOnlyList<ITintPresetGetter> Presets { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TintAssetsMixIn
    {
        public static void Clear(this ITintAssets item)
        {
            ((TintAssetsSetterCommon)((ITintAssetsGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TintAssets.Mask<bool> GetEqualsMask(
            this ITintAssetsGetter item,
            ITintAssetsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITintAssetsGetter item,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITintAssetsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITintAssetsGetter item,
            ITintAssetsGetter rhs,
            TintAssets.TranslationMask? equalsMask = null)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs)
        {
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: default,
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs,
            TintAssets.TranslationMask? copyMask = null)
        {
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: default,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TintAssets.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITintAssets lhs,
            ITintAssetsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TintAssets DeepCopy(
            this ITintAssetsGetter item,
            TintAssets.TranslationMask? copyMask = null)
        {
            return ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TintAssets DeepCopy(
            this ITintAssetsGetter item,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? copyMask = null)
        {
            return ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TintAssets DeepCopy(
            this ITintAssetsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITintAssets item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TintAssetsSetterCommon)((ITintAssetsGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum TintAssets_FieldIndex
    {
        Index = 0,
        FileName = 1,
        MaskType = 2,
        PresetDefault = 3,
        Presets = 4,
    }
    #endregion

    #region Registration
    internal partial class TintAssets_Registration : ILoquiRegistration
    {
        public static readonly TintAssets_Registration Instance = new TintAssets_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 5;

        public const ushort FieldCount = 5;

        public static readonly Type MaskType = typeof(TintAssets.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TintAssets.ErrorMask);

        public static readonly Type ClassType = typeof(TintAssets);

        public static readonly Type GetterType = typeof(ITintAssetsGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITintAssets);

        public static readonly Type? InternalSetterType = null;

        public const string FullName = "Mutagen.Bethesda.Skyrim.TintAssets";

        public const string Name = "TintAssets";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var all = RecordCollection.Factory(
                RecordTypes.TINI,
                RecordTypes.TINT,
                RecordTypes.TINP,
                RecordTypes.TIND,
                RecordTypes.TINC,
                RecordTypes.TINV,
                RecordTypes.TIRS);
            return new RecordTriggerSpecs(allRecordTypes: all);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TintAssetsBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TintAssetsSetterCommon
    {
        public static readonly TintAssetsSetterCommon Instance = new TintAssetsSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITintAssets item)
        {
            ClearPartial();
            item.Index = default;
            item.FileName = default;
            item.MaskType = default;
            item.PresetDefault.Clear();
            item.Presets.Clear();
        }
        
        #region Mutagen
        public void RemapLinks(ITintAssets obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            obj.PresetDefault.Relink(mapping);
            obj.Presets.RemapLinks(mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ITintAssets obj)
        {
            if (obj.FileName != null)
            {
                yield return obj.FileName;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ITintAssets obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                obj.FileName?.Relink(mapping);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITintAssets item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.SubrecordParse(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillTyped: TintAssetsBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        #endregion
        
    }
    internal partial class TintAssetsCommon
    {
        public static readonly TintAssetsCommon Instance = new TintAssetsCommon();

        public TintAssets.Mask<bool> GetEqualsMask(
            ITintAssetsGetter item,
            ITintAssetsGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TintAssets.Mask<bool>(false);
            ((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITintAssetsGetter item,
            ITintAssetsGetter rhs,
            TintAssets.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.Index = item.Index == rhs.Index;
            ret.FileName = object.Equals(item.FileName, rhs.FileName);
            ret.MaskType = item.MaskType == rhs.MaskType;
            ret.PresetDefault = item.PresetDefault.Equals(rhs.PresetDefault);
            ret.Presets = item.Presets.CollectionEqualsHelper(
                rhs.Presets,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
        }
        
        public string Print(
            ITintAssetsGetter item,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITintAssetsGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TintAssets.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TintAssets =>");
            }
            else
            {
                sb.AppendLine($"{name} (TintAssets) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITintAssetsGetter item,
            StructuredStringBuilder sb,
            TintAssets.Mask<bool>? printMask = null)
        {
            if ((printMask?.Index ?? true)
                && item.Index is {} IndexItem)
            {
                sb.AppendItem(IndexItem, "Index");
            }
            if ((printMask?.FileName ?? true)
                && item.FileName is {} FileNameItem)
            {
                sb.AppendItem(FileNameItem, "FileName");
            }
            if ((printMask?.MaskType ?? true)
                && item.MaskType is {} MaskTypeItem)
            {
                sb.AppendItem(MaskTypeItem, "MaskType");
            }
            if (printMask?.PresetDefault ?? true)
            {
                sb.AppendItem(item.PresetDefault.FormKeyNullable, "PresetDefault");
            }
            if (printMask?.Presets?.Overall ?? true)
            {
                sb.AppendLine("Presets =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Presets)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITintAssetsGetter? lhs,
            ITintAssetsGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if ((equalsMask?.GetShouldTranslate((int)TintAssets_FieldIndex.Index) ?? true))
            {
                if (lhs.Index != rhs.Index) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintAssets_FieldIndex.FileName) ?? true))
            {
                if (!object.Equals(lhs.FileName, rhs.FileName)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintAssets_FieldIndex.MaskType) ?? true))
            {
                if (lhs.MaskType != rhs.MaskType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintAssets_FieldIndex.PresetDefault) ?? true))
            {
                if (!lhs.PresetDefault.Equals(rhs.PresetDefault)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TintAssets_FieldIndex.Presets) ?? true))
            {
                if (!lhs.Presets.SequenceEqual(rhs.Presets, (l, r) => ((TintPresetCommon)((ITintPresetGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)TintAssets_FieldIndex.Presets)))) return false;
            }
            return true;
        }
        
        public virtual int GetHashCode(ITintAssetsGetter item)
        {
            var hash = new HashCode();
            if (item.Index is {} Indexitem)
            {
                hash.Add(Indexitem);
            }
            if (item.FileName is {} FileNameitem)
            {
                hash.Add(FileNameitem);
            }
            if (item.MaskType is {} MaskTypeitem)
            {
                hash.Add(MaskTypeitem);
            }
            hash.Add(item.PresetDefault);
            hash.Add(item.Presets);
            return hash.ToHashCode();
        }
        
        #endregion
        
        
        public object GetNew()
        {
            return TintAssets.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITintAssetsGetter obj)
        {
            if (FormLinkInformation.TryFactory(obj.PresetDefault, out var PresetDefaultInfo))
            {
                yield return PresetDefaultInfo;
            }
            foreach (var item in obj.Presets.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ITintAssetsGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                if (obj.FileName != null)
                {
                    yield return obj.FileName;
                }
            }
            yield break;
        }
        
        #endregion
        
    }
    internal partial class TintAssetsSetterTranslationCommon
    {
        public static readonly TintAssetsSetterTranslationCommon Instance = new TintAssetsSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITintAssets item,
            ITintAssetsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.Index) ?? true))
            {
                item.Index = rhs.Index;
            }
            item.FileName = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.FileName, rhs.FileName);
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.MaskType) ?? true))
            {
                item.MaskType = rhs.MaskType;
            }
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.PresetDefault) ?? true))
            {
                item.PresetDefault.SetTo(rhs.PresetDefault.FormKeyNullable);
            }
            if ((copyMask?.GetShouldTranslate((int)TintAssets_FieldIndex.Presets) ?? true))
            {
                errorMask?.PushIndex((int)TintAssets_FieldIndex.Presets);
                try
                {
                    item.Presets.SetTo(
                        rhs.Presets
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITintAssets item,
            ITintAssetsGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        #endregion
        
        public TintAssets DeepCopy(
            ITintAssetsGetter item,
            TintAssets.TranslationMask? copyMask = null)
        {
            TintAssets ret = (TintAssets)((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetNew();
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TintAssets DeepCopy(
            ITintAssetsGetter item,
            out TintAssets.ErrorMask errorMask,
            TintAssets.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TintAssets ret = (TintAssets)((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetNew();
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TintAssets.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TintAssets DeepCopy(
            ITintAssetsGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TintAssets ret = (TintAssets)((TintAssetsCommon)((ITintAssetsGetter)item).CommonInstance()!).GetNew();
            ((TintAssetsSetterTranslationCommon)((ITintAssetsGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class TintAssets
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintAssets_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TintAssets_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintAssetsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterInstance()
        {
            return TintAssetsSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintAssetsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonSetterInstance() => this.CommonSetterInstance();
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class TintAssetsBinaryWriteTranslation : IBinaryWriteTranslator
    {
        public static readonly TintAssetsBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITintAssetsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            UInt16BinaryTranslation<MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer: writer,
                item: item.Index,
                header: translationParams.ConvertToCustom(RecordTypes.TINI));
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.FileName?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.TINT),
                binaryType: StringBinaryType.NullTerminate);
            EnumBinaryTranslation<TintAssets.TintMaskType, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.MaskType,
                length: 2,
                header: translationParams.ConvertToCustom(RecordTypes.TINP));
            FormLinkBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.PresetDefault,
                header: translationParams.ConvertToCustom(RecordTypes.TIND));
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<ITintPresetGetter>.Instance.Write(
                writer: writer,
                items: item.Presets,
                transl: (MutagenWriter subWriter, ITintPresetGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((TintPresetBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            ITintAssetsGetter item,
            TypedWriteParams translationParams)
        {
            WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

        public void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITintAssetsGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TintAssetsBinaryCreateTranslation
    {
        public static readonly TintAssetsBinaryCreateTranslation Instance = new TintAssetsBinaryCreateTranslation();

        public static ParseResult FillBinaryRecordTypes(
            ITintAssets item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.TINI:
                {
                    if (lastParsed.ShortCircuit((int)TintAssets_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Index = frame.ReadUInt16();
                    return (int)TintAssets_FieldIndex.Index;
                }
                case RecordTypeInts.TINT:
                {
                    if (lastParsed.ShortCircuit((int)TintAssets_FieldIndex.FileName, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.FileName = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)TintAssets_FieldIndex.FileName;
                }
                case RecordTypeInts.TINP:
                {
                    if (lastParsed.ShortCircuit((int)TintAssets_FieldIndex.MaskType, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.MaskType = EnumBinaryTranslation<TintAssets.TintMaskType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)TintAssets_FieldIndex.MaskType;
                }
                case RecordTypeInts.TIND:
                {
                    if (lastParsed.ShortCircuit((int)TintAssets_FieldIndex.PresetDefault, translationParams)) return ParseResult.Stop;
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.PresetDefault.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)TintAssets_FieldIndex.PresetDefault;
                }
                case RecordTypeInts.TINC:
                case RecordTypeInts.TINV:
                case RecordTypeInts.TIRS:
                {
                    if (lastParsed.ShortCircuit((int)TintAssets_FieldIndex.Presets, translationParams)) return ParseResult.Stop;
                    item.Presets.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<TintPreset>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: TintPreset_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: TintPreset.TryCreateFromBinary));
                    return (int)TintAssets_FieldIndex.Presets;
                }
                default:
                    return ParseResult.Stop;
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TintAssetsBinaryTranslationMixIn
    {
        public static void WriteToBinary(
            this ITintAssetsGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TintAssetsBinaryWriteTranslation)item.BinaryWriteTranslator).Write(
                item: item,
                writer: writer,
                translationParams: translationParams);
        }

    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class TintAssetsBinaryOverlay :
        PluginBinaryOverlay,
        ITintAssetsGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TintAssets_Registration.Instance;
        public static ILoquiRegistration StaticRegistration => TintAssets_Registration.Instance;
        [DebuggerStepThrough]
        protected object CommonInstance() => TintAssetsCommon.Instance;
        [DebuggerStepThrough]
        protected object CommonSetterTranslationInstance() => TintAssetsSetterTranslationCommon.Instance;
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonInstance() => this.CommonInstance();
        [DebuggerStepThrough]
        object? ITintAssetsGetter.CommonSetterInstance() => null;
        [DebuggerStepThrough]
        object ITintAssetsGetter.CommonSetterTranslationInstance() => this.CommonSetterTranslationInstance();

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public IEnumerable<IFormLinkGetter> EnumerateFormLinks() => TintAssetsCommon.Instance.EnumerateFormLinks(this);
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => TintAssetsCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected object BinaryWriteTranslator => TintAssetsBinaryWriteTranslation.Instance;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        object IBinaryItem.BinaryWriteTranslator => this.BinaryWriteTranslator;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TintAssetsBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }

        #region Index
        private int? _IndexLocation;
        public UInt16? Index => _IndexLocation.HasValue ? BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _IndexLocation.Value, _package.MetaData.Constants)) : default(UInt16?);
        #endregion
        #region FileName
        private int? _FileNameLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? FileName => _FileNameLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FileNameLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region MaskType
        private int? _MaskTypeLocation;
        public TintAssets.TintMaskType? MaskType => _MaskTypeLocation.HasValue ? (TintAssets.TintMaskType)BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MaskTypeLocation!.Value, _package.MetaData.Constants)) : default(TintAssets.TintMaskType?);
        #endregion
        #region PresetDefault
        private int? _PresetDefaultLocation;
        public IFormLinkNullableGetter<IColorRecordGetter> PresetDefault => FormLinkBinaryTranslation.Instance.NullableRecordOverlayFactory<IColorRecordGetter>(_package, _recordData, _PresetDefaultLocation);
        #endregion
        public IReadOnlyList<ITintPresetGetter> Presets { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TintAssetsBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITintAssetsGetter TintAssetsFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = ExtractTypelessSubrecordRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                translationParams: translationParams,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TintAssetsBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret.FillTypelessSubrecordTypes(
                stream: stream,
                finalPos: stream.Length,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITintAssetsGetter TintAssetsFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TintAssetsFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.TINI:
                {
                    if (lastParsed.ShortCircuit((int)TintAssets_FieldIndex.Index, translationParams)) return ParseResult.Stop;
                    _IndexLocation = (stream.Position - offset);
                    return (int)TintAssets_FieldIndex.Index;
                }
                case RecordTypeInts.TINT:
                {
                    if (lastParsed.ShortCircuit((int)TintAssets_FieldIndex.FileName, translationParams)) return ParseResult.Stop;
                    _FileNameLocation = (stream.Position - offset);
                    return (int)TintAssets_FieldIndex.FileName;
                }
                case RecordTypeInts.TINP:
                {
                    if (lastParsed.ShortCircuit((int)TintAssets_FieldIndex.MaskType, translationParams)) return ParseResult.Stop;
                    _MaskTypeLocation = (stream.Position - offset);
                    return (int)TintAssets_FieldIndex.MaskType;
                }
                case RecordTypeInts.TIND:
                {
                    if (lastParsed.ShortCircuit((int)TintAssets_FieldIndex.PresetDefault, translationParams)) return ParseResult.Stop;
                    _PresetDefaultLocation = (stream.Position - offset);
                    return (int)TintAssets_FieldIndex.PresetDefault;
                }
                case RecordTypeInts.TINC:
                case RecordTypeInts.TINV:
                case RecordTypeInts.TIRS:
                {
                    if (lastParsed.ShortCircuit((int)TintAssets_FieldIndex.Presets, translationParams)) return ParseResult.Stop;
                    this.Presets = this.ParseRepeatedTypelessSubrecord<ITintPresetGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: TintPreset_Registration.TriggerSpecs,
                        factory: TintPresetBinaryOverlay.TintPresetFactory);
                    return (int)TintAssets_FieldIndex.Presets;
                }
                default:
                    return ParseResult.Stop;
            }
        }
        #region To String

        public void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TintAssetsMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is not ITintAssetsGetter rhs) return false;
            return ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITintAssetsGetter? obj)
        {
            return ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TintAssetsCommon)((ITintAssetsGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

