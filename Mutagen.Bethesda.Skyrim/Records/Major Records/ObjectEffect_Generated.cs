/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Strings;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class ObjectEffect :
        SkyrimMajorRecord,
        IEquatable<IObjectEffectGetter>,
        ILoquiObjectSetter<ObjectEffect>,
        IObjectEffectInternal
    {
        #region Ctor
        protected ObjectEffect()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectEffectGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        public TranslatedString? Name { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? IObjectEffectGetter.Name => this.Name;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter? ITranslatedNamedGetter.Name => this.Name;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamed.Name
        {
            get => this.Name?.String;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequired.Name
        {
            get => this.Name?.String ?? string.Empty;
            set => this.Name = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TranslatedString ITranslatedNamedRequired.Name
        {
            get => this.Name ?? string.Empty;
            set => this.Name = value;
        }
        #endregion
        #endregion
        #region EnchantmentCost
        public UInt32 EnchantmentCost { get; set; } = default(UInt32);
        #endregion
        #region Flags
        public ObjectEffect.Flag Flags { get; set; } = default(ObjectEffect.Flag);
        #endregion
        #region CastType
        public CastType CastType { get; set; } = default(CastType);
        #endregion
        #region EnchantmentAmount
        public Int32 EnchantmentAmount { get; set; } = default(Int32);
        #endregion
        #region TargetType
        public TargetType TargetType { get; set; } = default(TargetType);
        #endregion
        #region EnchantType
        public ObjectEffect.EnchantTypeEnum EnchantType { get; set; } = default(ObjectEffect.EnchantTypeEnum);
        #endregion
        #region ChargeTime
        public Single ChargeTime { get; set; } = default(Single);
        #endregion
        #region BaseEnchantment
        private readonly IFormLink<IObjectEffectGetter> _BaseEnchantment = new FormLink<IObjectEffectGetter>();
        public IFormLink<IObjectEffectGetter> BaseEnchantment
        {
            get => _BaseEnchantment;
            set => _BaseEnchantment.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IObjectEffectGetter> IObjectEffectGetter.BaseEnchantment => this.BaseEnchantment;
        #endregion
        #region WornRestrictions
        private readonly IFormLink<IFormListGetter> _WornRestrictions = new FormLink<IFormListGetter>();
        public IFormLink<IFormListGetter> WornRestrictions
        {
            get => _WornRestrictions;
            set => _WornRestrictions.SetTo(value);
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IFormLinkGetter<IFormListGetter> IObjectEffectGetter.WornRestrictions => this.WornRestrictions;
        #endregion
        #region Effects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ExtendedList<Effect> _Effects = new ExtendedList<Effect>();
        public ExtendedList<Effect> Effects
        {
            get => this._Effects;
            init => this._Effects = value;
        }
        #region Interface Members
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IReadOnlyList<IEffectGetter> IObjectEffectGetter.Effects => _Effects;
        #endregion

        #endregion
        #region ENITDataTypeState
        public ObjectEffect.ENITDataType ENITDataTypeState { get; set; } = default(ObjectEffect.ENITDataType);
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Name = initialValue;
                this.EnchantmentCost = initialValue;
                this.Flags = initialValue;
                this.CastType = initialValue;
                this.EnchantmentAmount = initialValue;
                this.TargetType = initialValue;
                this.EnchantType = initialValue;
                this.ChargeTime = initialValue;
                this.BaseEnchantment = initialValue;
                this.WornRestrictions = initialValue;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(initialValue, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.ENITDataTypeState = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem ObjectBounds,
                TItem Name,
                TItem EnchantmentCost,
                TItem Flags,
                TItem CastType,
                TItem EnchantmentAmount,
                TItem TargetType,
                TItem EnchantType,
                TItem ChargeTime,
                TItem BaseEnchantment,
                TItem WornRestrictions,
                TItem Effects,
                TItem ENITDataTypeState)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Name = Name;
                this.EnchantmentCost = EnchantmentCost;
                this.Flags = Flags;
                this.CastType = CastType;
                this.EnchantmentAmount = EnchantmentAmount;
                this.TargetType = TargetType;
                this.EnchantType = EnchantType;
                this.ChargeTime = ChargeTime;
                this.BaseEnchantment = BaseEnchantment;
                this.WornRestrictions = WornRestrictions;
                this.Effects = new MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>(Effects, Enumerable.Empty<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>());
                this.ENITDataTypeState = ENITDataTypeState;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Name;
            public TItem EnchantmentCost;
            public TItem Flags;
            public TItem CastType;
            public TItem EnchantmentAmount;
            public TItem TargetType;
            public TItem EnchantType;
            public TItem ChargeTime;
            public TItem BaseEnchantment;
            public TItem WornRestrictions;
            public MaskItem<TItem, IEnumerable<MaskItemIndexed<TItem, Effect.Mask<TItem>?>>?>? Effects;
            public TItem ENITDataTypeState;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Name, rhs.Name)) return false;
                if (!object.Equals(this.EnchantmentCost, rhs.EnchantmentCost)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                if (!object.Equals(this.CastType, rhs.CastType)) return false;
                if (!object.Equals(this.EnchantmentAmount, rhs.EnchantmentAmount)) return false;
                if (!object.Equals(this.TargetType, rhs.TargetType)) return false;
                if (!object.Equals(this.EnchantType, rhs.EnchantType)) return false;
                if (!object.Equals(this.ChargeTime, rhs.ChargeTime)) return false;
                if (!object.Equals(this.BaseEnchantment, rhs.BaseEnchantment)) return false;
                if (!object.Equals(this.WornRestrictions, rhs.WornRestrictions)) return false;
                if (!object.Equals(this.Effects, rhs.Effects)) return false;
                if (!object.Equals(this.ENITDataTypeState, rhs.ENITDataTypeState)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Name);
                hash.Add(this.EnchantmentCost);
                hash.Add(this.Flags);
                hash.Add(this.CastType);
                hash.Add(this.EnchantmentAmount);
                hash.Add(this.TargetType);
                hash.Add(this.EnchantType);
                hash.Add(this.ChargeTime);
                hash.Add(this.BaseEnchantment);
                hash.Add(this.WornRestrictions);
                hash.Add(this.Effects);
                hash.Add(this.ENITDataTypeState);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Name)) return false;
                if (!eval(this.EnchantmentCost)) return false;
                if (!eval(this.Flags)) return false;
                if (!eval(this.CastType)) return false;
                if (!eval(this.EnchantmentAmount)) return false;
                if (!eval(this.TargetType)) return false;
                if (!eval(this.EnchantType)) return false;
                if (!eval(this.ChargeTime)) return false;
                if (!eval(this.BaseEnchantment)) return false;
                if (!eval(this.WornRestrictions)) return false;
                if (this.Effects != null)
                {
                    if (!eval(this.Effects.Overall)) return false;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (!eval(this.ENITDataTypeState)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Name)) return true;
                if (eval(this.EnchantmentCost)) return true;
                if (eval(this.Flags)) return true;
                if (eval(this.CastType)) return true;
                if (eval(this.EnchantmentAmount)) return true;
                if (eval(this.TargetType)) return true;
                if (eval(this.EnchantType)) return true;
                if (eval(this.ChargeTime)) return true;
                if (eval(this.BaseEnchantment)) return true;
                if (eval(this.WornRestrictions)) return true;
                if (this.Effects != null)
                {
                    if (eval(this.Effects.Overall)) return true;
                    if (this.Effects.Specific != null)
                    {
                        foreach (var item in this.Effects.Specific)
                        {
                            if (!eval(item.Overall)) return false;
                            if (item.Specific != null && !item.Specific.All(eval)) return false;
                        }
                    }
                }
                if (eval(this.ENITDataTypeState)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new ObjectEffect.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Name = eval(this.Name);
                obj.EnchantmentCost = eval(this.EnchantmentCost);
                obj.Flags = eval(this.Flags);
                obj.CastType = eval(this.CastType);
                obj.EnchantmentAmount = eval(this.EnchantmentAmount);
                obj.TargetType = eval(this.TargetType);
                obj.EnchantType = eval(this.EnchantType);
                obj.ChargeTime = eval(this.ChargeTime);
                obj.BaseEnchantment = eval(this.BaseEnchantment);
                obj.WornRestrictions = eval(this.WornRestrictions);
                if (Effects != null)
                {
                    obj.Effects = new MaskItem<R, IEnumerable<MaskItemIndexed<R, Effect.Mask<R>?>>?>(eval(this.Effects.Overall), Enumerable.Empty<MaskItemIndexed<R, Effect.Mask<R>?>>());
                    if (Effects.Specific != null)
                    {
                        var l = new List<MaskItemIndexed<R, Effect.Mask<R>?>>();
                        obj.Effects.Specific = l;
                        foreach (var item in Effects.Specific)
                        {
                            MaskItemIndexed<R, Effect.Mask<R>?>? mask = item == null ? null : new MaskItemIndexed<R, Effect.Mask<R>?>(item.Index, eval(item.Overall), item.Specific?.Translate(eval));
                            if (mask == null) continue;
                            l.Add(mask);
                        }
                    }
                }
                obj.ENITDataTypeState = eval(this.ENITDataTypeState);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(ObjectEffect.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, ObjectEffect.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(ObjectEffect.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Name ?? true)
                    {
                        sb.AppendItem(Name, "Name");
                    }
                    if (printMask?.EnchantmentCost ?? true)
                    {
                        sb.AppendItem(EnchantmentCost, "EnchantmentCost");
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                    if (printMask?.CastType ?? true)
                    {
                        sb.AppendItem(CastType, "CastType");
                    }
                    if (printMask?.EnchantmentAmount ?? true)
                    {
                        sb.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                    }
                    if (printMask?.TargetType ?? true)
                    {
                        sb.AppendItem(TargetType, "TargetType");
                    }
                    if (printMask?.EnchantType ?? true)
                    {
                        sb.AppendItem(EnchantType, "EnchantType");
                    }
                    if (printMask?.ChargeTime ?? true)
                    {
                        sb.AppendItem(ChargeTime, "ChargeTime");
                    }
                    if (printMask?.BaseEnchantment ?? true)
                    {
                        sb.AppendItem(BaseEnchantment, "BaseEnchantment");
                    }
                    if (printMask?.WornRestrictions ?? true)
                    {
                        sb.AppendItem(WornRestrictions, "WornRestrictions");
                    }
                    if ((printMask?.Effects?.Overall ?? true)
                        && Effects is {} EffectsItem)
                    {
                        sb.AppendLine("Effects =>");
                        using (sb.Brace())
                        {
                            sb.AppendItem(EffectsItem.Overall);
                            if (EffectsItem.Specific != null)
                            {
                                foreach (var subItem in EffectsItem.Specific)
                                {
                                    using (sb.Brace())
                                    {
                                        subItem?.Print(sb);
                                    }
                                }
                            }
                        }
                    }
                    if (printMask?.ENITDataTypeState ?? true)
                    {
                        sb.AppendItem(ENITDataTypeState, "ENITDataTypeState");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Name;
            public Exception? EnchantmentCost;
            public Exception? Flags;
            public Exception? CastType;
            public Exception? EnchantmentAmount;
            public Exception? TargetType;
            public Exception? EnchantType;
            public Exception? ChargeTime;
            public Exception? BaseEnchantment;
            public Exception? WornRestrictions;
            public MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>? Effects;
            public Exception? ENITDataTypeState;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case ObjectEffect_FieldIndex.Name:
                        return Name;
                    case ObjectEffect_FieldIndex.EnchantmentCost:
                        return EnchantmentCost;
                    case ObjectEffect_FieldIndex.Flags:
                        return Flags;
                    case ObjectEffect_FieldIndex.CastType:
                        return CastType;
                    case ObjectEffect_FieldIndex.EnchantmentAmount:
                        return EnchantmentAmount;
                    case ObjectEffect_FieldIndex.TargetType:
                        return TargetType;
                    case ObjectEffect_FieldIndex.EnchantType:
                        return EnchantType;
                    case ObjectEffect_FieldIndex.ChargeTime:
                        return ChargeTime;
                    case ObjectEffect_FieldIndex.BaseEnchantment:
                        return BaseEnchantment;
                    case ObjectEffect_FieldIndex.WornRestrictions:
                        return WornRestrictions;
                    case ObjectEffect_FieldIndex.Effects:
                        return Effects;
                    case ObjectEffect_FieldIndex.ENITDataTypeState:
                        return ENITDataTypeState;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case ObjectEffect_FieldIndex.Name:
                        this.Name = ex;
                        break;
                    case ObjectEffect_FieldIndex.EnchantmentCost:
                        this.EnchantmentCost = ex;
                        break;
                    case ObjectEffect_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    case ObjectEffect_FieldIndex.CastType:
                        this.CastType = ex;
                        break;
                    case ObjectEffect_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = ex;
                        break;
                    case ObjectEffect_FieldIndex.TargetType:
                        this.TargetType = ex;
                        break;
                    case ObjectEffect_FieldIndex.EnchantType:
                        this.EnchantType = ex;
                        break;
                    case ObjectEffect_FieldIndex.ChargeTime:
                        this.ChargeTime = ex;
                        break;
                    case ObjectEffect_FieldIndex.BaseEnchantment:
                        this.BaseEnchantment = ex;
                        break;
                    case ObjectEffect_FieldIndex.WornRestrictions:
                        this.WornRestrictions = ex;
                        break;
                    case ObjectEffect_FieldIndex.Effects:
                        this.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(ex, null);
                        break;
                    case ObjectEffect_FieldIndex.ENITDataTypeState:
                        this.ENITDataTypeState = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                ObjectEffect_FieldIndex enu = (ObjectEffect_FieldIndex)index;
                switch (enu)
                {
                    case ObjectEffect_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Name:
                        this.Name = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.EnchantmentCost:
                        this.EnchantmentCost = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.CastType:
                        this.CastType = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.EnchantmentAmount:
                        this.EnchantmentAmount = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.TargetType:
                        this.TargetType = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.EnchantType:
                        this.EnchantType = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.ChargeTime:
                        this.ChargeTime = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.BaseEnchantment:
                        this.BaseEnchantment = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.WornRestrictions:
                        this.WornRestrictions = (Exception?)obj;
                        break;
                    case ObjectEffect_FieldIndex.Effects:
                        this.Effects = (MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>)obj;
                        break;
                    case ObjectEffect_FieldIndex.ENITDataTypeState:
                        this.ENITDataTypeState = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Name != null) return true;
                if (EnchantmentCost != null) return true;
                if (Flags != null) return true;
                if (CastType != null) return true;
                if (EnchantmentAmount != null) return true;
                if (TargetType != null) return true;
                if (EnchantType != null) return true;
                if (ChargeTime != null) return true;
                if (BaseEnchantment != null) return true;
                if (WornRestrictions != null) return true;
                if (Effects != null) return true;
                if (ENITDataTypeState != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(Name, "Name");
                }
                {
                    sb.AppendItem(EnchantmentCost, "EnchantmentCost");
                }
                {
                    sb.AppendItem(Flags, "Flags");
                }
                {
                    sb.AppendItem(CastType, "CastType");
                }
                {
                    sb.AppendItem(EnchantmentAmount, "EnchantmentAmount");
                }
                {
                    sb.AppendItem(TargetType, "TargetType");
                }
                {
                    sb.AppendItem(EnchantType, "EnchantType");
                }
                {
                    sb.AppendItem(ChargeTime, "ChargeTime");
                }
                {
                    sb.AppendItem(BaseEnchantment, "BaseEnchantment");
                }
                {
                    sb.AppendItem(WornRestrictions, "WornRestrictions");
                }
                if (Effects is {} EffectsItem)
                {
                    sb.AppendLine("Effects =>");
                    using (sb.Brace())
                    {
                        sb.AppendItem(EffectsItem.Overall);
                        if (EffectsItem.Specific != null)
                        {
                            foreach (var subItem in EffectsItem.Specific)
                            {
                                using (sb.Brace())
                                {
                                    subItem?.Print(sb);
                                }
                            }
                        }
                    }
                }
                {
                    sb.AppendItem(ENITDataTypeState, "ENITDataTypeState");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Name = this.Name.Combine(rhs.Name);
                ret.EnchantmentCost = this.EnchantmentCost.Combine(rhs.EnchantmentCost);
                ret.Flags = this.Flags.Combine(rhs.Flags);
                ret.CastType = this.CastType.Combine(rhs.CastType);
                ret.EnchantmentAmount = this.EnchantmentAmount.Combine(rhs.EnchantmentAmount);
                ret.TargetType = this.TargetType.Combine(rhs.TargetType);
                ret.EnchantType = this.EnchantType.Combine(rhs.EnchantType);
                ret.ChargeTime = this.ChargeTime.Combine(rhs.ChargeTime);
                ret.BaseEnchantment = this.BaseEnchantment.Combine(rhs.BaseEnchantment);
                ret.WornRestrictions = this.WornRestrictions.Combine(rhs.WornRestrictions);
                ret.Effects = new MaskItem<Exception?, IEnumerable<MaskItem<Exception?, Effect.ErrorMask?>>?>(Noggog.ExceptionExt.Combine(this.Effects?.Overall, rhs.Effects?.Overall), Noggog.ExceptionExt.Combine(this.Effects?.Specific, rhs.Effects?.Specific));
                ret.ENITDataTypeState = this.ENITDataTypeState.Combine(rhs.ENITDataTypeState);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Name;
            public bool EnchantmentCost;
            public bool Flags;
            public bool CastType;
            public bool EnchantmentAmount;
            public bool TargetType;
            public bool EnchantType;
            public bool ChargeTime;
            public bool BaseEnchantment;
            public bool WornRestrictions;
            public Effect.TranslationMask? Effects;
            public bool ENITDataTypeState;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Name = defaultOn;
                this.EnchantmentCost = defaultOn;
                this.Flags = defaultOn;
                this.CastType = defaultOn;
                this.EnchantmentAmount = defaultOn;
                this.TargetType = defaultOn;
                this.EnchantType = defaultOn;
                this.ChargeTime = defaultOn;
                this.BaseEnchantment = defaultOn;
                this.WornRestrictions = defaultOn;
                this.ENITDataTypeState = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Name, null));
                ret.Add((EnchantmentCost, null));
                ret.Add((Flags, null));
                ret.Add((CastType, null));
                ret.Add((EnchantmentAmount, null));
                ret.Add((TargetType, null));
                ret.Add((EnchantType, null));
                ret.Add((ChargeTime, null));
                ret.Add((BaseEnchantment, null));
                ret.Add((WornRestrictions, null));
                ret.Add((Effects == null ? DefaultOn : !Effects.GetCrystal().CopyNothing, Effects?.GetCrystal()));
                ret.Add((ENITDataTypeState, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = ObjectEffect_Registration.TriggeringRecordType;
        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ObjectEffectCommon.Instance.EnumerateFormLinks(this);
        public override void RemapLinks(IReadOnlyDictionary<FormKey, FormKey> mapping) => ObjectEffectSetterCommon.Instance.RemapLinks(this, mapping);
        public ObjectEffect(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private ObjectEffect(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal ObjectEffect(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public ObjectEffect(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public ObjectEffect(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<ObjectEffect>.ToString(this);
        }

        protected override Type LinkType => typeof(IObjectEffect);

        [Flags]
        public enum ENITDataType
        {
            Break0 = 1
        }
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IObjectEffectGetter rhs) return false;
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectEffectGetter? obj)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static ObjectEffect CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new ObjectEffect();
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out ObjectEffect item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new ObjectEffect GetNew()
        {
            return new ObjectEffect();
        }

    }
    #endregion

    #region Interface
    public partial interface IObjectEffect :
        IEffectRecord,
        IExplodeSpawn,
        IFormLinkContainer,
        IHasEffects,
        IKnowable,
        ILoquiObjectSetter<IObjectEffectInternal>,
        IMagicItem,
        INamed,
        INamedRequired,
        IObjectBounded,
        IObjectEffectGetter,
        ISkyrimMajorRecordInternal,
        ITranslatedNamed,
        ITranslatedNamedRequired
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        /// <summary>
        /// Aspects: INamed, INamedRequired, ITranslatedNamed, ITranslatedNamedRequired
        /// </summary>
        new TranslatedString? Name { get; set; }
        new UInt32 EnchantmentCost { get; set; }
        new ObjectEffect.Flag Flags { get; set; }
        new CastType CastType { get; set; }
        new Int32 EnchantmentAmount { get; set; }
        new TargetType TargetType { get; set; }
        new ObjectEffect.EnchantTypeEnum EnchantType { get; set; }
        new Single ChargeTime { get; set; }
        new IFormLink<IObjectEffectGetter> BaseEnchantment { get; set; }
        new IFormLink<IFormListGetter> WornRestrictions { get; set; }
        new ExtendedList<Effect> Effects { get; }
        new ObjectEffect.ENITDataType ENITDataTypeState { get; set; }
    }

    public partial interface IObjectEffectInternal :
        ISkyrimMajorRecordInternal,
        IObjectEffect,
        IObjectEffectGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.ENCH)]
    public partial interface IObjectEffectGetter :
        ISkyrimMajorRecordGetter,
        IBinaryItem,
        IEffectRecordGetter,
        IExplodeSpawnGetter,
        IFormLinkContainerGetter,
        IHasEffectsGetter,
        IKnowableGetter,
        ILoquiObject<IObjectEffectGetter>,
        IMagicItemGetter,
        IMapsToGetter<IObjectEffectGetter>,
        INamedGetter,
        INamedRequiredGetter,
        IObjectBoundedGetter,
        ITranslatedNamedGetter,
        ITranslatedNamedRequiredGetter
    {
        static new ILoquiRegistration StaticRegistration => ObjectEffect_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        #region Name
        /// <summary>
        /// Aspects: INamedGetter, INamedRequiredGetter, ITranslatedNamedGetter, ITranslatedNamedRequiredGetter
        /// </summary>
        ITranslatedStringGetter? Name { get; }
        #endregion
        UInt32 EnchantmentCost { get; }
        ObjectEffect.Flag Flags { get; }
        CastType CastType { get; }
        Int32 EnchantmentAmount { get; }
        TargetType TargetType { get; }
        ObjectEffect.EnchantTypeEnum EnchantType { get; }
        Single ChargeTime { get; }
        IFormLinkGetter<IObjectEffectGetter> BaseEnchantment { get; }
        IFormLinkGetter<IFormListGetter> WornRestrictions { get; }
        IReadOnlyList<IEffectGetter> Effects { get; }
        ObjectEffect.ENITDataType ENITDataTypeState { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class ObjectEffectMixIn
    {
        public static void Clear(this IObjectEffectInternal item)
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static ObjectEffect.Mask<bool> GetEqualsMask(
            this IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this IObjectEffectGetter item,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this IObjectEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            ObjectEffect.TranslationMask? equalsMask = null)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this IObjectEffectInternal lhs,
            IObjectEffectGetter rhs,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = ObjectEffect.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this IObjectEffectInternal lhs,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static ObjectEffect DeepCopy(
            this IObjectEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static ObjectEffect Duplicate(
            this IObjectEffectGetter item,
            FormKey formKey,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static ObjectEffect Duplicate(
            this IObjectEffectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this IObjectEffectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((ObjectEffectSetterCommon)((IObjectEffectGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum ObjectEffect_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        ObjectBounds = 7,
        Name = 8,
        EnchantmentCost = 9,
        Flags = 10,
        CastType = 11,
        EnchantmentAmount = 12,
        TargetType = 13,
        EnchantType = 14,
        ChargeTime = 15,
        BaseEnchantment = 16,
        WornRestrictions = 17,
        Effects = 18,
        ENITDataTypeState = 19,
    }
    #endregion

    #region Registration
    internal partial class ObjectEffect_Registration : ILoquiRegistration
    {
        public static readonly ObjectEffect_Registration Instance = new ObjectEffect_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 13;

        public const ushort FieldCount = 20;

        public static readonly Type MaskType = typeof(ObjectEffect.Mask<>);

        public static readonly Type ErrorMaskType = typeof(ObjectEffect.ErrorMask);

        public static readonly Type ClassType = typeof(ObjectEffect);

        public static readonly Type GetterType = typeof(IObjectEffectGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(IObjectEffect);

        public static readonly Type? InternalSetterType = typeof(IObjectEffectInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.ObjectEffect";

        public const string Name = "ObjectEffect";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.ENCH;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.ENCH);
            var all = RecordCollection.Factory(
                RecordTypes.ENCH,
                RecordTypes.OBND,
                RecordTypes.FULL,
                RecordTypes.ENIT,
                RecordTypes.EFID,
                RecordTypes.EFIT,
                RecordTypes.CTDA,
                RecordTypes.CIS1,
                RecordTypes.CIS2);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(ObjectEffectBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class ObjectEffectSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly ObjectEffectSetterCommon Instance = new ObjectEffectSetterCommon();

        partial void ClearPartial();
        
        public void Clear(IObjectEffectInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Name = default;
            item.EnchantmentCost = default(UInt32);
            item.Flags = default(ObjectEffect.Flag);
            item.CastType = default(CastType);
            item.EnchantmentAmount = default(Int32);
            item.TargetType = default(TargetType);
            item.EnchantType = default(ObjectEffect.EnchantTypeEnum);
            item.ChargeTime = default(Single);
            item.BaseEnchantment.Clear();
            item.WornRestrictions.Clear();
            item.Effects.Clear();
            item.ENITDataTypeState = default(ObjectEffect.ENITDataType);
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (IObjectEffectInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (IObjectEffectInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(IObjectEffect obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
            obj.BaseEnchantment.Relink(mapping);
            obj.WornRestrictions.Relink(mapping);
            obj.Effects.RemapLinks(mapping);
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            IObjectEffectInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<IObjectEffectInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: ObjectEffectBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: ObjectEffectBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ObjectEffect)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (ObjectEffect)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class ObjectEffectCommon : SkyrimMajorRecordCommon
    {
        public new static readonly ObjectEffectCommon Instance = new ObjectEffectCommon();

        public ObjectEffect.Mask<bool> GetEqualsMask(
            IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new ObjectEffect.Mask<bool>(false);
            ((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            IObjectEffectGetter item,
            IObjectEffectGetter rhs,
            ObjectEffect.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Name = object.Equals(item.Name, rhs.Name);
            ret.EnchantmentCost = item.EnchantmentCost == rhs.EnchantmentCost;
            ret.Flags = item.Flags == rhs.Flags;
            ret.CastType = item.CastType == rhs.CastType;
            ret.EnchantmentAmount = item.EnchantmentAmount == rhs.EnchantmentAmount;
            ret.TargetType = item.TargetType == rhs.TargetType;
            ret.EnchantType = item.EnchantType == rhs.EnchantType;
            ret.ChargeTime = item.ChargeTime.EqualsWithin(rhs.ChargeTime);
            ret.BaseEnchantment = item.BaseEnchantment.Equals(rhs.BaseEnchantment);
            ret.WornRestrictions = item.WornRestrictions.Equals(rhs.WornRestrictions);
            ret.Effects = item.Effects.CollectionEqualsHelper(
                rhs.Effects,
                (loqLhs, loqRhs) => loqLhs.GetEqualsMask(loqRhs, include),
                include);
            ret.ENITDataTypeState = item.ENITDataTypeState == rhs.ENITDataTypeState;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            IObjectEffectGetter item,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            IObjectEffectGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"ObjectEffect =>");
            }
            else
            {
                sb.AppendLine($"{name} (ObjectEffect) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            IObjectEffectGetter item,
            StructuredStringBuilder sb,
            ObjectEffect.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.Name ?? true)
                && item.Name is {} NameItem)
            {
                sb.AppendItem(NameItem, "Name");
            }
            if (printMask?.EnchantmentCost ?? true)
            {
                sb.AppendItem(item.EnchantmentCost, "EnchantmentCost");
            }
            if (printMask?.Flags ?? true)
            {
                sb.AppendItem(item.Flags, "Flags");
            }
            if (printMask?.CastType ?? true)
            {
                sb.AppendItem(item.CastType, "CastType");
            }
            if (printMask?.EnchantmentAmount ?? true)
            {
                sb.AppendItem(item.EnchantmentAmount, "EnchantmentAmount");
            }
            if (printMask?.TargetType ?? true)
            {
                sb.AppendItem(item.TargetType, "TargetType");
            }
            if (printMask?.EnchantType ?? true)
            {
                sb.AppendItem(item.EnchantType, "EnchantType");
            }
            if (printMask?.ChargeTime ?? true)
            {
                sb.AppendItem(item.ChargeTime, "ChargeTime");
            }
            if (printMask?.BaseEnchantment ?? true)
            {
                sb.AppendItem(item.BaseEnchantment.FormKey, "BaseEnchantment");
            }
            if (printMask?.WornRestrictions ?? true)
            {
                sb.AppendItem(item.WornRestrictions.FormKey, "WornRestrictions");
            }
            if (printMask?.Effects?.Overall ?? true)
            {
                sb.AppendLine("Effects =>");
                using (sb.Brace())
                {
                    foreach (var subItem in item.Effects)
                    {
                        using (sb.Brace())
                        {
                            subItem?.Print(sb, "Item");
                        }
                    }
                }
            }
            if (printMask?.ENITDataTypeState ?? true)
            {
                sb.AppendItem(item.ENITDataTypeState, "ENITDataTypeState");
            }
        }
        
        public static ObjectEffect_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (ObjectEffect_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (ObjectEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new ObjectEffect_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (ObjectEffect_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (ObjectEffect_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            IObjectEffectGetter? lhs,
            IObjectEffectGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Name) ?? true))
            {
                if (!object.Equals(lhs.Name, rhs.Name)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.EnchantmentCost) ?? true))
            {
                if (lhs.EnchantmentCost != rhs.EnchantmentCost) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.CastType) ?? true))
            {
                if (lhs.CastType != rhs.CastType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.EnchantmentAmount) ?? true))
            {
                if (lhs.EnchantmentAmount != rhs.EnchantmentAmount) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.TargetType) ?? true))
            {
                if (lhs.TargetType != rhs.TargetType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.EnchantType) ?? true))
            {
                if (lhs.EnchantType != rhs.EnchantType) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ChargeTime) ?? true))
            {
                if (!lhs.ChargeTime.EqualsWithin(rhs.ChargeTime)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.BaseEnchantment) ?? true))
            {
                if (!lhs.BaseEnchantment.Equals(rhs.BaseEnchantment)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.WornRestrictions) ?? true))
            {
                if (!lhs.WornRestrictions.Equals(rhs.WornRestrictions)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Effects) ?? true))
            {
                if (!lhs.Effects.SequenceEqual(rhs.Effects, (l, r) => ((EffectCommon)((IEffectGetter)l).CommonInstance()!).Equals(l, r, equalsMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.Effects)))) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ENITDataTypeState) ?? true))
            {
                if (lhs.ENITDataTypeState != rhs.ENITDataTypeState) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IObjectEffectGetter?)lhs,
                rhs: rhs as IObjectEffectGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (IObjectEffectGetter?)lhs,
                rhs: rhs as IObjectEffectGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(IObjectEffectGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Name is {} Nameitem)
            {
                hash.Add(Nameitem);
            }
            hash.Add(item.EnchantmentCost);
            hash.Add(item.Flags);
            hash.Add(item.CastType);
            hash.Add(item.EnchantmentAmount);
            hash.Add(item.TargetType);
            hash.Add(item.EnchantType);
            hash.Add(item.ChargeTime);
            hash.Add(item.BaseEnchantment);
            hash.Add(item.WornRestrictions);
            hash.Add(item.Effects);
            hash.Add(item.ENITDataTypeState);
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (IObjectEffectGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (IObjectEffectGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return ObjectEffect.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(IObjectEffectGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield return FormLinkInformation.Factory(obj.BaseEnchantment);
            yield return FormLinkInformation.Factory(obj.WornRestrictions);
            foreach (var item in obj.Effects.SelectMany(f => f.EnumerateFormLinks()))
            {
                yield return FormLinkInformation.Factory(item);
            }
            yield break;
        }
        
        #region Duplicate
        public ObjectEffect Duplicate(
            IObjectEffectGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new ObjectEffect(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IObjectEffectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (IObjectEffectGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class ObjectEffectSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly ObjectEffectSetterTranslationCommon Instance = new ObjectEffectSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            IObjectEffectInternal item,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            IObjectEffect item,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)ObjectEffect_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)ObjectEffect_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Name) ?? true))
            {
                item.Name = rhs.Name?.DeepCopy();
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.EnchantmentCost) ?? true))
            {
                item.EnchantmentCost = rhs.EnchantmentCost;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.CastType) ?? true))
            {
                item.CastType = rhs.CastType;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.EnchantmentAmount) ?? true))
            {
                item.EnchantmentAmount = rhs.EnchantmentAmount;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.TargetType) ?? true))
            {
                item.TargetType = rhs.TargetType;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.EnchantType) ?? true))
            {
                item.EnchantType = rhs.EnchantType;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ChargeTime) ?? true))
            {
                item.ChargeTime = rhs.ChargeTime;
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.BaseEnchantment) ?? true))
            {
                item.BaseEnchantment.SetTo(rhs.BaseEnchantment.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.WornRestrictions) ?? true))
            {
                item.WornRestrictions.SetTo(rhs.WornRestrictions.FormKey);
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.Effects) ?? true))
            {
                errorMask?.PushIndex((int)ObjectEffect_FieldIndex.Effects);
                try
                {
                    item.Effects.SetTo(
                        rhs.Effects
                        .Select(r =>
                        {
                            return r.DeepCopy(
                                errorMask: errorMask,
                                default(TranslationCrystal));
                        }));
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)ObjectEffect_FieldIndex.ENITDataTypeState) ?? true))
            {
                item.ENITDataTypeState = rhs.ENITDataTypeState;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            IObjectEffect item,
            IObjectEffectGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffectInternal)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffect)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffectInternal)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (IObjectEffect)item,
                rhs: (IObjectEffectGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            out ObjectEffect.ErrorMask errorMask,
            ObjectEffect.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = ObjectEffect.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public ObjectEffect DeepCopy(
            IObjectEffectGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            ObjectEffect ret = (ObjectEffect)((ObjectEffectCommon)((IObjectEffectGetter)item).CommonInstance()!).GetNew();
            ((ObjectEffectSetterTranslationCommon)((IObjectEffectGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class ObjectEffect
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ObjectEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ObjectEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return ObjectEffectSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectEffectSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class ObjectEffectBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly ObjectEffectBinaryWriteTranslation Instance = new();

        public static void WriteEmbedded(
            IObjectEffectGetter item,
            MutagenWriter writer)
        {
            SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded(
                item: item,
                writer: writer);
        }

        public static void WriteRecordTypes(
            IObjectEffectGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Name,
                header: translationParams.ConvertToCustom(RecordTypes.FULL),
                binaryType: StringBinaryType.NullTerminate,
                source: StringsSource.Normal);
            using (HeaderExport.Subrecord(writer, translationParams.ConvertToCustom(RecordTypes.ENIT)))
            {
                writer.Write(item.EnchantmentCost);
                EnumBinaryTranslation<ObjectEffect.Flag, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.Flags,
                    length: 4);
                EnumBinaryTranslation<CastType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.CastType,
                    length: 4);
                writer.Write(item.EnchantmentAmount);
                EnumBinaryTranslation<TargetType, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.TargetType,
                    length: 4);
                EnumBinaryTranslation<ObjectEffect.EnchantTypeEnum, MutagenFrame, MutagenWriter>.Instance.Write(
                    writer,
                    item.EnchantType,
                    length: 4);
                FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Write(
                    writer: writer,
                    item: item.ChargeTime);
                FormLinkBinaryTranslation.Instance.Write(
                    writer: writer,
                    item: item.BaseEnchantment);
                if (!item.ENITDataTypeState.HasFlag(ObjectEffect.ENITDataType.Break0))
                {
                    FormLinkBinaryTranslation.Instance.Write(
                        writer: writer,
                        item: item.WornRestrictions);
                }
            }
            Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<IEffectGetter>.Instance.Write(
                writer: writer,
                items: item.Effects,
                transl: (MutagenWriter subWriter, IEffectGetter subItem, TypedWriteParams conv) =>
                {
                    var Item = subItem;
                    ((EffectBinaryWriteTranslation)((IBinaryItem)Item).BinaryWriteTranslator).Write(
                        item: Item,
                        writer: subWriter,
                        translationParams: conv);
                });
        }

        public void Write(
            MutagenWriter writer,
            IObjectEffectGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.ENCH,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (IObjectEffectGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class ObjectEffectBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly ObjectEffectBinaryCreateTranslation Instance = new ObjectEffectBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.ENCH;
        public static void FillBinaryStructs(
            IObjectEffectInternal item,
            MutagenFrame frame)
        {
            SkyrimMajorRecordBinaryCreateTranslation.FillBinaryStructs(
                item: item,
                frame: frame);
        }

        public static ParseResult FillBinaryRecordTypes(
            IObjectEffectInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)ObjectEffect_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Name = StringBinaryTranslation.Instance.Parse(
                        reader: frame.SpawnWithLength(contentLength),
                        eager: true,
                        source: StringsSource.Normal,
                        stringBinaryType: StringBinaryType.NullTerminate,
                        parseWhole: true);
                    return (int)ObjectEffect_FieldIndex.Name;
                }
                case RecordTypeInts.ENIT:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    var dataFrame = frame.SpawnWithLength(contentLength);
                    if (dataFrame.Remaining < 4) return null;
                    item.EnchantmentCost = dataFrame.ReadUInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.Flags = EnumBinaryTranslation<ObjectEffect.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.CastType = EnumBinaryTranslation<CastType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.EnchantmentAmount = dataFrame.ReadInt32();
                    if (dataFrame.Remaining < 4) return null;
                    item.TargetType = EnumBinaryTranslation<TargetType, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.EnchantType = EnumBinaryTranslation<ObjectEffect.EnchantTypeEnum, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: dataFrame,
                        length: 4);
                    if (dataFrame.Remaining < 4) return null;
                    item.ChargeTime = FloatBinaryTranslation<MutagenFrame, MutagenWriter>.Instance.Parse(reader: dataFrame);
                    if (dataFrame.Remaining < 4) return null;
                    item.BaseEnchantment.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    if (dataFrame.Complete)
                    {
                        item.ENITDataTypeState |= ObjectEffect.ENITDataType.Break0;
                        return (int)ObjectEffect_FieldIndex.BaseEnchantment;
                    }
                    if (dataFrame.Remaining < 4) return null;
                    item.WornRestrictions.SetTo(FormLinkBinaryTranslation.Instance.Parse(reader: frame));
                    return (int)ObjectEffect_FieldIndex.WornRestrictions;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                {
                    item.Effects.SetTo(
                        Mutagen.Bethesda.Plugins.Binary.Translations.ListBinaryTranslation<Effect>.Instance.Parse(
                            reader: frame,
                            triggeringRecord: Effect_Registration.TriggerSpecs,
                            translationParams: translationParams,
                            transl: Effect.TryCreateFromBinary));
                    return (int)ObjectEffect_FieldIndex.Effects;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class ObjectEffectBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class ObjectEffectBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        IObjectEffectGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => ObjectEffect_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => ObjectEffect_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => ObjectEffectCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => ObjectEffectSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IFormLinkGetter> EnumerateFormLinks() => ObjectEffectCommon.Instance.EnumerateFormLinks(this);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => ObjectEffectBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((ObjectEffectBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(IObjectEffect);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Name
        private int? _NameLocation;
        public ITranslatedStringGetter? Name => _NameLocation.HasValue ? StringBinaryTranslation.Instance.Parse(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NameLocation.Value, _package.MetaData.Constants), StringsSource.Normal, parsingBundle: _package.MetaData, eager: false) : default(TranslatedString?);
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string INamedRequiredGetter.Name => this.Name?.String ?? string.Empty;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        string? INamedGetter.Name => this.Name?.String;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ITranslatedStringGetter ITranslatedNamedRequiredGetter.Name => this.Name ?? TranslatedString.Empty;
        #endregion
        #endregion
        private RangeInt32? _ENITLocation;
        public ObjectEffect.ENITDataType ENITDataTypeState { get; private set; }
        #region EnchantmentCost
        private int _EnchantmentCostLocation => _ENITLocation!.Value.Min;
        private bool _EnchantmentCost_IsSet => _ENITLocation.HasValue;
        public UInt32 EnchantmentCost => _EnchantmentCost_IsSet ? BinaryPrimitives.ReadUInt32LittleEndian(_recordData.Slice(_EnchantmentCostLocation, 4)) : default(UInt32);
        #endregion
        #region Flags
        private int _FlagsLocation => _ENITLocation!.Value.Min + 0x4;
        private bool _Flags_IsSet => _ENITLocation.HasValue;
        public ObjectEffect.Flag Flags => _Flags_IsSet ? (ObjectEffect.Flag)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_FlagsLocation, 0x4)) : default;
        #endregion
        #region CastType
        private int _CastTypeLocation => _ENITLocation!.Value.Min + 0x8;
        private bool _CastType_IsSet => _ENITLocation.HasValue;
        public CastType CastType => _CastType_IsSet ? (CastType)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_CastTypeLocation, 0x4)) : default;
        #endregion
        #region EnchantmentAmount
        private int _EnchantmentAmountLocation => _ENITLocation!.Value.Min + 0xC;
        private bool _EnchantmentAmount_IsSet => _ENITLocation.HasValue;
        public Int32 EnchantmentAmount => _EnchantmentAmount_IsSet ? BinaryPrimitives.ReadInt32LittleEndian(_recordData.Slice(_EnchantmentAmountLocation, 4)) : default(Int32);
        #endregion
        #region TargetType
        private int _TargetTypeLocation => _ENITLocation!.Value.Min + 0x10;
        private bool _TargetType_IsSet => _ENITLocation.HasValue;
        public TargetType TargetType => _TargetType_IsSet ? (TargetType)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_TargetTypeLocation, 0x4)) : default;
        #endregion
        #region EnchantType
        private int _EnchantTypeLocation => _ENITLocation!.Value.Min + 0x14;
        private bool _EnchantType_IsSet => _ENITLocation.HasValue;
        public ObjectEffect.EnchantTypeEnum EnchantType => _EnchantType_IsSet ? (ObjectEffect.EnchantTypeEnum)BinaryPrimitives.ReadInt32LittleEndian(_recordData.Span.Slice(_EnchantTypeLocation, 0x4)) : default;
        #endregion
        #region ChargeTime
        private int _ChargeTimeLocation => _ENITLocation!.Value.Min + 0x18;
        private bool _ChargeTime_IsSet => _ENITLocation.HasValue;
        public Single ChargeTime => _ChargeTime_IsSet ? _recordData.Slice(_ChargeTimeLocation, 4).Float() : default(Single);
        #endregion
        #region BaseEnchantment
        private int _BaseEnchantmentLocation => _ENITLocation!.Value.Min + 0x1C;
        private bool _BaseEnchantment_IsSet => _ENITLocation.HasValue;
        public IFormLinkGetter<IObjectEffectGetter> BaseEnchantment => _BaseEnchantment_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IObjectEffectGetter>(_package, _recordData.Span.Slice(_BaseEnchantmentLocation, 0x4), isSet: _BaseEnchantment_IsSet) : FormLink<IObjectEffectGetter>.Null;
        #endregion
        #region WornRestrictions
        private int _WornRestrictionsLocation => _ENITLocation!.Value.Min + 0x20;
        private bool _WornRestrictions_IsSet => _ENITLocation.HasValue && !ENITDataTypeState.HasFlag(ObjectEffect.ENITDataType.Break0);
        public IFormLinkGetter<IFormListGetter> WornRestrictions => _WornRestrictions_IsSet ? FormLinkBinaryTranslation.Instance.OverlayFactory<IFormListGetter>(_package, _recordData.Span.Slice(_WornRestrictionsLocation, 0x4), isSet: _WornRestrictions_IsSet) : FormLink<IFormListGetter>.Null;
        #endregion
        public IReadOnlyList<IEffectGetter> Effects { get; private set; } = [];
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected ObjectEffectBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static IObjectEffectGetter ObjectEffectFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new ObjectEffectBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static IObjectEffectGetter ObjectEffectFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return ObjectEffectFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)ObjectEffect_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.FULL:
                {
                    _NameLocation = (stream.Position - offset);
                    return (int)ObjectEffect_FieldIndex.Name;
                }
                case RecordTypeInts.ENIT:
                {
                    _ENITLocation = new((stream.Position - offset) + _package.MetaData.Constants.SubConstants.TypeAndLengthLength, finalPos - offset - 1);
                    var subLen = _package.MetaData.Constants.SubrecordHeader(_recordData.Slice((stream.Position - offset))).ContentLength;
                    if (subLen <= 0x20)
                    {
                        this.ENITDataTypeState |= ObjectEffect.ENITDataType.Break0;
                    }
                    return (int)ObjectEffect_FieldIndex.WornRestrictions;
                }
                case RecordTypeInts.EFID:
                case RecordTypeInts.EFIT:
                case RecordTypeInts.CTDA:
                {
                    this.Effects = this.ParseRepeatedTypelessSubrecord<IEffectGetter>(
                        stream: stream,
                        translationParams: translationParams,
                        trigger: Effect_Registration.TriggerSpecs,
                        factory: EffectBinaryOverlay.EffectFactory);
                    return (int)ObjectEffect_FieldIndex.Effects;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            ObjectEffectMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<ObjectEffect>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not IObjectEffectGetter rhs) return false;
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(IObjectEffectGetter? obj)
        {
            return ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((ObjectEffectCommon)((IObjectEffectGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

