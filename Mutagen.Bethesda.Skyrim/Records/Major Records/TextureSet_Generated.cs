/*
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
 * Autogenerated by Loqui.  Do not manually change.
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
*/
#region Usings
using Loqui;
using Loqui.Interfaces;
using Loqui.Internal;
using Mutagen.Bethesda.Assets;
using Mutagen.Bethesda.Binary;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Assets;
using Mutagen.Bethesda.Plugins.Binary.Headers;
using Mutagen.Bethesda.Plugins.Binary.Overlay;
using Mutagen.Bethesda.Plugins.Binary.Streams;
using Mutagen.Bethesda.Plugins.Binary.Translations;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Exceptions;
using Mutagen.Bethesda.Plugins.Internals;
using Mutagen.Bethesda.Plugins.Meta;
using Mutagen.Bethesda.Plugins.Records;
using Mutagen.Bethesda.Plugins.Records.Internals;
using Mutagen.Bethesda.Plugins.Records.Mapping;
using Mutagen.Bethesda.Plugins.Utility;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Skyrim.Assets;
using Mutagen.Bethesda.Skyrim.Internals;
using Mutagen.Bethesda.Translations.Binary;
using Noggog;
using Noggog.StructuredStrings;
using Noggog.StructuredStrings.CSharp;
using RecordTypeInts = Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts;
using RecordTypes = Mutagen.Bethesda.Skyrim.Internals.RecordTypes;
using System.Buffers.Binary;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Reactive.Disposables;
using System.Reactive.Linq;
#endregion

#nullable enable
namespace Mutagen.Bethesda.Skyrim
{
    #region Class
    public partial class TextureSet :
        SkyrimMajorRecord,
        IEquatable<ITextureSetGetter>,
        ILoquiObjectSetter<TextureSet>,
        ITextureSetInternal
    {
        #region Ctor
        protected TextureSet()
        {
            CustomCtor();
        }
        partial void CustomCtor();
        #endregion

        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        public ObjectBounds ObjectBounds { get; set; } = new ObjectBounds();
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter ITextureSetGetter.ObjectBounds => ObjectBounds;
        #region Aspects
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ObjectBounds? IObjectBoundedOptional.ObjectBounds
        {
            get => this.ObjectBounds;
            set => this.ObjectBounds = value ?? new ObjectBounds();
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter IObjectBoundedGetter.ObjectBounds => this.ObjectBounds;
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IObjectBoundsGetter? IObjectBoundedOptionalGetter.ObjectBounds => this.ObjectBounds;
        #endregion
        #endregion
        #region Diffuse
        public AssetLink<SkyrimTextureAssetType>? Diffuse { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? ITextureSetGetter.Diffuse => this.Diffuse;
        #endregion
        #region NormalOrGloss
        public AssetLink<SkyrimTextureAssetType>? NormalOrGloss { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? ITextureSetGetter.NormalOrGloss => this.NormalOrGloss;
        #endregion
        #region EnvironmentMaskOrSubsurfaceTint
        public AssetLink<SkyrimTextureAssetType>? EnvironmentMaskOrSubsurfaceTint { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? ITextureSetGetter.EnvironmentMaskOrSubsurfaceTint => this.EnvironmentMaskOrSubsurfaceTint;
        #endregion
        #region GlowOrDetailMap
        public AssetLink<SkyrimTextureAssetType>? GlowOrDetailMap { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? ITextureSetGetter.GlowOrDetailMap => this.GlowOrDetailMap;
        #endregion
        #region Height
        public AssetLink<SkyrimTextureAssetType>? Height { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? ITextureSetGetter.Height => this.Height;
        #endregion
        #region Environment
        public AssetLink<SkyrimTextureAssetType>? Environment { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? ITextureSetGetter.Environment => this.Environment;
        #endregion
        #region Multilayer
        public AssetLink<SkyrimTextureAssetType>? Multilayer { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? ITextureSetGetter.Multilayer => this.Multilayer;
        #endregion
        #region BacklightMaskOrSpecular
        public AssetLink<SkyrimTextureAssetType>? BacklightMaskOrSpecular { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        AssetLinkGetter<SkyrimTextureAssetType>? ITextureSetGetter.BacklightMaskOrSpecular => this.BacklightMaskOrSpecular;
        #endregion
        #region Decal
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private Decal? _Decal;
        public Decal? Decal
        {
            get => _Decal;
            set => _Decal = value;
        }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IDecalGetter? ITextureSetGetter.Decal => this.Decal;
        #endregion
        #region Flags
        public TextureSet.Flag? Flags { get; set; }
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        TextureSet.Flag? ITextureSetGetter.Flags => this.Flags;
        #endregion

        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TextureSetMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        #region Mask
        public new class Mask<TItem> :
            SkyrimMajorRecord.Mask<TItem>,
            IEquatable<Mask<TItem>>,
            IMask<TItem>
        {
            #region Ctors
            public Mask(TItem initialValue)
            : base(initialValue)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(initialValue, new ObjectBounds.Mask<TItem>(initialValue));
                this.Diffuse = initialValue;
                this.NormalOrGloss = initialValue;
                this.EnvironmentMaskOrSubsurfaceTint = initialValue;
                this.GlowOrDetailMap = initialValue;
                this.Height = initialValue;
                this.Environment = initialValue;
                this.Multilayer = initialValue;
                this.BacklightMaskOrSpecular = initialValue;
                this.Decal = new MaskItem<TItem, Decal.Mask<TItem>?>(initialValue, new Decal.Mask<TItem>(initialValue));
                this.Flags = initialValue;
            }

            public Mask(
                TItem MajorRecordFlagsRaw,
                TItem FormKey,
                TItem VersionControl,
                TItem EditorID,
                TItem FormVersion,
                TItem Version2,
                TItem SkyrimMajorRecordFlags,
                TItem ObjectBounds,
                TItem Diffuse,
                TItem NormalOrGloss,
                TItem EnvironmentMaskOrSubsurfaceTint,
                TItem GlowOrDetailMap,
                TItem Height,
                TItem Environment,
                TItem Multilayer,
                TItem BacklightMaskOrSpecular,
                TItem Decal,
                TItem Flags)
            : base(
                MajorRecordFlagsRaw: MajorRecordFlagsRaw,
                FormKey: FormKey,
                VersionControl: VersionControl,
                EditorID: EditorID,
                FormVersion: FormVersion,
                Version2: Version2,
                SkyrimMajorRecordFlags: SkyrimMajorRecordFlags)
            {
                this.ObjectBounds = new MaskItem<TItem, ObjectBounds.Mask<TItem>?>(ObjectBounds, new ObjectBounds.Mask<TItem>(ObjectBounds));
                this.Diffuse = Diffuse;
                this.NormalOrGloss = NormalOrGloss;
                this.EnvironmentMaskOrSubsurfaceTint = EnvironmentMaskOrSubsurfaceTint;
                this.GlowOrDetailMap = GlowOrDetailMap;
                this.Height = Height;
                this.Environment = Environment;
                this.Multilayer = Multilayer;
                this.BacklightMaskOrSpecular = BacklightMaskOrSpecular;
                this.Decal = new MaskItem<TItem, Decal.Mask<TItem>?>(Decal, new Decal.Mask<TItem>(Decal));
                this.Flags = Flags;
            }

            #pragma warning disable CS8618
            protected Mask()
            {
            }
            #pragma warning restore CS8618

            #endregion

            #region Members
            public MaskItem<TItem, ObjectBounds.Mask<TItem>?>? ObjectBounds { get; set; }
            public TItem Diffuse;
            public TItem NormalOrGloss;
            public TItem EnvironmentMaskOrSubsurfaceTint;
            public TItem GlowOrDetailMap;
            public TItem Height;
            public TItem Environment;
            public TItem Multilayer;
            public TItem BacklightMaskOrSpecular;
            public MaskItem<TItem, Decal.Mask<TItem>?>? Decal { get; set; }
            public TItem Flags;
            #endregion

            #region Equals
            public override bool Equals(object? obj)
            {
                if (!(obj is Mask<TItem> rhs)) return false;
                return Equals(rhs);
            }

            public bool Equals(Mask<TItem>? rhs)
            {
                if (rhs == null) return false;
                if (!base.Equals(rhs)) return false;
                if (!object.Equals(this.ObjectBounds, rhs.ObjectBounds)) return false;
                if (!object.Equals(this.Diffuse, rhs.Diffuse)) return false;
                if (!object.Equals(this.NormalOrGloss, rhs.NormalOrGloss)) return false;
                if (!object.Equals(this.EnvironmentMaskOrSubsurfaceTint, rhs.EnvironmentMaskOrSubsurfaceTint)) return false;
                if (!object.Equals(this.GlowOrDetailMap, rhs.GlowOrDetailMap)) return false;
                if (!object.Equals(this.Height, rhs.Height)) return false;
                if (!object.Equals(this.Environment, rhs.Environment)) return false;
                if (!object.Equals(this.Multilayer, rhs.Multilayer)) return false;
                if (!object.Equals(this.BacklightMaskOrSpecular, rhs.BacklightMaskOrSpecular)) return false;
                if (!object.Equals(this.Decal, rhs.Decal)) return false;
                if (!object.Equals(this.Flags, rhs.Flags)) return false;
                return true;
            }
            public override int GetHashCode()
            {
                var hash = new HashCode();
                hash.Add(this.ObjectBounds);
                hash.Add(this.Diffuse);
                hash.Add(this.NormalOrGloss);
                hash.Add(this.EnvironmentMaskOrSubsurfaceTint);
                hash.Add(this.GlowOrDetailMap);
                hash.Add(this.Height);
                hash.Add(this.Environment);
                hash.Add(this.Multilayer);
                hash.Add(this.BacklightMaskOrSpecular);
                hash.Add(this.Decal);
                hash.Add(this.Flags);
                hash.Add(base.GetHashCode());
                return hash.ToHashCode();
            }

            #endregion

            #region All
            public override bool All(Func<TItem, bool> eval)
            {
                if (!base.All(eval)) return false;
                if (ObjectBounds != null)
                {
                    if (!eval(this.ObjectBounds.Overall)) return false;
                    if (this.ObjectBounds.Specific != null && !this.ObjectBounds.Specific.All(eval)) return false;
                }
                if (!eval(this.Diffuse)) return false;
                if (!eval(this.NormalOrGloss)) return false;
                if (!eval(this.EnvironmentMaskOrSubsurfaceTint)) return false;
                if (!eval(this.GlowOrDetailMap)) return false;
                if (!eval(this.Height)) return false;
                if (!eval(this.Environment)) return false;
                if (!eval(this.Multilayer)) return false;
                if (!eval(this.BacklightMaskOrSpecular)) return false;
                if (Decal != null)
                {
                    if (!eval(this.Decal.Overall)) return false;
                    if (this.Decal.Specific != null && !this.Decal.Specific.All(eval)) return false;
                }
                if (!eval(this.Flags)) return false;
                return true;
            }
            #endregion

            #region Any
            public override bool Any(Func<TItem, bool> eval)
            {
                if (base.Any(eval)) return true;
                if (ObjectBounds != null)
                {
                    if (eval(this.ObjectBounds.Overall)) return true;
                    if (this.ObjectBounds.Specific != null && this.ObjectBounds.Specific.Any(eval)) return true;
                }
                if (eval(this.Diffuse)) return true;
                if (eval(this.NormalOrGloss)) return true;
                if (eval(this.EnvironmentMaskOrSubsurfaceTint)) return true;
                if (eval(this.GlowOrDetailMap)) return true;
                if (eval(this.Height)) return true;
                if (eval(this.Environment)) return true;
                if (eval(this.Multilayer)) return true;
                if (eval(this.BacklightMaskOrSpecular)) return true;
                if (Decal != null)
                {
                    if (eval(this.Decal.Overall)) return true;
                    if (this.Decal.Specific != null && this.Decal.Specific.Any(eval)) return true;
                }
                if (eval(this.Flags)) return true;
                return false;
            }
            #endregion

            #region Translate
            public new Mask<R> Translate<R>(Func<TItem, R> eval)
            {
                var ret = new TextureSet.Mask<R>();
                this.Translate_InternalFill(ret, eval);
                return ret;
            }

            protected void Translate_InternalFill<R>(Mask<R> obj, Func<TItem, R> eval)
            {
                base.Translate_InternalFill(obj, eval);
                obj.ObjectBounds = this.ObjectBounds == null ? null : new MaskItem<R, ObjectBounds.Mask<R>?>(eval(this.ObjectBounds.Overall), this.ObjectBounds.Specific?.Translate(eval));
                obj.Diffuse = eval(this.Diffuse);
                obj.NormalOrGloss = eval(this.NormalOrGloss);
                obj.EnvironmentMaskOrSubsurfaceTint = eval(this.EnvironmentMaskOrSubsurfaceTint);
                obj.GlowOrDetailMap = eval(this.GlowOrDetailMap);
                obj.Height = eval(this.Height);
                obj.Environment = eval(this.Environment);
                obj.Multilayer = eval(this.Multilayer);
                obj.BacklightMaskOrSpecular = eval(this.BacklightMaskOrSpecular);
                obj.Decal = this.Decal == null ? null : new MaskItem<R, Decal.Mask<R>?>(eval(this.Decal.Overall), this.Decal.Specific?.Translate(eval));
                obj.Flags = eval(this.Flags);
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public string Print(TextureSet.Mask<bool>? printMask = null)
            {
                var sb = new StructuredStringBuilder();
                Print(sb, printMask);
                return sb.ToString();
            }

            public void Print(StructuredStringBuilder sb, TextureSet.Mask<bool>? printMask = null)
            {
                sb.AppendLine($"{nameof(TextureSet.Mask<TItem>)} =>");
                using (sb.Brace())
                {
                    if (printMask?.ObjectBounds?.Overall ?? true)
                    {
                        ObjectBounds?.Print(sb);
                    }
                    if (printMask?.Diffuse ?? true)
                    {
                        sb.AppendItem(Diffuse, "Diffuse");
                    }
                    if (printMask?.NormalOrGloss ?? true)
                    {
                        sb.AppendItem(NormalOrGloss, "NormalOrGloss");
                    }
                    if (printMask?.EnvironmentMaskOrSubsurfaceTint ?? true)
                    {
                        sb.AppendItem(EnvironmentMaskOrSubsurfaceTint, "EnvironmentMaskOrSubsurfaceTint");
                    }
                    if (printMask?.GlowOrDetailMap ?? true)
                    {
                        sb.AppendItem(GlowOrDetailMap, "GlowOrDetailMap");
                    }
                    if (printMask?.Height ?? true)
                    {
                        sb.AppendItem(Height, "Height");
                    }
                    if (printMask?.Environment ?? true)
                    {
                        sb.AppendItem(Environment, "Environment");
                    }
                    if (printMask?.Multilayer ?? true)
                    {
                        sb.AppendItem(Multilayer, "Multilayer");
                    }
                    if (printMask?.BacklightMaskOrSpecular ?? true)
                    {
                        sb.AppendItem(BacklightMaskOrSpecular, "BacklightMaskOrSpecular");
                    }
                    if (printMask?.Decal?.Overall ?? true)
                    {
                        Decal?.Print(sb);
                    }
                    if (printMask?.Flags ?? true)
                    {
                        sb.AppendItem(Flags, "Flags");
                    }
                }
            }
            #endregion

        }

        public new class ErrorMask :
            SkyrimMajorRecord.ErrorMask,
            IErrorMask<ErrorMask>
        {
            #region Members
            public MaskItem<Exception?, ObjectBounds.ErrorMask?>? ObjectBounds;
            public Exception? Diffuse;
            public Exception? NormalOrGloss;
            public Exception? EnvironmentMaskOrSubsurfaceTint;
            public Exception? GlowOrDetailMap;
            public Exception? Height;
            public Exception? Environment;
            public Exception? Multilayer;
            public Exception? BacklightMaskOrSpecular;
            public MaskItem<Exception?, Decal.ErrorMask?>? Decal;
            public Exception? Flags;
            #endregion

            #region IErrorMask
            public override object? GetNthMask(int index)
            {
                TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
                switch (enu)
                {
                    case TextureSet_FieldIndex.ObjectBounds:
                        return ObjectBounds;
                    case TextureSet_FieldIndex.Diffuse:
                        return Diffuse;
                    case TextureSet_FieldIndex.NormalOrGloss:
                        return NormalOrGloss;
                    case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                        return EnvironmentMaskOrSubsurfaceTint;
                    case TextureSet_FieldIndex.GlowOrDetailMap:
                        return GlowOrDetailMap;
                    case TextureSet_FieldIndex.Height:
                        return Height;
                    case TextureSet_FieldIndex.Environment:
                        return Environment;
                    case TextureSet_FieldIndex.Multilayer:
                        return Multilayer;
                    case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                        return BacklightMaskOrSpecular;
                    case TextureSet_FieldIndex.Decal:
                        return Decal;
                    case TextureSet_FieldIndex.Flags:
                        return Flags;
                    default:
                        return base.GetNthMask(index);
                }
            }

            public override void SetNthException(int index, Exception ex)
            {
                TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
                switch (enu)
                {
                    case TextureSet_FieldIndex.ObjectBounds:
                        this.ObjectBounds = new MaskItem<Exception?, ObjectBounds.ErrorMask?>(ex, null);
                        break;
                    case TextureSet_FieldIndex.Diffuse:
                        this.Diffuse = ex;
                        break;
                    case TextureSet_FieldIndex.NormalOrGloss:
                        this.NormalOrGloss = ex;
                        break;
                    case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                        this.EnvironmentMaskOrSubsurfaceTint = ex;
                        break;
                    case TextureSet_FieldIndex.GlowOrDetailMap:
                        this.GlowOrDetailMap = ex;
                        break;
                    case TextureSet_FieldIndex.Height:
                        this.Height = ex;
                        break;
                    case TextureSet_FieldIndex.Environment:
                        this.Environment = ex;
                        break;
                    case TextureSet_FieldIndex.Multilayer:
                        this.Multilayer = ex;
                        break;
                    case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                        this.BacklightMaskOrSpecular = ex;
                        break;
                    case TextureSet_FieldIndex.Decal:
                        this.Decal = new MaskItem<Exception?, Decal.ErrorMask?>(ex, null);
                        break;
                    case TextureSet_FieldIndex.Flags:
                        this.Flags = ex;
                        break;
                    default:
                        base.SetNthException(index, ex);
                        break;
                }
            }

            public override void SetNthMask(int index, object obj)
            {
                TextureSet_FieldIndex enu = (TextureSet_FieldIndex)index;
                switch (enu)
                {
                    case TextureSet_FieldIndex.ObjectBounds:
                        this.ObjectBounds = (MaskItem<Exception?, ObjectBounds.ErrorMask?>?)obj;
                        break;
                    case TextureSet_FieldIndex.Diffuse:
                        this.Diffuse = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.NormalOrGloss:
                        this.NormalOrGloss = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint:
                        this.EnvironmentMaskOrSubsurfaceTint = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.GlowOrDetailMap:
                        this.GlowOrDetailMap = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.Height:
                        this.Height = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.Environment:
                        this.Environment = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.Multilayer:
                        this.Multilayer = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.BacklightMaskOrSpecular:
                        this.BacklightMaskOrSpecular = (Exception?)obj;
                        break;
                    case TextureSet_FieldIndex.Decal:
                        this.Decal = (MaskItem<Exception?, Decal.ErrorMask?>?)obj;
                        break;
                    case TextureSet_FieldIndex.Flags:
                        this.Flags = (Exception?)obj;
                        break;
                    default:
                        base.SetNthMask(index, obj);
                        break;
                }
            }

            public override bool IsInError()
            {
                if (Overall != null) return true;
                if (ObjectBounds != null) return true;
                if (Diffuse != null) return true;
                if (NormalOrGloss != null) return true;
                if (EnvironmentMaskOrSubsurfaceTint != null) return true;
                if (GlowOrDetailMap != null) return true;
                if (Height != null) return true;
                if (Environment != null) return true;
                if (Multilayer != null) return true;
                if (BacklightMaskOrSpecular != null) return true;
                if (Decal != null) return true;
                if (Flags != null) return true;
                return false;
            }
            #endregion

            #region To String
            public override string ToString() => this.Print();

            public override void Print(StructuredStringBuilder sb, string? name = null)
            {
                sb.AppendLine($"{(name ?? "ErrorMask")} =>");
                using (sb.Brace())
                {
                    if (this.Overall != null)
                    {
                        sb.AppendLine("Overall =>");
                        using (sb.Brace())
                        {
                            sb.AppendLine($"{this.Overall}");
                        }
                    }
                    PrintFillInternal(sb);
                }
            }
            protected override void PrintFillInternal(StructuredStringBuilder sb)
            {
                base.PrintFillInternal(sb);
                ObjectBounds?.Print(sb);
                {
                    sb.AppendItem(Diffuse, "Diffuse");
                }
                {
                    sb.AppendItem(NormalOrGloss, "NormalOrGloss");
                }
                {
                    sb.AppendItem(EnvironmentMaskOrSubsurfaceTint, "EnvironmentMaskOrSubsurfaceTint");
                }
                {
                    sb.AppendItem(GlowOrDetailMap, "GlowOrDetailMap");
                }
                {
                    sb.AppendItem(Height, "Height");
                }
                {
                    sb.AppendItem(Environment, "Environment");
                }
                {
                    sb.AppendItem(Multilayer, "Multilayer");
                }
                {
                    sb.AppendItem(BacklightMaskOrSpecular, "BacklightMaskOrSpecular");
                }
                Decal?.Print(sb);
                {
                    sb.AppendItem(Flags, "Flags");
                }
            }
            #endregion

            #region Combine
            public ErrorMask Combine(ErrorMask? rhs)
            {
                if (rhs == null) return this;
                var ret = new ErrorMask();
                ret.ObjectBounds = this.ObjectBounds.Combine(rhs.ObjectBounds, (l, r) => l.Combine(r));
                ret.Diffuse = this.Diffuse.Combine(rhs.Diffuse);
                ret.NormalOrGloss = this.NormalOrGloss.Combine(rhs.NormalOrGloss);
                ret.EnvironmentMaskOrSubsurfaceTint = this.EnvironmentMaskOrSubsurfaceTint.Combine(rhs.EnvironmentMaskOrSubsurfaceTint);
                ret.GlowOrDetailMap = this.GlowOrDetailMap.Combine(rhs.GlowOrDetailMap);
                ret.Height = this.Height.Combine(rhs.Height);
                ret.Environment = this.Environment.Combine(rhs.Environment);
                ret.Multilayer = this.Multilayer.Combine(rhs.Multilayer);
                ret.BacklightMaskOrSpecular = this.BacklightMaskOrSpecular.Combine(rhs.BacklightMaskOrSpecular);
                ret.Decal = this.Decal.Combine(rhs.Decal, (l, r) => l.Combine(r));
                ret.Flags = this.Flags.Combine(rhs.Flags);
                return ret;
            }
            public static ErrorMask? Combine(ErrorMask? lhs, ErrorMask? rhs)
            {
                if (lhs != null && rhs != null) return lhs.Combine(rhs);
                return lhs ?? rhs;
            }
            #endregion

            #region Factory
            public static new ErrorMask Factory(ErrorMaskBuilder errorMask)
            {
                return new ErrorMask();
            }
            #endregion

        }
        public new class TranslationMask :
            SkyrimMajorRecord.TranslationMask,
            ITranslationMask
        {
            #region Members
            public ObjectBounds.TranslationMask? ObjectBounds;
            public bool Diffuse;
            public bool NormalOrGloss;
            public bool EnvironmentMaskOrSubsurfaceTint;
            public bool GlowOrDetailMap;
            public bool Height;
            public bool Environment;
            public bool Multilayer;
            public bool BacklightMaskOrSpecular;
            public Decal.TranslationMask? Decal;
            public bool Flags;
            #endregion

            #region Ctors
            public TranslationMask(
                bool defaultOn,
                bool onOverall = true)
                : base(defaultOn, onOverall)
            {
                this.Diffuse = defaultOn;
                this.NormalOrGloss = defaultOn;
                this.EnvironmentMaskOrSubsurfaceTint = defaultOn;
                this.GlowOrDetailMap = defaultOn;
                this.Height = defaultOn;
                this.Environment = defaultOn;
                this.Multilayer = defaultOn;
                this.BacklightMaskOrSpecular = defaultOn;
                this.Flags = defaultOn;
            }

            #endregion

            protected override void GetCrystal(List<(bool On, TranslationCrystal? SubCrystal)> ret)
            {
                base.GetCrystal(ret);
                ret.Add((ObjectBounds != null ? ObjectBounds.OnOverall : DefaultOn, ObjectBounds?.GetCrystal()));
                ret.Add((Diffuse, null));
                ret.Add((NormalOrGloss, null));
                ret.Add((EnvironmentMaskOrSubsurfaceTint, null));
                ret.Add((GlowOrDetailMap, null));
                ret.Add((Height, null));
                ret.Add((Environment, null));
                ret.Add((Multilayer, null));
                ret.Add((BacklightMaskOrSpecular, null));
                ret.Add((Decal != null ? Decal.OnOverall : DefaultOn, Decal?.GetCrystal()));
                ret.Add((Flags, null));
            }

            public static implicit operator TranslationMask(bool defaultOn)
            {
                return new TranslationMask(defaultOn: defaultOn, onOverall: defaultOn);
            }

        }
        #endregion

        #region Mutagen
        public static readonly RecordType GrupRecordType = TextureSet_Registration.TriggeringRecordType;
        public TextureSet(
            FormKey formKey,
            SkyrimRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease.ToGameRelease()).DefaultFormVersion!.Value;
            CustomCtor();
        }

        private TextureSet(
            FormKey formKey,
            GameRelease gameRelease)
        {
            this.FormKey = formKey;
            this.FormVersion = GameConstants.Get(gameRelease).DefaultFormVersion!.Value;
            CustomCtor();
        }

        internal TextureSet(
            FormKey formKey,
            ushort formVersion)
        {
            this.FormKey = formKey;
            this.FormVersion = formVersion;
            CustomCtor();
        }

        public TextureSet(ISkyrimMod mod)
            : this(
                mod.GetNextFormKey(),
                mod.SkyrimRelease)
        {
        }

        public TextureSet(ISkyrimMod mod, string editorID)
            : this(
                mod.GetNextFormKey(editorID),
                mod.SkyrimRelease)
        {
            this.EditorID = editorID;
        }

        public override string ToString()
        {
            return MajorRecordPrinter<TextureSet>.ToString(this);
        }

        protected override Type LinkType => typeof(ITextureSet);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => TextureSetCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        public override IEnumerable<IAssetLink> EnumerateListedAssetLinks() => TextureSetSetterCommon.Instance.EnumerateListedAssetLinks(this);
        public override void RemapAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache) => TextureSetSetterCommon.Instance.RemapAssetLinks(this, mapping, linkCache, queryCategories);
        public override void RemapListedAssetLinks(IReadOnlyDictionary<IAssetLinkGetter, string> mapping) => TextureSetSetterCommon.Instance.RemapAssetLinks(this, mapping, null, AssetLinkQuery.Listed);
        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITextureSetGetter rhs) return false;
            return ((TextureSetCommon)((ITextureSetGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITextureSetGetter? obj)
        {
            return ((TextureSetCommon)((ITextureSetGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TextureSetCommon)((ITextureSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

        #endregion

        #region Binary Translation
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TextureSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TextureSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        #region Binary Create
        public new static TextureSet CreateFromBinary(
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            var ret = new TextureSet();
            ((TextureSetSetterCommon)((ITextureSetGetter)ret).CommonSetterInstance()!).CopyInFromBinary(
                item: ret,
                frame: frame,
                translationParams: translationParams);
            return ret;
        }

        #endregion

        public static bool TryCreateFromBinary(
            MutagenFrame frame,
            out TextureSet item,
            TypedParseParams translationParams = default)
        {
            var startPos = frame.Position;
            item = CreateFromBinary(
                frame: frame,
                translationParams: translationParams);
            return startPos != frame.Position;
        }
        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        void IClearable.Clear()
        {
            ((TextureSetSetterCommon)((ITextureSetGetter)this).CommonSetterInstance()!).Clear(this);
        }

        internal static new TextureSet GetNew()
        {
            return new TextureSet();
        }

    }
    #endregion

    #region Interface
    public partial interface ITextureSet :
        IAssetLinkContainer,
        IExplodeSpawn,
        ILoquiObjectSetter<ITextureSetInternal>,
        IObjectBounded,
        IObjectId,
        IPlaceableObject,
        IReferenceableObject,
        ISkyrimMajorRecordInternal,
        ITextureSetGetter
    {
        /// <summary>
        /// Aspects: IObjectBounded
        /// </summary>
        new ObjectBounds ObjectBounds { get; set; }
        new AssetLink<SkyrimTextureAssetType>? Diffuse { get; set; }
        new AssetLink<SkyrimTextureAssetType>? NormalOrGloss { get; set; }
        new AssetLink<SkyrimTextureAssetType>? EnvironmentMaskOrSubsurfaceTint { get; set; }
        new AssetLink<SkyrimTextureAssetType>? GlowOrDetailMap { get; set; }
        new AssetLink<SkyrimTextureAssetType>? Height { get; set; }
        new AssetLink<SkyrimTextureAssetType>? Environment { get; set; }
        new AssetLink<SkyrimTextureAssetType>? Multilayer { get; set; }
        new AssetLink<SkyrimTextureAssetType>? BacklightMaskOrSpecular { get; set; }
        new Decal? Decal { get; set; }
        new TextureSet.Flag? Flags { get; set; }
    }

    public partial interface ITextureSetInternal :
        ISkyrimMajorRecordInternal,
        ITextureSet,
        ITextureSetGetter
    {
    }

    [AssociatedRecordTypesAttribute(Mutagen.Bethesda.Skyrim.Internals.RecordTypeInts.TXST)]
    public partial interface ITextureSetGetter :
        ISkyrimMajorRecordGetter,
        IAssetLinkContainerGetter,
        IBinaryItem,
        IExplodeSpawnGetter,
        ILoquiObject<ITextureSetGetter>,
        IMapsToGetter<ITextureSetGetter>,
        IObjectBoundedGetter,
        IObjectIdGetter,
        IPlaceableObjectGetter,
        IReferenceableObjectGetter
    {
        static new ILoquiRegistration StaticRegistration => TextureSet_Registration.Instance;
        #region ObjectBounds
        /// <summary>
        /// Aspects: IObjectBoundedGetter
        /// </summary>
        IObjectBoundsGetter ObjectBounds { get; }
        #endregion
        AssetLinkGetter<SkyrimTextureAssetType>? Diffuse { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? NormalOrGloss { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? EnvironmentMaskOrSubsurfaceTint { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? GlowOrDetailMap { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? Height { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? Environment { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? Multilayer { get; }
        AssetLinkGetter<SkyrimTextureAssetType>? BacklightMaskOrSpecular { get; }
        IDecalGetter? Decal { get; }
        TextureSet.Flag? Flags { get; }

    }

    #endregion

    #region Common MixIn
    public static partial class TextureSetMixIn
    {
        public static void Clear(this ITextureSetInternal item)
        {
            ((TextureSetSetterCommon)((ITextureSetGetter)item).CommonSetterInstance()!).Clear(item: item);
        }

        public static TextureSet.Mask<bool> GetEqualsMask(
            this ITextureSetGetter item,
            ITextureSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            return ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).GetEqualsMask(
                item: item,
                rhs: rhs,
                include: include);
        }

        public static string Print(
            this ITextureSetGetter item,
            string? name = null,
            TextureSet.Mask<bool>? printMask = null)
        {
            return ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).Print(
                item: item,
                name: name,
                printMask: printMask);
        }

        public static void Print(
            this ITextureSetGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TextureSet.Mask<bool>? printMask = null)
        {
            ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
        }

        public static bool Equals(
            this ITextureSetGetter item,
            ITextureSetGetter rhs,
            TextureSet.TranslationMask? equalsMask = null)
        {
            return ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).Equals(
                lhs: item,
                rhs: rhs,
                equalsMask: equalsMask?.GetCrystal());
        }

        public static void DeepCopyIn(
            this ITextureSetInternal lhs,
            ITextureSetGetter rhs,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            ((TextureSetSetterTranslationCommon)((ITextureSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: false);
            errorMask = TextureSet.ErrorMask.Factory(errorMaskBuilder);
        }

        public static void DeepCopyIn(
            this ITextureSetInternal lhs,
            ITextureSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask)
        {
            ((TextureSetSetterTranslationCommon)((ITextureSetGetter)lhs).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: lhs,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: false);
        }

        public static TextureSet DeepCopy(
            this ITextureSetGetter item,
            TextureSet.TranslationMask? copyMask = null)
        {
            return ((TextureSetSetterTranslationCommon)((ITextureSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask);
        }

        public static TextureSet DeepCopy(
            this ITextureSetGetter item,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? copyMask = null)
        {
            return ((TextureSetSetterTranslationCommon)((ITextureSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: out errorMask);
        }

        public static TextureSet DeepCopy(
            this ITextureSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            return ((TextureSetSetterTranslationCommon)((ITextureSetGetter)item).CommonSetterTranslationInstance()!).DeepCopy(
                item: item,
                copyMask: copyMask,
                errorMask: errorMask);
        }

        #region Mutagen
        public static TextureSet Duplicate(
            this ITextureSetGetter item,
            FormKey formKey,
            TextureSet.TranslationMask? copyMask = null)
        {
            return ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask?.GetCrystal());
        }

        public static TextureSet Duplicate(
            this ITextureSetGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).Duplicate(
                item: item,
                formKey: formKey,
                copyMask: copyMask);
        }

        #endregion

        #region Binary Translation
        public static void CopyInFromBinary(
            this ITextureSetInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams = default)
        {
            ((TextureSetSetterCommon)((ITextureSetGetter)item).CommonSetterInstance()!).CopyInFromBinary(
                item: item,
                frame: frame,
                translationParams: translationParams);
        }

        #endregion

    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    #region Field Index
    internal enum TextureSet_FieldIndex
    {
        MajorRecordFlagsRaw = 0,
        FormKey = 1,
        VersionControl = 2,
        EditorID = 3,
        FormVersion = 4,
        Version2 = 5,
        SkyrimMajorRecordFlags = 6,
        ObjectBounds = 7,
        Diffuse = 8,
        NormalOrGloss = 9,
        EnvironmentMaskOrSubsurfaceTint = 10,
        GlowOrDetailMap = 11,
        Height = 12,
        Environment = 13,
        Multilayer = 14,
        BacklightMaskOrSpecular = 15,
        Decal = 16,
        Flags = 17,
    }
    #endregion

    #region Registration
    internal partial class TextureSet_Registration : ILoquiRegistration
    {
        public static readonly TextureSet_Registration Instance = new TextureSet_Registration();

        public static ProtocolKey ProtocolKey => ProtocolDefinition_Skyrim.ProtocolKey;

        public const ushort AdditionalFieldCount = 11;

        public const ushort FieldCount = 18;

        public static readonly Type MaskType = typeof(TextureSet.Mask<>);

        public static readonly Type ErrorMaskType = typeof(TextureSet.ErrorMask);

        public static readonly Type ClassType = typeof(TextureSet);

        public static readonly Type GetterType = typeof(ITextureSetGetter);

        public static readonly Type? InternalGetterType = null;

        public static readonly Type SetterType = typeof(ITextureSet);

        public static readonly Type? InternalSetterType = typeof(ITextureSetInternal);

        public const string FullName = "Mutagen.Bethesda.Skyrim.TextureSet";

        public const string Name = "TextureSet";

        public const string Namespace = "Mutagen.Bethesda.Skyrim";

        public const byte GenericCount = 0;

        public static readonly Type? GenericRegistrationType = null;

        public static readonly RecordType TriggeringRecordType = RecordTypes.TXST;
        public static RecordTriggerSpecs TriggerSpecs => _recordSpecs.Value;
        private static readonly Lazy<RecordTriggerSpecs> _recordSpecs = new Lazy<RecordTriggerSpecs>(() =>
        {
            var triggers = RecordCollection.Factory(RecordTypes.TXST);
            var all = RecordCollection.Factory(
                RecordTypes.TXST,
                RecordTypes.OBND,
                RecordTypes.TX00,
                RecordTypes.TX01,
                RecordTypes.TX02,
                RecordTypes.TX03,
                RecordTypes.TX04,
                RecordTypes.TX05,
                RecordTypes.TX06,
                RecordTypes.TX07,
                RecordTypes.DODT,
                RecordTypes.DNAM);
            return new RecordTriggerSpecs(
                allRecordTypes: all,
                triggeringRecordTypes: triggers);
        });
        public static readonly Type BinaryWriteTranslation = typeof(TextureSetBinaryWriteTranslation);
        #region Interface
        ProtocolKey ILoquiRegistration.ProtocolKey => ProtocolKey;
        ushort ILoquiRegistration.FieldCount => FieldCount;
        ushort ILoquiRegistration.AdditionalFieldCount => AdditionalFieldCount;
        Type ILoquiRegistration.MaskType => MaskType;
        Type ILoquiRegistration.ErrorMaskType => ErrorMaskType;
        Type ILoquiRegistration.ClassType => ClassType;
        Type ILoquiRegistration.SetterType => SetterType;
        Type? ILoquiRegistration.InternalSetterType => InternalSetterType;
        Type ILoquiRegistration.GetterType => GetterType;
        Type? ILoquiRegistration.InternalGetterType => InternalGetterType;
        string ILoquiRegistration.FullName => FullName;
        string ILoquiRegistration.Name => Name;
        string ILoquiRegistration.Namespace => Namespace;
        byte ILoquiRegistration.GenericCount => GenericCount;
        Type? ILoquiRegistration.GenericRegistrationType => GenericRegistrationType;
        ushort? ILoquiRegistration.GetNameIndex(StringCaseAgnostic name) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsEnumerable(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsLoqui(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.GetNthIsSingleton(ushort index) => throw new NotImplementedException();
        string ILoquiRegistration.GetNthName(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsNthDerivative(ushort index) => throw new NotImplementedException();
        bool ILoquiRegistration.IsProtected(ushort index) => throw new NotImplementedException();
        Type ILoquiRegistration.GetNthType(ushort index) => throw new NotImplementedException();
        #endregion

    }
    #endregion

    #region Common
    internal partial class TextureSetSetterCommon : SkyrimMajorRecordSetterCommon
    {
        public new static readonly TextureSetSetterCommon Instance = new TextureSetSetterCommon();

        partial void ClearPartial();
        
        public void Clear(ITextureSetInternal item)
        {
            ClearPartial();
            item.ObjectBounds.Clear();
            item.Diffuse = default;
            item.NormalOrGloss = default;
            item.EnvironmentMaskOrSubsurfaceTint = default;
            item.GlowOrDetailMap = default;
            item.Height = default;
            item.Environment = default;
            item.Multilayer = default;
            item.BacklightMaskOrSpecular = default;
            item.Decal = null;
            item.Flags = default;
            base.Clear(item);
        }
        
        public override void Clear(ISkyrimMajorRecordInternal item)
        {
            Clear(item: (ITextureSetInternal)item);
        }
        
        public override void Clear(IMajorRecordInternal item)
        {
            Clear(item: (ITextureSetInternal)item);
        }
        
        #region Mutagen
        public void RemapLinks(ITextureSet obj, IReadOnlyDictionary<FormKey, FormKey> mapping)
        {
            base.RemapLinks(obj, mapping);
        }
        
        public IEnumerable<IAssetLink> EnumerateListedAssetLinks(ITextureSet obj)
        {
            foreach (var item in base.EnumerateListedAssetLinks(obj))
            {
                yield return item;
            }
            if (obj.Diffuse != null)
            {
                yield return obj.Diffuse;
            }
            if (obj.NormalOrGloss != null)
            {
                yield return obj.NormalOrGloss;
            }
            if (obj.EnvironmentMaskOrSubsurfaceTint != null)
            {
                yield return obj.EnvironmentMaskOrSubsurfaceTint;
            }
            if (obj.GlowOrDetailMap != null)
            {
                yield return obj.GlowOrDetailMap;
            }
            if (obj.Height != null)
            {
                yield return obj.Height;
            }
            if (obj.Environment != null)
            {
                yield return obj.Environment;
            }
            if (obj.Multilayer != null)
            {
                yield return obj.Multilayer;
            }
            if (obj.BacklightMaskOrSpecular != null)
            {
                yield return obj.BacklightMaskOrSpecular;
            }
            yield break;
        }
        
        public void RemapAssetLinks(
            ITextureSet obj,
            IReadOnlyDictionary<IAssetLinkGetter, string> mapping,
            IAssetLinkCache? linkCache,
            AssetLinkQuery queryCategories)
        {
            base.RemapAssetLinks(obj, mapping, linkCache, queryCategories);
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                obj.Diffuse?.Relink(mapping);
                obj.NormalOrGloss?.Relink(mapping);
                obj.EnvironmentMaskOrSubsurfaceTint?.Relink(mapping);
                obj.GlowOrDetailMap?.Relink(mapping);
                obj.Height?.Relink(mapping);
                obj.Environment?.Relink(mapping);
                obj.Multilayer?.Relink(mapping);
                obj.BacklightMaskOrSpecular?.Relink(mapping);
            }
        }
        
        #endregion
        
        #region Binary Translation
        public virtual void CopyInFromBinary(
            ITextureSetInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            PluginUtilityTranslation.MajorRecordParse<ITextureSetInternal>(
                record: item,
                frame: frame,
                translationParams: translationParams,
                fillStructs: TextureSetBinaryCreateTranslation.FillBinaryStructs,
                fillTyped: TextureSetBinaryCreateTranslation.FillBinaryRecordTypes);
        }
        
        public override void CopyInFromBinary(
            ISkyrimMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (TextureSet)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        public override void CopyInFromBinary(
            IMajorRecordInternal item,
            MutagenFrame frame,
            TypedParseParams translationParams)
        {
            CopyInFromBinary(
                item: (TextureSet)item,
                frame: frame,
                translationParams: translationParams);
        }
        
        #endregion
        
    }
    internal partial class TextureSetCommon : SkyrimMajorRecordCommon
    {
        public new static readonly TextureSetCommon Instance = new TextureSetCommon();

        public TextureSet.Mask<bool> GetEqualsMask(
            ITextureSetGetter item,
            ITextureSetGetter rhs,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            var ret = new TextureSet.Mask<bool>(false);
            ((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).FillEqualsMask(
                item: item,
                rhs: rhs,
                ret: ret,
                include: include);
            return ret;
        }
        
        public void FillEqualsMask(
            ITextureSetGetter item,
            ITextureSetGetter rhs,
            TextureSet.Mask<bool> ret,
            EqualsMaskHelper.Include include = EqualsMaskHelper.Include.All)
        {
            ret.ObjectBounds = MaskItemExt.Factory(item.ObjectBounds.GetEqualsMask(rhs.ObjectBounds, include), include);
            ret.Diffuse = object.Equals(item.Diffuse, rhs.Diffuse);
            ret.NormalOrGloss = object.Equals(item.NormalOrGloss, rhs.NormalOrGloss);
            ret.EnvironmentMaskOrSubsurfaceTint = object.Equals(item.EnvironmentMaskOrSubsurfaceTint, rhs.EnvironmentMaskOrSubsurfaceTint);
            ret.GlowOrDetailMap = object.Equals(item.GlowOrDetailMap, rhs.GlowOrDetailMap);
            ret.Height = object.Equals(item.Height, rhs.Height);
            ret.Environment = object.Equals(item.Environment, rhs.Environment);
            ret.Multilayer = object.Equals(item.Multilayer, rhs.Multilayer);
            ret.BacklightMaskOrSpecular = object.Equals(item.BacklightMaskOrSpecular, rhs.BacklightMaskOrSpecular);
            ret.Decal = EqualsMaskHelper.EqualsHelper(
                item.Decal,
                rhs.Decal,
                (loqLhs, loqRhs, incl) => loqLhs.GetEqualsMask(loqRhs, incl),
                include);
            ret.Flags = item.Flags == rhs.Flags;
            base.FillEqualsMask(item, rhs, ret, include);
        }
        
        public string Print(
            ITextureSetGetter item,
            string? name = null,
            TextureSet.Mask<bool>? printMask = null)
        {
            var sb = new StructuredStringBuilder();
            Print(
                item: item,
                sb: sb,
                name: name,
                printMask: printMask);
            return sb.ToString();
        }
        
        public void Print(
            ITextureSetGetter item,
            StructuredStringBuilder sb,
            string? name = null,
            TextureSet.Mask<bool>? printMask = null)
        {
            if (name == null)
            {
                sb.AppendLine($"TextureSet =>");
            }
            else
            {
                sb.AppendLine($"{name} (TextureSet) =>");
            }
            using (sb.Brace())
            {
                ToStringFields(
                    item: item,
                    sb: sb,
                    printMask: printMask);
            }
        }
        
        protected static void ToStringFields(
            ITextureSetGetter item,
            StructuredStringBuilder sb,
            TextureSet.Mask<bool>? printMask = null)
        {
            SkyrimMajorRecordCommon.ToStringFields(
                item: item,
                sb: sb,
                printMask: printMask);
            if (printMask?.ObjectBounds?.Overall ?? true)
            {
                item.ObjectBounds?.Print(sb, "ObjectBounds");
            }
            if ((printMask?.Diffuse ?? true)
                && item.Diffuse is {} DiffuseItem)
            {
                sb.AppendItem(DiffuseItem, "Diffuse");
            }
            if ((printMask?.NormalOrGloss ?? true)
                && item.NormalOrGloss is {} NormalOrGlossItem)
            {
                sb.AppendItem(NormalOrGlossItem, "NormalOrGloss");
            }
            if ((printMask?.EnvironmentMaskOrSubsurfaceTint ?? true)
                && item.EnvironmentMaskOrSubsurfaceTint is {} EnvironmentMaskOrSubsurfaceTintItem)
            {
                sb.AppendItem(EnvironmentMaskOrSubsurfaceTintItem, "EnvironmentMaskOrSubsurfaceTint");
            }
            if ((printMask?.GlowOrDetailMap ?? true)
                && item.GlowOrDetailMap is {} GlowOrDetailMapItem)
            {
                sb.AppendItem(GlowOrDetailMapItem, "GlowOrDetailMap");
            }
            if ((printMask?.Height ?? true)
                && item.Height is {} HeightItem)
            {
                sb.AppendItem(HeightItem, "Height");
            }
            if ((printMask?.Environment ?? true)
                && item.Environment is {} EnvironmentItem)
            {
                sb.AppendItem(EnvironmentItem, "Environment");
            }
            if ((printMask?.Multilayer ?? true)
                && item.Multilayer is {} MultilayerItem)
            {
                sb.AppendItem(MultilayerItem, "Multilayer");
            }
            if ((printMask?.BacklightMaskOrSpecular ?? true)
                && item.BacklightMaskOrSpecular is {} BacklightMaskOrSpecularItem)
            {
                sb.AppendItem(BacklightMaskOrSpecularItem, "BacklightMaskOrSpecular");
            }
            if ((printMask?.Decal?.Overall ?? true)
                && item.Decal is {} DecalItem)
            {
                DecalItem?.Print(sb, "Decal");
            }
            if ((printMask?.Flags ?? true)
                && item.Flags is {} FlagsItem)
            {
                sb.AppendItem(FlagsItem, "Flags");
            }
        }
        
        public static TextureSet_FieldIndex ConvertFieldIndex(SkyrimMajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case SkyrimMajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormKey:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.VersionControl:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.EditorID:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.FormVersion:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.Version2:
                    return (TextureSet_FieldIndex)((int)index);
                case SkyrimMajorRecord_FieldIndex.SkyrimMajorRecordFlags:
                    return (TextureSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        public static new TextureSet_FieldIndex ConvertFieldIndex(MajorRecord_FieldIndex index)
        {
            switch (index)
            {
                case MajorRecord_FieldIndex.MajorRecordFlagsRaw:
                    return (TextureSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.FormKey:
                    return (TextureSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.VersionControl:
                    return (TextureSet_FieldIndex)((int)index);
                case MajorRecord_FieldIndex.EditorID:
                    return (TextureSet_FieldIndex)((int)index);
                default:
                    throw new ArgumentException($"Index is out of range: {index.ToStringFast()}");
            }
        }
        
        #region Equals and Hash
        public virtual bool Equals(
            ITextureSetGetter? lhs,
            ITextureSetGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            if (!EqualsMaskHelper.RefEquality(lhs, rhs, out var isEqual)) return isEqual;
            if (!base.Equals((ISkyrimMajorRecordGetter)lhs, (ISkyrimMajorRecordGetter)rhs, equalsMask)) return false;
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.ObjectBounds) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.ObjectBounds, rhs.ObjectBounds, out var lhsObjectBounds, out var rhsObjectBounds, out var isObjectBoundsEqual))
                {
                    if (!((ObjectBoundsCommon)((IObjectBoundsGetter)lhsObjectBounds).CommonInstance()!).Equals(lhsObjectBounds, rhsObjectBounds, equalsMask?.GetSubCrystal((int)TextureSet_FieldIndex.ObjectBounds))) return false;
                }
                else if (!isObjectBoundsEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Diffuse) ?? true))
            {
                if (!object.Equals(lhs.Diffuse, rhs.Diffuse)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.NormalOrGloss) ?? true))
            {
                if (!object.Equals(lhs.NormalOrGloss, rhs.NormalOrGloss)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint) ?? true))
            {
                if (!object.Equals(lhs.EnvironmentMaskOrSubsurfaceTint, rhs.EnvironmentMaskOrSubsurfaceTint)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.GlowOrDetailMap) ?? true))
            {
                if (!object.Equals(lhs.GlowOrDetailMap, rhs.GlowOrDetailMap)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Height) ?? true))
            {
                if (!object.Equals(lhs.Height, rhs.Height)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Environment) ?? true))
            {
                if (!object.Equals(lhs.Environment, rhs.Environment)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Multilayer) ?? true))
            {
                if (!object.Equals(lhs.Multilayer, rhs.Multilayer)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.BacklightMaskOrSpecular) ?? true))
            {
                if (!object.Equals(lhs.BacklightMaskOrSpecular, rhs.BacklightMaskOrSpecular)) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Decal) ?? true))
            {
                if (EqualsMaskHelper.RefEquality(lhs.Decal, rhs.Decal, out var lhsDecal, out var rhsDecal, out var isDecalEqual))
                {
                    if (!((DecalCommon)((IDecalGetter)lhsDecal).CommonInstance()!).Equals(lhsDecal, rhsDecal, equalsMask?.GetSubCrystal((int)TextureSet_FieldIndex.Decal))) return false;
                }
                else if (!isDecalEqual) return false;
            }
            if ((equalsMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Flags) ?? true))
            {
                if (lhs.Flags != rhs.Flags) return false;
            }
            return true;
        }
        
        public override bool Equals(
            ISkyrimMajorRecordGetter? lhs,
            ISkyrimMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITextureSetGetter?)lhs,
                rhs: rhs as ITextureSetGetter,
                equalsMask: equalsMask);
        }
        
        public override bool Equals(
            IMajorRecordGetter? lhs,
            IMajorRecordGetter? rhs,
            TranslationCrystal? equalsMask)
        {
            return Equals(
                lhs: (ITextureSetGetter?)lhs,
                rhs: rhs as ITextureSetGetter,
                equalsMask: equalsMask);
        }
        
        public virtual int GetHashCode(ITextureSetGetter item)
        {
            var hash = new HashCode();
            hash.Add(item.ObjectBounds);
            if (item.Diffuse is {} Diffuseitem)
            {
                hash.Add(Diffuseitem);
            }
            if (item.NormalOrGloss is {} NormalOrGlossitem)
            {
                hash.Add(NormalOrGlossitem);
            }
            if (item.EnvironmentMaskOrSubsurfaceTint is {} EnvironmentMaskOrSubsurfaceTintitem)
            {
                hash.Add(EnvironmentMaskOrSubsurfaceTintitem);
            }
            if (item.GlowOrDetailMap is {} GlowOrDetailMapitem)
            {
                hash.Add(GlowOrDetailMapitem);
            }
            if (item.Height is {} Heightitem)
            {
                hash.Add(Heightitem);
            }
            if (item.Environment is {} Environmentitem)
            {
                hash.Add(Environmentitem);
            }
            if (item.Multilayer is {} Multilayeritem)
            {
                hash.Add(Multilayeritem);
            }
            if (item.BacklightMaskOrSpecular is {} BacklightMaskOrSpecularitem)
            {
                hash.Add(BacklightMaskOrSpecularitem);
            }
            if (item.Decal is {} Decalitem)
            {
                hash.Add(Decalitem);
            }
            if (item.Flags is {} Flagsitem)
            {
                hash.Add(Flagsitem);
            }
            hash.Add(base.GetHashCode());
            return hash.ToHashCode();
        }
        
        public override int GetHashCode(ISkyrimMajorRecordGetter item)
        {
            return GetHashCode(item: (ITextureSetGetter)item);
        }
        
        public override int GetHashCode(IMajorRecordGetter item)
        {
            return GetHashCode(item: (ITextureSetGetter)item);
        }
        
        #endregion
        
        
        public override object GetNew()
        {
            return TextureSet.GetNew();
        }
        
        #region Mutagen
        public IEnumerable<IFormLinkGetter> EnumerateFormLinks(ITextureSetGetter obj)
        {
            foreach (var item in base.EnumerateFormLinks(obj))
            {
                yield return item;
            }
            yield break;
        }
        
        public IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(ITextureSetGetter obj, AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType)
        {
            foreach (var item in base.EnumerateAssetLinks(obj, queryCategories, linkCache, assetType))
            {
                yield return item;
            }
            if (queryCategories.HasFlag(AssetLinkQuery.Listed))
            {
                if (obj.Diffuse != null)
                {
                    yield return obj.Diffuse;
                }
                if (obj.NormalOrGloss != null)
                {
                    yield return obj.NormalOrGloss;
                }
                if (obj.EnvironmentMaskOrSubsurfaceTint != null)
                {
                    yield return obj.EnvironmentMaskOrSubsurfaceTint;
                }
                if (obj.GlowOrDetailMap != null)
                {
                    yield return obj.GlowOrDetailMap;
                }
                if (obj.Height != null)
                {
                    yield return obj.Height;
                }
                if (obj.Environment != null)
                {
                    yield return obj.Environment;
                }
                if (obj.Multilayer != null)
                {
                    yield return obj.Multilayer;
                }
                if (obj.BacklightMaskOrSpecular != null)
                {
                    yield return obj.BacklightMaskOrSpecular;
                }
            }
            yield break;
        }
        
        #region Duplicate
        public TextureSet Duplicate(
            ITextureSetGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            var newRec = new TextureSet(formKey, item.FormVersion);
            newRec.DeepCopyIn(item, default(ErrorMaskBuilder?), copyMask);
            return newRec;
        }
        
        public override SkyrimMajorRecord Duplicate(
            ISkyrimMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITextureSetGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        public override MajorRecord Duplicate(
            IMajorRecordGetter item,
            FormKey formKey,
            TranslationCrystal? copyMask)
        {
            return this.Duplicate(
                item: (ITextureSetGetter)item,
                formKey: formKey,
                copyMask: copyMask);
        }
        
        #endregion
        
        #endregion
        
    }
    internal partial class TextureSetSetterTranslationCommon : SkyrimMajorRecordSetterTranslationCommon
    {
        public new static readonly TextureSetSetterTranslationCommon Instance = new TextureSetSetterTranslationCommon();

        #region DeepCopyIn
        public void DeepCopyIn(
            ITextureSetInternal item,
            ITextureSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                item,
                rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
        }
        
        public void DeepCopyIn(
            ITextureSet item,
            ITextureSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            base.DeepCopyIn(
                (ISkyrimMajorRecord)item,
                (ISkyrimMajorRecordGetter)rhs,
                errorMask,
                copyMask,
                deepCopy: deepCopy);
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.ObjectBounds) ?? true))
            {
                errorMask?.PushIndex((int)TextureSet_FieldIndex.ObjectBounds);
                try
                {
                    if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.ObjectBounds) ?? true))
                    {
                        item.ObjectBounds = rhs.ObjectBounds.DeepCopy(
                            copyMask: copyMask?.GetSubCrystal((int)TextureSet_FieldIndex.ObjectBounds),
                            errorMask: errorMask);
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            item.Diffuse = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.Diffuse, rhs.Diffuse);
            item.NormalOrGloss = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.NormalOrGloss, rhs.NormalOrGloss);
            item.EnvironmentMaskOrSubsurfaceTint = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.EnvironmentMaskOrSubsurfaceTint, rhs.EnvironmentMaskOrSubsurfaceTint);
            item.GlowOrDetailMap = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.GlowOrDetailMap, rhs.GlowOrDetailMap);
            item.Height = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.Height, rhs.Height);
            item.Environment = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.Environment, rhs.Environment);
            item.Multilayer = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.Multilayer, rhs.Multilayer);
            item.BacklightMaskOrSpecular = PluginUtilityTranslation.AssetNullableDeepCopyIn(item.BacklightMaskOrSpecular, rhs.BacklightMaskOrSpecular);
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Decal) ?? true))
            {
                errorMask?.PushIndex((int)TextureSet_FieldIndex.Decal);
                try
                {
                    if(rhs.Decal is {} rhsDecal)
                    {
                        item.Decal = rhsDecal.DeepCopy(
                            errorMask: errorMask,
                            copyMask?.GetSubCrystal((int)TextureSet_FieldIndex.Decal));
                    }
                    else
                    {
                        item.Decal = default;
                    }
                }
                catch (Exception ex)
                when (errorMask != null)
                {
                    errorMask.ReportException(ex);
                }
                finally
                {
                    errorMask?.PopIndex();
                }
            }
            if ((copyMask?.GetShouldTranslate((int)TextureSet_FieldIndex.Flags) ?? true))
            {
                item.Flags = rhs.Flags;
            }
            DeepCopyInCustom(
                item: item,
                rhs: rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        partial void DeepCopyInCustom(
            ITextureSet item,
            ITextureSetGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy);
        public override void DeepCopyIn(
            ISkyrimMajorRecordInternal item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITextureSetInternal)item,
                rhs: (ITextureSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            ISkyrimMajorRecord item,
            ISkyrimMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITextureSet)item,
                rhs: (ITextureSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecordInternal item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITextureSetInternal)item,
                rhs: (ITextureSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        public override void DeepCopyIn(
            IMajorRecord item,
            IMajorRecordGetter rhs,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask,
            bool deepCopy)
        {
            this.DeepCopyIn(
                item: (ITextureSet)item,
                rhs: (ITextureSetGetter)rhs,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: deepCopy);
        }
        
        #endregion
        
        public TextureSet DeepCopy(
            ITextureSetGetter item,
            TextureSet.TranslationMask? copyMask = null)
        {
            TextureSet ret = (TextureSet)((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).GetNew();
            ((TextureSetSetterTranslationCommon)((ITextureSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: null,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            return ret;
        }
        
        public TextureSet DeepCopy(
            ITextureSetGetter item,
            out TextureSet.ErrorMask errorMask,
            TextureSet.TranslationMask? copyMask = null)
        {
            var errorMaskBuilder = new ErrorMaskBuilder();
            TextureSet ret = (TextureSet)((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).GetNew();
            ((TextureSetSetterTranslationCommon)((ITextureSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                ret,
                item,
                errorMask: errorMaskBuilder,
                copyMask: copyMask?.GetCrystal(),
                deepCopy: true);
            errorMask = TextureSet.ErrorMask.Factory(errorMaskBuilder);
            return ret;
        }
        
        public TextureSet DeepCopy(
            ITextureSetGetter item,
            ErrorMaskBuilder? errorMask,
            TranslationCrystal? copyMask = null)
        {
            TextureSet ret = (TextureSet)((TextureSetCommon)((ITextureSetGetter)item).CommonInstance()!).GetNew();
            ((TextureSetSetterTranslationCommon)((ITextureSetGetter)ret).CommonSetterTranslationInstance()!).DeepCopyIn(
                item: ret,
                rhs: item,
                errorMask: errorMask,
                copyMask: copyMask,
                deepCopy: true);
            return ret;
        }
        
    }
    #endregion

}

namespace Mutagen.Bethesda.Skyrim
{
    public partial class TextureSet
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TextureSet_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => TextureSet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TextureSetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterInstance()
        {
            return TextureSetSetterCommon.Instance;
        }
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TextureSetSetterTranslationCommon.Instance;

        #endregion

    }
}

#region Modules
#region Binary Translation
namespace Mutagen.Bethesda.Skyrim
{
    public partial class TextureSetBinaryWriteTranslation :
        SkyrimMajorRecordBinaryWriteTranslation,
        IBinaryWriteTranslator
    {
        public new static readonly TextureSetBinaryWriteTranslation Instance = new();

        public static void WriteRecordTypes(
            ITextureSetGetter item,
            MutagenWriter writer,
            TypedWriteParams translationParams)
        {
            MajorRecordBinaryWriteTranslation.WriteRecordTypes(
                item: item,
                writer: writer,
                translationParams: translationParams);
            var ObjectBoundsItem = item.ObjectBounds;
            ((ObjectBoundsBinaryWriteTranslation)((IBinaryItem)ObjectBoundsItem).BinaryWriteTranslator).Write(
                item: ObjectBoundsItem,
                writer: writer,
                translationParams: translationParams);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Diffuse?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.TX00),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.NormalOrGloss?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.TX01),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.EnvironmentMaskOrSubsurfaceTint?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.TX02),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.GlowOrDetailMap?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.TX03),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Height?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.TX04),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Environment?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.TX05),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.Multilayer?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.TX06),
                binaryType: StringBinaryType.NullTerminate);
            StringBinaryTranslation.Instance.WriteNullable(
                writer: writer,
                item: item.BacklightMaskOrSpecular?.GivenPath,
                header: translationParams.ConvertToCustom(RecordTypes.TX07),
                binaryType: StringBinaryType.NullTerminate);
            if (item.Decal is {} DecalItem)
            {
                ((DecalBinaryWriteTranslation)((IBinaryItem)DecalItem).BinaryWriteTranslator).Write(
                    item: DecalItem,
                    writer: writer,
                    translationParams: translationParams);
            }
            EnumBinaryTranslation<TextureSet.Flag, MutagenFrame, MutagenWriter>.Instance.WriteNullable(
                writer,
                item.Flags,
                length: 2,
                header: translationParams.ConvertToCustom(RecordTypes.DNAM));
        }

        public void Write(
            MutagenWriter writer,
            ITextureSetGetter item,
            TypedWriteParams translationParams)
        {
            PluginUtilityTranslation.WriteMajorRecord(
                writer: writer,
                item: item,
                translationParams: translationParams,
                type: RecordTypes.TXST,
                writeEmbedded: SkyrimMajorRecordBinaryWriteTranslation.WriteEmbedded,
                writeRecordTypes: WriteRecordTypes);
        }

        public override void Write(
            MutagenWriter writer,
            object item,
            TypedWriteParams translationParams = default)
        {
            Write(
                item: (ITextureSetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            ISkyrimMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITextureSetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

        public override void Write(
            MutagenWriter writer,
            IMajorRecordGetter item,
            TypedWriteParams translationParams)
        {
            Write(
                item: (ITextureSetGetter)item,
                writer: writer,
                translationParams: translationParams);
        }

    }

    internal partial class TextureSetBinaryCreateTranslation : SkyrimMajorRecordBinaryCreateTranslation
    {
        public new static readonly TextureSetBinaryCreateTranslation Instance = new TextureSetBinaryCreateTranslation();

        public override RecordType RecordType => RecordTypes.TXST;
        public static ParseResult FillBinaryRecordTypes(
            ITextureSetInternal item,
            MutagenFrame frame,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            RecordType nextRecordType,
            int contentLength,
            TypedParseParams translationParams = default)
        {
            nextRecordType = translationParams.ConvertToStandard(nextRecordType);
            switch (nextRecordType.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    item.ObjectBounds = Mutagen.Bethesda.Skyrim.ObjectBounds.CreateFromBinary(frame: frame);
                    return (int)TextureSet_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.TX00:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Diffuse = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)TextureSet_FieldIndex.Diffuse;
                }
                case RecordTypeInts.TX01:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.NormalOrGloss = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)TextureSet_FieldIndex.NormalOrGloss;
                }
                case RecordTypeInts.TX02:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.EnvironmentMaskOrSubsurfaceTint = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint;
                }
                case RecordTypeInts.TX03:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.GlowOrDetailMap = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)TextureSet_FieldIndex.GlowOrDetailMap;
                }
                case RecordTypeInts.TX04:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Height = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)TextureSet_FieldIndex.Height;
                }
                case RecordTypeInts.TX05:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Environment = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)TextureSet_FieldIndex.Environment;
                }
                case RecordTypeInts.TX06:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Multilayer = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)TextureSet_FieldIndex.Multilayer;
                }
                case RecordTypeInts.TX07:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.BacklightMaskOrSpecular = AssetLinkBinaryTranslation.Instance.Parse<SkyrimTextureAssetType>(reader: frame.SpawnWithLength(contentLength));
                    return (int)TextureSet_FieldIndex.BacklightMaskOrSpecular;
                }
                case RecordTypeInts.DODT:
                {
                    item.Decal = Mutagen.Bethesda.Skyrim.Decal.CreateFromBinary(frame: frame);
                    return (int)TextureSet_FieldIndex.Decal;
                }
                case RecordTypeInts.DNAM:
                {
                    frame.Position += frame.MetaData.Constants.SubConstants.HeaderLength;
                    item.Flags = EnumBinaryTranslation<TextureSet.Flag, MutagenFrame, MutagenWriter>.Instance.Parse(
                        reader: frame,
                        length: contentLength);
                    return (int)TextureSet_FieldIndex.Flags;
                }
                default:
                    return SkyrimMajorRecordBinaryCreateTranslation.FillBinaryRecordTypes(
                        item: item,
                        frame: frame,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        nextRecordType: nextRecordType,
                        contentLength: contentLength,
                        translationParams: translationParams.WithNoConverter());
            }
        }

    }

}
namespace Mutagen.Bethesda.Skyrim
{
    #region Binary Write Mixins
    public static class TextureSetBinaryTranslationMixIn
    {
    }
    #endregion


}
namespace Mutagen.Bethesda.Skyrim
{
    internal partial class TextureSetBinaryOverlay :
        SkyrimMajorRecordBinaryOverlay,
        ITextureSetGetter
    {
        #region Common Routing
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILoquiRegistration ILoquiObject.Registration => TextureSet_Registration.Instance;
        public new static ILoquiRegistration StaticRegistration => TextureSet_Registration.Instance;
        [DebuggerStepThrough]
        protected override object CommonInstance() => TextureSetCommon.Instance;
        [DebuggerStepThrough]
        protected override object CommonSetterTranslationInstance() => TextureSetSetterTranslationCommon.Instance;

        #endregion

        void IPrintable.Print(StructuredStringBuilder sb, string? name) => this.Print(sb, name);

        public override IEnumerable<IAssetLinkGetter> EnumerateAssetLinks(AssetLinkQuery queryCategories, IAssetLinkCache? linkCache, Type? assetType) => TextureSetCommon.Instance.EnumerateAssetLinks(this, queryCategories, linkCache, assetType);
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        protected override object BinaryWriteTranslator => TextureSetBinaryWriteTranslation.Instance;
        void IBinaryItem.WriteToBinary(
            MutagenWriter writer,
            TypedWriteParams translationParams = default)
        {
            ((TextureSetBinaryWriteTranslation)this.BinaryWriteTranslator).Write(
                item: this,
                writer: writer,
                translationParams: translationParams);
        }
        protected override Type LinkType => typeof(ITextureSet);


        #region ObjectBounds
        private RangeInt32? _ObjectBoundsLocation;
        private IObjectBoundsGetter? _ObjectBounds => _ObjectBoundsLocation.HasValue ? ObjectBoundsBinaryOverlay.ObjectBoundsFactory(_recordData.Slice(_ObjectBoundsLocation!.Value.Min), _package) : default;
        public IObjectBoundsGetter ObjectBounds => _ObjectBounds ?? new ObjectBounds();
        #endregion
        #region Diffuse
        private int? _DiffuseLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? Diffuse => _DiffuseLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _DiffuseLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region NormalOrGloss
        private int? _NormalOrGlossLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? NormalOrGloss => _NormalOrGlossLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _NormalOrGlossLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region EnvironmentMaskOrSubsurfaceTint
        private int? _EnvironmentMaskOrSubsurfaceTintLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? EnvironmentMaskOrSubsurfaceTint => _EnvironmentMaskOrSubsurfaceTintLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EnvironmentMaskOrSubsurfaceTintLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region GlowOrDetailMap
        private int? _GlowOrDetailMapLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? GlowOrDetailMap => _GlowOrDetailMapLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _GlowOrDetailMapLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region Height
        private int? _HeightLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? Height => _HeightLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _HeightLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region Environment
        private int? _EnvironmentLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? Environment => _EnvironmentLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _EnvironmentLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region Multilayer
        private int? _MultilayerLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? Multilayer => _MultilayerLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _MultilayerLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region BacklightMaskOrSpecular
        private int? _BacklightMaskOrSpecularLocation;
        public AssetLinkGetter<SkyrimTextureAssetType>? BacklightMaskOrSpecular => _BacklightMaskOrSpecularLocation.HasValue ? new AssetLinkGetter<SkyrimTextureAssetType>(BinaryStringUtility.ProcessWholeToZString(HeaderTranslation.ExtractSubrecordMemory(_recordData, _BacklightMaskOrSpecularLocation.Value, _package.MetaData.Constants), encoding: _package.MetaData.Encodings.NonTranslated)) : default(AssetLinkGetter<SkyrimTextureAssetType>?);
        #endregion
        #region Decal
        private RangeInt32? _DecalLocation;
        public IDecalGetter? Decal => _DecalLocation.HasValue ? DecalBinaryOverlay.DecalFactory(_recordData.Slice(_DecalLocation!.Value.Min), _package) : default;
        #endregion
        #region Flags
        private int? _FlagsLocation;
        public TextureSet.Flag? Flags => _FlagsLocation.HasValue ? (TextureSet.Flag)BinaryPrimitives.ReadUInt16LittleEndian(HeaderTranslation.ExtractSubrecordMemory(_recordData, _FlagsLocation!.Value, _package.MetaData.Constants)) : default(TextureSet.Flag?);
        #endregion
        partial void CustomFactoryEnd(
            OverlayStream stream,
            int finalPos,
            int offset);

        partial void CustomCtor();
        protected TextureSetBinaryOverlay(
            MemoryPair memoryPair,
            BinaryOverlayFactoryPackage package)
            : base(
                memoryPair: memoryPair,
                package: package)
        {
            this.CustomCtor();
        }

        public static ITextureSetGetter TextureSetFactory(
            OverlayStream stream,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            stream = Decompression.DecompressStream(stream);
            stream = ExtractRecordMemory(
                stream: stream,
                meta: package.MetaData.Constants,
                memoryPair: out var memoryPair,
                offset: out var offset,
                finalPos: out var finalPos);
            var ret = new TextureSetBinaryOverlay(
                memoryPair: memoryPair,
                package: package);
            ret._package.FormVersion = ret;
            ret.CustomFactoryEnd(
                stream: stream,
                finalPos: finalPos,
                offset: offset);
            ret.FillSubrecordTypes(
                majorReference: ret,
                stream: stream,
                finalPos: finalPos,
                offset: offset,
                translationParams: translationParams,
                fill: ret.FillRecordType);
            return ret;
        }

        public static ITextureSetGetter TextureSetFactory(
            ReadOnlyMemorySlice<byte> slice,
            BinaryOverlayFactoryPackage package,
            TypedParseParams translationParams = default)
        {
            return TextureSetFactory(
                stream: new OverlayStream(slice, package),
                package: package,
                translationParams: translationParams);
        }

        public override ParseResult FillRecordType(
            OverlayStream stream,
            int finalPos,
            int offset,
            RecordType type,
            PreviousParse lastParsed,
            Dictionary<RecordType, int>? recordParseCount,
            TypedParseParams translationParams = default)
        {
            type = translationParams.ConvertToStandard(type);
            switch (type.TypeInt)
            {
                case RecordTypeInts.OBND:
                {
                    _ObjectBoundsLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)TextureSet_FieldIndex.ObjectBounds;
                }
                case RecordTypeInts.TX00:
                {
                    _DiffuseLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.Diffuse;
                }
                case RecordTypeInts.TX01:
                {
                    _NormalOrGlossLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.NormalOrGloss;
                }
                case RecordTypeInts.TX02:
                {
                    _EnvironmentMaskOrSubsurfaceTintLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.EnvironmentMaskOrSubsurfaceTint;
                }
                case RecordTypeInts.TX03:
                {
                    _GlowOrDetailMapLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.GlowOrDetailMap;
                }
                case RecordTypeInts.TX04:
                {
                    _HeightLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.Height;
                }
                case RecordTypeInts.TX05:
                {
                    _EnvironmentLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.Environment;
                }
                case RecordTypeInts.TX06:
                {
                    _MultilayerLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.Multilayer;
                }
                case RecordTypeInts.TX07:
                {
                    _BacklightMaskOrSpecularLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.BacklightMaskOrSpecular;
                }
                case RecordTypeInts.DODT:
                {
                    _DecalLocation = new RangeInt32((stream.Position - offset), finalPos - offset);
                    return (int)TextureSet_FieldIndex.Decal;
                }
                case RecordTypeInts.DNAM:
                {
                    _FlagsLocation = (stream.Position - offset);
                    return (int)TextureSet_FieldIndex.Flags;
                }
                default:
                    return base.FillRecordType(
                        stream: stream,
                        finalPos: finalPos,
                        offset: offset,
                        type: type,
                        lastParsed: lastParsed,
                        recordParseCount: recordParseCount,
                        translationParams: translationParams.WithNoConverter());
            }
        }
        #region To String

        public override void Print(
            StructuredStringBuilder sb,
            string? name = null)
        {
            TextureSetMixIn.Print(
                item: this,
                sb: sb,
                name: name);
        }

        #endregion

        public override string ToString()
        {
            return MajorRecordPrinter<TextureSet>.ToString(this);
        }

        #region Equals and Hash
        public override bool Equals(object? obj)
        {
            if (obj is IFormLinkGetter formLink)
            {
                return formLink.Equals(this);
            }
            if (obj is not ITextureSetGetter rhs) return false;
            return ((TextureSetCommon)((ITextureSetGetter)this).CommonInstance()!).Equals(this, rhs, equalsMask: null);
        }

        public bool Equals(ITextureSetGetter? obj)
        {
            return ((TextureSetCommon)((ITextureSetGetter)this).CommonInstance()!).Equals(this, obj, equalsMask: null);
        }

        public override int GetHashCode() => ((TextureSetCommon)((ITextureSetGetter)this).CommonInstance()!).GetHashCode(this);

        #endregion

    }

}
#endregion

#endregion

